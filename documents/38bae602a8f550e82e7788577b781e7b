<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Design Patterns (book),Design Patterns Patterns,1994,Abstract factory pattern,Abstract type,Adapter pattern,Black box,Bridge pattern,Builder pattern,C++,Callback (computer science)" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Design_Patterns_(book)&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Design_Patterns_(book)&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Design Patterns (book) - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Design_Patterns_(book)";
		var wgTitle = "Design Patterns (book)";
		var wgAction = "view";
		var wgArticleId = "40394";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281489009;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Design_Patterns_book skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Design Patterns (book)</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<div class="dablink">This article is about the book by Gamma et al.  For other uses, see <a href="/wiki/Design_pattern" title="Design pattern">design pattern</a>.</div>
<p><i><b>Design Patterns: Elements of Reusable Object-Oriented Software</b></i> (<a href="/wiki/Special:BookSources/0201633612" class="internal">ISBN 0-201-63361-2</a>) is a <a href="/wiki/Software_engineering" title="Software engineering">software engineering</a> book describing recurring solutions to common problems in software design. The book's authors are <a href="/wiki/Erich_Gamma" title="Erich Gamma">Erich Gamma</a>, <a href="/wiki/Richard_Helm" title="Richard Helm">Richard Helm</a>, <a href="/wiki/Ralph_Johnson" title="Ralph Johnson">Ralph Johnson</a> and <a href="/wiki/John_Vlissides" title="John Vlissides">John Vlissides</a> with a foreword by <a href="/wiki/Grady_Booch" title="Grady Booch">Grady Booch</a>. They are often referred to as the <i><b>GoF</b></i>, or <i><b>Gang of Four</b></i>. The book is divided into two parts, with the first two chapters exploring the capabilities and pitfalls of object-oriented programming, and the remaining chapters describing 23 classic <a href="/wiki/Design_pattern_(computer_science)" title="Design pattern (computer science)">software design patterns</a>. The book includes examples in <a href="/wiki/C%2B%2B" title="C++">C++</a> and <a href="/wiki/Smalltalk" title="Smalltalk">Smalltalk</a>. It won a <a href="/wiki/Jolt_Award" title="Jolt Award" class="mw-redirect">Jolt productivity award</a> in 1994. <sup id="cite_ref-0" class="reference"><a href="#cite_note-0" title=""><span>[</span>1<span>]</span></a></sup></p>
<p>The original publication date of the book was <span class="mw-formatted-date" title="1994-10-21"><span class="mw-formatted-date" title="10-21"><a href="/wiki/October_21" title="October 21">October 21</a></span>, <a href="/wiki/1994" title="1994">1994</a></span> with a 1995 copyright, and as of April 2007, the book was in its 36th printing. The book was first made available to the public at <a href="/wiki/OOPSLA" title="OOPSLA">OOPSLA</a> meeting held in Portland, Oregon in October 1994. It has been highly influential to the field of software engineering and is regarded as an important source for object-oriented design theory and practice. More than 500,000 copies have been sold in English and in 13 other languages.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Introduction.2C_Chapter_1"><span class="tocnumber">1</span> <span class="toctext">Introduction, Chapter 1</span></a></li>
<li class="toclevel-1"><a href="#Case_study.2C_Chapter_2"><span class="tocnumber">2</span> <span class="toctext">Case study, Chapter 2</span></a>
<ul>
<li class="toclevel-2"><a href="#Document_Structure"><span class="tocnumber">2.1</span> <span class="toctext">Document Structure</span></a></li>
<li class="toclevel-2"><a href="#Formatting"><span class="tocnumber">2.2</span> <span class="toctext">Formatting</span></a></li>
<li class="toclevel-2"><a href="#Embellishing_the_User_Interface"><span class="tocnumber">2.3</span> <span class="toctext">Embellishing the User Interface</span></a></li>
<li class="toclevel-2"><a href="#Supporting_Multiple_Look-And-Feel_Standards"><span class="tocnumber">2.4</span> <span class="toctext">Supporting Multiple Look-And-Feel Standards</span></a></li>
<li class="toclevel-2"><a href="#Supporting_Multiple_Window_Systems"><span class="tocnumber">2.5</span> <span class="toctext">Supporting Multiple Window Systems</span></a></li>
<li class="toclevel-2"><a href="#User_Operations"><span class="tocnumber">2.6</span> <span class="toctext">User Operations</span></a></li>
<li class="toclevel-2"><a href="#Spell_Check_and_Hyphenation"><span class="tocnumber">2.7</span> <span class="toctext">Spell Check and Hyphenation</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Creational_patterns"><span class="tocnumber">3</span> <span class="toctext">Creational patterns</span></a></li>
<li class="toclevel-1"><a href="#Structural_patterns"><span class="tocnumber">4</span> <span class="toctext">Structural patterns</span></a></li>
<li class="toclevel-1"><a href="#Behavioral_patterns"><span class="tocnumber">5</span> <span class="toctext">Behavioral patterns</span></a></li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">6</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">7</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">8</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Introduction.2C_Chapter_1" id="Introduction.2C_Chapter_1"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Design_Patterns_(book)&amp;action=edit&amp;section=1" title="Edit section: Introduction, Chapter 1">edit</a>]</span> <span class="mw-headline">Introduction, Chapter 1</span></h2>
<p>Chapter 1 is a discussion of <a href="/wiki/Object-oriented" title="Object-oriented" class="mw-redirect">object-oriented</a> design techniques, based on the authors' experience, which they believe would lead to good object-oriented software design, including:</p>
<ul>
<li>"Program to an 'interface', not an '<b>implementation'</b>." (Gang of Four 1995:18)</li>
<li>"Favor '<a href="/wiki/Object_composition" title="Object composition">object composition</a>' over '<a href="/wiki/Inheritance_(computer_science)" title="Inheritance (computer science)">class inheritance</a>'." (Gang of Four 1995:20)</li>
</ul>
<p>The authors claim the following as advantages of <a href="/wiki/Interface_(computer_science)" title="Interface (computer science)">interfaces</a> over implementation:</p>
<ul>
<li>clients remain unaware of the specific types of objects they use, as long as the object adheres to the interface</li>
<li>clients remain unaware of the classes that implement these objects; clients only know about the abstract class(es) defining the interface</li>
</ul>
<p>Use of an interface also leads to <a href="/wiki/Dynamic_binding" title="Dynamic binding">dynamic binding</a> and <a href="/wiki/Polymorphism_in_object-oriented_programming" title="Polymorphism in object-oriented programming">polymorphism</a>, which is consequentially important to object-oriented programming.</p>
<p>The authors refer to <a href="/wiki/Inheritance" title="Inheritance">inheritance</a> as <i><a href="/wiki/White_box_(software_engineering)" title="White box (software engineering)">white-box reuse</a></i>, with white-box referring to visibility, because the internals of parent classes are often visible to <a href="/wiki/Subclass_(computer_science)" title="Subclass (computer science)">subclasses</a>. In contrast, the authors refer to <a href="/wiki/Object_composition" title="Object composition">object composition</a> (in which objects with well-defined interfaces are used dynamically at runtime by objects obtaining references to other objects) as <i><a href="/wiki/Black_box" title="Black box">black-box reuse</a></i> because no internal details of composed objects need be visible in the code using them.</p>
<p>The authors discuss the tension between inheritance and encapsulation at length and state that in their experience, designers overuse inheritance (Gang of Four 1995:20). The danger is stated as follows:</p>
<dl>
<dd>"Because inheritance exposes a <a href="/wiki/Subclass_(computer_science)" title="Subclass (computer science)">subclass</a> to details of its parent's implementation, it's often said that 'inheritance breaks encapsulation'". (Gang of Four1995:19)</dd>
</dl>
<p>They warn that the implementation of a subclass can become so bound up with the implementation of its parent class that any change in the parent's implementation will force the subclass to change. Futhermore, they claim that a way to avoid this is to inherit only from abstract classes--but then, they point out that there is minimal code reuse.</p>
<p>Using inheritance is recommended mainly when adding to the functionality of existing components, reusing most of the old code and adding relatively small amounts of new code.</p>
<p>To the authors, 'delegation' is an extreme form of object composition that can always be used to replace inheritance. Delegation involves two objects: a 'sender' passes itself to a 'delegate' to let the delegate refer to the sender. Thus the link between two parts of a system are established only at runtime, not at compile-time. The <a href="/wiki/Callback_(computer_science)" title="Callback (computer science)">Callback</a> article has more information about delegation.</p>
<p>The authors also discuss so-called <b>parameterized types</b>, which are also known as <a href="/wiki/Generic_programming" title="Generic programming">generics</a> (Ada, Eiffel, Java, C#, VB.NET) or templates (C++). These allow any type to be defined without specifying all the other types it uses--the unspecified types are supplied as 'parameters' at the point of use.</p>
<p>The authors admit that delegation and parameterization are very powerful but add a warning:</p>
<dl>
<dd>"Dynamic, highly parameterized software is harder to understand and build than more static software." (Gang of Four 1995:21)</dd>
</dl>
<p>The authors further distinguish between '<a href="/wiki/Object_composition#Aggregation" title="Object composition">Aggregation</a>', where one object 'has' or 'is part of' another object (implying that an aggregate object and its owner have identical lifetimes) and <b>acquaintance</b>, where one object merely 'knows of' another object. Sometimes acquaintance is called 'association' or the 'using' relationship. Acquaintance objects may request operations of each other, but they aren't responsible for each other. Acquaintance is a weaker relationship than aggregation and suggests much looser coupling between objects, which can often be desirable for maximum maintainability in a design.</p>
<p>The authors employ the term 'toolkit' where others might today use 'class library', as in C# or Java. In their parlance, toolkits are the object-oriented equivalent of subroutine libraries, whereas a '<a href="/wiki/Framework" title="Framework">framework</a>' is a set of cooperating classes that make up a reusable design for a specific class of software. They state that <b>applications</b> are hard to design, <b>toolkits</b> are harder, and <b>frameworks</b> are the hardest to design.</p>
<p><a name="Case_study.2C_Chapter_2" id="Case_study.2C_Chapter_2"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Design_Patterns_(book)&amp;action=edit&amp;section=2" title="Edit section: Case study, Chapter 2">edit</a>]</span> <span class="mw-headline">Case study, Chapter 2</span></h2>
<p>Chapter 2 is a step-by-step case study on "the design of a 'What-You-See-Is-What-You-Get' (or 'WYSIWYG') document editor called Lexi." (pp33)</p>
<p>The chapter goes through seven problems that must be addressed in order to properly design Lexi, including any constraints that must be followed. Each problem is analyzed in-depth, and solutions are proposed. Each solution is explained in full, including <a href="/wiki/Pseudo-code" title="Pseudo-code" class="mw-redirect">pseudo-code</a> and <a href="/wiki/Unified_Modeling_Language" title="Unified Modeling Language">Unified Modeling Language</a> where appropriate.</p>
<p>Finally, each solution is associated directly with one or more design patterns. It is shown how the solution is a direct implementation of that design pattern.</p>
<p>The seven problems (including their constraints) and their solutions (including the pattern(s) referenced), are as follows:</p>
<p><a name="Document_Structure" id="Document_Structure"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Design_Patterns_(book)&amp;action=edit&amp;section=3" title="Edit section: Document Structure">edit</a>]</span> <span class="mw-headline">Document Structure</span></h3>
<p>The document is "an arrangement of basic graphical elements" such as characters, lines, other shapes, etc, that "capture the total information content of the document"(pp35). The structure of the document contains a collection of these elements, and each element can in turn be a substructure of other elements.</p>
<p><b>Problems and Constraints</b></p>
<ol>
<li>Text and graphics should be treated the same way (that is, graphics aren't a derived instance of text, nor vice versa)</li>
<li>The implementation should treat complex and simple structures the same way. It should not have to know the difference between the two.</li>
<li>Specific derivatives of abstract elements should have specialized analytical elements.</li>
</ol>
<p><b>Solution and Pattern</b></p>
<p>A <i>recursive composition</i> is a hierarchical structure of elements, that builds "increasingly complex elements out of simpler ones" (pp36). Each node in the structure knows of its own children and its parent. If an operation is to be performed on the whole structure, each node calls the operation on its children (recursively).</p>
<p>This is an implementation of the <a href="/wiki/Composite_pattern" title="Composite pattern">composite pattern</a>, which is a collection of nodes. The node is an <a href="/wiki/Abstract_type" title="Abstract type">abstract base class</a>, and derivatives can either be leaves (singular), or collections of other nodes (which in turn can contain leaves or collection-nodes). When an operation is performed on the parent, that operation is recursively passed down the hierarchy.</p>
<p><a name="Formatting" id="Formatting"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Design_Patterns_(book)&amp;action=edit&amp;section=4" title="Edit section: Formatting">edit</a>]</span> <span class="mw-headline">Formatting</span></h3>
<p>Formatting differs from structure. Formatting is a method of constructing a particular instance of the document's physical structure. This includes breaking text into lines, using hyphens, adjusting for margin widths, etc.</p>
<p><b>Problems and Constraints</b></p>
<ol>
<li>Balance between (formatting) quality, speed and storage space</li>
<li>Keep formatting independent (uncoupled from) the document structure.</li>
</ol>
<p><b>Solution and Pattern</b></p>
<p>A <i>Compositor</i> class will encapsulate the algorithm used to format a composition. Compositor is a subclass of the primitive object of the document's structure. A Compositor has an associated instance of a Composition object. When a Compositor runs its <code>Compose()</code>, it iterates through each element of its associated Composition, and rearranges the structure by inserting Row and Column objects as needed.</p>
<p>The Compositor itself is an abstract class, allowing for derivative classes to use different formatting algorithms (such as double-spacing, wider margins, etc.)</p>
<p>The <a href="/wiki/Strategy_pattern" title="Strategy pattern">Strategy Pattern</a> is used to accomplish this goal. A Strategy is a method of encapsulating multiple algorithms to be used based on a changing context. In this case, formatting should be different, depending on if text, graphics, simple elements, etc, are being formatted.</p>
<p><a name="Embellishing_the_User_Interface" id="Embellishing_the_User_Interface"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Design_Patterns_(book)&amp;action=edit&amp;section=5" title="Edit section: Embellishing the User Interface">edit</a>]</span> <span class="mw-headline">Embellishing the User Interface</span></h3>
<p>The ability to change the graphical interface that the user uses to interact with the document.</p>
<p><b>Problems and Constraints</b></p>
<ol>
<li>Demarcate a page of text with a border around the editing area</li>
<li>Scroll bars that let the user view different parts of the page</li>
<li>User interface objects should not know about the embellishments</li>
<li>Avoid an "explosion of classes" that would be caused by subclassing for "every possible combination of embellishments" and elements (p44)</li>
</ol>
<p><b>Solution and Pattern</b></p>
<p>The use of a <i>transparent enclosure</i> allows elements that augment the behaviour of composition to be added to a composition. These elements, such as Border and Scroller, are special subclasses of the singular element itself. This allows the composition to be augmented, effectively adding state-like elements. Since these augmentations are part of the structure, their appropriate <code>Operation()</code> will be called when the structure's <code>Operation()</code> is called. This means that the client does not need any special knowledge or interface with the structure in order to use the embellishments.</p>
<p>This is a <a href="/wiki/Decorator_pattern" title="Decorator pattern">Decorator pattern</a>, one that adds responsibilities to an object without modifying the object itself.</p>
<p><a name="Supporting_Multiple_Look-And-Feel_Standards" id="Supporting_Multiple_Look-And-Feel_Standards"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Design_Patterns_(book)&amp;action=edit&amp;section=6" title="Edit section: Supporting Multiple Look-And-Feel Standards">edit</a>]</span> <span class="mw-headline">Supporting Multiple Look-And-Feel Standards</span></h3>
<p><a href="/wiki/Look_and_feel" title="Look and feel">Look-and-feel</a> refers to <a href="/wiki/Platform_(computing)" title="Platform (computing)" class="mw-redirect">platform</a>-specific UI standards. These standards "define guidelines for how applications appear and react to the user" (pp47).</p>
<p><b>Problems and Constraints</b></p>
<ol>
<li>The editor must implement standards of multiple platforms so that it is <a href="/wiki/Porting" title="Porting">portable</a></li>
<li>Easily adapt to new and emergent standards</li>
<li>Allow for run-time changing of look-and-feel (ie: No <a href="/wiki/Hard_coded" title="Hard coded" class="mw-redirect">hard-coding</a>)</li>
<li>Have a set of abstract elemental subclasses for each category of elements (ScrollBar, Buttons, etc)</li>
<li>Have a set of concrete subclasses for each abstract subclass that can have a different look-and-feel standard. (ScrollBar having MotifScrollBar and PresentationScrollBar for Motif and Presentation look-and-feels)</li>
</ol>
<p><b>Solution and Pattern</b></p>
<p>Since object creation of different concrete objects cannot be done at runtime, the object creation process must be abstracted. This is done with an abstract guiFactory, which takes on the responsibility of creating UI elements. The abstract guiFactory has concrete implementations, such as MotifFactory, which creates concrete elements of the appropriate type (MotifScrollBar). In this way, the program need only ask for a ScrollBar and, at run-time, it will be given the correct concrete element.</p>
<p>This is an <a href="/wiki/Abstract_factory_pattern" title="Abstract factory pattern">Abstract Factory</a>. A regular factory creates concrete objects of one type. An abstract factory creates concrete objects of varying types, depending on the concrete implementation of the factory itself. Its ability to focus on not just concrete objects, but entire <i>families</i> of concrete objects "distinguishes it from other creational patterns, which involve only one kind of product object" (pp51).</p>
<p><a name="Supporting_Multiple_Window_Systems" id="Supporting_Multiple_Window_Systems"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Design_Patterns_(book)&amp;action=edit&amp;section=7" title="Edit section: Supporting Multiple Window Systems">edit</a>]</span> <span class="mw-headline">Supporting Multiple Window Systems</span></h3>
<p>Just as look-and-feel is different across platforms, so is the method of handling <a href="/wiki/Window_(computing)" title="Window (computing)">windows</a>. Each platform displays, lays out, handles input to and output from, and layers windows differently.</p>
<p><b>Problems and Constraints</b></p>
<ol>
<li>The document editor must run on as many of the "important and largely incompatible window systems" that exist (p. 52)</li>
<li>An Abstract Factory cannot be used. Due to differing standards, there will not be a common abstract class for each type of widget.</li>
<li>Do not create a new, nonstandard windowing system</li>
</ol>
<p><b>Solution and Pattern</b></p>
<p>It is possible to develop "our own abstract and concrete product classes", because "all window systems do generally the same thing" (p. 52). Each window system provides operations for drawing primitive shapes, iconifying/de-iconfiying, resizing, and refreshing window contents.</p>
<p>An abstract base <code>Window</code> class can be derived to the different types of existing windows, such as application, <a href="/w/index.php?title=Iconification&amp;action=edit&amp;redlink=1" class="new" title="Iconification (page does not exist)">iconified</a>, dialog. These classes will contain operations that are associated with windows, such as reshaping, graphically refreshing, etc. Each window contains elements, whose <code>Draw()</code> functions are called upon by the <code>Window</code>'s own draw-related functions.</p>
<p>In order to avoid having to create platform-specific Window subclasses for every possible platform, an interface will be used. The <code>Window</code> class will implement a <code>Window</code> implementation (<code>WindowImp</code>) abstract class. This class will then in turn be derived into multiple platform-specific implementations, each with platform-specific operations. Hence, only one set of <code>Window</code> classes are needed for each type of <code>Window</code>, and only one set of <code>WindowImp</code> classes are needed for each platform (rather than the <a href="/wiki/Cartesian_product" title="Cartesian product">Cartesian product</a> of all available types and platforms). In addition, adding a new window type does not require any modification of platform implementation, or vice-versa.</p>
<p>This is a <a href="/wiki/Bridge_pattern" title="Bridge pattern">Bridge pattern</a>. <code>Window</code> and <code>WindowImp</code> are different, but related. <code>Window</code> deals with windowing in the program, and <code>WindowImp</code> deals with windowing on a platform. One of them can change without ever having to modify the other. The Bridge pattern allows these two "separate class hierarchies to work together even as they evolve independently" (p. 54).</p>
<p><a name="User_Operations" id="User_Operations"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Design_Patterns_(book)&amp;action=edit&amp;section=8" title="Edit section: User Operations">edit</a>]</span> <span class="mw-headline">User Operations</span></h3>
<p>All actions the user can take with the document, ranging from entering text, changing formatting, quitting, saving, etc.</p>
<p><b>Problems and Constraints</b></p>
<ol>
<li>Operations must be accessed through different inputs, such as a menu option and a keyboard shortcut for the same command</li>
<li>Each option has an interface, which should be modifiable</li>
<li>Operations are implemented in several different classes</li>
<li>In order to avoid coupling, there must not be a lot of dependencies between implementation and user interface classes.</li>
<li>Undo and redo commands must be supported on most document changing operations, with no arbitrary limit on the number of levels of undo</li>
<li>Functions are not viable, since they don't undo/redo easily, are not easily associated with a state, and are hard to extend or reuse.</li>
<li>Menus should be treated like hierarchical composite structures. Hence, a menu is a menu item that contains menu items which may contain other menu items, etc.</li>
</ol>
<p><b>Solution and Pattern</b></p>
<p>Each menu item, rather than being instantiated with a list of parameters, is instead done with a <i>Command</i> object.</p>
<p>Command is an abstract object that only has a single abstract <code>Execute()</code> method. Derivative objects extend the <code>Execute()</code> method appropriately (i.e., the <code>PasteCommand.Execute()</code> would utilize the content's clipboard buffer). These objects can be used by widgets or buttons just as easily as they can be used by menu items.</p>
<p>To support undo and redo, <code>Command</code> is also given <code>Unexecute()</code> and <code>Reversible()</code>. In derivative classes, the former contains code that will undo that command, and the latter returns a boolean value that defines if the command is undoable. <code>Reversible()</code> allows some commands to be non-undoable, such as a Save command.</p>
<p>All executed <code>Commands</code> are kept in a list with a method of keeping a "present" marker directly after the most recently executed command. A request to undo will call the <code>Command.Unexecute()</code> directly before "present", then move "present" back one command. Conversely, a <code>Redo</code> request will call <code>Command.Execute()</code> after "present", and move "present" forward one.</p>
<p>This <code>Command</code> history is an implementation of the <a href="/wiki/Command_pattern" title="Command pattern">Command pattern</a>. It encapsulates requests in objects, and uses a common interface to access those requests. Thus, the client can handle different requests, and commands can be scattered throughout the application.</p>
<p><a name="Spell_Check_and_Hyphenation" id="Spell_Check_and_Hyphenation"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Design_Patterns_(book)&amp;action=edit&amp;section=9" title="Edit section: Spell Check and Hyphenation">edit</a>]</span> <span class="mw-headline">Spell Check and Hyphenation</span></h3>
<p>This is the document editor's ability to textually analyze the contents of a document. Although there are many analyses that can be performed, spell check and hyphenation-formatting are the focus.</p>
<p><b>Problems and Constraints</b></p>
<ol>
<li>Allow for multiple ways to check spelling and identify places for hyphenation</li>
<li>Allow for expansion for future analysis (e.g., word count, grammar check)</li>
<li>Be able to iterate through a text's contents without access to the text's actual structure (e.g., array, linked list, string)</li>
<li>Allow for any manner of traversal of document (beginning to end, end to beginning, alphabetical order, etc.)</li>
</ol>
<p><b>Solution and Pattern</b></p>
<p>Removing the integer-based index from the basic element allows for a different iteration interface to be implemented. This will require extra methods for traversal and object retrieval. These methods are put into an abstract <code>Iterator</code> interface. Each element then implements a derivation of the <code>Iterator</code>, depending on how that element keeps its list (<code>ArrayIterator</code>, <code>LinkListIterator</code>, etc.).</p>
<p>Functions for traversal and retrieval are put into the abstract Iterator interface. Future Iterators can be derived based on the type of list they will be iterating through, such as Arrays or Linked Lists. Thus, no matter what type of indexing method any implementation of the element uses, it will have the appropriate Iterator.</p>
<p>This is an implementation of the <a href="/wiki/Iterator_pattern" title="Iterator pattern">Iterator pattern</a>. It allows the client to traverse through any object collection, without needing to access the contents of the collection directly, or be concerned about the type of list the collection's structure uses.</p>
<p>Now that traversal has been handled, it is possible to analyze the elements of a structure. It is not feasible to build each type of analysis into the element structure themselves; every element would need to be coded, and much of the code would be the same for similar elements.</p>
<p>Instead, a generic <code>CheckMe()</code> method is built into the element's abstract class. Each Iterator is given a reference to a specific algorithm (such as spell check, grammar check, etc.). When that Iterator iterates through its collection, it calls each element's <code>CheckMe</code>, passing the specified algorithm. <code>CheckMe</code> then passes a reference to its element back to said algorithm for analysis.</p>
<p>Thus, to perform a spell check, a front-to-end iterator would be given a reference to a <code>SpellCheck</code> object. The iterator would then access each element, executing its <code>CheckMe()</code> method with the <code>SpellCheck</code> parameter. Each <code>CheckMe</code> would then call the <code>SpellCheck</code>, passing a reference to the appropriate element.</p>
<p>In this manner, any algorithm can be used with any traversal method, without hard-code coupling one with the other. For example, Find can be used as "find next" or "find previous", depending on if a "forward" iterator was used, or a "backwards" iterator.</p>
<p>In addition, the algorithm themselves can be responsible for dealing with different elements. For example, a <code>SpellCheck</code> algorithm would ignore a <code>Graphic</code> element, rather than having to program every <code>Graphic</code>-derived element to not send themselves to a <code>SpellCheck</code>.</p>
<p>This is an implementation of the <a href="/wiki/Visitor_pattern" title="Visitor pattern">Visitor pattern</a>.</p>
<p><a name="Creational_patterns" id="Creational_patterns"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Design_Patterns_(book)&amp;action=edit&amp;section=10" title="Edit section: Creational patterns">edit</a>]</span> <span class="mw-headline">Creational patterns</span></h2>
<p>These patterns have to do with class instantiation. They can be further divided into class-creation patterns and object-creational patterns. While class-creation patterns use inheritance effectively in the instantiation process, object-creation patterns use delegation to get the job done.</p>
<ul>
<li><a href="/wiki/Abstract_factory_pattern" title="Abstract factory pattern">Abstract Factory</a> groups object factories that have a common theme.</li>
<li><a href="/wiki/Builder_pattern" title="Builder pattern">Builder</a> constructs complex objects by separating construction and representation.</li>
<li><a href="/wiki/Factory_method_pattern" title="Factory method pattern">Factory Method</a> creates objects without specifying the exact class to create.</li>
<li><a href="/wiki/Prototype_pattern" title="Prototype pattern">Prototype</a> creates objects by cloning an existing object.</li>
<li><a href="/wiki/Singleton_pattern" title="Singleton pattern">Singleton</a> restricts object creation for a class to only one instance.</li>
</ul>
<p><a name="Structural_patterns" id="Structural_patterns"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Design_Patterns_(book)&amp;action=edit&amp;section=11" title="Edit section: Structural patterns">edit</a>]</span> <span class="mw-headline">Structural patterns</span></h2>
<p>These concern class and object composition. They use inheritance to compose interfaces and define ways to compose objects to obtain new functionality.</p>
<ul>
<li><a href="/wiki/Adapter_pattern" title="Adapter pattern">Adapter</a> allows classes with incompatible interfaces to work together by wrapping its own interface around that of an already existing class.</li>
<li><a href="/wiki/Bridge_pattern" title="Bridge pattern">Bridge</a> decouples an abstraction from its implementation so that the two can vary independently.</li>
<li><a href="/wiki/Composite_pattern" title="Composite pattern">Composite</a> composes zero-or-more similar objects so that they can be manipulated as one object.</li>
<li><a href="/wiki/Decorator_pattern" title="Decorator pattern">Decorator</a> dynamically adds/overrides behaviour in an existing method of an object.</li>
<li><a href="/wiki/Facade_pattern" title="Facade pattern">Facade</a> provides a simplified interface to a large body of code.</li>
<li><a href="/wiki/Flyweight_pattern" title="Flyweight pattern">Flyweight</a> reduces the cost of creating and manipulating a large number of similar objects.</li>
<li><a href="/wiki/Proxy_pattern" title="Proxy pattern">Proxy</a> provides a placeholder for another object to control access, reduce cost, and reduce complexity.</li>
</ul>
<p><a name="Behavioral_patterns" id="Behavioral_patterns"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Design_Patterns_(book)&amp;action=edit&amp;section=12" title="Edit section: Behavioral patterns">edit</a>]</span> <span class="mw-headline">Behavioral patterns</span></h2>
<p>Most of these design patterns are specifically concerned with communication between <b>objects</b>.</p>
<ul>
<li><a href="/wiki/Chain-of-responsibility_pattern" title="Chain-of-responsibility pattern">Chain of responsibility</a> delegates commands to a chain of processing objects.</li>
<li><a href="/wiki/Command_pattern" title="Command pattern">Command</a> creates objects which encapsulate actions and parameters.</li>
<li><a href="/wiki/Interpreter_pattern" title="Interpreter pattern">Interpreter</a> implements a specialized language.</li>
<li><a href="/wiki/Iterator_pattern" title="Iterator pattern">Iterator</a> accesses the elements of an object sequentially without exposing its underlying representation.</li>
<li><a href="/wiki/Mediator_pattern" title="Mediator pattern">Mediator</a> allows <a href="/wiki/Loose_coupling" title="Loose coupling">loose coupling</a> between classes by being the only class that has detailed knowledge of their methods.</li>
<li><a href="/wiki/Memento_pattern" title="Memento pattern">Memento</a> provides the ability to restore an object to its previous state (undo).</li>
<li><a href="/wiki/Observer_pattern" title="Observer pattern">Observer</a> is a publish/subscribe pattern which allows a number of observer objects to see an event.</li>
<li><a href="/wiki/State_pattern" title="State pattern">State</a> allows an object to alter its behavior when its internal state changes.</li>
<li><a href="/wiki/Strategy_pattern" title="Strategy pattern">Strategy</a> allows one of a family of algorithms to be selected on-the-fly at runtime.</li>
<li><a href="/wiki/Template_method_pattern" title="Template method pattern">Template method</a> defines the skeleton of an algorithm as an abstract class, allowing its subclasses to provide concrete behavior.</li>
<li><a href="/wiki/Visitor_pattern" title="Visitor pattern">Visitor</a> separates an algorithm from an object structure by moving the hierarchy of methods into one object.</li>
</ul>
<p>Source code in the book is <a href="http://hillside.net/patterns/DPBook/Source.html" class="external text" title="http://hillside.net/patterns/DPBook/Source.html" rel="nofollow">available online</a>.</p>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Design_Patterns_(book)&amp;action=edit&amp;section=13" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<ol class="references">
<li id="cite_note-0"><b><a href="#cite_ref-0" title="">^</a></b> <a href="http://ddj.com/joltawards/prev_bks.htm#1994" class="external text" title="http://ddj.com/joltawards/prev_bks.htm#1994" rel="nofollow">Jolt winners 1994</a></li>
</ol>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Design_Patterns_(book)&amp;action=edit&amp;section=14" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<ul>
<li><a href="/wiki/Design_pattern_(computer_science)" title="Design pattern (computer science)">Design pattern (computer science)</a></li>
<li><a href="/wiki/Enterprise_Integration_Patterns" title="Enterprise Integration Patterns">Enterprise Integration Patterns</a></li>
<li><a href="/wiki/Pedagogical_patterns" title="Pedagogical patterns">Pedagogical patterns</a></li>
<li><a href="/wiki/GRASP_(Object_Oriented_Design)" title="GRASP (Object Oriented Design)">GRASP (Object Oriented Design)</a></li>
</ul>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Design_Patterns_(book)&amp;action=edit&amp;section=15" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<ul>
<li><a href="http://mahemoff.com/paper/software/learningGoFPatterns/" class="external text" title="http://mahemoff.com/paper/software/learningGoFPatterns/" rel="nofollow">GoF Design Patterns: Rapid Learning Tips</a></li>
<li><a href="http://www.antropyconsulting.com/code/adobe_flex/" class="external text" title="http://www.antropyconsulting.com/code/adobe_flex/" rel="nofollow">Code Examples of Every Design Pattern in Adobe Flex 3 using ActionScript 3</a></li>
</ul>
<p><br /></p>
<table class="navbox" cellspacing="0" style=";">
<tr>
<td style="padding:2px;">
<table cellspacing="0" class="nowraplinks collapsible autocollapse" style="width:100%;background:transparent;color:inherit;;">
<tr>
<th style=";" colspan="2" class="navbox-title">
<div style="float:left; width:6em;text-align:left;">
<div class="noprint plainlinksneverexpand navbar" style="background:none; padding:0; font-weight:normal;;;border:none;; font-size:xx-small;"><a href="/wiki/Template:Design_Patterns_Patterns" title="Template:Design Patterns Patterns"><span title="View this template" style=";;border:none;">v</span></a>&#160;•&#160;<a href="/w/index.php?title=Template_talk:Design_Patterns_Patterns&amp;action=edit&amp;redlink=1" class="new" title="Template talk:Design Patterns Patterns (page does not exist)"><span title="Discussion about this template" style=";;border:none;">d</span></a>&#160;•&#160;<a href="http://en.wikipedia.org/w/index.php?title=Template:Design_Patterns_Patterns&amp;action=edit" class="external text" title="http://en.wikipedia.org/w/index.php?title=Template:Design_Patterns_Patterns&amp;action=edit" rel="nofollow"><span title="Edit this template" style=";;border:none;;">e</span></a></div>
</div>
<span style="font-size:110%;"><a href="/wiki/Design_pattern_(computer_science)" title="Design pattern (computer science)">Design patterns</a> in the book <i><strong class="selflink">Design Patterns</strong></i></span></th>
</tr>
<tr style="height:2px;">
<td></td>
</tr>
<tr>
<td class="navbox-group" style=";;">Creational</td>
<td style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<div style="padding:0em 0.25em"><a href="/wiki/Abstract_factory_pattern" title="Abstract factory pattern">Abstract factory</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Builder_pattern" title="Builder pattern">Builder</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Factory_method_pattern" title="Factory method pattern">Factory</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Prototype_pattern" title="Prototype pattern">Prototype</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Singleton_pattern" title="Singleton pattern">Singleton</a></div>
</td>
</tr>
<tr style="height:2px">
<td></td>
</tr>
<tr>
<td class="navbox-group" style=";;">Structural</td>
<td style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<div style="padding:0em 0.25em"><a href="/wiki/Adapter_pattern" title="Adapter pattern">Adapter</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Bridge_pattern" title="Bridge pattern">Bridge</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Composite_pattern" title="Composite pattern">Composite</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Decorator_pattern" title="Decorator pattern">Decorator</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Facade_pattern" title="Facade pattern">Facade</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Flyweight_pattern" title="Flyweight pattern">Flyweight</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Proxy_pattern" title="Proxy pattern">Proxy</a></div>
</td>
</tr>
<tr style="height:2px">
<td></td>
</tr>
<tr>
<td class="navbox-group" style=";;">Behavioral</td>
<td style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<div style="padding:0em 0.25em"><a href="/wiki/Chain-of-responsibility_pattern" title="Chain-of-responsibility pattern">Chain of responsibility</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Command_pattern" title="Command pattern">Command</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Interpreter_pattern" title="Interpreter pattern">Interpreter</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Iterator_pattern" title="Iterator pattern">Iterator</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Mediator_pattern" title="Mediator pattern">Mediator</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Memento_pattern" title="Memento pattern">Memento</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Observer_pattern" title="Observer pattern">Observer</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/State_pattern" title="State pattern">State</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Strategy_pattern" title="Strategy pattern">Strategy</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Template_method_pattern" title="Template method pattern">Template method</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Visitor_pattern" title="Visitor pattern">Visitor</a></div>
</td>
</tr>
</table>
</td>
</tr>
</table>


<!-- 
NewPP limit report
Preprocessor node count: 465/1000000
Post-expand include size: 14243/2048000 bytes
Template argument size: 6029/2048000 bytes
Expensive parser function count: 0/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:40394-0!1!0!default!!en!2 and timestamp 20090403122917 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Design_Patterns_(book)">http://en.wikipedia.org/wiki/Design_Patterns_(book)</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Software_design_patterns" title="Category:Software design patterns">Software design patterns</a></span> | <span dir='ltr'><a href="/wiki/Category:Computer_books" title="Category:Computer books">Computer books</a></span> | <span dir='ltr'><a href="/wiki/Category:1994_books" title="Category:1994 books">1994 books</a></span> | <span dir='ltr'><a href="/wiki/Category:Addison-Wesley_books" title="Category:Addison-Wesley books">Addison-Wesley books</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Design_Patterns_(book)" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Design_Patterns_(book)" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Design_Patterns_(book)&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Design_Patterns_(book)&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Design_Patterns_(book)" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Design_Patterns_(book)" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Design_Patterns_(book)" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Design_Patterns_(book)&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Design_Patterns_(book)&amp;oldid=281489009" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Design_Patterns_(book)&amp;id=281489009">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-bs"><a href="http://bs.wikipedia.org/wiki/Design_Patterns_(knjiga)">Bosanski</a></li>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/Viererbande_(Softwareentwicklung)">Deutsch</a></li>
				<li class="interwiki-es"><a href="http://es.wikipedia.org/wiki/Design_Patterns">Español</a></li>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Patron_de_conception">Français</a></li>
				<li class="interwiki-ko"><a href="http://ko.wikipedia.org/wiki/%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4_(%EC%B1%85)">한국어</a></li>
				<li class="interwiki-it"><a href="http://it.wikipedia.org/wiki/Design_Patterns">Italiano</a></li>
				<li class="interwiki-sv"><a href="http://sv.wikipedia.org/wiki/Design_Patterns_(bok)">Svenska</a></li>
				<li class="interwiki-vi"><a href="http://vi.wikipedia.org/wiki/Design_Patterns">Tiếng Việt</a></li>
				<li class="interwiki-zh"><a href="http://zh.wikipedia.org/wiki/%E8%AE%BE%E8%AE%A1%E8%8C%83%E4%BE%8B">中文</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 3 April 2009, at 12:29 (UTC).</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv176 in 0.056 secs. --></body></html>
