<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Memoization,Algorithm,Ambiguous,Artificial intelligence,Associative array,Backtracking,Big O notation,Bottom-up parsing,Buffer (computer science),C++,CFG" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Memoization&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Memoization&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Memoization - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Memoization";
		var wgTitle = "Memoization";
		var wgAction = "view";
		var wgArticleId = "723483";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281729014;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Memoization skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Memoization</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<p>In <a href="/wiki/Computing" title="Computing">computing</a>, <b>memoization</b> is an <a href="/wiki/Optimization_(computer_science)" title="Optimization (computer science)">optimization</a> technique used primarily to speed up <a href="/wiki/Computer_programs" title="Computer programs" class="mw-redirect">computer programs</a> by having <a href="/wiki/Subroutine" title="Subroutine">function calls</a> avoid repeating the calculation of results for previously-processed inputs. Memoization has also been used in other contexts (and for other purposes other than speed gains), such as in simple <a href="/wiki/Mutual_recursion" title="Mutual recursion">mutually-recursive</a> descent parsing<sup id="cite_ref-Norvig1991_0-0" class="reference"><a href="#cite_note-Norvig1991-0" title=""><span>[</span>1<span>]</span></a></sup> in a general <a href="/wiki/Top-down_parsing" title="Top-down parsing">top-down</a> <a href="/wiki/Parsing" title="Parsing">parsing</a> algorithm<sup id="cite_ref-FrostHafizCallaghan2007_1-0" class="reference"><a href="#cite_note-FrostHafizCallaghan2007-1" title=""><span>[</span>2<span>]</span></a></sup><sup id="cite_ref-FrostHafizCallaghan2008_2-0" class="reference"><a href="#cite_note-FrostHafizCallaghan2008-2" title=""><span>[</span>3<span>]</span></a></sup> that accommodates ambiguity and <a href="/wiki/Left_recursion" title="Left recursion">left recursion</a> in polynomial time and space. Although related to <a href="/wiki/Cache" title="Cache">caching</a>, memoization refers to a specific case of this optimization, distinguishing it from forms of caching such as <a href="/wiki/Buffer_(computer_science)" title="Buffer (computer science)" class="mw-redirect">buffering</a> or <a href="/wiki/Page_replacement_algorithm" title="Page replacement algorithm">page replacement</a>.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Overview"><span class="tocnumber">1</span> <span class="toctext">Overview</span></a></li>
<li class="toclevel-1"><a href="#Some_other_considerations"><span class="tocnumber">2</span> <span class="toctext">Some other considerations</span></a>
<ul>
<li class="toclevel-2"><a href="#Automatic_memoization"><span class="tocnumber">2.1</span> <span class="toctext">Automatic memoization</span></a></li>
<li class="toclevel-2"><a href="#Parsers"><span class="tocnumber">2.2</span> <span class="toctext">Parsers</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">3</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#Notes_and_references"><span class="tocnumber">4</span> <span class="toctext">Notes and references</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">5</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Overview" id="Overview"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Memoization&amp;action=edit&amp;section=1" title="Edit section: Overview">edit</a>]</span> <span class="mw-headline">Overview</span></h2>
<p>The term "memoization" was coined by <a href="/wiki/Donald_Michie" title="Donald Michie">Donald Michie</a> in 1968<sup id="cite_ref-Michie1968_3-0" class="reference"><a href="#cite_note-Michie1968-3" title=""><span>[</span>4<span>]</span></a></sup> and is derived from the <a href="/wiki/Latin" title="Latin">Latin</a> word <i><a href="/wiki/Memorandum" title="Memorandum">memorandum</a></i> (<i>to be remembered</i>), and thus carries the meaning of <i>turning [the results of] a function into something to be remembered.</i> While <i>memoization</i> might be confused with <i>memorization</i> (because of the shared <a href="/wiki/Cognate" title="Cognate" class="mw-redirect">cognate</a>), memoization has a specialized meaning in computing.</p>
<p>A memoized function "remembers" the results corresponding to some set of specific inputs. Subsequent calls with remembered inputs return the remembered result rather than recalculating it, thus moving the primary cost of a call with given parameters to the first call made to the function with those parameters. The set of remembered associations may be a fixed-size set controlled by a replacement algorithm or a fixed set, depending on the nature of the function and its use. A function can only be memoized if it is <a href="/wiki/Referential_transparency_(computer_science)" title="Referential transparency (computer science)">referentially transparent</a>; that is, only if calling the function has the exact same effect as replacing that function call with its return value. (Special case exceptions to this restriction exist, however.) While related to <a href="/wiki/Lookup_table" title="Lookup table">lookup tables</a>, since memoization often uses such tables in its implementation, memoization differs from pure table lookup in that the tables which memoization might use are populated transparently on an <a href="/wiki/On_the_fly" title="On the fly"><i>as-needed</i></a> basis.</p>
<p>Memoization is a means of lowering a function's <i>time</i> cost in exchange for <i>space</i> cost; that is, memoized functions become optimized for <i>speed</i> in exchange for a higher use of <a href="/wiki/Computer_memory" title="Computer memory">computer memory</a> <i>space</i>. The time/space "cost" of <a href="/wiki/Algorithm" title="Algorithm">algorithms</a> has a specific name in computing: <i><a href="/wiki/Computational_complexity_theory" title="Computational complexity theory">computational complexity</a></i>. All functions have a computational complexity in <i>time</i> (i.e. they take time to execute) and in <i>space</i>.</p>
<p>Although a <a href="/wiki/Trade-off" title="Trade-off">trade-off</a> occurs (i.e., space used is speed gained), this differs from some other optimizations that involve time-space trade-off, such as <a href="/wiki/Strength_reduction" title="Strength reduction">strength reduction</a>, in that memoization is a <a href="/wiki/Runtime" title="Runtime">runtime</a> rather than <a href="/wiki/Compile_time" title="Compile time">compile time</a> optimization. Moreover, strength reduction potentially replaces an expensive operation such as multiplication with a less expensive operation such as addition, and the results in savings can be highly <a href="/wiki/Machine-dependent" title="Machine-dependent">non-portable across machines</a>, whereas memoization is a <a href="/wiki/Machine-independent" title="Machine-independent" class="mw-redirect">machine-independent</a> strategy.</p>
<p>Consider the following <a href="/wiki/Pseudocode" title="Pseudocode">pseudocode</a> function to calculate the <a href="/wiki/Factorial" title="Factorial">factorial</a> of <i>n</i>:</p>
<pre>
 function factorial (<i>n</i> is a non-negative integer)
    if <i>n</i> is 0 then
     return 1 [<i>by the convention that</i> <b>0! = 1</b>]
    else   
     return factorial(n - 1) times <i>n</i> [<i>recursively invoke factorial </i>
                                    with the parameter 1 less than n<i>]</i>
    end if
 end function
</pre>
<p>For every <a href="/wiki/Integer" title="Integer">integer</a> <i>n</i> such that <img class="tex" alt="n \ge 0" src="http://upload.wikimedia.org/math/e/2/d/e2dbd4b26d758137070f5b0edfc107d6.png" />, the final result of the function <code>factorial</code> is <a href="/wiki/Invariant_(computer_science)" title="Invariant (computer science)">invariant</a>; if invoked as <code>x = factorial(3)</code>, the result is such that <i>x</i> will <i>always</i> be assigned the value 6. A non-memoized version of the above, given the nature of the <a href="/wiki/Recursion" title="Recursion">recursive</a> <a href="/wiki/Algorithm" title="Algorithm">algorithm</a> involved, would require <i>n + 1</i> invocations of <code>factorial</code> to arrive at a result, and each of these invocations, in turn, has an associated cost in the time it takes the function to return the value computed. Depending on the machine, this cost might be the sum of:</p>
<ol>
<li>The cost to set up the functional call stack frame.</li>
<li>The cost to compare <i>n</i> to 0.</li>
<li>The cost to subtract 1 from n.</li>
<li>The cost to set up the recursive call stack frame. (As above.)</li>
<li>The cost to multiply the result of the recursive call to <code>factorial</code> by <i>n</i>.</li>
<li>The cost to store the return result so that it may be used by the calling context.</li>
</ol>
<p>In a non-memoized implementation, <i>every</i> top-level call to <code>factorial</code> includes the cumulative cost of steps 2 through 6 proportional to the initial value of <i>n</i>.</p>
<p>A memoized version of the <code>factorial</code> function follows:</p>
<pre>
 function factorial (<i>n</i> is a non-negative integer)
    allocate temporary integer variable <i>x</i>
 
    if <i>n</i> is in <i>lookup-table</i> then
     return <i>lookup-table-value-for-n</i>;
    else if <i>n</i> is 0 then
     return 1 [<i>by the convention that</i> <b>0! = 1</b>]
    else   
     x = factorial(n - 1) times <i>n</i> [<i>recursively invoke factorial with the parameter 1 less than n</i>]
 
     store <i>x</i> in <i>lookup-table</i> in the <i>n</i><sup>th</sup> slot [<i>remember the result of n! for later</i>]
 
     return x
    end if
</pre>
<p>In this particular example, if <code>factorial</code> is first invoked with 5, and then invoked later with any value less than or equal to five, those return values will also have been memoized, since <code>factorial</code> will have been called recursively with the values 5, 4, 3, 2, 1, and 0, and the return values for <i>each</i> of those will have been stored. If it is then called with a number greater than 5, such as 7, only 2 recursive calls will be made (7 and 6), and the value for 5! will have been stored from the previous call. In this way, memoization allows a function to become more time-efficient the more often it is called, thus resulting in eventual overall <b>speed up</b>.</p>
<p><a name="Some_other_considerations" id="Some_other_considerations"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Memoization&amp;action=edit&amp;section=2" title="Edit section: Some other considerations">edit</a>]</span> <span class="mw-headline">Some other considerations</span></h2>
<p><a name="Automatic_memoization" id="Automatic_memoization"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Memoization&amp;action=edit&amp;section=3" title="Edit section: Automatic memoization">edit</a>]</span> <span class="mw-headline">Automatic memoization</span></h3>
<p>While memoization may be added to functions <i>internally</i> and <i>explicitly</i> by a <a href="/wiki/Computer_programmer" title="Computer programmer" class="mw-redirect">computer programmer</a> in much the same way the above memoized version of <code>factorial</code> is implemented, <a href="/wiki/Referential_transparency_(computer_science)" title="Referential transparency (computer science)">referentially transparent</a> functions may also be automatically memoized <i>externally</i>.<sup id="cite_ref-Norvig1991_0-1" class="reference"><a href="#cite_note-Norvig1991-0" title=""><span>[</span>1<span>]</span></a></sup> The techniques employed by Norvig have application not only in <a href="/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a> (the language in which his paper demonstrated automatic memoization), but in various other <a href="/wiki/Programming_language" title="Programming language">programming languages</a>. Applications of automatic memoization have also been formally explored in the study of <a href="/wiki/Term_rewriting" title="Term rewriting" class="mw-redirect">term rewriting</a><sup id="cite_ref-Hoffman1992_4-0" class="reference"><a href="#cite_note-Hoffman1992-4" title=""><span>[</span>5<span>]</span></a></sup> and <a href="/wiki/Artificial_intelligence" title="Artificial intelligence">artificial intelligence</a>.<sup id="cite_ref-MayfieldEtAl1995_5-0" class="reference"><a href="#cite_note-MayfieldEtAl1995-5" title=""><span>[</span>6<span>]</span></a></sup></p>
<p>In those programming languages where functions are <a href="/wiki/First-class_object" title="First-class object">first or second-class objects</a> (such as <a href="/wiki/Lua_(programming_language)" title="Lua (programming language)">Lua</a>, with its first-class functions, or <a href="/wiki/Perl" title="Perl">Perl</a> <a href="http://perl.plover.com/MiniMemoize/memoize.html" class="external autonumber" title="http://perl.plover.com/MiniMemoize/memoize.html" rel="nofollow">[1]</a>), automatic memoization can be implemented by replacing (at <a href="/wiki/Runtime" title="Runtime">runtime</a>) a function with its calculated value once a value has been calculated for a given set of parameters. The function that does this value-for-function-object replacement can generically wrap any referentially transparent function. Consider the following <a href="/wiki/Pseudocode" title="Pseudocode">pseudocode</a> (where it is assumed that functions are first-class values):</p>
<pre>
  function memoized-call (<i>F</i> is a function object parameter)
     if <i>F</i> has no attached array <i>values</i> then
        allocate an <a href="/wiki/Associative_array" title="Associative array">associative array</a> called <i>values</i>;
        attach <i>values</i> to <i>F</i>;
     end if;
 
     if F.<i>values[arguments]</i> is empty then
        F.<i>values[arguments]</i> = <i>F</i>(arguments);
     end if;
 
     return F.<i>values[arguments]</i>;     
  end function
</pre>
<p>In order to call an automatically memoized version of <code>factorial</code> using the above strategy, rather than calling <code>factorial</code> directly, code invokes <code>memoized-call(factorial(<i>n</i>))</code>. Each such call first checks to see if a holder array has been allocated to store results, and if not, attaches that array. If no entry exists at the position <code>values[arguments]</code> (where <code>arguments</code> are used as the key of the associative array), a <i>real</i> call is made to <code>factorial</code> with the supplied arguments. Finally, the entry in the array at the key position is returned to the caller.</p>
<p>The above strategy requires <i>explicit</i> wrapping at each call to a function that is to be memoized. In those languages that allow <a href="/wiki/Closure_(computer_science)" title="Closure (computer science)">closures</a>, memoization can be effected <i>implicitly</i> by a <a href="/wiki/Function_object" title="Function object">functor</a> factory that returns a wrapped memoized function object. In pseudocode, this can be expressed as follows:</p>
<pre>
 function construct-memoized-functor (<i>F</i> is a function object parameter)
    allocate a function object called <i>memoized-version</i>;
 
    let memoized-version(arguments) be
       if <i>self</i> has no attached array values then [<i><b>self</b> is a reference to <a href="/wiki/This_(computer_science)" title="This (computer science)">this</a> object</i>]
          allocate an associative array called <i>values</i>;
          attach <i>values</i> to <i>self</i>;
       end if;

       if self.<i>values[arguments]</i> is empty then
          self.<i>values[arguments]</i> = <i>F</i>(arguments);
       end if;

       return self.<i>values[arguments]</i>;     
    end let;
 
    return <i>memoized-version</i>;
 end function
</pre>
<p>Rather than call <code>factorial</code>, a new function object <code>memfact</code> is created as follows:</p>
<pre>
 memfact = construct-memoized-functor(factorial)
</pre>
<p>The above example assumes that the function <code>factorial</code> has already been defined <i>before</i> the call to <code>construct-memoized-functor</code> is made. From this point forward, <code>memfact(<i>n</i>)</code> is called whenever the factorial of <i>n</i> is desired. In languages such as <a href="/wiki/Lua_(programming_language)" title="Lua (programming language)">Lua</a>, more sophisticated techniques exist which allow a function to be replaced by a new function with the same name, which would permit:</p>
<pre>
 factorial = construct-memoized-functor(factorial)
</pre>
<p>Essentially, such techniques involve attaching the <i>original function object</i> to the created functor and forwarding calls to the original function being memoized via an alias when a call to the actual function is required (to avoid endless <a href="/wiki/Recursion" title="Recursion">recursion</a>), as illustrated below:</p>
<pre>
function construct-memoized-functor (<i>F</i> is a function object parameter)
    allocate a function object called <i>memoized-version</i>;
 
    let <i>memoized-version</i>(arguments) be
       if <i>self</i> has no attached array values then [<i><b>self</b> is a reference to <a href="/wiki/This_(computer_science)" title="This (computer science)">this</a> object</i>]
          allocate an associative array called <i>values</i>;
          attach <i>values</i> to <i>self</i>;
          allocate a new function object called <i>alias</i>;
          attach <i>alias</i> to <i>self</i>; [<i>for later ability to invoke <b>F</b> indirectly</i>]
          self.<i>alias</i> = <i>F</i>;
       end if;

       if self.<i>values[arguments]</i> is empty then
          self.<i>values[arguments]</i> = self.<i>alias</i>(arguments); [<i><b>not</b> a direct call to <b>F</b></i>]
       end if;

       return self.<i>values[arguments]</i>;     
    end let;
 
    return <i>memoized-version</i>;
 end function
</pre>
<p>(Note: Some of the steps shown above may be implicitly managed by the implementation language and are provided for illustration.)</p>
<p><a name="Parsers" id="Parsers"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Memoization&amp;action=edit&amp;section=4" title="Edit section: Parsers">edit</a>]</span> <span class="mw-headline">Parsers</span></h3>
<p>When a <a href="/wiki/Top-down_parsing" title="Top-down parsing">top-down parser</a> tries to parse an <a href="/wiki/Ambiguous" title="Ambiguous" class="mw-redirect">ambiguous</a> input with respect to an ambiguous <a href="/wiki/Context-free_grammar" title="Context-free grammar">CFG</a>, it may need an exponential number of steps (with respect to the length of the input) to try all alternatives of the CFG in order to produce all possible parse trees. This eventually would require exponential memory space. Memoization was explored as a <a href="/wiki/Parsing" title="Parsing">parsing</a> strategy in 1991 by <a href="/wiki/Peter_Norvig" title="Peter Norvig">Norvig</a>, who demonstrated that an algorithm similar to the use of <a href="/wiki/Dynamic_programming" title="Dynamic programming">dynamic programming</a> and state-sets in <a href="/wiki/Earley_parser" title="Earley parser">Earley's algorithm</a> (1970), and tables in the <a href="/wiki/CYK_algorithm" title="CYK algorithm">CYK algorithm</a> of Cocke, Younger and Kasami, could be generated by introducing automatic memoization to a simple <a href="/wiki/Backtracking" title="Backtracking">backtracking</a> <a href="/wiki/Recursive_descent_parser" title="Recursive descent parser">recursive descent parser</a> to solve the problem of exponential time complexity.<sup id="cite_ref-Norvig1991_0-2" class="reference"><a href="#cite_note-Norvig1991-0" title=""><span>[</span>1<span>]</span></a></sup> The basic idea in Norvig’s approach is that when a parser is applied to the input, the result is stored in a memotable for subsequent reuse if the same parser is ever reapplied to the same input. Richard Frost also used memoization to reduce the exponential time complexity of <a href="/wiki/Parser_Combinator" title="Parser Combinator" class="mw-redirect">parser combinators</a>, which can be viewed as “Purely Functional Top-Down Backtracking” parsing technique.<sup id="cite_ref-Frost1996_6-0" class="reference"><a href="#cite_note-Frost1996-6" title=""><span>[</span>7<span>]</span></a></sup> He showed that basic memoized parser combinators can be used as building blocks to construct complex parsers as executable specifications of CFGs.<sup id="cite_ref-Frost1994_7-0" class="reference"><a href="#cite_note-Frost1994-7" title=""><span>[</span>8<span>]</span></a></sup><sup id="cite_ref-Frost2003_8-0" class="reference"><a href="#cite_note-Frost2003-8" title=""><span>[</span>9<span>]</span></a></sup> It was again explored in the context of parsing in 1995 by Johnson and Dörre.<sup id="cite_ref-Johnson1995_9-0" class="reference"><a href="#cite_note-Johnson1995-9" title=""><span>[</span>10<span>]</span></a></sup><sup id="cite_ref-Johnson.26Dorre_10-0" class="reference"><a href="#cite_note-Johnson.26Dorre-10" title=""><span>[</span>11<span>]</span></a></sup> In 2002, it was examined in considerable depth by Ford in the form called <a href="/wiki/Packrat_parser" title="Packrat parser" class="mw-redirect">packrat parsing</a>.<sup id="cite_ref-Ford2002_11-0" class="reference"><a href="#cite_note-Ford2002-11" title=""><span>[</span>12<span>]</span></a></sup></p>
<p>In 2007, Frost, Hafiz and Callaghan<sup id="cite_ref-FrostHafizCallaghan2007_1-1" class="reference"><a href="#cite_note-FrostHafizCallaghan2007-1" title=""><span>[</span>2<span>]</span></a></sup> described a top-down parsing algorithm that uses <strong class="selflink">memoization</strong> for refraining redundant computations to accommodate any form of ambiguous <a href="/wiki/CFG" title="CFG">CFG</a> in <a href="/wiki/Polynomial" title="Polynomial">polynomial</a> time (<a href="/wiki/Big_O_notation" title="Big O notation">Θ</a>(n<sup>4</sup>) for <a href="/wiki/Left_recursion" title="Left recursion">left-recursive</a> grammars and <a href="/wiki/Big_O_notation" title="Big O notation">Θ</a>(n<sup>3</sup>) for non left-recursive grammars). Their top-down parsing algorithm also requires polynomial space for potentially exponential ambiguous parse trees by 'compact representation' and 'local ambiguities grouping'. Their compact representation is comparable with Tomita’s compact representation of <a href="/wiki/Bottom-up_parsing" title="Bottom-up parsing">bottom-up parsing</a>.<sup id="cite_ref-Tomita1985_12-0" class="reference"><a href="#cite_note-Tomita1985-12" title=""><span>[</span>13<span>]</span></a></sup> Their use of memoization is not only limited to retrieving the previously-computed results when a parser is applied to a same input position repeatedly (which is essential for polynomial time requirment); it is specialized to perform the following additional tasks:</p>
<ul>
<li>The memoization process (which could be viewed as a ‘wrapper’ around any parser execution) accommodates an ever-growing <b>direct left-recursive</b> parse by imposing depth restrictions w.r.t. input length and current input position.</li>
<li>The algorithm’s memo-table ‘lookup’ procedure also determines the reusability of saved result by comparing saved result’s computational context with the parser’s current context. This contextual comparison is the key to accommodate <b>indirect (or hidden) left-recursion</b>.</li>
<li>When performing a successful lookup in memotable, instead of returning the complete result-set, the process only returns the references of the actual result and eventually speeds up the overall computation.</li>
<li>During updating the memotable, the meoization process groups the (potentially exponential) ambiguous results and ensures the polynomial space requirement.</li>
</ul>
<p>Frost, Hafiz and Callaghan also described the implementation of the algorithm in PADL’08<sup id="cite_ref-FrostHafizCallaghan2008_2-1" class="reference"><a href="#cite_note-FrostHafizCallaghan2008-2" title=""><span>[</span>3<span>]</span></a></sup> as a set of <a href="/wiki/Higher-order_function" title="Higher-order function">higher-order functions</a> (called <a href="/wiki/Parser_combinators" title="Parser combinators" class="mw-redirect">parser combinators</a>) in <a href="/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell</a>, which enables the construction of directly executable specifications of <a href="/wiki/CFG" title="CFG">CFGs</a> as language processors. The importance of their polynomial algorithm’s power to accommodate ‘any form of ambiguous CFG’ with top-down parsing is vital with respect to the syntax and semantics analysis during <a href="/wiki/Natural_Language_Processing" title="Natural Language Processing" class="mw-redirect">Natural Language Processing</a>. The <a href="http://www.cs.uwindsor.ca/~hafiz/proHome.html" class="external text" title="http://www.cs.uwindsor.ca/~hafiz/proHome.html" rel="nofollow">X-SAIGA</a> site has more about the algorithm and implementation details.</p>
<p>While Norvig increased the <i>power</i> of the parser through memoization, the augmented parser was still as time complex as Earley's algorithm, which demonstrates a case of the use of memoization for something other than speed optimization. Johnson and Dörre<sup id="cite_ref-Johnson.26Dorre_10-1" class="reference"><a href="#cite_note-Johnson.26Dorre-10" title=""><span>[</span>11<span>]</span></a></sup> demonstrate another such non-speed related application of memoization: the use of memoization to delay linguistic constraint resolution to a point in a parse where sufficient information has been accumulated to resolve those constraints. By contrast, in the speed optimization application of memoization, Ford demonstrated that memoization could guarantee that <a href="/wiki/Parsing_expression_grammar" title="Parsing expression grammar">parsing expression grammars</a> could parse in <a href="/wiki/Big_O_notation" title="Big O notation">linear</a> time even those <a href="/wiki/Formal_language" title="Formal language">languages</a> that resulted in worst-case backtracking behavior.<sup id="cite_ref-Ford2002_11-1" class="reference"><a href="#cite_note-Ford2002-11" title=""><span>[</span>12<span>]</span></a></sup></p>
<p>Consider the following <a href="/wiki/Formal_grammar" title="Formal grammar">grammar</a>:</p>
<pre>
 S → (A <b>c</b>) | (B <b>d</b>)
 A → X (<b>a</b>|<b>b</b>)
 B → X <b>b</b>
 X → <b>x</b> [X]
</pre>
<p>(Notation note: In the above example, the production S → (A <b>c</b>) | (B <b>d</b>) reads: "An <i>S</i> is either an <i>A</i> followed by a <b>c</b> or a <i>B</i> followed by a <b>d</b>." The production X → <b>x</b> [X] reads "An <i>X</i> is an <b>x</b> followed by an optional <i>X</i>.")</p>
<p>This grammar generates one of the following three variations of <a href="/wiki/String_(computer_science)" title="String (computer science)">string</a>: <i>xac</i>, <i>xbc</i>, or <i>xbd</i> (where <i>x</i> here is understood to mean <i>one or more</i> x<i>'s</i>.) Next, consider how this grammar, used as a parse specification, might effect a top-down, left-right parse of the string <i>xxxxxbd</i>:</p>
<dl>
<dd>The rule <i>A</i> will recognize <i>xxxxxb</i> (by first descending into <i>X</i> to recognize one <i>x</i>, and again descending into <i>X</i> until all the <i>x</i>'s are consumed, and then recognizing the <i>b</i>), and then return to <i>S</i>, and fail to recognize a <i>c</i>. The next clause of <i>S</i> will then descend into B, which in turn <b>again descends into <i>X</i></b> and recognizes the <i>x</i>'s by means of many recursive calls to <i>X</i>, and then a <i>b</i>, and returns to <i>S</i> and finally recognizes a <i>d</i>.</dd>
</dl>
<p>The key concept here is inherent in the phrase <b>again descends into <i>X</i></b>. The process of looking forward, failing, backing up, and then retrying the next alternative is known in parsing as <a href="/wiki/Backtracking" title="Backtracking">backtracking</a>, and it is primarily backtracking that presents opportunities for memoization in parsing. Consider a function <code>RuleAcceptsSomeInput(Rule, Position, Input)</code>, where the parameters are as follows:</p>
<ul>
<li><code>Rule</code> is the name of the rule under consideration.</li>
<li><code>Position</code> is the offset currently under consideration in the input.</li>
<li><code>Input</code> is the input under consideration.</li>
</ul>
<p>Let the return value of the function <code>RuleAcceptsSomeInput</code> be the length of the input accepted by <code>Rule</code>, or 0 if that rule does not accept any input at that offset in the string. In a backtracking scenario with such memoization, the parsing process is as follows:</p>
<dl>
<dd>When the rule <i>A</i> descends into <i>X</i> at offset 0, it memoizes the length 5 against that position and the rule <i>X</i>. After having failed at <i>d</i>, <i>B</i> then, rather than descending again into <i>X</i>, queries the position 0 against rule <i>X</i> in the memoization engine, and is returned a length of 5, thus saving having to actually descend again into <i>X</i>, and carries on <i>as if</i> it had descended into <i>X</i> as many times as before.</dd>
</dl>
<p>In the above example, one or <i>many</i> descents into <i>X</i> may occur, allowing for strings such as <i>xxxxxxxxxxxxxxxxbd</i>. In fact, there may be <i>any number</i> of <i>x</i>'s before the <i>b</i>. While the call to S must recursively descend into X as many times as there are <i>x</i>'s, <i>B</i> will never have to descend into X at all, since the return value of <code>RuleAcceptsSomeInput(<i>X</i>, 0, <i>xxxxxxxxxxxxxxxxbd</i>)</code> will be 16 (in this particular case).</p>
<p>Those parsers that make use of <a href="/wiki/Syntactic_predicate" title="Syntactic predicate">syntactic predicates</a> are also able to memoize the results of predicate parses, as well, thereby reducing such constructions as:</p>
<pre>
 S → (A)? A
 A → /* some rule */
</pre>
<p>to one descent into <i>A</i>.</p>
<p>If a parser builds a <a href="/wiki/Parse_tree" title="Parse tree">parse tree</a> during a parse, it must memoize not only the <i>length</i> of the input that matches at some offset against a given rule, but also must store the sub-tree that is generated by that rule at that offset in the input, since subsequent calls to the rule by the parser will not actually descend and rebuild that tree. For the same reason, memoized parser algorithms that generate calls to external code (sometimes called a <a href="/wiki/Semantic_action_routine" title="Semantic action routine" class="mw-redirect">semantic action routine</a>) when a rule matches must use some scheme to ensure that such rules are invoked in a predictable order.</p>
<p>Since, for any given backtracking or syntactic predicate capable parser not every grammar will <i>need</i> backtracking or predicate checks, the overhead of storing each rule's parse results against every offset in the input (and storing the parse tree if the parsing process does that implicitly) may actually <i>slow down</i> a parser. This effect can be mitigated by explicit selection of those rules the parser will memoize.<sup id="cite_ref-AcarEtAl2003_13-0" class="reference"><a href="#cite_note-AcarEtAl2003-13" title=""><span>[</span>14<span>]</span></a></sup></p>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Memoization&amp;action=edit&amp;section=5" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<ul>
<li><a href="/wiki/Computational_complexity_theory" title="Computational complexity theory">Computational complexity theory</a> - More information on algorithm complexity.</li>
<li><a href="/wiki/Strength_reduction" title="Strength reduction">Strength reduction</a> - A <a href="/wiki/Compiler" title="Compiler">compiler</a> optimization that replaces an expensive operation with an equivalent, less expensive one.</li>
<li><a href="/wiki/Partial_evaluation" title="Partial evaluation">Partial evaluation</a> - A related technique for automatic program optimization</li>
<li><a href="/wiki/Lazy_evaluation" title="Lazy evaluation">Lazy evaluation</a> - Shares some concepts with memoization.</li>
<li><a href="/wiki/Lookup_table" title="Lookup table">Lookup table</a> - A key <a href="/wiki/Data_structure" title="Data structure">data structure</a> used in memoization.</li>
<li><a href="/wiki/Flyweight_pattern" title="Flyweight pattern">Flyweight pattern</a> - an object programming <a href="/wiki/Design_pattern_(computer_science)" title="Design pattern (computer science)">design pattern</a>, that also uses kind of memoization</li>
<li><a href="/wiki/Director_string" title="Director string">Director string</a></li>
</ul>
<p><a name="Notes_and_references" id="Notes_and_references"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Memoization&amp;action=edit&amp;section=6" title="Edit section: Notes and references">edit</a>]</span> <span class="mw-headline">Notes and references</span></h2>
<ol class="references">
<li id="cite_note-Norvig1991-0">^ <a href="#cite_ref-Norvig1991_0-0" title=""><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-Norvig1991_0-1" title=""><sup><i><b>b</b></i></sup></a> <a href="#cite_ref-Norvig1991_0-2" title=""><sup><i><b>c</b></i></sup></a> Norvig, Peter, "Techniques for Automatic Memoization with Applications to Context-Free Parsing," <i>Computational Linguistics</i>, Vol. 17 No. 1, pp. 91-98, March 1991.</li>
<li id="cite_note-FrostHafizCallaghan2007-1">^ <a href="#cite_ref-FrostHafizCallaghan2007_1-0" title=""><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-FrostHafizCallaghan2007_1-1" title=""><sup><i><b>b</b></i></sup></a> Frost, Richard, Hafiz, Rahmatullah, and Callaghan, Paul. " Modular and Efficient Top-Down Parsing for Ambiguous Left-Recursive Grammars ." <i>10th International Workshop on Parsing Technologies (IWPT), ACL-SIGPARSE</i> , Pages: 109 - 120, June 2007, Prague.</li>
<li id="cite_note-FrostHafizCallaghan2008-2">^ <a href="#cite_ref-FrostHafizCallaghan2008_2-0" title=""><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-FrostHafizCallaghan2008_2-1" title=""><sup><i><b>b</b></i></sup></a> Frost, Richard, Hafiz, Rahmatullah, and Callaghan, Paul. " Parser Combinators for Ambiguous Left-Recursive Grammars." <i>10th International Symposium on Practical Aspects of Declarative Languages (PADL), ACM-SIGPLAN</i> , Volume 4902/2008, Pages: 167-181, January 2008, San Francisco.</li>
<li id="cite_note-Michie1968-3"><b><a href="#cite_ref-Michie1968_3-0" title="">^</a></b> Michie, Donald, "Memo Functions and Machine Learning," <i>Nature</i>, No. 218, pp. 19-22, 1968.</li>
<li id="cite_note-Hoffman1992-4"><b><a href="#cite_ref-Hoffman1992_4-0" title="">^</a></b> Hoffman, Berthold, "Term Rewriting with Sharing and Memoïzation," <i>Algebraic and Logic Programming: Third International Conference, Proceedings</i>, H. Kirchner and G. Levi (eds.), pp. 128-142, Volterra, Italy, 2-4 September 1992.</li>
<li id="cite_note-MayfieldEtAl1995-5"><b><a href="#cite_ref-MayfieldEtAl1995_5-0" title="">^</a></b> Mayfield, James, <i>et al</i>, <i>Using Automatic Memoization as a Software Engineering Tool in Real-World AI Systems</i>, TBD, 1995.</li>
<li id="cite_note-Frost1996-6"><b><a href="#cite_ref-Frost1996_6-0" title="">^</a></b> Frost, Richard. and Szydlowski, Barbara. "Memoizing Purely Functional Top-Down Backtracking Language Processors. " "Sci. Comput. Program. " 1996 - 27(3): 263-288.</li>
<li id="cite_note-Frost1994-7"><b><a href="#cite_ref-Frost1994_7-0" title="">^</a></b> Frost, Richard. "Using Memoization to Achieve Polynomial Complexity of Purely Functional Executable Specifications of Non-Deterministic Top-Down Parsers. " "SIGPLAN Notices" 29(4): 23-30.</li>
<li id="cite_note-Frost2003-8"><b><a href="#cite_ref-Frost2003_8-0" title="">^</a></b> Frost, Richard. "Monadic Memoization towards Correctness-Preserving Reduction of Search. " "Canadian Conference on AI 2003." p 66-80.</li>
<li id="cite_note-Johnson1995-9"><b><a href="#cite_ref-Johnson1995_9-0" title="">^</a></b> Johnson, Mark, "Memoization of Top-Down Parsing,” <i>Computational Linguistics</i>, Vol. 21 No. 3, pp. 405-417, September 1995.</li>
<li id="cite_note-Johnson.26Dorre-10">^ <a href="#cite_ref-Johnson.26Dorre_10-0" title=""><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-Johnson.26Dorre_10-1" title=""><sup><i><b>b</b></i></sup></a> Johnson, Mark &amp; Dörre, Jochen, "Memoization of Coroutined Constraints," <i>Proceedings of the 33rd Annual Meeting of the Association for Computational Linguistics</i>, Cambridge, Massachusetts, 1995.</li>
<li id="cite_note-Ford2002-11">^ <a href="#cite_ref-Ford2002_11-0" title=""><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-Ford2002_11-1" title=""><sup><i><b>b</b></i></sup></a> Ford, Bryan, <i>Packrat Parsing: a Practical Linear-Time Algorithm with Backtracking</i>, Master’s thesis, Massachusetts Institute of Technology, September, 2002.</li>
<li id="cite_note-Tomita1985-12"><b><a href="#cite_ref-Tomita1985_12-0" title="">^</a></b> Tomita, Masaru. “Efficient Parsing for Natural Language.” <i>Kluwer, Boston, MA</i>, 1985.</li>
<li id="cite_note-AcarEtAl2003-13"><b><a href="#cite_ref-AcarEtAl2003_13-0" title="">^</a></b> Acar, Umut A. A. <i>et al.</i>, "Selective Memoization," <i>Proceedings of the 30th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages</i>, New Orleans, Louisiana, pp. 14-25, 15-17 January 2003.</li>
</ol>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Memoization&amp;action=edit&amp;section=7" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<dl>
<dt>Examples of memoization in various programming languages</dt>
</dl>
<ul>
<li><a href="http://www.cliki.net/memoize" class="external text" title="http://www.cliki.net/memoize" rel="nofollow">Memoize</a> - Memoize is a small library, written by Tim Bradshaw, for performing memoization in <a href="/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a>.</li>
<li>Marty Hall's <a href="http://apl.jhu.edu/~hall/lisp/Memoization/" class="external text" title="http://apl.jhu.edu/~hall/lisp/Memoization/" rel="nofollow">Automatic Memoization toolkit</a> in <a href="/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a></li>
<li>Dave Herman's <a href="http://planet.plt-scheme.org/display.ss?package=memoize.plt&amp;owner=dherman" class="external text" title="http://planet.plt-scheme.org/display.ss?package=memoize.plt&amp;owner=dherman" rel="nofollow">Macros for defining memoized procedures</a> in <a href="/wiki/PLT_Scheme" title="PLT Scheme">PLT Scheme</a>.</li>
<li><a href="http://search.cpan.org/dist/Memoize/Memoize.pm" class="external text" title="http://search.cpan.org/dist/Memoize/Memoize.pm" rel="nofollow">Memoize.pm</a> - a <a href="/wiki/Perl" title="Perl">Perl</a> <a href="/wiki/Perl_module" title="Perl module">module</a> that implements memoized functions.</li>
<li><a href="http://www.onjava.com/pub/a/onjava/2003/08/20/memoization.html" class="external text" title="http://www.onjava.com/pub/a/onjava/2003/08/20/memoization.html" rel="nofollow">Java memoization</a> - an example in Java using dynamic proxy classes to create a generic memoization pattern.</li>
<li><a href="http://apl.jhu.edu/~paulmac/c++-memoization.html" class="external text" title="http://apl.jhu.edu/~paulmac/c++-memoization.html" rel="nofollow">Memoization in C++</a> - although <a href="/wiki/C%2B%2B" title="C++">C++</a> doesn't support first-class functions, here is a toolkit that supports automated memoization (via pre-processing).</li>
<li><a href="http://www.tek271.com/free/memoizer/tek271.memoizer.intro.html" class="external text" title="http://www.tek271.com/free/memoizer/tek271.memoizer.intro.html" rel="nofollow">Tek271 Memoizer</a> - Open source Java memoizer using annotations and pluggable cache implementations.</li>
<li><a href="http://raa.ruby-lang.org/project/memoize/" class="external text" title="http://raa.ruby-lang.org/project/memoize/" rel="nofollow">memoize</a> - A <a href="/wiki/Ruby_programming_language" title="Ruby programming language" class="mw-redirect">Ruby</a> module that implements memoized methods.</li>
<li><a href="http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/52201" class="external text" title="http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/52201" rel="nofollow">Python memoization</a> - A <a href="/wiki/Python_(programming_language)" title="Python (programming language)">Python</a> example of memoization.</li>
<li><a href="http://martin.jambon.free.fr/309/pa_memo.ml.html" class="external text" title="http://martin.jambon.free.fr/309/pa_memo.ml.html" rel="nofollow">OCaml memoization</a> - Implemented as a <a href="/wiki/Camlp4" title="Camlp4">Camlp4</a> syntax extension.</li>
<li><a href="http://lua-users.org/wiki/FuncTables" class="external text" title="http://lua-users.org/wiki/FuncTables" rel="nofollow">Memoization in Lua</a> - Two example implementations of a general memoize function in <a href="/wiki/Lua_(programming_language)" title="Lua (programming language)">Lua</a>.</li>
<li><a href="http://talideon.com/weblog/2005/07/javascript-memoization.cfm" class="external text" title="http://talideon.com/weblog/2005/07/javascript-memoization.cfm" rel="nofollow">Memoization in Javascript</a> - Extending the Function prototype in <a href="/wiki/JavaScript" title="JavaScript">JavaScript</a>.</li>
<li><a href="http://www.cs.uwindsor.ca/~hafiz/proHome.html" class="external text" title="http://www.cs.uwindsor.ca/~hafiz/proHome.html" rel="nofollow">X-SAIGA</a> - eXecutable SpecificAtIons of GrAmmars. Contains publications related to top-down parsing algorithm that supports left-recursion and ambiguity in polynomial time and space.</li>
</ul>


<!-- 
NewPP limit report
Preprocessor node count: 258/1000000
Post-expand include size: 0/2048000 bytes
Template argument size: 0/2048000 bytes
Expensive parser function count: 0/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:723483-0!1!0!default!!en!2 and timestamp 20090412080858 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Memoization">http://en.wikipedia.org/wiki/Memoization</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Software_performance_optimization" title="Category:Software performance optimization">Software performance optimization</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Memoization" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Memoization" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Memoization&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Memoization&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Memoization" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Memoization" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Memoization" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Memoization&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Memoization&amp;oldid=281729014" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Memoization&amp;id=281729014">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/Memoisation">Deutsch</a></li>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/M%C3%A9moization">Français</a></li>
				<li class="interwiki-ko"><a href="http://ko.wikipedia.org/wiki/%EB%A9%94%EB%AA%A8%EC%9D%B4%EC%A0%9C%EC%9D%B4%EC%85%98">한국어</a></li>
				<li class="interwiki-it"><a href="http://it.wikipedia.org/wiki/Memoizzazione">Italiano</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/%E3%83%A1%E3%83%A2%E5%8C%96">日本語</a></li>
				<li class="interwiki-sv"><a href="http://sv.wikipedia.org/wiki/Memoisation">Svenska</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 4 April 2009, at 17:09 (UTC).</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv225 in 0.041 secs. --></body></html>
