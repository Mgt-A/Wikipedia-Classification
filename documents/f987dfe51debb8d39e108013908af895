<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Assembly language,Articles with unsourced statements since March 2009,Articles with unsourced statements since January 2009,Articles with unsourced statements since July 2008,Articles with unsourced statements since February 2007,Special:Search/Assembly language,Assembly language,3D graphics,ARM architecture,Addition,Amiga" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Assembly_language&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Assembly_language&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Assembly language - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Assembly_language";
		var wgTitle = "Assembly language";
		var wgAction = "view";
		var wgArticleId = "1368";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281491996;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
<style type="text/css">/*<![CDATA[*/
.source-asm {line-height: normal;}
.source-asm li, .source-asm pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for asm
 * CSS class: source-asm, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-asm .de1, .source-asm .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-asm  {}
.source-asm .head {}
.source-asm .foot {}
.source-asm .imp {font-weight: bold; color: red;}
.source-asm .ln-xtra {color: #cc0; background-color: #ffc;}
.source-asm li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-asm li.li2 {font-weight: bold;}
.source-asm .kw1 {color: #00007f;}
.source-asm .kw2 {color: #0000ff;}
.source-asm .kw3 {color: #46aa03; font-weight:bold;}
.source-asm .kw4 {color: #0000ff;}
.source-asm .kw5 {color: #0000ff;}
.source-asm .co1 {color: #adadad; font-style: italic;}
.source-asm .es0 {color: #000099; font-weight: bold;}
.source-asm .br0 {color: #66cc66;}
.source-asm .st0 {color: #7f007f;}
.source-asm .nu0 {color: #ff0000;}
.source-asm .re0 {color: #ff0000;}
.source-asm .re1 {color: #ff0000;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style>		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Assembly_language skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Assembly language</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<dl>
<dd><i>See the <a href="#Related_terminology" title="">terminology</a> section below for information regarding inconsistent use of the terms assembly and assembler.</i></dd>
</dl>
<p>An <b>assembly language</b> is a <a href="/wiki/Low-level_language" title="Low-level language" class="mw-redirect">low-level language</a> for programming <a href="/wiki/Computer" title="Computer">computers</a>. It implements a symbolic representation of the numeric <a href="/wiki/Machine_code" title="Machine code">machine codes</a> and other constants needed to program a particular <a href="/wiki/CPU" title="CPU" class="mw-redirect">CPU</a> architecture. This representation is usually defined by the hardware manufacturer, and is based on abbreviations (called <a href="/wiki/Mnemonic#Assembly_mnemonics" title="Mnemonic">mnemonics</a>) that help the programmer remember individual <a href="/wiki/Instruction_(computer_science)" title="Instruction (computer science)">instructions</a>, <a href="/wiki/Processor_register" title="Processor register">registers</a>, etc. An assembly language is thus specific to a certain physical or virtual computer architecture (as opposed to most <a href="/wiki/High-level_language" title="High-level language" class="mw-redirect">high-level languages</a>, which are usually <a href="/wiki/Porting" title="Porting">portable</a>).</p>
<p>Assembly languages were first developed in the 1950s, when they were referred to as <a href="/wiki/Second_generation_programming_language" title="Second generation programming language" class="mw-redirect">second generation programming languages</a>. They eliminated much of the error-prone and time-consuming <a href="/wiki/First-generation_language" title="First-generation language" class="mw-redirect">first-generation</a> programming needed with the earliest computers, freeing the programmer from tedium such as remembering numeric codes and calculating addresses. They were once widely used for all sorts of programming. However, by the 1980s (1990s on <a href="/wiki/Microcomputer" title="Microcomputer">small computers</a>), their use had largely been supplanted by <a href="/wiki/High-level_language" title="High-level language" class="mw-redirect">high-level languages</a>, in the search for improved <a href="/wiki/Programming_productivity" title="Programming productivity">programming productivity</a>. Today, assembly language is used primarily for direct hardware manipulation, access to specialized processor instructions, or to address critical performance issues. Typical uses are <a href="/wiki/Device_drivers" title="Device drivers" class="mw-redirect">device drivers</a>, low-level <a href="/wiki/Embedded_systems" title="Embedded systems" class="mw-redirect">embedded systems</a>, and <a href="/wiki/Real-time_computing" title="Real-time computing">real-time</a> systems.</p>
<p>A <a href="/wiki/Utility_program" title="Utility program" class="mw-redirect">utility program</a> called an <b>assembler</b> is used to translate assembly language statements into the target computer's machine code. The assembler performs a more or less <a href="/wiki/Isomorphism" title="Isomorphism">isomorphic</a> translation (a one-to-one mapping) from <a href="/wiki/Mnemonic" title="Mnemonic">mnemonic</a> statements into machine instructions and data. (This is in contrast with <a href="/wiki/High-level_language" title="High-level language" class="mw-redirect">high-level languages</a>, in which a single statement generally results in many machine instructions.)</p>
<p>Many sophisticated assemblers offer additional mechanisms to facilitate program development, control the assembly process, and aid <a href="/wiki/Debugging" title="Debugging">debugging</a>. In particular, most modern assemblers (although many have been available for more than 40 years already) include a <a href="/wiki/Macro_(computer_science)" title="Macro (computer science)">macro</a> facility (described below), and are called <b>macro assemblers</b>.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Key_concepts"><span class="tocnumber">1</span> <span class="toctext">Key concepts</span></a>
<ul>
<li class="toclevel-2"><a href="#Assembler"><span class="tocnumber">1.1</span> <span class="toctext">Assembler</span></a></li>
<li class="toclevel-2"><a href="#Assembly_language"><span class="tocnumber">1.2</span> <span class="toctext">Assembly language</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Language_design"><span class="tocnumber">2</span> <span class="toctext">Language design</span></a>
<ul>
<li class="toclevel-2"><a href="#Basic_elements"><span class="tocnumber">2.1</span> <span class="toctext">Basic elements</span></a></li>
<li class="toclevel-2"><a href="#Macros"><span class="tocnumber">2.2</span> <span class="toctext">Macros</span></a></li>
<li class="toclevel-2"><a href="#Support_for_structured_programming"><span class="tocnumber">2.3</span> <span class="toctext">Support for structured programming</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Use_of_assembly_language"><span class="tocnumber">3</span> <span class="toctext">Use of assembly language</span></a>
<ul>
<li class="toclevel-2"><a href="#Historical_perspective"><span class="tocnumber">3.1</span> <span class="toctext">Historical perspective</span></a></li>
<li class="toclevel-2"><a href="#Current_usage"><span class="tocnumber">3.2</span> <span class="toctext">Current usage</span></a></li>
<li class="toclevel-2"><a href="#Typical_applications"><span class="tocnumber">3.3</span> <span class="toctext">Typical applications</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Related_terminology"><span class="tocnumber">4</span> <span class="toctext">Related terminology</span></a></li>
<li class="toclevel-1"><a href="#Further_details"><span class="tocnumber">5</span> <span class="toctext">Further details</span></a></li>
<li class="toclevel-1"><a href="#Example_listing_of_assembly_language_source_code"><span class="tocnumber">6</span> <span class="toctext">Example listing of assembly language source code</span></a></li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">7</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">8</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1"><a href="#Further_reading"><span class="tocnumber">9</span> <span class="toctext">Further reading</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">10</span> <span class="toctext">External links</span></a>
<ul>
<li class="toclevel-2"><a href="#Software"><span class="tocnumber">10.1</span> <span class="toctext">Software</span></a></li>
</ul>
</li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Key_concepts" id="Key_concepts"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Assembly_language&amp;action=edit&amp;section=1" title="Edit section: Key concepts">edit</a>]</span> <span class="mw-headline">Key concepts</span></h2>
<p><a name="Assembler" id="Assembler"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Assembly_language&amp;action=edit&amp;section=2" title="Edit section: Assembler">edit</a>]</span> <span class="mw-headline">Assembler</span></h3>
<dl>
<dd><i>Compare with: <a href="/wiki/Microassembler" title="Microassembler">Microassembler</a>.</i></dd>
</dl>
<p>Typically a modern <b>assembler</b> creates <a href="/wiki/Object_code" title="Object code" class="mw-redirect">object code</a> by translating assembly instruction mnemonics into <a href="/wiki/Opcode" title="Opcode">opcodes</a>, and by resolving <a href="/wiki/Identifier" title="Identifier">symbolic names</a> for memory locations and other entities.<sup id="cite_ref-0" class="reference"><a href="#cite_note-0" title=""><span>[</span>1<span>]</span></a></sup> The use of symbolic references is a key feature of assemblers, saving tedious calculations and manual address updates after program modifications. Most assemblers also include <a href="/wiki/Macro_(computer_science)" title="Macro (computer science)">macro</a> facilities for performing textual substitution—e.g., to generate common short sequences of instructions to run <a href="/wiki/Inline_expansion" title="Inline expansion">inline</a>, instead of in a <a href="/wiki/Subroutine" title="Subroutine">subroutine</a>.</p>
<p>Assemblers are generally simpler to write than <a href="/wiki/Compiler" title="Compiler">compilers</a> for <a href="/wiki/High-level_language" title="High-level language" class="mw-redirect">high-level languages</a>, and have been available since the 1950s. Modern assemblers, especially for <a href="/wiki/RISC" title="RISC" class="mw-redirect">RISC</a> based architectures, such as <a href="/wiki/MIPS_architecture" title="MIPS architecture">MIPS</a>, Sun <a href="/wiki/SPARC" title="SPARC">SPARC</a>, HP <a href="/wiki/PA-RISC" title="PA-RISC">PA-RISC</a> and <a href="/wiki/X86" title="X86">x86</a>(<a href="/wiki/X64" title="X64" class="mw-redirect">-64</a>), optimize <a href="/wiki/Instruction_scheduling" title="Instruction scheduling">instruction scheduling</a> to exploit the <a href="/wiki/CPU_pipeline" title="CPU pipeline" class="mw-redirect">CPU pipeline</a> efficiently.</p>
<p>More sophisticated <a href="/wiki/High-level_assembler" title="High-level assembler">high-level assemblers</a> provide language abstractions such as:</p>
<ul>
<li>Advanced control structures</li>
<li>High-level procedure/function declarations and invocations</li>
<li>High-level abstract data types, including structures/records, unions, classes, and sets</li>
<li>Sophisticated macro processing</li>
<li>Object-Oriented features such as encapsulation, polymorphism, inheritance, interfaces</li>
</ul>
<p>See <a href="#Language_design" title="">Language design</a> below for more details.</p>
<p>Note that, in normal professional usage, the term <b>assembler</b> is often used ambiguously: It is frequently used to refer to an assembly language itself, rather than to the assembler utility. Thus: "CP/CMS was written in <a href="/wiki/S/360" title="S/360" class="mw-redirect">S/360</a> assembler" as opposed to "ASM-H was a widely-used <a href="/wiki/S/370" title="S/370" class="mw-redirect">S/370</a> assembler."<sup class="noprint Template-Fact"><span title="This claim needs references to reliable sources&#160;since March 2009" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</span></sup></p>
<p><a name="Assembly_language" id="Assembly_language"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Assembly_language&amp;action=edit&amp;section=3" title="Edit section: Assembly language">edit</a>]</span> <span class="mw-headline">Assembly language</span></h3>
<p>A program written in assembly language consists of a series of <i>instructions</i>--mnemonics that correspond to a stream of executable instructions, when translated by an <a href="/wiki/Assembly_language#Assembler" title="Assembly language">assembler</a>, that can be loaded into memory and executed.</p>
<p>For example, an <a href="/wiki/X86" title="X86">x86</a>/<a href="/wiki/IA-32" title="IA-32">IA-32</a> processor can execute the following binary instruction as expressed in <a href="/wiki/Machine_language" title="Machine language" class="mw-redirect">machine language</a> (see <a href="/wiki/X86_assembly_language" title="X86 assembly language">x86 assembly language</a>):</p>
<ul>
<li>Binary: 10110000 01100001 (Hexadecimal: B0 61)</li>
</ul>
<p>The equivalent assembly language representation is easier to remember (example in Intel syntax, more <i><a href="/wiki/Mnemonic" title="Mnemonic">mnemonic</a></i>):</p>
<ul>
<li>
<div dir="ltr" style="text-align: left;">
<pre class="source-asm">
<span class="kw1">MOV</span> <span class="kw3">AL</span>, #61h
</pre></div>
</li>
</ul>
<p>This instruction means:</p>
<ul>
<li>Move the value 61h (or 97 <a href="/wiki/Decimal" title="Decimal">decimal</a>; the h-suffix means <a href="/wiki/Hexadecimal" title="Hexadecimal">hexadecimal</a>; the pound sign means move the immediate value, not location) into the <a href="/wiki/Processor_register" title="Processor register">processor register</a> named "AL".</li>
</ul>
<p>The mnemonic "mov" represents the opcode <b>1011</b> which <i>moves</i> the value in the second operand into the register indicated by the first operand. The mnemonic was chosen by the instruction set designer to abbreviate "move", making it easier for the programmer to remember. A comma-separated list of arguments or parameters follows the opcode; this is a typical assembly language statement.</p>
<p>In practice many programmers drop the word <i>mnemonic</i> and, technically incorrectly, call "mov" an <i>opcode</i>. When they do this they are referring to the underlying binary code which it represents. To put it another way, a mnemonic such as "mov" is not an opcode, but as it symbolizes an opcode, one might refer to "the opcode mov" for example when one intends to refer to the binary opcode it symbolizes rather than to the symbol--the mnemonic--itself. As few modern programmers have need to be mindful of actually what binary patterns are the opcodes for specific instructions, the distinction has in practice become a bit blurred among programmers but not among processor designers.</p>
<p>Transforming assembly into machine language is accomplished by an <a href="/wiki/Assembly_language#Assembler" title="Assembly language">assembler</a>, and the reverse by a <a href="/wiki/Disassembler" title="Disassembler">disassembler</a>. Unlike in <a href="/wiki/High-level_language" title="High-level language" class="mw-redirect">high-level languages</a>, there is usually a <a href="/wiki/One-to-one_correspondence" title="One-to-one correspondence" class="mw-redirect">one-to-one correspondence</a> between simple assembly statements and machine language instructions. However, in some cases, an assembler may provide <i>pseudoinstructions</i> which expand into several machine language instructions to provide commonly needed functionality. For example, for a machine that lacks a "branch if greater or equal" instruction, an assembler may provide a pseudoinstruction that expands to the machine's "set if less than" and "branch if zero (on the result of the set instruction)". Most full-featured assemblers also provide a rich <a href="/wiki/Macro_(computer_science)" title="Macro (computer science)">macro</a> language (discussed below) which is used by vendors and programmers to generate more complex code and data sequences.</p>
<p>Each <a href="/wiki/Computer_architecture" title="Computer architecture">computer architecture</a> and <a href="/wiki/Processor_architecture" title="Processor architecture" class="mw-redirect">processor architecture</a> has its own machine language. On this level, each instruction is simple enough to be executed using a relatively small number of electronic circuits. Computers differ by the number and type of operations they support. For example, a new 64-bit machine would have different circuitry from a 32-bit machine. They may also have different sizes and numbers of registers, and different representations of data types in storage. While most general-purpose computers are able to carry out essentially the same functionality, the ways they do so differ; the corresponding assembly languages reflect these differences.</p>
<p>Multiple sets of <a href="/wiki/Mnemonic" title="Mnemonic">mnemonics</a> or assembly-language syntax may exist for a single instruction set, typically instantiated in different assembler programs. In these cases, the most popular one is usually that supplied by the manufacturer and used in its documentation.</p>
<p><a name="Language_design" id="Language_design"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Assembly_language&amp;action=edit&amp;section=4" title="Edit section: Language design">edit</a>]</span> <span class="mw-headline">Language design</span></h2>
<p><a name="Basic_elements" id="Basic_elements"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Assembly_language&amp;action=edit&amp;section=5" title="Edit section: Basic elements">edit</a>]</span> <span class="mw-headline">Basic elements</span></h3>
<p>Instructions (statements) in assembly language are generally very simple, unlike those in <a href="/wiki/High-level_programming_language" title="High-level programming language">high-level languages</a>. Each instruction typically consists of an <i>operation</i> or <i>opcode</i> plus zero or more <i><a href="/wiki/Operands" title="Operands" class="mw-redirect">operands</a></i>. Most instructions refer to a single value, or a pair of values. Generally, an opcode is a symbolic name for a single executable machine language instruction. Operands can be either immediate (typically one byte values, coded in the instruction itself) or the addresses of data located elsewhere in storage. This is determined by the underlying processor architecture: the assembler merely reflects how this architecture works.</p>
<p>Most modern assemblers also support <i>pseudo-operations</i>, which are directives obeyed by the assembler at assembly time instead of the CPU at run time. (For example, pseudo-ops would be used to reserve storage areas and optionally their initial contents.) The names of pseudo-ops often start with a dot to distinguish them from machine instructions.</p>
<p>Some assemblers also support <i>pseudo-instructions</i>, which generate two or more machine instructions.</p>
<p>Symbolic assemblers allow programmers to associate arbitrary names (<i><a href="/wiki/Label_(programming_language)" title="Label (programming language)">labels</a></i> or <i>symbols</i>) with memory locations. Usually, every constant and variable is given a name so instructions can reference those locations by name, thus promoting <a href="/wiki/Self-documenting_code" title="Self-documenting code" class="mw-redirect">self-documenting code</a>. In executable code, the name of each subroutine is associated with its entry point, so any calls to a subroutine can use its name. Inside subroutines, <a href="/wiki/GOTO" title="GOTO" class="mw-redirect">GOTO</a> destinations are given labels. Some assemblers support <i>local symbols</i> which are lexically distinct from normal symbols (e.g., the use of "10$" as a GOTO destination).</p>
<p>Most assemblers provide flexible symbol management, allowing programmers to manage different <a href="/wiki/Namespace_(computer_science)" title="Namespace (computer science)">namespaces</a>, automatically calculate offsets within <a href="/wiki/Data_structures" title="Data structures" class="mw-redirect">data structures</a>, and assign labels that refer to literal values or the result of simple computations performed by the assembler. Labels can also be used to initialize constants and variables with relocatable addresses.</p>
<p>Assembly languages, like most other computer languages, allow comments to be added to assembly <a href="/wiki/Source_code" title="Source code">source code</a> that are ignored by the assembler. Good use of comments is even more important with assembly code than with higher-level languages, as the meaning of a sequence of instructions is harder to decipher from the code itself.</p>
<p>Wise use of these facilities can greatly simplify the problems of coding and maintaining low-level code. <i>Raw</i> assembly source code as generated by compilers or disassemblers — code without any comments, meaningful symbols, or data definitions — is quite difficult to read when changes must be made.</p>
<p><a name="Macros" id="Macros"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Assembly_language&amp;action=edit&amp;section=6" title="Edit section: Macros">edit</a>]</span> <span class="mw-headline">Macros</span></h3>
<p>Many assemblers support <i>macros</i>, programmer-defined symbols that stand for some sequence of text lines. This sequence of text lines may include a sequence of instructions, or a sequence of data storage pseudo-ops. Once a macro has been defined using the appropriate pseudo-op, its name may be used in place of a mnemonic. When the assembler processes such a statement, it replaces the statement with the text lines associated with that macro, then processes them just as though they had appeared in the source code file all along (including, in better assemblers, expansion of any macros appearing in the replacement text).</p>
<p>Since macros can have 'short' names but expand to several or indeed many lines of code, they can be used to make assembly language programs appear to be much shorter (require less lines of source code from the application programmer - as with a higher level language). They can also be used to add higher levels of structure to assembly programs, optionally introduce embedded de-bugging code via parameters and other similar features.</p>
<p>Many assemblers have built-in macros for system calls and other special code sequences.</p>
<p>Macro assemblers often allow macros to take <a href="/wiki/Parameter_(computer_science)" title="Parameter (computer science)">parameters</a>. Some assemblers include quite sophisticated macro languages, incorporating such high-level language elements as optional parameters, symbolic variables, conditionals, string manipulation, and arithmetic operations, all usable during the execution of a given macros, and allowing macros to save context or exchange information. Thus a macro might generate a large number of assembly language instructions or data definitions, based on the macro arguments. This could be used to generate record-style data structures or "unrolled" loops, for example, or could generate entire algorithms based on complex parameters. An organization using assembly language that has been heavily extended using such a macro suite can be considered to be working in a higher-level language, since such programmers are not working with a computer's lowest-level conceptual elements.</p>
<p>Macros were used to customize large scale software systems for specific customers in the mainframe era and were also used by customer personnel to satisfy their employers' needs by making specific versions of manufacturer operating systems; this was done, for example, by systems programmers working with IBM's Conversational Monitor System/Virtual Machine (CMS/VM) and with <a href="/wiki/IBM" title="IBM">IBM</a>'s "real time transaction processing" add-on, Customer Information Control System, <a href="/wiki/CICS" title="CICS">CICS</a> and the airline/financial system that began in the 1970s and still runs many large <a href="/wiki/Global_Distribution_Systems" title="Global Distribution Systems" class="mw-redirect">Global Distribution Systems</a> (GDS) and credit card systems today, <a href="/wiki/TPF" title="TPF">TPF</a>.</p>
<p>It was also possible to use solely the macro processing capabilities of an assembler to generate code written in completely different languages, for example, to generate a version of a program in Cobol using a pure macro assembler program containing lines of Cobol code inside assembly time operators instructing the assembler to generate arbitrary code.</p>
<p>This was because, as was realized in the 1970s, the concept of "macro processing" is independent of the concept of "assembly", the former being in modern terms more word processing, text processing, than generating object code. The concept of macro processing in fact appeared in and appears in the C programming language, which supports "preprocessor instructions" to set variables, and make conditional tests on their values. Note that unlike certain previous macro processors inside assemblers, the C preprocessor was not <a href="/wiki/Turing_completeness" title="Turing completeness">Turing-complete</a> because it lacked the ability to either loop or "go to", the latter allowing the programmer to loop.</p>
<p>Despite the power of macro processing, it fell into disuse in high level languages while remaining a perennial for assemblers.</p>
<p>This was because many programmers were rather confused by macro parameter substitution and did not disambiguate macro processing from assembly and execution.</p>
<p>Macro parameter substitution is strictly by name: at macro processing time, the value of a parameter is textually substituted for its name. The most famous class of bugs resulting was the use of a parameter that itself was an expression and not a simple name when the macro writer expected a name. In the macro: <tt>foo: macro a load a*b</tt> the intention was that the caller would provide the name of a variable, and the "global" variable or constant b would be used to multiply "a". If foo is called with the parameter a-c, an unexpected macro expansion occurs.</p>
<p>To avoid this, users of macro processors learned to religiously parenthesize formal parameters inside macro definitions, and callers had to do the same to their "actual" parameters.</p>
<p>PL/I and C feature macros, but this facility was underused or dangerous when used because they can only manipulate text. On the other hand, homoiconic languages, such as <a href="/wiki/Lisp_(programming_language)" title="Lisp (programming language)">Lisp</a>, <a href="/wiki/Prolog" title="Prolog">Prolog</a>, and <a href="/wiki/Forth" title="Forth">Forth</a>, retain the power of assembly language macros because they are able to manipulate their own code as data.</p>
<p><a name="Support_for_structured_programming" id="Support_for_structured_programming"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Assembly_language&amp;action=edit&amp;section=7" title="Edit section: Support for structured programming">edit</a>]</span> <span class="mw-headline">Support for structured programming</span></h3>
<p>Some assemblers have incorporated <a href="/wiki/Structured_programming" title="Structured programming">structured programming</a> elements to encode execution flow. The earliest example of this approach was in the <a href="/w/index.php?title=Concept-14_macro_set&amp;action=edit&amp;redlink=1" class="new" title="Concept-14 macro set (page does not exist)">Concept-14 macro set</a> developed by <a href="/w/index.php?title=Marvin_Zloof&amp;action=edit&amp;redlink=1" class="new" title="Marvin Zloof (page does not exist)">Marvin Zloof</a> at IBM's <a href="/wiki/Thomas_Watson_Research_Center" title="Thomas Watson Research Center" class="mw-redirect">Thomas Watson Research Center</a>, which extended the S/370 macro assembler with IF/ELSE/ENDIF and similar control flow blocks. This was a way to reduce or eliminate the use of <a href="/wiki/GOTO" title="GOTO" class="mw-redirect">GOTO</a> operations in assembly code, one of the main factors causing <a href="/wiki/Spaghetti_code" title="Spaghetti code">spaghetti code</a> in assembly language. This approach was widely accepted in the early 80s (the latter days of large-scale assembly language use).</p>
<p>A curious design was <a href="/w/index.php?title=A-natural&amp;action=edit&amp;redlink=1" class="new" title="A-natural (page does not exist)">A-natural</a>, a "stream-oriented" assembler for 8080/<a href="/wiki/Z80" title="Z80" class="mw-redirect">Z80</a> processors<sup class="noprint Template-Fact"><span title="This claim needs references to reliable sources&#160;since January 2009" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</span></sup> from <a href="/wiki/Whitesmiths" title="Whitesmiths">Whitesmiths Ltd.</a> (developers of the <a href="/wiki/Unix" title="Unix">Unix</a>-like <a href="/wiki/Idris_(operating_system)" title="Idris (operating system)">Idris</a> operating system, and what was reported to be the first commercial <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a> <a href="/wiki/Compiler" title="Compiler">compiler</a>). The language was classified as an assembler, because it worked with raw machine elements such as opcodes, registers, and memory references; but it incorporated an expression syntax to indicate execution order. Parentheses and other special symbols, along with block-oriented structured programming constructs, controlled the sequence of the generated instructions. A-natural was built as the object language of a C compiler, rather than for hand-coding, but its logical syntax won some fans.</p>
<p>There has been little apparent demand for more sophisticated assemblers since the decline of large-scale assembly language development.<sup id="cite_ref-assembly-language.3Fcat.3Dtechnology_1-0" class="reference"><a href="#cite_note-assembly-language.3Fcat.3Dtechnology-1" title=""><span>[</span>2<span>]</span></a></sup> In spite of that, they are still being developed and applied in cases where resource constraints or peculiarities in the target system's architecture prevent the effective use of higher-level languages.<sup id="cite_ref-2" class="reference"><a href="#cite_note-2" title=""><span>[</span>3<span>]</span></a></sup></p>
<p><a name="Use_of_assembly_language" id="Use_of_assembly_language"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Assembly_language&amp;action=edit&amp;section=8" title="Edit section: Use of assembly language">edit</a>]</span> <span class="mw-headline">Use of assembly language</span></h2>
<p><a name="Historical_perspective" id="Historical_perspective"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Assembly_language&amp;action=edit&amp;section=9" title="Edit section: Historical perspective">edit</a>]</span> <span class="mw-headline">Historical perspective</span></h3>
<p>Historically, a large number of programs have been written entirely in assembly language. Operating systems were almost exclusively written in assembly language until the widespread acceptance of <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a> in the 1970s and early 1980s. Many commercial applications were written in assembly language as well, including a large amount of the IBM mainframe software written by large corporations. <a href="/wiki/COBOL" title="COBOL">COBOL</a> and <a href="/wiki/FORTRAN" title="FORTRAN" class="mw-redirect">FORTRAN</a> eventually displaced much of this work, although a number of large organizations retained assembly-language application infrastructures well into the 90s.</p>
<p>Most early microcomputers relied on hand-coded assembly language, including most operating systems and large applications. This was because these systems had severe resource constraints, imposed idiosyncratic memory and display architectures, and provided limited, buggy system services. Perhaps more important was the lack of first-class high-level language compilers suitable for microcomputer use. A psychological factor may have also played a role: the first generation of microcomputer programmers retained a hobbyist, "wires and pliers" attitude.</p>
<p>In a more commercial context, the biggest reasons for using assembly language were size, speed, and reliability: the writers of <a href="http://www.cardbox.com/cardbox/history.htm" class="external text" title="http://www.cardbox.com/cardbox/history.htm" rel="nofollow">Cardbox-Plus</a> said simply "we use assembler because then all the bugs are ours". This held true for 8-bit versions of the program, which had no bugs at all, but ironically it turned out to be false with 16 bits: Cardbox-Plus 2.0 had to be upgraded to Cardbox-Plus 2.1 because a bug in Microsoft's macro assembler caused Cardbox-Plus to index the number "-0" differently from the number "0".<sup class="noprint Template-Fact"><span title="This claim needs references to reliable sources&#160;since July 2008" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</span></sup></p>
<p>Typical examples of large assembly language programs from this time are the <a href="/wiki/MS-DOS" title="MS-DOS">MS-DOS</a> operating system, the early IBM PC <a href="/wiki/Spreadsheet" title="Spreadsheet">spreadsheet</a> program <a href="/wiki/Lotus_1-2-3" title="Lotus 1-2-3">Lotus 1-2-3</a>, and almost all popular games for the <a href="/wiki/Atari_800" title="Atari 800" class="mw-redirect">Atari 800</a> family of home computers. Even into the 1990s, most console video games were written in assembly, including most games for the <a href="/wiki/Sega_Mega_Drive" title="Sega Mega Drive">Mega Drive/Genesis</a> and the <a href="/wiki/Super_Nintendo_Entertainment_System" title="Super Nintendo Entertainment System">Super Nintendo Entertainment System</a><sup class="noprint Template-Fact"><span title="This claim needs references to reliable sources&#160;since February 2007" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</span></sup>. According to some industry insiders, the assembly language was the best computer language to use to get the best performance out of the <a href="/wiki/Sega_Saturn" title="Sega Saturn">Sega Saturn</a>, a console that was notoriously challenging to develop and program games for <sup id="cite_ref-3" class="reference"><a href="#cite_note-3" title=""><span>[</span>4<span>]</span></a></sup>. The popular arcade game <a href="/wiki/NBA_Jam" title="NBA Jam">NBA Jam</a> (1993) is another example. On the Commodore 64, Amiga, Atari ST, as well as ZX Spectrum home computers, assembler has long been the primary development language. This was in large part due to the fact that BASIC dialects on these systems offered insufficient execution speed, as well as insufficient facilities to take full advantage of the available hardware on these systems. Some systems, most notably Amiga, even have IDEs with highly advanced debugging and macro facilities, such as the freeware <a href="http://http://www.theflamearrows.info/homepage.html" class="external text" title="http://http://www.theflamearrows.info/homepage.html" rel="nofollow">ASM-One assembler</a>, comparable to that of <a href="/wiki/Microsoft_Visual_Studio" title="Microsoft Visual Studio">Microsoft Visual Studio</a> facilities (ASM-One predates Microsoft Visual Studio).</p>
<p><i>The Assembler for the <a href="/wiki/VIC-20" title="VIC-20" class="mw-redirect">VIC-20</a></i> was written by Don French and published by <i>French Silk</i>. At 1639 bytes in length, its author believes it is the smallest symbolic assembler ever written. The assembler supported the usual symbolic addressing and the definition of <a href="/wiki/Character_string" title="Character string" class="mw-redirect">character strings</a> or hex strings. It also allowed address expressions which could be combined with <a href="/wiki/Addition" title="Addition">addition</a>, <a href="/wiki/Subtraction" title="Subtraction">subtraction</a>, <a href="/wiki/Multiplication" title="Multiplication">multiplication</a>, <a href="/wiki/Division_(mathematics)" title="Division (mathematics)">division</a>, <a href="/wiki/Logical_AND" title="Logical AND" class="mw-redirect">logical AND</a>, <a href="/wiki/Logical_OR" title="Logical OR" class="mw-redirect">logical OR</a>, and <a href="/wiki/Exponentiation" title="Exponentiation">exponentiation</a> operators.<sup id="cite_ref-4" class="reference"><a href="#cite_note-4" title=""><span>[</span>5<span>]</span></a></sup></p>
<p><a name="Current_usage" id="Current_usage"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Assembly_language&amp;action=edit&amp;section=10" title="Edit section: Current usage">edit</a>]</span> <span class="mw-headline">Current usage</span></h3>
<p>There have always been debates over the usefulness and performance of assembly language relative to high-level languages. Assembly language has specific niche uses where it is important; see below. But in general, modern <a href="/wiki/Optimizing_compiler" title="Optimizing compiler" class="mw-redirect">optimizing compilers</a> are claimed to render high-level languages into code that can run as fast as hand-written assembly, despite some counter-examples that can be created. The complexity of modern processors makes effective hand-optimization increasingly difficult.<sup id="cite_ref-GreatDebate1_5-0" class="reference"><a href="#cite_note-GreatDebate1-5" title=""><span>[</span>6<span>]</span></a></sup> Moreover, and to the dismay of efficiency lovers, increasing processor performance has meant that most CPUs sit idle most of the time, with delays caused by predictable bottlenecks such as <a href="/wiki/I/O" title="I/O" class="mw-redirect">I/O</a> operations and <a href="/wiki/Paging" title="Paging">paging</a>. This has made raw code execution speed a non-issue for most programmers.</p>
<p>Here are some situations in which practitioners might choose to use assembly language:</p>
<ul>
<li>When a stand-alone binary executable is required, i.e. one that must execute without recourse to the <a href="/wiki/Run-time" title="Run-time" class="mw-redirect">run-time</a> components or <a href="/wiki/Library_(computer_science)" title="Library (computer science)" class="mw-redirect">libraries</a> associated with a high-level language; this is perhaps the most common situation. These are embedded programs that store only a small amount of memory and the device is intended to do single purpose tasks. Such examples consist of telephones, automobile fuel and ignition systems, air-conditioning control systems, security systems, and sensors.</li>
<li>When interacting directly with the hardware, for example in <a href="/wiki/Device_driver" title="Device driver">device drivers</a>.</li>
<li>When using processor-specific instructions not exploited by or available to the compiler. A common example is the <a href="/wiki/Circular_shift" title="Circular shift">bitwise rotation</a> instruction at the core of many encryption algorithms.</li>
<li><a href="/wiki/Embedded_systems" title="Embedded systems" class="mw-redirect">Embedded systems</a>.</li>
<li>When extreme optimization is required, e.g., in an inner <a href="/wiki/Control_flow#Loops" title="Control flow">loop</a> in a processor-intensive algorithm. Some <a href="/wiki/Game_programmer" title="Game programmer">game programmers</a> are experts at writing code that takes advantage of the capabilities of hardware features in systems enabling the games to run faster.</li>
<li>When a system with severe resource constraints (e.g., an <a href="/wiki/Embedded_system" title="Embedded system">embedded system</a>) must be hand-coded to maximize the use of limited resources; but this is becoming less common as processor price/performance improves</li>
<li>When no high-level language exists, e.g., on a new or specialized processor</li>
<li><a href="/wiki/Real-time_computing" title="Real-time computing">Real-time</a> programs that need precise timing and responses, such as simulations, flight navigation systems, and medical equipment. (For example, in a <a href="/wiki/Fly-by-wire" title="Fly-by-wire" class="mw-redirect">fly-by-wire</a> system, telemetry must be interpreted and acted upon within strict time constraints. Such systems must eliminate sources of unpredictable delays – such as may be created by interpreted languages, automatic <a href="/wiki/Garbage_collection_(computer_science)" title="Garbage collection (computer science)">garbage collection</a>, paging operations, or <a href="/wiki/Preemptive_multitasking" title="Preemptive multitasking" class="mw-redirect">preemptive multitasking</a>. Some higher-level languages incorporate run-time components and operating system interfaces that can introduce such delays. Choosing assembly or lower-level languages for such systems gives the programmer greater visibility and control over processing details.)</li>
<li>When complete control over the environment is required (for example in extremely high security situations, where <a href="/wiki/Trusting_trust#Reflections_on_Trusting_Trust" title="Trusting trust" class="mw-redirect">nothing can be taken for granted</a>).</li>
<li>When writing <a href="/wiki/Computer_virus" title="Computer virus">computer viruses</a>, <a href="/wiki/Bootloader" title="Bootloader" class="mw-redirect">bootloaders</a>, certain <a href="/wiki/Device_driver" title="Device driver">device drivers</a>, or other items very close to the hardware or low-level operating system.</li>
<li>When <a href="/wiki/Reverse-engineering" title="Reverse-engineering" class="mw-redirect">reverse-engineering</a> existing <a href="/wiki/Binary_file" title="Binary file">binaries</a>, which may or may not have originally been written in a high-level language, for example when cracking copy protection of proprietary software.</li>
<li><a href="/wiki/Reverse_engineering" title="Reverse engineering">Reverse engineering</a> and modification of <a href="/wiki/Video_game" title="Video game">video games</a> (known as <a href="/wiki/ROM_Hacking" title="ROM Hacking" class="mw-redirect">ROM Hacking</a>), commonly done to games for <a href="/wiki/Nintendo" title="Nintendo">Nintendo</a> hardware such as the <a href="/wiki/Super_Nintendo_Entertainment_System" title="Super Nintendo Entertainment System">SNES</a> and <a href="/wiki/Nintendo_Entertainment_System" title="Nintendo Entertainment System">NES</a>, is possible with a range of techniques, of which the most widely employed is altering the program code at the assembly language level.</li>
<li>Assembly language lends itself well to applications requiring <a href="/wiki/Self_modifying_code" title="Self modifying code" class="mw-redirect">Self modifying code</a>.</li>
<li>Assembly language is sometimes used for writing <a href="/wiki/Calculator_gaming" title="Calculator gaming">games</a> and other software for <a href="/wiki/Graphing_calculator" title="Graphing calculator">graphing calculators</a>.<sup id="cite_ref-6" class="reference"><a href="#cite_note-6" title=""><span>[</span>7<span>]</span></a></sup></li>
<li>Finally, compiler writers usually write software that generates assembly code, and should therefore be expert assembly language programmers themselves.</li>
</ul>
<p>Nevertheless, assembly language is still taught in most <a href="/wiki/Computer_Science" title="Computer Science" class="mw-redirect">Computer Science</a> and <a href="/wiki/Electronic_Engineering" title="Electronic Engineering" class="mw-redirect">Electronic Engineering</a> programs. Although few programmers today regularly work with assembly language as a tool, the underlying concepts remain very important. Such fundamental topics as <a href="/wiki/Binary_arithmetic" title="Binary arithmetic" class="mw-redirect">binary arithmetic</a>, <a href="/wiki/Memory_allocation" title="Memory allocation" class="mw-redirect">memory allocation</a>, <a href="/wiki/Stack_(data_structure)" title="Stack (data structure)">stack processing</a>, <a href="/wiki/Character_set" title="Character set" class="mw-redirect">character set</a> encoding, <a href="/wiki/Interrupt" title="Interrupt">interrupt</a> processing, and <a href="/wiki/Compiler" title="Compiler">compiler</a> design would be hard to study in detail without a grasp of how a computer operates at the hardware level. Since a computer's behavior is fundamentally defined by its instruction set, the logical way to learn such concepts is to study an assembly language. Most modern computers have similar instruction sets. Therefore, studying a single assembly language is sufficient to learn: i) The basic concepts; ii) To recognize situations where the use of assembly language might be appropriate; and iii) To see how efficient executable code can be created from high-level languages.<sup id="cite_ref-7" class="reference"><a href="#cite_note-7" title=""><span>[</span>8<span>]</span></a></sup></p>
<p><a name="Typical_applications" id="Typical_applications"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Assembly_language&amp;action=edit&amp;section=11" title="Edit section: Typical applications">edit</a>]</span> <span class="mw-headline">Typical applications</span></h3>
<p>Hard-coded assembly language is typically used in a system's <a href="/wiki/Boot_ROM" title="Boot ROM" class="mw-redirect">boot ROM</a> (<a href="/wiki/BIOS" title="BIOS">BIOS</a> on IBM-compatible <a href="/wiki/Personal_Computer" title="Personal Computer" class="mw-redirect">PC</a> systems). This low-level code is used, among other things, to initialize and test the system hardware prior to booting the OS, and is stored in <a href="/wiki/Read-only_memory" title="Read-only memory">ROM</a>. Once a certain level of hardware initialization has taken place, execution transfers to other code, typically written in higher level languages; but the code running immediately after power is applied is usually written in assembly language. The same is true of most <a href="/wiki/Boot_loader" title="Boot loader" class="mw-redirect">boot loaders</a>.</p>
<p>Many compilers render high-level languages into assembly first before fully compiling, allowing the assembly code to be viewed for <a href="/wiki/Debug" title="Debug" class="mw-redirect">debugging</a> and optimization purposes. Relatively low-level languages, such as <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a>, often provide special <a href="/wiki/Syntax_of_programming_languages" title="Syntax of programming languages" class="mw-redirect">syntax</a> to embed assembly language directly in the source code. Programs using such facilities, such as the <a href="/wiki/Linux_kernel" title="Linux kernel">Linux kernel</a>, can then construct abstractions utilizing different assembly language on each hardware platform. The system's <a href="/wiki/Software_portability" title="Software portability">portable</a> code can then utilize these processor-specific components through a uniform interface.</p>
<p>Assembly language is also valuable in <a href="/wiki/Reverse_engineering" title="Reverse engineering">reverse engineering</a>, since many programs are distributed only in machine code form, and machine code is usually easy to translate into assembly language and carefully examine in this form, but very difficult to translate into a higher-level language. Tools such as the <a href="/wiki/Interactive_Disassembler" title="Interactive Disassembler">Interactive Disassembler</a> make extensive use of disassembly for such a purpose.</p>
<p>A particular niche that makes use of assembly language is the <a href="/wiki/Demoscene" title="Demoscene">demoscene</a>. Certain competitions require the contestants to restrict their creations to a very small size (e.g. 256<a href="/wiki/Bytes" title="Bytes" class="mw-redirect">B</a>, 1<a href="/wiki/Kilobyte" title="Kilobyte">KB</a>, 4KB or 64 KB), and assembly language is the language of choice to achieve this goal.<sup id="cite_ref-8" class="reference"><a href="#cite_note-8" title=""><span>[</span>9<span>]</span></a></sup> When resources, particularly CPU-processing constrained systems, like the earlier <a href="/wiki/Amiga" title="Amiga">Amiga</a> models, and the <a href="/wiki/Commodore_64" title="Commodore 64">Commodore 64</a>, are a concern, assembler coding is a must: optimized assembler code is written "by hand" and instructions are sequenced manually by the <a href="/wiki/Programmer" title="Programmer">coders</a> in an attempt to minimize the number of CPU cycles used; the CPU constraints are so great that every CPU cycle counts. However, using such techniques has enabled systems like the Commodore 64 to produce real-time <a href="/wiki/3D_graphics" title="3D graphics" class="mw-redirect">3D graphics</a> with advanced effects, a feat which might be considered unlikely or even impossible for a system with a 0.99<a href="/wiki/MHz" title="MHz" class="mw-redirect">MHz</a> processor.</p>
<p><a name="Related_terminology" id="Related_terminology"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Assembly_language&amp;action=edit&amp;section=12" title="Edit section: Related terminology">edit</a>]</span> <span class="mw-headline">Related terminology</span></h2>
<ul>
<li><b>Assembly language</b> or <b>assembler language</b> is commonly called <b>assembly</b>, <b>assembler</b>, <b>ASM</b>, or <b>symbolic machine code</b>. A generation of IBM mainframe programmers called it <b>BAL</b> for <i>Basic Assembly Language</i>.</li>
</ul>
<dl>
<dd>
<dl>
<dd>Note: Calling the language <b>assembler</b> is of course potentially confusing and ambiguous, since this is also the name of the utility program that translates assembly language statements into machine code. Some may regard this as imprecision or error. However, this usage has been common among professionals and in the literature for decades.<sup id="cite_ref-9" class="reference"><a href="#cite_note-9" title=""><span>[</span>10<span>]</span></a></sup> Similarly, some early computers called their <i>assembler</i> its <b>assembly program</b>.<sup id="cite_ref-10" class="reference"><a href="#cite_note-10" title=""><span>[</span>11<span>]</span></a></sup>)</dd>
</dl>
</dd>
</dl>
<ul>
<li>The computational step where an assembler is run, including all macro processing, is known as <b>assembly time</b>.</li>
</ul>
<ul>
<li>The use of the word <b>assembly</b> dates from the early years of computers (<i>cf.</i> <a href="/wiki/Short_Code_(Computer_language)" title="Short Code (Computer language)" class="mw-redirect">short code</a>, <a href="/wiki/Speedcoding" title="Speedcoding">speedcode</a>).</li>
</ul>
<ul>
<li>A <b>cross assembler</b> (see <a href="/wiki/Cross_compiler" title="Cross compiler">cross compiler</a>) produces code using one type of processor, which runs on a different type of processor. This technology is particularly important when developing software for new processors, or when developing for embedded systems. This allows, for instance, a 64-bit x86_64 processor to assemble code to run on a 32-bit <a href="/wiki/ARM_architecture" title="ARM architecture">ARM</a> processor.</li>
</ul>
<ul>
<li>An <b>assembler directive</b> is a command given to an assembler. These directives may do anything from telling the assembler to include other source files, to telling it to allocate memory for constant data.</li>
</ul>
<p><a name="Further_details" id="Further_details"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Assembly_language&amp;action=edit&amp;section=13" title="Edit section: Further details">edit</a>]</span> <span class="mw-headline">Further details</span></h2>
<p>For any given personal computer, mainframe, embedded system, and game console, both past and present, at least one--possibly dozens--of assemblers have been written. For some examples, see the <a href="/wiki/List_of_assemblers" title="List of assemblers" class="mw-redirect">list of assemblers</a>.</p>
<p>On <a href="/wiki/Unix" title="Unix">Unix</a> systems, the assembler is traditionally called <a href="/wiki/As_(Unix)" title="As (Unix)">as</a>, although it is not a single body of code, being typically written anew for each port. A number of Unix variants use <a href="/wiki/GNU_Assembler" title="GNU Assembler">GAS</a>.</p>
<p>Within processor groups, each assembler has its own dialect. Sometimes, some assemblers can read another assembler's dialect, for example, <a href="/wiki/TASM" title="TASM" class="mw-redirect">TASM</a> can read old <a href="/wiki/MASM" title="MASM" class="mw-redirect">MASM</a> code, but not the reverse. <a href="/wiki/FASM" title="FASM">FASM</a> and <a href="/wiki/Netwide_Assembler" title="Netwide Assembler">NASM</a> have similar syntax, but each support different macros that could make them difficult to translate to each other. The basics are all the same, but the advanced features will differ.<sup id="cite_ref-Hyde_11-0" class="reference"><a href="#cite_note-Hyde-11" title=""><span>[</span>12<span>]</span></a></sup></p>
<p>Also, assembly can sometimes be portable across different operating systems on the same type of <a href="/wiki/CPU" title="CPU" class="mw-redirect">CPU</a>. <a href="/wiki/Calling_convention" title="Calling convention">Calling conventions</a> between operating systems often differ slightly or not at all, and with care it is possible to gain some portability in assembly language, usually by linking with a <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a> library that does not change between operating systems.</p>
<p>For example, many things in <a href="/wiki/Libc" title="Libc" class="mw-redirect">libc</a> depend on the preprocessor to do OS-specific, C-specific things to the program before compiling. In fact, some functions and symbols are not even guaranteed to exist outside of the preprocessor. Worse, the size and field order of structs, as well as the size of certain <a href="/wiki/Typedef" title="Typedef">typedefs</a> such as off_t, are entirely unavailable in assembly language without help from a <a href="/wiki/Configure_script" title="Configure script" class="mw-redirect">configure script</a>, and differ even between versions of <a href="/wiki/Linux" title="Linux">Linux</a>, making it impossible to portably call functions in libc other than ones that only take simple integers and pointers as parameters. To address this issue, <a href="/wiki/FASMLIB" title="FASMLIB">FASMLIB</a> project provides a portable assembly library for Win32 and Linux platforms, but it is yet very incomplete.<sup id="cite_ref-FASMLIB_12-0" class="reference"><a href="#cite_note-FASMLIB-12" title=""><span>[</span>13<span>]</span></a></sup></p>
<p>Some higher level computer languages, such as <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a> and <a href="/wiki/Borland_Pascal" title="Borland Pascal" class="mw-redirect">Borland Pascal</a>, support <a href="/wiki/Inline_assembler" title="Inline assembler">inline assembly</a> where relatively brief sections of assembly code can be embedded into the high level language code. The <a href="/wiki/Forth_programming_language" title="Forth programming language" class="mw-redirect">Forth programming language</a> commonly contains an assembler used in CODE words.</p>
<p>Many people use an <a href="/wiki/Emulator" title="Emulator">emulator</a> to debug assembly-language programs.</p>
<p><a name="Example_listing_of_assembly_language_source_code" id="Example_listing_of_assembly_language_source_code"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Assembly_language&amp;action=edit&amp;section=14" title="Edit section: Example listing of assembly language source code">edit</a>]</span> <span class="mw-headline">Example listing of assembly language source code</span></h2>
<table class="wikitable">
<tr>
<th>Address</th>
<th>Label</th>
<th>Instruction (AT&amp;T syntax)</th>
<th>Object code<sup id="cite_ref-Murdocca_13-0" class="reference"><a href="#cite_note-Murdocca-13" title=""><span>[</span>14<span>]</span></a></sup></th>
</tr>
<tr>
<td></td>
<td></td>
<td><tt>.begin</tt></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td><tt>.org 2048</tt></td>
<td></td>
</tr>
<tr>
<td></td>
<td><tt>a_start</tt></td>
<td><tt>.equ 3000</tt></td>
<td></td>
</tr>
<tr>
<td><tt>2048</tt></td>
<td></td>
<td><tt>ld length,%</tt></td>
</tr>
<tr>
<td><tt>2064</tt></td>
<td></td>
<td><tt>be done</tt></td>
<td><tt>00000010 10000000 00000000 00000110</tt></td>
</tr>
<tr>
<td><tt>2068</tt></td>
<td></td>
<td><tt>addcc&#160;%r1,-4,%r1</tt></td>
<td><tt>10000010 10000000 01111111 11111100</tt></td>
</tr>
<tr>
<td><tt>2072</tt></td>
<td></td>
<td><tt>addcc&#160;%r1,%r2,%r4</tt></td>
<td><tt>10001000 10000000 01000000 00000010</tt></td>
</tr>
<tr>
<td><tt>2076</tt></td>
<td></td>
<td><tt>ld&#160;%r4,%r5</tt></td>
<td><tt>11001010 00000001 00000000 00000000</tt></td>
</tr>
<tr>
<td><tt>2080</tt></td>
<td></td>
<td><tt>ba loop</tt></td>
<td><tt>00010000 10111111 11111111 11111011</tt></td>
</tr>
<tr>
<td><tt>2084</tt></td>
<td></td>
<td><tt>addcc&#160;%r3,%r5,%r3</tt></td>
<td><tt>10000110 10000000 11000000 00000101</tt></td>
</tr>
<tr>
<td><tt>2088</tt></td>
<td><tt>done:</tt></td>
<td><tt>jmpl&#160;%r15+4,%r0</tt></td>
<td><tt>10000001 11000011 11100000 00000100</tt></td>
</tr>
<tr>
<td><tt>2092</tt></td>
<td><tt>length:</tt></td>
<td><tt>20</tt></td>
<td><tt>00000000 00000000 00000000 00010100</tt></td>
</tr>
<tr>
<td><tt>2096</tt></td>
<td><tt>address:</tt></td>
<td><tt>a_start</tt></td>
<td><tt>00000000 00000000 00001011 10111000</tt></td>
</tr>
<tr>
<td></td>
<td></td>
<td><tt>.org a_start</tt></td>
<td></td>
</tr>
<tr>
<td><tt>3000</tt></td>
<td><tt>a:</tt></td>
</tr>
</table>
<p>Example of a selection of instructions (for a <a href="/wiki/Universal_Virtual_Computer" title="Universal Virtual Computer">virtual computer</a><sup id="cite_ref-wwwPOCA_14-0" class="reference"><a href="#cite_note-wwwPOCA-14" title=""><span>[</span>15<span>]</span></a></sup>) with the corresponding <a href="/wiki/Memory_address" title="Memory address">address</a> in memory where each instruction will be placed. These addresses are not static, see <a href="/wiki/Memory_management" title="Memory management">memory management</a>. Accompanying each instruction is the generated (by the assembler) <a href="/wiki/Object_file" title="Object file">object code</a> that coincides with the virtual computer's architecture (or <a href="/wiki/Instruction_set" title="Instruction set">ISA</a>).</p>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Assembly_language&amp;action=edit&amp;section=15" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<ul>
<li><a href="/wiki/Little_man_computer" title="Little man computer">Little man computer</a> - an educational computer model with a base-10 assembly language</li>
<li><a href="/wiki/X86_assembly_language" title="X86 assembly language">x86 assembly language</a> - the assembly language for common Intel <a href="/wiki/X86_architecture" title="X86 architecture" class="mw-redirect">80x86</a> microprocessors</li>
<li><a href="/wiki/Compiler" title="Compiler">Compiler</a></li>
<li><a href="/wiki/Disassembler" title="Disassembler">Disassembler</a></li>
<li><a href="/wiki/List_of_assemblers" title="List of assemblers" class="mw-redirect">List of assemblers</a></li>
<li><a href="/wiki/Instruction_set" title="Instruction set">Instruction set</a></li>
<li><a href="/wiki/Microassembler" title="Microassembler">Microassembler</a></li>
<li><a href="/wiki/MACRO-11" title="MACRO-11">MACRO-11</a></li>
</ul>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Assembly_language&amp;action=edit&amp;section=16" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<div class="references-small references-column-count references-column-count-2" style="-moz-column-count:2; column-count:2;">
<ol class="references">
<li id="cite_note-0"><b><a href="#cite_ref-0" title="">^</a></b> David Salomon (1993). <i><a href="http://www.davidsalomon.name/assem.advertis/asl.pdf" class="external text" title="http://www.davidsalomon.name/assem.advertis/asl.pdf" rel="nofollow">Assemblers and Loaders</a></i></li>
<li id="cite_note-assembly-language.3Fcat.3Dtechnology-1"><b><a href="#cite_ref-assembly-language.3Fcat.3Dtechnology_1-0" title="">^</a></b> <cite style="font-style:normal" class="web" id="CITEREFAnswers.com">Answers.com. <a href="http://www.answers.com/topic/assembly-language?cat=technology" class="external text" title="http://www.answers.com/topic/assembly-language?cat=technology" rel="nofollow">"assembly language: Definition and Much More from Answers.com"</a><span class="printonly">. <a href="http://www.answers.com/topic/assembly-language?cat=technology" class="external free" title="http://www.answers.com/topic/assembly-language?cat=technology" rel="nofollow">http://www.answers.com/topic/assembly-language?cat=technology</a></span><span class="reference-accessdate">. Retrieved on 2008-06-19</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=assembly+language%3A+Definition+and+Much+More+from+Answers.com&amp;rft.atitle=&amp;rft.aulast=Answers.com&amp;rft.au=Answers.com&amp;rft_id=http%3A%2F%2Fwww.answers.com%2Ftopic%2Fassembly-language%3Fcat%3Dtechnology&amp;rfr_id=info:sid/en.wikipedia.org:Assembly_language"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-2"><b><a href="#cite_ref-2" title="">^</a></b> <a href="http://neshla.sourceforge.net/" class="external text" title="http://neshla.sourceforge.net/" rel="nofollow">NESHLA: The High Level, Open Source, 6502 Assembler for the Nintendo Entertainment System</a></li>
<li id="cite_note-3"><b><a href="#cite_ref-3" title="">^</a></b> <a href="http://www.eidolons-inn.net/tiki-index.php?page=SegaBase+Saturn" class="external text" title="http://www.eidolons-inn.net/tiki-index.php?page=SegaBase+Saturn" rel="nofollow">Eidolon's Inn&#160;: SegaBase Saturn</a></li>
<li id="cite_note-4"><b><a href="#cite_ref-4" title="">^</a></b> <cite style="font-style:normal" class="web" id="CITEREFJim_Lawless2004">Jim Lawless (2004-05-21). <a href="http://www.radiks.net/~jimbo/art/int7.htm" class="external text" title="http://www.radiks.net/~jimbo/art/int7.htm" rel="nofollow">"Speaking with Don French&#160;: The Man Behind the French Silk Assembler Tools"</a><span class="printonly">. <a href="http://www.radiks.net/~jimbo/art/int7.htm" class="external free" title="http://www.radiks.net/~jimbo/art/int7.htm" rel="nofollow">http://www.radiks.net/~jimbo/art/int7.htm</a></span><span class="reference-accessdate">. Retrieved on 2008-07-25</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Speaking+with+Don+French+%3A+The+Man+Behind+the+French+Silk+Assembler+Tools&amp;rft.atitle=&amp;rft.aulast=Jim+Lawless&amp;rft.au=Jim+Lawless&amp;rft.date=2004-05-21&amp;rft_id=http%3A%2F%2Fwww.radiks.net%2F%7Ejimbo%2Fart%2Fint7.htm&amp;rfr_id=info:sid/en.wikipedia.org:Assembly_language"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-GreatDebate1-5"><b><a href="#cite_ref-GreatDebate1_5-0" title="">^</a></b> <cite style="font-style:normal" class="web" id="CITEREFRandall_Hyde">Randall Hyde. <a href="http://webster.cs.ucr.edu/Page_TechDocs/GreatDebate/debate1.html" class="external text" title="http://webster.cs.ucr.edu/Page_TechDocs/GreatDebate/debate1.html" rel="nofollow">"The Great Debate"</a><span class="printonly">. <a href="http://webster.cs.ucr.edu/Page_TechDocs/GreatDebate/debate1.html" class="external free" title="http://webster.cs.ucr.edu/Page_TechDocs/GreatDebate/debate1.html" rel="nofollow">http://webster.cs.ucr.edu/Page_TechDocs/GreatDebate/debate1.html</a></span><span class="reference-accessdate">. Retrieved on 2008-07-03</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=The+Great+Debate&amp;rft.atitle=&amp;rft.aulast=Randall+Hyde&amp;rft.au=Randall+Hyde&amp;rft_id=http%3A%2F%2Fwebster.cs.ucr.edu%2FPage_TechDocs%2FGreatDebate%2Fdebate1.html&amp;rfr_id=info:sid/en.wikipedia.org:Assembly_language"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-6"><b><a href="#cite_ref-6" title="">^</a></b> <cite style="font-style:normal" class="web"><a href="http://tifreakware.net/tutorials/89/a/calc/fargoii.htm" class="external text" title="http://tifreakware.net/tutorials/89/a/calc/fargoii.htm" rel="nofollow">"68K Programming in Fargo II"</a><span class="printonly">. <a href="http://tifreakware.net/tutorials/89/a/calc/fargoii.htm" class="external free" title="http://tifreakware.net/tutorials/89/a/calc/fargoii.htm" rel="nofollow">http://tifreakware.net/tutorials/89/a/calc/fargoii.htm</a></span><span class="reference-accessdate">. Retrieved on 2008-07-03</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=68K+Programming+in+Fargo+II&amp;rft.atitle=&amp;rft_id=http%3A%2F%2Ftifreakware.net%2Ftutorials%2F89%2Fa%2Fcalc%2Ffargoii.htm&amp;rfr_id=info:sid/en.wikipedia.org:Assembly_language"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-7"><b><a href="#cite_ref-7" title="">^</a></b> Hyde, <i>op. cit.</i>, Foreword ("Why would anyone learn this stuff?")</li>
<li id="cite_note-8"><b><a href="#cite_ref-8" title="">^</a></b> <cite style="font-style:normal" class="web"><a href="http://web.archive.org/web/20080211025322rn_1/www.256b.com/home.php" class="external text" title="http://web.archive.org/web/20080211025322rn_1/www.256b.com/home.php" rel="nofollow">"256bytes demos archives"</a><span class="printonly">. <a href="http://web.archive.org/web/20080211025322rn_1/www.256b.com/home.php" class="external free" title="http://web.archive.org/web/20080211025322rn_1/www.256b.com/home.php" rel="nofollow">http://web.archive.org/web/20080211025322rn_1/www.256b.com/home.php</a></span><span class="reference-accessdate">. Retrieved on 2008-07-03</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=256bytes+demos+archives&amp;rft.atitle=&amp;rft_id=http%3A%2F%2Fweb.archive.org%2Fweb%2F20080211025322rn_1%2Fwww.256b.com%2Fhome.php&amp;rfr_id=info:sid/en.wikipedia.org:Assembly_language"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-9"><b><a href="#cite_ref-9" title="">^</a></b> Stroustrup, Bjarne, <i>The C++ Programming Language</i>, Addison-Wesley, 1986, <a href="/wiki/Special:BookSources/020112078X" class="internal">ISBN 0-201-12078-X</a>: <i>"C++ was primarily designed so that the author and his friends would not have to program in assembler, C, or various modern high-level languages.</i> [use of the term <i>assembler</i> to mean <i>assembly language</i>]"</li>
<li id="cite_note-10"><b><a href="#cite_ref-10" title="">^</a></b> Saxon, James, and Plette, William, <i>Programming the IBM 1401</i>, Prentice-Hall, 1962, LoC 62-20615. [use of the term <i>assembly program</i>]</li>
<li id="cite_note-Hyde-11"><b><a href="#cite_ref-Hyde_11-0" title="">^</a></b> <cite style="font-style:normal" class="web" id="CITEREFRandall_Hyde">Randall Hyde. <a href="http://webster.cs.ucr.edu/AsmTools/WhichAsm.html" class="external text" title="http://webster.cs.ucr.edu/AsmTools/WhichAsm.html" rel="nofollow">"Which Assembler is the Best?"</a><span class="printonly">. <a href="http://webster.cs.ucr.edu/AsmTools/WhichAsm.html" class="external free" title="http://webster.cs.ucr.edu/AsmTools/WhichAsm.html" rel="nofollow">http://webster.cs.ucr.edu/AsmTools/WhichAsm.html</a></span><span class="reference-accessdate">. Retrieved on 2007-10-19</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Which+Assembler+is+the+Best%3F&amp;rft.atitle=&amp;rft.aulast=Randall+Hyde&amp;rft.au=Randall+Hyde&amp;rft_id=http%3A%2F%2Fwebster.cs.ucr.edu%2FAsmTools%2FWhichAsm.html&amp;rfr_id=info:sid/en.wikipedia.org:Assembly_language"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-FASMLIB-12"><b><a href="#cite_ref-FASMLIB_12-0" title="">^</a></b> <cite style="font-style:normal" class="web" id="CITEREF.22.27.27vid.27.27.22">"<i>vid</i>". <a href="http://fasmlib.x86asm.net/features.html" class="external text" title="http://fasmlib.x86asm.net/features.html" rel="nofollow">"FASMLIB: Features"</a><span class="printonly">. <a href="http://fasmlib.x86asm.net/features.html" class="external free" title="http://fasmlib.x86asm.net/features.html" rel="nofollow">http://fasmlib.x86asm.net/features.html</a></span><span class="reference-accessdate">. Retrieved on 2007-10-19</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=FASMLIB%3A+Features&amp;rft.atitle=&amp;rft.aulast=%22%27%27vid%27%27%22&amp;rft.au=%22%27%27vid%27%27%22&amp;rft_id=http%3A%2F%2Ffasmlib.x86asm.net%2Ffeatures.html&amp;rfr_id=info:sid/en.wikipedia.org:Assembly_language"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-Murdocca-13"><b><a href="#cite_ref-Murdocca_13-0" title="">^</a></b> <cite style="font-style:normal" class="book" id="CITEREFMurdoccaVincent_P._Heuring2000">Murdocca, Miles J.; Vincent P. Heuring (2000). <i>Principles of Computer Architecture</i>. Prentice-Hall. <a href="/wiki/Special:BookSources/0201436647" class="internal">ISBN 0-201-43664-7</a>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Principles+of+Computer+Architecture&amp;rft.aulast=Murdocca&amp;rft.aufirst=Miles+J.&amp;rft.au=Murdocca%2C+Miles+J.&amp;rft.au=Vincent+P.+Heuring&amp;rft.date=2000&amp;rft.pub=Prentice-Hall&amp;rft.isbn=0-201-43664-7&amp;rfr_id=info:sid/en.wikipedia.org:Assembly_language"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-wwwPOCA-14"><b><a href="#cite_ref-wwwPOCA_14-0" title="">^</a></b> <a href="http://iiusatech.com/~murdocca/POCA" class="external text" title="http://iiusatech.com/~murdocca/POCA" rel="nofollow">Principles of Computer Architecture</a> (POCA) – ARCTools virtual computer available for download to execute referenced code, accessed August 24, 2005</li>
</ol>
</div>
<p><a name="Further_reading" id="Further_reading"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Assembly_language&amp;action=edit&amp;section=17" title="Edit section: Further reading">edit</a>]</span> <span class="mw-headline">Further reading</span></h2>
<ul>
<li>Michael Singer, <i>PDP-11. Assembler Language Programming and Machine Organization</i>, John Wiley &amp; Sons, NY: 1980.</li>
<li>Peter Norton, John Socha, <i>Peter Norton's Assembly Language Book for the IBM PC</i>, Brady Books, NY: 1986.</li>
<li>Dominic Sweetman: <i>See MIPS Run</i>. Morgan Kaufmann Publishers, 1999. <a href="/wiki/Special:BookSources/1558604103" class="internal">ISBN 1-55860-410-3</a></li>
<li>John Waldron: <i>Introduction to RISC Assembly Language Programming</i>. Addison Wesley, 1998. <a href="/wiki/Special:BookSources/0201398281" class="internal">ISBN 0-201-39828-1</a></li>
<li>Jeff Duntemann: <i>Assembly Language Step-by-Step</i>. Wiley, 2000. <a href="/wiki/Special:BookSources/0471375233" class="internal">ISBN 0-471-37523-3</a></li>
<li>Paul Carter: <i>PC Assembly Language</i>. Free ebook, 2001.<br />
<a href="http://drpaulcarter.com/pcasm/" class="external text" title="http://drpaulcarter.com/pcasm/" rel="nofollow">Website</a></li>
<li>Robert Britton: <i>MIPS Assembly Language Programming</i>. Prentice Hall, 2003. <a href="/wiki/Special:BookSources/0131420445" class="internal">ISBN 0-13-142044-5</a></li>
<li>Randall Hyde: <i>The Art of Assembly Language</i>. No Starch Press, 2003. <a href="/wiki/Special:BookSources/1886411972" class="internal">ISBN 1-886411-97-2</a><br />
Draft versions <a href="http://webster.cs.ucr.edu/AoA/index.html" class="external text" title="http://webster.cs.ucr.edu/AoA/index.html" rel="nofollow">available online</a> as PDF and HTML</li>
<li>Jonathan Bartlett: <i><a href="http://programminggroundup.blogspot.com/" class="external text" title="http://programminggroundup.blogspot.com/" rel="nofollow">Programming from the Ground Up</a></i>. Bartlett Publishing, 2004. <a href="/wiki/Special:BookSources/0975283847" class="internal">ISBN 0-9752838-4-7</a><br />
Also available online <a href="http://savannah.nongnu.org/projects/pgubook/" class="external text" title="http://savannah.nongnu.org/projects/pgubook/" rel="nofollow">as PDF</a></li>
<li><a href="http://www.asmcommunity.net/board/index.php?action=book" class="external text" title="http://www.asmcommunity.net/board/index.php?action=book" rel="nofollow"><i>ASM Community Book</i></a> "An online book full of helpful ASM info, tutorials and code examples" by the ASM Community</li>
</ul>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Assembly_language&amp;action=edit&amp;section=18" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<table class="metadata plainlinks ambox ambox-style" style="">
<tr>
<td class="mbox-image">
<div style="width: 52px;"><a href="/wiki/File:Ambox_style.png" class="image" title="Ambox style.png"><img alt="" src="http://upload.wikimedia.org/wikipedia/en/d/d6/Ambox_style.png" width="40" height="40" border="0" /></a></div>
</td>
<td class="mbox-text" style="">This article's <a href="/wiki/Wikipedia:External_links" title="Wikipedia:External links">external links</a> <b>may not follow Wikipedia's <a href="/wiki/Wikipedia:What_Wikipedia_is_not#Wikipedia_is_not_a_mirror_or_a_repository_of_links.2C_images.2C_or_media_files" title="Wikipedia:What Wikipedia is not">content policies</a> or <a href="/wiki/Wikipedia:External_links" title="Wikipedia:External links">guidelines</a></b>. Please <a href="http://en.wikipedia.org/w/index.php?title=Assembly_language&amp;action=edit" class="external text" title="http://en.wikipedia.org/w/index.php?title=Assembly_language&amp;action=edit" rel="nofollow">improve this article</a> by removing excessive or inappropriate external links.</td>
</tr>
</table>
<div class="infobox sisterproject">
<div style="float: left;">
<div class="floatnone"><a href="/wiki/File:Wiktionary-logo-en.svg" class="image" title="Wiktionary-logo-en.svg"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/f/f8/Wiktionary-logo-en.svg/50px-Wiktionary-logo-en.svg.png" width="50" height="54" border="0" /></a></div>
</div>
<div style="margin-left: 60px;">Look up <i><b><a href="http://en.wiktionary.org/wiki/assembly_language" class="extiw" title="wiktionary:assembly language">assembly language</a></b></i> in <a href="/wiki/Wiktionary" title="Wiktionary">Wiktionary</a>, the free dictionary.</div>
</div>
<table class="metadata plainlinks mbox-small" style="border:1px solid #aaa; background-color:#f9f9f9;">
<tr>
<td class="mbox-image"><a href="http://en.wikibooks.org/wiki/Special:Search/Assembly_language" title="b:Special:Search/Assembly language"><img alt="Sister project" src="http://upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/40px-Wikibooks-logo-en-noslogan.svg.png" width="40" height="40" border="0" /></a></td>
<td class="mbox-text" style=""><a href="/wiki/Wikibooks" title="Wikibooks">Wikibooks</a> has a book on the topic of
<div style="margin-left:10px;"><i><b><a href="http://en.wikibooks.org/wiki/Subject:Assembly_Language" class="extiw" title="wikibooks:Subject:Assembly Language">Subject:Assembly Language</a></b></i></div>
</td>
</tr>
</table>
<ul>
<li><a href="http://webster.cs.ucr.edu/AoA/index.html" class="external text" title="http://webster.cs.ucr.edu/AoA/index.html" rel="nofollow">Randall Hyde's The Art of Assembly Language as HTML and PDF version</a></li>
<li><a href="http://www.atariarchives.org/mlb/introduction.php" class="external text" title="http://www.atariarchives.org/mlb/introduction.php" rel="nofollow">Machine language for beginners</a></li>
<li><a href="http://www.swansontec.com/sprogram.htm" class="external text" title="http://www.swansontec.com/sprogram.htm" rel="nofollow">Introduction to assembly language</a></li>
<li><a href="http://www.asmcommunity.net/" class="external text" title="http://www.asmcommunity.net/" rel="nofollow">The ASM Community</a>, a programming resource about assembly including a <a href="http://www.asmcommunity.net/board/" class="external text" title="http://www.asmcommunity.net/board/" rel="nofollow">messageboard</a> and an <a href="http://www.asmcommunity.net/board/index.php?action=book" class="external text" title="http://www.asmcommunity.net/board/index.php?action=book" rel="nofollow">ASM Book</a></li>
<li><a href="http://www.jegerlehner.ch/intel/IntelCodeTable.pdf" class="external text" title="http://www.jegerlehner.ch/intel/IntelCodeTable.pdf" rel="nofollow">Intel Assembly 80x86 CodeTable</a> (a cheat sheet reference)</li>
<li><a href="http://www.int80h.org/" class="external text" title="http://www.int80h.org/" rel="nofollow">Unix Assembly Language Programming</a></li>
<li><a href="http://c2.com/cgi/wiki?LearningAssemblyLanguage" class="external text" title="http://c2.com/cgi/wiki?LearningAssemblyLanguage" rel="nofollow">PPR: Learning Assembly Language</a></li>
<li><a href="http://siyobik.info/index.php?document=x86_32bit_asm" class="external text" title="http://siyobik.info/index.php?document=x86_32bit_asm" rel="nofollow">An Introduction to Writing 32-bit Applications Using the x86 Assembly Language</a></li>
<li><a href="http://www.azillionmonkeys.com/qed/asmexample.html" class="external text" title="http://www.azillionmonkeys.com/qed/asmexample.html" rel="nofollow">Assembly Language Programming Examples</a></li>
<li><a href="http://www.cs.cornell.edu/talc/" class="external text" title="http://www.cs.cornell.edu/talc/" rel="nofollow">Typed Assembly Language (TAL)</a></li>
<li><a href="http://www.grc.com/smgassembly.htm" class="external text" title="http://www.grc.com/smgassembly.htm" rel="nofollow">Authoring Windows Applications In Assembly Language</a></li>
<li><a href="http://linuxassembly.org/" class="external text" title="http://linuxassembly.org/" rel="nofollow">Information on Linux assembly programming</a></li>
<li><a href="http://siyobik.info/index.php?module=x86" class="external text" title="http://siyobik.info/index.php?module=x86" rel="nofollow">x86 Instruction Set Reference</a></li>
<li><a href="http://terse.com/" class="external text" title="http://terse.com/" rel="nofollow">Terse: Algebraic Assembly Language for x86</a></li>
<li><a href="http://win32assembly.online.fr/tutorials.html" class="external text" title="http://win32assembly.online.fr/tutorials.html" rel="nofollow">Iczelion's Win32 Assembly Tutorial</a></li>
<li><a href="http://www-03.ibm.com/servers/eserver/zseries/zos/bkserv/r8pdf/zarchpops.html" class="external text" title="http://www-03.ibm.com/servers/eserver/zseries/zos/bkserv/r8pdf/zarchpops.html" rel="nofollow">IBM z/Architecture Principles of Operation</a> IBM manuals on <a href="/wiki/Mainframe_computer" title="Mainframe computer">mainframe</a> machine language and internals.</li>
<li><a href="http://www-03.ibm.com/servers/eserver/zseries/zos/bkserv/r8pdf/hlasm.html" class="external text" title="http://www-03.ibm.com/servers/eserver/zseries/zos/bkserv/r8pdf/hlasm.html" rel="nofollow">IBM High Level Assembler</a> IBM manuals on mainframe assembler language.</li>
<li><a href="http://mark.masmcode.com/" class="external text" title="http://mark.masmcode.com/" rel="nofollow">Assembly Optimization Tips</a> by <a href="/w/index.php?title=Mark_Larson&amp;action=edit&amp;redlink=1" class="new" title="Mark Larson (page does not exist)">Mark Larson</a></li>
<li><a href="http://www.ibmmainframes.com/forum-39.html" class="external text" title="http://www.ibmmainframes.com/forum-39.html" rel="nofollow">Mainframe Assembler Forum</a></li>
<li><a href="http://nasm.sourceforge.net/doc/nasmdoc0.html" class="external text" title="http://nasm.sourceforge.net/doc/nasmdoc0.html" rel="nofollow">NASM Manual</a></li>
<li><a href="http://www.turboirc.com/asm" class="external text" title="http://www.turboirc.com/asm" rel="nofollow">Experiment with Intel x86/x64 operating modes with assembly</a></li>
<li><a href="http://eni4ever.com/news_cats.php?cat_id=17" class="external text" title="http://eni4ever.com/news_cats.php?cat_id=17" rel="nofollow">Build yourself an assembler (eniAsm project)</a> and various assembly articles and tutorials</li>
<li><a href="http://www.halcode.com/archives/2008/04/28/encoding-intel-x86ia-32-assembler-instructions/" class="external text" title="http://www.halcode.com/archives/2008/04/28/encoding-intel-x86ia-32-assembler-instructions/" rel="nofollow">Encoding Intel x86/IA-32 Assembler Instructions</a></li>
<li><a href="http://blog.ooz.ie/search/label/Assembler" class="external text" title="http://blog.ooz.ie/search/label/Assembler" rel="nofollow">The Basics of Assembly Language (Linux)</a></li>
</ul>
<p><a name="Software" id="Software"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Assembly_language&amp;action=edit&amp;section=19" title="Edit section: Software">edit</a>]</span> <span class="mw-headline">Software</span></h3>
<ul>
<li><a href="/wiki/MenuetOS" title="MenuetOS">MenuetOS</a> <a href="http://www.menuetos.net/" class="external text" title="http://www.menuetos.net/" rel="nofollow">- Operating System written entirely in 64-bit assembly language</a></li>
<li><a href="http://www.sbprojects.com/" class="external text" title="http://www.sbprojects.com/" rel="nofollow">SB-Assembler for most 8-bit processors/controllers</a></li>
<li><a href="http://www.gnu.org/software/lightning/lightning.html" class="external text" title="http://www.gnu.org/software/lightning/lightning.html" rel="nofollow">GNU lightning</a>, a library that generates assembly language code at run-time which is useful for Just-In-Time compilers</li>
<li><a href="http://www.winasm.net" class="external text" title="http://www.winasm.net" rel="nofollow">WinAsm Studio, The Assembly IDE - Free Downloads, Source Code</a> , a free Assembly IDE, a lot of open source programs to download and a popular <a href="http://www.winasm.net/forum/index.php" class="external text" title="http://www.winasm.net/forum/index.php" rel="nofollow">Board</a></li>
<li><a href="http://nasm.sourceforge.net" class="external text" title="http://nasm.sourceforge.net" rel="nofollow">The Netwide Assembler</a></li>
<li><a href="http://www.godevtool.com/" class="external text" title="http://www.godevtool.com/" rel="nofollow">GoAsm</a> - a free component "Go" tools: support 32-bit &amp; 64-bit Windows programming</li>
</ul>
<table class="navbox" cellspacing="0" style=";">
<tr>
<td style="padding:2px;">
<table cellspacing="0" class="nowraplinks collapsible autocollapse" style="width:100%;background:transparent;color:inherit;;">
<tr>
<th style=";" colspan="2" class="navbox-title">
<div style="float:left; width:6em;text-align:left;">
<div class="noprint plainlinksneverexpand navbar" style="background:none; padding:0; font-weight:normal;;;border:none;; font-size:xx-small;"><a href="/wiki/Template:Programming_language" title="Template:Programming language"><span title="View this template" style=";;border:none;">v</span></a>&#160;<span style="font-size:80%;">•</span>&#160;<a href="/wiki/Template_talk:Programming_language" title="Template talk:Programming language"><span title="Discussion about this template" style=";;border:none;">d</span></a>&#160;<span style="font-size:80%;">•</span>&#160;<a href="http://en.wikipedia.org/w/index.php?title=Template:Programming_language&amp;action=edit" class="external text" title="http://en.wikipedia.org/w/index.php?title=Template:Programming_language&amp;action=edit" rel="nofollow"><span title="Edit this template" style=";;border:none;;">e</span></a></div>
</div>
<span style="font-size:110%;"><a href="/wiki/Programming_paradigm" title="Programming paradigm">Types of programming languages</a></span></th>
</tr>
<tr style="height:2px;">
<td></td>
</tr>
<tr>
<td colspan="2" style="width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<div style="padding:0em 0.25em"><a href="/wiki/Array_programming" title="Array programming">Array</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Aspect-oriented_programming" title="Aspect-oriented programming">Aspect-oriented</a><span style="font-weight:bold;">&#160;·</span> <strong class="selflink">Assembly</strong><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Class-based_programming" title="Class-based programming">Class-based</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Compiled_language" title="Compiled language">Compiled</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Concurrent_computing" title="Concurrent computing">Concurrent</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Curly_bracket_programming_language" title="Curly bracket programming language">Curly bracket</a><span style="font-weight:bold;">&#160;·</span> <a href="/w/index.php?title=Data-oriented_language&amp;action=edit&amp;redlink=1" class="new" title="Data-oriented language (page does not exist)">Data-oriented</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Data-structured_language" title="Data-structured language">Data-structured</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Dataflow_programming" title="Dataflow programming">Dataflow</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Declarative_programming" title="Declarative programming">Declarative</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Domain-specific_programming_language" title="Domain-specific programming language" class="mw-redirect">Domain-specific</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Dynamic_programming_language" title="Dynamic programming language">Dynamic</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Esoteric_programming_language" title="Esoteric programming language">Esoteric</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Event-driven_programming" title="Event-driven programming">Event-driven</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Extensible_programming" title="Extensible programming">Extensible</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Functional_programming" title="Functional programming">Functional</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/High-level_programming_language" title="High-level programming language">High-level</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Imperative_programming" title="Imperative programming">Imperative</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Interpreted_language" title="Interpreted language">Interpreted</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Logic_programming" title="Logic programming">Logic</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Low-level_programming_language" title="Low-level programming language">Low-level</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Machine_code" title="Machine code">Machine</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Macro_(computer_science)" title="Macro (computer science)">Macro</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Metaprogramming" title="Metaprogramming">Metaprogramming</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Multi-paradigm_programming_language" title="Multi-paradigm programming language">Multi-paradigm</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Non-English-based_programming_languages" title="Non-English-based programming languages">Non-English-based</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Object-oriented_programming_language" title="Object-oriented programming language">Object-oriented</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Off-side_rule" title="Off-side rule">Off-side rule</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Pipeline_programming" title="Pipeline programming">Pipeline</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Procedural_programming" title="Procedural programming">Procedural</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Prototype-based_programming" title="Prototype-based programming">Prototype-based</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Reflection_(computer_science)" title="Reflection (computer science)">Reflective</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Rule-based_language" title="Rule-based language" class="mw-redirect">Rule-based</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Scripting_language" title="Scripting language">Scripting</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Synchronous_programming_language" title="Synchronous programming language">Synchronous</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Visual_programming_language" title="Visual programming language">Visual</a></div>
</td>
</tr>
</table>
</td>
</tr>
</table>


<!-- 
NewPP limit report
Preprocessor node count: 4323/1000000
Post-expand include size: 49836/2048000 bytes
Template argument size: 17907/2048000 bytes
Expensive parser function count: 4/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:1368-0!1!0!default!!en!2 and timestamp 20090404005911 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Assembly_language">http://en.wikipedia.org/wiki/Assembly_language</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Assembly_languages" title="Category:Assembly languages">Assembly languages</a></span> | <span dir='ltr'><a href="/wiki/Category:Assemblers" title="Category:Assemblers">Assemblers</a></span> | <span dir='ltr'><a href="/wiki/Category:Programming_language_implementation" title="Category:Programming language implementation">Programming language implementation</a></span></div><div id="mw-hidden-catlinks" class="mw-hidden-cats-hidden">Hidden categories:&#32;<span dir='ltr'><a href="/wiki/Category:All_articles_with_unsourced_statements" title="Category:All articles with unsourced statements">All articles with unsourced statements</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_unsourced_statements_since_March_2009" title="Category:Articles with unsourced statements since March 2009">Articles with unsourced statements since March 2009</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_unsourced_statements_since_January_2009" title="Category:Articles with unsourced statements since January 2009">Articles with unsourced statements since January 2009</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_unsourced_statements_since_July_2008" title="Category:Articles with unsourced statements since July 2008">Articles with unsourced statements since July 2008</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_unsourced_statements_since_February_2007" title="Category:Articles with unsourced statements since February 2007">Articles with unsourced statements since February 2007</a></span> | <span dir='ltr'><a href="/wiki/Category:Wikipedia_external_links_cleanup" title="Category:Wikipedia external links cleanup">Wikipedia external links cleanup</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Assembly_language" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Assembly_language" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Assembly_language&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Assembly_language&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Assembly_language" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Assembly_language" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Assembly_language" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Assembly_language&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Assembly_language&amp;oldid=281491996" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Assembly_language&amp;id=281491996">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-ar"><a href="http://ar.wikipedia.org/wiki/%D9%84%D8%BA%D8%A9_%D8%A3%D8%B3%D9%85%D8%A8%D9%84%D9%8A">العربية</a></li>
				<li class="interwiki-bn"><a href="http://bn.wikipedia.org/wiki/%E0%A6%85%E0%A7%8D%E0%A6%AF%E0%A6%BE%E0%A6%B8%E0%A7%87%E0%A6%AE%E0%A7%8D%E0%A6%AC%E0%A6%B2%E0%A6%BF_%E0%A6%AD%E0%A6%BE%E0%A6%B7%E0%A6%BE">বাংলা</a></li>
				<li class="interwiki-bs"><a href="http://bs.wikipedia.org/wiki/Assembler">Bosanski</a></li>
				<li class="interwiki-bg"><a href="http://bg.wikipedia.org/wiki/%D0%90%D1%81%D0%B5%D0%BC%D0%B1%D0%BB%D0%B5%D1%80">Български</a></li>
				<li class="interwiki-ca"><a href="http://ca.wikipedia.org/wiki/Llenguatge_assemblador">Català</a></li>
				<li class="interwiki-cs"><a href="http://cs.wikipedia.org/wiki/Jazyk_symbolick%C3%BDch_adres">Česky</a></li>
				<li class="interwiki-da"><a href="http://da.wikipedia.org/wiki/Assemblersprog">Dansk</a></li>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/Assemblersprache">Deutsch</a></li>
				<li class="interwiki-et"><a href="http://et.wikipedia.org/wiki/Assemblerkeel">Eesti</a></li>
				<li class="interwiki-el"><a href="http://el.wikipedia.org/wiki/Assembly_(%CE%B3%CE%BB%CF%8E%CF%83%CF%83%CE%B1_%CF%80%CF%81%CE%BF%CE%B3%CF%81%CE%B1%CE%BC%CE%BC%CE%B1%CF%84%CE%B9%CF%83%CE%BC%CE%BF%CF%8D)">Ελληνικά</a></li>
				<li class="interwiki-es"><a href="http://es.wikipedia.org/wiki/Lenguaje_ensamblador">Español</a></li>
				<li class="interwiki-eo"><a href="http://eo.wikipedia.org/wiki/Asembla_lingvo">Esperanto</a></li>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Assembleur">Français</a></li>
				<li class="interwiki-ko"><a href="http://ko.wikipedia.org/wiki/%EC%96%B4%EC%85%88%EB%B8%94%EB%A6%AC%EC%96%B4">한국어</a></li>
				<li class="interwiki-hi"><a href="http://hi.wikipedia.org/wiki/%E0%A4%85%E0%A4%B8%E0%A5%87%E0%A4%AE%E0%A5%8D%E0%A4%AC%E0%A4%B2%E0%A5%80_%E0%A4%AD%E0%A4%BE%E0%A4%B7%E0%A4%BE">हिन्दी</a></li>
				<li class="interwiki-hr"><a href="http://hr.wikipedia.org/wiki/Asemblerski_jezik">Hrvatski</a></li>
				<li class="interwiki-is"><a href="http://is.wikipedia.org/wiki/Smalam%C3%A1l">Íslenska</a></li>
				<li class="interwiki-it"><a href="http://it.wikipedia.org/wiki/Assembly">Italiano</a></li>
				<li class="interwiki-he"><a href="http://he.wikipedia.org/wiki/%D7%A9%D7%A4%D7%AA_%D7%A1%D7%A3">עברית</a></li>
				<li class="interwiki-lv"><a href="http://lv.wikipedia.org/wiki/Asamblervaloda">Latviešu</a></li>
				<li class="interwiki-lt"><a href="http://lt.wikipedia.org/wiki/Asemblerio_kalba">Lietuvių</a></li>
				<li class="interwiki-hu"><a href="http://hu.wikipedia.org/wiki/Assembly">Magyar</a></li>
				<li class="interwiki-nl"><a href="http://nl.wikipedia.org/wiki/Assembler">Nederlands</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/%E3%82%A2%E3%82%BB%E3%83%B3%E3%83%96%E3%83%AA%E8%A8%80%E8%AA%9E">日本語</a></li>
				<li class="interwiki-no"><a href="http://no.wikipedia.org/wiki/Assembler">‪Norsk (bokmål)‬</a></li>
				<li class="interwiki-pl"><a href="http://pl.wikipedia.org/wiki/Asembler">Polski</a></li>
				<li class="interwiki-pt"><a href="http://pt.wikipedia.org/wiki/Linguagem_de_montagem">Português</a></li>
				<li class="interwiki-ro"><a href="http://ro.wikipedia.org/wiki/Limbaj_de_asamblare">Română</a></li>
				<li class="interwiki-ru"><a href="http://ru.wikipedia.org/wiki/%D0%AF%D0%B7%D1%8B%D0%BA_%D0%B0%D1%81%D1%81%D0%B5%D0%BC%D0%B1%D0%BB%D0%B5%D1%80%D0%B0">Русский</a></li>
				<li class="interwiki-sq"><a href="http://sq.wikipedia.org/wiki/Assembly">Shqip</a></li>
				<li class="interwiki-si"><a href="http://si.wikipedia.org/wiki/%E0%B6%87%E0%B7%83%E0%B7%99%E0%B6%B8%E0%B7%8A%E0%B6%B6%E0%B7%8A%E0%B6%BD%E0%B7%92_%E0%B6%B7%E0%B7%8F%E0%B7%82%E0%B7%8F%E0%B7%80">සිංහල</a></li>
				<li class="interwiki-simple"><a href="http://simple.wikipedia.org/wiki/Assembly_language">Simple English</a></li>
				<li class="interwiki-sl"><a href="http://sl.wikipedia.org/wiki/Zbirni_jezik">Slovenščina</a></li>
				<li class="interwiki-sr"><a href="http://sr.wikipedia.org/wiki/%D0%90%D1%81%D0%B5%D0%BC%D0%B1%D0%BB%D0%B5%D1%80">Српски / Srpski</a></li>
				<li class="interwiki-sh"><a href="http://sh.wikipedia.org/wiki/Asemblerski_jezik">Srpskohrvatski / Српскохрватски</a></li>
				<li class="interwiki-th"><a href="http://th.wikipedia.org/wiki/%E0%B8%A0%E0%B8%B2%E0%B8%A9%E0%B8%B2%E0%B9%81%E0%B8%AD%E0%B8%AA%E0%B9%80%E0%B8%8B%E0%B8%A1%E0%B8%9A%E0%B8%A5%E0%B8%B5">ไทย</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 3 April 2009, at 12:53.</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv166 in 0.060 secs. --></body></html>
