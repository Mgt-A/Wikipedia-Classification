<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Structured programming,Articles with unsourced statements since January 2008,Articles with unsourced statements since December 2007,Special:Search/Structured programming,ALGOL,ALGOL 68,Abductive logic programming,Ada (programming language),Array programming,Aspect-oriented programming,Attribute-Oriented Programming" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Structured_programming&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Structured_programming&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Structured programming - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Structured_programming";
		var wgTitle = "Structured programming";
		var wgAction = "view";
		var wgArticleId = "27695";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 275221915;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Structured_programming skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Structured programming</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<table class="navbox" style="float:right; background-color:rgb(248,248,255); clear:right; margin: 1ex 0 0.5em 1em; width: 20em">
<tr>
<th><a href="/wiki/Programming_paradigm" title="Programming paradigm">Programming paradigms</a></th>
</tr>
<tr>
<td style="text-align:left">
<ul>
<li><a href="/wiki/Software_agent" title="Software agent">Agent-oriented</a></li>
<li><a href="/wiki/Component-based_software_engineering" title="Component-based software engineering">Component-based</a>
<ul>
<li><a href="/wiki/Flow-based_programming" title="Flow-based programming">Flow-based</a></li>
<li><a href="/wiki/Pipeline_programming" title="Pipeline programming">Pipeline</a></li>
</ul>
</li>
<li><a href="/wiki/Concatenative_programming_language" title="Concatenative programming language">Concatenative</a></li>
<li><a href="/wiki/Concurrent_computing" title="Concurrent computing">Concurrent computing</a></li>
<li><a href="/w/index.php?title=Context-oriented_programming&amp;action=edit&amp;redlink=1" class="new" title="Context-oriented programming (page does not exist)">Context-oriented</a></li>
<li><a href="/wiki/Declarative_programming" title="Declarative programming">Declarative</a> (Contrast: <a href="/wiki/Imperative_programming" title="Imperative programming">Imperative</a>)
<ul>
<li><a href="/wiki/Functional_programming" title="Functional programming">Functional</a>
<ul>
<li><a href="/wiki/Dataflow" title="Dataflow">Dataflow</a>
<ul>
<li><a href="/wiki/Spreadsheet" title="Spreadsheet">Cell-oriented (spreadsheets)</a></li>
<li><a href="/wiki/Reactive_programming" title="Reactive programming">Reactive</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="/w/index.php?title=Goal-directed_programming&amp;action=edit&amp;redlink=1" class="new" title="Goal-directed programming (page does not exist)">Goal-directed</a>
<ul>
<li><a href="/wiki/Constraint_programming" title="Constraint programming">Constraint</a></li>
<li><a href="/wiki/Constraint_logic_programming" title="Constraint logic programming">Constraint logic</a></li>
<li><a href="/wiki/Logic_programming" title="Logic programming">Logic</a>
<ul>
<li><a href="/wiki/Abductive_logic_programming" title="Abductive logic programming">Abductive logic</a></li>
<li><a href="/wiki/Inductive_logic_programming" title="Inductive logic programming">Inductive logic</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><a href="/wiki/Event-driven_programming" title="Event-driven programming">Event-driven</a></li>
<li><a href="/wiki/Feature_Oriented_Programming" title="Feature Oriented Programming">Feature-oriented</a></li>
<li><a href="/wiki/Function-level_programming" title="Function-level programming">Function-level</a> (Contrast: <a href="/wiki/Value-level_programming" title="Value-level programming">Value-level</a>)</li>
<li><a href="/wiki/Imperative_programming" title="Imperative programming">Imperative</a> (Contrast: <a href="/wiki/Declarative_programming" title="Declarative programming">Declarative</a>)
<ul>
<li>Advanced separation of concerns
<ul>
<li><a href="/wiki/Aspect-oriented_programming" title="Aspect-oriented programming">Aspect-oriented</a></li>
<li><a href="/wiki/Subject-oriented_programming" title="Subject-oriented programming">Subject-oriented</a></li>
</ul>
</li>
<li><a href="/wiki/Array_programming" title="Array programming">Array</a> (Contrast: <a href="/wiki/Scalar_programming" title="Scalar programming">Scalar</a>)</li>
<li><a href="/wiki/Automata-based_programming" title="Automata-based programming">Automata-based</a></li>
<li><a href="/wiki/Object-oriented_programming" title="Object-oriented programming">Object-oriented</a>
<ul>
<li><a href="/wiki/Class-based_programming" title="Class-based programming">Class-based</a></li>
<li><a href="/wiki/Prototype-based_programming" title="Prototype-based programming">Prototype-based</a></li>
</ul>
</li>
<li><a href="/wiki/Procedural_programming" title="Procedural programming">Procedural</a>
<ul>
<li><strong class="selflink">Structured</strong></li>
</ul>
</li>
<li><a href="/wiki/Role-oriented_programming" title="Role-oriented programming">Role-oriented</a></li>
<li><a href="/wiki/Scalar_programming" title="Scalar programming">Scalar</a> (Contrast: <a href="/wiki/Array_programming" title="Array programming">Array</a>)</li>
</ul>
</li>
<li><a href="/wiki/Iteration" title="Iteration">Iterative</a> (Contrast: <a href="/wiki/Recursion_(computer_science)" title="Recursion (computer science)">Recursive</a>)</li>
<li><a href="/wiki/Metaprogramming" title="Metaprogramming">Metaprogramming</a>
<ul>
<li><a href="/wiki/Attribute-Oriented_Programming" title="Attribute-Oriented Programming">Attribute-oriented</a></li>
<li><a href="/wiki/Automatic_programming" title="Automatic programming">Automatic</a>
<ul>
<li><a href="/wiki/Generic_programming" title="Generic programming">Generic</a>
<ul>
<li><a href="/wiki/Template_metaprogramming" title="Template metaprogramming">Template</a>
<ul>
<li><a href="/wiki/Policy-based_design" title="Policy-based design">Policy-based</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="/wiki/Language-oriented_programming" title="Language-oriented programming">Language-oriented</a>
<ul>
<li><a href="/wiki/Grammar-oriented_programming" title="Grammar-oriented programming">Grammar-oriented</a>
<ul>
<li><a href="/wiki/Dialecting" title="Dialecting">Dialecting</a></li>
</ul>
</li>
<li><a href="/wiki/Intentional_programming" title="Intentional programming">Intentional</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="/wiki/Reflection_(computer_science)" title="Reflection (computer science)">Reflective</a></li>
</ul>
</li>
<li><a href="/wiki/Modular_programming" title="Modular programming">Modular</a></li>
<li><a href="/wiki/Nondeterministic_programming" title="Nondeterministic programming">Nondeterministic</a></li>
<li><a href="/wiki/Parallel_computing" title="Parallel computing">Parallel computing</a>
<ul>
<li><a href="/wiki/Process-oriented_programming" title="Process-oriented programming">Process-oriented</a></li>
</ul>
</li>
<li><a href="/wiki/Programming_in_the_large_and_programming_in_the_small" title="Programming in the large and programming in the small">Programming in the large and programming in the small</a></li>
<li><a href="/wiki/Recursion_(computer_science)" title="Recursion (computer science)">Recursive</a> (Contrast: <a href="/wiki/Iteration" title="Iteration">Iterative</a>)</li>
<li><a href="/wiki/Tree_programming" title="Tree programming">Tree</a></li>
<li><a href="/wiki/Value-level_programming" title="Value-level programming">Value-level</a> (Contrast: <a href="/wiki/Function-level_programming" title="Function-level programming">Function-level</a>)</li>
</ul>
<hr />
<div class="noprint plainlinksneverexpand navbar" style="background:none; padding:0; font-weight:normal;; font-size:xx-small; text-align:center;">This box: <a href="/wiki/Template:Programming_paradigms" title="Template:Programming paradigms"><span title="View this template" style="">view</span></a>&#160;•&#160;<a href="/wiki/Template_talk:Programming_paradigms" title="Template talk:Programming paradigms"><span title="Discussion about this template" style="">talk</span></a>&#160;•&#160;<a href="http://en.wikipedia.org/w/index.php?title=Template:Programming_paradigms&amp;action=edit" class="external text" title="http://en.wikipedia.org/w/index.php?title=Template:Programming_paradigms&amp;action=edit" rel="nofollow"><span title="Edit this template" style=";">edit</span></a></div>
</td>
</tr>
</table>
<p><b>Structured programming</b> can be seen as a subset or subdiscipline of <a href="/wiki/Procedural_programming" title="Procedural programming">procedural programming</a>, one of the major <a href="/wiki/Programming_paradigm" title="Programming paradigm">programming paradigms</a>. It is most famous for removing or reducing reliance on the <a href="/wiki/GOTO" title="GOTO" class="mw-redirect">GOTO</a> <a href="/wiki/Statement_(programming)" title="Statement (programming)">statement</a>.</p>
<p>Historically, several different structuring techniques or <a href="/wiki/Methodology_(software_engineering)" title="Methodology (software engineering)" class="mw-redirect">methodologies</a> have been developed for writing structured programs. The most common are:</p>
<ol>
<li><a href="/wiki/Edsger_Dijkstra" title="Edsger Dijkstra" class="mw-redirect">Edsger Dijkstra</a>'s structured programming, where the logic of a program is a structure composed of similar sub-structures in a limited number of ways. This reduces understanding a program to understanding each structure on its own, and in relation to that containing it, a useful <a href="/wiki/Separation_of_concerns" title="Separation of concerns">separation of concerns</a>.</li>
<li>A view derived from Dijkstra's which also advocates splitting programs into sub-sections with a single point of entry, but is strongly opposed to the concept of a single point of exit.</li>
<li><a href="/w/index.php?title=Data_Structured_Programming&amp;action=edit&amp;redlink=1" class="new" title="Data Structured Programming (page does not exist)">Data Structured Programming</a> or <a href="/wiki/Jackson_Structured_Programming" title="Jackson Structured Programming">Jackson Structured Programming</a>, which is based on aligning <a href="/wiki/Data_structure" title="Data structure">data structures</a> with program structures. This approach applied the fundamental structures proposed by Dijkstra, but as constructs that used the high-level structure of a program to be modeled on the underlying data structures being processed. There are at least 3 major approaches to data structured program design proposed by <a href="/w/index.php?title=Jean-Dominique_Warnier&amp;action=edit&amp;redlink=1" class="new" title="Jean-Dominique Warnier (page does not exist)">Jean-Dominique Warnier</a>, <a href="/wiki/Michael_A._Jackson" title="Michael A. Jackson">Michael A. Jackson</a>, and <a href="/w/index.php?title=Ken_Orr&amp;action=edit&amp;redlink=1" class="new" title="Ken Orr (page does not exist)">Ken Orr</a>.</li>
</ol>
<p>The two latter meanings for the term "structured programming" are more common, and that is what this article will discuss. Years after <a href="/wiki/Edsger_Dijkstra" title="Edsger Dijkstra" class="mw-redirect">Dijkstra</a> (1969), <a href="/wiki/Object-oriented_programming" title="Object-oriented programming">object-oriented programming</a> (OOP) was developed to handle very large or complex programs (see below: <i><a href="#Object-oriented_comparison" title="">Object-oriented comparison</a></i>).</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Low-level_structure"><span class="tocnumber">1</span> <span class="toctext">Low-level structure</span></a></li>
<li class="toclevel-1"><a href="#Design"><span class="tocnumber">2</span> <span class="toctext">Design</span></a></li>
<li class="toclevel-1"><a href="#Structured_programming_languages"><span class="tocnumber">3</span> <span class="toctext">Structured programming languages</span></a></li>
<li class="toclevel-1"><a href="#History"><span class="tocnumber">4</span> <span class="toctext">History</span></a>
<ul>
<li class="toclevel-2"><a href="#Theoretical_foundation"><span class="tocnumber">4.1</span> <span class="toctext">Theoretical foundation</span></a></li>
<li class="toclevel-2"><a href="#Debate"><span class="tocnumber">4.2</span> <span class="toctext">Debate</span></a></li>
<li class="toclevel-2"><a href="#Outcome"><span class="tocnumber">4.3</span> <span class="toctext">Outcome</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Common_deviations"><span class="tocnumber">5</span> <span class="toctext">Common deviations</span></a>
<ul>
<li class="toclevel-2"><a href="#Exception_handling"><span class="tocnumber">5.1</span> <span class="toctext">Exception handling</span></a></li>
<li class="toclevel-2"><a href="#State_machines"><span class="tocnumber">5.2</span> <span class="toctext">State machines</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Object-oriented_comparison"><span class="tocnumber">6</span> <span class="toctext">Object-oriented comparison</span></a></li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">7</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">8</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">9</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Low-level_structure" id="Low-level_structure"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Structured_programming&amp;action=edit&amp;section=1" title="Edit section: Low-level structure">edit</a>]</span> <span class="mw-headline">Low-level structure</span></h2>
<p>At a low level, structured programs are often composed of simple, hierarchical program flow structures. These are sequence, selection, and repetition:</p>
<ul>
<li>"Sequence" refers to an ordered execution of statements.</li>
</ul>
<ul>
<li>In "selection" one of a number of statements is executed depending on the state of the program. This is usually expressed with keywords such as <a href="/wiki/Conditional_statement" title="Conditional statement" class="mw-redirect"><code>if..then..else..endif</code></a>, <a href="/wiki/Switch_statement" title="Switch statement"><code>switch</code></a>, or <a href="/wiki/Switch_statement" title="Switch statement"><code>case</code></a>.</li>
</ul>
<ul>
<li>In "repetition" a statement is executed until the program reaches a certain state or operations are applied to every element of a collection. This is usually expressed with keywords such as <a href="/wiki/While_loop" title="While loop"><code>while</code></a>, <a href="/wiki/Do_while_loop" title="Do while loop"><code>repeat</code></a>, <a href="/wiki/For_loop" title="For loop"><code>for</code></a> or <a href="/wiki/Do_while_loop" title="Do while loop"><code>do..until</code></a>. Often it is recommended that each loop should only have one entry point (and in the original structural programming, also only one exit point), and a few languages enforce this.</li>
</ul>
<p>Some languages, such as <a href="/wiki/Edsger_W._Dijkstra" title="Edsger W. Dijkstra">Dijkstra</a>'s original <a href="/wiki/Guarded_Command_Language" title="Guarded Command Language">Guarded Command Language</a>, emphasise the unity of these structures with a syntax which completely encloses the structure, as in <code>if..fi</code>. In others, such as <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a>, this is not the case, which increases the risk of misunderstanding and incorrect modification.</p>
<p>A language is described as "block-structured" when it has a syntax for enclosing structures between bracketed keywords, such as an if-statement bracketed by <code>if..fi</code> as in <a href="/wiki/ALGOL_68" title="ALGOL 68">ALGOL 68</a>, or a code section bracketed by <code>BEGIN..END</code>, as in <a href="/wiki/PL/I" title="PL/I">PL/I</a>. However, a language is described as "comb-structured" when it has a syntax for enclosing structures within an ordered series of keywords. A "comb-structured" language has multiple structure keywords to define separate sections within a block, analogous to the multiple teeth or prongs in a comb separating sections of the comb. For example, in <a href="/wiki/Ada_(programming_language)" title="Ada (programming language)">Ada</a>, a block is a 4-pronged comb with keywords <code>DECLARE</code>, <code>BEGIN</code>, <code>EXCEPTION</code>, <code>END</code>, and the if-statement in Ada is a 4-pronged comb with keywords <code>IF</code>, <code>THEN</code>, <code>ELSE</code>, <code>END IF</code>.</p>
<p><a name="Design" id="Design"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Structured_programming&amp;action=edit&amp;section=2" title="Edit section: Design">edit</a>]</span> <span class="mw-headline">Design</span></h2>
<p>Structured programming is often (but not always) associated with a <a href="/wiki/Top-down_design" title="Top-down design" class="mw-redirect">"top-down" approach to design</a>.</p>
<p><a name="Structured_programming_languages" id="Structured_programming_languages"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Structured_programming&amp;action=edit&amp;section=3" title="Edit section: Structured programming languages">edit</a>]</span> <span class="mw-headline">Structured programming languages</span></h2>
<p>It is possible to do structured programming in any programming language, though it is preferable to use something like a procedural <a href="/wiki/Programming_language" title="Programming language">programming language</a>. Since about 1970 when structured programming began to gain popularity as a technique, most new procedural programming languages have included features to encourage structured programming (and sometimes have left out features that would make unstructured programming easy). Some of the better known structured programming languages are <a href="/wiki/ALGOL" title="ALGOL">ALGOL</a>, <a href="/wiki/Pascal_(programming_language)" title="Pascal (programming language)">Pascal</a>, <a href="/wiki/PL/I" title="PL/I">PL/I</a> and <a href="/wiki/Ada_(programming_language)" title="Ada (programming language)">Ada</a>.</p>
<p><br /></p>
<p><a name="History" id="History"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Structured_programming&amp;action=edit&amp;section=4" title="Edit section: History">edit</a>]</span> <span class="mw-headline">History</span></h2>
<p><a name="Theoretical_foundation" id="Theoretical_foundation"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Structured_programming&amp;action=edit&amp;section=5" title="Edit section: Theoretical foundation">edit</a>]</span> <span class="mw-headline">Theoretical foundation</span></h3>
<p>The <a href="/wiki/Structured_program_theorem" title="Structured program theorem">structured program theorem</a> provides the theoretical basis of structured programming. It states that three ways of combining programs—sequencing, selection, and iteration—are sufficient to express any <a href="/wiki/Computable_function" title="Computable function">computable function</a>. This observation did not originate with the structured programming movement; these structures are sufficient to describe the <a href="/wiki/Instruction_cycle" title="Instruction cycle">instruction cycle</a> of a <a href="/wiki/Central_processing_unit" title="Central processing unit">central processing unit</a>, as well as the operation of a <a href="/wiki/Turing_machine" title="Turing machine">Turing machine</a>. Therefore a processor is always executing a "structured program" in this sense, even if the instructions it reads from memory are not part of a structured program. However, authors usually credit the result to a 1966 paper by Böhm and Jacopini, possibly because <a href="/wiki/Dijkstra" title="Dijkstra">Dijkstra</a> cited this paper himself. The structured program theorem does not address how to write and analyze a usefully structured program. These issues were addressed during the late 1960s and early 1970s, with major contributions by <a href="/wiki/Dijkstra" title="Dijkstra">Dijkstra</a>, <a href="/wiki/Robert_W._Floyd" title="Robert W. Floyd" class="mw-redirect">Robert W. Floyd</a>, <a href="/wiki/Tony_Hoare" title="Tony Hoare" class="mw-redirect">Tony Hoare</a>, and <a href="/wiki/David_Gries" title="David Gries">David Gries</a>.</p>
<p><a name="Debate" id="Debate"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Structured_programming&amp;action=edit&amp;section=6" title="Edit section: Debate">edit</a>]</span> <span class="mw-headline">Debate</span></h3>
<p><a href="/wiki/P._J._Plauger" title="P. J. Plauger">P. J. Plauger</a>, an <a href="/wiki/Early_adopter" title="Early adopter">early adopter</a> of structured programming, described his reaction to the structured program theorem:</p>
<dl>
<dd><i>Us converts waved this interesting bit of news under the noses of the unreconstructed assembly-language programmers who kept trotting forth twisty bits of logic and saying, 'I betcha can't structure this.' Neither the proof by Böhm and Jacopini nor our repeated successes at writing structured code brought them around one day sooner than they were ready to convince themselves.</i></dd>
</dl>
<p>In 1967 a letter from Dijkstra appeared in <i><a href="/wiki/Communications_of_the_ACM" title="Communications of the ACM">Communications of the ACM</a></i> with the heading "Goto statement <a href="/wiki/Considered_harmful" title="Considered harmful">considered harmful</a>." The letter, which cited the Böhm and Jacopini proof, called for the abolishment of unconstrained <a href="/wiki/GOTO" title="GOTO" class="mw-redirect">GOTO</a> from <a href="/wiki/High-level_language" title="High-level language" class="mw-redirect">high-level languages</a> in the interest of improving code quality. This letter is usually cited as the beginning of the structured programming debate.</p>
<p>Although, as Plauger mentioned, many programmers unfamiliar with the theorem doubted its claims, the more significant dispute in the ensuing years was whether structured programming could actually improve software's clarity, quality, and development time enough to justify training programmers in it. Dijkstra claimed that limiting the number of structures would help to focus a programmer's thinking, and would simplify the task of ensuring the program's correctness by dividing analysis into manageable steps. In his 1969 <i>Notes on Structured Programming</i>, Dijkstra wrote:</p>
<dl>
<dd><i>When we now take the position that it is not only the programmer's task to produce a correct program but also to demonstrate its correctness in a convincing manner, then the above remarks have a profound influence on the programmer's activity: the object he has to produce must be usefully structured.</i></dd>
</dl>
<dl>
<dd><i>…In what follows it will become apparent that program correctness is not my only concern, program adaptability or manageability will be another…</i> <sup><a href="#References" title="">1</a></sup></dd>
</dl>
<p><a href="/wiki/Donald_Knuth" title="Donald Knuth">Donald Knuth</a> accepted the principle that programs must be written with provability in mind, but he disagreed (and still disagrees<sup class="noprint Template-Fact"><span title="This claim needs references to reliable sources&#160;since January 2008" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</span></sup>) with abolishing the GOTO statement. In his 1974 paper, "Structured Programming with Goto Statements", he gave examples where he believed that a direct jump leads to clearer and more efficient code without sacrificing provability. Knuth proposed a looser structural constraint: It should be possible to draw a program's <a href="/wiki/Flow_chart" title="Flow chart" class="mw-redirect">flow chart</a> with all forward branches on the left, all backward branches on the right, and no branches crossing each other. Many of those knowledgeable in <a href="/wiki/Compiler" title="Compiler">compilers</a> and <a href="/wiki/Graph_theory" title="Graph theory">graph theory</a> have advocated allowing only reducible flow graphs.</p>
<p>Structured programming theorists gained a major ally in the 1970s after <a href="/wiki/IBM" title="IBM">IBM</a> researcher <a href="/wiki/Harlan_Mills" title="Harlan Mills">Harlan Mills</a> applied his interpretation of structured programming theory to the development of an indexing system for the <i><a href="/wiki/New_York_Times" title="New York Times" class="mw-redirect">New York Times</a></i> research file. The project was a great engineering success, and managers at other companies cited it in support of adopting structured programming, although Dijkstra criticized the ways that Mills's interpretation differed from the published work.</p>
<p>As late as 1987 it was still possible to raise the question of structured programming in a computer science journal. Frank Rubin did so in that year with a letter, "'GOTO considered harmful' considered harmful." Numerous objections followed, including a response from Dijkstra that sharply criticized both Rubin and the concessions other writers made when responding to him.</p>
<p><a name="Outcome" id="Outcome"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Structured_programming&amp;action=edit&amp;section=7" title="Edit section: Outcome">edit</a>]</span> <span class="mw-headline">Outcome</span></h3>
<p>By the end of the 20th century nearly all computer scientists were convinced that it is useful to learn and apply the concepts of structured programming. High-level programming languages that originally lacked programming structures, such as <a href="/wiki/FORTRAN" title="FORTRAN" class="mw-redirect">FORTRAN</a>, <a href="/wiki/COBOL" title="COBOL">COBOL</a>, and <a href="/wiki/BASIC" title="BASIC">BASIC</a>, now have them.</p>
<p><a name="Common_deviations" id="Common_deviations"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Structured_programming&amp;action=edit&amp;section=8" title="Edit section: Common deviations">edit</a>]</span> <span class="mw-headline">Common deviations</span></h2>
<p><a name="Exception_handling" id="Exception_handling"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Structured_programming&amp;action=edit&amp;section=9" title="Edit section: Exception handling">edit</a>]</span> <span class="mw-headline"><a href="/wiki/Exceptions" title="Exceptions" class="mw-redirect">Exception</a> handling</span></h3>
<p>Although there is almost never a reason to have multiple points of entry to a subprogram, multiple exits are often used to reflect that a subprogram may have no more work to do, or may have encountered circumstances that prevent it from continuing.</p>
<p>A typical example of a simple procedure would be reading data from a file and processing it:</p>
<pre>
open file;
while (reading not finished) {
  read some data;
  if (error) {
    stop the subprogram and inform rest of the program about the error;
  }
}
process read data;
finish the subprogram;
</pre>
<p>The "stop and inform" may be achieved by throwing an exception, second return from the procedure, labelled loop break, or even a goto. As the procedure has 2 exit points, it breaks the rules of Dijkstra's structured programming. Coding it in accordance with single point of exit rule would be very cumbersome. If there were more possible error conditions, with different cleanup rules, single exit point procedure would be extremely hard to read and understand, very likely even more so than an unstructured one with control handled by goto statements. On the other hand, structural programming without such a rule would result in very clean and readable code.</p>
<p>Most languages have adopted the multiple points of exit form of structural programming. <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a> allows multiple paths to a structure's exit (such as "continue", "break", and "return"), newer languages have also "labelled breaks" (similar to the former, but allowing breaking out of more than just the innermost loop) and exceptions.</p>
<p><a name="State_machines" id="State_machines"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Structured_programming&amp;action=edit&amp;section=10" title="Edit section: State machines">edit</a>]</span> <span class="mw-headline">State machines</span></h3>
<p>Some programs, particularly <a href="/wiki/Parsers" title="Parsers" class="mw-redirect">parsers</a> and <a href="/wiki/Communications_protocol" title="Communications protocol">communications protocols</a>, have a number of <a href="/wiki/State_(computer_science)" title="State (computer science)">states</a> that follow each other in a way that is not easily reduced to the basic structures. It is possible to structure these systems by making each state-change a separate subprogram and using a variable to indicate the active state (see <a href="/wiki/Trampoline_(computers)" title="Trampoline (computers)">trampoline</a>). However, some programmers (including Knuth<sup class="noprint Template-Fact"><span title="This claim needs references to reliable sources&#160;since December 2007" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</span></sup>) prefer to implement the state-changes with a jump to the new state.</p>
<p><a name="Object-oriented_comparison" id="Object-oriented_comparison"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Structured_programming&amp;action=edit&amp;section=11" title="Edit section: Object-oriented comparison">edit</a>]</span> <span class="mw-headline">Object-oriented comparison</span></h2>
<p>In the 1960s, language design was often based on textbook examples of programs, which were generally small (due to the size of a textbook); however, when programs became very large, the focus changed. In small programs, the most common statement is generally the assignment statement; however, in large programs (over 10,000 lines), the most common statement is typically the procedure-call to a subprogram. Ensuring parameters are correctly passed to the correct subprogram becomes a major issue.</p>
<p>Many small programs can be handled by coding a hierarchy of structures; however, in large programs, the organization is more a network of structures, and insistence on hierarchical structuring for data and procedures can produce cumbersome code with large amounts of "<a href="http://en.wiktionary.org/wiki/en:tramp_data" class="extiw" title="wiktionary:en:tramp data">tramp data</a>." For example, a text-display program that allows dynamically changing the font-size of the entire screen would be very cumbersome if coded by passing font-size data through a hierarchy. Instead, a subsystem could be used to control the font data through a set of accessor functions that set or retrieve data from a common area controlled by that font-data subsystem. Databases are a common way around tramping.</p>
<p>The <a href="/wiki/FORTRAN" title="FORTRAN" class="mw-redirect">FORTRAN</a> language has used labelled COMMON-blocks to separate global program data into subsystems (no longer global) to allow program-wide, network-style access to data, such as font-size, but only by specifying the particular COMMON-block name. Confusion could occur in FORTRAN by coding alias names and changing data-types when referencing the same labelled COMMON-block yet mapping alternate variables to overlay the same area of memory. Regardless, the labelled-COMMON concept was very valuable in organizing massive software systems and lead to the use of object-oriented programming to define subsystems of centralized data controlled by accessor functions. Changing data into other data-types was performed by explicitly converting, or casting, data from the original variables.</p>
<p>Global subprogram names were recognized as just as dangerous (or even more dangerous) than global variables or blank COMMON, and subsystems were limited to isolated groups of subprogram names, such as naming with unique prefixes or using <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a> package names.</p>
<p>Although structuring a program into a hierarchy might help to clarify some types of software, even for some special types of large programs, a small change, such as requesting a user-chosen new option (text font-color) could cause a massive ripple-effect with changing multiple subprograms to propagate the new data into the program's hierarchy. The object-oriented approach is allegedly more flexible, by separating a program into a network of subsystems, with each controlling their own data, algorithms, or devices across the entire program, but only accessible by first specifying named access to the subsystem object-class, not just by accidentally coding a similar global variable name. Rather than relying on a structured-programming hierarchy chart, object-oriented programming needs a call-reference index to trace which subsystems or classes are accessed from other locations.</p>
<p>Modern structured systems have tended away from deep hierarchies found in the 1970s and tend toward "event driven" architectures, where various procedural events are designed as relatively independent tasks.</p>
<p>Structured programming, as a forerunner to <a href="/wiki/Object-oriented_programming" title="Object-oriented programming">object-oriented programming</a>, noted some crucial issues, such as emphasizing the need for a single exit-point in some types of applications, as in a long-running program with a procedure that allocates memory and should deallocate that memory before exiting and returning to the calling procedure. <a href="/wiki/Memory_leak" title="Memory leak">Memory leaks</a> that cause a program to consume vast amounts of memory could be traced to a failure to observe a single exit-point in a subprogram needing memory deallocation.</p>
<p>Similarly, structured programming, in warning of the rampant use of goto-statements, led to a recognition of top-down discipline in branching, typified by <a href="/wiki/Ada_(programming_language)" title="Ada (programming language)">Ada</a>'s <code>GOTO</code> that cannot branch to a statement-label inside another code block. However, "GOTO WrapUp" became a balanced approach to handling a severe anomaly without losing control of the major exit-point to ensure wrap-up (for deallocating memory, deleting temporary files, and such), when a severe issue interrupts complex, multi-level processing and wrap-up code must be performed before exiting.</p>
<p>The various concepts behind structured programming can help to understand the many facets of <a href="/wiki/Object-oriented_programming" title="Object-oriented programming">object-oriented programming</a>.</p>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Structured_programming&amp;action=edit&amp;section=12" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<table class="metadata plainlinks mbox-small" style="border:1px solid #aaa; background-color:#f9f9f9;">
<tr>
<td class="mbox-image"><a href="http://en.wikibooks.org/wiki/Special:Search/Structured_programming" title="b:Special:Search/Structured programming"><img alt="Sister project" src="http://upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/40px-Wikibooks-logo-en-noslogan.svg.png" width="40" height="40" border="0" /></a></td>
<td class="mbox-text" style="">The <a href="/wiki/Wikibooks" title="Wikibooks">Wikibook</a> <i><a href="http://en.wikibooks.org/wiki/Programming" class="extiw" title="wikibooks:Programming">Programming</a></i> has a page on the topic of
<div style="margin-left:10px;"><i><b><a href="http://en.wikibooks.org/wiki/Programming/Control" class="extiw" title="wikibooks:Programming/Control">Control</a></b></i></div>
</td>
</tr>
</table>
<ul>
<li><a href="/wiki/Control_flow" title="Control flow">Control flow</a> (more detail of high-level control structures)</li>
<li><a href="/wiki/Minimal_evaluation" title="Minimal evaluation" class="mw-redirect">Minimal evaluation</a></li>
<li><a href="/wiki/Programming_paradigm" title="Programming paradigm">Programming paradigms</a></li>
<li><a href="/wiki/Structured_exception_handling" title="Structured exception handling" class="mw-redirect">Structured exception handling</a></li>
<li><a href="/wiki/Structure_chart" title="Structure chart">Structure chart</a></li>
</ul>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Structured_programming&amp;action=edit&amp;section=13" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<ol>
<li><a href="/wiki/Edsger_Dijkstra" title="Edsger Dijkstra" class="mw-redirect">Edsger Dijkstra</a>, <a href="http://www.cs.utexas.edu/users/EWD/ewd02xx/EWD249.PDF" class="external text" title="http://www.cs.utexas.edu/users/EWD/ewd02xx/EWD249.PDF" rel="nofollow"><i>Notes on Structured Programming</i></a>, pg. 6</li>
<li><a href="/wiki/Corrado_B%C3%B6hm" title="Corrado Böhm">Böhm, C</a>. and Jacopini, G.: <i>Flow diagrams, Turing machines and languages with only two formation rules</i>, CACM 9(5), 1966.</li>
<li><a href="/wiki/Michael_A._Jackson" title="Michael A. Jackson">Michael A. Jackson</a>, <i>Principles of Program Design</i>, Academic Press, London, 1975.</li>
<li><a href="/wiki/Ole-Johan_Dahl" title="Ole-Johan Dahl">O.-J. Dahl</a>, <a href="/wiki/E._W._Dijkstra" title="E. W. Dijkstra" class="mw-redirect">E. W. Dijkstra</a>, <a href="/wiki/C._A._R._Hoare" title="C. A. R. Hoare">C. A. R. Hoare</a> <i>Structured Programming</i>, Academic Press, London, 1972 <a href="/wiki/Special:BookSources/0122005503" class="internal">ISBN 0-12-200550-3</a>
<ul>
<li>this volume includes an expanded version of the <i>Notes on Structured Programming</i>, above, including an extended example of using the structured approach to develop a backtracking algorithm to solve the <a href="/wiki/Eight_queens_puzzle" title="Eight queens puzzle">8 Queens problem</a>.</li>
<li><a href="http://portal.acm.org/citation.cfm?id=1243380&amp;jmp=cit&amp;coll=portal&amp;dl=GUIDE&amp;CFID=://www.acm.org/publications/&amp;CFTOKEN=www.acm.org/publications/#CIT" class="external text" title="http://portal.acm.org/citation.cfm?id=1243380&amp;jmp=cit&amp;coll=portal&amp;dl=GUIDE&amp;CFID=://www.acm.org/publications/&amp;CFTOKEN=www.acm.org/publications/#CIT" rel="nofollow">a pdf version is in the ACM Classic Books Series</a></li>
<li>Note that the third chapter of this book, by Dahl, describes an approach which is easily recognized as Object Oriented Programming. It can be seen as another way to "usefully structure" a program to aid in showing that is is correct.</li>
</ul>
</li>
</ol>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Structured_programming&amp;action=edit&amp;section=14" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<ul>
<li><a href="http://www.geocities.com/tablizer/struc.htm" class="external text" title="http://www.geocities.com/tablizer/struc.htm" rel="nofollow">Notes on Structured Programming and Variation Analysis (Programming Wisdom Center)</a></li>
</ul>


<!-- 
NewPP limit report
Preprocessor node count: 362/1000000
Post-expand include size: 8693/2048000 bytes
Template argument size: 1766/2048000 bytes
Expensive parser function count: 2/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:27695-0!1!0!default!!en!2 and timestamp 20090330142658 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Structured_programming">http://en.wikipedia.org/wiki/Structured_programming</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Programming_paradigms" title="Category:Programming paradigms">Programming paradigms</a></span></div><div id="mw-hidden-catlinks" class="mw-hidden-cats-hidden">Hidden categories:&#32;<span dir='ltr'><a href="/wiki/Category:All_articles_with_unsourced_statements" title="Category:All articles with unsourced statements">All articles with unsourced statements</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_unsourced_statements_since_January_2008" title="Category:Articles with unsourced statements since January 2008">Articles with unsourced statements since January 2008</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_unsourced_statements_since_December_2007" title="Category:Articles with unsourced statements since December 2007">Articles with unsourced statements since December 2007</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Structured_programming" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Structured_programming" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Structured_programming&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Structured_programming&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Structured_programming" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Structured_programming" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Structured_programming" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Structured_programming&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Structured_programming&amp;oldid=275221915" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Structured_programming&amp;id=275221915">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-bg"><a href="http://bg.wikipedia.org/wiki/%D0%A1%D1%82%D1%80%D1%83%D0%BA%D1%82%D1%83%D1%80%D0%BD%D0%BE_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%B8%D1%80%D0%B0%D0%BD%D0%B5">Български</a></li>
				<li class="interwiki-ca"><a href="http://ca.wikipedia.org/wiki/Programaci%C3%B3_estructurada">Català</a></li>
				<li class="interwiki-cs"><a href="http://cs.wikipedia.org/wiki/Strukturovan%C3%A9_programov%C3%A1n%C3%AD">Česky</a></li>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/Strukturierte_Programmierung">Deutsch</a></li>
				<li class="interwiki-es"><a href="http://es.wikipedia.org/wiki/Programaci%C3%B3n_estructurada">Español</a></li>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Programmation_structur%C3%A9e">Français</a></li>
				<li class="interwiki-gl"><a href="http://gl.wikipedia.org/wiki/Programaci%C3%B3n_estruturada">Galego</a></li>
				<li class="interwiki-ko"><a href="http://ko.wikipedia.org/wiki/%EA%B5%AC%EC%A1%B0%EC%A0%81_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D">한국어</a></li>
				<li class="interwiki-hr"><a href="http://hr.wikipedia.org/wiki/Strukturirano_programiranje">Hrvatski</a></li>
				<li class="interwiki-it"><a href="http://it.wikipedia.org/wiki/Programmazione_strutturata">Italiano</a></li>
				<li class="interwiki-lt"><a href="http://lt.wikipedia.org/wiki/Strukt%C5%ABrinis_programavimas">Lietuvių</a></li>
				<li class="interwiki-ms"><a href="http://ms.wikipedia.org/wiki/Pengaturcaraan_berstruktur">Bahasa Melayu</a></li>
				<li class="interwiki-nl"><a href="http://nl.wikipedia.org/wiki/Gestructureerd_programmeren">Nederlands</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/%E6%A7%8B%E9%80%A0%E5%8C%96%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0">日本語</a></li>
				<li class="interwiki-pl"><a href="http://pl.wikipedia.org/wiki/Programowanie_strukturalne">Polski</a></li>
				<li class="interwiki-pt"><a href="http://pt.wikipedia.org/wiki/Programa%C3%A7%C3%A3o_estruturada">Português</a></li>
				<li class="interwiki-ro"><a href="http://ro.wikipedia.org/wiki/Programare_structurat%C4%83">Română</a></li>
				<li class="interwiki-ru"><a href="http://ru.wikipedia.org/wiki/%D0%A1%D1%82%D1%80%D1%83%D0%BA%D1%82%D1%83%D1%80%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5">Русский</a></li>
				<li class="interwiki-sr"><a href="http://sr.wikipedia.org/wiki/Strukturirano_programiranje">Српски / Srpski</a></li>
				<li class="interwiki-sv"><a href="http://sv.wikipedia.org/wiki/Strukturerad_programmering">Svenska</a></li>
				<li class="interwiki-vi"><a href="http://vi.wikipedia.org/wiki/L%E1%BA%ADp_tr%C3%ACnh_c%E1%BA%A5u_tr%C3%BAc">Tiếng Việt</a></li>
				<li class="interwiki-tr"><a href="http://tr.wikipedia.org/wiki/Yap%C4%B1sal_programlama">Türkçe</a></li>
				<li class="interwiki-uk"><a href="http://uk.wikipedia.org/wiki/%D0%A1%D1%82%D1%80%D1%83%D0%BA%D1%82%D1%83%D1%80%D0%BD%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D1%83%D0%B2%D0%B0%D0%BD%D0%BD%D1%8F">Українська</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 5 March 2009, at 19:04.</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv217 in 0.045 secs. --></body></html>
