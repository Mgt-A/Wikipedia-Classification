<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Brainfuck,ASCII,Amiga,Big O notation,Bignum,Branch (computer science),Byte,C (programming language),Cat (Unix),Command (computing),Compiler" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Brainfuck&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Brainfuck&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Brainfuck - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Brainfuck";
		var wgTitle = "Brainfuck";
		var wgAction = "view";
		var wgArticleId = "4086";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 279774699;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Brainfuck skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Brainfuck</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<table class="metadata plainlinks ambox ambox-style" style="">
<tr>
<td class="mbox-image">
<div style="width: 52px;"><a href="/wiki/File:Ambox_style.png" class="image" title="Ambox style.png"><img alt="" src="http://upload.wikimedia.org/wikipedia/en/d/d6/Ambox_style.png" width="40" height="40" border="0" /></a></div>
</td>
<td class="mbox-text" style="">This article's <a href="/wiki/Wikipedia:LEDE" title="Wikipedia:LEDE" class="mw-redirect">introduction section</a> <b>may not adequately <a href="/wiki/Wikipedia:Summary_style" title="Wikipedia:Summary style">summarize</a> its contents</b>. To comply with Wikipedia's <a href="/wiki/Wikipedia:Lead_section#Length" title="Wikipedia:Lead section">lead section guidelines</a>, please consider expanding the lead to <a href="/wiki/Wikipedia:Lead_section#Provide_an_accessible_overview" title="Wikipedia:Lead section">provide an accessible overview</a> of the article's key points. <small><i>(December 2008)</i></small></td>
</tr>
</table>
<table class="infobox vevent" cellspacing="5" style="width: 22em; text-align: left; font-size: 88%; line-height: 1.5em;">
<caption class="summary" style="font-size: 125%; font-weight: bold;">brainfuck</caption>
<tr>
<th style="">Usual <a href="/wiki/Filename_extension" title="Filename extension">file extensions</a></th>
<td class="" style="">.b</td>
</tr>
<tr>
<th style=""><a href="/wiki/Programming_paradigm" title="Programming paradigm">Paradigm</a></th>
<td class="" style=""><a href="/wiki/Esoteric_programming_language" title="Esoteric programming language">esoteric</a></td>
</tr>
<tr>
<th style="">Appeared in</th>
<td class="" style="">1993</td>
</tr>
<tr>
<th style="">Designed by</th>
<td class="organiser" style=""><a href="/wiki/Urban_M%C3%BCller" title="Urban Müller">Urban Müller</a></td>
</tr>
<tr>
<th style="">Influenced by</th>
<td class="" style=""><a href="/wiki/P%E2%80%B2%E2%80%B2" title="P′′">P′′</a>, <a href="/wiki/FALSE" title="FALSE">FALSE</a></td>
</tr>
</table>
<p>The <b>brainfuck</b> language is an <a href="/wiki/Esoteric_programming_language" title="Esoteric programming language">esoteric programming language</a> noted for its extreme minimalism. It is a <a href="/wiki/Turing_tarpit" title="Turing tarpit">Turing tarpit</a>, designed to challenge and amuse <a href="/wiki/Programmer" title="Programmer">programmers</a>, and is not suitable for practical use.<sup id="cite_ref-0" class="reference"><a href="#cite_note-0" title=""><span>[</span>1<span>]</span></a></sup> Its name has been variously <a href="/wiki/Expurgation" title="Expurgation">bowdlerized</a>. The name of the language is generally not capitalized, although it is a <a href="/wiki/Proper_noun" title="Proper noun" class="mw-redirect">proper noun</a>.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Language_design"><span class="tocnumber">1</span> <span class="toctext">Language design</span></a>
<ul>
<li class="toclevel-2"><a href="#Commands"><span class="tocnumber">1.1</span> <span class="toctext">Commands</span></a></li>
<li class="toclevel-2"><a href="#Brainfuck.27s_formal_.22parent_language.22"><span class="tocnumber">1.2</span> <span class="toctext">Brainfuck's formal "parent language"</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Examples"><span class="tocnumber">2</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2"><a href="#Hello_World.21"><span class="tocnumber">2.1</span> <span class="toctext">Hello World!</span></a></li>
<li class="toclevel-2"><a href="#Trivial"><span class="tocnumber">2.2</span> <span class="toctext">Trivial</span></a>
<ul>
<li class="toclevel-3"><a href="#Cell-clear"><span class="tocnumber">2.2.1</span> <span class="toctext">Cell-clear</span></a></li>
<li class="toclevel-3"><a href="#Clear_previous_cells"><span class="tocnumber">2.2.2</span> <span class="toctext">Clear previous cells</span></a></li>
<li class="toclevel-3"><a href="#Rewind"><span class="tocnumber">2.2.3</span> <span class="toctext">Rewind</span></a></li>
<li class="toclevel-3"><a href="#Fast-forward"><span class="tocnumber">2.2.4</span> <span class="toctext">Fast-forward</span></a></li>
<li class="toclevel-3"><a href="#Simple_loop"><span class="tocnumber">2.2.5</span> <span class="toctext">Simple loop</span></a></li>
<li class="toclevel-3"><a href="#Moving_the_pointer"><span class="tocnumber">2.2.6</span> <span class="toctext">Moving the pointer</span></a></li>
<li class="toclevel-3"><a href="#Add"><span class="tocnumber">2.2.7</span> <span class="toctext">Add</span></a></li>
<li class="toclevel-3"><a href="#Conditional_loop_statements"><span class="tocnumber">2.2.8</span> <span class="toctext">Conditional loop statements</span></a></li>
<li class="toclevel-3"><a href="#Copying_a_byte"><span class="tocnumber">2.2.9</span> <span class="toctext">Copying a byte</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#Arithmetic"><span class="tocnumber">2.3</span> <span class="toctext">Arithmetic</span></a>
<ul>
<li class="toclevel-3"><a href="#Addition"><span class="tocnumber">2.3.1</span> <span class="toctext">Addition</span></a></li>
<li class="toclevel-3"><a href="#Multiplication"><span class="tocnumber">2.3.2</span> <span class="toctext">Multiplication</span></a></li>
<li class="toclevel-3"><a href="#Division"><span class="tocnumber">2.3.3</span> <span class="toctext">Division</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-1"><a href="#Portability_issues"><span class="tocnumber">3</span> <span class="toctext">Portability issues</span></a>
<ul>
<li class="toclevel-2"><a href="#Cell_size"><span class="tocnumber">3.1</span> <span class="toctext">Cell size</span></a></li>
<li class="toclevel-2"><a href="#Array_size"><span class="tocnumber">3.2</span> <span class="toctext">Array size</span></a></li>
<li class="toclevel-2"><a href="#End-of-line_code"><span class="tocnumber">3.3</span> <span class="toctext">End-of-line code</span></a></li>
<li class="toclevel-2"><a href="#End-of-file_behavior"><span class="tocnumber">3.4</span> <span class="toctext">End-of-file behavior</span></a></li>
<li class="toclevel-2"><a href="#Miscellaneous_dialects"><span class="tocnumber">3.5</span> <span class="toctext">Miscellaneous dialects</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">4</span> <span class="toctext">External links</span></a></li>
<li class="toclevel-1"><a href="#Notes"><span class="tocnumber">5</span> <span class="toctext">Notes</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Language_design" id="Language_design"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Brainfuck&amp;action=edit&amp;section=1" title="Edit section: Language design">edit</a>]</span> <span class="mw-headline">Language design</span></h2>
<p><a href="/wiki/Urban_M%C3%BCller" title="Urban Müller">Urban Müller</a> created brainfuck in 1993 with the intention of designing a language which could be implemented with the smallest possible <a href="/wiki/Compiler" title="Compiler">compiler</a>,<sup id="cite_ref-1" class="reference"><a href="#cite_note-1" title=""><span>[</span>2<span>]</span></a></sup> inspired by the 1024 byte compiler for the <a href="/wiki/FALSE" title="FALSE">FALSE</a> programming language.<sup id="cite_ref-2" class="reference"><a href="#cite_note-2" title=""><span>[</span>3<span>]</span></a></sup> Several brainfuck compilers have been made smaller than 200 bytes. The classic distribution is <a href="http://www.aminet.net/package.php?package=dev/lang/brainfuck-2.lha" class="external text" title="http://www.aminet.net/package.php?package=dev/lang/brainfuck-2.lha" rel="nofollow">Müller's version 2</a>, containing a compiler for the <a href="/wiki/Amiga" title="Amiga">Amiga</a>, an interpreter, example programs, and a readme document.</p>
<p>The language consists of eight <a href="/wiki/Command_(computing)" title="Command (computing)">commands</a>, listed below. A brainfuck program is a sequence of these commands, possibly interspersed with other characters (which are ignored). The commands are executed sequentially, except as noted below; an <a href="/wiki/Program_Counter" title="Program Counter" class="mw-redirect">instruction pointer</a> begins at the first command, and each command it points to is executed, after which it normally moves forward to the next command. The program terminates when the instruction pointer moves past the last command.</p>
<p>The brainfuck language uses a simple machine model consisting of the program and instruction pointer, as well as an array of at least 30,000 <a href="/wiki/Byte" title="Byte">byte</a> cells initialized to zero; a movable <a href="/wiki/Pointer_(computing)" title="Pointer (computing)">data pointer</a> (initialized to point to the leftmost byte of the array); and two streams of bytes for input and output (most often connected to a keyboard and a monitor respectively, and using the <a href="/wiki/ASCII" title="ASCII">ASCII</a> character encoding).</p>
<p><a name="Commands" id="Commands"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Brainfuck&amp;action=edit&amp;section=2" title="Edit section: Commands">edit</a>]</span> <span class="mw-headline">Commands</span></h3>
<p>The eight language commands, each consisting of a single character, are the following:</p>
<table class="wikitable">
<tr>
<th align="center">Character</th>
<th align="left">Meaning</th>
</tr>
<tr>
<td style="text-align:center"><code>&gt;</code></td>
<td>increment the data pointer (to point to the next cell to the right).</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;</code></td>
<td>decrement the data pointer (to point to the next cell to the left).</td>
</tr>
<tr>
<td style="text-align:center"><code>+</code></td>
<td>increment (increase by one) the byte at the data pointer.</td>
</tr>
<tr>
<td style="text-align:center"><code>-</code></td>
<td>decrement (decrease by one) the byte at the data pointer.</td>
</tr>
<tr>
<td style="text-align:center"><code>.</code></td>
<td>output the value of the byte at the data pointer.</td>
</tr>
<tr>
<td style="text-align:center"><code>,</code></td>
<td>accept one byte of input, storing its value in the byte at the data pointer.</td>
</tr>
<tr>
<td style="text-align:center"><code>[</code></td>
<td>if the byte at the data pointer is zero, then instead of moving the <a href="/wiki/Program_Counter" title="Program Counter" class="mw-redirect">instruction pointer</a> forward to the next command, <a href="/wiki/Branch_(computer_science)" title="Branch (computer science)">jump</a> it <i>forward</i> to the command after the <i>matching</i> <code>]</code> command<sup>*</sup>.</td>
</tr>
<tr>
<td style="text-align:center"><code>]</code></td>
<td>if the byte at the data pointer is nonzero, then instead of moving the instruction pointer forward to the next command, jump it <i>back</i> to the command after the <i>matching</i> <code>[</code> command<sup>*</sup>.</td>
</tr>
</table>
<p>(Alternatively, the <i>]</i> command may instead be translated as an unconditional jump <b>to</b> the corresponding <i>[</i> command, or vice versa; programs will behave the same but will run more slowly, due to unnecessary double searching.)</p>
<p><sup>*</sup><i>[</i> and <i>]</i> match as parentheses usually do: each <i>[</i> matches exactly one <i>]</i> and vice versa, the <i>[</i> comes first, and there can be no unmatched <i>[</i> or <i>]</i> between the two.</p>
<p>Brainfuck programs can be translated into <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a> using the following substitutions, assuming <code>ptr</code> is of type <code>unsigned char*</code> and has been initialized to point to an array of zeroed bytes:</p>
<table class="wikitable">
<tr>
<th align="center">brainfuck command</th>
<th align="left">C equivalent</th>
</tr>
<tr>
<td style="text-align:center"><code>&gt;</code></td>
<td><code>++ptr;</code></td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;</code></td>
<td><code>--ptr;</code></td>
</tr>
<tr>
<td style="text-align:center"><code>+</code></td>
<td><code>++*ptr;</code></td>
</tr>
<tr>
<td style="text-align:center"><code>-</code></td>
<td><code>--*ptr;</code></td>
</tr>
<tr>
<td style="text-align:center"><code>.</code></td>
<td><code>putchar(*ptr);</code></td>
</tr>
<tr>
<td style="text-align:center"><code>,</code></td>
<td><code>*ptr=getchar();</code></td>
</tr>
<tr>
<td style="text-align:center"><code>[</code></td>
<td><code>while (*ptr) {</code></td>
</tr>
<tr>
<td style="text-align:center"><code>]</code></td>
<td><code>}</code></td>
</tr>
</table>
<p>As the name suggests, brainfuck programs tend to be difficult to comprehend. Partly this is because any mildly complex task requires a long sequence of commands; partly it is because the program's text gives no direct indications of the program's <a href="/wiki/State_(computer_science)" title="State (computer science)">state</a>. These, as well as brainfuck's inefficiency and its limited input/output capabilities, are some of the reasons it is not used for serious programming. Nonetheless, like any <a href="/wiki/Turing_completeness" title="Turing completeness">Turing-complete</a> language, brainfuck is theoretically capable of computing any computable function or simulating any other computational model, if given access to an unlimited amount of memory.<sup id="cite_ref-3" class="reference"><a href="#cite_note-3" title=""><span>[</span>4<span>]</span></a></sup> A variety of brainfuck programs have been written.<sup id="cite_ref-4" class="reference"><a href="#cite_note-4" title=""><span>[</span>5<span>]</span></a></sup> Although brainfuck programs, especially complicated ones, are difficult to write, it is quite trivial to write an interpreter for brainfuck in a more typical language such as C due to its simplicity.</p>
<p><a name="Brainfuck.27s_formal_.22parent_language.22" id="Brainfuck.27s_formal_.22parent_language.22"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Brainfuck&amp;action=edit&amp;section=3" title="Edit section: Brainfuck's formal &quot;parent language&quot;">edit</a>]</span> <span class="mw-headline">Brainfuck's formal "parent language"</span></h3>
<p>Except for its two I/O commands, brainfuck is a minor variation of the formal programming language <a href="/wiki/P_prime_prime" title="P prime prime" class="mw-redirect">P prime prime</a> (P′′) created by <a href="/wiki/Corrado_B%C3%B6hm" title="Corrado Böhm">Corrado Böhm</a> in 1964. In fact, using six symbols equivalent to the respective brainfuck commands <tt>+, -, &lt;, &gt;, [, ],</tt> Böhm provided an explicit program for each of the basic functions that together serve to compute any <a href="/wiki/Computable_function" title="Computable function">computable function</a>. So in a very real sense, the first "brainfuck" programs appear in Böhm's 1964 paper – and they were programs sufficient to prove Turing-completeness.</p>
<p><a name="Examples" id="Examples"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Brainfuck&amp;action=edit&amp;section=4" title="Edit section: Examples">edit</a>]</span> <span class="mw-headline">Examples</span></h2>
<p><a name="Hello_World.21" id="Hello_World.21"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Brainfuck&amp;action=edit&amp;section=5" title="Edit section: Hello World!">edit</a>]</span> <span class="mw-headline">Hello World!</span></h3>
<p>The following program prints <a href="/wiki/Hello_world_program" title="Hello world program">"Hello World!"</a> and a newline to the screen:</p>
<pre>
++++++++++        initialises cell zero to 10
[
   &gt;+++++++&gt;++++++++++&gt;+++&gt;+&lt;&lt;&lt;&lt;-
]                 this loop sets the next four cells to 70/100/30/10 
&gt;++.              print   'H'
&gt;+.               print   'e'
+++++++.                  'l'
.                         'l'
+++.                      'o'
&gt;++.                      space
&lt;&lt;+++++++++++++++.        'W'
&gt;.                        'o'
+++.                      'r'
------.                   'l'
--------.                 'd'
&gt;+.                       '!'
&gt;.                        newline
</pre>
<p>For readability, this code has been spread across many lines and comments have been added. Brainfuck ignores all characters except the eight commands <code>+-&lt;&gt;[],.</code> so no special syntax for comments is needed. The code could just as well have been written as:</p>
<pre>
<code>++++++++++[&gt;+++++++&gt;++++++++++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;++.&gt;+.+++++++..+++.&gt;++.&lt;&lt;+++++++++++++++.&gt;.+++.------.--------.&gt;+.&gt;.</code>
</pre>
<p>The first line initialises <code>a[0] = 10</code> by simply incrementing ten times from 0. The loop from line 2 effectively sets the initial values for the array: <tt>a[1] = 70</tt> (close to 72, the <a href="/wiki/ASCII" title="ASCII">ASCII</a> code for the character 'H'), <code>a[2] = 100</code> (close to 101 or 'e'), <code>a[3] = 30</code> (close to 32, the code for space) and <code>a[4] = 10</code> (newline). The loop works by multiplying the value of <code>a[0]</code>, <code>10</code>, by 7, 10, 3, and 1, saving the results in other cells. After the loop is finished, a[0] is zero. <code>&gt;++.</code> then moves the pointer to <code>a[1]</code> which holds <code>70</code>, adds two to it (producing 72 which is the ASCII character code of a capital H), and outputs it.</p>
<p>The next line moves the array pointer to <code>a[2]</code> and adds one to it, producing <code>101</code>, a lower-case 'e', which is then output.</p>
<p>As 'l' happens to be the seventh letter after 'e', to output 'll' another seven are added (<code>+++++++</code>) to <code>a[2]</code> and the result is outputted twice.</p>
<p>'o' is the third letter after 'l', so <code>a[2]</code> is incremented three more times and output the result.</p>
<p>The rest of the program goes on in the same way. For the space and capital letters, different array cells are selected and incremented or decremented as needed.</p>
<p><a name="Trivial" id="Trivial"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Brainfuck&amp;action=edit&amp;section=6" title="Edit section: Trivial">edit</a>]</span> <span class="mw-headline">Trivial</span></h3>
<p><a name="Cell-clear" id="Cell-clear"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Brainfuck&amp;action=edit&amp;section=7" title="Edit section: Cell-clear">edit</a>]</span> <span class="mw-headline">Cell-clear</span></h4>
<pre>
[-]
</pre>
<p>A simple program fragment that sets the current location to 0, by iteratively decrementing until it is equal to 0.</p>
<p><a name="Clear_previous_cells" id="Clear_previous_cells"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Brainfuck&amp;action=edit&amp;section=8" title="Edit section: Clear previous cells">edit</a>]</span> <span class="mw-headline">Clear previous cells</span></h4>
<pre>
[[-]&lt;]
</pre>
<p>Clears the current cell and all those before it, stopping at the first 0 value.</p>
<p><a name="Rewind" id="Rewind"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Brainfuck&amp;action=edit&amp;section=9" title="Edit section: Rewind">edit</a>]</span> <span class="mw-headline">Rewind</span></h4>
<pre>
[&lt;]&gt;
</pre>
<p>Decrements the data pointer until 0 is found, then increments it so the current cell is non-zero.</p>
<p><a name="Fast-forward" id="Fast-forward"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Brainfuck&amp;action=edit&amp;section=10" title="Edit section: Fast-forward">edit</a>]</span> <span class="mw-headline">Fast-forward</span></h4>
<pre>
[&gt;]&lt;
</pre>
<p>Increments the data pointer until a 0 value is found, then decrements it so the current cell is non-zero.</p>
<p><a name="Simple_loop" id="Simple_loop"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Brainfuck&amp;action=edit&amp;section=11" title="Edit section: Simple loop">edit</a>]</span> <span class="mw-headline">Simple loop</span></h4>
<pre>
,[.,]
</pre>
<p>A continuous loop that takes text input from the keyboard and echoes it to the screen (similar to the Unix <a href="/wiki/Cat_(Unix)" title="Cat (Unix)">cat</a> program). Note that this assumes the cell is set to 0 when a '<code>,</code>' command is executed after the end of input (sometimes called end-of-file or "EOF"); implementations vary on this point. For implementations that set the cell to -1 on EOF, or leave the cell's value unchanged, this program would be written "<code>,+[-.,+]</code>" or "<code>,[.[-],]</code>" respectively.</p>
<p><a name="Moving_the_pointer" id="Moving_the_pointer"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Brainfuck&amp;action=edit&amp;section=12" title="Edit section: Moving the pointer">edit</a>]</span> <span class="mw-headline">Moving the pointer</span></h4>
<pre>
&gt;,[.&gt;,]
</pre>
<p>A version of the last one that also saves all the input in the array for future use, by moving the pointer each time.</p>
<p><a name="Add" id="Add"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Brainfuck&amp;action=edit&amp;section=13" title="Edit section: Add">edit</a>]</span> <span class="mw-headline">Add</span></h4>
<pre>
[-&gt;+&lt;]
</pre>
<p>This adds the current location (destructively, it is left at zero) to the next location.</p>
<pre>
[-&gt;+&gt;+&lt;&lt;]&gt;&gt;[-&lt;&lt;+&gt;&gt;]
</pre>
<p>This code will not destroy the original value, but it is 1.5 times more memory hungry than the previous example, requiring 3 bytes of memory</p>
<p><a name="Conditional_loop_statements" id="Conditional_loop_statements"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Brainfuck&amp;action=edit&amp;section=14" title="Edit section: Conditional loop statements">edit</a>]</span> <span class="mw-headline">Conditional loop statements</span></h4>
<pre>
,----------[----------------------.,----------]
</pre>
<p>This program will take lowercase input from the keyboard and make it uppercase, exiting when the user presses the enter key. It requires only one cell of memory, into which the user repeatedly enters keystrokes. If any of the keystrokes is the <a href="/wiki/Newline" title="Newline">newline</a> character—that is, the user presses the enter key—most brainfuck implementations will return the value 10. When the result of <code>,</code> is 10, interpreting the segment <code>,----------</code> will cause the cell's value to be 0. In this case, the program will fail to enter to the loop and terminate.</p>
<p>On the other hand, if the character input was not a 10, the program boldly assumes it was a lowercase letter and enters the loop, wherein it subtracts another 22 from from the input. This yields a total deduction of 32, which is the difference between an ASCII lowercase letter and the corresponding uppercase letter (for example, lowercase f = ASCII 102 and uppercase F = ASCII 70). The result of all this arithmetic is realized when the uppercase character is outputted.</p>
<p>Next the segment <code>,----------</code> is repeated, putting a keystroke's value in the cell and subtracting 10. It has the same effect as before: if the inputted character is a linefeed, the loop is exited and the program terminates. Otherwise, the interpreter goes back to the start of the loop, subtracts another 22, outputs, and so on.</p>
<p><a name="Copying_a_byte" id="Copying_a_byte"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Brainfuck&amp;action=edit&amp;section=15" title="Edit section: Copying a byte">edit</a>]</span> <span class="mw-headline">Copying a byte</span></h4>
<p>In the following section, [n] denotes the <i>n</i>th byte in the array: [0], [1], [2] and so on.</p>
<p>Brainfuck does not include an operation for copying <a href="/wiki/Byte" title="Byte">bytes</a>. This must be done with the looping construct and arithmetical operators. Moving a byte is simple enough; moving the value of [0] to [1] can be done as follows:</p>
<pre>
&gt;[-]&lt;[-&gt;+&lt;]
</pre>
<p>However, this resets the value of [0] to 0. The value of [0] can be restored after copying by taking advantage of the ability to copy a value to two places at once. To copy the value of [0] to both [1] and [2] is simple:</p>
<pre>
&gt;[-]&gt;[-]&lt;&lt;[-&gt;+&gt;+&lt;&lt;]
</pre>
<p>This can be used to restore the value of [0]. Therefore, [0] can be nondestructively copied to [1] (using [2] as scratch space) as follows:</p>
<pre>
&gt;[-]&gt;[-]&lt;&lt;[-&gt;+&gt;+&lt;&lt;]&gt;&gt;[-&lt;&lt;+&gt;&gt;]&lt;&lt;
</pre>
<p><a name="Arithmetic" id="Arithmetic"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Brainfuck&amp;action=edit&amp;section=16" title="Edit section: Arithmetic">edit</a>]</span> <span class="mw-headline">Arithmetic</span></h3>
<p><a name="Addition" id="Addition"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Brainfuck&amp;action=edit&amp;section=17" title="Edit section: Addition">edit</a>]</span> <span class="mw-headline">Addition</span></h4>
<pre>
,&gt;++++++[&lt;--------&gt;-],[&lt;+&gt;-]&lt;.
</pre>
<p>This program adds two single-digit numbers and displays the result correctly if the result also has only one digit:</p>
<pre>
43
</pre>
<pre>
7
</pre>
<p>The first number is input in [0], and 48 is subtracted from it to correct it (the ASCII codes for the digits 0-9 are 48-57). This is done by putting a 6 in [1] and using a loop to subtract 8 from [0] that many times. (This is a common method of adding or subtracting large numbers.) Next, the second number is input in [1].</p>
<p>The next loop <code>[&lt;+&gt;-]</code> does the real work, moving the second number onto the first, adding them together and zeroing [1]. Each time through, it adds one to [0] and subtracts one from [1]; so by the time [1] is zeroed, as many have been added to [0] as have been removed from [1]. Now a return is input in [1]. (We're not error-checking the input at all.)</p>
<p>Then the pointer is moved back to the [0], which is then output. ([0] is now a + (b + 48), since b isn't corrected; which is identical to (a + b) + 48, which is the desired result.) Now the pointer is moved to [1], which holds the return that was input; it is now outputted, and the program is complete.</p>
<p>Apparently, some implementations prefer this variant which does not use linefeeds at all:</p>
<pre>
,&gt;------[&lt;--------&gt;+],[&lt;+&gt;-]&lt;.
</pre>
<p><a name="Multiplication" id="Multiplication"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Brainfuck&amp;action=edit&amp;section=18" title="Edit section: Multiplication">edit</a>]</span> <span class="mw-headline">Multiplication</span></h4>
<pre>
,&gt;,&gt;++++++++[&lt;------&lt;------&gt;&gt;-]
&lt;&lt;[&gt;[&gt;+&gt;+&lt;&lt;-]&gt;&gt;[&lt;&lt;+&gt;&gt;-]&lt;&lt;&lt;-]
&gt;&gt;&gt;++++++[&lt;++++++++&gt;-],&lt;.&gt;.
</pre>
<p>Like the previous, but does multiplication, not addition.</p>
<p>The first number is input in [0], the second number is input in [1], and both numbers are corrected by having 48 subtracted.</p>
<p>Now the program enters the main multiplication loop. The basic idea is that each time through it subtracts one from [0] and adds [1] to the running total kept in [2]. In particular: the first inner loop moves [1] onto both [2] and [3], while zeroing [1]. (This is the basic way to duplicate a number.) The next inner loop moves [3] back into [1], zeroing [3]. Then one is subtracted from [0], and the outer loop is ended. On exiting this loop, [0] is zero, [1] still has the second number in it, and [2] has the product of the two numbers. (Had the first number needed to be kept, the program could have added one to [4] each time through the outer loop, then moved the value from [4] back to [0] afterward.)</p>
<p>Now 48 is added to the product, a return is input as [3], the <a href="/wiki/ASCII" title="ASCII">ASCIIfied</a> product is output, followed by the return just stored.</p>
<p><a name="Division" id="Division"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Brainfuck&amp;action=edit&amp;section=19" title="Edit section: Division">edit</a>]</span> <span class="mw-headline">Division</span></h4>
<p>This example accepts two single-digit numbers from the user, divides them, and displays the truncated quotient (ie integer division).</p>
<p>The following code accepts two numbers from the user; the dividend is stored in memory location (0) and the divisor is stored in (1) The code then enters the main loop. With each iteration of the loop, the code subtracts the divisor from the dividend. If the difference is greater than zero, the cell holding the quotient is incremented, and the process repeated until the dividend reaches zero. The result is</p>
<pre>
,&gt;,&gt;++++++[-&lt;--------&lt;--------&gt;&gt;] Store 2 numbers from keyboard in (0) and (1); and subtract 48 from each
&lt;&lt;[                               This is the main loop which continues until the dividend in (0) is zero
&gt;[-&gt;+&gt;+&lt;&lt;]                        Destructively copy the divisor from (1) to (2) and (3); setting (1) to zero
&gt;[-&lt;&lt;-                            Subtract the divisor in (2) from the dividend in (0); the difference is stored in (0) and (2) is cleared
[&gt;]&gt;&gt;&gt;[&lt;[&gt;&gt;&gt;-&lt;&lt;&lt;[-]]&gt;&gt;]&lt;&lt;]        If the dividend in (0) is zero; exit the loop
&gt;&gt;&gt;+                              Add one to the quotient in (5)
&lt;&lt;[-&lt;&lt;+&gt;&gt;]                        Destructively copy the divisor in (3) to (1)
&lt;&lt;&lt;]                              Move the stack pointer to (0) and go back to the start of the main loop
&gt;[-]&gt;&gt;&gt;&gt;[-&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;]            Destructively copy the quotient in (5) to (0) (not necessary; but cleaner)
&lt;&lt;&lt;&lt;++++++[-&lt;++++++++&gt;]&lt;.         Add 48 and print result
</pre>
<p><a name="Portability_issues" id="Portability_issues"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Brainfuck&amp;action=edit&amp;section=20" title="Edit section: Portability issues">edit</a>]</span> <span class="mw-headline">Portability issues</span></h2>
<p>Partly because Urban Müller did not write a thorough language specification, the many subsequent brainfuck interpreters and compilers have come to use slightly different dialects of brainfuck.</p>
<p><a name="Cell_size" id="Cell_size"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Brainfuck&amp;action=edit&amp;section=21" title="Edit section: Cell size">edit</a>]</span> <span class="mw-headline">Cell size</span></h3>
<p>In <a href="http://wuarchive.wustl.edu/pub/aminet/dev/lang/brainfuck-2.lha" class="external text" title="http://wuarchive.wustl.edu/pub/aminet/dev/lang/brainfuck-2.lha" rel="nofollow">the classic distribution</a>, the cells are 8-bit bytes, and this is still the most common size. However, to read non-textual data, a brainfuck program may need to distinguish an <a href="/wiki/End-of-file" title="End-of-file">end-of-file</a> condition from any possible byte value; thus 16-bit cells have also been used. Some implementations have used 32-bit cells, 64-bit cells, or <a href="/wiki/Bignum" title="Bignum" class="mw-redirect">bignum</a> cells with practically unlimited range, but programs that use this extra range are likely to be slow, since storing the value <i>n</i> into a cell requires <a href="/wiki/Big_O_notation#Related_asymptotic_notations" title="Big O notation">Ω</a>(<i>n</i>) time as a cell’s value may only be changed by incrementing and decrementing.</p>
<p>In all these variants, the <code>,</code> and <code>.</code> commands still read and write data in bytes. In most of them, the cells wrap around, i.e. incrementing a cell which holds its maximal value (with the <code>+</code> command) will bring it to its minimal value and vice versa. The exceptions are implementations which are distant from the underlying hardware, implementations that use bignums, and implementations that try to enforce portability.</p>
<p>Fortunately, it is usually easy to write brainfuck programs that do not ever cause integer wraparound or overflow. Such programs thus do not depend heavily on cell size. Generally this means avoiding increment of +255 (unsigned char wraparound); or avoiding overstepping the boundaries of [-128, +127] (signed char wraparound). For more details on integer wraparound, see the <a href="/wiki/Integer_overflow" title="Integer overflow">Integer overflow</a> article.</p>
<p><a name="Array_size" id="Array_size"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Brainfuck&amp;action=edit&amp;section=22" title="Edit section: Array size">edit</a>]</span> <span class="mw-headline">Array size</span></h3>
<p>In the classic distribution, the array has 30,000 cells, and the pointer begins at the leftmost cell. Any brainfuck implementation should thus provide at least that many cells, but surprisingly many implementations provide fewer. Even more cells are needed to store things like the millionth <a href="/wiki/Fibonacci_number" title="Fibonacci number">Fibonacci number</a>, and the easiest way to make the language Turing-complete is to make the array unlimited on the right.</p>
<p>A few implementations extend the array to the left as well; this is an uncommon feature, and therefore portable brainfuck programs do not depend on it.</p>
<p>When the pointer moves outside the bounds of the array, some implementations will give an error message, some will try to extend the array dynamically, some will not notice and will produce <a href="/wiki/Undefined_behavior" title="Undefined behavior">undefined behavior</a>, and a few will move the pointer to the opposite end of the array. Some tradeoffs are involved: expanding the array dynamically to the right is the most user-friendly approach and is good for memory-hungry programs, but it carries a speed penalty. If a fixed-size array is used it is helpful to make it very large, or better yet let the user set the size. Giving an error message for bounds violations is very useful for debugging but even that carries a speed penalty unless it can be handled by the operating system's memory protections.</p>
<p><a name="End-of-line_code" id="End-of-line_code"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Brainfuck&amp;action=edit&amp;section=23" title="Edit section: End-of-line code">edit</a>]</span> <span class="mw-headline">End-of-line code</span></h3>
<p>Different operating systems (and sometimes different programming environments) use subtly different versions of ASCII. The most important difference is in the code used for the end of a line of text. MS-DOS and Microsoft Windows use a <a href="/wiki/Newline#CR.2BLF" title="Newline">CRLF</a>, i.e. a 13 followed by a 10, in most contexts. UNIX and its descendants, including Linux and Mac OS X, use just 10, and older Macs use just 13. It would be unfortunate if brainfuck programs had to be rewritten for different operating systems. Fortunately, a unified standard is easy to find. Urban Müller's compiler and his example programs use 10, on both input and output; so do a large majority of existing brainfuck programs; and 10 is also more convenient to use than CRLF. Thus, brainfuck implementations should make sure that brainfuck programs that assume newline=10 will run properly; many do so, but some do not.</p>
<p>This assumption is also consistent with most of the world's sample code for <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a> and other languages, in that they use '\n', or 10, for their newlines. On systems that use CRLF line endings, the C standard library transparently remaps "\n" to "\r\n" on output and "\r\n" to "\n" on input for streams not opened in binary mode.</p>
<p><a name="End-of-file_behavior" id="End-of-file_behavior"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Brainfuck&amp;action=edit&amp;section=24" title="Edit section: End-of-file behavior">edit</a>]</span> <span class="mw-headline">End-of-file behavior</span></h3>
<p>The behavior of the <code>,</code> command when an <a href="/wiki/End-of-file" title="End-of-file">end-of-file</a> condition has been encountered varies. Some implementations set the cell at the pointer to 0, some set it to the C constant EOF (in practice this is usually -1), some leave the cell's value unchanged. There is no real consensus; arguments for the three behaviors are as follows.</p>
<p>Setting the cell to 0 avoids the use of negative numbers, and makes it marginally more concise to write a loop that reads characters until EOF occurs. This is a language extension devised by Panu Kalliokoski.</p>
<p>Setting the cell to -1 allows EOF to be distinguished from any byte value (if the cells are larger than bytes), which is necessary for reading non-textual data; also, it is the behavior of the C translation of <code>,</code> given in Müller's readme file. However, it is not obvious that those C translations are to be taken as normative.</p>
<p>Leaving the cell's value unchanged is the behavior of Urban Müller's brainfuck compiler. This behavior can easily coexist with either of the others; for instance, a program that assumes EOF=0 can set the cell to 0 before each <code>,</code> command, and will then work correctly on implementations that do either EOF=0 or EOF="no change". It is so easy to accommodate the "no change" behavior that any brainfuck programmer interested in portability should do so.</p>
<p><a name="Miscellaneous_dialects" id="Miscellaneous_dialects"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Brainfuck&amp;action=edit&amp;section=25" title="Edit section: Miscellaneous dialects">edit</a>]</span> <span class="mw-headline">Miscellaneous dialects</span></h3>
<p>Many people have modified brainfuck in order to produce their own languages, often by adding commands, occasionally by removing them. Many of the resulting languages are included in the <a href="http://esoteric.voxelperfect.net/wiki/Category:Brainfuck_derivatives" class="external text" title="http://esoteric.voxelperfect.net/wiki/Category:Brainfuck_derivatives" rel="nofollow">brainfuck derivatives</a> list on the Esoteric Languages wiki. However, there are also unnamed minor variants, formed possibly as a result of inattention, of which some of the more common are:</p>
<ul>
<li>forbidding, rather than ignoring, any non-command characters in brainfuck programs</li>
<li>introducing a comment marker which comments out the rest of the line</li>
<li>various alterations of the loop semantics, sometimes destroying <a href="/wiki/Turing_completeness" title="Turing completeness">Turing completeness</a></li>
<li>requiring a special character to mark the end of the program</li>
</ul>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Brainfuck&amp;action=edit&amp;section=26" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<ul>
<li><a href="http://esoteric.voxelperfect.net/wiki/Brainfuck" class="external text" title="http://esoteric.voxelperfect.net/wiki/Brainfuck" rel="nofollow">Brainfuck</a> on the <a href="http://esoteric.voxelperfect.net/wiki/" class="external text" title="http://esoteric.voxelperfect.net/wiki/" rel="nofollow">Esolang (Esoteric Languages) wiki</a></li>
<li><a href="http://www.dmoz.org/Computers/Programming/Languages/Brainfuck/" class="external text" title="http://www.dmoz.org/Computers/Programming/Languages/Brainfuck/" rel="nofollow">Brainfuck</a> at the <a href="/wiki/Open_Directory_Project" title="Open Directory Project">Open Directory Project</a></li>
</ul>
<p><a name="Notes" id="Notes"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Brainfuck&amp;action=edit&amp;section=27" title="Edit section: Notes">edit</a>]</span> <span class="mw-headline">Notes</span></h2>
<ol class="references">
<li id="cite_note-0"><b><a href="#cite_ref-0" title="">^</a></b> <a href="http://aminet.net/dev/lang/brainfuck-2.readme" class="external text" title="http://aminet.net/dev/lang/brainfuck-2.readme" rel="nofollow">Urban Müller's classic distribution at aminet.net</a></li>
<li id="cite_note-1"><b><a href="#cite_ref-1" title="">^</a></b> <a href="http://www.muppetlabs.com/~breadbox/bf/" class="external text" title="http://www.muppetlabs.com/~breadbox/bf/" rel="nofollow">The Brainfuck Programming Language</a></li>
<li id="cite_note-2"><b><a href="#cite_ref-2" title="">^</a></b> <a href="http://strlen.com/false/index.html" class="external text" title="http://strlen.com/false/index.html" rel="nofollow">Wouter's False page</a></li>
<li id="cite_note-3"><b><a href="#cite_ref-3" title="">^</a></b> <a href="http://www.iwriteiam.nl/Ha_bf_Turing.html" class="external text" title="http://www.iwriteiam.nl/Ha_bf_Turing.html" rel="nofollow">BF is Turing-complete</a></li>
<li id="cite_note-4"><b><a href="#cite_ref-4" title="">^</a></b> <a href="http://esoteric.sange.fi/brainfuck/bf-source/prog/" class="external text" title="http://esoteric.sange.fi/brainfuck/bf-source/prog/" rel="nofollow">The Brainfuck Archive</a></li>
</ol>


<!-- 
NewPP limit report
Preprocessor node count: 1069/1000000
Post-expand include size: 5996/2048000 bytes
Template argument size: 1752/2048000 bytes
Expensive parser function count: 0/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:4086-0!1!0!default!!en!2 and timestamp 20090402023453 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Brainfuck">http://en.wikipedia.org/wiki/Brainfuck</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Non-English-based_programming_languages" title="Category:Non-English-based programming languages">Non-English-based programming languages</a></span> | <span dir='ltr'><a href="/wiki/Category:Esoteric_programming_languages" title="Category:Esoteric programming languages">Esoteric programming languages</a></span></div><div id="mw-hidden-catlinks" class="mw-hidden-cats-hidden">Hidden categories:&#32;<span dir='ltr'><a href="/wiki/Category:Cleanup_from_December_2008" title="Category:Cleanup from December 2008">Cleanup from December 2008</a></span> | <span dir='ltr'><a href="/wiki/Category:All_pages_needing_cleanup" title="Category:All pages needing cleanup">All pages needing cleanup</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Brainfuck" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Brainfuck" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Brainfuck&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Brainfuck&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Brainfuck" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Brainfuck" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Brainfuck" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Brainfuck&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Brainfuck&amp;oldid=279774699" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Brainfuck&amp;id=279774699">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-ca"><a href="http://ca.wikipedia.org/wiki/Brainfuck">Català</a></li>
				<li class="interwiki-cs"><a href="http://cs.wikipedia.org/wiki/Brainfuck">Česky</a></li>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/Brainfuck">Deutsch</a></li>
				<li class="interwiki-et"><a href="http://et.wikipedia.org/wiki/Brainfuck">Eesti</a></li>
				<li class="interwiki-es"><a href="http://es.wikipedia.org/wiki/Brainfuck">Español</a></li>
				<li class="interwiki-eo"><a href="http://eo.wikipedia.org/wiki/Brainfuck_(programlingvo)">Esperanto</a></li>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Brainfuck">Français</a></li>
				<li class="interwiki-ko"><a href="http://ko.wikipedia.org/wiki/%EB%B8%8C%EB%A0%88%EC%9D%B8%ED%8D%BD">한국어</a></li>
				<li class="interwiki-is"><a href="http://is.wikipedia.org/wiki/Heilari%C3%B0lun">Íslenska</a></li>
				<li class="interwiki-it"><a href="http://it.wikipedia.org/wiki/Brainfuck">Italiano</a></li>
				<li class="interwiki-he"><a href="http://he.wikipedia.org/wiki/Brainfuck">עברית</a></li>
				<li class="interwiki-hu"><a href="http://hu.wikipedia.org/wiki/Brainfuck">Magyar</a></li>
				<li class="interwiki-ms"><a href="http://ms.wikipedia.org/wiki/Brainfuck">Bahasa Melayu</a></li>
				<li class="interwiki-nl"><a href="http://nl.wikipedia.org/wiki/Brainfuck">Nederlands</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/Brainfuck">日本語</a></li>
				<li class="interwiki-no"><a href="http://no.wikipedia.org/wiki/Brainfuck">‪Norsk (bokmål)‬</a></li>
				<li class="interwiki-pl"><a href="http://pl.wikipedia.org/wiki/Brainfuck">Polski</a></li>
				<li class="interwiki-pt"><a href="http://pt.wikipedia.org/wiki/Brainfuck">Português</a></li>
				<li class="interwiki-ru"><a href="http://ru.wikipedia.org/wiki/Brainfuck">Русский</a></li>
				<li class="interwiki-sk"><a href="http://sk.wikipedia.org/wiki/Brainfuck">Slovenčina</a></li>
				<li class="interwiki-sl"><a href="http://sl.wikipedia.org/wiki/Brainfuck">Slovenščina</a></li>
				<li class="interwiki-fi"><a href="http://fi.wikipedia.org/wiki/Brainfuck">Suomi</a></li>
				<li class="interwiki-sv"><a href="http://sv.wikipedia.org/wiki/Brainfuck">Svenska</a></li>
				<li class="interwiki-th"><a href="http://th.wikipedia.org/wiki/%E0%B8%A0%E0%B8%B2%E0%B8%A9%E0%B8%B2%E0%B9%80%E0%B8%9A%E0%B8%A3%E0%B8%99%E0%B8%9F%E0%B8%B1%E0%B8%81">ไทย</a></li>
				<li class="interwiki-vi"><a href="http://vi.wikipedia.org/wiki/Brainfuck">Tiếng Việt</a></li>
				<li class="interwiki-tg"><a href="http://tg.wikipedia.org/wiki/Brainfuck">Тоҷикӣ</a></li>
				<li class="interwiki-tr"><a href="http://tr.wikipedia.org/wiki/Brainfuck">Türkçe</a></li>
				<li class="interwiki-uk"><a href="http://uk.wikipedia.org/wiki/Brainfuck">Українська</a></li>
				<li class="interwiki-zh"><a href="http://zh.wikipedia.org/wiki/Brainfuck">中文</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 26 March 2009, at 10:46.</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv217 in 0.050 secs. --></body></html>
