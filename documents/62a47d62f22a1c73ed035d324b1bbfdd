<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Bitap algorithm,Articles with unsourced statements since April 2009,Agrep,Big O notation,Bitmask,Bitwise operation,C (programming language),Communications of the ACM,Fuzzy string searching,Gaston Gonnet,Gene Myers" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Bitap_algorithm&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Bitap_algorithm&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Bitap algorithm - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Bitap_algorithm";
		var wgTitle = "Bitap algorithm";
		var wgAction = "view";
		var wgArticleId = "2242223";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 285334240;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
<style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-c .de1, .source-c .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-c  {}
.source-c .head {}
.source-c .foot {}
.source-c .imp {font-weight: bold; color: red;}
.source-c .ln-xtra {color: #cc0; background-color: #ffc;}
.source-c li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-c li.li2 {font-weight: bold;}
.source-c .kw1 {color: #b1b100;}
.source-c .kw2 {color: #000000; font-weight: bold;}
.source-c .kw3 {color: #000066;}
.source-c .kw4 {color: #993333;}
.source-c .co1 {color: #808080; font-style: italic;}
.source-c .co2 {color: #339933;}
.source-c .coMULTI {color: #808080; font-style: italic;}
.source-c .es0 {color: #000099; font-weight: bold;}
.source-c .br0 {color: #66cc66;}
.source-c .st0 {color: #ff0000;}
.source-c .nu0 {color: #cc66cc;}
.source-c .me1 {color: #202020;}
.source-c .me2 {color: #202020;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style>		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Bitap_algorithm skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Bitap algorithm</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<p>The <b>bitap algorithm</b> (also known as the <b>shift-or</b>, <b>shift-and</b> or <b>Baeza-Yates-Gonnet</b> algorithm) is a <a href="/wiki/Fuzzy_string_searching" title="Fuzzy string searching" class="mw-redirect">fuzzy string searching</a> algorithm. The algorithm tells whether a given text contains a substring which is "approximately equal" to a given pattern, where approximate equality is defined in terms of <a href="/wiki/Levenshtein_distance" title="Levenshtein distance">Levenshtein distance</a> — if the substring and pattern are within a given distance <i>k</i> of each other, then the algorithm considers them equal. The algorithm begins by precomputing a set of <a href="/wiki/Bitmask" title="Bitmask" class="mw-redirect">bitmasks</a> containing one bit for each element of the pattern. Then it is able to do most of the work with <a href="/wiki/Bitwise_operation" title="Bitwise operation">bitwise operations</a>, which are extremely fast.</p>
<p>The bitap algorithm is perhaps best known as one of the underlying algorithms of the <a href="/wiki/Unix" title="Unix">Unix</a> <a href="/wiki/Programming_tool" title="Programming tool">utility</a> <a href="/wiki/Agrep" title="Agrep">agrep</a>, written by <a href="/wiki/Udi_Manber" title="Udi Manber">Udi Manber</a>, <a href="/w/index.php?title=Sun_Wu_(computer_scientist)&amp;action=edit&amp;redlink=1" class="new" title="Sun Wu (computer scientist) (page does not exist)">Sun Wu</a>, and <a href="/w/index.php?title=Burra_Gopal&amp;action=edit&amp;redlink=1" class="new" title="Burra Gopal (page does not exist)">Burra Gopal</a>. Manber and Wu's original paper gives extensions of the algorithm to deal with fuzzy matching of general <a href="/wiki/Regular_expression" title="Regular expression">regular expressions</a>.</p>
<p>Due to the data structures required by the algorithm, it performs best on patterns less than a constant length (typically the <a href="/wiki/Word_length" title="Word length" class="mw-redirect">word length</a> of the machine in question), and also prefers inputs over a small alphabet. Once it has been implemented for a given alphabet and word length <i>m</i>, however, its <a href="/wiki/Running_time" title="Running time" class="mw-redirect">running time</a> is completely predictable — it runs in <a href="/wiki/Big_O_notation" title="Big O notation">O</a>(<i>mn</i>) operations, no matter the structure of the text or the pattern.</p>
<p>The bitap algorithm for exact string searching was invented by Balint Dömölki in 1964<span class="reference plainlinksneverexpand" id="ref_Domolki64"><sup><a href="http://en.wikipedia.org/wiki/Bitap_algorithm#endnote_Domolki64" class="external autonumber" title="http://en.wikipedia.org/wiki/Bitap_algorithm#endnote_Domolki64" rel="nofollow">[1]</a></sup></span> and extended by R. K. Shyamasundar in 1977,<span class="reference plainlinksneverexpand" id="ref_shyamasundar77"><sup><a href="http://en.wikipedia.org/wiki/Bitap_algorithm#endnote_shyamasundar77" class="external autonumber" title="http://en.wikipedia.org/wiki/Bitap_algorithm#endnote_shyamasundar77" rel="nofollow">[2]</a></sup></span> before being reinvented in the context of fuzzy string searching by <a href="/wiki/Udi_Manber" title="Udi Manber">Manber</a> and <a href="/w/index.php?title=Sun_Wu_(computer_scientist)&amp;action=edit&amp;redlink=1" class="new" title="Sun Wu (computer scientist) (page does not exist)">Wu</a> in 1991<span class="reference plainlinksneverexpand" id="ref_Manber91"><sup><a href="http://en.wikipedia.org/wiki/Bitap_algorithm#endnote_Manber91" class="external autonumber" title="http://en.wikipedia.org/wiki/Bitap_algorithm#endnote_Manber91" rel="nofollow">[3]</a></sup></span><span class="reference plainlinksneverexpand" id="ref_Manber92"><sup><a href="http://en.wikipedia.org/wiki/Bitap_algorithm#endnote_Manber92" class="external autonumber" title="http://en.wikipedia.org/wiki/Bitap_algorithm#endnote_Manber92" rel="nofollow">[4]</a></sup></span> based on work done by <a href="/wiki/Ricardo_Baeza-Yates" title="Ricardo Baeza-Yates">Ricardo Baeza-Yates</a> and <a href="/wiki/Gaston_Gonnet" title="Gaston Gonnet">Gaston Gonnet</a>.<span class="reference plainlinksneverexpand" id="ref_BYG89"><sup><a href="http://en.wikipedia.org/wiki/Bitap_algorithm#endnote_BYG89" class="external autonumber" title="http://en.wikipedia.org/wiki/Bitap_algorithm#endnote_BYG89" rel="nofollow">[5]</a></sup></span> The algorithm was improved by Baeza-Yates and <a href="/w/index.php?title=Gonzalo_Navarro&amp;action=edit&amp;redlink=1" class="new" title="Gonzalo Navarro (page does not exist)">Navarro</a> in 1996<sup class="noprint Template-Fact"><span title="This claim needs references to reliable sources&#160;since April 2009" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</span></sup> and later by <a href="/wiki/Gene_Myers" title="Gene Myers">Gene Myers</a> for long patterns in 1998.<sup class="noprint Template-Fact"><span title="This claim needs references to reliable sources&#160;since April 2009" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</span></sup></p>
<p><a name="Exact_searching" id="Exact_searching"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Bitap_algorithm&amp;action=edit&amp;section=1" title="Edit section: Exact searching">edit</a>]</span> <span class="mw-headline">Exact searching</span></h2>
<p>The bitap algorithm for exact <a href="/wiki/String_searching_algorithm" title="String searching algorithm">string searching</a>, in full generality, looks like this when implemented in <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a>:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
 <span class="co2">#include &lt;stdlib.h&gt;</span>
 <span class="co2">#include &lt;string.h&gt;</span>
 
 <span class="kw4">typedef</span> <span class="kw4">char</span> BIT; <span class="coMULTI">/* needs only to hold the values 0 and 1 */</span>
 
 <span class="kw4">const</span> <span class="kw4">char</span> *bitap_search<span class="br0">(</span><span class="kw4">const</span> <span class="kw4">char</span> *text, <span class="kw4">const</span> <span class="kw4">char</span> *pattern<span class="br0">)</span>
 <span class="br0">{</span>
     <span class="kw4">const</span> <span class="kw4">char</span> *result = <span class="kw2">NULL</span>;
     <span class="kw4">int</span> m = strlen<span class="br0">(</span>pattern<span class="br0">)</span>;
     BIT *R;
     <span class="kw4">int</span> i, k;
 
     <span class="kw1">if</span> <span class="br0">(</span>pattern<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span> == <span class="st0">'<span class="es0">\0</span>'</span><span class="br0">)</span> <span class="kw1">return</span> text;
 
     <span class="coMULTI">/* Initialize the bit array R */</span>
     R = malloc<span class="br0">(</span><span class="br0">(</span>m<span class="nu0">+1</span><span class="br0">)</span> * <span class="kw4">sizeof</span> *R<span class="br0">)</span>;
     R<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span> = <span class="nu0">1</span>;
     <span class="kw1">for</span> <span class="br0">(</span>k=<span class="nu0">1</span>; k &lt;= m; ++k<span class="br0">)</span>
       R<span class="br0">[</span>k<span class="br0">]</span> = <span class="nu0">0</span>;
 
     <span class="kw1">for</span> <span class="br0">(</span>i=<span class="nu0">0</span>; text<span class="br0">[</span>i<span class="br0">]</span> != <span class="st0">'<span class="es0">\0</span>'</span>; ++i<span class="br0">)</span> <span class="br0">{</span>
         <span class="coMULTI">/* Update the bit array. */</span>
         <span class="kw1">for</span> <span class="br0">(</span>k=m; k &gt;= <span class="nu0">1</span>; --k<span class="br0">)</span>
           R<span class="br0">[</span>k<span class="br0">]</span> = R<span class="br0">[</span>k<span class="nu0">-1</span><span class="br0">]</span> &amp;&amp; <span class="br0">(</span>text<span class="br0">[</span>i<span class="br0">]</span> == pattern<span class="br0">[</span>k<span class="nu0">-1</span><span class="br0">]</span><span class="br0">)</span>;
 
         <span class="kw1">if</span> <span class="br0">(</span>R<span class="br0">[</span>m<span class="br0">]</span><span class="br0">)</span> <span class="br0">{</span>
             result = <span class="br0">(</span>text+i - m<span class="br0">)</span> + <span class="nu0">1</span>;
             <span class="kw2">break</span>;
         <span class="br0">}</span>
     <span class="br0">}</span>
 
     free<span class="br0">(</span>R<span class="br0">)</span>;
     <span class="kw1">return</span> result;
 <span class="br0">}</span>
</pre></div>
<p>Bitap distinguishes itself from other well-known string searching algorithms in its natural mapping onto simple bitwise operations, as in the following modification of the above program. Notice that in this implementation, counterintuitively, each bit with value&#160;zero indicates a match, and each bit with value&#160;1 indicates a non-match. The same algorithm can be written with the intuitive semantics for 0 and 1, but in that case we must introduce another instruction into the <a href="/wiki/Inner_loop" title="Inner loop">inner loop</a> to set <code>R |= 1</code>. In this implementation, we take advantage of the fact that left-shifting a value shifts in zeros on the right, which is precisely the behavior we need.</p>
<p>Notice also that we require <code>CHAR_MAX</code> additional bitmasks in order to convert the <code>(text[i] == pattern[k-1])</code> condition in the general implementation into bitwise operations. Therefore, the bitap algorithm performs better when applied to inputs over smaller alphabets.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
 <span class="co2">#include &lt;string.h&gt;</span>
 <span class="co2">#include &lt;limits.h&gt;</span>
 
 <span class="kw4">const</span> <span class="kw4">char</span> *bitap_bitwise_search<span class="br0">(</span><span class="kw4">const</span> <span class="kw4">char</span> *text, <span class="kw4">const</span> <span class="kw4">char</span> *pattern<span class="br0">)</span>
 <span class="br0">{</span>
     <span class="kw4">int</span> m = strlen<span class="br0">(</span>pattern<span class="br0">)</span>;
     <span class="kw4">unsigned</span> <span class="kw4">long</span> R;
     <span class="kw4">unsigned</span> <span class="kw4">long</span> pattern_mask<span class="br0">[</span>CHAR_MAX<span class="nu0">+1</span><span class="br0">]</span>;
     <span class="kw4">int</span> i;
 
     <span class="kw1">if</span> <span class="br0">(</span>pattern<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span> == <span class="st0">'<span class="es0">\0</span>'</span><span class="br0">)</span> <span class="kw1">return</span> text;
     <span class="kw1">if</span> <span class="br0">(</span>m &gt; <span class="nu0">31</span><span class="br0">)</span> <span class="kw1">return</span> <span class="st0">"The pattern is too long!"</span>;
 
     <span class="coMULTI">/* Initialize the bit array R */</span>
     R = ~<span class="nu0">1</span>;
 
     <span class="coMULTI">/* Initialize the pattern bitmasks */</span>
     <span class="kw1">for</span> <span class="br0">(</span>i=<span class="nu0">0</span>; i &lt;= CHAR_MAX; ++i<span class="br0">)</span>
       pattern_mask<span class="br0">[</span>i<span class="br0">]</span> = ~<span class="nu0">0</span>;
     <span class="kw1">for</span> <span class="br0">(</span>i=<span class="nu0">0</span>; i &lt; m; ++i<span class="br0">)</span>
       pattern_mask<span class="br0">[</span>pattern<span class="br0">[</span>i<span class="br0">]</span><span class="br0">]</span> &amp;= ~<span class="br0">(</span>1UL &lt;&lt; i<span class="br0">)</span>;
 
     <span class="kw1">for</span> <span class="br0">(</span>i=<span class="nu0">0</span>; text<span class="br0">[</span>i<span class="br0">]</span> != <span class="st0">'<span class="es0">\0</span>'</span>; ++i<span class="br0">)</span> <span class="br0">{</span>
         <span class="coMULTI">/* Update the bit array */</span>
         R |= pattern_mask<span class="br0">[</span>text<span class="br0">[</span>i<span class="br0">]</span><span class="br0">]</span>;
         R &lt;&lt;= <span class="nu0">1</span>;
 
         <span class="kw1">if</span> <span class="br0">(</span><span class="nu0">0</span> == <span class="br0">(</span>R &amp; <span class="br0">(</span>1UL &lt;&lt; m<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>
           <span class="kw1">return</span> <span class="br0">(</span>text+i - m<span class="br0">)</span> + <span class="nu0">1</span>;
     <span class="br0">}</span>
 
     <span class="kw1">return</span> <span class="kw2">NULL</span>;
 <span class="br0">}</span>
</pre></div>
<p><a name="Fuzzy_searching" id="Fuzzy_searching"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Bitap_algorithm&amp;action=edit&amp;section=2" title="Edit section: Fuzzy searching">edit</a>]</span> <span class="mw-headline">Fuzzy searching</span></h2>
<p>To perform fuzzy string searching using the bitap algorithm, it is necessary to extend the bit array <i>R</i> into a second dimension. Instead of having a single array <i>R</i> that changes over the length of the text, we now have <i>k</i> distinct arrays <i>R</i><sub>1..<i>k</i></sub>. Array <i>R<sub>i</sub></i> holds a representation of the prefixes of <i>pattern</i> that match any suffix of the current string with <i>i</i> or fewer errors. In this context, an "error" may be an insertion, deletion, or substitution; see <a href="/wiki/Levenshtein_distance" title="Levenshtein distance">Levenshtein distance</a> for more information on these operations.</p>
<p>The implementation below performs fuzzy matching (returning the first match with up to <i>k</i> errors) using the fuzzy bitap algorithm. However, it only pays attention to substitutions, not to insertions or deletions. As before, the semantics of 0 and 1 are reversed from their intuitive meanings.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
 <span class="co2">#include &lt;stdlib.h&gt;</span>
 <span class="co2">#include &lt;string.h&gt;</span>
 <span class="co2">#include &lt;limits.h&gt;</span>
 
 <span class="kw4">const</span> <span class="kw4">char</span> *bitap_fuzzy_bitwise_search<span class="br0">(</span><span class="kw4">const</span> <span class="kw4">char</span> *text, <span class="kw4">const</span> <span class="kw4">char</span> *pattern, <span class="kw4">int</span> k<span class="br0">)</span>
 <span class="br0">{</span>
     <span class="kw4">const</span> <span class="kw4">char</span> *result = <span class="kw2">NULL</span>;
     <span class="kw4">int</span> m = strlen<span class="br0">(</span>pattern<span class="br0">)</span>;
     <span class="kw4">unsigned</span> <span class="kw4">long</span> *R;
     <span class="kw4">unsigned</span> <span class="kw4">long</span> pattern_mask<span class="br0">[</span>CHAR_MAX<span class="nu0">+1</span><span class="br0">]</span>;
     <span class="kw4">int</span> i, d;
 
     <span class="kw1">if</span> <span class="br0">(</span>pattern<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span> == <span class="st0">'<span class="es0">\0</span>'</span><span class="br0">)</span> <span class="kw1">return</span> text;
     <span class="kw1">if</span> <span class="br0">(</span>m &gt; <span class="nu0">31</span><span class="br0">)</span> <span class="kw1">return</span> <span class="st0">"The pattern is too long!"</span>;
 
     <span class="coMULTI">/* Initialize the bit array R */</span>
     R = malloc<span class="br0">(</span><span class="br0">(</span>k<span class="nu0">+1</span><span class="br0">)</span> * <span class="kw4">sizeof</span> *R<span class="br0">)</span>;
     <span class="kw1">for</span> <span class="br0">(</span>i=<span class="nu0">0</span>; i &lt;= k; ++i<span class="br0">)</span>
         R<span class="br0">[</span>i<span class="br0">]</span> = ~<span class="nu0">1</span>;
 
     <span class="coMULTI">/* Initialize the pattern bitmasks */</span>
     <span class="kw1">for</span> <span class="br0">(</span>i=<span class="nu0">0</span>; i &lt;= CHAR_MAX; ++i<span class="br0">)</span>
         pattern_mask<span class="br0">[</span>i<span class="br0">]</span> = ~<span class="nu0">0</span>;
     <span class="kw1">for</span> <span class="br0">(</span>i=<span class="nu0">0</span>; i &lt; m; ++i<span class="br0">)</span>
         pattern_mask<span class="br0">[</span>pattern<span class="br0">[</span>i<span class="br0">]</span><span class="br0">]</span> &amp;= ~<span class="br0">(</span>1UL &lt;&lt; i<span class="br0">)</span>;
 
     <span class="kw1">for</span> <span class="br0">(</span>i=<span class="nu0">0</span>; text<span class="br0">[</span>i<span class="br0">]</span> != <span class="st0">'<span class="es0">\0</span>'</span>; ++i<span class="br0">)</span> <span class="br0">{</span>
         <span class="coMULTI">/* Update the bit arrays */</span>
         <span class="kw4">unsigned</span> <span class="kw4">long</span> old_Rd1 = R<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span>;
 
         R<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span> |= pattern_mask<span class="br0">[</span>text<span class="br0">[</span>i<span class="br0">]</span><span class="br0">]</span>;
         R<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span> &lt;&lt;= <span class="nu0">1</span>;
 
         <span class="kw1">for</span> <span class="br0">(</span>d=<span class="nu0">1</span>; d &lt;= k; ++d<span class="br0">)</span> <span class="br0">{</span>
             <span class="kw4">unsigned</span> <span class="kw4">long</span> tmp = R<span class="br0">[</span>d<span class="br0">]</span>;
             <span class="coMULTI">/* Substitution is all we care about */</span>
             R<span class="br0">[</span>d<span class="br0">]</span> = <span class="br0">(</span>old_Rd1 &amp; <span class="br0">(</span>R<span class="br0">[</span>d<span class="br0">]</span> | pattern_mask<span class="br0">[</span>text<span class="br0">[</span>i<span class="br0">]</span><span class="br0">]</span><span class="br0">)</span><span class="br0">)</span> &lt;&lt; <span class="nu0">1</span>;
             old_Rd1 = tmp;
         <span class="br0">}</span>
 
         <span class="kw1">if</span> <span class="br0">(</span><span class="nu0">0</span> == <span class="br0">(</span>R<span class="br0">[</span>k<span class="br0">]</span> &amp; <span class="br0">(</span>1UL &lt;&lt; m<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span> <span class="br0">{</span>
             result = <span class="br0">(</span>text+i - m<span class="br0">)</span> + <span class="nu0">1</span>;
             <span class="kw2">break</span>;
         <span class="br0">}</span>
     <span class="br0">}</span>
 
     <span class="kw1">return</span> result;
 <span class="br0">}</span>
</pre></div>
<p><a name="External_links_and_references" id="External_links_and_references"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Bitap_algorithm&amp;action=edit&amp;section=3" title="Edit section: External links and references">edit</a>]</span> <span class="mw-headline">External links and references</span></h2>
<ol>
<li><cite id="endnote_Domolki64" style="font-style: normal;"><a href="#ref_Domolki64" title=""><b>^</b></a></cite>&#160; Balint Dömölki, An algorithm for syntactical analysis, Computational Linguistics 3, Hungarian Academy of Science pp. 29–46, 1964.</li>
<li><cite id="endnote_shyamasundar77" style="font-style: normal;"><a href="#ref_shyamasundar77" title=""><b>^</b></a></cite>&#160; R. K. Shyamasundar, Precedence parsing using Dömölki's algorithm, International Journal of Computer Mathematics, 6(2)pp 105–114, 1977</li>
<li><cite id="endnote_Manber91" style="font-style: normal;"><a href="#ref_Manber91" title=""><b>^</b></a></cite>&#160; Udi Manber, Sun Wu. "Fast text searching with errors." Technical Report TR-91-11. Department of Computer Science, <a href="/wiki/University_of_Arizona" title="University of Arizona">University of Arizona</a>, Tucson, June 1991. (<a href="ftp://ftp.cs.arizona.edu/agrep/agrep.ps.1.Z" class="external text" title="ftp://ftp.cs.arizona.edu/agrep/agrep.ps.1.Z" rel="nofollow">gzipped PostScript</a>)</li>
<li><cite id="endnote_Manber92" style="font-style: normal;"><a href="#ref_Manber92" title=""><b>^</b></a></cite>&#160; Udi Manber, Sun Wu. "Fast text search allowing errors." <i><a href="/wiki/Communications_of_the_ACM" title="Communications of the ACM">Communications of the ACM</a></i>, 35(10): pp. 83–91, October 1992.</li>
<li><cite id="endnote_BYG89" style="font-style: normal;"><a href="#ref_BYG89" title=""><b>^</b></a></cite>&#160; Ricardo A. Baeza-Yates, Gastón H. Gonnet. "A New Approach to Text Searching." <i>Communications of the ACM</i>, 35(10): pp. 74–82, October 1992.</li>
<li><cite id="endnote_BN96" style="font-style: normal;"><a href="#ref_BN96" title=""><b>^</b></a></cite>&#160; R. Baeza-Yates and G. Navarro. A faster algorithm for approximate string matching. In Dan Hirchsberg and Gene Myers, editors, <i>Combinatorial Pattern Matching</i> (CPM'96), LNCS 1075, pages 1–23, Irvine, CA, June 1996.</li>
<li><cite id="endnote_M99" style="font-style: normal;"><a href="#ref_M99" title=""><b>^</b></a></cite>&#160; G. Myers. "A fast bit-vector algorithm for approximate string matching based on dynamic programming." <i>Journal of the ACM</i> 46 (3), May 1999, 395–415.</li>
<li><a href="http://www.rational.co.za/libbitap/" class="external text" title="http://www.rational.co.za/libbitap/" rel="nofollow">Libbitap</a>, a free implementation that shows how the algorithm can easily be extended for most regular expressions. Unlike the code above, it places no limit on the pattern length.</li>
<li>Baeza-Yates. <i>Modern Information Retrieval</i>. <a href="/wiki/Special:BookSources/020139829X" class="internal">ISBN 0-201-39829-X</a>.</li>
</ol>


<!-- 
NewPP limit report
Preprocessor node count: 269/1000000
Post-expand include size: 4346/2048000 bytes
Template argument size: 936/2048000 bytes
Expensive parser function count: 2/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:2242223-0!1!0!default!!en!2 and timestamp 20090421225609 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Bitap_algorithm">http://en.wikipedia.org/wiki/Bitap_algorithm</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Algorithms_on_strings" title="Category:Algorithms on strings">Algorithms on strings</a></span> | <span dir='ltr'><a href="/wiki/Category:Search_algorithms" title="Category:Search algorithms">Search algorithms</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_example_C_code" title="Category:Articles with example C code">Articles with example C code</a></span></div><div id="mw-hidden-catlinks" class="mw-hidden-cats-hidden">Hidden categories:&#32;<span dir='ltr'><a href="/wiki/Category:All_articles_with_unsourced_statements" title="Category:All articles with unsourced statements">All articles with unsourced statements</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_unsourced_statements_since_April_2009" title="Category:Articles with unsourced statements since April 2009">Articles with unsourced statements since April 2009</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Bitap_algorithm" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Bitap_algorithm" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Bitap_algorithm&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Bitap_algorithm&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Bitap_algorithm" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Bitap_algorithm" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Bitap_algorithm" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Bitap_algorithm&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Bitap_algorithm&amp;oldid=285334240" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Bitap_algorithm&amp;id=285334240">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/Baeza-Yates-Gonnet-Algorithmus">Deutsch</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 21 April 2009, at 22:56 (UTC).</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv200 in 0.051 secs. --></body></html>
