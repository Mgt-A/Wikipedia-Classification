<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Type inference,2005,Ada (programming language),Benjamin C. Pierce,BitC,Boo (programming language),C++0x,C (programming language),C Sharp (programming language),Cast (computer science),Cayenne (programming language)" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Type_inference&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Type_inference&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Type inference - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Type_inference";
		var wgTitle = "Type inference";
		var wgAction = "view";
		var wgArticleId = "279690";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 283371743;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
<style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-c .de1, .source-c .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-c  {}
.source-c .head {}
.source-c .foot {}
.source-c .imp {font-weight: bold; color: red;}
.source-c .ln-xtra {color: #cc0; background-color: #ffc;}
.source-c li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-c li.li2 {font-weight: bold;}
.source-c .kw1 {color: #b1b100;}
.source-c .kw2 {color: #000000; font-weight: bold;}
.source-c .kw3 {color: #000066;}
.source-c .kw4 {color: #993333;}
.source-c .co1 {color: #808080; font-style: italic;}
.source-c .co2 {color: #339933;}
.source-c .coMULTI {color: #808080; font-style: italic;}
.source-c .es0 {color: #000099; font-weight: bold;}
.source-c .br0 {color: #66cc66;}
.source-c .st0 {color: #ff0000;}
.source-c .nu0 {color: #cc66cc;}
.source-c .me1 {color: #202020;}
.source-c .me2 {color: #202020;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style>		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Type_inference skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Type inference</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<p><b>Type inference</b>, or <b>implicit typing</b>, refers to the ability to deduce automatically the type of a value in a <a href="/wiki/Programming_language" title="Programming language">programming language</a>. It is a feature present in some <a href="/wiki/Strongly-typed_programming_language" title="Strongly-typed programming language">strongly</a> <a href="/wiki/Static_typing#Static_and_dynamic_typing" title="Static typing" class="mw-redirect">statically typed</a> languages. It is often characteristic of — but not limited to — <a href="/wiki/Functional_programming_language" title="Functional programming language" class="mw-redirect">functional programming languages</a> in general. Some languages that include type inference are: <a href="/wiki/Ada_(programming_language)" title="Ada (programming language)">Ada</a>, <a href="/wiki/BitC" title="BitC">BitC</a>, <a href="/wiki/Boo_(programming_language)" title="Boo (programming language)">Boo</a>, <a href="/wiki/C_Sharp_(programming_language)#C.23_3.0_new_language_features" title="C Sharp (programming language)">C# 3.0</a>, <a href="/wiki/Cayenne_(programming_language)" title="Cayenne (programming language)">Cayenne</a>, <a href="/wiki/Clean_(programming_language)" title="Clean (programming language)">Clean</a>, <a href="/wiki/Cobra_(programming_language_from_Cobra_Language_LLC)" title="Cobra (programming language from Cobra Language LLC)">Cobra</a>, <a href="/wiki/D_(programming_language)" title="D (programming language)">D</a>, <a href="/wiki/Epigram_(programming_language)" title="Epigram (programming language)">Epigram</a>, <a href="/wiki/F_Sharp_(programming_language)" title="F Sharp (programming language)">F#</a>, <a href="/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell</a>, <a href="/wiki/ML_(programming_language)" title="ML (programming language)">ML</a>, <a href="/wiki/Nemerle" title="Nemerle">Nemerle</a>, <a href="/wiki/OCaml" title="OCaml" class="mw-redirect">OCaml</a>, <a href="/wiki/Oxygene_(programming_language)" title="Oxygene (programming language)">Oxygene</a>, <a href="/wiki/Scala_(programming_language)" title="Scala (programming language)">Scala</a>, and <a href="/wiki/Visual_Basic_.NET#Visual_Basic_2008_.28VB_9.0.29" title="Visual Basic .NET">Visual Basic .NET 9.0</a>. This feature is planned for <a href="/wiki/Fortress_(programming_language)" title="Fortress (programming language)">Fortress</a>, <a href="/wiki/C%2B%2B0x" title="C++0x">C++0x</a> and <a href="/wiki/Perl_6" title="Perl 6">Perl 6</a>. The ability to infer types automatically makes many programming tasks easier, leaving the programmer free to omit <a href="/wiki/Type_signature" title="Type signature">type annotations</a> while maintaining some level of type safety. Explicitly converting to another data type is called "<a href="/wiki/Cast_(computer_science)" title="Cast (computer science)" class="mw-redirect">casting</a>" (or a "<a href="/wiki/Cast_(computer_science)" title="Cast (computer science)" class="mw-redirect">cast</a>").</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Nontechnical_explanation"><span class="tocnumber">1</span> <span class="toctext">Nontechnical explanation</span></a></li>
<li class="toclevel-1"><a href="#Technical_description"><span class="tocnumber">2</span> <span class="toctext">Technical description</span></a></li>
<li class="toclevel-1"><a href="#Example"><span class="tocnumber">3</span> <span class="toctext">Example</span></a></li>
<li class="toclevel-1"><a href="#Hindley.E2.80.93Milner_type_inference_algorithm"><span class="tocnumber">4</span> <span class="toctext">Hindley–Milner type inference algorithm</span></a>
<ul>
<li class="toclevel-2"><a href="#The_algorithm"><span class="tocnumber">4.1</span> <span class="toctext">The algorithm</span></a>
<ul>
<li class="toclevel-3"><a href="#Generating_the_equations"><span class="tocnumber">4.1.1</span> <span class="toctext">Generating the equations</span></a></li>
<li class="toclevel-3"><a href="#Solving_the_equations"><span class="tocnumber">4.1.2</span> <span class="toctext">Solving the equations</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">5</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">6</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">7</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Nontechnical_explanation" id="Nontechnical_explanation"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Type_inference&amp;action=edit&amp;section=1" title="Edit section: Nontechnical explanation">edit</a>]</span> <span class="mw-headline">Nontechnical explanation</span></h2>
<p>In most programming languages, all values have a <a href="/wiki/Data_type" title="Data type">type</a> which describes the kind of data a particular value describes. In some languages, the type is known only at <a href="/wiki/Runtime" title="Runtime">runtime</a>; these languages are <a href="/wiki/Dynamically_typed" title="Dynamically typed" class="mw-redirect">dynamically typed</a>. In other languages, the type is known at <a href="/wiki/Compile_time" title="Compile time">compile time</a>; these languages are <a href="/wiki/Statically_typed" title="Statically typed" class="mw-redirect">statically typed</a>. In statically typed languages, the input and output types of functions and <a href="/wiki/Local_variable" title="Local variable">local variables</a> ordinarily must be explicitly provided by type annotations. For example, in <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a>:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">int</span> addone<span class="br0">(</span><span class="kw4">int</span> x<span class="br0">)</span> <span class="br0">{</span>
    <span class="kw4">int</span> result; <span class="coMULTI">/*declare integer result (C language)*/</span>
 
    result = x<span class="nu0">+1</span>;
    <span class="kw1">return</span> result;
<span class="br0">}</span>
</pre></div>
<p>The beginning of this function definition, <code>int addone(int x)</code> declares that <code>addone</code> is a function which takes one argument, an <a href="/wiki/Integer_(computer_science)" title="Integer (computer science)">integer</a>, and returns an integer. <code>int result;</code> declares that the local variable <code>result</code> is an integer. In a proposed language where type inference is available, the code might be written like this instead:</p>
<pre>
addone(x) {
    val result;  /*inferred-type result */
    val result2; /*inferred-type result #2 */

    result = x+1;
    result2 = x+1.0;  /* this line won't work (in the proposed language) */
    return result;
}
</pre>
<p>This looks very similar to how code is written in a dynamically typed language, yet all types are known at compile time. In the imaginary language in which the last example is written, <code>+</code> always takes two integers and returns one integer (which is how it works in, for example, <a href="/wiki/OCaml" title="OCaml" class="mw-redirect">OCaml</a>). From this, the type inferencer can infer that the value of <code>x+1</code> is an integer, therefore <code>result</code> is an integer, therefore the return value of <code>addone</code> is an integer. Similarly, since <code>+</code> requires that both of its arguments be integers, <code>x</code> must be an integer, and therefore <code>addone</code> accepts one integer as an argument.</p>
<p>However, in the subsequent line, <i>result2</i> is calculated by adding a decimal "<code>1.0</code>" with floating-point arithmetic, causing a conflict in the use of <code>x</code> for both integer and floating-point expressions. Such a situation would generate a compile-time error message. In older languages, <i>result2</i> might have been implicitly declared as a floating-point variable, from implicitly converting integer <code>x</code> in the expression, simply because a decimal point was accidentally placed after the integer 1. Such a situation shows the difference between <i>type inference</i>, which does not involve type conversion, and <i><a href="/wiki/Implicit_type_conversion" title="Implicit type conversion" class="mw-redirect">implicit type conversion</a></i>, which forces data to the higher-precision data type, often without restrictions.</p>
<p><a name="Technical_description" id="Technical_description"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Type_inference&amp;action=edit&amp;section=2" title="Edit section: Technical description">edit</a>]</span> <span class="mw-headline">Technical description</span></h2>
<p>Type inference refers to the ability to deduce automatically, either partially or fully, the type of a value derived from the eventual evaluation of an expression. As this process is systematically performed at compile time, the compiler is often able to infer the type of a variable or the <a href="/wiki/Type_signature" title="Type signature">type signature</a> of a function, without explicit type annotations having been given. In many cases, it is possible to omit type annotations from a program completely if the type inference system is robust enough, or the program or language simple enough.</p>
<p>To obtain the information required to infer correctly the type of an expression lacking an explicit type annotation, the compiler either gathers this information as an aggregate and subsequent reduction of the type annotations given for its subexpressions (which may themselves be variables or functions), or through an implicit understanding of the type of various atomic values (e.g., ()&#160;: <a href="/wiki/Unit_type" title="Unit type">Unit</a>; true&#160;: Bool; 42&#160;: Integer; 3.14159&#160;: Real; etc.). It is through recognition of the eventual reduction of expressions to implicitly typed atomic values that the compiler for a type inferring language is able to compile a program completely without type annotations. In the case of highly complex forms of <a href="/wiki/Higher_order_programming" title="Higher order programming">higher order programming</a> and <a href="/wiki/Polymorphism_(computer_science)" title="Polymorphism (computer science)" class="mw-redirect">polymorphism</a>, it is not always possible for the compiler to infer as much, however, and type annotations are occasionally necessary for disambiguation.</p>
<p><a name="Example" id="Example"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Type_inference&amp;action=edit&amp;section=3" title="Edit section: Example">edit</a>]</span> <span class="mw-headline">Example</span></h2>
<p>For example, let us consider the <a href="/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell</a> function <code>map</code>, which applies a procedure to each element of a list, and may be defined as:</p>
<pre>
map f [] = []
map f (first:rest) = f first : map f rest
</pre>
<p>From this, it is evident that the function <code>map</code> takes a list as its second argument, that its first argument <code>f</code> is a function that can be applied to the type of elements of that list, and that the result of <code>map</code> is constructed as a list with elements that are results of <code>f</code>. So assuming that a list contains elements of the same type, we can reliably construct a type signature</p>
<pre>
map :: (a -&gt; b) -&gt; [a] -&gt; [b]
</pre>
<p>where the syntax "<code>a -&gt; b</code>" denotes a function that takes an <code>a</code> as its parameter and produces a <code>b</code>. "<code>a -&gt; b -&gt; c</code>" is equivalent to "<code>a -&gt; (b -&gt; c)</code>".</p>
<p>Note that the inferred type of <code>map</code> is <a href="/wiki/Type_polymorphism" title="Type polymorphism">parametrically polymorphic</a>: The type of the arguments and results of <code>f</code> are not inferred, but left as type variables, and so <code>map</code> can be applied to functions and lists of various types, as long as the actual types match in each invocation.</p>
<p><a name="Hindley.E2.80.93Milner_type_inference_algorithm" id="Hindley.E2.80.93Milner_type_inference_algorithm"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Type_inference&amp;action=edit&amp;section=4" title="Edit section: Hindley–Milner type inference algorithm">edit</a>]</span> <span class="mw-headline">Hindley–Milner type inference algorithm</span></h2>
<p>The common algorithm used to perform type inference is the one now commonly referred to as Hindley–Milner, Damas–Milner algorithm. It has been referred to in the past as polymorphic type checking or Algorithm W.</p>
<p>The origin of this algorithm is the type inference algorithm for the <a href="/wiki/Simply_typed_lambda_calculus" title="Simply typed lambda calculus">simply typed lambda calculus</a>, which was devised by <a href="/wiki/Haskell_B._Curry" title="Haskell B. Curry" class="mw-redirect">Haskell B. Curry</a> and <a href="/wiki/Robert_Feys" title="Robert Feys">Robert Feys</a> in 1958. In 1969 <a href="/w/index.php?title=Roger_Hindley&amp;action=edit&amp;redlink=1" class="new" title="Roger Hindley (page does not exist)">Roger Hindley</a> extended this work and proved that their algorithm always inferred the most general type. In 1978 <a href="/wiki/Robin_Milner" title="Robin Milner">Robin Milner</a> <sup id="cite_ref-0" class="reference"><a href="#cite_note-0" title=""><span>[</span>1<span>]</span></a></sup>, independently of Hindley's work, provided an equivalent algorithm, Algorithm W. In 1982 <a href="/w/index.php?title=Luis_Damas&amp;action=edit&amp;redlink=1" class="new" title="Luis Damas (page does not exist)">Luis Damas</a> <sup id="cite_ref-1" class="reference"><a href="#cite_note-1" title=""><span>[</span>2<span>]</span></a></sup> finally proved that Milner's algorithm is complete and extended it to support systems with polymorphic references.</p>
<p><a name="The_algorithm" id="The_algorithm"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Type_inference&amp;action=edit&amp;section=5" title="Edit section: The algorithm">edit</a>]</span> <span class="mw-headline">The algorithm</span></h3>
<p>The algorithm proceeds in two steps. First, we need to generate a number of equations to solve, then we need to solve them.</p>
<p><a name="Generating_the_equations" id="Generating_the_equations"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Type_inference&amp;action=edit&amp;section=6" title="Edit section: Generating the equations">edit</a>]</span> <span class="mw-headline">Generating the equations</span></h4>
<p>The algorithm used for generating the equations is similar to a regular type checker, so let's consider first a regular type checker for the <a href="/wiki/Typed_lambda_calculus" title="Typed lambda calculus">typed lambda calculus</a> given by</p>
<p><img class="tex" alt="e \,&#160;::= E \mid v \mid (\lambda v:\tau. e) \mid (e\, e)" src="http://upload.wikimedia.org/math/0/6/5/06588b1616740dcf44b36417bdeb940b.png" /></p>
<p>and</p>
<p><img class="tex" alt="\tau \,&#160;::= T \mid \tau \to \tau " src="http://upload.wikimedia.org/math/c/b/c/cbc62a053c3d73eb4c14c6431f2c2fbb.png" /></p>
<p>where <span class="texhtml"><i>E</i></span> is a primitive expression (such as "3") and <span class="texhtml"><i>T</i></span> is a primitive type (such as "Integer").</p>
<p>We want to construct a function <span class="texhtml"><i>f</i></span> which maps a pair <span class="texhtml">(ε,<i>t</i>)</span>, where <span class="texhtml">ε</span> is a type environment and <span class="texhtml"><i>t</i></span> is a term, to some type <span class="texhtml">τ</span>. We assume that this function is already defined on primitives. The other cases are:</p>
<ul>
<li><span class="texhtml"><i>f</i>(ε,<i>v</i>) = τ</span> where <span class="texhtml">(<i>v</i>,τ)</span> is in <span class="texhtml">ε</span></li>
<li><img class="tex" alt="f(\epsilon, g\, e) = \tau" src="http://upload.wikimedia.org/math/c/f/d/cfd7374b36967d5af03e9538a44b9626.png" /> where <img class="tex" alt="f(\epsilon, g) = \tau_1 \to \tau" src="http://upload.wikimedia.org/math/d/e/5/de565f1d9286e64a8d074a1dc568c0ce.png" /> and <span class="texhtml"><i>f</i>(ε,<i>e</i>) = τ<sub>1</sub></span></li>
<li><img class="tex" alt="f(\epsilon, \lambda v:\tau. e) = \tau \to f(\epsilon_1, e)" src="http://upload.wikimedia.org/math/b/c/d/bcd112386e9e82bcbf5901965736775f.png" /> where <img class="tex" alt="\epsilon_1 = \epsilon \cup (v, \tau)" src="http://upload.wikimedia.org/math/5/9/9/5999941d5e2f7b0e283dddb2a8eeecfb.png" /></li>
</ul>
<p>Note that so far we do not specify what to do when we fail to meet the various conditions. This is because, in the simple type <i>checking</i> algorithm, the check simply fails whenever anything goes wrong.</p>
<p>Now, we develop a more sophisticated algorithm that can deal with type variables and constraints on them. Therefore, we extend the set T of primitive types to include an infinite supply of variables, denoted by lowercase Greek letters <span class="texhtml">α,β,...</span></p>
<p>See <sup id="cite_ref-2" class="reference"><a href="#cite_note-2" title=""><span>[</span>3<span>]</span></a></sup> for more details.</p>
<p><a name="Solving_the_equations" id="Solving_the_equations"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Type_inference&amp;action=edit&amp;section=7" title="Edit section: Solving the equations">edit</a>]</span> <span class="mw-headline">Solving the equations</span></h4>
<p>Solving the equations proceeds by <a href="/wiki/Unification" title="Unification">unification</a>. This is—perhaps surprisingly—a rather simple algorithm. The function <span class="texhtml"><i>u</i></span> operates on type equations and returns a structure called a "substitution". A substitution is simply a mapping from type variables to types. Substitutions can be composed and extended in the obvious ways.</p>
<p>Unifying the empty set of equations is easy enough: <img class="tex" alt="u\, \emptyset = \mathbf{i}" src="http://upload.wikimedia.org/math/5/9/d/59dc5e9be153a21f77fee417c6feba28.png" />, where <img class="tex" alt="\mathbf{i}" src="http://upload.wikimedia.org/math/7/4/a/74ad63f438d840586656bc62be43b6be.png" /> is the identity substitution.</p>
<p>Unifying a variable with a type goes this way: <img class="tex" alt="u\, ([\alpha = T] \cup C) = u\, (C') \cdot (\alpha \mapsto T)" src="http://upload.wikimedia.org/math/e/3/4/e34da347a1ae0841e2602189dc0ba96b.png" />, where <img class="tex" alt="\cdot" src="http://upload.wikimedia.org/math/3/6/f/36f8ae4c86b69d52d037a6802d91cc4a.png" /> is the substitution composition operator, and <span class="texhtml"><i>C</i>'</span> is the set of remaining constraints <span class="texhtml"><i>C</i></span> with the new substitution <img class="tex" alt="\alpha \mapsto T" src="http://upload.wikimedia.org/math/6/8/9/6896a3aa195ebcc2f53844a99b64d325.png" /> applied to it.</p>
<p>Of course, <img class="tex" alt="u\, ([T = \alpha] \cup C) = u ([\alpha = T] \cup C)" src="http://upload.wikimedia.org/math/d/7/4/d74501f0284fa4327f2aeb4259544f14.png" />.</p>
<p>The interesting case remains as <img class="tex" alt="u\, ([S \to S' = T \to T']\cup C) = u \, (\{[S = T], [S' = T']\}\cup C)" src="http://upload.wikimedia.org/math/1/7/f/17f83c89a3aa39b10d0b5e816244a490.png" />.</p>
<p>A simple example would be a[i] = b[i] (assume this to be c-like syntax for this example). First Hindley-Milner would find that i must be of type int, further more that 'a' must be an "array of <span class="texhtml">α</span>" and 'b' must an "array of <span class="texhtml">β</span>". Now, since there is an assignment of <span class="texhtml">β</span> to <span class="texhtml">α</span>, <span class="texhtml">α</span> must be of the same type (assuming no implicit type conversions) as <span class="texhtml">β</span>. In the very least <span class="texhtml">α</span> must be a supertype of <span class="texhtml">β</span>.</p>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Type_inference&amp;action=edit&amp;section=8" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<div class="references-small">
<ol class="references">
<li id="cite_note-0"><b><a href="#cite_ref-0" title="">^</a></b> <cite style="font-style:normal" class="" id="CITEREFMilner1978">Milner, Robin (1978), "A Theory of Type Polymorphism in Programming", <i>Jcss</i> <b>17</b>: 348–375</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=A+Theory+of+Type+Polymorphism+in+Programming&amp;rft.jtitle=Jcss&amp;rft.aulast=Milner&amp;rft.aufirst=Robin&amp;rft.au=Milner%2C+Robin&amp;rft.date=1978&amp;rft.volume=17&amp;rft.pages=348%E2%80%93375&amp;rfr_id=info:sid/en.wikipedia.org:Type_inference"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-1"><b><a href="#cite_ref-1" title="">^</a></b> <cite style="font-style:normal" class="" id="CITEREFDamasMilner1982">Damas, Luis; Milner, Robin (1982), <a href="http://groups.csail.mit.edu/pag/6.883/readings/p207-damas.pdf" class="external text" title="http://groups.csail.mit.edu/pag/6.883/readings/p207-damas.pdf" rel="nofollow">"Principal type-schemes for functional programs"</a>, <i>POPL '82: Proceedings of the 9th ACM SIGPLAN-SIGACT symposium on Principles of programming languages</i>, ACM, pp.&#160;207--212<span class="printonly">, <a href="http://groups.csail.mit.edu/pag/6.883/readings/p207-damas.pdf" class="external free" title="http://groups.csail.mit.edu/pag/6.883/readings/p207-damas.pdf" rel="nofollow">http://groups.csail.mit.edu/pag/6.883/readings/p207-damas.pdf</a></span></cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Principal+type-schemes+for+functional+programs&amp;rft.atitle=POPL+%2782%3A+Proceedings+of+the+9th+ACM+SIGPLAN-SIGACT+symposium+on+Principles+of+programming+languages&amp;rft.aulast=Damas&amp;rft.aufirst=Luis&amp;rft.au=Damas%2C+Luis&amp;rft.au=Milner%2C+Robin&amp;rft.date=1982&amp;rft.pages=pp.%26nbsp%3B207--212&amp;rft.pub=ACM&amp;rft_id=http%3A%2F%2Fgroups.csail.mit.edu%2Fpag%2F6.883%2Freadings%2Fp207-damas.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Type_inference"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-2"><b><a href="#cite_ref-2" title="">^</a></b> <cite style="font-style:normal" class="book" id="CITEREF.5B.5BBenjamin_C._Pierce.7CPierce.2C_Benjamin_C..5D.5D2002"><a href="/wiki/Benjamin_C._Pierce" title="Benjamin C. Pierce">Pierce, Benjamin C.</a> (2002). "Chapter 22". <i>Types and Programming Languages</i>. MIT Press. <a href="/wiki/Special:BookSources/0262162091" class="internal">ISBN 0-262-16209-1</a>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Chapter+22&amp;rft.atitle=Types+and+Programming+Languages&amp;rft.aulast=%5B%5BBenjamin+C.+Pierce%7CPierce%2C+Benjamin+C.%5D%5D&amp;rft.au=%5B%5BBenjamin+C.+Pierce%7CPierce%2C+Benjamin+C.%5D%5D&amp;rft.date=2002&amp;rft.pub=MIT+Press&amp;rft.isbn=0-262-16209-1&amp;rfr_id=info:sid/en.wikipedia.org:Type_inference"><span style="display: none;">&#160;</span></span></li>
</ol>
</div>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Type_inference&amp;action=edit&amp;section=9" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<ul>
<li><a href="/wiki/Duck_typing" title="Duck typing">Duck typing</a>, an analogous concept in languages with dynamic or weak typing</li>
</ul>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Type_inference&amp;action=edit&amp;section=10" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<ul>
<li><a href="http://www.cis.upenn.edu/~bcpierce/types/archives/1988/msg00042.html" class="external text" title="http://www.cis.upenn.edu/~bcpierce/types/archives/1988/msg00042.html" rel="nofollow">Archived e-mail message</a> by Roger Hindley explaining the history of type inference</li>
<li><a href="http://web.archive.org/web/20050911123640/http://www.cs.berkeley.edu/~nikitab/courses/cs263/hm.html" class="external text" title="http://web.archive.org/web/20050911123640/http://www.cs.berkeley.edu/~nikitab/courses/cs263/hm.html" rel="nofollow">Implementation</a> of Hindley-Milner in Perl 5, by Nikita Borisov (via <a href="/wiki/Internet_Archive" title="Internet Archive">Internet Archive</a>, version <span class="mw-formatted-date" title="2005-09-11"><span class="mw-formatted-date" title="09-11"><a href="/wiki/Sep_11" title="Sep 11" class="mw-redirect">Sep 11</a></span>, <a href="/wiki/2005" title="2005">2005</a></span>)</li>
</ul>


<!-- 
NewPP limit report
Preprocessor node count: 1744/1000000
Post-expand include size: 11565/2048000 bytes
Template argument size: 3269/2048000 bytes
Expensive parser function count: 0/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:279690-0!1!0!default!!en!2 and timestamp 20090412155530 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Type_inference">http://en.wikipedia.org/wiki/Type_inference</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Type_theory" title="Category:Type theory">Type theory</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Type_inference" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Type_inference" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Type_inference&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Type_inference&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Type_inference" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Type_inference" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Type_inference" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Type_inference&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Type_inference&amp;oldid=283371743" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Type_inference&amp;id=283371743">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/Typinferenz">Deutsch</a></li>
				<li class="interwiki-es"><a href="http://es.wikipedia.org/wiki/Inferencia_de_tipos">Español</a></li>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Inf%C3%A9rence_de_types">Français</a></li>
				<li class="interwiki-nl"><a href="http://nl.wikipedia.org/wiki/Type-inferentie">Nederlands</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/%E5%9E%8B%E6%8E%A8%E8%AB%96">日本語</a></li>
				<li class="interwiki-ru"><a href="http://ru.wikipedia.org/wiki/%D0%92%D1%8B%D0%B2%D0%BE%D0%B4_%D1%82%D0%B8%D0%BF%D0%BE%D0%B2">Русский</a></li>
				<li class="interwiki-zh"><a href="http://zh.wikipedia.org/wiki/%E7%B1%BB%E5%9E%8B%E6%8E%A8%E8%AE%BA">中文</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 12 April 2009, at 15:12 (UTC).</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv206 in 0.045 secs. --></body></html>
