<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Serialization,.NET Framework,Abstract data type,Ajax (programming),Ambrai Smalltalk,Binary XML,Byte ordering,CORBA,CPAN,C standard library,ColdFusion" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Serialization&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Serialization&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Serialization - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Serialization";
		var wgTitle = "Serialization";
		var wgAction = "view";
		var wgArticleId = "28555";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 280993126;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
<style type="text/css">/*<![CDATA[*/
.source-vbnet {line-height: normal;}
.source-vbnet li, .source-vbnet pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for vbnet
 * CSS class: source-vbnet, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-vbnet .de1, .source-vbnet .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-vbnet  {}
.source-vbnet .head {}
.source-vbnet .foot {}
.source-vbnet .imp {font-weight: bold; color: red;}
.source-vbnet .ln-xtra {color: #cc0; background-color: #ffc;}
.source-vbnet li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-vbnet li.li2 {font-weight: bold;}
.source-vbnet .kw1 {color: #0600FF;}
.source-vbnet .kw2 {color: #FF8000;}
.source-vbnet .kw3 {color: #008000;}
.source-vbnet .kw4 {color: #FF0000;}
.source-vbnet .kw5 {color: #804040;}
.source-vbnet .kw6 {color: #0600FF;}
.source-vbnet .kw7 {color: #0600FF;}
.source-vbnet .kw8 {color: #0600FF;}
.source-vbnet .co1 {color: #008080; font-style: italic;}
.source-vbnet .coMULTI {color: #008080; font-style: italic;}
.source-vbnet .es0 {color: #008080; font-weight: bold;}
.source-vbnet .br0 {color: #008000;}
.source-vbnet .st0 {color: #808080;}
.source-vbnet .nu0 {color: #FF0000;}
.source-vbnet .me1 {color: #0000FF;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-csharp {line-height: normal;}
.source-csharp li, .source-csharp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for csharp
 * CSS class: source-csharp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-csharp .de1, .source-csharp .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-csharp  {}
.source-csharp .head {}
.source-csharp .foot {}
.source-csharp .imp {font-weight: bold; color: red;}
.source-csharp .ln-xtra {color: #cc0; background-color: #ffc;}
.source-csharp li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-csharp li.li2 {font-weight: bold;}
.source-csharp .kw1 {color: #0600FF;}
.source-csharp .kw2 {color: #FF8000; font-weight: bold;}
.source-csharp .kw3 {color: #008000;}
.source-csharp .kw4 {color: #FF0000;}
.source-csharp .kw5 {color: #000000;}
.source-csharp .co1 {color: #008080; font-style: italic;}
.source-csharp .co2 {color: #008080;}
.source-csharp .coMULTI {color: #008080; font-style: italic;}
.source-csharp .es0 {color: #008080; font-weight: bold;}
.source-csharp .br0 {color: #008000;}
.source-csharp .st0 {color: #808080;}
.source-csharp .nu0 {color: #FF0000;}
.source-csharp .me1 {color: #0000FF;}
.source-csharp .me2 {color: #0000FF;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-objc {line-height: normal;}
.source-objc li, .source-objc pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for objc
 * CSS class: source-objc, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-objc .de1, .source-objc .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-objc  {}
.source-objc .head {}
.source-objc .foot {}
.source-objc .imp {font-weight: bold; color: red;}
.source-objc .ln-xtra {color: #cc0; background-color: #ffc;}
.source-objc li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-objc li.li2 {font-weight: bold;}
.source-objc .kw1 {color: #0000ff;}
.source-objc .kw2 {color: #0000ff;}
.source-objc .kw3 {color: #0000dd;}
.source-objc .kw4 {color: #0000ff;}
.source-objc .kw5 {color: #0000ff;}
.source-objc .kw6 {color: #0000ff;}
.source-objc .co1 {color: #ff0000;}
.source-objc .co2 {color: #339900;}
.source-objc .coMULTI {color: #ff0000; font-style: italic;}
.source-objc .es0 {color: #666666; font-weight: bold;}
.source-objc .br0 {color: #002200;}
.source-objc .st0 {color: #666666;}
.source-objc .nu0 {color: #0000dd;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-java {line-height: normal;}
.source-java li, .source-java pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for java
 * CSS class: source-java, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-java .de1, .source-java .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-java  {}
.source-java .head {}
.source-java .foot {}
.source-java .imp {font-weight: bold; color: red;}
.source-java .ln-xtra {color: #cc0; background-color: #ffc;}
.source-java li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-java li.li2 {font-weight: bold;}
.source-java .kw1 {color: #b1b100;}
.source-java .kw2 {color: #000000; font-weight: bold;}
.source-java .kw3 {color: #aaaadd; font-weight: bold;}
.source-java .kw4 {color: #993333;}
.source-java .co1 {color: #808080; font-style: italic;}
.source-java .co2 {color: #a1a100;}
.source-java .coMULTI {color: #808080; font-style: italic;}
.source-java .es0 {color: #000099; font-weight: bold;}
.source-java .br0 {color: #66cc66;}
.source-java .st0 {color: #ff0000;}
.source-java .nu0 {color: #cc66cc;}
.source-java .me1 {color: #006600;}
.source-java .me2 {color: #006600;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-perl {line-height: normal;}
.source-perl li, .source-perl pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for perl
 * CSS class: source-perl, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-perl .de1, .source-perl .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-perl  {}
.source-perl .head {}
.source-perl .foot {}
.source-perl .imp {font-weight: bold; color: red;}
.source-perl .ln-xtra {color: #cc0; background-color: #ffc;}
.source-perl li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-perl li.li2 {font-weight: bold;}
.source-perl .kw1 {color: #b1b100;}
.source-perl .kw2 {color: #000000; font-weight: bold;}
.source-perl .kw3 {color: #000066;}
.source-perl .co1 {color: #808080; font-style: italic;}
.source-perl .coMULTI {color: #808080; font-style: italic;}
.source-perl .es0 {color: #000099; font-weight: bold;}
.source-perl .br0 {color: #66cc66;}
.source-perl .st0 {color: #ff0000;}
.source-perl .nu0 {color: #cc66cc;}
.source-perl .me1 {color: #006600;}
.source-perl .me2 {color: #006600;}
.source-perl .re0 {color: #0000ff;}
.source-perl .re4 {color: #009999;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-ruby {line-height: normal;}
.source-ruby li, .source-ruby pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for ruby
 * CSS class: source-ruby, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-ruby .de1, .source-ruby .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-ruby  {}
.source-ruby .head {}
.source-ruby .foot {}
.source-ruby .imp {font-weight: bold; color: red;}
.source-ruby .ln-xtra {color: #cc0; background-color: #ffc;}
.source-ruby li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-ruby li.li2 {font-weight: bold;}
.source-ruby .kw1 {color:#9966CC; font-weight:bold;}
.source-ruby .kw2 {color:#0000FF; font-weight:bold;}
.source-ruby .kw3 {color:#CC0066; font-weight:bold;}
.source-ruby .kw4 {color:#CC00FF; font-weight:bold;}
.source-ruby .co1 {color:#008000; font-style:italic;}
.source-ruby .coMULTI {color:#000080; font-style:italic;}
.source-ruby .es0 {color:#000099;}
.source-ruby .br0 {color:#006600; font-weight:bold;}
.source-ruby .st0 {color:#996600;}
.source-ruby .nu0 {color:#006666;}
.source-ruby .me1 {color:#9900CC;}
.source-ruby .sc0 {}
.source-ruby .sc1 {}
.source-ruby .sc2 {}
.source-ruby .re0 {color:#ff6633; font-weight:bold;}
.source-ruby .re1 {color:#0066ff; font-weight:bold;}
.source-ruby .re2 {color:#6666ff; font-weight:bold;}
.source-ruby .re3 {color:#ff3333; font-weight:bold;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-smalltalk {line-height: normal;}
.source-smalltalk li, .source-smalltalk pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for smalltalk
 * CSS class: source-smalltalk, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-smalltalk .de1, .source-smalltalk .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-smalltalk  {}
.source-smalltalk .head {}
.source-smalltalk .foot {}
.source-smalltalk .imp {font-weight: bold; color: red;}
.source-smalltalk .ln-xtra {color: #cc0; background-color: #ffc;}
.source-smalltalk li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-smalltalk li.li2 {font-weight: bold;}
.source-smalltalk .kw1 {color: #7f007f;}
.source-smalltalk .coMULTI {color: #007f00; font-style: italic;}
.source-smalltalk .es0 {}
.source-smalltalk .br0 {color: #000066; font-weight:bold;}
.source-smalltalk .st0 {color: #7f0000;}
.source-smalltalk .nu0 {color: #7f0000;}
.source-smalltalk .me0 {}
.source-smalltalk .sc0 {}
.source-smalltalk .re0 {color: #0000ff;}
.source-smalltalk .re1 {color: #7f0000;}
.source-smalltalk .re2 {color: #7f0000;}
.source-smalltalk .re3 {color: #00007f;}
.source-smalltalk .re4 {color: #7f007f;}
.source-smalltalk .re5 {color: #00007f;}
.source-smalltalk .re6 {color: #00007f;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-xml {line-height: normal;}
.source-xml li, .source-xml pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for xml
 * CSS class: source-xml, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-xml .de1, .source-xml .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-xml  {}
.source-xml .head {}
.source-xml .foot {}
.source-xml .imp {font-weight: bold; color: red;}
.source-xml .ln-xtra {color: #cc0; background-color: #ffc;}
.source-xml li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-xml li.li2 {font-weight: bold;}
.source-xml .coMULTI {color: #808080; font-style: italic;}
.source-xml .es0 {color: #000099; font-weight: bold;}
.source-xml .br0 {color: #66cc66;}
.source-xml .st0 {color: #ff0000;}
.source-xml .nu0 {color: #cc66cc;}
.source-xml .sc0 {color: #00bbdd;}
.source-xml .sc1 {color: #ddbb00;}
.source-xml .sc2 {color: #339933;}
.source-xml .sc3 {color: #009900;}
.source-xml .re0 {color: #000066;}
.source-xml .re1 {font-weight: bold; color: black;}
.source-xml .re2 {font-weight: bold; color: black;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style>		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Serialization skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Serialization</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<table class="metadata plainlinks ambox ambox-style" style="">
<tr>
<td class="mbox-image">
<div style="width: 52px;"><a href="/wiki/File:Text_document_with_red_question_mark.svg" class="image" title="Text document with red question mark.svg"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/a/a4/Text_document_with_red_question_mark.svg/40px-Text_document_with_red_question_mark.svg.png" width="40" height="40" border="0" /></a></div>
</td>
<td class="mbox-text" style="">This article includes a <a href="/wiki/Wikipedia:Citing_sources" title="Wikipedia:Citing sources">list of references</a> or <a href="/wiki/Wikipedia:External_links" title="Wikipedia:External links">external links</a>, but <b>its sources remain unclear because it lacks <a href="/wiki/Wikipedia:Citing_sources#Inline_citations" title="Wikipedia:Citing sources">inline citations</a>.</b> Please <a href="/wiki/Wikipedia:WikiProject_Fact_and_Reference_Check" title="Wikipedia:WikiProject Fact and Reference Check">improve</a> this article by introducing more precise citations <a href="/wiki/Wikipedia:When_to_cite" title="Wikipedia:When to cite">where appropriate</a>. <small><i>(November 2008)</i></small></td>
</tr>
</table>
<div class="dablink">This article is about data structure encoding.  For other uses, see <a href="/wiki/Serialization_(disambiguation)" title="Serialization (disambiguation)">Serialization (disambiguation)</a>.</div>
<p>In <a href="/wiki/Computer_science" title="Computer science">computer science</a>, in the context of data storage and transmission, <b>serialization</b> is the process of converting an <a href="/wiki/Object_(computer_science)" title="Object (computer science)">object</a> into a sequence of bits so that it can be stored on a storage medium (such as a <a href="/wiki/Computer_file" title="Computer file">file</a>, or a memory buffer) or transmitted across a <a href="/wiki/Computer_network" title="Computer network">network</a> connection link. When the resulting series of bits is reread according to the serialization format, it can be used to create a semantically identical clone of the original object. For many complex objects, such as those that make extensive use of <a href="/wiki/Reference_(computer_science)" title="Reference (computer science)">references</a>, this process is not straightforward.</p>
<p>This process of serializing an object is also called <b>deflating</b> or <b><a href="/wiki/Marshalling_(computer_science)" title="Marshalling (computer science)">marshalling</a></b> an object. The opposite operation, extracting a data structure from a series of bytes, is <b>deserialization</b> (which is also called <b>inflating</b> or <b>unmarshalling</b>).</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Uses"><span class="tocnumber">1</span> <span class="toctext">Uses</span></a></li>
<li class="toclevel-1"><a href="#Consequences"><span class="tocnumber">2</span> <span class="toctext">Consequences</span></a></li>
<li class="toclevel-1"><a href="#Human-readable_serialization"><span class="tocnumber">3</span> <span class="toctext">Human-readable serialization</span></a></li>
<li class="toclevel-1"><a href="#Scientific_serialization"><span class="tocnumber">4</span> <span class="toctext">Scientific serialization</span></a></li>
<li class="toclevel-1"><a href="#Programming_language_support"><span class="tocnumber">5</span> <span class="toctext">Programming language support</span></a>
<ul>
<li class="toclevel-2"><a href="#.NET_Framework"><span class="tocnumber">5.1</span> <span class="toctext">.NET Framework</span></a></li>
<li class="toclevel-2"><a href="#Objective-C"><span class="tocnumber">5.2</span> <span class="toctext">Objective-C</span></a>
<ul>
<li class="toclevel-3"><a href="#Example"><span class="tocnumber">5.2.1</span> <span class="toctext">Example</span></a>
<ul>
<li class="toclevel-4"><a href="#Sender.h"><span class="tocnumber">5.2.1.1</span> <span class="toctext">Sender.h</span></a></li>
<li class="toclevel-4"><a href="#Sender.m"><span class="tocnumber">5.2.1.2</span> <span class="toctext">Sender.m</span></a></li>
<li class="toclevel-4"><a href="#Sender.c"><span class="tocnumber">5.2.1.3</span> <span class="toctext">Sender.c</span></a></li>
<li class="toclevel-4"><a href="#Receiver.m"><span class="tocnumber">5.2.1.4</span> <span class="toctext">Receiver.m</span></a></li>
<li class="toclevel-4"><a href="#Receiver.c"><span class="tocnumber">5.2.1.5</span> <span class="toctext">Receiver.c</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-2"><a href="#Java"><span class="tocnumber">5.3</span> <span class="toctext">Java</span></a>
<ul>
<li class="toclevel-3"><a href="#Example_2"><span class="tocnumber">5.3.1</span> <span class="toctext">Example</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#ColdFusion"><span class="tocnumber">5.4</span> <span class="toctext">ColdFusion</span></a></li>
<li class="toclevel-2"><a href="#OCaml"><span class="tocnumber">5.5</span> <span class="toctext">OCaml</span></a></li>
<li class="toclevel-2"><a href="#Perl"><span class="tocnumber">5.6</span> <span class="toctext">Perl</span></a></li>
<li class="toclevel-2"><a href="#C"><span class="tocnumber">5.7</span> <span class="toctext">C</span></a></li>
<li class="toclevel-2"><a href="#C.2B.2B"><span class="tocnumber">5.8</span> <span class="toctext">C++</span></a></li>
<li class="toclevel-2"><a href="#Python"><span class="tocnumber">5.9</span> <span class="toctext">Python</span></a></li>
<li class="toclevel-2"><a href="#PHP"><span class="tocnumber">5.10</span> <span class="toctext">PHP</span></a></li>
<li class="toclevel-2"><a href="#REBOL"><span class="tocnumber">5.11</span> <span class="toctext">REBOL</span></a></li>
<li class="toclevel-2"><a href="#Ruby"><span class="tocnumber">5.12</span> <span class="toctext">Ruby</span></a></li>
<li class="toclevel-2"><a href="#Smalltalk"><span class="tocnumber">5.13</span> <span class="toctext">Smalltalk</span></a>
<ul>
<li class="toclevel-3"><a href="#Squeak_Smalltalk"><span class="tocnumber">5.13.1</span> <span class="toctext">Squeak Smalltalk</span></a></li>
<li class="toclevel-3"><a href="#Other_Smalltalk_dialects"><span class="tocnumber">5.13.2</span> <span class="toctext">Other Smalltalk dialects</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#Lisp"><span class="tocnumber">5.14</span> <span class="toctext">Lisp</span></a></li>
<li class="toclevel-2"><a href="#Haskell"><span class="tocnumber">5.15</span> <span class="toctext">Haskell</span></a></li>
<li class="toclevel-2"><a href="#Windows_PowerShell"><span class="tocnumber">5.16</span> <span class="toctext">Windows PowerShell</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">6</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#Notes"><span class="tocnumber">7</span> <span class="toctext">Notes</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">8</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Uses" id="Uses"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Serialization&amp;action=edit&amp;section=1" title="Edit section: Uses">edit</a>]</span> <span class="mw-headline">Uses</span></h2>
<p>Serialization has a number of advantages. It provides:</p>
<ul>
<li>a method of <a href="/wiki/Persistence_(computer_science)" title="Persistence (computer science)">persisting</a> objects which is more convenient than writing their properties to a text file on disk, and re-assembling them by reading this back in.</li>
<li>a method of issuing <a href="/wiki/Remote_procedure_call" title="Remote procedure call">remote procedure calls</a>, e.g., as in <a href="/wiki/SOAP_(protocol)" title="SOAP (protocol)" class="mw-redirect">SOAP</a></li>
<li>a method for distributing objects, especially in <a href="/wiki/Software_componentry" title="Software componentry" class="mw-redirect">software componentry</a> such as <a href="/wiki/Component_Object_Model" title="Component Object Model">COM</a>, <a href="/wiki/CORBA" title="CORBA" class="mw-redirect">CORBA</a>, etc.</li>
<li>a method for detecting changes in time-varying data.</li>
</ul>
<p>For some of these features to be useful, architecture independence must be maintained. For example, for maximal use of distribution, a computer running on a different hardware architecture should be able to reliably reconstruct a serialized data stream, regardless of <a href="/wiki/Endianness" title="Endianness">endianness</a>. This means that the simpler and faster procedure of directly copying the memory layout of the data structure cannot work reliably for all architectures. Serializing the data structure in an architecture independent format means that we do not suffer from the problems of <a href="/wiki/Byte_ordering" title="Byte ordering" class="mw-redirect">byte ordering</a>, memory layout, or simply different ways of representing data structures in different <a href="/wiki/Programming_language" title="Programming language">programming languages</a>.</p>
<p>Inherent to any serialization scheme is that, because the encoding of the data is by definition serial, extracting one part of the serialized data structure requires that the entire object be read from start to end, and reconstructed. In many applications this linearity is an asset, because it enables simple, common I/O interfaces to be utilized to hold and pass on the state of an object. In applications where higher performance is an issue, it can make sense to expend more effort to deal with a more complex, non-linear storage organization.</p>
<p>Even on a single machine, primitive <a href="/wiki/Pointer" title="Pointer" class="mw-redirect">pointer</a> objects are too fragile to save, because the objects to which they point may be reloaded to a different location in memory. To deal with this, the serialization process includes a step called <i><a href="/wiki/Unswizzling" title="Unswizzling" class="mw-redirect">unswizzling</a></i> or <i>pointer unswizzling</i> and the deserialization process includes a step called <i><a href="/wiki/Pointer_swizzling" title="Pointer swizzling">pointer swizzling</a></i>.</p>
<p>Since both serializing and deserializing can be driven from common code, (for example, the <i>Serialize</i> function in <a href="/wiki/Microsoft_Foundation_Classes" title="Microsoft Foundation Classes" class="mw-redirect">Microsoft Foundation Classes</a>) it is possible for the common code to do both at the same time, and thus 1) detect differences between the objects being serialized and their prior copies, and 2) provide the input for the next such detection. It is not necessary to actually build the prior copy, since differences can be detected "on the fly". This is a way to understand the technique called <a href="/wiki/Differential_execution" title="Differential execution">differential execution</a>. It is useful in the programming of user interfaces whose contents are time-varying&#160;— graphical objects can be created, removed, altered, or made to handle input events without necessarily having to write separate code to do those things.</p>
<p><a name="Consequences" id="Consequences"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Serialization&amp;action=edit&amp;section=2" title="Edit section: Consequences">edit</a>]</span> <span class="mw-headline">Consequences</span></h2>
<p>Serialization, however, breaks the opacity of an <a href="/wiki/Abstract_data_type" title="Abstract data type">abstract data type</a> by potentially exposing private implementation details. To discourage competitors from making compatible products, publishers of <a href="/wiki/Proprietary_software" title="Proprietary software">proprietary software</a> often keep the details of their programs' serialization formats a <a href="/wiki/Trade_secret" title="Trade secret">trade secret</a>. Some deliberately <a href="/wiki/Obfuscation" title="Obfuscation">obfuscate</a> or even <a href="/wiki/Encryption" title="Encryption">encrypt</a> the serialized data.</p>
<p>Yet, interoperability requires that applications be able to understand each other's serialization formats. Therefore <a href="/wiki/RMI-IIOP" title="RMI-IIOP">remote method call</a> architectures such as <a href="/wiki/CORBA" title="CORBA" class="mw-redirect">CORBA</a> define their serialization formats in detail and often provide methods of checking the consistency of any serialized stream when converting it back into an object.</p>
<p><a name="Human-readable_serialization" id="Human-readable_serialization"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Serialization&amp;action=edit&amp;section=3" title="Edit section: Human-readable serialization">edit</a>]</span> <span class="mw-headline">Human-readable serialization</span></h2>
<p>In the late 1990s, a push to provide an alternative to the standard serialization protocols started: the <a href="/wiki/XML" title="XML">XML</a> markup language was used to produce a human readable text-based encoding. Such an encoding can be useful for persistent objects that may be read and understood by humans, or communicated to other systems regardless of programming language. It has the disadvantage of losing the more compact, byte stream based encoding, which is generally more practical. A future solution to this dilemma could be transparent compression schemes (see <a href="/wiki/Binary_XML" title="Binary XML">binary XML</a>).</p>
<p>XML is today often used for asynchronous transfer of structured data between client and server in <a href="/wiki/Ajax_(programming)" title="Ajax (programming)">Ajax</a> web applications. An alternative for this use case is <a href="/wiki/JSON" title="JSON">JSON</a>, a more lightweight text-based serialization protocol which uses <a href="/wiki/JavaScript" title="JavaScript">JavaScript</a> syntax but is supported in numerous other programming languages as well.</p>
<p>Another alternative, <a href="/wiki/YAML" title="YAML">YAML</a>, is effectively a superset of JSON and includes features that make it more powerful for serialization, more "human friendly", and potentially more compact. These features include a notion of tagging data types, support for non-hierarchical data structures, the option to data structure with indentation, and multiple forms of scalar data quoting.</p>
<p><a name="Scientific_serialization" id="Scientific_serialization"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Serialization&amp;action=edit&amp;section=4" title="Edit section: Scientific serialization">edit</a>]</span> <span class="mw-headline">Scientific serialization</span></h2>
<p>For large volume scientific datasets, such as satellite data and output of numerical climate, weather, or ocean models, specific binary serialization standards have been developed, e.g. <a href="/wiki/Hierarchical_Data_Format" title="Hierarchical Data Format">HDF</a>, <a href="/wiki/NetCDF" title="NetCDF">netCDF</a> and the older <a href="/wiki/GRIB" title="GRIB">GRIB</a>.</p>
<p><a name="Programming_language_support" id="Programming_language_support"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Serialization&amp;action=edit&amp;section=5" title="Edit section: Programming language support">edit</a>]</span> <span class="mw-headline">Programming language support</span></h2>
<p>Several <a href="/wiki/Object-oriented_programming" title="Object-oriented programming">object-oriented programming</a> languages directly support <i>object serialization</i> (or <i>object archival</i>), either by <a href="/wiki/Syntactic_sugar" title="Syntactic sugar">syntactic sugar</a> elements or providing a standard <a href="/wiki/Interface_(computing)" title="Interface (computing)" class="mw-redirect">interface</a> for doing so.</p>
<p>Some of these programming languages are <a href="/wiki/Ruby_programming_language" title="Ruby programming language" class="mw-redirect">Ruby</a>, <a href="/wiki/Smalltalk" title="Smalltalk">Smalltalk</a>, <a href="/wiki/Python_(programming_language)" title="Python (programming language)">Python</a>, <a href="/wiki/PHP" title="PHP">PHP</a>, <a href="/wiki/Objective-C" title="Objective-C">Objective-C</a>, <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a>, and the <a href="/wiki/.NET_Framework" title=".NET Framework">.NET</a> family of languages.</p>
<p><a href="http://code.google.com/p/protobuf/" class="external text" title="http://code.google.com/p/protobuf/" rel="nofollow">Google's protocol buffers</a> encode and decode structured data in an efficient and extensible format. Google uses Protocol Buffers for almost all of its internal RPC protocols and file formats. The serialized data are compatible between C++, Java, and Python.</p>
<p>There are also libraries available that add serialization support to languages that lack native support for it.</p>
<p><a name=".NET_Framework" id=".NET_Framework"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Serialization&amp;action=edit&amp;section=6" title="Edit section: .NET Framework">edit</a>]</span> <span class="mw-headline">.NET Framework</span></h3>
<p>In the <a href="/wiki/.NET_Framework" title=".NET Framework">.NET</a> languages, classes can be serialized and deserialized by adding the <code>Serializable</code> attribute to the class.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-vbnet">
<span class="co1">'VB Example</span>
&lt;Serializable<span class="br0">(</span><span class="br0">)</span>&gt; <span class="kw6">Class</span> Employee
</pre></div>
<div dir="ltr" style="text-align: left;">
<pre class="source-csharp">
<span class="co1">// C# Example</span>
<span class="br0">[</span>Serializable<span class="br0">]</span>
<span class="kw4">class</span> Employee
</pre></div>
<p>If new members are added to a serializable class, they can be tagged with the <code>OptionalField</code> attribute to allow previous versions of the object to be deserialized without error. This attribute affects only deserialization, and prevents the runtime from throwing an exception if a member is missing from the serialized stream. A member can also be marked with the <code>NonSerialized</code> attribute to indicate that it should not be serialized. This will allow the details of those members to be kept secret.</p>
<p>To modify the default deserialization (for example, to automatically initialize a member marked <code>NonSerialized</code>), the class must implement the <code>IDeserializationCallback</code> interface and define the <code>IDeserializationCallback.OnDeserialization</code> method.</p>
<p>Objects may be serialized in binary format for deserialization by other <a href="/wiki/.NET_Framework" title=".NET Framework">.NET</a> applications. The framework also provides the <code>SoapFormatter</code> and <code>XmlSerializer</code> objects to support serialization in human-readable, cross-platform XML.</p>
<p><a name="Objective-C" id="Objective-C"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Serialization&amp;action=edit&amp;section=7" title="Edit section: Objective-C">edit</a>]</span> <span class="mw-headline">Objective-C</span></h3>
<p>In the <a href="/wiki/Objective-C" title="Objective-C">Objective-C</a> programming language, serialization (more commonly known as <i>archiving</i>) is achieved by overriding the <code>write:</code> and <code>read:</code> methods in the Object root class. (NB This is in the GNU runtime variant of Objective-C. In the NeXT-style runtime, the implementation is very similar.)</p>
<p><a name="Example" id="Example"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Serialization&amp;action=edit&amp;section=8" title="Edit section: Example">edit</a>]</span> <span class="mw-headline">Example</span></h4>
<p>The following example demonstrates two independent programs, a "sender", who takes the current time (as per <tt><a href="http://www.opengroup.org/onlinepubs/007908799/xsh/time.html" class="external text" title="http://www.opengroup.org/onlinepubs/007908799/xsh/time.html" rel="nofollow">time</a></tt> in the <a href="/wiki/C_standard_library" title="C standard library">C standard library</a>), archives it and prints the archived form to the standard output, and a "receiver" which decodes the archived form, reconstructs the time and prints it out.</p>
<p>When compiled, we get a sender program and a receiver program. If we just execute the sender program, we will get out a serialization that looks like:</p>
<pre>
GNU TypedStream 1D@îC¡
</pre>
<p>(with a NULL character after the 1). If we pipe the two programs together, as <tt>sender | receiver</tt>, we get</p>
<pre>
received 1089356705
</pre>
<p>showing the object was serialized, sent, and reconstructed properly.</p>
<p>In essence, the sender and receiver programs could be distributed across a network connection, providing distributed object capabilities.</p>
<p><a name="Sender.h" id="Sender.h"></a></p>
<h5><span class="editsection">[<a href="/w/index.php?title=Serialization&amp;action=edit&amp;section=9" title="Edit section: Sender.h">edit</a>]</span> <span class="mw-headline">Sender.h</span></h5>
<div dir="ltr" style="text-align: left;">
<pre class="source-objc">
<span class="co2">#import &lt;objc/Object.h&gt;</span>
<span class="co2">#import &lt;time.h&gt;</span>
<span class="co2">#import &lt;stdio.h&gt;</span>
 
<span class="kw4">@interface</span> Sender : Object
<span class="br0">{</span>
   <span class="kw4">time_t</span>  current_time;
<span class="br0">}</span>
 
- <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span> setTime;
- <span class="br0">(</span><span class="kw4">time_t</span><span class="br0">)</span> <span class="kw3">time</span>;
- <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span> send;
- <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span> read: <span class="br0">(</span>TypedStream *<span class="br0">)</span> s;
- <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span> write: <span class="br0">(</span>TypedStream *<span class="br0">)</span> s;
 
<span class="kw4">@end</span>
</pre></div>
<p><a name="Sender.m" id="Sender.m"></a></p>
<h5><span class="editsection">[<a href="/w/index.php?title=Serialization&amp;action=edit&amp;section=10" title="Edit section: Sender.m">edit</a>]</span> <span class="mw-headline">Sender.m</span></h5>
<div dir="ltr" style="text-align: left;">
<pre class="source-objc">
<span class="co2">#import "Sender.h"</span>
 
<span class="kw4">@implementation</span> Sender
- <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span> setTime
<span class="br0">{</span>
   <span class="co1">//Set the time</span>
   current_time = <span class="kw3">time</span><span class="br0">(</span><span class="kw2">NULL</span><span class="br0">)</span>;
   <span class="kw1">return</span> self;
<span class="br0">}</span>
 
- <span class="br0">(</span><span class="kw4">time_t</span><span class="br0">)</span> <span class="kw3">time</span>;
<span class="br0">{</span>
   <span class="kw1">return</span> current_time;
<span class="br0">}</span>
 
- <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span> write: <span class="br0">(</span>TypedStream *<span class="br0">)</span> stream
<span class="br0">{</span>
   <span class="coMULTI">/*
    *Write the superclass to the stream.
    *We do this so we have the complete object hierarchy,
    *not just the object itself.
    */</span>
   <span class="br0">[</span>super write:stream<span class="br0">]</span>;
 
   <span class="coMULTI">/*
    *Write the current_time out to the stream.
    *time_t is typedef for an integer.
    *The second argument, the string "i", specifies the types to write
    *as per the @encode directive.
    */</span>
   objc_write_types<span class="br0">(</span>stream, <span class="st0">"i"</span>, &amp;current_time<span class="br0">)</span>;
   <span class="kw1">return</span> self;
<span class="br0">}</span>
 
- <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span> read: <span class="br0">(</span>TypedStream *<span class="br0">)</span> stream
<span class="br0">{</span>
   <span class="coMULTI">/*
    *Do the reverse to write: - reconstruct the superclass...
    */</span>
   <span class="br0">[</span>super read:stream<span class="br0">]</span>;
 
   <span class="coMULTI">/*
    *And reconstruct the instance variables from the stream...
    */</span>
   objc_read_types<span class="br0">(</span>stream, <span class="st0">"i"</span>, &amp;current_time<span class="br0">)</span>;
   <span class="kw1">return</span> self;
<span class="br0">}</span>
 
- <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span> send
<span class="br0">{</span>
   <span class="co1">//Convenience method to do the writing. We open stdout as our byte stream</span>
   TypedStream *s = objc_open_typed_stream<span class="br0">(</span><span class="kw2">stdout</span>, OBJC_WRITEONLY<span class="br0">)</span>;
 
   <span class="co1">//Write the object to the stream</span>
   <span class="br0">[</span>self write:s<span class="br0">]</span>;
 
   <span class="co1">//Finish up&amp;nbsp;— close the stream.</span>
   objc_close_typed_stream<span class="br0">(</span>s<span class="br0">)</span>;
<span class="br0">}</span>
<span class="kw4">@end</span>
</pre></div>
<p><a name="Sender.c" id="Sender.c"></a></p>
<h5><span class="editsection">[<a href="/w/index.php?title=Serialization&amp;action=edit&amp;section=11" title="Edit section: Sender.c">edit</a>]</span> <span class="mw-headline">Sender.c</span></h5>
<div dir="ltr" style="text-align: left;">
<pre class="source-objc">
<span class="co2">#import "Sender.h"</span>
 
<span class="kw4">int</span>
main<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>
<span class="br0">{</span>
   Sender *s = <span class="br0">[</span>Sender new<span class="br0">]</span>;
   <span class="br0">[</span>s setTime<span class="br0">]</span>;
   <span class="br0">[</span>s send<span class="br0">]</span>;
 
   <span class="kw1">return</span> <span class="nu0">0</span>;
<span class="br0">}</span>
</pre></div>
<p><a name="Receiver.m" id="Receiver.m"></a></p>
<h5><span class="editsection">[<a href="/w/index.php?title=Serialization&amp;action=edit&amp;section=12" title="Edit section: Receiver.m">edit</a>]</span> <span class="mw-headline">Receiver.m</span></h5>
<div dir="ltr" style="text-align: left;">
<pre class="source-objc">
<span class="co2">#import "Receiver.h"</span>
 
<span class="kw4">@implementation</span> Receiver
 
- <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span> receive
<span class="br0">{</span>
   <span class="co1">//Open stdin as our stream for reading.</span>
   TypedStream *s = objc_open_typed_stream<span class="br0">(</span><span class="kw2">stdin</span>, OBJC_READONLY<span class="br0">)</span>;
 
   <span class="co1">//Allocate memory for, and instantiate the object from reading the stream.</span>
   t = <span class="br0">[</span><span class="br0">[</span>Sender alloc<span class="br0">]</span> read:s<span class="br0">]</span>;
   objc_close_typed_stream<span class="br0">(</span>s<span class="br0">)</span>;
<span class="br0">}</span>
 
- <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span> print
<span class="br0">{</span>
   <span class="kw3">fprintf</span><span class="br0">(</span><span class="kw2">stderr</span>, <span class="st0">"received %d<span class="es0">\n</span>"</span>, <span class="br0">[</span>t <span class="kw3">time</span><span class="br0">]</span><span class="br0">)</span>;
<span class="br0">}</span>
 
<span class="kw4">@end</span>
</pre></div>
<p><a name="Receiver.c" id="Receiver.c"></a></p>
<h5><span class="editsection">[<a href="/w/index.php?title=Serialization&amp;action=edit&amp;section=13" title="Edit section: Receiver.c">edit</a>]</span> <span class="mw-headline">Receiver.c</span></h5>
<div dir="ltr" style="text-align: left;">
<pre class="source-objc">
<span class="co2">#import "Receiver.h"</span>
 
<span class="kw4">int</span>
main<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>
<span class="br0">{</span>
   Receiver *r = <span class="br0">[</span>Receiver new<span class="br0">]</span>;
   <span class="br0">[</span>r receive<span class="br0">]</span>;
   <span class="br0">[</span>r print<span class="br0">]</span>;
 
   <span class="kw1">return</span> <span class="nu0">0</span>;
<span class="br0">}</span>
</pre></div>
<p><a name="Java" id="Java"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Serialization&amp;action=edit&amp;section=14" title="Edit section: Java">edit</a>]</span> <span class="mw-headline">Java</span></h3>
<p>Java provides automatic serialization which requires that the object be <a href="/wiki/Marker_interface_pattern" title="Marker interface pattern">marked</a> by implementing the <code><a href="http://java.sun.com/javase/6/docs/api/java/io/Serializable.html" class="external text" title="http://java.sun.com/javase/6/docs/api/java/io/Serializable.html" rel="nofollow">java.io.Serializable</a></code> <a href="/wiki/Interface_(Java)" title="Interface (Java)">interface</a>. Implementing the interface marks the class as "okay to serialize," and Java then handles serialization internally. There are no serialization methods defined on the <code>Serializable</code> interface, but a serializable class can optionally define methods with certain special names and signatures that if defined, will be called as part of the serialization/deserialization process. The language also allows the developer to override the serialization process more thoroughly by implementing another interface, the <code><a href="http://java.sun.com/javase/6/docs/api/java/io/Externalizable.html" class="external text" title="http://java.sun.com/javase/6/docs/api/java/io/Externalizable.html" rel="nofollow">Externalizable</a></code> interface, which includes two special methods that are used to save and restore the object's state.</p>
<p>There are three primary reasons why objects are not serializable by default and must implement the <code>Serializable</code> interface to access Java's serialization mechanism.</p>
<ol>
<li>Not all objects capture useful semantics in a serialized state. For example, a <code><a href="http://java.sun.com/javase/6/docs/api/java/lang/Thread.html" class="external text" title="http://java.sun.com/javase/6/docs/api/java/lang/Thread.html" rel="nofollow">Thread</a></code> object is tied to the state of the current <a href="/wiki/JVM" title="JVM" class="mw-redirect">JVM</a>. There is no context in which a deserialized <code>Thread</code> object would maintain useful semantics.</li>
<li>The serialized state of an object forms part of its class's compatibility contract. Maintaining compatibility between versions of serializable classes requires additional effort and consideration. Therefore, making a class serializable needs to be a deliberate design decision and not a default condition.</li>
<li>Serialization allows access to non-transient private members of a class that are not otherwise accessible. Classes containing sensitive information (for example, a password) should not be serializable or externalizable.</li>
</ol>
<p>The standard encoding method uses a simple translation of the fields into a byte stream. Primitives as well as non-transient, non-static referenced objects are encoded into the stream. Each object that is referenced by the serialized object and not marked as <tt>transient</tt> must also be serialized; and if any object in the complete graph of non-transient object references is not serializable, then serialization will fail. The developer can influence this behavior by marking objects as transient, or by redefining the serialization for an object so that some portion of the reference graph is truncated and not serialized.</p>
<p>It is possible to serialize Java objects through <a href="/wiki/JDBC" title="JDBC" class="mw-redirect">JDBC</a> and store them into a database.<sup id="cite_ref-0" class="reference"><a href="#cite_note-0" title=""><span>[</span>1<span>]</span></a></sup></p>
<p>While <a href="/wiki/Swing_(Java)" title="Swing (Java)">Swing</a> components do implement the Serializable interface, they are <b>not portable</b> between different versions of the Java Virtual Machine. As such, a Swing component, or any component which inherits it, may be serialized to an array of bytes, but it is not guaranteed that this storage will be readable on another machine.</p>
<p><a name="Example_2" id="Example_2"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Serialization&amp;action=edit&amp;section=15" title="Edit section: Example">edit</a>]</span> <span class="mw-headline">Example</span></h4>
<div dir="ltr" style="text-align: left;">
<pre class="source-java">
<span class="co2">import java.io.*;</span>
 
<span class="coMULTI">/**
 * The object to serialize.
 */</span>
<span class="kw2">class</span> ObjectToSerialize <span class="kw2">implements</span> <span class="kw3">Serializable</span> <span class="br0">{</span>
    <span class="kw2">static</span> <span class="kw2">private</span> <span class="kw2">final</span> <span class="kw4">long</span> serialVersionUID = 42L;
 
    <span class="kw2">private</span> <span class="kw3">String</span> firstAttribute;
    <span class="kw2">private</span> <span class="kw4">int</span> secondAttribute;
 
    <span class="kw2">public</span> ObjectToSerialize<span class="br0">(</span><span class="kw3">String</span> firstAttribute, <span class="kw4">int</span> secondAttribute<span class="br0">)</span> <span class="br0">{</span>
        <span class="kw2">this</span>.<span class="me1">firstAttribute</span> = firstAttribute;
        <span class="kw2">this</span>.<span class="me1">secondAttribute</span> = secondAttribute;
    <span class="br0">}</span>
 
    @Override
    <span class="kw2">public</span> <span class="kw3">String</span> toString<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
        <span class="kw2">return</span> firstAttribute + <span class="st0">", "</span> + secondAttribute;
    <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="kw2">public</span> <span class="kw2">class</span> Main <span class="br0">{</span>
    <span class="coMULTI">/**
     * Save an object.
     */</span>
    <span class="kw2">private</span> <span class="kw2">static</span> <span class="kw4">void</span> save_object<span class="br0">(</span><span class="kw3">Serializable</span> object, <span class="kw3">String</span> filename<span class="br0">)</span> <span class="kw2">throws</span> <span class="kw3">IOException</span> <span class="br0">{</span>
       <span class="kw3">ObjectOutputStream</span> objstream = <span class="kw2">new</span> <span class="kw3">ObjectOutputStream</span><span class="br0">(</span><span class="kw2">new</span> <span class="kw3">FileOutputStream</span><span class="br0">(</span>filename<span class="br0">)</span><span class="br0">)</span>;
       objstream.<span class="me1">writeObject</span><span class="br0">(</span>object<span class="br0">)</span>;
       objstream.<span class="me1">close</span><span class="br0">(</span><span class="br0">)</span>;
    <span class="br0">}</span>
 
    <span class="coMULTI">/**
     * Load an object.
     */</span>
    <span class="kw2">private</span> <span class="kw2">static</span> <span class="kw3">Object</span> load_object<span class="br0">(</span><span class="kw3">String</span> filename<span class="br0">)</span> <span class="kw2">throws</span> <span class="kw3">Exception</span> <span class="br0">{</span>
       <span class="kw3">ObjectInputStream</span> objstream = <span class="kw2">new</span> <span class="kw3">ObjectInputStream</span><span class="br0">(</span><span class="kw2">new</span> <span class="kw3">FileInputStream</span><span class="br0">(</span>filename<span class="br0">)</span><span class="br0">)</span>;
       <span class="kw3">Object</span> object = objstream.<span class="me1">readObject</span><span class="br0">(</span><span class="br0">)</span>;
       objstream.<span class="me1">close</span><span class="br0">(</span><span class="br0">)</span>;
       <span class="kw2">return</span> object;
    <span class="br0">}</span>
 
    <span class="kw2">public</span> <span class="kw2">static</span> <span class="kw4">void</span> main<span class="br0">(</span><span class="kw3">String</span><span class="br0">[</span><span class="br0">]</span> args<span class="br0">)</span> <span class="br0">{</span>
        ObjectToSerialize o = <span class="kw2">new</span> ObjectToSerialize<span class="br0">(</span><span class="st0">"some text"</span>, <span class="nu0">123</span><span class="br0">)</span>;
        <span class="kw3">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span>o<span class="br0">)</span>;
        <span class="kw2">try</span> <span class="br0">{</span>
            save_object<span class="br0">(</span>o, <span class="st0">"object.ser"</span><span class="br0">)</span>;
            ObjectToSerialize object_loaded = <span class="br0">(</span>ObjectToSerialize<span class="br0">)</span> load_object<span class="br0">(</span><span class="st0">"object.ser"</span><span class="br0">)</span>;
            <span class="kw3">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span>object_loaded<span class="br0">)</span>;
        <span class="br0">}</span> <span class="kw2">catch</span> <span class="br0">(</span><span class="kw3">Exception</span> e<span class="br0">)</span> <span class="br0">{</span>
        <span class="br0">}</span>
    <span class="br0">}</span>
<span class="br0">}</span>
</pre></div>
<p><a name="ColdFusion" id="ColdFusion"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Serialization&amp;action=edit&amp;section=16" title="Edit section: ColdFusion">edit</a>]</span> <span class="mw-headline">ColdFusion</span></h3>
<p><a href="/wiki/ColdFusion" title="ColdFusion">ColdFusion</a> allows data structures to be serialized to <a href="/wiki/WDDX" title="WDDX">WDDX</a> with the <code><a href="http://livedocs.macromedia.com/coldfusion/6.1/htmldocs/tags-c20.htm" class="external text" title="http://livedocs.macromedia.com/coldfusion/6.1/htmldocs/tags-c20.htm" rel="nofollow">&lt;cfwddx&gt;</a></code> tag.</p>
<p><a name="OCaml" id="OCaml"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Serialization&amp;action=edit&amp;section=17" title="Edit section: OCaml">edit</a>]</span> <span class="mw-headline">OCaml</span></h3>
<p><a href="/wiki/OCaml" title="OCaml" class="mw-redirect">OCaml</a>'s standard library provides marshalling through the <tt>Marshal</tt> module (<a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Marshal.html" class="external text" title="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Marshal.html" rel="nofollow">its documentation</a>) and the Pervasives functions <tt>output_value</tt> and <tt>input_value</tt>. While OCaml programming is statically type-checked, uses of the <tt>Marshal</tt> module may break type guarantees, as there is no way to check whether an unmarshalled stream represents objects of the expected type. In OCaml it is difficult to marshal a function or a data structure which contains a function (e.g. an object which contains a method), because executable code in functions cannot be transmitted across different programs. (There is a flag to marshal the code position of a function but it can only be unmarshalled in the exact same program.)</p>
<p><a name="Perl" id="Perl"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Serialization&amp;action=edit&amp;section=18" title="Edit section: Perl">edit</a>]</span> <span class="mw-headline">Perl</span></h3>
<p>Several <a href="/wiki/Perl" title="Perl">Perl</a> modules available from <a href="/wiki/CPAN" title="CPAN">CPAN</a> provide serialization mechanisms, including <code>Storable</code> and <code>FreezeThaw</code>.</p>
<p>Storable includes functions to serialize and deserialize Perl data structures to and from files or Perl scalars.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-perl">
<span class="kw2">use</span> Storable;
 
<span class="co1"># Create a hash with some nested data structures</span>
<span class="kw1">my</span> <span class="re0">%struct</span> = <span class="br0">(</span> text =&gt; <span class="st0">'Hello, world!'</span>, list =&gt; <span class="br0">[</span><span class="nu0">1</span>, <span class="nu0">2</span>, <span class="nu0">3</span><span class="br0">]</span> <span class="br0">)</span>;
 
<span class="co1"># Serialize the hash into a file</span>
store \<span class="re0">%struct</span>, <span class="st0">'serialized'</span>;
 
<span class="co1"># Read the data back later</span>
<span class="kw1">my</span> <span class="re0">$newstruct</span> = retrieve <span class="st0">'serialized'</span>;
</pre></div>
<p>In addition to serializing directly to files, <code>Storable</code> includes the <tt>freeze</tt> function to return a serialized copy of the data packed into a scalar, and <tt>thaw</tt> to deserialize such a scalar. This is useful for sending a complex data structure over a network socket or storing it in a database.</p>
<p>When serializing structures with <code>Storable</code>, there are network safe functions that always store their data in a format that is readable on any computer at a small cost of speed. These functions are named <tt>nstore</tt>, <tt>nfreeze</tt>, etc. There are no "n" functions for deserializing these structures&#160;— the regular <tt>thaw</tt> and <tt>retrieve</tt> deserialize structures serialized with the "<code>n</code>" functions and their machine-specific equivalents.</p>
<p><a name="C" id="C"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Serialization&amp;action=edit&amp;section=19" title="Edit section: C">edit</a>]</span> <span class="mw-headline">C</span></h3>
<p>The <a href="http://tpl.sourceforge.net" class="external text" title="http://tpl.sourceforge.net" rel="nofollow">tpl library</a> supports serializing C data structures into an efficient, native binary representation. The serialized data can be reversibly converted to a human-readable XML representation.</p>
<p>The open source <a href="http://gsoap2.sourceforge.net" class="external text" title="http://gsoap2.sourceforge.net" rel="nofollow">gSOAP toolkit</a> provides serialization of C data structures in XML using a C data binding for XML schema. The toolkit supports SOAP, WSDL and XSD specifications.</p>
<p>The <a href="http://s11n.net/c11n/" class="external text" title="http://s11n.net/c11n/" rel="nofollow">c11n</a> ("cerialization") project is a C variant of the <a href="http://s11n.net" class="external text" title="http://s11n.net" rel="nofollow">libs11n</a> C++ library, geared towards serializing client-side C objects. c11n is internally ignorant of any file formats and provides handlers for several different ones (e.g. XML, SQL, and custom formats).</p>
<p><a name="C.2B.2B" id="C.2B.2B"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Serialization&amp;action=edit&amp;section=20" title="Edit section: C++">edit</a>]</span> <span class="mw-headline">C++</span></h3>
<p><a href="http://www.boost.org/libs/serialization/doc/index.html" class="external text" title="http://www.boost.org/libs/serialization/doc/index.html" rel="nofollow">Boost Serialization</a>, <a href="http://s11n.net" class="external text" title="http://s11n.net" rel="nofollow">libs11n</a>, and <a href="http://www.sweetsoftware.co.nz/persist_overview.php" class="external text" title="http://www.sweetsoftware.co.nz/persist_overview.php" rel="nofollow">Sweet Persist</a> are libraries that provide support for serialization from within the C++ language itself. They all integrate well with the STL. Boost Serialization supports serialization in XML and binary formats. Sweet Persist supports serialization in XML, JSON, Lua, and binary formats. The libs11n library supports serialization to and from several text formats (including 3 flavors of XML) as well as <a href="http://www.sqlite.org/" class="external text" title="http://www.sqlite.org/" rel="nofollow">sqlite3</a>.</p>
<p>The <a href="/wiki/Microsoft_Foundation_Class_Library" title="Microsoft Foundation Class Library">Microsoft Foundation Class Library</a> has comprehensive support for serialization to a binary format. It doesn't have support for the STL but does support its own containers.</p>
<p>Alternatively <a href="/wiki/XML_Data_Binding" title="XML Data Binding" class="mw-redirect">XML Data Binding</a> implementations, like <a href="http://codesynthesis.com/products/xsd/" class="external text" title="http://codesynthesis.com/products/xsd/" rel="nofollow">XML Schema to C++ data binding compiler</a> and <a href="http://gsoap2.sourceforge.net" class="external text" title="http://gsoap2.sourceforge.net" rel="nofollow">gSOAP</a>, provide support for serialization to and from XML by generating C++ source code from an intermediate specification (e.g. an XML schema).</p>
<p><a href="http://webEbenezer.net" class="external text" title="http://webEbenezer.net" rel="nofollow">Ebenezer Enterprises</a> provides an on line service that writes efficient C++ marshalling code.</p>
<p><a name="Python" id="Python"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Serialization&amp;action=edit&amp;section=21" title="Edit section: Python">edit</a>]</span> <span class="mw-headline">Python</span></h3>
<p><a href="/wiki/Python_(programming_language)" title="Python (programming language)">Python</a> implements serialization through the <a href="/wiki/Python_(programming_language)#Standard_library" title="Python (programming language)">standard library</a> module <code><a href="/wiki/Pickle_(Python)" title="Pickle (Python)">pickle</a></code>, and to a lesser extent, the older <code><a href="http://docs.python.org/lib/module-marshal.html" class="external text" title="http://docs.python.org/lib/module-marshal.html" rel="nofollow">marshal</a></code> modules. <code>marshal</code> does offer the ability to serialize Python code objects, unlike <code>pickle</code>.</p>
<p><a name="PHP" id="PHP"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Serialization&amp;action=edit&amp;section=22" title="Edit section: PHP">edit</a>]</span> <span class="mw-headline">PHP</span></h3>
<p><a href="/wiki/PHP" title="PHP">PHP</a> implements serialization through the built-in '<code>serialize</code>' and '<code>unserialize</code>' functions. PHP can serialize any of its data types except resources (file pointers, sockets, etc.).</p>
<p>For objects (as of at least PHP 4) there are two "<a href="/wiki/Magic_(programming)" title="Magic (programming)">magic</a> methods" than can be implemented within a class&#160;— <tt>__sleep()</tt> and <tt>__wakeup()</tt>&#160;— that are called from within <code>serialize()</code> and <code>unserialize()</code>, respectively, that can clean up and restore an object. For example, it may be desirable to close a database connection on serialization and restore the connection on deserialization; this functionality would be handled in these two magic methods. They also permit the object to pick which properties are serialized.</p>
<p><a name="REBOL" id="REBOL"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Serialization&amp;action=edit&amp;section=23" title="Edit section: REBOL">edit</a>]</span> <span class="mw-headline">REBOL</span></h3>
<p><a href="/wiki/REBOL" title="REBOL">REBOL</a> will serialize to file (<code>save/all</code>) or to a <code>string!</code> (<code>mold/all</code>). Strings and files can be deserialized using the <a href="/wiki/Type_polymorphism" title="Type polymorphism">polymorphic</a> <code>load</code> function.</p>
<p><a name="Ruby" id="Ruby"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Serialization&amp;action=edit&amp;section=24" title="Edit section: Ruby">edit</a>]</span> <span class="mw-headline">Ruby</span></h3>
<p><a href="/wiki/Ruby_programming_language" title="Ruby programming language" class="mw-redirect">Ruby</a> includes the standard module <code><a href="http://www.ruby-doc.org/core/classes/Marshal.html" class="external text" title="http://www.ruby-doc.org/core/classes/Marshal.html" rel="nofollow">Marshal</a></code> with 2 methods <code>dump</code> and <code>load</code>, akin to the standard Unix utilities <code><a href="/wiki/Dump_(program)" title="Dump (program)">dump</a></code> and <code><a href="/w/index.php?title=Restore_(program)&amp;action=edit&amp;redlink=1" class="new" title="Restore (program) (page does not exist)">restore</a></code>. These methods serialize to the standard class <code>String</code>, that is, they effectively become a sequence of bytes.</p>
<p>Some objects can't be serialized (doing so would raise a <code>TypeError</code> exception):</p>
<ul>
<li>bindings,</li>
<li>procedure objects,</li>
<li>instances of class IO,</li>
<li>singleton objects</li>
</ul>
<p>If a class requires custom serialization (for example, it requires certain cleanup actions done on dumping / restoring), it can be done by implementing 2 methods: <code>_dump</code> and <code>_load</code>. The instance method <code>_dump</code> should return a <code>String</code> object containing all the information necessary to reconstitute objects of this class and all referenced objects up to a maximum depth given as an integer parameter (a value of -1 implies that depth checking should be disabled). The class method <code>_load</code> should take a <code>String</code> and return an object of this class.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-ruby">
<span class="kw1">class</span> Klass
  <span class="kw1">def</span> initialize<span class="br0">(</span>str<span class="br0">)</span>
    <span class="re1">@str</span> = str
  <span class="kw1">end</span>
  <span class="kw1">def</span> sayHello
    <span class="re1">@str</span>
  <span class="kw1">end</span>
<span class="kw1">end</span>
 
o = Klass.<span class="me1">new</span><span class="br0">(</span><span class="st0">"hello<span class="es0">\n</span>"</span><span class="br0">)</span>
data = <span class="kw4">Marshal</span>.<span class="me1">dump</span><span class="br0">(</span>o<span class="br0">)</span>
obj = <span class="kw4">Marshal</span>.<span class="kw3">load</span><span class="br0">(</span>data<span class="br0">)</span>
obj.<span class="me1">sayHello</span>   »  <span class="st0">"hello<span class="es0">\n</span>"</span>
</pre></div>
<p><a name="Smalltalk" id="Smalltalk"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Serialization&amp;action=edit&amp;section=25" title="Edit section: Smalltalk">edit</a>]</span> <span class="mw-headline"><a href="/wiki/Smalltalk" title="Smalltalk">Smalltalk</a></span></h3>
<p><a name="Squeak_Smalltalk" id="Squeak_Smalltalk"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Serialization&amp;action=edit&amp;section=26" title="Edit section: Squeak Smalltalk">edit</a>]</span> <span class="mw-headline">Squeak Smalltalk</span></h4>
<p>There are several ways in <a href="/wiki/Squeak" title="Squeak">Squeak Smalltalk</a> to serialize and store objects. The easiest and most used method will be shown below. Other classes of interest in Squeak for serializing objects are <code>SmartRefStream</code> and <code>ImageSegment</code>.</p>
<p>To store a Dictionary (sometimes called a <a href="/wiki/Hash_map" title="Hash map" class="mw-redirect">hash map</a> in other languages) containing some nonsense data of varying types into a file named "data.obj":</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-smalltalk">
|<span class="re3"> data rr </span>|
<span class="re6">data</span> := <span class="re0">Dictionary</span> new.
<span class="re5">data</span> at: <span class="re1">#Meef</span> put: <span class="re5"><span class="nu0">25</span></span>;
 at: <span class="re5"><span class="nu0">23</span></span> put: <span class="st0">'Amanda'</span>;
 at: <span class="st0">'Small Numbers'</span> put: <span class="re2">#<span class="br0">(</span><span class="re5"><span class="nu0">0</span></span> <span class="nu0">1</span> <span class="nu0">2</span> <span class="nu0">3</span> four<span class="br0">)</span></span>.
<span class="re5">rr</span> := <span class="re0">ReferenceStream</span> fileNamed: <span class="st0">'data.obj'</span>.
<span class="re5">rr</span> nextPut: <span class="re5">data</span>; close.
</pre></div>
<p>To restore the <code>Dictionary</code> object stored in "data.obj" and bring up an inspector containing the data:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-smalltalk">
|<span class="re3"> restoredData rr </span>|
<span class="re6">rr</span> := <span class="re0">ReferenceStream</span> fileNamed: <span class="st0">'data.obj'</span>.
<span class="re5">restoredData</span> := <span class="re5">rr</span> next.
<span class="re5">restoredData</span> inspect.
<span class="re5">rr</span> close.
</pre></div>
<p><a name="Other_Smalltalk_dialects" id="Other_Smalltalk_dialects"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Serialization&amp;action=edit&amp;section=27" title="Edit section: Other Smalltalk dialects">edit</a>]</span> <span class="mw-headline">Other Smalltalk dialects</span></h4>
<p>Object serialization is not part of the ANSI Smalltalk specification. As a result, the code to serialize an object varies by Smalltalk implementation. The resulting binary data also varies. For instance, a serialized object created in Squeak Smalltalk cannot be restored in <a href="/wiki/Ambrai_Smalltalk" title="Ambrai Smalltalk">Ambrai Smalltalk</a>. Consequently, various applications that do work on multiple Smalltalk implementations that rely on object serialization cannot share data between these different implementations. These applications include the MinneStore object database <a href="http://minnestore.sourceforge.net/" class="external autonumber" title="http://minnestore.sourceforge.net/" rel="nofollow">[1]</a> and some <a href="/wiki/Remote_procedure_call" title="Remote procedure call">RPC</a> packages. A solution to this problem is SIXX <a href="http://www.mars.dti.ne.jp/~umejava/smalltalk/sixx/index.html" class="external autonumber" title="http://www.mars.dti.ne.jp/~umejava/smalltalk/sixx/index.html" rel="nofollow">[2]</a>, which is an package for multiple Smalltalks that uses an <a href="/wiki/XML" title="XML">XML</a>-based format for serialization.</p>
<p><a name="Lisp" id="Lisp"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Serialization&amp;action=edit&amp;section=28" title="Edit section: Lisp">edit</a>]</span> <span class="mw-headline">Lisp</span></h3>
<p>Generally a <a href="/wiki/Lisp_(programming_language)" title="Lisp (programming language)">Lisp</a> data structure can be serialized with the functions "<code>read</code>" and "<code>print</code>". A variable foo containing, for example, a list of arrays would be printed by <code>(print foo)</code>. Similarly an object can be read from a stream named s by <code>(read s)</code>. These two parts of the Lisp implementation are called the Printer and the Reader. The output of "<code>print</code>" is human readable; it uses lists demarked by parentheses, for example: <code>(4 2.9 "x" y)</code>.</p>
<p>In many types of Lisp, including <a href="/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a>, the printer cannot represent every type of data because it is not clear how to do so. In Common Lisp for example the printer cannot print CLOS objects. Instead the programmer may write a method on the generic function <code>print-object</code>, this will be invoked when the object is printed. This is somewhat similar to the method used in Ruby.</p>
<p>Lisp code itself is written in the syntax of the reader, called read syntax. Most languages use separate and different parsers to deal with code and data, Lisp only uses one. A file containing lisp code may be read into memory as a data structure, transformed by another program, then possibly executed or written out. See <a href="/wiki/REPL" title="REPL" class="mw-redirect">REPL</a>.</p>
<p><a name="Haskell" id="Haskell"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Serialization&amp;action=edit&amp;section=29" title="Edit section: Haskell">edit</a>]</span> <span class="mw-headline">Haskell</span></h3>
<p>In Haskell, serialization is supported for types by inheritance of the Read and Show type classes. Every type that inherits the <code>Read</code> class defines a function that will extract the data from the string representation of the dumped data. The <code>Show</code> class, in turn, contains the show function from which a string representation of the object can be generated.</p>
<p>The programmer need not define the functions explicitly -- merely declaring a type to be deriving Read or deriving Show, or both, will make the compiler generate the appropriate functions.</p>
<p><a name="Windows_PowerShell" id="Windows_PowerShell"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Serialization&amp;action=edit&amp;section=30" title="Edit section: Windows PowerShell">edit</a>]</span> <span class="mw-headline">Windows PowerShell</span></h3>
<p><a href="/wiki/Windows_PowerShell" title="Windows PowerShell">Windows PowerShell</a> implements serialization through the <a href="/wiki/Shell_builtin" title="Shell builtin">built-in</a> cmdlet <code>Export-CliXML</code>. <code>Export-CliXML</code> serializes .NET objects and stores the resulting XML in a file.</p>
<p>To reconstitute the objects, use the <code>Import-CliXML</code> cmdlet, which generates a deserialized object from the XML in the exported file. Deserialized objects, often known as "property bags" are not live objects; they are snapshots that have properties, but no methods.</p>
<pre>
# Create a hash with some nested data structures
$struct = @{text = 'Hello, world!'; list = 1,2,3}
</pre>
<pre>
# Serialize the hash into an XML file
$struct | Export-CliXML serialized.xml
</pre>
<pre>
# Read the data back later
$newstruct = Import-CliXML serialized.xml
</pre>
<p>The serialized data structures are stored in <a href="/wiki/XML" title="XML">XML</a> format:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-xml">
<span class="sc3"><span class="re1">&lt;Objs</span> <span class="re0">Version</span>=<span class="st0">"1.1"</span> <span class="re0">xmlns</span>=<span class="st0">"http://schemas.microsoft.com/powershell/2004/04"</span><span class="re2">&gt;</span></span>
  <span class="sc3"><span class="re1">&lt;Obj</span> <span class="re0">RefId</span>=<span class="st0">"RefId-0"</span><span class="re2">&gt;</span></span>
    <span class="sc3"><span class="re1">&lt;TN</span> <span class="re0">RefId</span>=<span class="st0">"RefId-0"</span><span class="re2">&gt;</span></span>
      <span class="sc3"><span class="re1">&lt;T<span class="re2">&gt;</span></span></span>System.Collections.Hashtable<span class="sc3"><span class="re1">&lt;/T<span class="re2">&gt;</span></span></span>
      <span class="sc3"><span class="re1">&lt;T<span class="re2">&gt;</span></span></span>System.Object<span class="sc3"><span class="re1">&lt;/T<span class="re2">&gt;</span></span></span>
    <span class="sc3"><span class="re1">&lt;/TN<span class="re2">&gt;</span></span></span>
    <span class="sc3"><span class="re1">&lt;DCT<span class="re2">&gt;</span></span></span>
      <span class="sc3"><span class="re1">&lt;En<span class="re2">&gt;</span></span></span>
        <span class="sc3"><span class="re1">&lt;S</span> <span class="re0">N</span>=<span class="st0">"Key"</span><span class="re2">&gt;</span></span>text<span class="sc3"><span class="re1">&lt;/S<span class="re2">&gt;</span></span></span>
        <span class="sc3"><span class="re1">&lt;S</span> <span class="re0">N</span>=<span class="st0">"Value"</span><span class="re2">&gt;</span></span>Hello, world!<span class="sc3"><span class="re1">&lt;/S<span class="re2">&gt;</span></span></span>
      <span class="sc3"><span class="re1">&lt;/En<span class="re2">&gt;</span></span></span>
      <span class="sc3"><span class="re1">&lt;En<span class="re2">&gt;</span></span></span>
        <span class="sc3"><span class="re1">&lt;S</span> <span class="re0">N</span>=<span class="st0">"Key"</span><span class="re2">&gt;</span></span>list<span class="sc3"><span class="re1">&lt;/S<span class="re2">&gt;</span></span></span>
        <span class="sc3"><span class="re1">&lt;Obj</span> <span class="re0">N</span>=<span class="st0">"Value"</span> <span class="re0">RefId</span>=<span class="st0">"RefId-1"</span><span class="re2">&gt;</span></span>
          <span class="sc3"><span class="re1">&lt;TN</span> <span class="re0">RefId</span>=<span class="st0">"RefId-1"</span><span class="re2">&gt;</span></span>
            <span class="sc3"><span class="re1">&lt;T<span class="re2">&gt;</span></span></span>System.Object[]<span class="sc3"><span class="re1">&lt;/T<span class="re2">&gt;</span></span></span>
            <span class="sc3"><span class="re1">&lt;T<span class="re2">&gt;</span></span></span>System.Array<span class="sc3"><span class="re1">&lt;/T<span class="re2">&gt;</span></span></span>
            <span class="sc3"><span class="re1">&lt;T<span class="re2">&gt;</span></span></span>System.Object<span class="sc3"><span class="re1">&lt;/T<span class="re2">&gt;</span></span></span>
          <span class="sc3"><span class="re1">&lt;/TN<span class="re2">&gt;</span></span></span>
          <span class="sc3"><span class="re1">&lt;LST<span class="re2">&gt;</span></span></span>
            <span class="sc3"><span class="re1">&lt;I32<span class="re2">&gt;</span></span></span>1<span class="sc3"><span class="re1">&lt;/I32<span class="re2">&gt;</span></span></span>
            <span class="sc3"><span class="re1">&lt;I32<span class="re2">&gt;</span></span></span>2<span class="sc3"><span class="re1">&lt;/I32<span class="re2">&gt;</span></span></span>
            <span class="sc3"><span class="re1">&lt;I32<span class="re2">&gt;</span></span></span>3<span class="sc3"><span class="re1">&lt;/I32<span class="re2">&gt;</span></span></span>
          <span class="sc3"><span class="re1">&lt;/LST<span class="re2">&gt;</span></span></span>
        <span class="sc3"><span class="re1">&lt;/Obj<span class="re2">&gt;</span></span></span>
      <span class="sc3"><span class="re1">&lt;/En<span class="re2">&gt;</span></span></span>
    <span class="sc3"><span class="re1">&lt;/DCT<span class="re2">&gt;</span></span></span>
  <span class="sc3"><span class="re1">&lt;/Obj<span class="re2">&gt;</span></span></span>
<span class="sc3"><span class="re1">&lt;/Objs<span class="re2">&gt;</span></span></span>
</pre></div>
<p>Two dimensional data structures can also be (de)serialized in <a href="/wiki/Comma-separated_values" title="Comma-separated values">CSV</a> format using the built-in cmdlets <code>Import-CSV</code> and <code>Export-CSV</code>.</p>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Serialization&amp;action=edit&amp;section=31" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<ul>
<li><a href="/wiki/Differential_Execution" title="Differential Execution" class="mw-redirect">Differential Execution</a></li>
<li><a href="/wiki/Hibernate_(Java)" title="Hibernate (Java)">Hibernate (Java)</a></li>
<li><a href="/wiki/Persistor.NET" title="Persistor.NET">Persistor.NET</a></li>
<li><a href="/wiki/XML_Schema" title="XML Schema" class="mw-redirect">XML Schema</a></li>
</ul>
<p><a name="Notes" id="Notes"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Serialization&amp;action=edit&amp;section=32" title="Edit section: Notes">edit</a>]</span> <span class="mw-headline">Notes</span></h2>
<div class="references-small">
<ol class="references">
<li id="cite_note-0"><b><a href="#cite_ref-0" title="">^</a></b> <a href="http://access1.sun.com/FAQSets/jdbcfaq.html#10" class="external free" title="http://access1.sun.com/FAQSets/jdbcfaq.html#10" rel="nofollow">http://access1.sun.com/FAQSets/jdbcfaq.html#10</a></li>
</ol>
</div>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Serialization&amp;action=edit&amp;section=33" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<p>For Java:</p>
<ul>
<li><a href="http://java.sun.com/javase/6/docs/technotes/guides/serialization" class="external text" title="http://java.sun.com/javase/6/docs/technotes/guides/serialization" rel="nofollow">Java Object Serialization documentation</a></li>
<li><a href="http://java.sun.com/j2se/1.4.2/docs/guide/serialization/index.html" class="external text" title="http://java.sun.com/j2se/1.4.2/docs/guide/serialization/index.html" rel="nofollow">Java 1.4 Object Serialization documentation</a>.</li>
<li><a href="http://java.sun.com/javase/6/docs/technotes/guides/../../platform/serialization/spec/serialTOC.html" class="external text" title="http://java.sun.com/javase/6/docs/technotes/guides/../../platform/serialization/spec/serialTOC.html" rel="nofollow">Java Object Serialization Specification</a></li>
<li><a href="http://beginner-java-tutorial.com/object-serialization.html" class="external text" title="http://beginner-java-tutorial.com/object-serialization.html" rel="nofollow">Java Object Serialization</a></li>
<li><a href="http://www.macchiato.com/columns/Durable4.html" class="external text" title="http://www.macchiato.com/columns/Durable4.html" rel="nofollow">Durable Java: Serialization</a></li>
<li><a href="http://rpbourret.com/xml/XMLDataBinding.htm" class="external text" title="http://rpbourret.com/xml/XMLDataBinding.htm" rel="nofollow">XML Data Binding Resources</a></li>
<li><a href="http://joafip.sourceforge.net/" class="external text" title="http://joafip.sourceforge.net/" rel="nofollow">JOAFIP java data object persistence in file</a></li>
</ul>
<p>For C:</p>
<ul>
<li><a href="http://s11n.net/c11n/" class="external text" title="http://s11n.net/c11n/" rel="nofollow">c11n</a></li>
</ul>
<p>For C++:</p>
<ul>
<li><a href="http://www.parashift.com/c++-faq-lite/serialization.html" class="external text" title="http://www.parashift.com/c++-faq-lite/serialization.html" rel="nofollow">Serialization and Unserialization</a></li>
<li><a href="http://www.boost.org/libs/serialization/doc/index.html" class="external text" title="http://www.boost.org/libs/serialization/doc/index.html" rel="nofollow">Boost Serialization</a></li>
<li><a href="http://s11n.net/" class="external text" title="http://s11n.net/" rel="nofollow">s11n</a></li>
<li><a href="http://www.sweetsoftware.co.nz/persist_overview.php" class="external text" title="http://www.sweetsoftware.co.nz/persist_overview.php" rel="nofollow">Sweet Persist</a></li>
<li><a href="http://sourceforge.net/projects/dyndlgdemo" class="external text" title="http://sourceforge.net/projects/dyndlgdemo" rel="nofollow">Dynamic Dialogs</a></li>
</ul>
<p>For PHP:</p>
<ul>
<li><a href="http://www.shauninman.com/archive/2008/01/08/recovering_truncated_php_serialized_arrays" class="external text" title="http://www.shauninman.com/archive/2008/01/08/recovering_truncated_php_serialized_arrays" rel="nofollow">Recovering Truncated PHP Serialized Arrays</a></li>
</ul>
<p>For Protocol Buffers (C++, Java, Python):</p>
<ul>
<li><a href="http://code.google.com/apis/protocolbuffers/docs/overview.html" class="external text" title="http://code.google.com/apis/protocolbuffers/docs/overview.html" rel="nofollow">Google Protocol Buffers Developer Guide</a></li>
</ul>


<!-- 
NewPP limit report
Preprocessor node count: 353/1000000
Post-expand include size: 4854/2048000 bytes
Template argument size: 1748/2048000 bytes
Expensive parser function count: 0/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:28555-0!1!0!default!!en!2 and timestamp 20090402073316 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Serialization">http://en.wikipedia.org/wiki/Serialization</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Programming_constructs" title="Category:Programming constructs">Programming constructs</a></span> | <span dir='ltr'><a href="/wiki/Category:Data_structures" title="Category:Data structures">Data structures</a></span> | <span dir='ltr'><a href="/wiki/Category:Data_serialization_formats" title="Category:Data serialization formats">Data serialization formats</a></span> | <span dir='ltr'><a href="/wiki/Category:Persistence" title="Category:Persistence">Persistence</a></span></div><div id="mw-hidden-catlinks" class="mw-hidden-cats-hidden">Hidden categories:&#32;<span dir='ltr'><a href="/wiki/Category:Articles_lacking_in-text_citations" title="Category:Articles lacking in-text citations">Articles lacking in-text citations</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Serialization" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Serialization" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Serialization&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Serialization&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Serialization" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Serialization" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Serialization" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Serialization&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Serialization&amp;oldid=280993126" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Serialization&amp;id=280993126">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-als"><a href="http://als.wikipedia.org/wiki/Serialisierung">Alemannisch</a></li>
				<li class="interwiki-ca"><a href="http://ca.wikipedia.org/wiki/Serialitzaci%C3%B3">Català</a></li>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/Serialisierung">Deutsch</a></li>
				<li class="interwiki-es"><a href="http://es.wikipedia.org/wiki/Serializaci%C3%B3n">Español</a></li>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/S%C3%A9rialisation">Français</a></li>
				<li class="interwiki-gl"><a href="http://gl.wikipedia.org/wiki/Serializaci%C3%B3n">Galego</a></li>
				<li class="interwiki-it"><a href="http://it.wikipedia.org/wiki/Serializzazione">Italiano</a></li>
				<li class="interwiki-nl"><a href="http://nl.wikipedia.org/wiki/Serialisatie">Nederlands</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/%E3%82%B7%E3%83%AA%E3%82%A2%E3%83%A9%E3%82%A4%E3%82%BA">日本語</a></li>
				<li class="interwiki-pl"><a href="http://pl.wikipedia.org/wiki/Serializacja">Polski</a></li>
				<li class="interwiki-pt"><a href="http://pt.wikipedia.org/wiki/Serializa%C3%A7%C3%A3o">Português</a></li>
				<li class="interwiki-ru"><a href="http://ru.wikipedia.org/wiki/%D0%A1%D0%B5%D1%80%D0%B8%D0%B0%D0%BB%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F">Русский</a></li>
				<li class="interwiki-sk"><a href="http://sk.wikipedia.org/wiki/Marshalling">Slovenčina</a></li>
				<li class="interwiki-zh"><a href="http://zh.wikipedia.org/wiki/%E5%BA%8F%E5%88%97%E5%8C%96">中文</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 1 April 2009, at 01:51.</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv196 in 0.161 secs. --></body></html>
