<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Singleton pattern,Design Patterns Patterns,1996,Abstract Window Toolkit,Abstract class,Abstract factory pattern,Adapter pattern,Alex Martelli,Anti-pattern,Anti pattern,Binding (computer science)" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Singleton_pattern&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Singleton_pattern&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Singleton pattern - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Singleton_pattern";
		var wgTitle = "Singleton pattern";
		var wgAction = "view";
		var wgArticleId = "65041";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281568387;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
<style type="text/css">/*<![CDATA[*/
.source-java {line-height: normal;}
.source-java li, .source-java pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for java
 * CSS class: source-java, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-java .de1, .source-java .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-java  {}
.source-java .head {}
.source-java .foot {}
.source-java .imp {font-weight: bold; color: red;}
.source-java .ln-xtra {color: #cc0; background-color: #ffc;}
.source-java li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-java li.li2 {font-weight: bold;}
.source-java .kw1 {color: #b1b100;}
.source-java .kw2 {color: #000000; font-weight: bold;}
.source-java .kw3 {color: #aaaadd; font-weight: bold;}
.source-java .kw4 {color: #993333;}
.source-java .co1 {color: #808080; font-style: italic;}
.source-java .co2 {color: #a1a100;}
.source-java .coMULTI {color: #808080; font-style: italic;}
.source-java .es0 {color: #000099; font-weight: bold;}
.source-java .br0 {color: #66cc66;}
.source-java .st0 {color: #ff0000;}
.source-java .nu0 {color: #cc66cc;}
.source-java .me1 {color: #006600;}
.source-java .me2 {color: #006600;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-d {line-height: normal;}
.source-d li, .source-d pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for d
 * CSS class: source-d, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-d .de1, .source-d .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-d  {}
.source-d .head {}
.source-d .foot {}
.source-d .imp {font-weight: bold; color: red;}
.source-d .ln-xtra {color: #cc0; background-color: #ffc;}
.source-d li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-d li.li2 {font-weight: bold;}
.source-d .kw1 {color: #b1b100;}
.source-d .kw2 {color: #000000; font-weight: bold;}
.source-d .kw3 {color: #aaaadd; font-weight: bold;}
.source-d .kw4 {color: #993333;}
.source-d .co1 {color: #808080; font-style: italic;}
.source-d .co2 {color: #a1a100;}
.source-d .coMULTI {color: #808080; font-style: italic;}
.source-d .es0 {color: #000099; font-weight: bold;}
.source-d .br0 {color: #66cc66;}
.source-d .st0 {color: #ff0000;}
.source-d .nu0 {color: #cc66cc;}
.source-d .me1 {color: #006600;}
.source-d .me2 {color: #006600;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-php {line-height: normal;}
.source-php li, .source-php pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for php
 * CSS class: source-php, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-php .de1, .source-php .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-php  {}
.source-php .head {}
.source-php .foot {}
.source-php .imp {font-weight: bold; color: red;}
.source-php .ln-xtra {color: #cc0; background-color: #ffc;}
.source-php li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-php li.li2 {font-weight: bold;}
.source-php .kw1 {color: #b1b100;}
.source-php .kw2 {color: #000000; font-weight: bold;}
.source-php .kw3 {color: #000066;}
.source-php .co1 {color: #808080; font-style: italic;}
.source-php .co2 {color: #808080; font-style: italic;}
.source-php .coMULTI {color: #808080; font-style: italic;}
.source-php .es0 {color: #000099; font-weight: bold;}
.source-php .br0 {color: #66cc66;}
.source-php .st0 {color: #ff0000;}
.source-php .nu0 {color: #cc66cc;}
.source-php .me1 {color: #006600;}
.source-php .me2 {color: #006600;}
.source-php .sc0 {}
.source-php .sc1 {}
.source-php .sc2 {}
.source-php .sc3 {}
.source-php .re0 {color: #0000ff;}
.source-php .re1 {color: #ff0000}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-actionscript {line-height: normal;}
.source-actionscript li, .source-actionscript pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for actionscript
 * CSS class: source-actionscript, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-actionscript .de1, .source-actionscript .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-actionscript  {}
.source-actionscript .head {}
.source-actionscript .foot {}
.source-actionscript .imp {font-weight: bold; color: red;}
.source-actionscript .ln-xtra {color: #cc0; background-color: #ffc;}
.source-actionscript li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-actionscript li.li2 {font-weight: bold;}
.source-actionscript .kw1 {color: #b1b100;}
.source-actionscript .kw2 {color: #000000; font-weight: bold;}
.source-actionscript .kw3 {color: #0066CC;}
.source-actionscript .co1 {color: #808080; font-style: italic;}
.source-actionscript .co2 {color: #808080; font-style: italic;}
.source-actionscript .coMULTI {color: #808080; font-style: italic;}
.source-actionscript .es0 {color: #000099; font-weight: bold;}
.source-actionscript .br0 {color: #66cc66;}
.source-actionscript .st0 {color: #ff0000;}
.source-actionscript .nu0 {color: #cc66cc;}
.source-actionscript .me1 {color: #006600;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-objc {line-height: normal;}
.source-objc li, .source-objc pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for objc
 * CSS class: source-objc, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-objc .de1, .source-objc .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-objc  {}
.source-objc .head {}
.source-objc .foot {}
.source-objc .imp {font-weight: bold; color: red;}
.source-objc .ln-xtra {color: #cc0; background-color: #ffc;}
.source-objc li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-objc li.li2 {font-weight: bold;}
.source-objc .kw1 {color: #0000ff;}
.source-objc .kw2 {color: #0000ff;}
.source-objc .kw3 {color: #0000dd;}
.source-objc .kw4 {color: #0000ff;}
.source-objc .kw5 {color: #0000ff;}
.source-objc .kw6 {color: #0000ff;}
.source-objc .co1 {color: #ff0000;}
.source-objc .co2 {color: #339900;}
.source-objc .coMULTI {color: #ff0000; font-style: italic;}
.source-objc .es0 {color: #666666; font-weight: bold;}
.source-objc .br0 {color: #002200;}
.source-objc .st0 {color: #666666;}
.source-objc .nu0 {color: #0000dd;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-cpp {line-height: normal;}
.source-cpp li, .source-cpp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for cpp
 * CSS class: source-cpp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-cpp .de1, .source-cpp .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-cpp  {}
.source-cpp .head {}
.source-cpp .foot {}
.source-cpp .imp {font-weight: bold; color: red;}
.source-cpp .ln-xtra {color: #cc0; background-color: #ffc;}
.source-cpp li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-cpp li.li2 {font-weight: bold;}
.source-cpp .kw1 {color: #0000ff;}
.source-cpp .kw2 {color: #0000ff;}
.source-cpp .kw3 {color: #0000dd;}
.source-cpp .kw4 {color: #0000ff;}
.source-cpp .co1 {color: #ff0000;}
.source-cpp .co2 {color: #339900;}
.source-cpp .coMULTI {color: #ff0000; font-style: italic;}
.source-cpp .es0 {color: #666666; font-weight: bold;}
.source-cpp .br0 {color: #000000;}
.source-cpp .st0 {color: #666666;}
.source-cpp .nu0 {color: #0000dd;}
.source-cpp .me1 {color: #00eeff;}
.source-cpp .me2 {color: #00eeff;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-csharp {line-height: normal;}
.source-csharp li, .source-csharp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for csharp
 * CSS class: source-csharp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-csharp .de1, .source-csharp .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-csharp  {}
.source-csharp .head {}
.source-csharp .foot {}
.source-csharp .imp {font-weight: bold; color: red;}
.source-csharp .ln-xtra {color: #cc0; background-color: #ffc;}
.source-csharp li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-csharp li.li2 {font-weight: bold;}
.source-csharp .kw1 {color: #0600FF;}
.source-csharp .kw2 {color: #FF8000; font-weight: bold;}
.source-csharp .kw3 {color: #008000;}
.source-csharp .kw4 {color: #FF0000;}
.source-csharp .kw5 {color: #000000;}
.source-csharp .co1 {color: #008080; font-style: italic;}
.source-csharp .co2 {color: #008080;}
.source-csharp .coMULTI {color: #008080; font-style: italic;}
.source-csharp .es0 {color: #008080; font-weight: bold;}
.source-csharp .br0 {color: #008000;}
.source-csharp .st0 {color: #808080;}
.source-csharp .nu0 {color: #FF0000;}
.source-csharp .me1 {color: #0000FF;}
.source-csharp .me2 {color: #0000FF;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-pascal {line-height: normal;}
.source-pascal li, .source-pascal pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for pascal
 * CSS class: source-pascal, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-pascal .de1, .source-pascal .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-pascal  {}
.source-pascal .head {}
.source-pascal .foot {}
.source-pascal .imp {font-weight: bold; color: red;}
.source-pascal .ln-xtra {color: #cc0; background-color: #ffc;}
.source-pascal li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-pascal li.li2 {font-weight: bold;}
.source-pascal .kw1 {color: #b1b100;}
.source-pascal .kw2 {color: #000000; font-weight: bold;}
.source-pascal .kw3 {}
.source-pascal .kw4 {color: #993333;}
.source-pascal .co1 {color: #808080; font-style: italic;}
.source-pascal .co2 {color: #339933;}
.source-pascal .coMULTI {color: #808080; font-style: italic;}
.source-pascal .es0 {color: #000099; font-weight: bold;}
.source-pascal .br0 {color: #66cc66;}
.source-pascal .st0 {color: #ff0000;}
.source-pascal .nu0 {color: #cc66cc;}
.source-pascal .me1 {color: #202020;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-python {line-height: normal;}
.source-python li, .source-python pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for python
 * CSS class: source-python, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-python .de1, .source-python .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-python  {}
.source-python .head {}
.source-python .foot {}
.source-python .imp {font-weight: bold; color: red;}
.source-python .ln-xtra {color: #cc0; background-color: #ffc;}
.source-python li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-python li.li2 {font-weight: bold;}
.source-python .kw1 {color: #ff7700;font-weight:bold;}
.source-python .kw2 {color: #008000;}
.source-python .kw3 {color: #dc143c;}
.source-python .kw4 {color: #0000cd;}
.source-python .co1 {color: #808080; font-style: italic;}
.source-python .coMULTI {color: #808080; font-style: italic;}
.source-python .es0 {color: #000099; font-weight: bold;}
.source-python .br0 {color: #66cc66;}
.source-python .st0 {color: #483d8b;}
.source-python .nu0 {color: #ff4500;}
.source-python .me1 {color: black;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-perl {line-height: normal;}
.source-perl li, .source-perl pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for perl
 * CSS class: source-perl, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-perl .de1, .source-perl .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-perl  {}
.source-perl .head {}
.source-perl .foot {}
.source-perl .imp {font-weight: bold; color: red;}
.source-perl .ln-xtra {color: #cc0; background-color: #ffc;}
.source-perl li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-perl li.li2 {font-weight: bold;}
.source-perl .kw1 {color: #b1b100;}
.source-perl .kw2 {color: #000000; font-weight: bold;}
.source-perl .kw3 {color: #000066;}
.source-perl .co1 {color: #808080; font-style: italic;}
.source-perl .coMULTI {color: #808080; font-style: italic;}
.source-perl .es0 {color: #000099; font-weight: bold;}
.source-perl .br0 {color: #66cc66;}
.source-perl .st0 {color: #ff0000;}
.source-perl .nu0 {color: #cc66cc;}
.source-perl .me1 {color: #006600;}
.source-perl .me2 {color: #006600;}
.source-perl .re0 {color: #0000ff;}
.source-perl .re4 {color: #009999;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-ruby {line-height: normal;}
.source-ruby li, .source-ruby pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for ruby
 * CSS class: source-ruby, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-ruby .de1, .source-ruby .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-ruby  {}
.source-ruby .head {}
.source-ruby .foot {}
.source-ruby .imp {font-weight: bold; color: red;}
.source-ruby .ln-xtra {color: #cc0; background-color: #ffc;}
.source-ruby li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-ruby li.li2 {font-weight: bold;}
.source-ruby .kw1 {color:#9966CC; font-weight:bold;}
.source-ruby .kw2 {color:#0000FF; font-weight:bold;}
.source-ruby .kw3 {color:#CC0066; font-weight:bold;}
.source-ruby .kw4 {color:#CC00FF; font-weight:bold;}
.source-ruby .co1 {color:#008000; font-style:italic;}
.source-ruby .coMULTI {color:#000080; font-style:italic;}
.source-ruby .es0 {color:#000099;}
.source-ruby .br0 {color:#006600; font-weight:bold;}
.source-ruby .st0 {color:#996600;}
.source-ruby .nu0 {color:#006666;}
.source-ruby .me1 {color:#9900CC;}
.source-ruby .sc0 {}
.source-ruby .sc1 {}
.source-ruby .sc2 {}
.source-ruby .re0 {color:#ff6633; font-weight:bold;}
.source-ruby .re1 {color:#0066ff; font-weight:bold;}
.source-ruby .re2 {color:#6666ff; font-weight:bold;}
.source-ruby .re3 {color:#ff3333; font-weight:bold;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style>		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Singleton_pattern skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Singleton pattern</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<table class="metadata plainlinks ambox ambox-style" style="">
<tr>
<td class="mbox-image">
<div style="width: 52px;"><a href="/wiki/File:Ambox_style.png" class="image" title="Ambox style.png"><img alt="" src="http://upload.wikimedia.org/wikipedia/en/d/d6/Ambox_style.png" width="40" height="40" border="0" /></a></div>
</td>
<td class="mbox-text" style="">This article's <a href="/wiki/Wikipedia:External_links" title="Wikipedia:External links">external links</a> <b>may not follow Wikipedia's <a href="/wiki/Wikipedia:What_Wikipedia_is_not#Wikipedia_is_not_a_mirror_or_a_repository_of_links.2C_images.2C_or_media_files" title="Wikipedia:What Wikipedia is not">content policies</a> or <a href="/wiki/Wikipedia:External_links" title="Wikipedia:External links">guidelines</a></b>. Please <a href="http://en.wikipedia.org/w/index.php?title=Singleton_pattern&amp;action=edit" class="external text" title="http://en.wikipedia.org/w/index.php?title=Singleton_pattern&amp;action=edit" rel="nofollow">improve this article</a> by removing excessive or inappropriate external links.</td>
</tr>
</table>
<p>In <a href="/wiki/Software_engineering" title="Software engineering">software engineering</a>, the <b>singleton pattern</b> is a <a href="/wiki/Design_pattern_(computer_science)" title="Design pattern (computer science)">design pattern</a> that is used to restrict <a href="/wiki/Instantiation_(computer_science)" title="Instantiation (computer science)" class="mw-redirect">instantiation</a> of a class to one <a href="/wiki/Object-oriented_programming" title="Object-oriented programming">object</a>. (This concept is also sometimes generalized to restrict the instance to a specific number of objects - for example, we can restrict the number of instances to five objects.) This is useful when exactly one object is needed to coordinate actions across the system. Sometimes it is generalized to systems that operate more efficiently when only one or a few objects exist. It is also considered an <a href="/wiki/Anti-pattern" title="Anti-pattern">anti-pattern</a> by some people, who feel that it is overused, introducing unnecessary limitations in situations where a sole instance of a class is not actually required, and introduces <a href="/wiki/Global_variables" title="Global variables" class="mw-redirect">global state</a> into an application. <sup id="cite_ref-0" class="reference"><a href="#cite_note-0" title=""><span>[</span>1<span>]</span></a></sup><sup id="cite_ref-1" class="reference"><a href="#cite_note-1" title=""><span>[</span>2<span>]</span></a></sup><sup id="cite_ref-2" class="reference"><a href="#cite_note-2" title=""><span>[</span>3<span>]</span></a></sup><sup id="cite_ref-3" class="reference"><a href="#cite_note-3" title=""><span>[</span>4<span>]</span></a></sup><sup id="cite_ref-4" class="reference"><a href="#cite_note-4" title=""><span>[</span>5<span>]</span></a></sup><sup id="cite_ref-5" class="reference"><a href="#cite_note-5" title=""><span>[</span>6<span>]</span></a></sup></p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Common_uses"><span class="tocnumber">1</span> <span class="toctext">Common uses</span></a></li>
<li class="toclevel-1"><a href="#Class_diagram"><span class="tocnumber">2</span> <span class="toctext">Class diagram</span></a></li>
<li class="toclevel-1"><a href="#Implementation"><span class="tocnumber">3</span> <span class="toctext">Implementation</span></a></li>
<li class="toclevel-1"><a href="#Example_implementations"><span class="tocnumber">4</span> <span class="toctext">Example implementations</span></a>
<ul>
<li class="toclevel-2"><a href="#Scala"><span class="tocnumber">4.1</span> <span class="toctext">Scala</span></a></li>
<li class="toclevel-2"><a href="#Java"><span class="tocnumber">4.2</span> <span class="toctext">Java</span></a>
<ul>
<li class="toclevel-3"><a href="#Traditional_simple_way"><span class="tocnumber">4.2.1</span> <span class="toctext">Traditional simple way</span></a></li>
<li class="toclevel-3"><a href="#The_solution_of_Bill_Pugh"><span class="tocnumber">4.2.2</span> <span class="toctext">The solution of Bill Pugh</span></a></li>
<li class="toclevel-3"><a href="#Java_5_solution"><span class="tocnumber">4.2.3</span> <span class="toctext">Java 5 solution</span></a></li>
<li class="toclevel-3"><a href="#The_Enum-way"><span class="tocnumber">4.2.4</span> <span class="toctext">The Enum-way</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#D"><span class="tocnumber">4.3</span> <span class="toctext">D</span></a></li>
<li class="toclevel-2"><a href="#PHP_5"><span class="tocnumber">4.4</span> <span class="toctext">PHP 5</span></a></li>
<li class="toclevel-2"><a href="#Actionscript_3.0"><span class="tocnumber">4.5</span> <span class="toctext">Actionscript 3.0</span></a></li>
<li class="toclevel-2"><a href="#Objective-C"><span class="tocnumber">4.6</span> <span class="toctext">Objective-C</span></a></li>
<li class="toclevel-2"><a href="#C.2B.2B"><span class="tocnumber">4.7</span> <span class="toctext">C++</span></a></li>
<li class="toclevel-2"><a href="#C.23"><span class="tocnumber">4.8</span> <span class="toctext">C#</span></a></li>
<li class="toclevel-2"><a href="#Delphi"><span class="tocnumber">4.9</span> <span class="toctext">Delphi</span></a></li>
<li class="toclevel-2"><a href="#Python"><span class="tocnumber">4.10</span> <span class="toctext">Python</span></a></li>
<li class="toclevel-2"><a href="#Perl"><span class="tocnumber">4.11</span> <span class="toctext">Perl</span></a></li>
<li class="toclevel-2"><a href="#Ruby"><span class="tocnumber">4.12</span> <span class="toctext">Ruby</span></a></li>
<li class="toclevel-2"><a href="#ABAP_Objects"><span class="tocnumber">4.13</span> <span class="toctext">ABAP Objects</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Prototype-based_singleton"><span class="tocnumber">5</span> <span class="toctext">Prototype-based singleton</span></a></li>
<li class="toclevel-1"><a href="#Example_of_use_with_the_factory_method_pattern"><span class="tocnumber">6</span> <span class="toctext">Example of use with the factory method pattern</span></a></li>
<li class="toclevel-1"><a href="#Drawbacks"><span class="tocnumber">7</span> <span class="toctext">Drawbacks</span></a></li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">8</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">9</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Common_uses" id="Common_uses"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Singleton_pattern&amp;action=edit&amp;section=1" title="Edit section: Common uses">edit</a>]</span> <span class="mw-headline">Common uses</span></h2>
<ul>
<li>The <a href="/wiki/Abstract_factory_pattern" title="Abstract factory pattern">Abstract Factory</a>, <a href="/wiki/Builder_pattern" title="Builder pattern">Builder</a>, and <a href="/wiki/Prototype_pattern" title="Prototype pattern">Prototype</a> patterns can use Singletons in their implementation.</li>
<li>Facade objects are often Singletons because only one Facade object is required.</li>
<li>State objects are often Singletons.</li>
<li>Singletons are often preferred to global variables because:
<ul>
<li>They don't pollute the global namespace (or, in languages with namespaces, their containing namespace) with unnecessary variables.<sup id="cite_ref-6" class="reference"><a href="#cite_note-6" title=""><span>[</span>7<span>]</span></a></sup></li>
<li>They permit <a href="/wiki/Lazy_evaluation" title="Lazy evaluation">lazy</a> allocation and initialization, where global variables in many languages will <i>always</i> consume resources.</li>
</ul>
</li>
</ul>
<p><a name="Class_diagram" id="Class_diagram"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Singleton_pattern&amp;action=edit&amp;section=2" title="Edit section: Class diagram">edit</a>]</span> <span class="mw-headline">Class diagram</span></h2>
<div class="center">
<div class="floatnone"><a href="/wiki/File:Singleton_UML_class_diagram.svg" class="image" title="Singleton UML class diagram.svg"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Singleton_UML_class_diagram.svg/250px-Singleton_UML_class_diagram.svg.png" width="250" height="150" border="0" /></a></div>
</div>
<p><a name="Implementation" id="Implementation"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Singleton_pattern&amp;action=edit&amp;section=3" title="Edit section: Implementation">edit</a>]</span> <span class="mw-headline">Implementation</span></h2>
<p><b>Implementation</b> of a singleton pattern must satisfy the single instance and global access principles. It requires a mechanism to access the singleton class member without creating a class object and a mechanism to persist the value of class members among class objects. The singleton pattern is implemented by creating a <a href="/wiki/Class_(computer_science)" title="Class (computer science)">class</a> with a method that creates a new instance of the class if one does not exist. If an instance already exists, it simply returns a reference to that object. To make sure that the object cannot be instantiated any other way, the <a href="/wiki/Constructor_(computer_science)" title="Constructor (computer science)">constructor</a> is made protected (not private, because reuse and unit test could need to access the constructor). Note the <b>distinction</b> between a simple static instance of a class and a singleton: although a singleton can be implemented as a static instance, it can also be lazily constructed, requiring no memory or resources until needed. Another notable difference is that static member classes cannot implement an interface, unless that interface is simply a marker. So if the class has to realize a contract expressed by an interface, it really has to be a singleton.</p>
<p>The singleton pattern must be carefully constructed in <a href="/wiki/Thread_(computer_science)" title="Thread (computer science)">multi-threaded</a> applications. If two threads are to execute the creation method at the same time when a singleton does not yet exist, they both must check for an instance of the singleton and then only one should create the new one. If the programming language has concurrent processing capabilities the method should be constructed to execute as a mutually exclusive operation.</p>
<p>The classic solution to this problem is to use <a href="/wiki/Mutual_exclusion" title="Mutual exclusion">mutual exclusion</a> on the class that indicates that the object is being <b>instantiated</b>.</p>
<p><a name="Example_implementations" id="Example_implementations"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Singleton_pattern&amp;action=edit&amp;section=4" title="Edit section: Example implementations">edit</a>]</span> <span class="mw-headline">Example implementations</span></h2>
<p><a name="Scala" id="Scala"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Singleton_pattern&amp;action=edit&amp;section=5" title="Edit section: Scala">edit</a>]</span> <span class="mw-headline">Scala</span></h3>
<p>The <a href="/wiki/Scala_(programming_language)" title="Scala (programming language)">Scala programming language</a> supports Singleton objects out-of-the-box. The 'object' keyword creates a class and also defines a singleton object of that type. As the concept is implemented natively, the design pattern to implement the concept is not required in this language.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-java">
object Example <span class="kw2">extends</span> <span class="kw3">ArrayList</span> <span class="br0">{</span>
    <span class="co1">// creates a singleton called Example</span>
<span class="br0">}</span>
</pre></div>
<p><a name="Java" id="Java"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Singleton_pattern&amp;action=edit&amp;section=6" title="Edit section: Java">edit</a>]</span> <span class="mw-headline">Java</span></h3>
<p>The <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java programming language</a> solutions provided here are all <a href="/wiki/Thread-safe" title="Thread-safe" class="mw-redirect">thread-safe</a> but differ in supported language versions and <a href="/wiki/Lazy_initialization" title="Lazy initialization">lazy-loading</a>.</p>
<p><a name="Traditional_simple_way" id="Traditional_simple_way"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Singleton_pattern&amp;action=edit&amp;section=7" title="Edit section: Traditional simple way">edit</a>]</span> <span class="mw-headline">Traditional simple way</span></h4>
<p>This solution is <a href="/wiki/Thread-safe" title="Thread-safe" class="mw-redirect">thread-safe</a> without requiring special language constructs, but it may lack the laziness of the one below. The INSTANCE is created as soon as the Singleton class is <a href="http://java.sun.com/docs/books/jls/third_edition/html/execution.html#12.4" class="external text" title="http://java.sun.com/docs/books/jls/third_edition/html/execution.html#12.4" rel="nofollow">initialized</a>. That might even be long before getInstance() is called. It might be (for example) when some static method of the class is used. If laziness is not needed or the instance needs to be created early in the application's execution, or your class has no other static members or methods that could prompt early initialization (and thus creation of the instance), this (slightly) simpler solution can be used:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-java">
 <span class="kw2">public</span> <span class="kw2">class</span> Singleton <span class="br0">{</span>
   <span class="kw2">public</span> <span class="kw2">final</span> <span class="kw2">static</span> Singleton INSTANCE = <span class="kw2">new</span> Singleton<span class="br0">(</span><span class="br0">)</span>;
 
   <span class="co1">// Protected constructor is sufficient to suppress unauthorized calls to the constructor</span>
   <span class="kw2">protected</span> Singleton<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span><span class="br0">}</span>
 <span class="br0">}</span>
</pre></div>
<p>Sometimes the static final field is made private and a static factory-method is provided to get the instance. This way the underlying implementation may change easily while it has no more performance-issues on modern JVMs.</p>
<p><a name="The_solution_of_Bill_Pugh" id="The_solution_of_Bill_Pugh"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Singleton_pattern&amp;action=edit&amp;section=8" title="Edit section: The solution of Bill Pugh">edit</a>]</span> <span class="mw-headline">The solution of <a href="/wiki/William_Pugh" title="William Pugh">Bill Pugh</a></span></h4>
<p>This is a recommended method. It is known as the <a href="/wiki/Initialization_on_demand_holder_idiom" title="Initialization on demand holder idiom">initialization on demand holder idiom</a> and is as lazy as possible. Moreover, it works in all known versions of Java. This solution is the most portable across different Java compilers and virtual machines.</p>
<p>The inner class is referenced no earlier (and therefore loaded no earlier by the class loader) than the moment that getInstance() is called. Thus, this solution is <a href="/wiki/Thread-safe" title="Thread-safe" class="mw-redirect">thread-safe</a> without requiring special language constructs (i.e. volatile and/or synchronized).</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-java">
 <span class="kw2">public</span> <span class="kw2">class</span> Singleton <span class="br0">{</span>
   <span class="co1">// Protected constructor is sufficient to suppress unauthorized calls to the constructor</span>
   <span class="kw2">protected</span> Singleton<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span><span class="br0">}</span>
 
   <span class="coMULTI">/**
    * SingletonHolder is loaded on the first execution of Singleton.getInstance() 
    * or the first access to SingletonHolder.INSTANCE, not before.
    */</span>
   <span class="kw2">private</span> <span class="kw2">static</span> <span class="kw2">class</span> SingletonHolder <span class="br0">{</span> 
     <span class="kw2">private</span> <span class="kw2">final</span> <span class="kw2">static</span> Singleton INSTANCE = <span class="kw2">new</span> Singleton<span class="br0">(</span><span class="br0">)</span>;
   <span class="br0">}</span>
 
   <span class="kw2">public</span> <span class="kw2">static</span> Singleton getInstance<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
     <span class="kw2">return</span> SingletonHolder.<span class="me1">INSTANCE</span>;
   <span class="br0">}</span>
 <span class="br0">}</span>
</pre></div>
<p><a name="Java_5_solution" id="Java_5_solution"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Singleton_pattern&amp;action=edit&amp;section=9" title="Edit section: Java 5 solution">edit</a>]</span> <span class="mw-headline">Java 5 solution</span></h4>
<p>If and only if the compiler used is Java 5 (also known as Java 1.5) or newer, AND all Java virtual machines the application is going to run on fully support the Java 5 memory model, then (and only then) the volatile double checked locking can be used (for a detailed discussion of <i>why it should never be done before Java 5</i> see <a href="http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html" class="external text" title="http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html" rel="nofollow">The "Double-Checked Locking is Broken" Declaration</a>):</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-java">
 <span class="kw2">public</span> <span class="kw2">class</span> Singleton <span class="br0">{</span>
   <span class="kw2">private</span> <span class="kw2">static</span> <span class="kw2">volatile</span> Singleton INSTANCE;
 
   <span class="co1">// Protected constructor is sufficient to suppress unauthorized calls to the constructor</span>
   <span class="kw2">protected</span> Singleton<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span><span class="br0">}</span>
 
   <span class="kw2">private</span> <span class="kw2">static</span> <span class="kw2">synchronized</span> Singleton tryCreateInstance<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
     <span class="kw1">if</span> <span class="br0">(</span>INSTANCE == <span class="kw2">null</span><span class="br0">)</span> <span class="br0">{</span>
       INSTANCE = <span class="kw2">new</span> Singleton<span class="br0">(</span><span class="br0">)</span>;
     <span class="br0">}</span>
     <span class="kw2">return</span> INSTANCE;
   <span class="br0">}</span>
 
   <span class="kw2">public</span> <span class="kw2">static</span> Singleton getInstance<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
      <span class="co1">// use local variable, don't issue 2 reads (memory fences) to 'INSTANCE'</span>
      Singleton s = INSTANCE;
      <span class="kw1">if</span> <span class="br0">(</span>s == <span class="kw2">null</span><span class="br0">)</span> <span class="br0">{</span>
        <span class="co1">//check under lock; move creation logic to a separate method to allow inlining of getInstance()</span>
        s = tryCreateInstance<span class="br0">(</span><span class="br0">)</span>;
      <span class="br0">}</span>
      <span class="kw2">return</span> s;
   <span class="br0">}</span>
<span class="br0">}</span>
</pre></div>
<p><b>This example does not properly demonstrate the Double Checking issue since the constructor does not initialize anything.</b> Allen Holub (in "Taming Java Threads", Berkeley, CA: Apress, 2000, pp. 176–178) notes that on multi-CPU systems (which are widespread as of 2009), the use of volatile may have an impact on performance approaching to that of synchronization, and raises the possibility of other problems. Thus this solution has little to recommend it over Pugh's solution described above...</p>
<p><a name="The_Enum-way" id="The_Enum-way"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Singleton_pattern&amp;action=edit&amp;section=10" title="Edit section: The Enum-way">edit</a>]</span> <span class="mw-headline">The Enum-way</span></h4>
<p>In the second edition of his book "Effective Java" <a href="/wiki/Joshua_Bloch" title="Joshua Bloch">Joshua Bloch</a> claims that "a single-element enum type is the best way to implement a singleton"<sup id="cite_ref-7" class="reference"><a href="#cite_note-7" title=""><span>[</span>8<span>]</span></a></sup> for any Java that supports enums. The use of an enum is very easy to implement and has no drawbacks regarding serializable objects, which have to be circumvented in the other ways.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-java">
 <span class="kw2">public</span> <span class="kw2">enum</span> Singleton <span class="br0">{</span>
   INSTANCE;
 <span class="br0">}</span>
</pre></div>
<p><a name="D" id="D"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Singleton_pattern&amp;action=edit&amp;section=11" title="Edit section: D">edit</a>]</span> <span class="mw-headline">D</span></h3>
<p>Singleton pattern in <a href="/wiki/D_programming_language" title="D programming language" class="mw-redirect">D programming language</a></p>
<div dir="ltr" style="text-align: left;">
<pre class="source-d">
<span class="kw2">import</span> std.<span class="me1">stdio</span>;
<span class="kw2">import</span> std.<span class="me1">string</span>;
 
<span class="kw4">class</span> Singleton<span class="br0">(</span>T<span class="br0">)</span> <span class="br0">{</span>
    <span class="kw4">private</span> <span class="kw4">static</span> T instance;
    <span class="kw4">public</span> <span class="kw4">static</span> T opCall<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
        <span class="kw1">if</span><span class="br0">(</span>instance <span class="kw2">is</span> <span class="kw2">null</span><span class="br0">)</span> <span class="br0">{</span>
            instance = <span class="kw2">new</span> T;
        <span class="br0">}</span>
        <span class="kw1">return</span> instance;
    <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="kw4">class</span> Foo <span class="br0">{</span>
    <span class="kw4">public</span> <span class="kw2">this</span><span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
        writefln<span class="br0">(</span><span class="st0">"Foo Constructor"</span><span class="br0">)</span>;
    <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="kw4">void</span> main<span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
    Foo a = Singleton!<span class="br0">(</span>Foo<span class="br0">)</span><span class="br0">(</span><span class="br0">)</span>;
    Foo b = Singleton!<span class="br0">(</span>Foo<span class="br0">)</span><span class="br0">(</span><span class="br0">)</span>;
<span class="br0">}</span>
</pre></div>
<p>Or in this manner</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-d">
<span class="co1">// this class should be in a package to make private this() not visible</span>
<span class="kw4">class</span> Singleton <span class="br0">{</span>
    <span class="kw4">private</span> <span class="kw4">static</span> Singleton instance;
 
    <span class="kw4">public</span> <span class="kw4">static</span> Singleton opCall<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
        <span class="kw1">if</span><span class="br0">(</span>instance <span class="kw2">is</span> <span class="kw2">null</span><span class="br0">)</span> <span class="br0">{</span>
            instance = <span class="kw2">new</span> Singleton<span class="br0">(</span><span class="br0">)</span>;
        <span class="br0">}</span>
        <span class="kw1">return</span> instance;
    <span class="br0">}</span>
 
    <span class="kw4">private</span> <span class="kw2">this</span><span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
        writefln<span class="br0">(</span><span class="st0">"Singleton constructor"</span><span class="br0">)</span>;
    <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="kw4">void</span> main<span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
    Singleton a = Singleton<span class="br0">(</span><span class="br0">)</span>;
    Singleton b = Singleton<span class="br0">(</span><span class="br0">)</span>;
<span class="br0">}</span>
</pre></div>
<p><a name="PHP_5" id="PHP_5"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Singleton_pattern&amp;action=edit&amp;section=12" title="Edit section: PHP 5">edit</a>]</span> <span class="mw-headline">PHP 5</span></h3>
<p>Singleton pattern in PHP 5<sup id="cite_ref-8" class="reference"><a href="#cite_note-8" title=""><span>[</span>9<span>]</span></a></sup><sup id="cite_ref-9" class="reference"><a href="#cite_note-9" title=""><span>[</span>10<span>]</span></a></sup>:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-php">
<span class="kw2">&lt;?php</span>
<span class="kw2">class</span> Singleton <span class="br0">{</span>
 
  <span class="co1">// object instance</span>
  <span class="kw2">private</span> <span class="kw3">static</span> <span class="re0">$instance</span>;
 
  <span class="co1">// The protected construct prevents instantiating the class externally.  The construct can be</span>
  <span class="co1">// empty, or it can contain additional instructions...</span>
  <span class="co1">// This should also be final to prevent extending objects from overriding the constructor with </span>
  <span class="co1">// public.</span>
  protected final <span class="kw2">function</span> __construct<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
    ...
  <span class="br0">}</span>
 
  <span class="co1">// The clone and wakeup methods prevents external instantiation of copies of the Singleton class,</span>
  <span class="co1">// thus eliminating the possibility of duplicate objects.  The methods can be empty, or</span>
  <span class="co1">// can contain additional code (most probably generating error messages in response</span>
  <span class="co1">// to attempts to call).</span>
  <span class="kw2">public</span> <span class="kw2">function</span> __clone<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
    <span class="kw3">trigger_error</span><span class="br0">(</span><span class="st0">'Clone is not allowed.'</span>, <span class="kw2">E_USER_ERROR</span><span class="br0">)</span>;
  <span class="br0">}</span>
 
  <span class="kw2">public</span> <span class="kw2">function</span> __wakeup<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
    <span class="kw3">trigger_error</span><span class="br0">(</span><span class="st0">'Deserializing is not allowed.'</span>, <span class="kw2">E_USER_ERROR</span><span class="br0">)</span>;
  <span class="br0">}</span>
 
  <span class="co1">//This method must be static, and must return an instance of the object if the object</span>
  <span class="co1">//does not already exist.</span>
  <span class="kw2">public</span> <span class="kw3">static</span> <span class="kw2">function</span> getInstance<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
    <span class="kw1">if</span> <span class="br0">(</span>!self::<span class="re0">$instance</span> instanceof self<span class="br0">)</span> <span class="br0">{</span> 
      self::<span class="re0">$instance</span> = <span class="kw2">new</span> self;
    <span class="br0">}</span>
    <span class="kw1">return</span> self::<span class="re0">$instance</span>;
  <span class="br0">}</span>
 
  <span class="co1">//One or more public methods that grant access to the Singleton object, and its private</span>
  <span class="co1">//methods and properties via accessor methods.</span>
  <span class="kw2">public</span> <span class="kw2">function</span> doAction<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
    ...
  <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="co1">//usage</span>
Singleton::<span class="me2">getInstance</span><span class="br0">(</span><span class="br0">)</span>-&gt;<span class="me1">doAction</span><span class="br0">(</span><span class="br0">)</span>;
 
<span class="kw2">?&gt;</span>
</pre></div>
<p><a name="Actionscript_3.0" id="Actionscript_3.0"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Singleton_pattern&amp;action=edit&amp;section=13" title="Edit section: Actionscript 3.0">edit</a>]</span> <span class="mw-headline">Actionscript 3.0</span></h3>
<p>Private constructors are not available in ActionScript 3.0 - which prevents the use of the ActionScript 2.0 approach to the Singleton Pattern. Many different AS3 Singleton implementations have been published around the web.</p>
<p><br /></p>
<div dir="ltr" style="text-align: left;">
<pre class="source-actionscript">
package <span class="br0">{</span>
	<span class="kw3">public</span> <span class="kw2">class</span> Singleton  <span class="br0">{</span>
 
		<span class="kw3">private</span> <span class="kw3">static</span> <span class="kw2">var</span> _instance:Singleton = <span class="kw2">new</span> Singleton<span class="br0">(</span><span class="br0">)</span>;
 
		<span class="kw3">public</span> <span class="kw2">function</span> Singleton <span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>	
	            <span class="kw1">if</span> <span class="br0">(</span>_instance<span class="br0">)</span><span class="br0">{</span>
		        <span class="kw3">throw</span> <span class="kw2">new</span> <span class="kw3">Error</span><span class="br0">(</span> 
                            <span class="st0">"Singleton can only be accessed through Singleton.getInstance()"</span> 
                        <span class="br0">)</span>;
                    <span class="br0">}</span>
		<span class="br0">}</span>
 
		<span class="kw3">public</span> <span class="kw3">static</span> <span class="kw2">function</span> getInstance<span class="br0">(</span><span class="br0">)</span>:Singleton <span class="br0">{</span>
			<span class="kw1">return</span> _instance;
		<span class="br0">}</span>
 
	<span class="br0">}</span>
<span class="br0">}</span>
</pre></div>
<p><a name="Objective-C" id="Objective-C"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Singleton_pattern&amp;action=edit&amp;section=14" title="Edit section: Objective-C">edit</a>]</span> <span class="mw-headline">Objective-C</span></h3>
<p>A common way to implement a singleton in <a href="/wiki/Objective-C" title="Objective-C">Objective-C</a> is the following:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-objc">
<span class="kw4">@interface</span> MySingleton : <span class="kw5">NSObject</span>
<span class="br0">{</span>
<span class="br0">}</span>
 
+ <span class="br0">(</span>MySingleton *<span class="br0">)</span>sharedSingleton;
<span class="kw4">@end</span>
 
<span class="kw4">@implementation</span> MySingleton
 
+ <span class="br0">(</span>MySingleton *<span class="br0">)</span>sharedSingleton
<span class="br0">{</span>
  <span class="kw4">static</span> MySingleton *sharedSingleton;
 
  <span class="kw4">@synchronized</span><span class="br0">(</span>self<span class="br0">)</span>
  <span class="br0">{</span>
    <span class="kw1">if</span> <span class="br0">(</span>!sharedSingleton<span class="br0">)</span>
      sharedSingleton = <span class="br0">[</span><span class="br0">[</span>MySingleton alloc<span class="br0">]</span> init<span class="br0">]</span>;
 
    <span class="kw1">return</span> sharedSingleton;
  <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="kw4">@end</span>
</pre></div>
<p>If thread-safety is not required, the synchronization can be left out, leaving the <code>+sharedSingleton</code> method like this:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-objc">
+ <span class="br0">(</span>MySingleton *<span class="br0">)</span>sharedSingleton
<span class="br0">{</span>
  <span class="kw4">static</span> MySingleton *sharedSingleton;
 
  <span class="kw1">if</span> <span class="br0">(</span>!sharedSingleton<span class="br0">)</span>
    sharedSingleton = <span class="br0">[</span><span class="br0">[</span>MySingleton alloc<span class="br0">]</span> init<span class="br0">]</span>;
 
  <span class="kw1">return</span> sharedSingleton;
<span class="br0">}</span>
</pre></div>
<p>This pattern is widely used in the <a href="/wiki/Cocoa_(API)" title="Cocoa (API)">Cocoa</a> frameworks (see for instance, <code>NSApplication</code>, <code>NSColorPanel</code>, <code>NSFontPanel</code> or <code>NSWorkspace</code>, to name but a few).</p>
<p>Some may argue that this is not, strictly speaking, a Singleton, because it is possible to allocate more than one instance of the object. A common way around this is to use assertions or exceptions to prevent this double allocation.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-objc">
<span class="kw4">@interface</span> MySingleton : <span class="kw5">NSObject</span>
<span class="br0">{</span>
<span class="br0">}</span>
 
+ <span class="br0">(</span>MySingleton *<span class="br0">)</span>sharedSingleton;
<span class="kw4">@end</span>
 
<span class="kw4">@implementation</span> MySingleton
 
<span class="kw4">static</span> MySingleton *sharedSingleton;
 
+ <span class="br0">(</span>MySingleton *<span class="br0">)</span>sharedSingleton
<span class="br0">{</span>
  <span class="kw4">@synchronized</span><span class="br0">(</span>self<span class="br0">)</span>
  <span class="br0">{</span>
    <span class="kw1">if</span> <span class="br0">(</span>!sharedSingleton<span class="br0">)</span>
      <span class="br0">[</span><span class="br0">[</span>MySingleton alloc<span class="br0">]</span> init<span class="br0">]</span>;
 
    <span class="kw1">return</span> sharedSingleton;
  <span class="br0">}</span>
<span class="br0">}</span>
 
+<span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span>alloc
<span class="br0">{</span>
  <span class="kw4">@synchronized</span><span class="br0">(</span>self<span class="br0">)</span>
  <span class="br0">{</span>
    NSAssert<span class="br0">(</span>sharedSingleton == <span class="kw2">nil</span>, @<span class="st0">"Attempted to allocate a second instance of a singleton."</span><span class="br0">)</span>;
    sharedSingleton = <span class="br0">[</span>super alloc<span class="br0">]</span>;
    <span class="kw1">return</span> sharedSingleton;
  <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="kw4">@end</span>
</pre></div>
<p>There are alternative ways to express the Singleton pattern in Objective-C, but they are not always as simple or as easily understood, not least because they may rely on the <code>-init</code> method returning an object other than <code>self</code>. Some of the <a href="/wiki/Cocoa_(API)" title="Cocoa (API)">Cocoa</a> "Class Clusters" (e.g. <code>NSString</code>, <code>NSNumber</code>) are known to exhibit this type of behaviour.</p>
<p>Note that <code>@synchronized</code> is not available in some Objective-C configurations, as it relies on the NeXT/Apple runtime. It is also comparatively slow, because it has to look up the lock based on the object in parentheses. Check the history of this page for a different implementation using an <code>NSConditionLock</code>.</p>
<p><br /></p>
<p><a name="C.2B.2B" id="C.2B.2B"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Singleton_pattern&amp;action=edit&amp;section=15" title="Edit section: C++">edit</a>]</span> <span class="mw-headline">C++</span></h3>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
<span class="co2">#include &lt;iostream&gt;</span>
<span class="kw2">using</span> <span class="kw2">namespace</span> std;
 
<span class="coMULTI">/* Place holder for thread synchronization mutex */</span>
<span class="kw2">class</span> Mutex
<span class="br0">{</span>   <span class="coMULTI">/* placeholder for code to create, use, and free a mutex */</span>
<span class="br0">}</span>;
 
<span class="coMULTI">/* Place holder for thread synchronization lock */</span>
<span class="kw2">class</span> Lock
<span class="br0">{</span>   <span class="kw2">public</span>:
        Lock<span class="br0">(</span>Mutex&amp; m<span class="br0">)</span> : mutex<span class="br0">(</span>m<span class="br0">)</span> <span class="br0">{</span> <span class="coMULTI">/* placeholder code to acquire the mutex */</span> <span class="br0">}</span>
        ~Lock<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> <span class="coMULTI">/* placeholder code to release the mutex */</span> <span class="br0">}</span>
    <span class="kw2">private</span>:
        Mutex &amp; mutex;
<span class="br0">}</span>;
 
<span class="kw2">class</span> Singleton
<span class="br0">{</span>   <span class="kw2">public</span>:
        <span class="kw4">static</span> Singleton* GetInstance<span class="br0">(</span><span class="br0">)</span>;
        <span class="kw4">int</span> a;
        ~Singleton<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> <span class="kw3">cout</span> &lt;&lt; <span class="st0">"In Dtor"</span> &lt;&lt; endl; <span class="br0">}</span>
 
    <span class="kw2">private</span>:
        Singleton<span class="br0">(</span><span class="kw4">int</span> _a<span class="br0">)</span> : a<span class="br0">(</span>_a<span class="br0">)</span> <span class="br0">{</span> <span class="kw3">cout</span> &lt;&lt; <span class="st0">"In Ctor"</span> &lt;&lt; endl; <span class="br0">}</span>
 
 
        <span class="kw4">static</span> Mutex mutex;
 
        <span class="co1">// Not defined, to prevent copying</span>
        Singleton<span class="br0">(</span><span class="kw4">const</span> Singleton&amp; <span class="br0">)</span>;
        Singleton&amp; operator =<span class="br0">(</span><span class="kw4">const</span> Singleton&amp; other<span class="br0">)</span>;
<span class="br0">}</span>;
 
Mutex Singleton::<span class="me2">mutex</span>;
 
Singleton* Singleton::<span class="me2">GetInstance</span><span class="br0">(</span><span class="br0">)</span>
<span class="br0">{</span>
    Lock lock<span class="br0">(</span>mutex<span class="br0">)</span>;
 
    <span class="kw3">cout</span> &lt;&lt; <span class="st0">"Get Inst"</span> &lt;&lt; endl;
 
    <span class="co1">// Initialized during first access</span>
    <span class="kw4">static</span> Singleton inst<span class="br0">(</span><span class="nu0">1</span><span class="br0">)</span>;
 
    <span class="kw1">return</span> &amp;inst;
<span class="br0">}</span>
 
<span class="kw4">int</span> main<span class="br0">(</span><span class="br0">)</span>
<span class="br0">{</span>
    Singleton* singleton = Singleton::<span class="me2">GetInstance</span><span class="br0">(</span><span class="br0">)</span>;
    <span class="kw3">cout</span> &lt;&lt; <span class="st0">"The value of the singleton: "</span> &lt;&lt; singleton-&gt;a &lt;&lt; endl;
    <span class="kw1">return</span> <span class="nu0">0</span>;
<span class="br0">}</span>
</pre></div>
<p>In the above example, the first call to <code>Singleton::GetInstance</code> will initialize the singleton instance. This example is for illustrative purposes only; for anything but a trivial example program, this code contains errors.</p>
<p><a name="C.23" id="C.23"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Singleton_pattern&amp;action=edit&amp;section=16" title="Edit section: C#">edit</a>]</span> <span class="mw-headline">C#</span></h3>
<p>The simplest of all is:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-csharp">
<span class="kw1">public</span> <span class="kw4">class</span> Singleton
<span class="br0">{</span>
    <span class="co1">// The combination of static and readonly makes the instantiation </span>
    <span class="co1">// thread safe.  Plus the constructor being protected (it can be </span>
    <span class="co1">// private as well), makes the class sure to not have any other </span>
    <span class="co1">// way to instantiate this class than using this member variable.</span>
    <span class="kw1">public</span> <span class="kw1">static</span> <span class="kw1">readonly</span> Singleton Instance = <span class="kw3">new</span> Singleton<span class="br0">(</span><span class="br0">)</span>;
 
    <span class="co1">// Protected constructor is sufficient to avoid other instantiation</span>
    <span class="co1">// This must be present otherwise the compiler provides a default </span>
    <span class="co1">// public constructor</span>
    <span class="co1">//</span>
    <span class="kw1">protected</span> Singleton<span class="br0">(</span><span class="br0">)</span>
    <span class="br0">{</span>
    <span class="br0">}</span>
<span class="br0">}</span>
</pre></div>
<p>This example is <a href="/wiki/Thread_safety" title="Thread safety">thread-safe</a> with <a href="/wiki/Lazy_initialization" title="Lazy initialization">lazy initialization</a>. Note that the explicit static constructor which disables beforefieldinit. See <a href="http://www.yoda.arachsys.com/csharp/beforefieldinit.html" class="external free" title="http://www.yoda.arachsys.com/csharp/beforefieldinit.html" rel="nofollow">http://www.yoda.arachsys.com/csharp/beforefieldinit.html</a></p>
<div dir="ltr" style="text-align: left;">
<pre class="source-csharp">
<span class="co1">/// Class implements singleton pattern.</span>
 
<span class="kw1">public</span> <span class="kw4">class</span> Singleton
<span class="br0">{</span>
        <span class="co1">// Protected constructor is sufficient to avoid other instantiation</span>
        <span class="co1">// This must be present otherwise the compiler provides </span>
        <span class="co1">// a default public constructor</span>
        <span class="kw1">protected</span> Singleton<span class="br0">(</span><span class="br0">)</span>
        <span class="br0">{</span>
        <span class="br0">}</span>
 
 
        <span class="co1">/// Return an instance of &lt;see cref="Singleton"/&gt;</span>
 
        <span class="kw1">public</span> <span class="kw1">static</span> Singleton Instance
        <span class="br0">{</span>
            get
            <span class="br0">{</span>
                <span class="co1">/// An instance of Singleton wont be created until the very first </span>
                <span class="co1">/// call to the sealed class. This is a CLR optimization that</span>
                <span class="co1">/// provides a properly lazy-loading singleton. </span>
                <span class="kw1">return</span> SingletonCreator.<span class="me1">CreatorInstance</span>;
            <span class="br0">}</span>
        <span class="br0">}</span>
 
 
        <span class="co1">/// Sealed class to avoid any heritage from this helper class</span>
 
        <span class="kw1">private</span> <span class="kw1">sealed</span> <span class="kw4">class</span> SingletonCreator
        <span class="br0">{</span>
          <span class="co1">// Retrieve a single instance of a Singleton</span>
          <span class="kw1">private</span> <span class="kw1">static</span> <span class="kw1">readonly</span> Singleton _instance = <span class="kw3">new</span> Singleton<span class="br0">(</span><span class="br0">)</span>;
 
          <span class="co1">//explicit static constructor to disable beforefieldinit</span>
          <span class="kw1">static</span> SingletonCreator<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> <span class="br0">}</span>
 
          <span class="co1">/// Return an instance of the class &lt;see cref="Singleton"/&gt;</span>
 
          <span class="kw1">public</span> <span class="kw1">static</span> Singleton CreatorInstance
          <span class="br0">{</span>
            get <span class="br0">{</span> <span class="kw1">return</span> _instance; <span class="br0">}</span>
          <span class="br0">}</span>
        <span class="br0">}</span>
<span class="br0">}</span>
</pre></div>
<p>Example in C# 2.0 (thread-safe with lazy initialization) Note: This is not a recommended implementation because "TestClass" has a default public constructor, and that violates the definition of a Singleton. A proper Singleton must never be instantiable more than once. More about generic singleton solution in C#: <a href="http://www.c-sharpcorner.com/UploadFile/snorrebaard/GenericSingleton11172008110419AM/GenericSingleton.aspx" class="external free" title="http://www.c-sharpcorner.com/UploadFile/snorrebaard/GenericSingleton11172008110419AM/GenericSingleton.aspx" rel="nofollow">http://www.c-sharpcorner.com/UploadFile/snorrebaard/GenericSingleton11172008110419AM/GenericSingleton.aspx</a></p>
<div dir="ltr" style="text-align: left;">
<pre class="source-csharp">
<span class="co1">/// Parent for singleton</span>
 
<span class="co1">/// &lt;typeparam name="T"&gt;Singleton class&lt;/typeparam&gt;</span>
  <span class="kw1">public</span> <span class="kw4">class</span> Singleton&lt;T&gt; where T : <span class="kw4">class</span>, <span class="kw3">new</span><span class="br0">(</span><span class="br0">)</span>
  <span class="br0">{</span>
 
    <span class="kw1">protected</span> Singleton<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> <span class="br0">}</span>
 
    <span class="kw1">private</span> <span class="kw1">sealed</span> <span class="kw4">class</span> SingletonCreator&lt;S&gt; where S : <span class="kw4">class</span>, <span class="kw3">new</span><span class="br0">(</span><span class="br0">)</span>
    <span class="br0">{</span>
      <span class="kw1">private</span> <span class="kw1">static</span> <span class="kw1">readonly</span> S instance = <span class="kw3">new</span> S<span class="br0">(</span><span class="br0">)</span>;
 
      <span class="co1">//explicit static constructor to disable beforefieldinit      </span>
      <span class="kw1">static</span> SingletonCreator<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> <span class="br0">}</span>
 
      <span class="kw1">public</span> <span class="kw1">static</span> S CreatorInstance
      <span class="br0">{</span>
        get <span class="br0">{</span> <span class="kw1">return</span> instance; <span class="br0">}</span>
      <span class="br0">}</span>
    <span class="br0">}</span>
 
    <span class="kw1">public</span> <span class="kw1">static</span> T Instance
    <span class="br0">{</span>
      get <span class="br0">{</span> <span class="kw1">return</span> SingletonCreator&lt;T&gt;.<span class="me1">CreatorInstance</span>; <span class="br0">}</span>
    <span class="br0">}</span>
 
  <span class="br0">}</span>
 
 
<span class="co1">/// Concrete Singleton</span>
 
<span class="kw1">public</span> <span class="kw4">class</span> TestClass : Singleton&lt;TestClass&gt;
<span class="br0">{</span>
    <span class="kw1">public</span> <span class="kw4">string</span> TestProc<span class="br0">(</span><span class="br0">)</span>
    <span class="br0">{</span>
        <span class="kw1">return</span> <span class="st0">"Hello World"</span>;
    <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="co1">// Somewhere in the code</span>
.....
<span class="me1">TestClass</span>.<span class="me1">Instance</span>.<span class="me1">TestProc</span><span class="br0">(</span><span class="br0">)</span>;
.....
</pre></div>
<p><a name="Delphi" id="Delphi"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Singleton_pattern&amp;action=edit&amp;section=17" title="Edit section: Delphi">edit</a>]</span> <span class="mw-headline">Delphi</span></h3>
<p>As described by James Heyworth in a paper<sup id="cite_ref-Liane_Gouthro_10-0" class="reference"><a href="#cite_note-Liane_Gouthro-10" title=""><span>[</span>11<span>]</span></a></sup> presented to the Canberra PC Users Group Delphi SIG on 11/11/1996, there are several examples of the Singleton pattern built into the Delphi Visual Component Library. This unit demonstrates the techniques that were used in order to create both a Singleton component and a Singleton object:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-pascal">
<span class="kw2">unit</span> Singletn;
 
<span class="kw2">interface</span>
 
<span class="kw2">uses</span>
  SysUtils, WinTypes, WinProcs, Messages, Classes, Graphics, Controls,
  Forms, Dialogs;
 
<span class="kw4">type</span>
 
  TCSingleton = class<span class="br0">(</span>TComponent<span class="br0">)</span>
  <span class="kw1">public</span>
    <span class="kw3">constructor</span> Create<span class="br0">(</span>AOwner: TComponent<span class="br0">)</span>; <span class="kw1">override</span>;
    <span class="kw3">destructor</span> Destroy; <span class="kw1">override</span>;
  <span class="kw1">end</span>;
 
  TOSingleton = class<span class="br0">(</span>TObject<span class="br0">)</span>
  <span class="kw1">public</span>
    <span class="kw3">constructor</span> Create;
    <span class="kw3">destructor</span> Destroy; <span class="kw1">override</span>;
  <span class="kw1">end</span>;
 
<span class="kw1">var</span>
  Global_CSingleton: TCSingleton;
  Global_OSingleton: TOSingleton;
 
<span class="kw2">procedure</span> Register;
 
<span class="kw2">implementation</span>
 
<span class="kw2">procedure</span> Register;
<span class="kw1">begin</span>
  RegisterComponents<span class="br0">(</span><span class="st0">'Design Patterns'</span>, <span class="br0">[</span>TCSingleton<span class="br0">]</span><span class="br0">)</span>;
<span class="kw1">end</span>;
 
<span class="coMULTI">{ TCSingleton }</span>
 
<span class="kw3">constructor</span> TCSingleton.<span class="me1">Create</span><span class="br0">(</span>AOwner: TComponent<span class="br0">)</span>;
<span class="kw1">begin</span>
  <span class="kw1">if</span> Global_CSingleton &lt;&gt; <span class="kw2">nil</span> <span class="kw1">then</span>
    <span class="coMULTI">{NB could show a message or raise a different exception here}</span>
    Abort
  <span class="kw1">else</span> <span class="kw1">begin</span>
    <span class="kw1">inherited</span> Create<span class="br0">(</span>AOwner<span class="br0">)</span>;
    Global_CSingleton := Self;
  <span class="kw1">end</span>;
<span class="kw1">end</span>;
 
<span class="kw3">destructor</span> TCSingleton.<span class="me1">Destroy</span>;
<span class="kw1">begin</span>
  <span class="kw1">if</span> Global_CSingleton = Self <span class="kw1">then</span>
    Global_CSingleton := <span class="kw2">nil</span>;
  <span class="kw1">inherited</span> Destroy;
<span class="kw1">end</span>;
 
 
<span class="coMULTI">{ TOSingleton }</span>
 
<span class="kw3">constructor</span> TOSingleton.<span class="me1">Create</span>;
<span class="kw1">begin</span> 
<span class="kw1">if</span> Global_OSingleton &lt;&gt; <span class="kw2">nil</span> <span class="kw1">then</span>
    <span class="coMULTI">{NB could show a message or raise a different exception here}</span>
    Abort
  <span class="kw1">else</span>
    Global_OSingleton := Self;
<span class="kw1">end</span>;
 
<span class="kw3">destructor</span> TOSingleton.<span class="me1">Destroy</span>;
<span class="kw1">begin</span>
  <span class="kw1">if</span> Global_OSingleton = Self <span class="kw1">then</span>
    Global_OSingleton := <span class="kw2">nil</span>;
  <span class="kw1">inherited</span> Destroy;
<span class="kw1">end</span>;
 
<span class="kw2">procedure</span> FreeGlobalObjects; <span class="kw1">far</span>;
<span class="kw1">begin</span>
  <span class="kw1">if</span> Global_CSingleton &lt;&gt; <span class="kw2">nil</span> <span class="kw1">then</span>
    Global_CSingleton.<span class="me1">Free</span>;
  <span class="kw1">if</span> Global_OSingleton &lt;&gt; <span class="kw2">nil</span> <span class="kw1">then</span>
    Global_OSingleton.<span class="me1">Free</span>;
<span class="kw1">end</span>;
 
<span class="kw1">begin</span>
  AddExitProc<span class="br0">(</span>FreeGlobalObjects<span class="br0">)</span>;
<span class="kw1">end</span>.
</pre></div>
<p><a name="Python" id="Python"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Singleton_pattern&amp;action=edit&amp;section=18" title="Edit section: Python">edit</a>]</span> <span class="mw-headline">Python</span></h3>
<p>The desired properties of the Singleton pattern can most simply be encapsulated in Python by defining a module, containing module-level variables and functions. To use this modular Singleton, client code merely imports the module to access its attributes and functions in the normal manner. This sidesteps many of the wrinkles in the explicitly-coded versions below, and has the singular advantage of requiring zero lines of code to implement.</p>
<p>According to influential <a href="/wiki/Python_(programming_language)" title="Python (programming language)">Python</a> programmer <a href="/wiki/Alex_Martelli" title="Alex Martelli">Alex Martelli</a>, <i>The Singleton design pattern (DP) has a catchy name, but the wrong focus—on identity rather than on state. The Borg design pattern has all instances share state instead</i>.<sup id="cite_ref-11" class="reference"><a href="#cite_note-11" title=""><span>[</span>12<span>]</span></a></sup> A rough consensus in the Python community is that sharing state among instances is more elegant, at least in Python, than is caching creation of identical instances on class initialization. Coding shared state is nearly transparent:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-python">
<span class="kw1">class</span> Borg:
   __shared_state = <span class="br0">{</span><span class="br0">}</span>
   <span class="kw1">def</span> <span class="kw4">__init__</span><span class="br0">(</span><span class="kw2">self</span><span class="br0">)</span>:
       <span class="kw2">self</span>.<span class="kw4">__dict__</span> = <span class="kw2">self</span>.__shared_state
   <span class="co1"># and whatever else is needed in the class -- that's all!</span>
</pre></div>
<p>But with the new style class, this is a better solution, because only one instance is created:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-python">
<span class="kw1">class</span> Singleton <span class="br0">(</span><span class="kw2">object</span><span class="br0">)</span>:
    <span class="kw1">def</span> <span class="kw4">__new__</span><span class="br0">(</span>cls, *args, **kwargs<span class="br0">)</span>: 
        <span class="kw1">if</span> <span class="kw1">not</span> <span class="kw2">hasattr</span><span class="br0">(</span>cls, <span class="st0">'self'</span><span class="br0">)</span>:
            cls.<span class="kw2">self</span> = <span class="kw2">object</span>.<span class="kw4">__new__</span><span class="br0">(</span>cls<span class="br0">)</span>
        <span class="kw1">return</span> cls.<span class="kw2">self</span>
 
<span class="co1">#Usage</span>
mySingleton1 = Singleton<span class="br0">(</span><span class="br0">)</span>
mySingleton2 = Singleton<span class="br0">(</span><span class="br0">)</span>
 
<span class="co1">#mySingleton1 and  mySingleton2 are the same instance.</span>
<span class="kw1">assert</span> mySingleton1 <span class="kw1">is</span> mySingleton2
</pre></div>
<p>Two <a href="http://en.wiktionary.org/wiki/caveat" class="extiw" title="wikt:caveat">caveats</a>:</p>
<ul>
<li>The <i>__init__</i>-method is called every time <i>Singleton()</i> is called, unless <i>cls.__init__</i> is set to an empty function.</li>
<li>If it is needed to inherit from the <i>Singleton</i>-class, <i>instance</i> should probably be a <i>dictionary</i> belonging explicitly to the <i>Singleton</i>-class.</li>
</ul>
<div dir="ltr" style="text-align: left;">
<pre class="source-python">
<span class="kw1">class</span>  InheritableSingleton <span class="br0">(</span><span class="kw2">object</span><span class="br0">)</span>:
    instances = <span class="br0">{</span><span class="br0">}</span>
    <span class="kw1">def</span> <span class="kw4">__new__</span><span class="br0">(</span>cls, *args, **kwargs<span class="br0">)</span>: 
        <span class="kw1">if</span> InheritableSingleton.<span class="me1">instances</span>.<span class="me1">get</span><span class="br0">(</span>cls<span class="br0">)</span> <span class="kw1">is</span> <span class="kw2">None</span>:
            cls.__original_init__ = cls.<span class="kw4">__init__</span>
            InheritableSingleton.<span class="me1">instances</span><span class="br0">[</span>cls<span class="br0">]</span> = <span class="kw2">object</span>.<span class="kw4">__new__</span><span class="br0">(</span>cls, *args, **kwargs<span class="br0">)</span>
        <span class="kw1">elif</span> cls.<span class="kw4">__init__</span> == cls.__original_init__:
            <span class="kw1">def</span> nothing<span class="br0">(</span>*args, **kwargs<span class="br0">)</span>:
                <span class="kw1">pass</span>
            cls.<span class="kw4">__init__</span> = nothing
        <span class="kw1">return</span> InheritableSingleton.<span class="me1">instances</span><span class="br0">[</span>cls<span class="br0">]</span>
</pre></div>
<p>To create a singleton that inherits from a non-singleton, multiple inheritance must be used.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-python">
<span class="kw1">class</span>  Singleton <span class="br0">(</span>NonSingletonClass, <span class="kw2">object</span><span class="br0">)</span>:
    instance = <span class="kw2">None</span>       
    <span class="kw1">def</span> <span class="kw4">__new__</span><span class="br0">(</span>cls, *args, **kargs<span class="br0">)</span>: 
        <span class="kw1">if</span> cls.<span class="me1">instance</span> <span class="kw1">is</span> <span class="kw2">None</span>:
            cls.<span class="me1">instance</span> = <span class="kw2">object</span>.<span class="kw4">__new__</span><span class="br0">(</span>cls, *args, **kargs<span class="br0">)</span>
        <span class="kw1">return</span> cls.<span class="me1">instance</span>
</pre></div>
<p>Be sure to call the NonSingletonClass's __init__ function from the Singleton's __init__ function.</p>
<p>A more elegant approach using <a href="/wiki/Metaclass" title="Metaclass">metaclasses</a> was also suggested.<sup id="cite_ref-12" class="reference"><a href="#cite_note-12" title=""><span>[</span>13<span>]</span></a></sup></p>
<div dir="ltr" style="text-align: left;">
<pre class="source-python">
<span class="kw1">class</span> SingletonType<span class="br0">(</span><span class="kw2">type</span><span class="br0">)</span>:
    <span class="kw1">def</span> <span class="kw4">__call__</span><span class="br0">(</span>cls<span class="br0">)</span>:
        <span class="kw1">if</span> <span class="kw2">getattr</span><span class="br0">(</span>cls, <span class="st0">'__instance__'</span>, <span class="kw2">None</span><span class="br0">)</span> <span class="kw1">is</span> <span class="kw2">None</span>:
            instance = cls.<span class="kw4">__new__</span><span class="br0">(</span>cls<span class="br0">)</span>
            instance.<span class="kw4">__init__</span><span class="br0">(</span><span class="br0">)</span>
            cls.__instance__ = instance
        <span class="kw1">return</span> cls.__instance__
 
<span class="co1"># Usage</span>
<span class="kw1">class</span> Singleton<span class="br0">(</span><span class="kw2">object</span><span class="br0">)</span>:
    <span class="kw4">__metaclass__</span> = SingletonType
 
    <span class="kw1">def</span> <span class="kw4">__init__</span><span class="br0">(</span><span class="kw2">self</span><span class="br0">)</span>:
        <span class="kw1">print</span> <span class="st0">'__init__:'</span>, <span class="kw2">self</span>
 
<span class="kw1">class</span> OtherSingleton<span class="br0">(</span><span class="kw2">object</span><span class="br0">)</span>:
    <span class="kw4">__metaclass__</span> = SingletonType
 
    <span class="kw1">def</span> <span class="kw4">__init__</span><span class="br0">(</span><span class="kw2">self</span><span class="br0">)</span>:
        <span class="kw1">print</span> <span class="st0">'OtherSingleton __init__:'</span>, <span class="kw2">self</span>
 
<span class="co1"># Tests</span>
s1 = Singleton<span class="br0">(</span><span class="br0">)</span>
s2 = Singleton<span class="br0">(</span><span class="br0">)</span>
<span class="kw1">assert</span> s1
<span class="kw1">assert</span> s2
<span class="kw1">assert</span> s1 <span class="kw1">is</span> s2
 
os1 = OtherSingleton<span class="br0">(</span><span class="br0">)</span>
os2 = OtherSingleton<span class="br0">(</span><span class="br0">)</span>
<span class="kw1">assert</span> os1
<span class="kw1">assert</span> os2
<span class="kw1">assert</span> os1 <span class="kw1">is</span> os2
</pre></div>
<p><a name="Perl" id="Perl"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Singleton_pattern&amp;action=edit&amp;section=19" title="Edit section: Perl">edit</a>]</span> <span class="mw-headline">Perl</span></h3>
<p>In a Perl version equal or superior to 5.10 a state variable can be used.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-perl">
<span class="kw3">package</span> MySingletonClass;
<span class="kw2">use</span> strict;
<span class="kw2">use</span> warnings;
<span class="kw2">use</span> <span class="nu0">5.10</span>;
 
<span class="kw2">sub</span> <span class="kw2">new</span> <span class="br0">{</span>
    <span class="kw1">my</span> <span class="br0">(</span><span class="re0">$class</span><span class="br0">)</span> = <span class="re0">@_</span>;
    state <span class="re0">$the_instance</span>;
 
    <span class="kw1">if</span> <span class="br0">(</span>! <span class="kw3">defined</span> <span class="re0">$the_instance</span><span class="br0">)</span> <span class="br0">{</span>
        <span class="re0">$the_instance</span> = <span class="kw3">bless</span> <span class="br0">{</span> <span class="br0">}</span>, <span class="re0">$class</span>;
    <span class="br0">}</span>
    <span class="kw3">return</span> <span class="re0">$the_instance</span>;
<span class="br0">}</span>
</pre></div>
<p>In older Perls, just use a closure.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-perl">
<span class="kw3">package</span> MySingletonClass;
<span class="kw2">use</span> strict;
<span class="kw2">use</span> warnings;
 
<span class="kw1">my</span> <span class="re0">$THE_INSTANCE</span>;
<span class="kw2">sub</span> <span class="kw2">new</span> <span class="br0">{</span>
    <span class="kw1">my</span> <span class="br0">(</span><span class="re0">$class</span><span class="br0">)</span> = <span class="re0">@_</span>;
 
    <span class="kw1">if</span> <span class="br0">(</span>! <span class="kw3">defined</span> <span class="re0">$THE_INSTANCE</span><span class="br0">)</span> <span class="br0">{</span>
        <span class="re0">$THE_INSTANCE</span> = <span class="kw3">bless</span> <span class="br0">{</span> <span class="br0">}</span>, <span class="re0">$class</span>;
    <span class="br0">}</span>
    <span class="kw3">return</span> <span class="re0">$THE_INSTANCE</span>;
<span class="br0">}</span>
</pre></div>
<p>If Moose is used, there is the <a href="http://search.cpan.org/perldoc?MooseX::Singleton" class="external text" title="http://search.cpan.org/perldoc?MooseX::Singleton" rel="nofollow">MooseX::Singleton</a> extension module.</p>
<p><a name="Ruby" id="Ruby"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Singleton_pattern&amp;action=edit&amp;section=20" title="Edit section: Ruby">edit</a>]</span> <span class="mw-headline">Ruby</span></h3>
<p>In Ruby, just include the Singleton in the class.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-ruby">
<span class="kw3">require</span> <span class="st0">'singleton'</span>
 
<span class="kw1">class</span> Example
  <span class="kw1">include</span> <span class="kw4">Singleton</span>
<span class="kw1">end</span>
</pre></div>
<p><a name="ABAP_Objects" id="ABAP_Objects"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Singleton_pattern&amp;action=edit&amp;section=21" title="Edit section: ABAP Objects">edit</a>]</span> <span class="mw-headline">ABAP Objects</span></h3>
<p>In ABAP Objects, to make instantiation private, add an attribute of type ref to the class, and a static method to control instantiation.</p>
<pre>
program pattern_singleton.

***********************************************************************

   * Singleton
   * =========
   * Intent

*

   * Ensure a class has only one instance, and provide a global point
   * of access to it.

***********************************************************************

class lcl_Singleton definition create private.

  public section.

  class-methods:
    get_Instance returning value(Result) type ref to lcl_Singleton.

  private section.
    class-data:
      fg_Singleton type ref to lcl_Singleton.

endclass.

class lcl_Singleton implementation.

  method get_Instance.
    if ( fg_Singleton is initial ).
      create object fg_Singleton.
    endif.
    Result = fg_Singleton.
  endmethod.

endclass.
</pre>
<p><a name="Prototype-based_singleton" id="Prototype-based_singleton"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Singleton_pattern&amp;action=edit&amp;section=22" title="Edit section: Prototype-based singleton">edit</a>]</span> <span class="mw-headline">Prototype-based singleton</span></h2>
<p>In a <a href="/wiki/Prototype-based_programming" title="Prototype-based programming">prototype-based programming</a> language, where objects but not classes are used, a "singleton" simply refers to an object without copies or that is not used as the prototype for any other object. Example in <a href="/wiki/Io_(programming_language)" title="Io (programming language)">Io</a>:</p>
<pre>
Foo := Object clone
Foo clone := Foo
</pre>
<p><a name="Example_of_use_with_the_factory_method_pattern" id="Example_of_use_with_the_factory_method_pattern"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Singleton_pattern&amp;action=edit&amp;section=23" title="Edit section: Example of use with the factory method pattern">edit</a>]</span> <span class="mw-headline">Example of use with the factory method pattern</span></h2>
<p>The singleton pattern is often used in conjunction with the <a href="/wiki/Factory_method_pattern" title="Factory method pattern">factory method pattern</a> to create a system-wide resource whose specific type is not known to the code that uses it. An example of using these two patterns together is the Java <a href="/wiki/Abstract_Window_Toolkit" title="Abstract Window Toolkit">Abstract Window Toolkit</a> (AWT).</p>
<p><code><a href="http://java.sun.com/javase/6/docs/api/java/awt/Toolkit.html" class="external text" title="http://java.sun.com/javase/6/docs/api/java/awt/Toolkit.html" rel="nofollow">java.awt.Toolkit</a></code> is an <a href="/wiki/Abstract_class" title="Abstract class" class="mw-redirect">abstract class</a> that <a href="/wiki/Binding_(computer_science)" title="Binding (computer science)">binds</a> the various AWT components to particular native toolkit implementations. The <code>Toolkit</code> class has a <code><a href="http://java.sun.com/javase/6/docs/api/java/awt/Toolkit.html#getDefaultToolkit()" class="external text" title="http://java.sun.com/javase/6/docs/api/java/awt/Toolkit.html#getDefaultToolkit()" rel="nofollow">Toolkit.getDefaultToolkit()</a></code> factory method that returns the <a href="/wiki/Platform-specific_model" title="Platform-specific model">platform-specific</a> <a href="/wiki/Subclass_(computer_science)" title="Subclass (computer science)">subclass</a> of <code>Toolkit</code>. The <code>Toolkit</code> object is a singleton because the AWT needs only a single object to perform the binding and the object is relatively expensive to create. The toolkit methods must be implemented in an object and not as <a href="/wiki/Static_method" title="Static method" class="mw-redirect">static methods</a> of a class because the specific implementation is not known by the platform-independent components. The name of the specific <code>Toolkit</code> subclass used is specified by the "<tt>awt.toolkit</tt>" <a href="/w/index.php?title=Environment_property&amp;action=edit&amp;redlink=1" class="new" title="Environment property (page does not exist)">environment property</a> accessed through <code><a href="http://java.sun.com/javase/6/docs/api/java/lang/System.html#getProperties()" class="external text" title="http://java.sun.com/javase/6/docs/api/java/lang/System.html#getProperties()" rel="nofollow">System.getProperties()</a></code>.</p>
<p>The binding performed by the toolkit allows, for example, the backing implementation of a <code><a href="http://java.sun.com/javase/6/docs/api/java/awt/Window.html" class="external text" title="http://java.sun.com/javase/6/docs/api/java/awt/Window.html" rel="nofollow">java.awt.Window</a></code> to bound to the platform-specific <code>java.awt.peer.WindowPeer</code> implementation. Neither the <code>Window</code> class nor the application using the window needs to be aware of which platform-specific subclass of the peer is used.</p>
<p><a name="Drawbacks" id="Drawbacks"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Singleton_pattern&amp;action=edit&amp;section=24" title="Edit section: Drawbacks">edit</a>]</span> <span class="mw-headline">Drawbacks</span></h2>
<p>It should be noted that this pattern makes <a href="/wiki/Unit_testing" title="Unit testing">unit testing</a> far more difficult<sup id="cite_ref-13" class="reference"><a href="#cite_note-13" title=""><span>[</span>14<span>]</span></a></sup>, as it introduces <a href="/wiki/Global_variables" title="Global variables" class="mw-redirect">Global state</a> into an application.</p>
<p>Advocates of <a href="/wiki/Dependency_Injection" title="Dependency Injection" class="mw-redirect">Dependency Injection</a> would regard this as an <a href="/wiki/Anti_pattern" title="Anti pattern" class="mw-redirect">anti pattern</a>, mainly due to its use of private and static methods.</p>
<p>In a nod to the concept of 'Code Smells', this pattern has also been known as the <i>Stinkleton</i> pattern. (coined by <a href="http://www.robertpenner.com/" class="external text" title="http://www.robertpenner.com/" rel="nofollow">Robert Penner</a>).</p>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Singleton_pattern&amp;action=edit&amp;section=25" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<div class="references-small references-column-count references-column-count-2" style="-moz-column-count:2; column-count:2;">
<ol class="references">
<li id="cite_note-0"><b><a href="#cite_ref-0" title="">^</a></b> Alex Miller. <a href="http://tech.puredanger.com/2007/07/03/pattern-hate-singleton/" class="external text" title="http://tech.puredanger.com/2007/07/03/pattern-hate-singleton/" rel="nofollow">Patterns I hate #1: Singleton</a>, July 2007</li>
<li id="cite_note-1"><b><a href="#cite_ref-1" title="">^</a></b> Scott Densmore. <a href="http://blogs.msdn.com/scottdensmore/archive/2004/05/25/140827.aspx" class="external text" title="http://blogs.msdn.com/scottdensmore/archive/2004/05/25/140827.aspx" rel="nofollow">Why singletons are evil</a>, May 2004</li>
<li id="cite_note-2"><b><a href="#cite_ref-2" title="">^</a></b> Steve Yegge. <a href="http://steve.yegge.googlepages.com/singleton-considered-stupid" class="external text" title="http://steve.yegge.googlepages.com/singleton-considered-stupid" rel="nofollow">Singletons considered stupid</a>, September 2004</li>
<li id="cite_note-3"><b><a href="#cite_ref-3" title="">^</a></b> J.B. Rainsberger, IBM. <a href="http://www-128.ibm.com/developerworks/webservices/library/co-single.html" class="external text" title="http://www-128.ibm.com/developerworks/webservices/library/co-single.html" rel="nofollow">Use your singletons wisely</a>, July 2001</li>
<li id="cite_note-4"><b><a href="#cite_ref-4" title="">^</a></b> Chris Reath. <a href="http://www.codingwithoutcomments.com/2008/10/08/singleton-i-love-you-but-youre-bringing-me-down/" class="external text" title="http://www.codingwithoutcomments.com/2008/10/08/singleton-i-love-you-but-youre-bringing-me-down/" rel="nofollow">Singleton I love you, but you're bringing me down</a>, October 2008</li>
<li id="cite_note-5"><b><a href="#cite_ref-5" title="">^</a></b> <a href="http://googletesting.blogspot.com/2008/11/clean-code-talks-global-state-and.html" class="external free" title="http://googletesting.blogspot.com/2008/11/clean-code-talks-global-state-and.html" rel="nofollow">http://googletesting.blogspot.com/2008/11/clean-code-talks-global-state-and.html</a></li>
<li id="cite_note-6"><b><a href="#cite_ref-6" title="">^</a></b> Gamma, E, Helm, R, Johnson, R, Vlissides, J: "Design Patterns", page 128. Addison-Wesley, 1995</li>
<li id="cite_note-7"><b><a href="#cite_ref-7" title="">^</a></b> Joshua Bloch: Effective Java 2nd edition, <a href="/wiki/Special:BookSources/9780321356680" class="internal">ISBN 978-0-321-35668-0</a>, 2008, p. 18</li>
<li id="cite_note-8"><b><a href="#cite_ref-8" title="">^</a></b> McArthur, Kevin: "Pro PHP: Patterns, Frameworks, Testing and More", pp 22–23. Apress, 2008</li>
<li id="cite_note-9"><b><a href="#cite_ref-9" title="">^</a></b> Zandstra, Matt: "PHP Objects, Patterns and Practice", pp 147–149. Apress, 2008</li>
<li id="cite_note-Liane_Gouthro-10"><b><a href="#cite_ref-Liane_Gouthro_10-0" title="">^</a></b> <cite style="font-style:normal" class="news" id="CITEREFHeyworth">Heyworth, James (<span class="mw-formatted-date" title="1996-11-11"><a href="/wiki/1996" title="1996">1996</a>-<a href="/wiki/November_11" title="November 11">11-11</a></span>). "<a href="http://www.obsof.com/delphi_tips/pattern.html#Singleton" class="external text" title="http://www.obsof.com/delphi_tips/pattern.html#Singleton" rel="nofollow">Introduction to Design Patterns in Delphi</a>". <i><a href="/w/index.php?title=Canberra_PC_Users_Group_Delphi_SIG&amp;action=edit&amp;redlink=1" class="new" title="Canberra PC Users Group Delphi SIG (page does not exist)">Canberra PC Users Group Delphi SIG</a></i> (<a href="/w/index.php?title=Objective_Software_Technology&amp;action=edit&amp;redlink=1" class="new" title="Objective Software Technology (page does not exist)">Objective Software Technology</a>)<span class="printonly">. <a href="http://www.obsof.com/delphi_tips/pattern.html#Singleton" class="external free" title="http://www.obsof.com/delphi_tips/pattern.html#Singleton" rel="nofollow">http://www.obsof.com/delphi_tips/pattern.html#Singleton</a></span><span class="reference-accessdate">. Retrieved on 2008-01-19</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=Introduction+to+Design+Patterns+in+Delphi&amp;rft.jtitle=%5B%5BCanberra+PC+Users+Group+Delphi+SIG%5D%5D&amp;rft.aulast=Heyworth&amp;rft.aufirst=James&amp;rft.au=Heyworth%2C+James&amp;rft.date=%5B%5B1996-11-11%5D%5D&amp;rft.pub=%5B%5BObjective+Software+Technology%5D%5D&amp;rft_id=http%3A%2F%2Fwww.obsof.com%2Fdelphi_tips%2Fpattern.html%23Singleton&amp;rfr_id=info:sid/en.wikipedia.org:Singleton_pattern"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-11"><b><a href="#cite_ref-11" title="">^</a></b> <cite style="font-style:normal" class="web" id="CITEREFAlex_Martelli">Alex Martelli. <a href="http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/66531" class="external text" title="http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/66531" rel="nofollow">"Singleton? We don't need no stinkin' singleton: the Borg design pattern"</a>. <i>ASPN Python Cookbook</i><span class="printonly">. <a href="http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/66531" class="external free" title="http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/66531" rel="nofollow">http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/66531</a></span><span class="reference-accessdate">. Retrieved on 2006-09-07</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Singleton%3F+We+don%27t+need+no+stinkin%27+singleton%3A+the+Borg+design+pattern&amp;rft.atitle=ASPN+Python+Cookbook&amp;rft.aulast=Alex+Martelli&amp;rft.au=Alex+Martelli&amp;rft_id=http%3A%2F%2Faspn.activestate.com%2FASPN%2FCookbook%2FPython%2FRecipe%2F66531&amp;rfr_id=info:sid/en.wikipedia.org:Singleton_pattern"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-12"><b><a href="#cite_ref-12" title="">^</a></b> <cite style="font-style:normal" class="web" id="CITEREFTimur_Izhbulatov">Timur Izhbulatov. <a href="http://timka.org/programming/2008/12/17/singleton-in-python/" class="external text" title="http://timka.org/programming/2008/12/17/singleton-in-python/" rel="nofollow">"Singleton in Python"</a>. <i>timka.org - Programming</i><span class="printonly">. <a href="http://timka.org/programming/2008/12/17/singleton-in-python/" class="external free" title="http://timka.org/programming/2008/12/17/singleton-in-python/" rel="nofollow">http://timka.org/programming/2008/12/17/singleton-in-python/</a></span><span class="reference-accessdate">. Retrieved on 2009-01-05</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Singleton+in+Python&amp;rft.atitle=timka.org+-+Programming&amp;rft.aulast=Timur+Izhbulatov&amp;rft.au=Timur+Izhbulatov&amp;rft_id=http%3A%2F%2Ftimka.org%2Fprogramming%2F2008%2F12%2F17%2Fsingleton-in-python%2F&amp;rfr_id=info:sid/en.wikipedia.org:Singleton_pattern"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-13"><b><a href="#cite_ref-13" title="">^</a></b> <a href="http://googletesting.blogspot.com/2008/11/clean-code-talks-global-state-and.html" class="external free" title="http://googletesting.blogspot.com/2008/11/clean-code-talks-global-state-and.html" rel="nofollow">http://googletesting.blogspot.com/2008/11/clean-code-talks-global-state-and.html</a></li>
</ol>
</div>
<div class="references-small" style="margin-left:1.5em;">
<ul>
<li><a href="http://www.aristeia.com/Papers/DDJ_Jul_Aug_2004_revised.pdf#search=%22meyers%20double%20checked%20locking%22" class="external text" title="http://www.aristeia.com/Papers/DDJ_Jul_Aug_2004_revised.pdf#search=%22meyers%20double%20checked%20locking%22" rel="nofollow">"C++ and the Perils of Double-Checked Locking"</a> Meyers, Scott and Alexandrescu, Andrei, September 2004.</li>
<li><a href="http://www.ddj.com/dept/cpp/184401518" class="external text" title="http://www.ddj.com/dept/cpp/184401518" rel="nofollow">"The Boost.Threads Library"</a> Kempf, B., Dr. Dobb's Portal, April 2003.</li>
</ul>
</div>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Singleton_pattern&amp;action=edit&amp;section=26" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<ul>
<li><a href="http://misko.hevery.com/2008/08/17/singletons-are-pathological-liars/" class="external text" title="http://misko.hevery.com/2008/08/17/singletons-are-pathological-liars/" rel="nofollow">Singletons are Pathological Liars</a> by Miško Hevery</li>
<li><a href="http://java4all.info/designpattern/interview-questions/design-pattern-interview-questions.html" class="external text" title="http://java4all.info/designpattern/interview-questions/design-pattern-interview-questions.html" rel="nofollow">Java Singleton Design Pattern</a></li>
<li><a href="http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html" class="external text" title="http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html" rel="nofollow">The "Double-Checked Locking is Broken" Declaration</a> (Java)</li>
<li><a href="http://www.javabeginner.com/singleton.htm" class="external text" title="http://www.javabeginner.com/singleton.htm" rel="nofollow">Java Singleton Pattern</a></li>
<li>A <a href="http://pec.dev.java.net/" class="external text" title="http://pec.dev.java.net/" rel="nofollow">Pattern Enforcing Compiler</a> that enforces the Singleton pattern amongst other patterns</li>
<li><a href="http://c2.com/cgi/wiki?SingletonPattern" class="external text" title="http://c2.com/cgi/wiki?SingletonPattern" rel="nofollow">Description from the Portland Pattern Repository</a></li>
<li><a href="http://www.yoda.arachsys.com/csharp/singleton.html" class="external text" title="http://www.yoda.arachsys.com/csharp/singleton.html" rel="nofollow">Implementing the Singleton Pattern in C#</a> by Jon Skeet</li>
<li><a href="http://www.opbarnes.com/blog/Programming/OPB/Snippets/Singleton.html" class="external text" title="http://www.opbarnes.com/blog/Programming/OPB/Snippets/Singleton.html" rel="nofollow">A Threadsafe C++ Template Singleton Pattern for Windows Platforms</a> by O. Patrick Barnes</li>
<li><a href="http://svn.shadanakar.org/filedetails.php?repname=onPHP&amp;path=%2Ftrunk%2Fcore%2FBase%2FSingleton.class.php&amp;rev=0&amp;sc=0" class="external text" title="http://svn.shadanakar.org/filedetails.php?repname=onPHP&amp;path=%2Ftrunk%2Fcore%2FBase%2FSingleton.class.php&amp;rev=0&amp;sc=0" rel="nofollow">Implementing the Inheritable Singleton Pattern in PHP5</a></li>
<li><a href="http://www.oaklib.org/docs/oak/singleton.html" class="external text" title="http://www.oaklib.org/docs/oak/singleton.html" rel="nofollow">Singleton Pattern and Thread Safety</a></li>
<li><a href="http://www.php.net/manual/en/language.oop5.patterns.php" class="external text" title="http://www.php.net/manual/en/language.oop5.patterns.php" rel="nofollow">PHP patterns</a></li>
<li><a href="http://prototyp.ical.ly/index.php/2007/03/01/javascript-design-patterns-1-the-singleton/" class="external text" title="http://prototyp.ical.ly/index.php/2007/03/01/javascript-design-patterns-1-the-singleton/" rel="nofollow">Javascript implementation of a Singleton Pattern</a> by Christian Schaefer</li>
<li><a href="http://www.prestonlee.com/archives/22" class="external text" title="http://www.prestonlee.com/archives/22" rel="nofollow">Singletons Cause Cancer</a> by Preston Lee</li>
<li><a href="http://www.oodesign.com/oo_design_patterns/creational_patterns/singleton.html" class="external text" title="http://www.oodesign.com/oo_design_patterns/creational_patterns/singleton.html" rel="nofollow">Singleton examples</a></li>
<li>Article "<a href="http://www-128.ibm.com/developerworks/java/library/j-dcl.html?loc=j" class="external text" title="http://www-128.ibm.com/developerworks/java/library/j-dcl.html?loc=j" rel="nofollow">Double-checked locking and the Singleton pattern</a>" by Peter Haggar</li>
<li>Article "<a href="http://www-106.ibm.com/developerworks/library/co-single.html" class="external text" title="http://www-106.ibm.com/developerworks/library/co-single.html" rel="nofollow">Use your singletons wisely</a>" by <a href="/wiki/J._B._Rainsberger" title="J. B. Rainsberger">J. B. Rainsberger</a></li>
<li>Article "<a href="http://www.javaworld.com/javaworld/jw-04-2003/jw-0425-designpatterns.html" class="external text" title="http://www.javaworld.com/javaworld/jw-04-2003/jw-0425-designpatterns.html" rel="nofollow">Simply Singleton</a>" by David Geary</li>
<li>Article "<a href="http://www.dofactory.com/Patterns/PatternSingleton.aspx" class="external text" title="http://www.dofactory.com/Patterns/PatternSingleton.aspx" rel="nofollow">Description of Singleton</a>" by Aruna</li>
<li>Article "<a href="http://code.google.com/p/google-singleton-detector/wiki/WhySingletonsAreControversial" class="external text" title="http://code.google.com/p/google-singleton-detector/wiki/WhySingletonsAreControversial" rel="nofollow">Why Singletons Are Controversial</a>"</li>
<li>The <a href="http://code.google.com/p/google-singleton-detector/" class="external text" title="http://code.google.com/p/google-singleton-detector/" rel="nofollow">Google Singleton Detector</a> analyzes <a href="/wiki/Java_bytecode" title="Java bytecode">Java bytecode</a> to detect singletons, so that their usefulness can be evaluated.</li>
<li><a href="http://www.fsw.com/Jt/Jt.htm" class="external text" title="http://www.fsw.com/Jt/Jt.htm" rel="nofollow">Jt</a> J2EE Pattern Oriented Framework</li>
<li><a href="http://www.exampledepot.com/egs/java.io/DeserSingle.html?l=rel" class="external text" title="http://www.exampledepot.com/egs/java.io/DeserSingle.html?l=rel" rel="nofollow">Serialization of Singleton in Java</a></li>
<li><a href="http://msdn.microsoft.com/en-us/library/ms998426.aspx" class="external text" title="http://msdn.microsoft.com/en-us/library/ms998426.aspx" rel="nofollow">Singleton at Microsoft patterns &amp; practices Developer Center</a></li>
<li><a href="http://www.dpdk.nl/opensource/using-a-flashvars-flash-parameters-registry-configure-your-flash-files-externally" class="external text" title="http://www.dpdk.nl/opensource/using-a-flashvars-flash-parameters-registry-configure-your-flash-files-externally" rel="nofollow">Using a Singleton variation (Registry) with FlashVars in actionscript 3</a></li>
<li><a href="http://tomschober.blogspot.com/2007/01/singleton-pattern-in-cairngorm-21-with.html" class="external text" title="http://tomschober.blogspot.com/2007/01/singleton-pattern-in-cairngorm-21-with.html" rel="nofollow">Singleton Pattern in Cairngorm 2.1 with Actionscript 3</a></li>
<li>More about Generic Singleton in C#: <a href="http://www.c-sharpcorner.com/UploadFile/snorrebaard/GenericSingleton11172008110419AM/GenericSingleton.aspx" class="external autonumber" title="http://www.c-sharpcorner.com/UploadFile/snorrebaard/GenericSingleton11172008110419AM/GenericSingleton.aspx" rel="nofollow">[1]</a></li>
</ul>
<table class="navbox" cellspacing="0" style=";">
<tr>
<td style="padding:2px;">
<table cellspacing="0" class="nowraplinks collapsible autocollapse" style="width:100%;background:transparent;color:inherit;;">
<tr>
<th style=";" colspan="2" class="navbox-title">
<div style="float:left; width:6em;text-align:left;">
<div class="noprint plainlinksneverexpand navbar" style="background:none; padding:0; font-weight:normal;;;border:none;; font-size:xx-small;"><a href="/wiki/Template:Design_Patterns_Patterns" title="Template:Design Patterns Patterns"><span title="View this template" style=";;border:none;">v</span></a>&#160;<span style="font-size:80%;">•</span>&#160;<a href="/w/index.php?title=Template_talk:Design_Patterns_Patterns&amp;action=edit&amp;redlink=1" class="new" title="Template talk:Design Patterns Patterns (page does not exist)"><span title="Discussion about this template" style=";;border:none;">d</span></a>&#160;<span style="font-size:80%;">•</span>&#160;<a href="http://en.wikipedia.org/w/index.php?title=Template:Design_Patterns_Patterns&amp;action=edit" class="external text" title="http://en.wikipedia.org/w/index.php?title=Template:Design_Patterns_Patterns&amp;action=edit" rel="nofollow"><span title="Edit this template" style=";;border:none;;">e</span></a></div>
</div>
<span style="font-size:110%;"><a href="/wiki/Design_pattern_(computer_science)" title="Design pattern (computer science)">Design patterns</a> in the book <i><a href="/wiki/Design_Patterns_(book)" title="Design Patterns (book)">Design Patterns</a></i></span></th>
</tr>
<tr style="height:2px;">
<td></td>
</tr>
<tr>
<td class="navbox-group" style=";;">Creational</td>
<td style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<div style="padding:0em 0.25em"><a href="/wiki/Abstract_factory_pattern" title="Abstract factory pattern">Abstract factory</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Builder_pattern" title="Builder pattern">Builder</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Factory_method_pattern" title="Factory method pattern">Factory</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Prototype_pattern" title="Prototype pattern">Prototype</a><span style="font-weight:bold;">&#160;·</span> <strong class="selflink">Singleton</strong></div>
</td>
</tr>
<tr style="height:2px">
<td></td>
</tr>
<tr>
<td class="navbox-group" style=";;">Structural</td>
<td style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<div style="padding:0em 0.25em"><a href="/wiki/Adapter_pattern" title="Adapter pattern">Adapter</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Bridge_pattern" title="Bridge pattern">Bridge</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Composite_pattern" title="Composite pattern">Composite</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Decorator_pattern" title="Decorator pattern">Decorator</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Facade_pattern" title="Facade pattern">Facade</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Flyweight_pattern" title="Flyweight pattern">Flyweight</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Proxy_pattern" title="Proxy pattern">Proxy</a></div>
</td>
</tr>
<tr style="height:2px">
<td></td>
</tr>
<tr>
<td class="navbox-group" style=";;">Behavioral</td>
<td style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<div style="padding:0em 0.25em"><a href="/wiki/Chain-of-responsibility_pattern" title="Chain-of-responsibility pattern">Chain of responsibility</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Command_pattern" title="Command pattern">Command</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Interpreter_pattern" title="Interpreter pattern">Interpreter</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Iterator_pattern" title="Iterator pattern">Iterator</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Mediator_pattern" title="Mediator pattern">Mediator</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Memento_pattern" title="Memento pattern">Memento</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Observer_pattern" title="Observer pattern">Observer</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/State_pattern" title="State pattern">State</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Strategy_pattern" title="Strategy pattern">Strategy</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Template_method_pattern" title="Template method pattern">Template method</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Visitor_pattern" title="Visitor pattern">Visitor</a></div>
</td>
</tr>
</table>
</td>
</tr>
</table>


<!-- 
NewPP limit report
Preprocessor node count: 2334/1000000
Post-expand include size: 30145/2048000 bytes
Template argument size: 11773/2048000 bytes
Expensive parser function count: 0/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:65041-0!1!0!default!!en!2 and timestamp 20090403214915 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Singleton_pattern">http://en.wikipedia.org/wiki/Singleton_pattern</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Software_design_patterns" title="Category:Software design patterns">Software design patterns</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_example_C%2B%2B_code" title="Category:Articles with example C++ code">Articles with example C++ code</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_example_C_Sharp_code" title="Category:Articles with example C Sharp code">Articles with example C Sharp code</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_example_Java_code" title="Category:Articles with example Java code">Articles with example Java code</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_example_Python_code" title="Category:Articles with example Python code">Articles with example Python code</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_example_PHP_code" title="Category:Articles with example PHP code">Articles with example PHP code</a></span></div><div id="mw-hidden-catlinks" class="mw-hidden-cats-hidden">Hidden categories:&#32;<span dir='ltr'><a href="/wiki/Category:Wikipedia_external_links_cleanup" title="Category:Wikipedia external links cleanup">Wikipedia external links cleanup</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Singleton_pattern" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Singleton_pattern" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Singleton_pattern&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Singleton_pattern&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Singleton_pattern" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Singleton_pattern" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Singleton_pattern" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Singleton_pattern&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Singleton_pattern&amp;oldid=281568387" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Singleton_pattern&amp;id=281568387">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-ca"><a href="http://ca.wikipedia.org/wiki/Patr%C3%B3_singleton">Català</a></li>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/Singleton_(Entwurfsmuster)">Deutsch</a></li>
				<li class="interwiki-es"><a href="http://es.wikipedia.org/wiki/Singleton">Español</a></li>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Singleton_(patron_de_conception)">Français</a></li>
				<li class="interwiki-ko"><a href="http://ko.wikipedia.org/wiki/%EC%8B%B1%EA%B8%80%ED%84%B4_%ED%8C%A8%ED%84%B4">한국어</a></li>
				<li class="interwiki-it"><a href="http://it.wikipedia.org/wiki/Singleton">Italiano</a></li>
				<li class="interwiki-he"><a href="http://he.wikipedia.org/wiki/%D7%AA%D7%91%D7%A0%D7%99%D7%AA_Singleton">עברית</a></li>
				<li class="interwiki-nl"><a href="http://nl.wikipedia.org/wiki/Singleton_(informatica)">Nederlands</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/Singleton_%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3">日本語</a></li>
				<li class="interwiki-pl"><a href="http://pl.wikipedia.org/wiki/Singleton_(wzorzec_projektowy)">Polski</a></li>
				<li class="interwiki-pt"><a href="http://pt.wikipedia.org/wiki/Singleton">Português</a></li>
				<li class="interwiki-ru"><a href="http://ru.wikipedia.org/wiki/%D0%9E%D0%B4%D0%B8%D0%BD%D0%BE%D1%87%D0%BA%D0%B0_(%D1%88%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD_%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)">Русский</a></li>
				<li class="interwiki-sv"><a href="http://sv.wikipedia.org/wiki/Singleton">Svenska</a></li>
				<li class="interwiki-th"><a href="http://th.wikipedia.org/wiki/%E0%B8%8B%E0%B8%B4%E0%B8%87%E0%B9%80%E0%B8%81%E0%B8%B4%E0%B8%A5%E0%B8%95%E0%B8%B1%E0%B8%99%E0%B9%81%E0%B8%9E%E0%B8%95%E0%B9%80%E0%B8%97%E0%B8%B4%E0%B8%A3%E0%B9%8C%E0%B8%99">ไทย</a></li>
				<li class="interwiki-tr"><a href="http://tr.wikipedia.org/wiki/Tekillik_Kal%C4%B1b%C4%B1">Türkçe</a></li>
				<li class="interwiki-uk"><a href="http://uk.wikipedia.org/wiki/%D0%9E%D0%B4%D0%B8%D0%BD%D0%B0%D0%BA_(%D1%88%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD_%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D1%83%D0%B2%D0%B0%D0%BD%D0%BD%D1%8F)">Українська</a></li>
				<li class="interwiki-zh"><a href="http://zh.wikipedia.org/wiki/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F">中文</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 3 April 2009, at 20:40.</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv188 in 0.070 secs. --></body></html>
