<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="PIC microcontroller,Articles with unsourced statements since February 2008,Articles with unsourced statements since October 2008,Special:Search/PIC microcontroller,2008,Accumulator (computing),Addressing mode,Analog-to-digital converter,Arduino,Assembly language,Atmel" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=PIC_microcontroller&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=PIC_microcontroller&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>PIC microcontroller - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "PIC_microcontroller";
		var wgTitle = "PIC microcontroller";
		var wgAction = "view";
		var wgArticleId = "184588";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281520365;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-PIC_microcontroller skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">PIC microcontroller</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<div class="thumb tright">
<div class="thumbinner" style="width:182px;"><a href="/wiki/File:PIC_microcontrollers.jpg" class="image" title="PIC microcontrollers in DIP and QFN packages"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/4/4c/PIC_microcontrollers.jpg/180px-PIC_microcontrollers.jpg" width="180" height="81" border="0" class="thumbimage" /></a>
<div class="thumbcaption">
<div class="magnify"><a href="/wiki/File:PIC_microcontrollers.jpg" class="internal" title="Enlarge"><img src="/skins-1.5/common/images/magnify-clip.png" width="15" height="11" alt="" /></a></div>
PIC microcontrollers in <a href="/wiki/Dual_in-line_package" title="Dual in-line package">DIP</a> and <a href="/wiki/QFN" title="QFN">QFN</a> packages</div>
</div>
</div>
<div class="thumb tright">
<div class="thumbinner" style="width:182px;"><a href="/wiki/File:Microchip_PIC24HJ32GP202.jpg" class="image" title="16-bit 28-pin PDIP PIC24 microcontroller with a metric ruler"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/2/26/Microchip_PIC24HJ32GP202.jpg/180px-Microchip_PIC24HJ32GP202.jpg" width="180" height="125" border="0" class="thumbimage" /></a>
<div class="thumbcaption">
<div class="magnify"><a href="/wiki/File:Microchip_PIC24HJ32GP202.jpg" class="internal" title="Enlarge"><img src="/skins-1.5/common/images/magnify-clip.png" width="15" height="11" alt="" /></a></div>
16-bit 28-pin PDIP PIC24 microcontroller with a metric ruler</div>
</div>
</div>
<p><b>PIC</b> is a family of <a href="/wiki/Harvard_architecture" title="Harvard architecture">Harvard architecture</a> <a href="/wiki/Microcontroller" title="Microcontroller">microcontrollers</a> made by <a href="/wiki/Microchip_Technology" title="Microchip Technology">Microchip Technology</a>, derived from the PIC1640<sup id="cite_ref-PICmicrofamilytree_0-0" class="reference"><a href="#cite_note-PICmicrofamilytree-0" title=""><span>[</span>1<span>]</span></a></sup> originally developed by <a href="/wiki/General_Instrument" title="General Instrument">General Instrument</a>'s Microelectronics Division. The name PIC initially referred to "<b>Peripheral Interface Controller</b>".<sup id="cite_ref-1976databook_1-0" class="reference"><a href="#cite_note-1976databook-1" title=""><span>[</span>2<span>]</span></a></sup><sup id="cite_ref-1977catalog_2-0" class="reference"><a href="#cite_note-1977catalog-2" title=""><span>[</span>3<span>]</span></a></sup></p>
<p>PICs are popular with developers and hobbyists alike due to their low cost, wide availability, large user base, extensive collection of application notes, availability of low cost or free development tools, and serial programming (and re-programming with flash memory) capability.</p>
<p>Microchip announced on <a href="/wiki/February_2008" title="February 2008">February 2008</a> the shipment of its six billionth PIC processor.<sup id="cite_ref-3" class="reference"><a href="#cite_note-3" title=""><span>[</span>4<span>]</span></a></sup></p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Core_architecture"><span class="tocnumber">1</span> <span class="toctext">Core architecture</span></a>
<ul>
<li class="toclevel-2"><a href="#Data_space_.28RAM.29"><span class="tocnumber">1.1</span> <span class="toctext">Data space (RAM)</span></a></li>
<li class="toclevel-2"><a href="#Code_space"><span class="tocnumber">1.2</span> <span class="toctext">Code space</span></a></li>
<li class="toclevel-2"><a href="#Word_size"><span class="tocnumber">1.3</span> <span class="toctext">Word size</span></a></li>
<li class="toclevel-2"><a href="#Stacks"><span class="tocnumber">1.4</span> <span class="toctext">Stacks</span></a></li>
<li class="toclevel-2"><a href="#Instruction_set"><span class="tocnumber">1.5</span> <span class="toctext">Instruction set</span></a></li>
<li class="toclevel-2"><a href="#Interrupt_Latency"><span class="tocnumber">1.6</span> <span class="toctext">Interrupt Latency</span></a></li>
<li class="toclevel-2"><a href="#Limitations"><span class="tocnumber">1.7</span> <span class="toctext">Limitations</span></a></li>
<li class="toclevel-2"><a href="#Compiler_development"><span class="tocnumber">1.8</span> <span class="toctext">Compiler development</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Family_Core_Architectural_Differences"><span class="tocnumber">2</span> <span class="toctext">Family Core Architectural Differences</span></a>
<ul>
<li class="toclevel-2"><a href="#Baseline_Core_Devices"><span class="tocnumber">2.1</span> <span class="toctext">Baseline Core Devices</span></a></li>
<li class="toclevel-2"><a href="#Mid-Range_Core_Devices"><span class="tocnumber">2.2</span> <span class="toctext">Mid-Range Core Devices</span></a></li>
<li class="toclevel-2"><a href="#PIC17_High_End_Core_Devices"><span class="tocnumber">2.3</span> <span class="toctext">PIC17 High End Core Devices</span></a></li>
<li class="toclevel-2"><a href="#PIC18_High_End_Core_Devices"><span class="tocnumber">2.4</span> <span class="toctext">PIC18 High End Core Devices</span></a></li>
<li class="toclevel-2"><a href="#PIC24_and_dsPIC_16-bit_Microcontrollers"><span class="tocnumber">2.5</span> <span class="toctext">PIC24 and dsPIC 16-bit Microcontrollers</span></a></li>
<li class="toclevel-2"><a href="#PIC32_32-bit_Microcontrollers"><span class="tocnumber">2.6</span> <span class="toctext">PIC32 32-bit Microcontrollers</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Device_Variants_and_Hardware_Features"><span class="tocnumber">3</span> <span class="toctext">Device Variants and Hardware Features</span></a>
<ul>
<li class="toclevel-2"><a href="#Variants"><span class="tocnumber">3.1</span> <span class="toctext">Variants</span></a></li>
<li class="toclevel-2"><a href="#Trends"><span class="tocnumber">3.2</span> <span class="toctext">Trends</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#History"><span class="tocnumber">4</span> <span class="toctext">History</span></a></li>
<li class="toclevel-1"><a href="#Development_Tools"><span class="tocnumber">5</span> <span class="toctext">Development Tools</span></a>
<ul>
<li class="toclevel-2"><a href="#Commercially_Supported"><span class="tocnumber">5.1</span> <span class="toctext">Commercially Supported</span></a></li>
<li class="toclevel-2"><a href="#Open_Source"><span class="tocnumber">5.2</span> <span class="toctext">Open Source</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Device_Programmers"><span class="tocnumber">6</span> <span class="toctext">Device Programmers</span></a>
<ul>
<li class="toclevel-2"><a href="#Microchip_Programmers"><span class="tocnumber">6.1</span> <span class="toctext">Microchip Programmers</span></a></li>
<li class="toclevel-2"><a href="#Third-Party_Programmers"><span class="tocnumber">6.2</span> <span class="toctext">Third-Party Programmers</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Debugging"><span class="tocnumber">7</span> <span class="toctext">Debugging</span></a>
<ul>
<li class="toclevel-2"><a href="#Software_Emulation"><span class="tocnumber">7.1</span> <span class="toctext">Software Emulation</span></a></li>
<li class="toclevel-2"><a href="#In-Circuit_Debugging"><span class="tocnumber">7.2</span> <span class="toctext">In-Circuit Debugging</span></a></li>
<li class="toclevel-2"><a href="#In-Circuit_Emulators"><span class="tocnumber">7.3</span> <span class="toctext">In-Circuit Emulators</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#PIC_clones"><span class="tocnumber">8</span> <span class="toctext">PIC clones</span></a></li>
<li class="toclevel-1"><a href="#8.2F16.2F32-bit_PIC_microcontroller_product_families"><span class="tocnumber">9</span> <span class="toctext">8/16/32-bit PIC microcontroller product families</span></a></li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">10</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">11</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">12</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Core_architecture" id="Core_architecture"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=PIC_microcontroller&amp;action=edit&amp;section=1" title="Edit section: Core architecture">edit</a>]</span> <span class="mw-headline">Core architecture</span></h2>
<p>The PIC architecture is distinctively minimalist. It is characterized by the following features:</p>
<ul>
<li>Separate code and data spaces (Harvard architecture)</li>
<li>A small number of fixed length instructions</li>
<li>Most instructions are single cycle execution (4 clock cycles), with single delay cycles upon branches and skips</li>
<li>A single <a href="/wiki/Accumulator_(computing)" title="Accumulator (computing)">accumulator</a> (W), the use of which (as source operand) is implied (i.e. is not encoded in the opcode)</li>
<li>All RAM locations function as registers as both source and/or destination of math and other functions.<a href="http://ww1.microchip.com/downloads/en/DeviceDoc/35007b.pdf" class="external autonumber" title="http://ww1.microchip.com/downloads/en/DeviceDoc/35007b.pdf" rel="nofollow">[1]</a></li>
<li>A hardware stack for storing return addresses</li>
<li>A fairly small amount of addressable data space (typically 256 bytes), extended through banking</li>
<li>Data space mapped CPU, port, and peripheral registers</li>
<li>The program counter is also mapped into the data space and writable (this is used to implement indirect jumps).</li>
</ul>
<p>Unlike most other CPUs, there is no distinction between memory space and register space because the RAM serves the job of both memory and registers, and the RAM is usually just referred to as the register file or simply as the registers.</p>
<p><a name="Data_space_.28RAM.29" id="Data_space_.28RAM.29"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=PIC_microcontroller&amp;action=edit&amp;section=2" title="Edit section: Data space (RAM)">edit</a>]</span> <span class="mw-headline">Data space (RAM)</span></h3>
<p>PICs have a set of registers that function as general purpose RAM. Special purpose control registers for on-chip hardware resources are also mapped into the data space. The addressability of memory varies depending on device series, and all PIC devices have some banking mechanism to extend the addressing to additional memory. Later series of devices feature move instructions which can cover the whole addressable space, independent of the selected bank. In earlier devices (i.e., the baseline and mid-range cores), any register move had to be achieved via the accumulator.</p>
<p>To implement indirect addressing, a "file select register" (FSR) and "indirect register" (INDF) are used: A register number is written to the FSR, after which reads from or writes to INDF will actually be to or from the register pointed to by FSR. Later devices extended this concept with post- and pre- increment/decrement for greater efficiency in accessing sequentially stored data. This also allows FSR to be treated almost like a stack pointer.</p>
<p>External data memory is not directly addressable except in some high pin count PIC18 devices.</p>
<p><a name="Code_space" id="Code_space"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=PIC_microcontroller&amp;action=edit&amp;section=3" title="Edit section: Code space">edit</a>]</span> <span class="mw-headline">Code space</span></h3>
<p>All PICs feature Harvard architecture, so the code space and the data space are separate. PIC code space is generally implemented as <a href="/wiki/EPROM" title="EPROM">EPROM</a>, <a href="/wiki/Read-only_memory" title="Read-only memory">ROM</a>, or <a href="/wiki/Flash_memory" title="Flash memory">flash ROM</a>.</p>
<p>In general, external code memory is not directly addressable due to the lack of an external memory interface. The exceptions are PIC17 and select high pin count PIC18 devices.</p>
<p><a name="Word_size" id="Word_size"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=PIC_microcontroller&amp;action=edit&amp;section=4" title="Edit section: Word size">edit</a>]</span> <span class="mw-headline">Word size</span></h3>
<p>The word size of PICs can be a source of confusion. All PICs handle (and address) data in 8-bit chunks, so they should be called 8-bit microcontrollers. However, the unit of addressability of the code space is not generally the same as the data space. For example, PICs in the baseline and mid-range families have program memory addressable in the same wordsize as the instruction width, ie. 12 or 14 bits respectively. In contrast, in the PIC18 series, the program memory is addressed in 8-bit increments (bytes), which <b>differs</b> from the instruction width of 16 bits.</p>
<p><br />
In order to be clear, the program memory capacity is usually stated in number of (single word) instructions, rather than in bytes.</p>
<p><a name="Stacks" id="Stacks"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=PIC_microcontroller&amp;action=edit&amp;section=5" title="Edit section: Stacks">edit</a>]</span> <span class="mw-headline">Stacks</span></h3>
<p>PICs have a hardware <a href="/wiki/Call_stack" title="Call stack">call stack</a>, which is used to save return addresses. The hardware stack is not software accessible on earlier devices, but this changed with the 18 series devices.</p>
<p>Hardware support for a general purpose parameter stack was lacking in early series, but this greatly improved in the 18 series, making the 18 series architecture more friendly to high level language compilers.</p>
<p><a name="Instruction_set" id="Instruction_set"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=PIC_microcontroller&amp;action=edit&amp;section=6" title="Edit section: Instruction set">edit</a>]</span> <span class="mw-headline">Instruction set</span></h3>
<p>A PIC's instructions vary from about 35 instructions for the low-end PICs to over 80 instructions for the high-end PICs. The instruction set includes instructions to perform a variety of operations on registers directly, the <a href="/wiki/Accumulator_(computing)" title="Accumulator (computing)">accumulator</a> and a literal constant or the accumulator and a register, as well as for conditional execution, and program branching.</p>
<p>Some operations, such as bit setting and testing, can be performed on any numbered register, but bi-operand arithmetic operations always involve W; writing the result back to either W or the other operand register. To load a constant, it is necessary to load it into W before it can be moved into another register. On the older cores, all register moves needed to pass through W, but this changed on the "high end" cores.</p>
<p>PIC cores have skip instructions which are used for conditional execution and branching. The skip instructions are: 'skip if bit set', and, 'skip if bit not set'. Because cores before PIC18 had only unconditional branch instructions, conditional jumps are implemented by a conditional skip (with the opposite condition) followed by an unconditional branch. Skips are also of utility for conditional execution of any immediate single following instruction.</p>
<p>The PIC architecture has no (or very meager) hardware support for automatically saving processor state when servicing interrupts. The 18 series improved this situation by implementing shadow registers which save several important registers during an interrupt.</p>
<p>In general, PIC instructions fall into 5 classes:</p>
<ol>
<li>Operation on W with 8-bit immediate ("literal") operand. E.g. <code>movlw</code> (move literal to W), <code>andlw</code> (AND literal with W). One instruction peculiar to the PIC is <code>retlw</code>, load immediate into W and return, which is used with computed <a href="/wiki/Branch_(computer_science)" title="Branch (computer science)">branches</a> to produce <a href="/wiki/Lookup_table" title="Lookup table">lookup tables</a>.</li>
<li>Operation with W and indexed register. The result can be written to either the W register (e.g. <code>addwf <i>reg</i>,w</code>). or the selected register (e.g. <code>addwf <i>reg</i>,f</code>).</li>
<li>Bit operations. These take a register number and a bit number, and perform one of 4 actions: set or clear a bit, and test and skip on set/clear. The latter are used to perform conditional branches. The usual ALU status flags are available in a numbered register so operations such as "branch on carry clear" are possible.</li>
<li>Control transfers. Other than the skip instructions previously mentioned, there are only two: <code>goto</code> and <code>call</code>.</li>
<li>A few miscellaneous zero-operand instructions, such as return from subroutine, and <code>sleep</code> to enter low-power mode.</li>
</ol>
<p><a name="Interrupt_Latency" id="Interrupt_Latency"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=PIC_microcontroller&amp;action=edit&amp;section=7" title="Edit section: Interrupt Latency">edit</a>]</span> <span class="mw-headline">Interrupt Latency</span></h3>
<p>A very useful and unique property of PICs is that their interrupt latency is constant (it's also low: 3 instruction cycles). The delay is constant even though instructions can take one or two instruction cycles: a dead cycle is optionally inserted into the interrupt response sequence to make this true. External interrupts have to be synchronized with the four clock instruction cycle, otherwise there can be a one instruction cycle jitter. Internal interrupts are already synchronized.</p>
<p>The constant interrupt latency allows PICs to achieve interrupt driven low jitter timing sequences. An example of this is a video sync pulse generator. Other microcontrollers can do this in some cases, but it's awkward. The non-interrupt code has to anticipate the interrupt and enter into a sleep state before it arrives. On PICs, there is no need for this.</p>
<p>The three-cycle latency is increased in practice because the PIC does not store its registers when entering the interrupt routine. Typically, 4 instructions are needed to store the W-register, the status register and switch to a specific bank before starting the actual interrupt processing.</p>
<p><a name="Limitations" id="Limitations"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=PIC_microcontroller&amp;action=edit&amp;section=8" title="Edit section: Limitations">edit</a>]</span> <span class="mw-headline">Limitations</span></h3>
<p>The PIC architectures have several limitations:</p>
<ul>
<li>Only a single <a href="/wiki/Accumulator_(computing)" title="Accumulator (computing)">accumulator</a></li>
<li>A small <a href="/wiki/Instruction_set" title="Instruction set">instruction set</a></li>
<li>Operations and registers are not <a href="/wiki/Orthogonal#Computer_science" title="Orthogonal" class="mw-redirect">orthogonal</a>; some instructions can address RAM and/or <a href="/wiki/Constant_(computer_science)" title="Constant (computer science)" class="mw-redirect">immediate</a> constants, while others can only use the accumulator</li>
<li>Memory must be directly referenced in arithmetic and logic operations, although indirect addressing is available via 2 additional registers</li>
<li>Register-<a href="/wiki/Bank_switching" title="Bank switching">bank switching</a> is required to access the entire RAM of many devices, making <a href="/wiki/Position-independent_code" title="Position-independent code">position-independent code</a> complex and inefficient</li>
<li>Conditional skip instructions are used instead of conditional branch instructions used by most other architectures</li>
</ul>
<p>The following limitations have been addressed in the PIC18, but still apply to earlier cores:</p>
<ul>
<li>Indexed <a href="/wiki/Addressing_mode" title="Addressing mode">addressing mode</a> is very rudimentary</li>
<li>Stack:
<ul>
<li>The hardware call stack is so small that program structure must often be flattened</li>
<li>The hardware call stack is not addressable, so pre-emptive <a href="/w/index.php?title=Task_switch&amp;action=edit&amp;redlink=1" class="new" title="Task switch (page does not exist)">task switching</a> cannot be implemented</li>
<li>Software-implemented <a href="/wiki/Stack_(data_structure)" title="Stack (data structure)">stacks</a> are not efficient, so it is difficult to generate <a href="/wiki/Reentrant_(subroutine)" title="Reentrant (subroutine)">reentrant</a> code and support <a href="/wiki/Local_variable" title="Local variable">local variables</a></li>
</ul>
</li>
<li>Program memory is not directly addressable, and thus space-inefficient and/or time-consuming to access. (This is true of most Harvard architecture microcontrollers.)</li>
</ul>
<p>With paged program memory, there are two page sizes to worry about: one for CALL and GOTO and another for computed GOTO (typically used for table lookups). For example, on PIC16, CALL and GOTO have 11 bits of addressing, so the page size is 2KB. For computed GOTOs, where you add to PCL, the page size is 256 bytes. In both cases, the upper address bits are provided by the PCLATH register. This register must be changed every time control transfers between pages. PCLATH must also be preserved by any interrupt handler.<sup id="cite_ref-4" class="reference"><a href="#cite_note-4" title=""><span>[</span>5<span>]</span></a></sup></p>
<p><a name="Compiler_development" id="Compiler_development"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=PIC_microcontroller&amp;action=edit&amp;section=9" title="Edit section: Compiler development">edit</a>]</span> <span class="mw-headline">Compiler development</span></h3>
<p>These properties have made it difficult to develop compilers that target PIC microcontrollers. While several commercial compilers are available, in 2008, Microchip finally released their C compilers, C18, and C30 for their line of 18f 24f and 30/33f processors. By contrast, <a href="/wiki/Atmel" title="Atmel">Atmel</a>'s <a href="/wiki/Atmel_AVR" title="Atmel AVR">AVR</a> microcontrollers—which are competitive with PIC in terms of hardware capabilities and price, but feature a <a href="/wiki/Reduced_instruction_set_computer" title="Reduced instruction set computer">RISC</a> instruction set—have long been supported by the <a href="/wiki/GNU_C_Compiler" title="GNU C Compiler" class="mw-redirect">GNU C Compiler</a>.</p>
<p>Also, because of these properties, PIC assembly language code can be difficult to comprehend. Judicious use of simple <a href="/wiki/Macro_(computer_science)" title="Macro (computer science)">macros</a> can make PIC assembly language much more palatable, but at the cost of a reduction in performance. For example, the original <a href="/wiki/Parallax,_Inc._(company)" title="Parallax, Inc. (company)">Parallax</a> PIC assembler "pasm" has macros which hide W and make the PIC look like a two-address machine. It has macro instructions like "<code>mov b,a</code>" (move the data from address <i>a</i> to address <i>b</i>) and "<code>add b,a</code>" (add data from address <i>a</i> to data in address <i>b</i>). It also hides the skip instructions by providing three operand branch macro instructions such as "<code>cjne a,b,dest</code>" (compare <i>a</i> with <i>b</i> and jump to <i>dest</i> if they are not equal).</p>
<p><a name="Family_Core_Architectural_Differences" id="Family_Core_Architectural_Differences"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=PIC_microcontroller&amp;action=edit&amp;section=10" title="Edit section: Family Core Architectural Differences">edit</a>]</span> <span class="mw-headline">Family Core Architectural Differences</span></h2>
<p><a name="Baseline_Core_Devices" id="Baseline_Core_Devices"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=PIC_microcontroller&amp;action=edit&amp;section=11" title="Edit section: Baseline Core Devices">edit</a>]</span> <span class="mw-headline">Baseline Core Devices</span></h3>
<p>These devices feature a 12-bit wide code memory, a 32-byte register file, and a tiny two level deep call stack. They are represented by the PIC10 series, as well as by some PIC12 and PIC16 devices. Baseline devices are available in 6-pin to 40-pin packages.</p>
<p>Generally the first 7 to 9 bytes of the register file are special-purpose registers, and the remaining bytes are general purpose RAM. If banked RAM is implemented, the bank number is selected by the high 3 bits of the FSR. This affects register numbers 16–31; registers 0–15 are global and not affected by the bank select bits.</p>
<p>The ROM address space is 512 words (12 bits each), which may be extended to 2048 words by banking. <code>CALL</code> and <code>GOTO</code> instructions specify the low 9 bits of the new code location; additional high-order bits are taken from the staus register. Note that a CALL instruction only includes 8 bits of address, and may only specify addresses in the first half of each 512-word page.</p>
<p>The instruction set is as follows. Register numbers are referred to as "f", while constants are referred to as "k". Bit numbers (0–7) are selected by "b". The "d" bit selects the destination: 0 indicates W, while 1 indicates that the result is written back to source register f.</p>
<table class="wikitable">
<caption>12-bit PIC instruction set</caption>
<tr>
<th>Opcode (binary)</th>
<th>Mnemonic</th>
<th>Description</th>
</tr>
<tr>
<td><code>0000 0000 0000</code></td>
<td>NOP</td>
<td>No operation</td>
</tr>
<tr>
<td><code>0000 0000 0010</code></td>
<td>OPTION</td>
<td>Load OPTION register with contents of W</td>
</tr>
<tr>
<td><code>0000 0000 0011</code></td>
<td>SLEEP</td>
<td>Go into standby mode</td>
</tr>
<tr>
<td><code>0000 0000 0100</code></td>
<td>CLRWDT</td>
<td>Reset watchdog timer</td>
</tr>
<tr>
<td><code>0000 0000 01ff</code></td>
<td>TRIS f</td>
<td>Move W to port control register (f=1..3)</td>
</tr>
<tr>
<td colspan="3"></td>
</tr>
<tr>
<td><code>0000 001 fffff</code></td>
<td>MOVWF f</td>
<td>Move W to f</td>
</tr>
<tr>
<td><code>0000 010 xxxxx</code></td>
<td>CLRW</td>
<td>Clear W to 0 (a.k.a CLR x,W)</td>
</tr>
<tr>
<td><code>0000 011 fffff</code></td>
<td>CLRF f</td>
<td>Clear f to 0 (a.k.a. CLR f,F)</td>
</tr>
<tr>
<td><code>0000 10d fffff</code></td>
<td>SUBWF f,d</td>
<td>Subtract W from f (d = f − W)</td>
</tr>
<tr>
<td><code>0000 11d fffff</code></td>
<td>DECF f,d</td>
<td>Decrement f (d = f − 1)</td>
</tr>
<tr>
<td><code>0001 00d fffff</code></td>
<td>IORWF f,d</td>
<td>Inclusive OR W with F (d = f OR W)</td>
</tr>
<tr>
<td><code>0001 01d fffff</code></td>
<td>ANDWF f,d</td>
<td>AND W with F (d = f AND W)</td>
</tr>
<tr>
<td><code>0001 10d fffff</code></td>
<td>XORWF f,d</td>
<td>Exclusive OR W with F (d = f XOR W)</td>
</tr>
<tr>
<td><code>0001 11d fffff</code></td>
<td>ADDWF f,d</td>
<td>Add W with F (d = f + W)</td>
</tr>
<tr>
<td><code>0010 00d fffff</code></td>
<td>MOVF f,d</td>
<td>Move F (d = f)</td>
</tr>
<tr>
<td><code>0010 01d fffff</code></td>
<td>COMF f,d</td>
<td>Complement f (d = NOT f)</td>
</tr>
<tr>
<td><code>0010 10d fffff</code></td>
<td>INCF f,d</td>
<td>Increment f (d = f + 1)</td>
</tr>
<tr>
<td><code>0010 11d fffff</code></td>
<td>DECFSZ f,d</td>
<td>Decrement f (d = f − 1) and skip if zero</td>
</tr>
<tr>
<td><code>0011 00d fffff</code></td>
<td>RRF f,d</td>
<td>Rotate right F (rotate right through carry)</td>
</tr>
<tr>
<td><code>0011 01d fffff</code></td>
<td>RLF f,d</td>
<td>Rotate left F (rotate left through carry)</td>
</tr>
<tr>
<td><code>0011 10d fffff</code></td>
<td>SWAPF f,d</td>
<td>Swap 4-bit halves of f (d = f&lt;&lt;4 | f&gt;&gt;4)</td>
</tr>
<tr>
<td><code>0011 11d fffff</code></td>
<td>INCFSZ f,d</td>
<td>Increment f (d = f + 1) and skip if zero</td>
</tr>
<tr>
<td colspan="3"></td>
</tr>
<tr>
<td><code>0100 bbb fffff</code></td>
<td>BCF f,b</td>
<td>Bit clear f (Clear bit b of f)</td>
</tr>
<tr>
<td><code>0101 bbb fffff</code></td>
<td>BSF f,b</td>
<td>Bit set f (Set bit b of f)</td>
</tr>
<tr>
<td><code>0110 bbb fffff</code></td>
<td>BTFSC f,b</td>
<td>Bit test f, skip if clear (Test bit b of f)</td>
</tr>
<tr>
<td><code>0111 bbb fffff</code></td>
<td>BTFSS f,b</td>
<td>Bit test f, skip if set (Test bit b of f)</td>
</tr>
<tr>
<td colspan="3"></td>
</tr>
<tr>
<td><code>1000 kkkkkkkk</code></td>
<td>RETLW k</td>
<td>Set W to k and return</td>
</tr>
<tr>
<td><code>1001 kkkkkkkk</code></td>
<td>CALL k</td>
<td>Save return address, load PC with k</td>
</tr>
<tr>
<td><code>101 kkkkkkkkk</code></td>
<td>GOTO k</td>
<td>Jump to address k (9 bits!)</td>
</tr>
<tr>
<td><code>1100 kkkkkkkk</code></td>
<td>MOVLW k</td>
<td>Move literal to W (W = k)</td>
</tr>
<tr>
<td><code>1101 kkkkkkkk</code></td>
<td>IORLW k</td>
<td>Inclusive or literal with W (W = k OR W)</td>
</tr>
<tr>
<td><code>1110 kkkkkkkk</code></td>
<td>ANDLW k</td>
<td>AND literal with W (W = k AND W)</td>
</tr>
<tr>
<td><code>1111 kkkkkkkk</code></td>
<td>XORLW k</td>
<td>Exclusive or literal with W (W = k XOR W)</td>
</tr>
</table>
<p><a name="Mid-Range_Core_Devices" id="Mid-Range_Core_Devices"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=PIC_microcontroller&amp;action=edit&amp;section=12" title="Edit section: Mid-Range Core Devices">edit</a>]</span> <span class="mw-headline">Mid-Range Core Devices</span></h3>
<p>These devices feature a 14-bit wide code memory, and an improved 8 level deep call stack. The instruction set differs very little from the baseline devices, but the increased opcode width allows 128 registers and 2048 words of code to be directly addressed. The mid-range core is available in the majority of devices labeled PIC12 and PIC16.</p>
<p>The first 32 bytes of the register space are allocated to special-purpose registers; the remaining 96 bytes are used for general-purpose RAM. If banked RAM is used, the high 16 registers (0x70–0x7F) are global, as are a few of the most important special-purpose registers, including the STATUS register which holds the RAM bank select bits. (The other global registers are FSR and INDF, the low 8 bits of the program counter PCL, the PC high preload register PCLATH, and the master interrupt control register INTCON.)</p>
<p>The PCLATH register supplies high-order instruction address bits when the 8 bits supplied by a write to the PCL register, or the 11 bits supplied by a <code>GOTO</code> or <code>CALL</code> instruction, is not sufficient to address the available ROM space.</p>
<table class="wikitable">
<caption>14-bit PIC instruction set</caption>
<tr>
<th>Opcode (binary)</th>
<th>Mnemonic</th>
<th>Description</th>
</tr>
<tr>
<td><code>00 0000 0000 0000</code></td>
<td>NOP</td>
<td>No operation</td>
</tr>
<tr>
<td><code>00 0000 0000 1000</code></td>
<td>RETURN</td>
<td>Return from subroutine, W unchanged</td>
</tr>
<tr>
<td><code>00 0000 0000 1001</code></td>
<td>RETFIE</td>
<td>Return from interrupt</td>
</tr>
<tr>
<td><code>00 0000 0110 0010</code></td>
<td>OPTION</td>
<td>Write W to OPTION register</td>
</tr>
<tr>
<td><code>00 0000 0110 0011</code></td>
<td>SLEEP</td>
<td>Go into standby mode</td>
</tr>
<tr>
<td><code>00 0000 0110 0100</code></td>
<td>CLRWDT</td>
<td>Reset watchdog timer</td>
</tr>
<tr>
<td><code>00 0000 0110 01ff</code></td>
<td>TRIS f</td>
<td>Write W to tristate register f</td>
</tr>
<tr>
<td colspan="3"></td>
</tr>
<tr>
<td><code>00 0000 1 fffffff</code></td>
<td>MOVWF f</td>
<td>Move W to f</td>
</tr>
<tr>
<td><code>00 0001 0 xxxxxxx</code></td>
<td>CLRW</td>
<td>Clear W to 0 (W = 0)</td>
</tr>
<tr>
<td><code>00 0001 1 fffffff</code></td>
<td>CLRF f</td>
<td>Clear f to 0 (f = 0)</td>
</tr>
<tr>
<td><code>00 0010 d fffffff</code></td>
<td>SUBWF f,d</td>
<td>Subtract W from f (d = f − W)</td>
</tr>
<tr>
<td><code>00 0011 d fffffff</code></td>
<td>DECF f,d</td>
<td>Decrement f (d = f − 1)</td>
</tr>
<tr>
<td><code>00 0100 d fffffff</code></td>
<td>IORWF f,d</td>
<td>Inclusive OR W with F (d = f OR W)</td>
</tr>
<tr>
<td><code>00 0101 d fffffff</code></td>
<td>ANDWF f,d</td>
<td>AND W with F (d = f AND W)</td>
</tr>
<tr>
<td><code>00 0110 d fffffff</code></td>
<td>XORWF f,d</td>
<td>Exclusive OR W with F (d = f XOR W)</td>
</tr>
<tr>
<td><code>00 0111 d fffffff</code></td>
<td>ADDWF f,d</td>
<td>Add W with F (d = f + W)</td>
</tr>
<tr>
<td><code>00 1000 d fffffff</code></td>
<td>MOVF f,d</td>
<td>Move F (d = f)</td>
</tr>
<tr>
<td><code>00 1001 d fffffff</code></td>
<td>COMF f,d</td>
<td>Complement f (d = NOT f)</td>
</tr>
<tr>
<td><code>00 1010 d fffffff</code></td>
<td>INCF f,d</td>
<td>Increment f (d = f + 1)</td>
</tr>
<tr>
<td><code>00 1011 d fffffff</code></td>
<td>DECFSZ f,d</td>
<td>Decrement f (d = f − 1) and skip if zero</td>
</tr>
<tr>
<td><code>00 1100 d fffffff</code></td>
<td>RRF f,d</td>
<td>Rotate right F (rotate right through carry)</td>
</tr>
<tr>
<td><code>00 1101 d fffffff</code></td>
<td>RLF f,d</td>
<td>Rotate left F (rotate left through carry)</td>
</tr>
<tr>
<td><code>00 1110 d fffffff</code></td>
<td>SWAPF f,d</td>
<td>Swap 4-bit halves of f (d = f&lt;&lt;4 | f&gt;&gt;4)</td>
</tr>
<tr>
<td><code>00 1111 d fffffff</code></td>
<td>INCFSZ f,d</td>
<td>Increment f (d = f + 1) and skip if zero</td>
</tr>
<tr>
<td colspan="3"></td>
</tr>
<tr>
<td><code>01 00 bbb fffffff</code></td>
<td>BCF f,b</td>
<td>Bit clear f (Clear bit b of f)</td>
</tr>
<tr>
<td><code>01 01 bbb fffffff</code></td>
<td>BSF f,b</td>
<td>Bit set f (Set bit b of f)</td>
</tr>
<tr>
<td><code>01 10 bbb fffffff</code></td>
<td>BTFSC f,b</td>
<td>Bit test f, skip if clear (Test bit b of f)</td>
</tr>
<tr>
<td><code>01 11 bbb fffffff</code></td>
<td>BTFSS f,b</td>
<td>Bit test f, skip if set (Test bit b of f)</td>
</tr>
<tr>
<td colspan="3"></td>
</tr>
<tr>
<td><code>10 0 kkkkkkkkkkk</code></td>
<td>CALL k</td>
<td>Save return address, load PC with k</td>
</tr>
<tr>
<td><code>10 1 kkkkkkkkkkk</code></td>
<td>GOTO k</td>
<td>Jump to address k (11 bits)</td>
</tr>
<tr>
<td colspan="3"></td>
</tr>
<tr>
<td><code>11 00xx kkkkkkkk</code></td>
<td>MOVLW k</td>
<td>Move literal to W (W = k)</td>
</tr>
<tr>
<td><code>11 01xx kkkkkkkk</code></td>
<td>RETLW k</td>
<td>Set W to k and return</td>
</tr>
<tr>
<td><code>11 1000 kkkkkkkk</code></td>
<td>IORLW k</td>
<td>Inclusive or literal with W (W = k OR W)</td>
</tr>
<tr>
<td><code>11 1001 kkkkkkkk</code></td>
<td>ANDLW k</td>
<td>AND literal with W (W = k AND W)</td>
</tr>
<tr>
<td><code>11 1010 kkkkkkkk</code></td>
<td>XORLW k</td>
<td>Exclusive or literal with W (W = k XOR W)</td>
</tr>
<tr>
<td><code>11 110x kkkkkkkk</code></td>
<td>SUBLW k</td>
<td>Subtract W from literal (W = k − W)</td>
</tr>
<tr>
<td><code>11 111x kkkkkkkk</code></td>
<td>ADDLW k</td>
<td>Add literal to W (W = k + W)</td>
</tr>
</table>
<p><a name="PIC17_High_End_Core_Devices" id="PIC17_High_End_Core_Devices"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=PIC_microcontroller&amp;action=edit&amp;section=13" title="Edit section: PIC17 High End Core Devices">edit</a>]</span> <span class="mw-headline">PIC17 High End Core Devices</span></h3>
<p>The 17 series never became popular and has been superseded by the PIC18 architecture. It is not recommended for new designs, and availability may be limited.</p>
<p>Improvements over earlier cores are 16-bit wide opcodes (allowing many new instructions), and a 16 level deep call stack. PIC17 devices were produced in packages from 40 to 68 pins.</p>
<p>The 17 series introduced a number of important new features:</p>
<ul>
<li>a memory mapped accumulator</li>
<li>read access to code memory (table reads)</li>
<li>direct register to register moves (prior cores needed to move registers through the accumulator)</li>
<li>an external program memory interface to expand the code space</li>
<li>an 8bit x 8bit hardware multiplier</li>
<li>a second indirect register pair</li>
<li>auto-increment/decrement addressing controlled by control bits in a status register (ALUSTA)</li>
</ul>
<p><a name="PIC18_High_End_Core_Devices" id="PIC18_High_End_Core_Devices"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=PIC_microcontroller&amp;action=edit&amp;section=14" title="Edit section: PIC18 High End Core Devices">edit</a>]</span> <span class="mw-headline">PIC18 High End Core Devices</span></h3>
<p>Microchip introduced the PIC18 architecture in 2002. <a href="http://mdubuc.freeshell.org/Sdcc/" class="external autonumber" title="http://mdubuc.freeshell.org/Sdcc/" rel="nofollow">[2]</a> Unlike the 17 series, it has proven to be very popular, with a large number of device variants presently in manufacture. In contrast to earlier devices, which were more often than not programmed in assembly, C has become the predominant development language<a href="http://www.microchipc.com/sourcecode/" class="external autonumber" title="http://www.microchipc.com/sourcecode/" rel="nofollow">[3]</a>.</p>
<p>The 18 series inherits most of the features and instructions of the 17 series, while adding a number of important new features:</p>
<ul>
<li>much deeper call stack (31 levels deep)</li>
<li>the call stack may be read and written</li>
<li>conditional branch instructions</li>
<li>indexed addressing mode (PLUSW)</li>
<li>extending the FSR registers to 12 bits, allowing them to linearly address the entire data address space</li>
<li>the addition of another FSR register (bringing the number up to 3)</li>
</ul>
<p>The auto increment/decrement feature was improved by removing the control bits and adding four new indirect registers per FSR. Depending on which indirect file register is being accessed it is possible to postdecrement, postincrement, or preincrement FSR; or form the effective address by adding W to FSR.</p>
<p>In more advanced PIC18 devices, an "extended mode" is available which makes the addressing even more favorable to compiled code:</p>
<ul>
<li>a new offset addressing mode; some addresses which were relative to the access bank are now interpreted relative to the FSR2 register</li>
<li>the addition of several new instructions, notable for manipulating the FSR registers.</li>
</ul>
<p>These changes were primarily aimed at improving the efficiency of a data stack implementation. If FSR2 is used either as the stack pointer or frame pointer, stack items may be easily indexed—allowing more efficient re-entrant code. Microchip C18 chooses to use FSR2 as a frame pointer.</p>
<p><a name="PIC24_and_dsPIC_16-bit_Microcontrollers" id="PIC24_and_dsPIC_16-bit_Microcontrollers"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=PIC_microcontroller&amp;action=edit&amp;section=15" title="Edit section: PIC24 and dsPIC 16-bit Microcontrollers">edit</a>]</span> <span class="mw-headline">PIC24 and dsPIC 16-bit Microcontrollers</span></h3>
<p>In 2001 Microchip introduced the <a href="/w/index.php?title=DsPIC&amp;action=edit&amp;redlink=1" class="new" title="DsPIC (page does not exist)">dsPIC</a> series of chips<a href="http://www.microchip.com/stellent/idcplg?IdcService=SS_GET_PAGE&amp;nodeId=2018&amp;mcparam=en013529" class="external autonumber" title="http://www.microchip.com/stellent/idcplg?IdcService=SS_GET_PAGE&amp;nodeId=2018&amp;mcparam=en013529" rel="nofollow">[4]</a>, which entered mass production in late 2004. They are Microchip's first inherently 16-bit microcontrollers. PIC24 devices are designed as general purpose microcontrollers. dsPIC devices include <a href="/wiki/Digital_signal_processing" title="Digital signal processing">digital signal processing</a> capabilities in addition.</p>
<p>Architecturally, although they share the PIC moniker, they are very different from the 8-bit PICs. The most notable differences are<sup id="cite_ref-5" class="reference"><a href="#cite_note-5" title=""><span>[</span>6<span>]</span></a></sup></p>
<ul>
<li>they feature a set of 16 working registers</li>
<li>they fully support a stack in RAM, and do not have a hardware stack</li>
<li>bank switching is not required to access RAM or special function registers</li>
<li>data stored in program memory can be accessed directly using a feature called Program Space Visibility</li>
<li>interrupt sources may be assigned to distinct handlers using an interrupt vector table</li>
</ul>
<p>Some features are:</p>
<ul>
<li>hardware <a href="/wiki/Multiply-accumulate" title="Multiply-accumulate">MAC</a> (multiply-accumulate)</li>
<li><a href="/wiki/Barrel_shifter" title="Barrel shifter">barrel shifting</a></li>
<li>bit reversal</li>
<li>(16x16)-bit multiplication and other DSP operations.</li>
<li>hardware support for loop indexing</li>
<li><a href="/wiki/Direct_Memory_Access" title="Direct Memory Access" class="mw-redirect">Direct Memory Access</a></li>
</ul>
<p>dsPICs can be programmed in C using a variant of <a href="/wiki/GNU_Compiler_Collection" title="GNU Compiler Collection">gcc</a>.</p>
<p><a name="PIC32_32-bit_Microcontrollers" id="PIC32_32-bit_Microcontrollers"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=PIC_microcontroller&amp;action=edit&amp;section=16" title="Edit section: PIC32 32-bit Microcontrollers">edit</a>]</span> <span class="mw-headline">PIC32 32-bit Microcontrollers</span></h3>
<p>In November 2007 Microchip introduced the new <a href="http://www.microchip.com/stellent/idcplg?IdcService=SS_GET_PAGE&amp;nodeId=2018&amp;mcparam=en532888" class="external text" title="http://www.microchip.com/stellent/idcplg?IdcService=SS_GET_PAGE&amp;nodeId=2018&amp;mcparam=en532888" rel="nofollow">PIC32MX</a> family of 32-bit microcontrollers. The initial device line-up is based on the industry standard <a href="/w/index.php?title=MIPS32_M4K_Core&amp;action=edit&amp;redlink=1" class="new" title="MIPS32 M4K Core (page does not exist)">MIPS32 M4K Core</a><a href="http://www.mips.com/products/processors/32-64-bit-cores/mips32-m4k/" class="external autonumber" title="http://www.mips.com/products/processors/32-64-bit-cores/mips32-m4k/" rel="nofollow">[5]</a>. The device can be programmed using the <a href="http://microchip.com/stellent/idcplg?IdcService=SS_GET_PAGE&amp;nodeId=2615&amp;dDocName=en532454" class="external text" title="http://microchip.com/stellent/idcplg?IdcService=SS_GET_PAGE&amp;nodeId=2615&amp;dDocName=en532454" rel="nofollow">Microchip C32 compiler</a>, a variant of the GCC compiler. The first 18 models currently in production (PIC32MX3xx and PIC32MX4xx) are pin to pin compatible and share the same peripherals set with the PIC24FxxGA0xx family of (16-bit) devices allowing the use of common libraries, software and hardware tools.</p>
<p>The PIC32 architecture brings a number of new features to Microchip portfolio, including:</p>
<ul>
<li>The highest execution speed 80MIPS (90+ Dhristone MIPS @80MHz)</li>
<li>The largest FLASH memory: 512kbyte</li>
<li>One instruction per clock cycle execution</li>
<li>The first cached processor</li>
<li>Allows execution from RAM</li>
<li>Full Speed Host/Dual Role and OTG USB capabilities</li>
<li>Full JTAG and 2 wire programming and debugging</li>
<li>Real time trace</li>
</ul>
<p><a name="Device_Variants_and_Hardware_Features" id="Device_Variants_and_Hardware_Features"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=PIC_microcontroller&amp;action=edit&amp;section=17" title="Edit section: Device Variants and Hardware Features">edit</a>]</span> <span class="mw-headline">Device Variants and Hardware Features</span></h2>
<p>PIC devices generally feature:</p>
<ul>
<li>Sleep mode (power savings).</li>
<li><a href="/wiki/Watchdog_timer" title="Watchdog timer">Watchdog timer</a>.</li>
<li>Various crystal or <a href="/wiki/RC_circuit" title="RC circuit">RC</a> oscillator configurations, or an external clock.</li>
</ul>
<p><a name="Variants" id="Variants"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=PIC_microcontroller&amp;action=edit&amp;section=18" title="Edit section: Variants">edit</a>]</span> <span class="mw-headline">Variants</span></h3>
<p>Within a series, there are still many device variants depending on what hardware resources the chip features.</p>
<ul>
<li><a href="/wiki/GPIO" title="GPIO" class="mw-redirect">General purpose I/O pins</a>.</li>
<li>Internal clock oscillators.</li>
<li>8/16 Bit Timers.</li>
<li>Internal <a href="/wiki/EEPROM" title="EEPROM">EEPROM</a> Memory.</li>
<li>Synchronous/Asynchronous Serial Interface <a href="/wiki/USART" title="USART" class="mw-redirect">USART</a>.</li>
<li>MSSP Peripheral for <a href="/wiki/I%C2%B2C" title="I²C">I²C</a> and <a href="/wiki/Serial_Peripheral_Interface" title="Serial Peripheral Interface" class="mw-redirect">SPI</a> Communications.</li>
<li>Capture/Compare and <a href="/wiki/Pulse-width_modulation" title="Pulse-width modulation">PWM</a> modules.</li>
<li><a href="/wiki/Analog-to-digital_converter" title="Analog-to-digital converter">Analog-to-digital converters</a> (up to ~1.0 <a href="/wiki/Hertz" title="Hertz">MHz</a>).</li>
<li>USB, <a href="/wiki/Ethernet" title="Ethernet">Ethernet</a>, <a href="/wiki/Controller_Area_Network" title="Controller Area Network" class="mw-redirect">CAN</a> interfacing support.</li>
<li>External memory interface.</li>
<li>Integrated analog RF front ends (PIC16F639, and rfPIC).</li>
<li><a href="/wiki/KeeLoq" title="KeeLoq">KEELOQ</a> Rolling code encryption peripheral (encode/decode)</li>
<li>And many more.</li>
</ul>
<p><a name="Trends" id="Trends"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=PIC_microcontroller&amp;action=edit&amp;section=19" title="Edit section: Trends">edit</a>]</span> <span class="mw-headline">Trends</span></h3>
<p>The first generation of PICs with <a href="/wiki/EPROM" title="EPROM">EPROM</a> storage are almost completely replaced by chips with <a href="/wiki/Flash_memory" title="Flash memory">Flash memory</a>. Likewise, the original 12-bit instruction set of the PIC1650 and its direct descendants has been superseded by 14-bit and 16-bit instruction sets. Microchip still sells OTP (one-time-programmable) and windowed (UV-erasable) versions of some of its EPROM based PICs for legacy support or volume orders. It should be noted that the Microchip website lists PICs that are not electrically erasable as OTP despite the fact that UV erasable windowed versions of these chips can be ordered.</p>
<p><a name="History" id="History"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=PIC_microcontroller&amp;action=edit&amp;section=20" title="Edit section: History">edit</a>]</span> <span class="mw-headline">History</span></h2>
<p>The original PIC was built to be used with General Instruments' new 16-bit <a href="/wiki/Central_processing_unit" title="Central processing unit">CPU</a>, the CP1600. While generally a good <a href="/wiki/CPU" title="CPU" class="mw-redirect">CPU</a>, the CP1600 had poor <a href="/wiki/Input/output" title="Input/output">I/O</a> performance, and the 8-bit PIC was developed in 1975 to improve performance of the overall system by offloading I/O tasks from the CPU. The PIC used simple <a href="/wiki/Microcode" title="Microcode">microcode</a> stored in ROM to perform its tasks, and although the term wasn't used at the time, it shares some common features with <a href="/wiki/Reduced_instruction_set_computer" title="Reduced instruction set computer">RISC</a> designs.</p>
<p>In 1985 General Instruments spun off their <a href="/wiki/Microelectronics" title="Microelectronics">microelectronics</a> division, and the new ownership canceled almost everything — which by this time was mostly out-of-date. The PIC, however, was upgraded with internal <a href="/wiki/EPROM" title="EPROM">EPROM</a> to produce a programmable <a href="/wiki/Channel_controller" title="Channel controller" class="mw-redirect">channel controller</a>, and today a huge variety of PICs are available with various on-board peripherals (<a href="/wiki/Serial_communications" title="Serial communications" class="mw-redirect">serial communication</a> modules, <a href="/wiki/Universal_asynchronous_receiver/transmitter" title="Universal asynchronous receiver/transmitter">UARTs</a>, motor control kernels, etc.) and program memory from 256 words to 64k words and more (a "word" is one assembly language instruction, varying from 12, 14 or 16 <a href="/wiki/Bit" title="Bit">bits</a> depending on the specific PIC <a href="/wiki/Micro_programming_language" title="Micro programming language">micro</a> family).</p>
<p>PIC and PICmicro are registered trademarks of Microchip Technology. It is generally thought that PIC stands for <b>Peripheral Interface Controller</b>, although General Instruments' original acronym for the initial PIC1640 and PIC1650 devices was "<b>Programmable Interface Controller</b>".<sup id="cite_ref-1976databook_1-1" class="reference"><a href="#cite_note-1976databook-1" title=""><span>[</span>2<span>]</span></a></sup> The acronym was quickly replaced with "<b>Programmable Intelligent Computer</b>".<sup id="cite_ref-1977catalog_2-1" class="reference"><a href="#cite_note-1977catalog-2" title=""><span>[</span>3<span>]</span></a></sup></p>
<div class="thumb tright">
<div class="thumbinner" style="width:182px;"><a href="/wiki/File:PIC16CxxxWIN.JPG" class="image" title="Various older (EPROM) PIC microcontrollers"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/f/f8/PIC16CxxxWIN.JPG/180px-PIC16CxxxWIN.JPG" width="180" height="135" border="0" class="thumbimage" /></a>
<div class="thumbcaption">
<div class="magnify"><a href="/wiki/File:PIC16CxxxWIN.JPG" class="internal" title="Enlarge"><img src="/skins-1.5/common/images/magnify-clip.png" width="15" height="11" alt="" /></a></div>
Various older (EPROM) PIC microcontrollers</div>
</div>
</div>
<p>The Microchip 16C84 (<a href="/wiki/PIC16x84" title="PIC16x84">PIC16x84</a>), introduced in 1993<a href="http://microchip.com/stellent/idcplg?IdcService=SS_GET_PAGE&amp;nodeId=2018&amp;mcparam=en013082" class="external autonumber" title="http://microchip.com/stellent/idcplg?IdcService=SS_GET_PAGE&amp;nodeId=2018&amp;mcparam=en013082" rel="nofollow">[6]</a> was the first<sup class="noprint Template-Fact"><span title="This claim needs references to reliable sources&#160;since February 2008" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</span></sup> CPU with on-board EEPROM memory. This electrically-erasable memory made it cost less than CPUs that required a quartz "erase window" for erasing EPROM.</p>
<p><a name="Development_Tools" id="Development_Tools"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=PIC_microcontroller&amp;action=edit&amp;section=21" title="Edit section: Development Tools">edit</a>]</span> <span class="mw-headline">Development Tools</span></h2>
<p><a name="Commercially_Supported" id="Commercially_Supported"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=PIC_microcontroller&amp;action=edit&amp;section=22" title="Edit section: Commercially Supported">edit</a>]</span> <span class="mw-headline">Commercially Supported</span></h3>
<p>Microchip provides a <a href="/wiki/Freeware" title="Freeware">freeware</a> <a href="/wiki/Integrated_development_environment" title="Integrated development environment">IDE</a> package called <a href="/wiki/MPLAB" title="MPLAB">MPLAB</a>, which includes an assembler, linker, software <a href="/wiki/Simulator" title="Simulator" class="mw-redirect">simulator</a>, and debugger. They also sell C compilers for the PIC18 and dsPIC which integrate cleanly with MPLAB. Free student versions of the C compilers are also available with all features. But for the free versions, optimizations will be disabled after 60 days.<sup id="cite_ref-6" class="reference"><a href="#cite_note-6" title=""><span>[</span>7<span>]</span></a></sup></p>
<p>Several third parties make <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a>,<sup id="cite_ref-7" class="reference"><a href="#cite_note-7" title=""><span>[</span>8<span>]</span></a></sup> <a href="/wiki/BASIC" title="BASIC">BASIC</a><sup id="cite_ref-8" class="reference"><a href="#cite_note-8" title=""><span>[</span>9<span>]</span></a></sup> and <a href="/wiki/Pascal_(programming_language)" title="Pascal (programming language)">Pascal</a><sup id="cite_ref-9" class="reference"><a href="#cite_note-9" title=""><span>[</span>10<span>]</span></a></sup> language <a href="/wiki/Compilers" title="Compilers" class="mw-redirect">compilers</a> for PICs, many of which integrate to MPLAB and/or feature their own IDE.</p>
<p>A blockset<sup id="cite_ref-10" class="reference"><a href="#cite_note-10" title=""><span>[</span>11<span>]</span></a></sup> for Matlab/Simulink allow one to generate C and binary files from a simulink model. Most common peripherals have their blocksets and you do not need to write the configuration code.</p>
<p><a name="Open_Source" id="Open_Source"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=PIC_microcontroller&amp;action=edit&amp;section=23" title="Edit section: Open Source">edit</a>]</span> <span class="mw-headline">Open Source</span></h3>
<p>The following development tools are available for the PIC family under the <a href="/wiki/GPL" title="GPL" class="mw-redirect">GPL</a> or other free software or open sources licenses.</p>
<p><a href="/wiki/FreeRTOS" title="FreeRTOS">FreeRTOS</a> is a mini real time kernel ported to PIC18, PIC24, dsPIC and PIC32 architectures.</p>
<p><a href="/wiki/GPUTILS" title="GPUTILS">GPUTILS</a> is free and available from the GPUTILS website.</p>
<p><a href="/wiki/Gpsim" title="Gpsim">GPSIM</a> is an Open Source simulator for the PIC microcontrollers featuring hardware modules that simulate specific devices that might be connected to them, like <a href="/wiki/Liquid_crystal_display" title="Liquid crystal display">LCDs</a>.</p>
<p><a href="/wiki/Small_Device_C_Compiler" title="Small Device C Compiler">SDCC</a> supports 8-bit PIC micro controllers (PIC16, PIC18). Currently, throughout the SDCC website, the words, "Work is in progress", are frequently used to describe the status of SDCC's support for PICs.</p>
<p><a href="http://ktechlab.org" class="external text" title="http://ktechlab.org" rel="nofollow">Ktechlab</a> is a free IDE for programming PIC Microcontroller. It allows one to write the program in C, <a href="/wiki/Assembly_language" title="Assembly language">Assembly</a>, Microbe (a BASIC-like language) and using FlowChart Method.</p>
<p><a href="/w/index.php?title=PiKdev&amp;action=edit&amp;redlink=1" class="new" title="PiKdev (page does not exist)">PiKdev</a> <a href="http://pikdev.free.fr/" class="external autonumber" title="http://pikdev.free.fr/" rel="nofollow">[7]</a> runs on Linux and is a simple graphic IDE for the development of PIC-based applications. It currently supports assembly language. Non Open Source C language (Currently free 1/22/07) is also supported for PIC 18 devices. PiKdev is developed in C++ under Linux and is based on the KDE environment.</p>
<p><a href="/w/index.php?title=Piklab&amp;action=edit&amp;redlink=1" class="new" title="Piklab (page does not exist)">Piklab</a> is a forked version of PiKdev and is managed as <a href="/wiki/SourceForge" title="SourceForge" class="mw-redirect">SourceForge</a> Project. Piklab adds to Pikdev by providing support for programmers and debuggers. Currently, Piklab supports the JDM, PIC Elmer, K8048, HOODMICRO, ICD1, ICD2, PICkit1, PICKkit2, and PicStart+ as programming devices and has debugging support for ICD2 in addition to using the simulator, <a href="/w/index.php?title=GPSim&amp;action=edit&amp;redlink=1" class="new" title="GPSim (page does not exist)">GPSim</a>.<sup id="cite_ref-piklab_11-0" class="reference"><a href="#cite_note-piklab-11" title=""><span>[</span>12<span>]</span></a></sup></p>
<p><a href="/wiki/JAL_(compiler)" title="JAL (compiler)">JAL</a> <a href="http://www.voti.nl/jal/" class="external autonumber" title="http://www.voti.nl/jal/" rel="nofollow">[8]</a> stands for Just Another Language. It is a Pascal-like language that is easily mastered. The compiler supports a few Microchip (16c84, 16f84, 12c508, 12c509, 16F877) and SX microcontrollers. The resulting assembly language can then be viewed, modified and further processed as if you were programming directly in assembler.</p>
<p>The GNU Compiler Collection and the <a href="/wiki/GNU_Binutils" title="GNU Binutils">GNU Binutils</a> have been ported to the PIC24, dsPIC30F and dsPIC33F in the form of Microchip's <a href="http://ww1.microchip.com/downloads/en/DeviceDoc/mplabc30v3_01_A.tgz" class="external text" title="http://ww1.microchip.com/downloads/en/DeviceDoc/mplabc30v3_01_A.tgz" rel="nofollow">MPLAB C30</a> compiler and <a href="http://ww1.microchip.com/downloads/en/DeviceDoc/mplabalc30v3_01_A.tar.gz" class="external text" title="http://ww1.microchip.com/downloads/en/DeviceDoc/mplabalc30v3_01_A.tar.gz" rel="nofollow">MPLAB ASM30</a> Assembler.</p>
<p><a href="/wiki/MIDIbox#The_MIDIbox_Operating_System_.28MIOS.29" title="MIDIbox">MIOS</a> is a real-time operating system written in PIC assembly, optimized for <a href="/wiki/MIDI" title="MIDI" class="mw-redirect">MIDI</a> processing and other musical control applications. There is a C wrapper for higher level development. Currently it runs on the <a href="/wiki/MIDIbox" title="MIDIbox">MIDIbox</a> Hardware Platform.</p>
<p>FlashForth <a href="http://flashforth.sourceforge.net/" class="external autonumber" title="http://flashforth.sourceforge.net/" rel="nofollow">[9]</a> is a native Forth operating system for the PIC18F and the dsPIC30F series. It makes the PIC a standalone computer with an interpreter, compiler, assembler and multitasker.</p>
<p><a href="/wiki/List_of_BASIC_dialects_by_platform#Embedded_devices_.2F_microcontrollers" title="List of BASIC dialects by platform">Great Cow Basic</a> (GCBasic) <a href="http://gcbasic.sourceforge.net/index.html" class="external autonumber" title="http://gcbasic.sourceforge.net/index.html" rel="nofollow">[10]</a> The syntax of Great Cow BASIC is based on that of <a href="/wiki/QBASIC" title="QBASIC" class="mw-redirect">QBASIC</a>/<a href="/wiki/FreeBASIC" title="FreeBASIC">FreeBASIC</a>. The assembly code produced by Great Cow BASIC can be assembled and run on almost all 10, 12, 16 and 18 series PIC chips.</p>
<p><a name="Device_Programmers" id="Device_Programmers"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=PIC_microcontroller&amp;action=edit&amp;section=24" title="Edit section: Device Programmers">edit</a>]</span> <span class="mw-headline">Device Programmers</span></h2>
<div class="thumb tright">
<div class="thumbinner" style="width:252px;"><a href="/wiki/File:Pickit1_devboard.jpg" class="image" title="A development board for low pin-count MCU, from Microchip"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/9/97/Pickit1_devboard.jpg/250px-Pickit1_devboard.jpg" width="250" height="158" border="0" class="thumbimage" /></a>
<div class="thumbcaption">
<div class="magnify"><a href="/wiki/File:Pickit1_devboard.jpg" class="internal" title="Enlarge"><img src="/skins-1.5/common/images/magnify-clip.png" width="15" height="11" alt="" /></a></div>
A development board for low pin-count MCU, from Microchip</div>
</div>
</div>
<p>Devices called "<a href="/wiki/Programmer_(hardware)" title="Programmer (hardware)">programmers</a>" are traditionally used to get program code into the target PIC. Most PICs that Microchip currently sell feature ICSP (In Circuit Serial Programming) and/or LVP (Low Voltage Programming) capabilities, allowing the PIC to be programmed while it is sitting in the target <a href="/wiki/Circuit" title="Circuit">circuit</a>. ICSP programming is performed using two pins, clock and data, while a high voltage (12V) is present on the Vpp/MCLR pin. Low voltage programming dispenses with the high voltage, but reserves exclusive use of an I/O pin and can therefore be disabled to recover the pin for other uses (once disabled it can only be re-enabled using high voltage programming).</p>
<p>There are many programmers for PIC microcontrollers, ranging from the extremely simple designs which rely on ICSP to allow direct download of code from a host computer, to intelligent programmers that can verify the device at several supply voltages. Many of these complex programmers use a pre-programmed PIC themselves to send the programming commands to the PIC that is to be programmed. The intelligent type of programmer is needed to program earlier PIC models (mostly EPROM type) which do not support in-circuit programming.</p>
<p>Many of the higher end flash based PICs can also self-program (write to their own program memory). Demo boards are available with a small bootloader factory programmed that can be used to load user programs over an interface such as <a href="/wiki/RS-232" title="RS-232">RS-232</a> or <a href="/wiki/Universal_Serial_Bus" title="Universal Serial Bus">USB</a>, thus obviating the need for a programmer device. Alternatively there is bootloader firmware available that the user can load onto the PIC using ICSP. The advantages of a bootloader over ICSP is the far superior programming speeds, immediate program execution following programming, and the ability to both debug and program using the same cable.</p>
<p><a name="Microchip_Programmers" id="Microchip_Programmers"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=PIC_microcontroller&amp;action=edit&amp;section=25" title="Edit section: Microchip Programmers">edit</a>]</span> <span class="mw-headline">Microchip Programmers</span></h3>
<div class="thumb tright">
<div class="thumbinner" style="width:182px;"><a href="/wiki/File:Picstart_plus.jpg" class="image" title="Microchip PICSTART Plus programmer"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/1/15/Picstart_plus.jpg/180px-Picstart_plus.jpg" width="180" height="120" border="0" class="thumbimage" /></a>
<div class="thumbcaption">
<div class="magnify"><a href="/wiki/File:Picstart_plus.jpg" class="internal" title="Enlarge"><img src="/skins-1.5/common/images/magnify-clip.png" width="15" height="11" alt="" /></a></div>
Microchip PICSTART Plus programmer</div>
</div>
</div>
<p>There are many programmers/debuggers available directly from Microchip.</p>
<p>Current Microchip Programmers (as of 3/2009)<sup id="cite_ref-12" class="reference"><a href="#cite_note-12" title=""><span>[</span>13<span>]</span></a></sup></p>
<ul>
<li>PICStart Plus (RS232 serial interface)&#160;: intelligent.</li>
<li>PRO MATE II (RS232 serial interface)&#160;: intelligent.</li>
<li>MPLAB PM3 (RS232 serial and USB interface)</li>
<li>MPLAB ICD2 (RS232 serial and USB 1.0 interface)&#160;: ICSP programming only</li>
<li>MPLAB REAL ICE (USB 2.0 interface)&#160;: ICSP programming only</li>
<li>PICKit 2 (USB interface)</li>
<li>PICKit 3 (USB interface)</li>
<li>ICD 3 (USB interface)</li>
</ul>
<p>Legacy Microchip Programmers</p>
<ul>
<li><a href="/wiki/PICKit" title="PICKit">PICKit</a> 1 (USB interface)</li>
</ul>
<p><a name="Third-Party_Programmers" id="Third-Party_Programmers"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=PIC_microcontroller&amp;action=edit&amp;section=26" title="Edit section: Third-Party Programmers">edit</a>]</span> <span class="mw-headline">Third-Party Programmers</span></h3>
<p>There are programmers available from other sources, ranging from plans to build your own, to self-assembly kits and fully tested ready-to-go units. Some are simple designs which require a PC to do the low-level programming signalling (these typically connect to the <a href="/wiki/Serial_port" title="Serial port">serial</a> or <a href="/wiki/Parallel_port" title="Parallel port">parallel port</a> and consist of a few simple components), while others have the programming logic built into them (these typically use a serial or USB connection, are usually faster, and are often built using PICs themselves for control). For a directory of PIC related tools and websites, see <a href="http://www.dmoz.org/Computers/Hardware/Components/Processors/PIC//" class="external text" title="http://www.dmoz.org/Computers/Hardware/Components/Processors/PIC//" rel="nofollow">PIC microcontroller</a> at the <a href="/wiki/Open_Directory_Project" title="Open Directory Project">Open Directory Project</a>. These are some common programmer types:</p>
<ul>
<li>Simple serial port ICSP programmers
<ul>
<li>These generally rely on driving the PIC's Vss line negative to get the necessary voltage differences from programming. Hence they are compact and cheap but great care is needed if using them for in circuit programming.</li>
</ul>
</li>
<li>Simple parallel port ICSP programmers
<ul>
<li>Simple to understand but often have much higher part counts and generally require external power supplies.</li>
</ul>
</li>
<li>Intelligent programmers (some use USB port)
<ul>
<li>Generally faster and more reliable (especially on laptops which tend to have idiosyncrasies in the way they implement their ports) but far more complex to build (in particular they tend to use a PIC in the programmer which must itself be programmed somehow).</li>
</ul>
</li>
</ul>
<p>Here are some programmers available:</p>
<div class="thumb tright">
<div class="thumbinner" style="width:182px;"><a href="/wiki/File:Usbpicprog.png" class="image" title="Usbpicprog"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/a/a9/Usbpicprog.png/180px-Usbpicprog.png" width="180" height="98" border="0" class="thumbimage" /></a>
<div class="thumbcaption">
<div class="magnify"><a href="/wiki/File:Usbpicprog.png" class="internal" title="Enlarge"><img src="/skins-1.5/common/images/magnify-clip.png" width="15" height="11" alt="" /></a></div>
Usbpicprog</div>
</div>
</div>
<ul>
<li>usbpicprog, an open source USB PIC programmer <a href="http://www.usbpicprog.org" class="external text" title="http://www.usbpicprog.org" rel="nofollow">usbpicprog</a></li>
<li>Open Programmer, another open source USB programmer for PICmicro and I2C EEPROM, using HID class <a href="http://openprog.altervista.org" class="external text" title="http://openprog.altervista.org" rel="nofollow">OpenProgrammer</a></li>
<li>home-made ICSP <a href="http://www.jdm.homepage.dk/newpic.htm" class="external text" title="http://www.jdm.homepage.dk/newpic.htm" rel="nofollow">JDM Pic</a></li>
<li>PIC PRESTO that supports ICSP, ISP, JTAG, I2C, SPI, Microwire interfaces, works on USB and complies with programming specifications</li>
<li>home-made ICSP with external powersupply based on JDM: <a href="http://www.bobtech.ro/catalog/programator/index.html" class="external text" title="http://www.bobtech.ro/catalog/programator/index.html" rel="nofollow">BobProg</a> <span class="languageicon" style="font-size:0.95em; font-weight:bold; color:#555;">(Romanian)</span></li>
</ul>
<p>The major problem of home-made or very simple programmers is that these programmers do not comply with programming specifications and this can cause premature loss of data in the flash or EEPROM<sup class="noprint Template-Fact"><span title="This claim needs references to reliable sources&#160;since October 2008" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</span></sup>.</p>
<p><a name="Debugging" id="Debugging"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=PIC_microcontroller&amp;action=edit&amp;section=27" title="Edit section: Debugging">edit</a>]</span> <span class="mw-headline">Debugging</span></h2>
<p><a name="Software_Emulation" id="Software_Emulation"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=PIC_microcontroller&amp;action=edit&amp;section=28" title="Edit section: Software Emulation">edit</a>]</span> <span class="mw-headline">Software Emulation</span></h3>
<p><a href="http://www.microchip.com/stellent/idcplg?IdcService=SS_GET_PAGE&amp;nodeId=1406&amp;dDocName=en019469&amp;part=SW007002" class="external text" title="http://www.microchip.com/stellent/idcplg?IdcService=SS_GET_PAGE&amp;nodeId=1406&amp;dDocName=en019469&amp;part=SW007002" rel="nofollow">MPLAB</a> (which is a free download) includes a software emulator for PICs. However, software emulation of a microcontroller will always suffer from limited simulation of the device's interactions with its target circuit.</p>
<p><a href="http://www.labcenter.co.uk/" class="external text" title="http://www.labcenter.co.uk/" rel="nofollow">Proteus VSM</a> is a commercial software product developed by Labcenter Electronics which allows simulation of many PICmicro devices along with a wide array of peripheral devices. This method can help bridge the gap between the limited peripheral support offered by the MPLAB simulator and traditional in-circuit debugging/emulating. The product interfaces directly with MPLAB to offer a schematic display of signals and peripheral devices.</p>
<p><a href="http://ktechlab.org/" class="external text" title="http://ktechlab.org/" rel="nofollow">KTechLab</a> is a free and open source circuit simulator for KDE which features simulating some types of PIC microcontrollers besides many other analog and digital parts.</p>
<p><a href="http://piklab.sourceforge.net/" class="external text" title="http://piklab.sourceforge.net/" rel="nofollow">Piklab</a> is a free and open source IDE for developing PIC software on KDE which is able to simulate and debug PIC software using another free and open source tool called <a href="http://gpsim.sourceforge.net/" class="external text" title="http://gpsim.sourceforge.net/" rel="nofollow">gpsim</a> as backend.</p>
<p><a name="In-Circuit_Debugging" id="In-Circuit_Debugging"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=PIC_microcontroller&amp;action=edit&amp;section=29" title="Edit section: In-Circuit Debugging">edit</a>]</span> <span class="mw-headline">In-Circuit Debugging</span></h3>
<p>Later model PICs feature an ICD (in-circuit debugging) interface, built into the CPU core. ICD debuggers (MPLAB ICD2 and other third party) can communicate with this interface using three lines. This cheap and simple debugging system comes at a price however, namely limited breakpoint count (1 on older pics 3 on newer PICs), loss of some IO (with the exception of some surface mount 44-pin PICs which have dedicated lines for debugging) and loss of some features of the chip. For small PICs, where the loss of IO caused by this method would be unacceptable, special headers are made which are fitted with PICs that have extra pins specifically for debugging.</p>
<p><a name="In-Circuit_Emulators" id="In-Circuit_Emulators"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=PIC_microcontroller&amp;action=edit&amp;section=30" title="Edit section: In-Circuit Emulators">edit</a>]</span> <span class="mw-headline">In-Circuit Emulators</span></h3>
<p>Microchip offers three full in circuit emulators: the MPLAB ICE2000 (parallel interface, a USB converter is available); the newer MPLAB ICE4000 (USB 2.0 connection); and most recently, the REAL ICE. All of these ICE tools can be used with the MPLAB IDE for full source-level debugging of code running on the target.</p>
<p>The ICE2000 requires emulator modules, and the test hardware must provide a socket which can take either an emulator module, or a production device.</p>
<p>The REAL ICE connects directly to production devices which support in-circuit emulation through the PGC/PGD programming interface, or through a high speed connection which uses two more pins. According to Microchip, it supports "most" flash-based PIC, PIC24, and dsPIC processors.<sup id="cite_ref-13" class="reference"><a href="#cite_note-13" title=""><span>[</span>14<span>]</span></a></sup></p>
<p>The ICE4000 is no longer directly advertised on Microchip's website, and the purchasing page states that it is not recommended for new designs.</p>
<p><a name="PIC_clones" id="PIC_clones"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=PIC_microcontroller&amp;action=edit&amp;section=31" title="Edit section: PIC clones">edit</a>]</span> <span class="mw-headline">PIC clones</span></h2>
<ul>
<li><a href="/wiki/Ubicom" title="Ubicom">Ubicom</a> (formerly Scenix) produces the <a href="/wiki/Parallax_SX" title="Parallax SX">SX range of chips</a>. These are PIC clones that run much faster than the original. As of November 2005 Parallax is the exclusive supplier of the SX.</li>
<li><a href="/wiki/OpenCores" title="OpenCores">OpenCores</a> has a PIC16F84 core written in <a href="/wiki/Verilog" title="Verilog">Verilog</a>.</li>
<li>Holtek <a href="/wiki/HT48FXX_Flash_I/O_type_series" title="HT48FXX Flash I/O type series">HT48FXX Flash I/O type series</a></li>
<li><a href="http://angstrem.ru/" class="external text" title="http://angstrem.ru/" rel="nofollow">ANGSTREM</a> produces 8-bit 4 MIPS (at 8MHz) microcontroller An15E03 (КР1878ВЕ1 in Russian) which is pin-compatible with PIC16F84</li>
</ul>
<p><a name="8.2F16.2F32-bit_PIC_microcontroller_product_families" id="8.2F16.2F32-bit_PIC_microcontroller_product_families"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=PIC_microcontroller&amp;action=edit&amp;section=32" title="Edit section: 8/16/32-bit PIC microcontroller product families">edit</a>]</span> <span class="mw-headline">8/16/32-bit PIC microcontroller product families</span></h2>
<p>These links take you to product selection matrices at the manufacturer's site.</p>
<p>8-bit Microcontrollers</p>
<ul>
<li><a href="http://www.microchip.com/ParamChartSearch/chart.aspx?branchID=1009&amp;mid=10&amp;lang=en&amp;pageId=74" class="external text" title="http://www.microchip.com/ParamChartSearch/chart.aspx?branchID=1009&amp;mid=10&amp;lang=en&amp;pageId=74" rel="nofollow">PIC10</a></li>
<li><a href="http://www.microchip.com/ParamChartSearch/chart.aspx?branchID=1001&amp;mid=10&amp;lang=en&amp;pageId=74" class="external text" title="http://www.microchip.com/ParamChartSearch/chart.aspx?branchID=1001&amp;mid=10&amp;lang=en&amp;pageId=74" rel="nofollow">PIC12</a></li>
<li><a href="http://www.microchip.com/ParamChartSearch/chart.aspx?branchID=1008&amp;mid=10&amp;lang=en&amp;pageId=74" class="external text" title="http://www.microchip.com/ParamChartSearch/chart.aspx?branchID=1008&amp;mid=10&amp;lang=en&amp;pageId=74" rel="nofollow">PIC14</a></li>
<li><a href="http://www.microchip.com/ParamChartSearch/chart.aspx?branchID=1002&amp;mid=10&amp;lang=en&amp;pageId=74" class="external text" title="http://www.microchip.com/ParamChartSearch/chart.aspx?branchID=1002&amp;mid=10&amp;lang=en&amp;pageId=74" rel="nofollow">PIC16</a></li>
<li><a href="http://www.microchip.com/ParamChartSearch/chart.aspx?branchID=1003&amp;mid=10&amp;lang=en&amp;pageId=74" class="external text" title="http://www.microchip.com/ParamChartSearch/chart.aspx?branchID=1003&amp;mid=10&amp;lang=en&amp;pageId=74" rel="nofollow">PIC17</a></li>
<li><a href="http://www.microchip.com/ParamChartSearch/chart.aspx?branchID=1004&amp;mid=10&amp;lang=en&amp;pageId=74" class="external text" title="http://www.microchip.com/ParamChartSearch/chart.aspx?branchID=1004&amp;mid=10&amp;lang=en&amp;pageId=74" rel="nofollow">PIC18</a></li>
</ul>
<p>16-bit Microcontrollers</p>
<ul>
<li><a href="http://www.microchip.com/ParamChartSearch/chart.aspx?branchID=8181&amp;mid=14&amp;lang=en" class="external text" title="http://www.microchip.com/ParamChartSearch/chart.aspx?branchID=8181&amp;mid=14&amp;lang=en" rel="nofollow">PIC24F</a></li>
<li><a href="http://www.microchip.com/ParamChartSearch/chart.aspx?branchID=8186&amp;mid=14&amp;lang=en" class="external text" title="http://www.microchip.com/ParamChartSearch/chart.aspx?branchID=8186&amp;mid=14&amp;lang=en" rel="nofollow">PIC24H</a></li>
</ul>
<p>32-bit Microcontrollers</p>
<ul>
<li><a href="http://www.microchip.com/pic32" class="external text" title="http://www.microchip.com/pic32" rel="nofollow">PIC32</a></li>
</ul>
<p>16-bit Digital Signal Controllers</p>
<ul>
<li><a href="http://www.microchip.com/ParamChartSearch/chart.aspx?branchID=8182&amp;mid=14&amp;lang=en&amp;pageId=75" class="external text" title="http://www.microchip.com/ParamChartSearch/chart.aspx?branchID=8182&amp;mid=14&amp;lang=en&amp;pageId=75" rel="nofollow">dsPIC30</a></li>
<li><a href="http://www.microchip.com/ParamChartSearch/chart.aspx?branchID=8183&amp;mid=14&amp;lang=en" class="external text" title="http://www.microchip.com/ParamChartSearch/chart.aspx?branchID=8183&amp;mid=14&amp;lang=en" rel="nofollow">dsPIC33F</a></li>
</ul>
<p>The F in a name generally indicates the PICmicro uses flash memory and can be erased electronically. A C generally means it can only be erased by exposing the die to ultraviolet light (which is only possible if a windowed package style is used). An exception to this rule is the PIC16C84 which uses EEPROM and is therefore electrically erasable.</p>
<p>Security in Microchip PIC devices is known to be extremely weak. Reports have been published by <a href="http://www.flylogic.net/blog/?p=9" class="external text" title="http://www.flylogic.net/blog/?p=9" rel="nofollow">Flylogic Engineering</a> about the weaknesses. These weaknesses repeat themselves across the entire line of devices.</p>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=PIC_microcontroller&amp;action=edit&amp;section=33" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<table class="metadata plainlinks mbox-small" style="border:1px solid #aaa; background-color:#f9f9f9;">
<tr>
<td class="mbox-image"><a href="http://en.wikibooks.org/wiki/Special:Search/PIC_microcontroller" title="b:Special:Search/PIC microcontroller"><img alt="Sister project" src="http://upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/40px-Wikibooks-logo-en-noslogan.svg.png" width="40" height="40" border="0" /></a></td>
<td class="mbox-text" style=""><a href="/wiki/Wikibooks" title="Wikibooks">Wikibooks</a> has a book on the topic of
<div style="margin-left:10px;"><i><b><a href="http://en.wikibooks.org/wiki/Embedded_Systems/PIC_Microcontroller" class="extiw" title="wikibooks:Embedded Systems/PIC Microcontroller">Embedded Systems/PIC Microcontroller</a></b></i></div>
</td>
</tr>
</table>
<ul>
<li><a href="/wiki/Arduino" title="Arduino">Arduino</a></li>
<li><a href="/wiki/BASIC_Stamp" title="BASIC Stamp">BASIC Stamp</a></li>
<li><a href="/wiki/OOPic" title="OOPic">OOPic</a></li>
<li><a href="/wiki/PICAXE" title="PICAXE">PICAXE</a></li>
<li><a href="/wiki/TI_MSP430" title="TI MSP430">TI MSP430</a></li>
</ul>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=PIC_microcontroller&amp;action=edit&amp;section=34" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<ol class="references">
<li id="cite_note-PICmicrofamilytree-0"><b><a href="#cite_ref-PICmicrofamilytree_0-0" title="">^</a></b> "PICmicro Family Tree", PIC16F Seminar Presentation <a href="http://www.microchip.com.tw/PDF/2004_spring/PIC16F%20seminar%20presentation.pdf" class="external free" title="http://www.microchip.com.tw/PDF/2004_spring/PIC16F%20seminar%20presentation.pdf" rel="nofollow">http://www.microchip.com.tw/PDF/2004_spring/PIC16F%20seminar%20presentation.pdf</a></li>
<li id="cite_note-1976databook-1">^ <a href="#cite_ref-1976databook_1-0" title=""><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-1976databook_1-1" title=""><sup><i><b>b</b></i></sup></a> "MOS DATA 1976", General Instrument 1976 Databook</li>
<li id="cite_note-1977catalog-2">^ <a href="#cite_ref-1977catalog_2-0" title=""><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-1977catalog_2-1" title=""><sup><i><b>b</b></i></sup></a> "1977 Data Catalog", Micro Electronics from General Instrument Corporation <a href="http://www.rhoent.com/pic16xx.pdf" class="external free" title="http://www.rhoent.com/pic16xx.pdf" rel="nofollow">http://www.rhoent.com/pic16xx.pdf</a></li>
<li id="cite_note-3"><b><a href="#cite_ref-3" title="">^</a></b> <cite style="font-style:normal" class="press release" id="CITEREFMicrochip_Technology">Microchip Technology (<span class="mw-formatted-date" title="2008-02-27"><a href="/wiki/2008" title="2008">2008</a>-<a href="/wiki/February_27" title="February 27">02-27</a></span>). <i><a href="http://www.microchip.com/stellent/idcplg?IdcService=SS_GET_PAGE&amp;nodeId=2018&amp;mcparam=en534302" class="external text" title="http://www.microchip.com/stellent/idcplg?IdcService=SS_GET_PAGE&amp;nodeId=2018&amp;mcparam=en534302" rel="nofollow">Microchip Technology Delivers Six Billionth PIC Microcontroller</a></i>. <a href="/wiki/News_release" title="News release">Press release</a><span class="printonly">. <a href="http://www.microchip.com/stellent/idcplg?IdcService=SS_GET_PAGE&amp;nodeId=2018&amp;mcparam=en534302" class="external free" title="http://www.microchip.com/stellent/idcplg?IdcService=SS_GET_PAGE&amp;nodeId=2018&amp;mcparam=en534302" rel="nofollow">http://www.microchip.com/stellent/idcplg?IdcService=SS_GET_PAGE&amp;nodeId=2018&amp;mcparam=en534302</a></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Microchip+Technology+Delivers+Six+Billionth+PIC+Microcontroller&amp;rft.aulast=Microchip+Technology&amp;rft.au=Microchip+Technology&amp;rft.date=%5B%5B2008-02-27%5D%5D&amp;rft.series=%5B%5BNews+release%7CPress+release%5D%5D&amp;rft_id=http%3A%2F%2Fwww.microchip.com%2Fstellent%2Fidcplg%3FIdcService%3DSS_GET_PAGE%26nodeId%3D2018%26mcparam%3Den534302&amp;rfr_id=info:sid/en.wikipedia.org:PIC_microcontroller"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-4"><b><a href="#cite_ref-4" title="">^</a></b> <a href="http://massmind.org/techref/microchip/pages.htm" class="external text" title="http://massmind.org/techref/microchip/pages.htm" rel="nofollow">"PIC Paging and PCLATH"</a></li>
<li id="cite_note-5"><b><a href="#cite_ref-5" title="">^</a></b> <cite style="font-style:normal" class="web"><a href="http://ww1.microchip.com/downloads/en/DeviceDoc/70166A.pdf" class="external text" title="http://ww1.microchip.com/downloads/en/DeviceDoc/70166A.pdf" rel="nofollow">"PIC24H Family Overview"</a><span class="printonly">. <a href="http://ww1.microchip.com/downloads/en/DeviceDoc/70166A.pdf" class="external free" title="http://ww1.microchip.com/downloads/en/DeviceDoc/70166A.pdf" rel="nofollow">http://ww1.microchip.com/downloads/en/DeviceDoc/70166A.pdf</a></span><span class="reference-accessdate">. Retrieved on 2007-09-23</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=PIC24H+Family+Overview&amp;rft.atitle=&amp;rft_id=http%3A%2F%2Fww1.microchip.com%2Fdownloads%2Fen%2FDeviceDoc%2F70166A.pdf&amp;rfr_id=info:sid/en.wikipedia.org:PIC_microcontroller"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-6"><b><a href="#cite_ref-6" title="">^</a></b> <cite style="font-style:normal" class="web"><a href="http://www.microchip.com/stellent/idcplg?IdcService=SS_GET_PAGE&amp;nodeId=1406&amp;dDocName=en010014" class="external text" title="http://www.microchip.com/stellent/idcplg?IdcService=SS_GET_PAGE&amp;nodeId=1406&amp;dDocName=en010014" rel="nofollow">"MPLAB C Compiler for PIC18 MCUs"</a><span class="printonly">. <a href="http://www.microchip.com/stellent/idcplg?IdcService=SS_GET_PAGE&amp;nodeId=1406&amp;dDocName=en010014" class="external free" title="http://www.microchip.com/stellent/idcplg?IdcService=SS_GET_PAGE&amp;nodeId=1406&amp;dDocName=en010014" rel="nofollow">http://www.microchip.com/stellent/idcplg?IdcService=SS_GET_PAGE&amp;nodeId=1406&amp;dDocName=en010014</a></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=MPLAB+C+Compiler+for+PIC18+MCUs&amp;rft.atitle=&amp;rft_id=http%3A%2F%2Fwww.microchip.com%2Fstellent%2Fidcplg%3FIdcService%3DSS_GET_PAGE%26nodeId%3D1406%26dDocName%3Den010014&amp;rfr_id=info:sid/en.wikipedia.org:PIC_microcontroller"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-7"><b><a href="#cite_ref-7" title="">^</a></b> <cite style="font-style:normal" class="web"><a href="http://techref.massmind.org/techref/microchip/language/cs.htm" class="external text" title="http://techref.massmind.org/techref/microchip/language/cs.htm" rel="nofollow">"Massmind: PIC Micro Controller C/C++ Languages"</a><span class="printonly">. <a href="http://techref.massmind.org/techref/microchip/language/cs.htm" class="external free" title="http://techref.massmind.org/techref/microchip/language/cs.htm" rel="nofollow">http://techref.massmind.org/techref/microchip/language/cs.htm</a></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Massmind%3A+PIC+Micro+Controller+C%2FC%2B%2B++Languages&amp;rft.atitle=&amp;rft_id=http%3A%2F%2Ftechref.massmind.org%2Ftechref%2Fmicrochip%2Flanguage%2Fcs.htm&amp;rfr_id=info:sid/en.wikipedia.org:PIC_microcontroller"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-8"><b><a href="#cite_ref-8" title="">^</a></b> <cite style="font-style:normal" class="web"><a href="http://oshonsoft.com" class="external text" title="http://oshonsoft.com" rel="nofollow">"Oshon Software Project"</a><span class="printonly">. <a href="http://oshonsoft.com" class="external free" title="http://oshonsoft.com" rel="nofollow">http://oshonsoft.com</a></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Oshon+Software+Project&amp;rft.atitle=&amp;rft_id=http%3A%2F%2Foshonsoft.com&amp;rfr_id=info:sid/en.wikipedia.org:PIC_microcontroller"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-9"><b><a href="#cite_ref-9" title="">^</a></b> <cite style="font-style:normal" class="web"><a href="http://www.mikroe.com/en/compilers/" class="external text" title="http://www.mikroe.com/en/compilers/" rel="nofollow">"mikroElectronika Compilers"</a><span class="printonly">. <a href="http://www.mikroe.com/en/compilers/" class="external free" title="http://www.mikroe.com/en/compilers/" rel="nofollow">http://www.mikroe.com/en/compilers/</a></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=mikroElectronika+Compilers&amp;rft.atitle=&amp;rft_id=http%3A%2F%2Fwww.mikroe.com%2Fen%2Fcompilers%2F&amp;rfr_id=info:sid/en.wikipedia.org:PIC_microcontroller"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-10"><b><a href="#cite_ref-10" title="">^</a></b> <cite style="font-style:normal" class="web"><a href="http://www.kerhuel.eu/RTWdsPIC" class="external text" title="http://www.kerhuel.eu/RTWdsPIC" rel="nofollow">"dsPIC blockset for simulink"</a><span class="printonly">. <a href="http://www.kerhuel.eu/RTWdsPIC" class="external free" title="http://www.kerhuel.eu/RTWdsPIC" rel="nofollow">http://www.kerhuel.eu/RTWdsPIC</a></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=dsPIC+blockset+for+simulink&amp;rft.atitle=&amp;rft_id=http%3A%2F%2Fwww.kerhuel.eu%2FRTWdsPIC&amp;rfr_id=info:sid/en.wikipedia.org:PIC_microcontroller"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-piklab-11"><b><a href="#cite_ref-piklab_11-0" title="">^</a></b> <cite style="font-style:normal" class="web"><a href="http://piklab.sourceforge.net/" class="external text" title="http://piklab.sourceforge.net/" rel="nofollow">"Piklab Homepage"</a>. SourceForge.net. 2007-11-14<span class="printonly">. <a href="http://piklab.sourceforge.net/" class="external free" title="http://piklab.sourceforge.net/" rel="nofollow">http://piklab.sourceforge.net/</a></span><span class="reference-accessdate">. Retrieved on 2008-08-16</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Piklab+Homepage&amp;rft.atitle=&amp;rft.date=2007-11-14&amp;rft.pub=SourceForge.net&amp;rft_id=http%3A%2F%2Fpiklab.sourceforge.net%2F&amp;rfr_id=info:sid/en.wikipedia.org:PIC_microcontroller"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-12"><b><a href="#cite_ref-12" title="">^</a></b> <cite style="font-style:normal" class="web"><a href="http://www.microchip.com/stellent/idcplg?IdcService=SS_GET_PAGE&amp;nodeId=81" class="external text" title="http://www.microchip.com/stellent/idcplg?IdcService=SS_GET_PAGE&amp;nodeId=81" rel="nofollow">"Microchip Development Tools Showcase"</a><span class="printonly">. <a href="http://www.microchip.com/stellent/idcplg?IdcService=SS_GET_PAGE&amp;nodeId=81" class="external free" title="http://www.microchip.com/stellent/idcplg?IdcService=SS_GET_PAGE&amp;nodeId=81" rel="nofollow">http://www.microchip.com/stellent/idcplg?IdcService=SS_GET_PAGE&amp;nodeId=81</a></span><span class="reference-accessdate">. Retrieved on 2007-09-23</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Microchip+Development+Tools+Showcase&amp;rft.atitle=&amp;rft_id=http%3A%2F%2Fwww.microchip.com%2Fstellent%2Fidcplg%3FIdcService%3DSS_GET_PAGE%26nodeId%3D81&amp;rfr_id=info:sid/en.wikipedia.org:PIC_microcontroller"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-13"><b><a href="#cite_ref-13" title="">^</a></b> <cite style="font-style:normal" class="web"><a href="http://ww1.microchip.com/downloads/en/DeviceDoc/51630a.pdf" class="external text" title="http://ww1.microchip.com/downloads/en/DeviceDoc/51630a.pdf" rel="nofollow">"MPLAB REAL ICE In-Circuit Emulator Product Overview"</a><span class="printonly">. <a href="http://ww1.microchip.com/downloads/en/DeviceDoc/51630a.pdf" class="external free" title="http://ww1.microchip.com/downloads/en/DeviceDoc/51630a.pdf" rel="nofollow">http://ww1.microchip.com/downloads/en/DeviceDoc/51630a.pdf</a></span><span class="reference-accessdate">. Retrieved on 2007-09-23</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=MPLAB+REAL+ICE+In-Circuit+Emulator+Product+Overview&amp;rft.atitle=&amp;rft_id=http%3A%2F%2Fww1.microchip.com%2Fdownloads%2Fen%2FDeviceDoc%2F51630a.pdf&amp;rfr_id=info:sid/en.wikipedia.org:PIC_microcontroller"><span style="display: none;">&#160;</span></span></li>
</ol>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=PIC_microcontroller&amp;action=edit&amp;section=35" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<table class="metadata plainlinks mbox-small" style="border:1px solid #aaa; background-color:#f9f9f9;">
<tr>
<td class="mbox-image"><a href="http://commons.wikimedia.org/wiki/Special:Search/PIC_microcontroller" title="commons:Special:Search/PIC microcontroller"><img alt="Sister project" src="http://upload.wikimedia.org/wikipedia/en/thumb/4/4a/Commons-logo.svg/40px-Commons-logo.svg.png" width="40" height="54" border="0" /></a></td>
<td class="mbox-text" style=""><a href="/wiki/Wikimedia_Commons" title="Wikimedia Commons">Wikimedia Commons</a> has media related to: <b><i><a href="http://commons.wikimedia.org/wiki/Category:PIC_microcontrollers" class="extiw" title="commons:Category:PIC microcontrollers">PIC microcontrollers</a> </i></b></td>
</tr>
</table>
<ul>
<li><a href="http://tiny-url.org/microcontroller" class="external text" title="http://tiny-url.org/microcontroller" rel="nofollow">PIC Microcontroller Tutorial and Projects</a></li>
<li><a href="http://www.microchip.com/stellent/idcplg?IdcService=SS_GET_PAGE&amp;nodeId=64" class="external text" title="http://www.microchip.com/stellent/idcplg?IdcService=SS_GET_PAGE&amp;nodeId=64" rel="nofollow">Microchip.com</a> Official web site</li>
<li><a href="http://www.piclist.com" class="external text" title="http://www.piclist.com" rel="nofollow">the PICList</a> FAQ and Archive from the "PICList" email list hosted at <a href="/wiki/MIT" title="MIT" class="mw-redirect">MIT</a>. A well respected source of manufacturer-independent solutions, source code, and expertise.</li>
<li><a href="http://gputils.sourceforge.net" class="external text" title="http://gputils.sourceforge.net" rel="nofollow">GPUTILS</a> Open Source assembler and linker.</li>
<li><a href="http://softwarepic.50webs.com" class="external text" title="http://softwarepic.50webs.com" rel="nofollow">Free software tools</a> Free C, C++, Pascal, Basic compilers for the PIC microcontroller series.</li>
<li><a href="http://www.juts.net/rfpic.html" class="external autonumber" title="http://www.juts.net/rfpic.html" rel="nofollow">[11]</a>Example C code for the rfPIC</li>
<li>example of robot controlled by PIC16F877A: <a href="http://it.youtube.com/watch?v=NCo9fr7knK4" class="external autonumber" title="http://it.youtube.com/watch?v=NCo9fr7knK4" rel="nofollow">[12]</a> <a href="http://it.youtube.com/watch?v=WoD_8QA2VSg" class="external autonumber" title="http://it.youtube.com/watch?v=WoD_8QA2VSg" rel="nofollow">[13]</a></li>
<li><a href="http://usbpicprog.org" class="external text" title="http://usbpicprog.org" rel="nofollow">USB Pic Programmer</a> An open source project for a universal PIC programmer</li>
<li><a href="http://www.cainetworks.com/manuals/webcontrol/WebControlUserGuide.pdf" class="external autonumber" title="http://www.cainetworks.com/manuals/webcontrol/WebControlUserGuide.pdf" rel="nofollow">[14]</a> A PIC microcontroller based Network I/O controller</li>
<li><a href="http://www.boumpower.ch/gb/joo" class="external text" title="http://www.boumpower.ch/gb/joo" rel="nofollow">GameBoy GB–PIC© Project</a> Enable GameBoy hardware to PIC16F877</li>
<li><a href="http://www.zerogwireless.com/" class="external text" title="http://www.zerogwireless.com/" rel="nofollow">ZeroG Wireless</a> ZeroG develops Wi-Fi modules for PIC microcontrollers.</li>
</ul>
<p><br /></p>
<table class="navbox" cellspacing="0" style=";">
<tr>
<td style="padding:2px;">
<table cellspacing="0" class="nowraplinks collapsible autocollapse" style="width:100%;background:transparent;color:inherit;;">
<tr>
<th style=";" colspan="2" class="navbox-title">
<div style="float:left; width:6em;text-align:left;">
<div class="noprint plainlinksneverexpand navbar" style="background:none; padding:0; font-weight:normal;;;border:none;; font-size:xx-small;"><a href="/wiki/Template:8bitMCUs" title="Template:8bitMCUs"><span title="View this template" style=";;border:none;">v</span></a>&#160;<span style="font-size:80%;">•</span>&#160;<a href="/w/index.php?title=Template_talk:8bitMCUs&amp;action=edit&amp;redlink=1" class="new" title="Template talk:8bitMCUs (page does not exist)"><span title="Discussion about this template" style=";;border:none;">d</span></a>&#160;<span style="font-size:80%;">•</span>&#160;<a href="http://en.wikipedia.org/w/index.php?title=Template:8bitMCUs&amp;action=edit" class="external text" title="http://en.wikipedia.org/w/index.php?title=Template:8bitMCUs&amp;action=edit" rel="nofollow"><span title="Edit this template" style=";;border:none;;">e</span></a></div>
</div>
<span style="font-size:110%;">8-bit <a href="/wiki/Microcontroller" title="Microcontroller">microcontroller</a> families</span></th>
</tr>
<tr style="height:2px;">
<td></td>
</tr>
<tr>
<td colspan="2" style="width:100%;padding:0px;line-height:1.5em;;;" class="navbox-list navbox-odd">
<div style="padding:0em 0.25em"><a href="/wiki/Atmel_AVR" title="Atmel AVR">AVR</a><span style="font-weight:bold;">&#160;·</span> <strong class="selflink">PIC</strong><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/COP8" title="COP8">COP8</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Intel_8048" title="Intel 8048">MCS-48</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Intel_8051" title="Intel 8051">MCS-51</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Zilog_Z8" title="Zilog Z8">Z8</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Zilog_eZ80" title="Zilog eZ80">eZ80</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Freescale_68HC08" title="Freescale 68HC08">HC08</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Freescale_68HC11" title="Freescale 68HC11">HC11</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/H8_Family" title="H8 Family">H8</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/PSoC" title="PSoC">PSoC</a></div>
</td>
</tr>
</table>
</td>
</tr>
</table>


<!-- 
NewPP limit report
Preprocessor node count: 4843/1000000
Post-expand include size: 40061/2048000 bytes
Template argument size: 13117/2048000 bytes
Expensive parser function count: 2/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:184588-0!1!0!default!!en!2 and timestamp 20090403223209 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/PIC_microcontroller">http://en.wikipedia.org/wiki/PIC_microcontroller</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Microcontrollers" title="Category:Microcontrollers">Microcontrollers</a></span></div><div id="mw-hidden-catlinks" class="mw-hidden-cats-hidden">Hidden categories:&#32;<span dir='ltr'><a href="/wiki/Category:All_articles_with_unsourced_statements" title="Category:All articles with unsourced statements">All articles with unsourced statements</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_unsourced_statements_since_February_2008" title="Category:Articles with unsourced statements since February 2008">Articles with unsourced statements since February 2008</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_unsourced_statements_since_October_2008" title="Category:Articles with unsourced statements since October 2008">Articles with unsourced statements since October 2008</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/PIC_microcontroller" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:PIC_microcontroller" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=PIC_microcontroller&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=PIC_microcontroller&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=PIC_microcontroller" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/PIC_microcontroller" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/PIC_microcontroller" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=PIC_microcontroller&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=PIC_microcontroller&amp;oldid=281520365" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=PIC_microcontroller&amp;id=281520365">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-ca"><a href="http://ca.wikipedia.org/wiki/PIC_(microcontrolador)">Català</a></li>
				<li class="interwiki-cs"><a href="http://cs.wikipedia.org/wiki/Mikrokontrol%C3%A9r_PIC">Česky</a></li>
				<li class="interwiki-da"><a href="http://da.wikipedia.org/wiki/PIC_mikrocontroller">Dansk</a></li>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/PICmicro">Deutsch</a></li>
				<li class="interwiki-es"><a href="http://es.wikipedia.org/wiki/Microcontrolador_PIC">Español</a></li>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Microcontr%C3%B4leur_PIC">Français</a></li>
				<li class="interwiki-it"><a href="http://it.wikipedia.org/wiki/PIC_(microcontrollore)">Italiano</a></li>
				<li class="interwiki-hu"><a href="http://hu.wikipedia.org/wiki/PIC_mikrokontroller">Magyar</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/PIC_(%E3%82%B3%E3%83%B3%E3%83%88%E3%83%AD%E3%83%BC%E3%83%A9)">日本語</a></li>
				<li class="interwiki-no"><a href="http://no.wikipedia.org/wiki/PIC_mikrokontroller">‪Norsk (bokmål)‬</a></li>
				<li class="interwiki-pl"><a href="http://pl.wikipedia.org/wiki/Mikrokontroler_PIC">Polski</a></li>
				<li class="interwiki-pt"><a href="http://pt.wikipedia.org/wiki/Microcontrolador_PIC">Português</a></li>
				<li class="interwiki-ru"><a href="http://ru.wikipedia.org/wiki/PIC">Русский</a></li>
				<li class="interwiki-sv"><a href="http://sv.wikipedia.org/wiki/PIC">Svenska</a></li>
				<li class="interwiki-vi"><a href="http://vi.wikipedia.org/wiki/Vi_%C4%91i%E1%BB%81u_khi%E1%BB%83n_PIC">Tiếng Việt</a></li>
				<li class="interwiki-tr"><a href="http://tr.wikipedia.org/wiki/PIC">Türkçe</a></li>
				<li class="interwiki-uk"><a href="http://uk.wikipedia.org/wiki/%D0%A0%D0%86%D0%A1">Українська</a></li>
				<li class="interwiki-zh"><a href="http://zh.wikipedia.org/wiki/PIC%E5%BE%AE%E6%8E%A7%E5%88%B6%E5%99%A8">中文</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 3 April 2009, at 16:01.</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv224 in 0.043 secs. --></body></html>
