<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Optimization (computer science),Articles lacking sources from October 2008,Articles with unsourced statements since January 2009,Articles with unsourced statements since September 2008,Compiler optimizations,Fact,90/10 law,Abstract interpretation,Ada Byron&#039;s notes on the analytical engine,Algorithm,Algorithmic efficiency" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Optimization_(computer_science)&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Optimization_(computer_science)&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Optimization (computer science) - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Optimization_(computer_science)";
		var wgTitle = "Optimization (computer science)";
		var wgAction = "view";
		var wgArticleId = "225779";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281713370;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
<style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-c .de1, .source-c .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-c  {}
.source-c .head {}
.source-c .foot {}
.source-c .imp {font-weight: bold; color: red;}
.source-c .ln-xtra {color: #cc0; background-color: #ffc;}
.source-c li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-c li.li2 {font-weight: bold;}
.source-c .kw1 {color: #b1b100;}
.source-c .kw2 {color: #000000; font-weight: bold;}
.source-c .kw3 {color: #000066;}
.source-c .kw4 {color: #993333;}
.source-c .co1 {color: #808080; font-style: italic;}
.source-c .co2 {color: #339933;}
.source-c .coMULTI {color: #808080; font-style: italic;}
.source-c .es0 {color: #000099; font-weight: bold;}
.source-c .br0 {color: #66cc66;}
.source-c .st0 {color: #ff0000;}
.source-c .nu0 {color: #cc66cc;}
.source-c .me1 {color: #202020;}
.source-c .me2 {color: #202020;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style>		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Optimization_computer_science skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Optimization (computer science)</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<div class="dablink">For algorithms to solve optimization problems, see <a href="/wiki/Optimization_(mathematics)" title="Optimization (mathematics)">Optimization (mathematics)</a>.</div>
<table class="metadata plainlinks ambox ambox-content" style="">
<tr>
<td class="mbox-image">
<div style="width: 52px;"><a href="/wiki/File:Question_book-new.svg" class="image" title="Question book-new.svg"><img alt="" src="http://upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/50px-Question_book-new.svg.png" width="50" height="39" border="0" /></a></div>
</td>
<td class="mbox-text" style="">This article <b>does not <a href="/wiki/Wikipedia:Citing_sources" title="Wikipedia:Citing sources">cite</a> any <a href="/wiki/Wikipedia:Verifiability" title="Wikipedia:Verifiability">references or sources</a></b>. Please help <a href="http://en.wikipedia.org/w/index.php?title=Optimization_(computer_science)&amp;action=edit" class="external text" title="http://en.wikipedia.org/w/index.php?title=Optimization_(computer_science)&amp;action=edit" rel="nofollow">improve this article</a> by adding citations to <a href="/wiki/Wikipedia:Reliable_sources" title="Wikipedia:Reliable sources">reliable sources</a> (ideally, using <i><a href="/wiki/Wikipedia:Footnotes" title="Wikipedia:Footnotes">inline citations</a></i>). Unsourced material may be <a href="/wiki/Template:Fact" title="Template:Fact">challenged</a> and <a href="/wiki/Wikipedia:BURDEN" title="Wikipedia:BURDEN" class="mw-redirect">removed</a>. <small><i>(October 2008)</i></small></td>
</tr>
</table>
<p>In <a href="/wiki/Computing" title="Computing">computing</a>, <b>optimization</b> is the process of modifying a system to make some aspect of it work more efficiently or use fewer resources. For instance, a <a href="/wiki/Computer_program" title="Computer program">computer program</a> may be optimized so that it executes more rapidly, or is capable of operating with less <a href="/wiki/Computer_data_storage" title="Computer data storage">memory storage</a> or other resources, or draw less power. The system may be a single <a href="/wiki/Computer_program" title="Computer program">computer program</a>, a collection of <a href="/wiki/Computer" title="Computer">computers</a> or even an entire network such as the <a href="/wiki/Internet" title="Internet">Internet</a>. See also <a href="/wiki/Algorithmic_efficiency" title="Algorithmic efficiency">algorithmic efficiency</a> for further discussion on factors relating to improving the efficiency of an algorithm.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#General"><span class="tocnumber">1</span> <span class="toctext">General</span></a>
<ul>
<li class="toclevel-2"><a href="#.27Levels.27_of_optimization"><span class="tocnumber">1.1</span> <span class="toctext">'Levels' of optimization</span></a></li>
<li class="toclevel-2"><a href="#Platform_dependent_and_independent_optimizations"><span class="tocnumber">1.2</span> <span class="toctext">Platform dependent and independent optimizations</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Different_algorithms"><span class="tocnumber">2</span> <span class="toctext">Different algorithms</span></a></li>
<li class="toclevel-1"><a href="#Trade-offs"><span class="tocnumber">3</span> <span class="toctext">Trade-offs</span></a></li>
<li class="toclevel-1"><a href="#Bottlenecks"><span class="tocnumber">4</span> <span class="toctext">Bottlenecks</span></a></li>
<li class="toclevel-1"><a href="#When_to_optimize"><span class="tocnumber">5</span> <span class="toctext">When to optimize</span></a></li>
<li class="toclevel-1"><a href="#Macros"><span class="tocnumber">6</span> <span class="toctext">Macros</span></a></li>
<li class="toclevel-1"><a href="#Automated_and_manual_optimization"><span class="tocnumber">7</span> <span class="toctext">Automated and manual optimization</span></a></li>
<li class="toclevel-1"><a href="#Time_taken_for_optimization"><span class="tocnumber">8</span> <span class="toctext">Time taken for optimization</span></a></li>
<li class="toclevel-1"><a href="#Quotes"><span class="tocnumber">9</span> <span class="toctext">Quotes</span></a></li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">10</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">11</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">12</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="General" id="General"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Optimization_(computer_science)&amp;action=edit&amp;section=1" title="Edit section: General">edit</a>]</span> <span class="mw-headline">General</span></h2>
<p>Although the word "optimization" shares the same root as "optimal," it is rare for the process of optimization to produce a truly optimal system. The optimized system will typically only be optimal in one application or for one audience. One might reduce the amount of time that a program takes to perform some task at the price of making it consume more memory. In an application where memory space is at a premium, one might deliberately choose a slower <a href="/wiki/Algorithm" title="Algorithm">algorithm</a> in order to use less memory. Often there is no “one size fits all” design which works well in all cases, so <a href="/wiki/Engineer" title="Engineer">engineers</a> make <a href="/wiki/Trade-off" title="Trade-off">trade-offs</a> to optimize the attributes of greatest interest. Additionally, the effort required to make a piece of software completely optimal—incapable of any further improvement— is almost always more than is reasonable for the benefits that would be accrued; so the process of optimization may be halted before a completely optimal solution has been reached. Fortunately, it is often the case that the greatest improvements come early in the process.</p>
<p><a name=".27Levels.27_of_optimization" id=".27Levels.27_of_optimization"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Optimization_(computer_science)&amp;action=edit&amp;section=2" title="Edit section: 'Levels' of optimization">edit</a>]</span> <span class="mw-headline">'Levels' of optimization</span></h3>
<p>Optimization can occur at a number of 'levels':</p>
<ul>
<li><b>Design level</b></li>
</ul>
<p>At the highest level, the design may be optimized to make best use of the available resources. The implementation of this design will benefit from a good choice of <a href="/wiki/Algorithmic_efficiency" title="Algorithmic efficiency">efficient algorithms</a> and the implementation of these algorithms will benefit from writing good quality code. The architectural design of a system overwhelmingly affects its performance. The choice of <a href="/wiki/Algorithm" title="Algorithm">algorithm</a> affects efficiency more than any other item of the design. In some cases, however, optimization relies on using fancier algorithms, making use of special cases and special tricks and performing complex trade-offs; thus, a fully optimized program can sometimes, if insufficiently commented, be more difficult for less experienced programmers to comprehend and hence may contain more <a href="/wiki/Software_bug" title="Software bug">faults</a> than unoptimized versions.</p>
<ul>
<li><b>Source code level</b></li>
</ul>
<p>Avoiding bad quality coding can also improve performance, by avoiding obvious slowdowns. After that, however, some optimizations are possible which actually decrease maintainability; some, but not all of them can nowadays be performed by <a href="/wiki/Optimizing_compiler" title="Optimizing compiler" class="mw-redirect">optimizing compilers</a>. For instance, using more indirection is often needed to simplify or improve a software, but that indirection has a cost.</p>
<ul>
<li><b>Compile level</b></li>
</ul>
<p>Use of an <a href="/wiki/Optimizing_compiler" title="Optimizing compiler" class="mw-redirect">optimizing compiler</a> tends to ensure that the <a href="/wiki/Executable_program" title="Executable program" class="mw-redirect">executable program</a> is optimized at least as much as the compiler can predict.</p>
<ul>
<li><b>Assembly level</b></li>
</ul>
<p>At the lowest level, writing code using an <a href="/wiki/Assembly_language" title="Assembly language">assembly language</a> designed for a particular <a href="/wiki/Hardware" title="Hardware">hardware</a> platform will normally produce the most efficient code since the programmer can take advantage of the full repertoire of <a href="/wiki/Machine_instruction" title="Machine instruction" class="mw-redirect">machine instructions</a>. The <a href="/wiki/Operating_system" title="Operating system">operating systems</a> of most machines have been traditionally written in assembler code<sup class="noprint Template-Fact"><span title="This claim needs references to reliable sources&#160;since January 2009" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</span></sup> for this reason.</p>
<p>With more modern <a href="/wiki/Optimizing_compiler" title="Optimizing compiler" class="mw-redirect">optimizing compilers</a> and the greater complexity of recent <a href="/wiki/CPU" title="CPU" class="mw-redirect">CPUs</a>, it is more difficult to write code that is optimized better than the compiler itself generates, and few projects need resort to this 'ultimate' optimization step.</p>
<p>However, a large amount of code written today is still compiled with the intent to run on the greatest percentage of machines possible. As a consequence, programmers and compilers don't always take advantage of the more efficient instructions provided by newer CPUs or quirks of older models. Additionally, assembly code tuned for a particular processor without using such instructions might still be suboptimal on a different processor, expecting a different tuning of the code.</p>
<ul>
<li><b>Run time</b></li>
</ul>
<p><a href="/wiki/Just_in_time" title="Just in time" class="mw-redirect">Just in time</a> compilers and Assembler programmers may be able to perform <a href="/wiki/Run_time" title="Run time">run time</a> optimization exceeding the capability of static compilers by dynamically adjusting parameters according to the actual input or other factors.</p>
<p><a name="Platform_dependent_and_independent_optimizations" id="Platform_dependent_and_independent_optimizations"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Optimization_(computer_science)&amp;action=edit&amp;section=3" title="Edit section: Platform dependent and independent optimizations">edit</a>]</span> <span class="mw-headline">Platform dependent and independent optimizations</span></h3>
<p>Code optimization can be also broadly categorized as <a href="/wiki/Computer_platform" title="Computer platform" class="mw-redirect">platform</a> dependent and platform independent techniques; while the latter ones are effective of most or all platforms, platform dependent techniques use specific properties of one platform, or rely on parameters depending on the single platform or even on the single processor; writing or producing different versions of the same code for different processors might be thus needed.</p>
<p>For instance, in the case of compile-level optimization, platform independent techniques are generic techniques such as loop unrolling, reduction in function calls, memory efficient routines, reduction in conditions, etc., that impact most CPU architectures in a similar way. Generally, these serve to reduce the total <a href="/wiki/Instruction_path_length" title="Instruction path length">Instruction path length</a> required to complete the program and/or reduce total memory usage during the process. On the other side, platform dependent techniques involve instruction scheduling, instruction level parallelism, data level parallelism, cache optimization techniques, i.e. parameters that differ among various platforms; the optimal instruction scheduling might be different even on different processors of the same architecture.</p>
<p><a name="Different_algorithms" id="Different_algorithms"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Optimization_(computer_science)&amp;action=edit&amp;section=4" title="Edit section: Different algorithms">edit</a>]</span> <span class="mw-headline">Different algorithms</span></h2>
<p>Computational tasks can be performed in several different ways with varying efficiency. For example, consider the following <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a> code snippet whose intention is to obtain the sum of all integers from 1 to N:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">int</span> i, sum = <span class="nu0">0</span>;
<span class="kw1">for</span> <span class="br0">(</span>i = <span class="nu0">1</span>; i &lt;= N; i++<span class="br0">)</span>
  sum += i;
<span class="kw3">printf</span> <span class="br0">(</span><span class="st0">"sum: %d<span class="es0">\n</span>"</span>, sum<span class="br0">)</span>;
</pre></div>
<p>This code can (assuming no <a href="/wiki/Arithmetic_overflow" title="Arithmetic overflow">arithmetic overflow</a>) be rewritten using a mathematical formula like:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">int</span> sum = <span class="br0">(</span>N * <span class="br0">(</span>N<span class="nu0">+1</span><span class="br0">)</span><span class="br0">)</span> &gt;&gt; <span class="nu0">1</span>;  <span class="co1">// &gt;&gt;1 is bit right shift by 1, which is</span>
                             <span class="co1">// equivalent to divide by 2 when N is</span>
                             <span class="co1">// non-negative</span>
<span class="kw3">printf</span> <span class="br0">(</span><span class="st0">"sum: %d<span class="es0">\n</span>"</span>, sum<span class="br0">)</span>;
</pre></div>
<p>The optimization, sometimes performed automatically by an optimizing compiler, is to select a method (<a href="/wiki/Algorithm" title="Algorithm">algorithm</a>) that is more computationally efficient while retaining the same functionality. See <a href="/wiki/Algorithmic_efficiency" title="Algorithmic efficiency">Algorithmic efficiency</a> for a discussion of some of these techniques. However, a significant improvement in performance can often be achieved by solving only the actual problem and removing extraneous functionality.</p>
<p>Optimization is not always an obvious or intuitive process. In the example above, the ‘optimized’ version might actually be slower than the original version if N were sufficiently small and the particular hardware happens to be much faster at performing addition and <a href="/wiki/Loop_(computing)#Loops" title="Loop (computing)" class="mw-redirect">looping</a> operations than multiplication and bit-shifting.</p>
<p><a name="Trade-offs" id="Trade-offs"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Optimization_(computer_science)&amp;action=edit&amp;section=5" title="Edit section: Trade-offs">edit</a>]</span> <span class="mw-headline">Trade-offs</span></h2>
<p>Optimization will generally focus on improving just one or two aspects of performance: execution time, memory usage, disk space, bandwidth, power consumption or some other resource. This will usually require a trade-off - where one factor is optimized at the expense of others. For example, increasing the size of <a href="/wiki/Cache" title="Cache">cache</a> improves runtime performance, but also increases the memory consumption. Other common trade-offs include code clarity and conciseness.</p>
<p>There are instances where the programmer performing the optimization must decide to make the software more optimal for some operations but at the cost of making other operations less efficient. These trade-offs may sometimes be of a non-technical nature - such as when a competitor has published a <a href="/wiki/Benchmark" title="Benchmark">benchmark</a> result that must be beaten in order to improve commercial success but comes perhaps with the burden of making normal usage of the software less efficient. Such changes are sometimes jokingly referred to as <i>pessimizations</i>.</p>
<p><a name="Bottlenecks" id="Bottlenecks"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Optimization_(computer_science)&amp;action=edit&amp;section=6" title="Edit section: Bottlenecks">edit</a>]</span> <span class="mw-headline">Bottlenecks</span></h2>
<p>Optimization may include finding a <a href="/wiki/Bottleneck_(engineering)" title="Bottleneck (engineering)">bottleneck</a>, a critical part of the code that is the primary consumer of the needed resource - sometimes known as a <a href="/wiki/Hotspot" title="Hotspot">hot spot</a>. As a rule of thumb, improving 20% of the code is responsible for 80% of the results.<sup class="noprint Template-Fact"><span title="This claim needs references to reliable sources&#160;since January 2009" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</span></sup></p>
<p>In computer science, the <a href="/wiki/Pareto_principle" title="Pareto principle">Pareto principle</a> can be applied to resource optimization by observing that 80% of the resources are typically used by 20% of the operations. In software engineering, it is often a better approximation that 90% of the execution time of a computer program is spent executing 10% of the code (known as the <a href="/wiki/90/10_law" title="90/10 law" class="mw-redirect">90/10 law</a> in this context).</p>
<p>More complex algorithms and data structures perform well with many items, while simple algorithms are more suitable for small amounts of data—the setup, initialization time, and constant factors of the more complex algorithm can outweigh the benefit.</p>
<p>In some cases, adding more memory can help to make a program run faster. For example, a filtering program will commonly read each line and filter and output that line immediately. This only uses enough memory for one line, but performance is typically poor. Performance can be greatly improved by reading the entire file then writing the filtered result, though this uses much more memory. Caching the result is similarly effective, though also requiring larger memory use.</p>
<p><a name="When_to_optimize" id="When_to_optimize"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Optimization_(computer_science)&amp;action=edit&amp;section=7" title="Edit section: When to optimize">edit</a>]</span> <span class="mw-headline">When to optimize</span></h2>
<p>Optimization can reduce <a href="/wiki/Readability" title="Readability">readability</a> and add code that is used only to improve the <a href="/wiki/Computer_performance" title="Computer performance">performance</a>. This may complicate programs or systems, making them harder to maintain and debug. As a result, optimization or performance tuning is often performed at the end of the <a href="/wiki/Development_stage" title="Development stage" class="mw-redirect">development stage</a>.</p>
<p><a href="/wiki/Donald_Knuth" title="Donald Knuth">Donald Knuth</a> made the following statement on optimization:</p>
<ul>
<li>"We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil."<sup id="cite_ref-0" class="reference"><a href="#cite_note-0" title=""><span>[</span>1<span>]</span></a></sup></li>
</ul>
<p>(He also attributed the quote to <a href="/wiki/Tony_Hoare" title="Tony Hoare" class="mw-redirect">Tony Hoare</a> several years later,<sup id="cite_ref-1" class="reference"><a href="#cite_note-1" title=""><span>[</span>2<span>]</span></a></sup> although this might have been an error as Hoare disclaims having coined the phrase.<sup id="cite_ref-2" class="reference"><a href="#cite_note-2" title=""><span>[</span>3<span>]</span></a></sup>)</p>
<p>"Premature optimization" is a phrase used to describe a situation where a programmer lets performance considerations affect the design of a piece of code. This can result in a design that is not as clean as it could have been or code that is incorrect, because the code is complicated by the optimization and the programmer is distracted by optimizing.</p>
<p>An alternative approach is to design first, code from the design and then <a href="/wiki/Performance_analysis" title="Performance analysis" class="mw-redirect">profile</a>/<a href="/wiki/Benchmark" title="Benchmark">benchmark</a> the resulting code to see which parts should be optimized. A simple and elegant design is often easier to optimize at this stage, and profiling may reveal unexpected performance problems that would not have been addressed by premature optimization.</p>
<p>In practice, it is often necessary to keep performance goals in mind when first designing software, but the programmer balances the goals of design and optimization.</p>
<p><a name="Macros" id="Macros"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Optimization_(computer_science)&amp;action=edit&amp;section=8" title="Edit section: Macros">edit</a>]</span> <span class="mw-headline">Macros</span></h2>
<p>Optimization during code development using <a href="/wiki/Macro_(computer_science)" title="Macro (computer science)">macros</a> takes on different forms in different languages.</p>
<p>In some procedural languages, such as <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a> and <a href="/wiki/C%2B%2B" title="C++">C++</a>, macros are implemented using token substitution. Nowadays, inline functions can be used as a <a href="/wiki/Type_safe" title="Type safe" class="mw-redirect">type safe</a> alternative in many cases. In both cases, the inlined function body can then undergo further compile-time optimizations by the compiler, including <a href="/wiki/Constant_folding" title="Constant folding">constant folding</a>, which may move some computations to compile time.</p>
<p>In many <a href="/wiki/Functional_programming" title="Functional programming">functional programming</a> languages macros are implemented using parse-time substitution of parse trees/abstract syntax trees, which it is claimed makes them safer to use. Since in many cases interpretation is used, that is one way to ensure that such computations are only performed at parse-time, and sometimes the only way.</p>
<p><a href="/wiki/Lisp_programming_language" title="Lisp programming language" class="mw-redirect">Lisp</a> originated this style of macro<sup class="noprint Template-Fact"><span title="This claim needs references to reliable sources&#160;since September 2008" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</span></sup>, and such macros are often called “Lisp-like macros.” A similar effect can be achieved by using <a href="/wiki/Template_metaprogramming" title="Template metaprogramming">Template metaprogramming</a> in <a href="/wiki/C%2B%2B" title="C++">C++</a>.</p>
<p>In both cases, work is moved to compile-time. The difference between <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a> macros on one side, and Lisp-like macros and <a href="/wiki/C%2B%2B" title="C++">C++</a> <a href="/wiki/Template_metaprogramming" title="Template metaprogramming">Template metaprogramming</a> on the other side, is that the latter tools allow performing arbitrary computations at compile-time/parse-time, while expansion of <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a> macros does not perform any computation, and relies on the optimizer ability to perform it. Additionally, <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a> macros do not directly support recursion nor iteration, so are not <a href="/wiki/Turing_complete" title="Turing complete" class="mw-redirect">Turing complete</a>.</p>
<p>As with any optimization, however, it is often difficult to predict where such tools will have the most impact before a project is complete.</p>
<p><a name="Automated_and_manual_optimization" id="Automated_and_manual_optimization"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Optimization_(computer_science)&amp;action=edit&amp;section=9" title="Edit section: Automated and manual optimization">edit</a>]</span> <span class="mw-headline">Automated and manual optimization</span></h2>
<div class="rellink noprint relarticle mainarticle">Main article: <a href="/wiki/Compiler_optimization" title="Compiler optimization">Compiler optimization</a></div>
<p><i>See also <a href="/wiki/Category:Compiler_optimizations" title="Category:Compiler optimizations">Category:Compiler optimizations</a></i></p>
<p>Optimization can be automated by compilers or performed by programmers. Gains are usually limited for local optimization, and larger for global optimizations. Usually, the most powerful optimization is to find a superior <a href="/wiki/Algorithm" title="Algorithm">algorithm</a>.</p>
<p>Optimizing a whole system is usually undertaken by programmers because it is too complex for automated optimizers. In this situation, programmers or system administrators explicitly change code so that the overall system performs better. Although it can produce better efficiency, it is far more expensive than automated optimizations.</p>
<p>Use a <a href="/wiki/Profiler_(computer_science)" title="Profiler (computer science)" class="mw-redirect">profiler</a> (or <a href="/wiki/Performance_analysis" title="Performance analysis" class="mw-redirect">performance analyzer</a>) to find the sections of the program that are taking the most resources — the <i>bottleneck</i>. Programmers sometimes believe they have a clear idea of where the bottleneck is, but intuition is frequently wrong. Optimizing an unimportant piece of code will typically do little to help the overall performance.</p>
<p>When the bottleneck is localized, optimization usually starts with a rethinking of the algorithm used in the program: more often than not, a particular algorithm can be specifically tailored to a particular problem, yielding better performance than a generic algorithm. For example, the task of sorting a huge list of items is usually done with a <a href="/wiki/Quicksort" title="Quicksort">quicksort</a> routine, which is one of the most efficient generic algorithms. But if some characteristic of the items is exploitable (for example, they are already arranged in some particular order), a different method can be used, or even a custom-made sort routine.</p>
<p>After one is reasonably sure that the best algorithm is selected, code optimization can start: loops can be unrolled (for lower loop overhead, although this can often lead to <i>lower</i> speed if it overloads the <a href="/wiki/CPU_cache" title="CPU cache">CPU cache</a>), data types as small as possible can be used, integer arithmetic can be used instead of floating-point, and so on.</p>
<p>Performance bottlenecks can be due to language limitations rather than algorithms or data structures used in the program. Sometimes, a critical part of the program can be re-written in a different <a href="/wiki/Programming_language" title="Programming language">programming language</a> that gives more direct access to the underlying machine. For example, it is common for very <a href="/wiki/High-level_programming_language" title="High-level programming language">high-level</a> languages like <a href="/wiki/Python_(programming_language)" title="Python (programming language)">Python</a> to have modules written in <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a> for greater speed. Programs already written in C can have modules written in <a href="/wiki/Assembly_language" title="Assembly language">assembly</a>. Programs written in <a href="/wiki/D_programming_language" title="D programming language" class="mw-redirect">D</a> can use the <a href="/wiki/Inline_assembler" title="Inline assembler">inline assembler</a>.</p>
<p>Rewriting pays off because of a general rule known as the <a href="/wiki/90/10_law" title="90/10 law" class="mw-redirect">90/10 law</a>, which states that 90% of the time is spent in 10% of the code, and only 10% of the time in the remaining 90% of the code. So putting intellectual effort into optimizing just a small part of the program can have a huge effect on the overall speed if the correct part(s) can be located.</p>
<p>Manual optimization often has the side-effect of undermining readability. Thus code optimizations should be carefully documented and their effect on future development evaluated.</p>
<p>The program that does the automated optimization is called an <b>optimizer</b>. Most optimizers are embedded in compilers and operate during compilation. Optimizers can often tailor the generated code to specific processors.</p>
<p>Today, automated optimizations are almost exclusively limited to <a href="/wiki/Compiler_optimization" title="Compiler optimization">compiler optimization</a>.</p>
<p>Some high-level languages (<a href="/wiki/Eiffel_(programming_language)" title="Eiffel (programming language)">Eiffel</a>, <a href="/wiki/Esterel" title="Esterel">Esterel</a>) optimize their programs by using an <a href="/wiki/Intermediate_language" title="Intermediate language">intermediate language</a>.</p>
<p><a href="/wiki/Grid_computing" title="Grid computing">Grid computing</a> or <a href="/wiki/Distributed_computing" title="Distributed computing">distributed computing</a> aims to optimize the whole system, by moving tasks from computers with high usage to computers with idle time.</p>
<p><a name="Time_taken_for_optimization" id="Time_taken_for_optimization"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Optimization_(computer_science)&amp;action=edit&amp;section=10" title="Edit section: Time taken for optimization">edit</a>]</span> <span class="mw-headline">Time taken for optimization</span></h2>
<p>Sometimes, the time taken to undertake optimization in itself may be an issue.</p>
<p>Optimizing existing code usually does not add new features, and worse, it might add new <a href="/wiki/Software_bug" title="Software bug">bugs</a> in previously working code (as any change might). Because manually optimized code might sometimes have less 'readability' than unoptimized code, optimization might impact maintainability of it also. Optimization comes at a price and it is important to be sure that the investment is worthwhile.</p>
<p>An automatic optimizer (or <a href="/wiki/Optimizing_compiler" title="Optimizing compiler" class="mw-redirect">optimizing compiler</a>, a program that performs code optimization) may itself have to be optimized, either to further improve the efficiency of its target programs or else speed up its own operation. A compilation performed with optimization 'turned on' usually takes longer, although this is usually only a problem when programs are quite large (but probably more than compensated for over many run time savings of the code).</p>
<p>In particular, for <a href="/wiki/Just-in-time_compiler" title="Just-in-time compiler" class="mw-redirect">just-in-time compilers</a> the performance of the <a href="/wiki/Run_time" title="Run time">run time</a> compile component, executing together with its target code, is the key to improving overall execution speed.</p>
<p><a name="Quotes" id="Quotes"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Optimization_(computer_science)&amp;action=edit&amp;section=11" title="Edit section: Quotes">edit</a>]</span> <span class="mw-headline">Quotes</span></h2>
<ul>
<li><i>“The order in which the operations shall be performed in every particular case is a very interesting and curious question, on which our space does not permit us fully to enter. In almost every computation a great variety of arrangements for the succession of the processes is possible, and various considerations must influence the selection amongst them for the purposes of a Calculating Engine. One essential object is to choose that arrangement which shall tend to reduce to a minimum the time necessary for completing the calculation.”</i> - <a href="/wiki/Ada_Byron%27s_notes_on_the_analytical_engine" title="Ada Byron's notes on the analytical engine">Ada Byron's notes on the analytical engine</a> 1842.</li>
<li><i>“More computing sins are committed in the name of efficiency (without necessarily achieving it) than for any other single reason - including blind stupidity.”</i> - <a href="/wiki/W.A._Wulf" title="W.A. Wulf" class="mw-redirect">W.A. Wulf</a></li>
<li><i>“We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil. Yet we should not pass up our opportunities in that critical 3%.”</i><sup id="cite_ref-3" class="reference"><a href="#cite_note-3" title=""><span>[</span>4<span>]</span></a></sup> - <a href="/wiki/Donald_Knuth" title="Donald Knuth">Donald Knuth</a></li>
<li><i>“Bottlenecks occur in surprising places, so don't try to second guess and put in a speed hack until you have proven that's where the bottleneck is.”</i> - <a href="/wiki/Rob_Pike" title="Rob Pike">Rob Pike</a></li>
<li><i>“The First Rule of Program Optimization: Don't do it. The Second Rule of Program Optimization (for experts only!): Don't do it yet.”</i> - <a href="/wiki/Michael_A._Jackson" title="Michael A. Jackson">Michael A. Jackson</a></li>
</ul>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Optimization_(computer_science)&amp;action=edit&amp;section=12" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<div style="-moz-column-count:3; column-count:3;">
<ul>
<li><a href="/wiki/Michael_Abrash" title="Michael Abrash">Abrash Assembly Language Optimization</a></li>
<li><a href="/wiki/Algorithmic_efficiency" title="Algorithmic efficiency">Algorithmic efficiency</a></li>
<li><a href="/wiki/Abstract_interpretation" title="Abstract interpretation">Abstract interpretation</a></li>
<li><a href="/wiki/Caching" title="Caching" class="mw-redirect">Caching</a></li>
<li><a href="/wiki/Control_flow_graph" title="Control flow graph">Control flow graph</a></li>
<li><a href="/wiki/Lazy_evaluation" title="Lazy evaluation">Lazy evaluation</a></li>
<li><a href="/wiki/Loop_optimization" title="Loop optimization">Loop optimization</a></li>
<li><a href="/wiki/Low_level_virtual_machine" title="Low level virtual machine" class="mw-redirect">Low level virtual machine</a></li>
<li><a href="/wiki/Memoization" title="Memoization">Memoization</a></li>
<li><a href="/wiki/Memory_locality" title="Memory locality" class="mw-redirect">Memory locality</a></li>
<li><a href="/wiki/Performance_analysis" title="Performance analysis" class="mw-redirect">Performance analysis</a> (profiling)</li>
<li><a href="/wiki/Performance_tuning" title="Performance tuning">Performance tuning</a></li>
<li><a href="/wiki/Queueing_theory" title="Queueing theory">Queueing theory</a></li>
<li><a href="/wiki/Computer_simulation" title="Computer simulation">Simulation</a></li>
<li><a href="/wiki/Speculative_execution" title="Speculative execution">Speculative execution</a></li>
<li><a href="/wiki/SSA_form" title="SSA form" class="mw-redirect">SSA form</a></li>
<li><a href="/wiki/Worst-case_execution_time" title="Worst-case execution time">Worst-case execution time</a></li>
</ul>
</div>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Optimization_(computer_science)&amp;action=edit&amp;section=13" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<div class="references-small" style="margin-left:1.5em;">
<ul>
<li><a href="/wiki/Jon_Bentley" title="Jon Bentley">Jon Bentley</a>: <i>Writing Efficient Programs</i>, <a href="/wiki/Special:BookSources/0139702512" class="internal">ISBN 0-13-970251-2</a>.</li>
<li><a href="/wiki/Donald_Knuth" title="Donald Knuth">Donald Knuth</a>: <i><a href="/wiki/The_Art_of_Computer_Programming" title="The Art of Computer Programming">The Art of Computer Programming</a></i></li>
</ul>
</div>
<div class="references-small">
<ol class="references">
<li id="cite_note-0"><b><a href="#cite_ref-0" title="">^</a></b> Knuth, Donald. <i>Structured Programming with go to Statements</i>, ACM Journal <b>Computing Surveys</b>, Vol 6, No. 4, Dec. 1974. p.268.</li>
<li id="cite_note-1"><b><a href="#cite_ref-1" title="">^</a></b> <i>The Errors of Tex</i>, in <i>Software—Practice &amp; Experience</i>, Volume 19, Issue 7 (July 1989), pp. 607–685, reprinted in his book Literate Programming (p. 276)</li>
<li id="cite_note-2"><b><a href="#cite_ref-2" title="">^</a></b> <a href="http://hans.gerwitz.com/2004/08/12/premature-optimization-is-the-root-of-all-evil.html" class="external text" title="http://hans.gerwitz.com/2004/08/12/premature-optimization-is-the-root-of-all-evil.html" rel="nofollow">Tony Hoare, a 2004 email</a></li>
<li id="cite_note-3"><b><a href="#cite_ref-3" title="">^</a></b> <a href="/wiki/Donald_Knuth" title="Donald Knuth">Knuth, Donald</a>: <a href="http://pplab.snu.ac.kr/courses/adv_pl05/papers/p261-knuth.pdf" class="external text" title="http://pplab.snu.ac.kr/courses/adv_pl05/papers/p261-knuth.pdf" rel="nofollow">Structured Programming with Goto Statements</a>. <i>Computing Surveys</i> <b>6</b>:4 (1974), 261–301.</li>
</ol>
</div>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Optimization_(computer_science)&amp;action=edit&amp;section=14" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<ul>
<li><a href="http://www.azillionmonkeys.com/qed/optimize.html" class="external text" title="http://www.azillionmonkeys.com/qed/optimize.html" rel="nofollow">Programming Optimization</a></li>
<li><a href="http://www.eventhelix.com/RealtimeMantra/Basics/OptimizingCAndCPPCode.htm" class="external text" title="http://www.eventhelix.com/RealtimeMantra/Basics/OptimizingCAndCPPCode.htm" rel="nofollow">C,C++ optimization</a></li>
<li><a href="http://www.abarnett.demon.co.uk/tutorial.html" class="external text" title="http://www.abarnett.demon.co.uk/tutorial.html" rel="nofollow">C optimization tutorial</a></li>
<li><a href="http://www.cs.arizona.edu/solar/" class="external text" title="http://www.cs.arizona.edu/solar/" rel="nofollow">Software Optimization at Link-time And Run-time</a></li>
<li>Article "<a href="http://doi.ieeecomputersociety.org/10.1109/2.348001" class="external text" title="http://doi.ieeecomputersociety.org/10.1109/2.348001" rel="nofollow">A Plea for Lean Software</a>" by <a href="/wiki/Niklaus_Wirth" title="Niklaus Wirth">Niklaus Wirth</a></li>
<li><a href="http://c2.com/cgi/wiki?CategoryOptimization" class="external text" title="http://c2.com/cgi/wiki?CategoryOptimization" rel="nofollow">Description from the Portland Pattern Repository</a></li>
<li><a href="http://www.daemon.be/maarten/ipperf.html" class="external text" title="http://www.daemon.be/maarten/ipperf.html" rel="nofollow">Performance tuning of Computer Networks</a></li>
<li><a href="http://www.thinkingparallel.com/2006/08/07/my-views-on-high-level-optimization/" class="external text" title="http://www.thinkingparallel.com/2006/08/07/my-views-on-high-level-optimization/" rel="nofollow">An article describing high-level optimization</a></li>
</ul>


<!-- 
NewPP limit report
Preprocessor node count: 492/1000000
Post-expand include size: 7906/2048000 bytes
Template argument size: 2793/2048000 bytes
Expensive parser function count: 4/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:225779-0!1!0!default!!en!2 and timestamp 20090404153410 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Optimization_(computer_science)">http://en.wikipedia.org/wiki/Optimization_(computer_science)</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Software_performance_optimization" title="Category:Software performance optimization">Software performance optimization</a></span></div><div id="mw-hidden-catlinks" class="mw-hidden-cats-hidden">Hidden categories:&#32;<span dir='ltr'><a href="/wiki/Category:Articles_lacking_sources_from_October_2008" title="Category:Articles lacking sources from October 2008">Articles lacking sources from October 2008</a></span> | <span dir='ltr'><a href="/wiki/Category:All_articles_lacking_sources" title="Category:All articles lacking sources">All articles lacking sources</a></span> | <span dir='ltr'><a href="/wiki/Category:All_articles_with_unsourced_statements" title="Category:All articles with unsourced statements">All articles with unsourced statements</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_unsourced_statements_since_January_2009" title="Category:Articles with unsourced statements since January 2009">Articles with unsourced statements since January 2009</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_unsourced_statements_since_September_2008" title="Category:Articles with unsourced statements since September 2008">Articles with unsourced statements since September 2008</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Optimization_(computer_science)" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Optimization_(computer_science)" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Optimization_(computer_science)&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Optimization_(computer_science)&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Optimization_(computer_science)" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Optimization_(computer_science)" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Optimization_(computer_science)" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Optimization_(computer_science)&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Optimization_(computer_science)&amp;oldid=281713370" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Optimization_(computer_science)&amp;id=281713370">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-cs"><a href="http://cs.wikipedia.org/wiki/Optimalizace_(informatika)">Česky</a></li>
				<li class="interwiki-da"><a href="http://da.wikipedia.org/wiki/Optimering_(datalogi)">Dansk</a></li>
				<li class="interwiki-es"><a href="http://es.wikipedia.org/wiki/Optimizaci%C3%B3n_de_software">Español</a></li>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Optimisation_de_code">Français</a></li>
				<li class="interwiki-ko"><a href="http://ko.wikipedia.org/wiki/%EC%B5%9C%EC%A0%81%ED%99%94_(%EC%A0%95%EB%B3%B4_%EA%B3%B5%ED%95%99)">한국어</a></li>
				<li class="interwiki-hr"><a href="http://hr.wikipedia.org/wiki/Optimizacija_(ra%C4%8Dunarstvo)">Hrvatski</a></li>
				<li class="interwiki-it"><a href="http://it.wikipedia.org/wiki/Ottimizzazione_(informatica)">Italiano</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/%E6%9C%80%E9%81%A9%E5%8C%96_(%E6%83%85%E5%A0%B1%E5%B7%A5%E5%AD%A6)">日本語</a></li>
				<li class="interwiki-ru"><a href="http://ru.wikipedia.org/wiki/%D0%9E%D0%BF%D1%82%D0%B8%D0%BC%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F_(%D0%B8%D0%BD%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%82%D0%B8%D0%BA%D0%B0)">Русский</a></li>
				<li class="interwiki-simple"><a href="http://simple.wikipedia.org/wiki/Optimization_(computer_science)">Simple English</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 4 April 2009, at 15:34.</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv210 in 0.048 secs. --></body></html>
