<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="JavaScript syntax,Articles with unsourced statements since June 2008,Articles with unsourced statements since May 2009,JavaScript programming language,Special:Search/JavaScript syntax,ActionScript,Array,Associative arrays,Awk,Boolean datatype,Brendan Eich" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=JavaScript_syntax&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=JavaScript_syntax&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>JavaScript syntax - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "JavaScript_syntax";
		var wgTitle = "JavaScript syntax";
		var wgAction = "view";
		var wgArticleId = "3824186";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 290688274;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
<style type="text/css">/*<![CDATA[*/
.source-javascript {line-height: normal;}
.source-javascript li, .source-javascript pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for javascript
 * CSS class: source-javascript, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-javascript .de1, .source-javascript .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-javascript  {}
.source-javascript .head {}
.source-javascript .foot {}
.source-javascript .imp {font-weight: bold; color: red;}
.source-javascript .ln-xtra {color: #cc0; background-color: #ffc;}
.source-javascript li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-javascript li.li2 {font-weight: bold;}
.source-javascript .kw1 {color: #000066; font-weight: bold;}
.source-javascript .kw2 {color: #003366; font-weight: bold;}
.source-javascript .kw3 {color: #000066;}
.source-javascript .co1 {color: #009900; font-style: italic;}
.source-javascript .coMULTI {color: #009900; font-style: italic;}
.source-javascript .es0 {color: #000099; font-weight: bold;}
.source-javascript .br0 {color: #66cc66;}
.source-javascript .st0 {color: #3366CC;}
.source-javascript .nu0 {color: #CC0000;}
.source-javascript .me1 {color: #006600;}
.source-javascript .sc0 {}
.source-javascript .sc1 {}
.source-javascript .sc2 {}
.source-javascript .sc3 {}
.source-javascript .re0 {color: #0066FF;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style>		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-JavaScript_syntax skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">JavaScript syntax</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<table class="infobox" style="text-align: center; border: 1px solid #8888aa; background: #f7f8ff; padding: 5px; font-size: 85%;">
<tr>
<td style="background: #ccf; text-align: center;"><b>This article is part of</b>
<p><b>the <a href="/wiki/JavaScript" title="JavaScript">JavaScript</a> series.</b></p>
</td>
</tr>
<tr>
<td style="text-align: center;"><a href="/wiki/JavaScript" title="JavaScript">JavaScript</a></td>
</tr>
<tr>
<td style="text-align: center;"><strong class="selflink">JavaScript syntax</strong></td>
</tr>
<tr>
<td style="text-align: center;"><a href="/wiki/ECMAScript" title="ECMAScript">ECMAScript</a></td>
</tr>
<tr>
<td style="text-align: center;"><a href="/wiki/Category:JavaScript_programming_language" title="Category:JavaScript programming language">JavaScript topics</a></td>
</tr>
<tr>
<td style="text-align: center;">
<div class="noprint plainlinks navbar" style="background:none; padding:0; font-weight:normal;; font-size:xx-small;">This box: <a href="/wiki/Template:JavaScriptSidebar" title="Template:JavaScriptSidebar"><span title="View this template" style="">view</span></a>&#160;<span style="font-size:80%;">•</span>&#160;<a href="/wiki/Template_talk:JavaScriptSidebar" title="Template talk:JavaScriptSidebar"><span title="Discussion about this template" style="">talk</span></a>&#160;<span style="font-size:80%;">•</span>&#160;<a href="http://en.wikipedia.org/w/index.php?title=Template:JavaScriptSidebar&amp;action=edit" class="external text" title="http://en.wikipedia.org/w/index.php?title=Template:JavaScriptSidebar&amp;action=edit" rel="nofollow"><span title="Edit this template" style=";">edit</span></a></div>
</td>
</tr>
</table>
<p>The <a href="/wiki/Syntax_(programming_languages)" title="Syntax (programming languages)">syntax</a> of <a href="/wiki/JavaScript" title="JavaScript">JavaScript</a> is a set of rules that defines what constitutes a valid program in the JavaScript language.</p>
<p><a href="/wiki/File:Symbol_note.svg" class="image" title="Symbol note.svg"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/f/f8/Symbol_note.svg/17px-Symbol_note.svg.png" width="17" height="17" border="0" /></a> <b>Note:</b> The examples below often use an <code>alert</code> function to return <a href="/wiki/Standard_streams#Standard_output_.28stdout.29" title="Standard streams">standard text output</a>. The JavaScript <a href="/wiki/Standard_library" title="Standard library">standard library</a> lacks an official standard text output function. However, given that JavaScript is mainly used as a <a href="/wiki/Client-side_scripting" title="Client-side scripting">client-side scripting</a> language within modern web browsers, and that almost all web browsers provide access to the <code>alert</code> function, <code>alert</code> is included in our examples.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Origin_of_Syntax"><span class="tocnumber">1</span> <span class="toctext">Origin of Syntax</span></a></li>
<li class="toclevel-1"><a href="#Syntax_Basics"><span class="tocnumber">2</span> <span class="toctext">Syntax Basics</span></a>
<ul>
<li class="toclevel-2"><a href="#Case_sensitivity"><span class="tocnumber">2.1</span> <span class="toctext">Case sensitivity</span></a></li>
<li class="toclevel-2"><a href="#Whitespace_and_semicolons"><span class="tocnumber">2.2</span> <span class="toctext">Whitespace and semicolons</span></a></li>
<li class="toclevel-2"><a href="#Comments"><span class="tocnumber">2.3</span> <span class="toctext">Comments</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Variables"><span class="tocnumber">3</span> <span class="toctext">Variables</span></a></li>
<li class="toclevel-1"><a href="#Primitive_data_types"><span class="tocnumber">4</span> <span class="toctext">Primitive data types</span></a>
<ul>
<li class="toclevel-2"><a href="#Numbers"><span class="tocnumber">4.1</span> <span class="toctext">Numbers</span></a></li>
<li class="toclevel-2"><a href="#Arrays"><span class="tocnumber">4.2</span> <span class="toctext">Arrays</span></a></li>
<li class="toclevel-2"><a href="#Strings"><span class="tocnumber">4.3</span> <span class="toctext">Strings</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Operators"><span class="tocnumber">5</span> <span class="toctext">Operators</span></a>
<ul>
<li class="toclevel-2"><a href="#Arithmetic"><span class="tocnumber">5.1</span> <span class="toctext">Arithmetic</span></a></li>
<li class="toclevel-2"><a href="#Assignment"><span class="tocnumber">5.2</span> <span class="toctext">Assignment</span></a></li>
<li class="toclevel-2"><a href="#Comparison"><span class="tocnumber">5.3</span> <span class="toctext">Comparison</span></a></li>
<li class="toclevel-2"><a href="#Boolean"><span class="tocnumber">5.4</span> <span class="toctext">Boolean</span></a></li>
<li class="toclevel-2"><a href="#Bitwise"><span class="tocnumber">5.5</span> <span class="toctext">Bitwise</span></a></li>
<li class="toclevel-2"><a href="#String"><span class="tocnumber">5.6</span> <span class="toctext">String</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Control_structures"><span class="tocnumber">6</span> <span class="toctext">Control structures</span></a>
<ul>
<li class="toclevel-2"><a href="#If_..._else"><span class="tocnumber">6.1</span> <span class="toctext">If ... else</span></a></li>
<li class="toclevel-2"><a href="#Conditional_operator"><span class="tocnumber">6.2</span> <span class="toctext">Conditional operator</span></a></li>
<li class="toclevel-2"><a href="#Switch_statement"><span class="tocnumber">6.3</span> <span class="toctext">Switch statement</span></a></li>
<li class="toclevel-2"><a href="#For_loop"><span class="tocnumber">6.4</span> <span class="toctext">For loop</span></a></li>
<li class="toclevel-2"><a href="#For_..._in_loop"><span class="tocnumber">6.5</span> <span class="toctext">For ... in loop</span></a></li>
<li class="toclevel-2"><a href="#While_loop"><span class="tocnumber">6.6</span> <span class="toctext">While loop</span></a></li>
<li class="toclevel-2"><a href="#Do_..._while"><span class="tocnumber">6.7</span> <span class="toctext">Do ... while</span></a></li>
<li class="toclevel-2"><a href="#With"><span class="tocnumber">6.8</span> <span class="toctext">With</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Functions"><span class="tocnumber">7</span> <span class="toctext">Functions</span></a></li>
<li class="toclevel-1"><a href="#Objects"><span class="tocnumber">8</span> <span class="toctext">Objects</span></a>
<ul>
<li class="toclevel-2"><a href="#Creating_objects"><span class="tocnumber">8.1</span> <span class="toctext">Creating objects</span></a></li>
<li class="toclevel-2"><a href="#Constructors"><span class="tocnumber">8.2</span> <span class="toctext">Constructors</span></a></li>
<li class="toclevel-2"><a href="#Methods"><span class="tocnumber">8.3</span> <span class="toctext">Methods</span></a></li>
<li class="toclevel-2"><a href="#Inheritance"><span class="tocnumber">8.4</span> <span class="toctext">Inheritance</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Exceptions"><span class="tocnumber">9</span> <span class="toctext">Exceptions</span></a></li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">10</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#Notes"><span class="tocnumber">11</span> <span class="toctext">Notes</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">12</span> <span class="toctext">External links</span></a>
<ul>
<li class="toclevel-2"><a href="#Reference_Material"><span class="tocnumber">12.1</span> <span class="toctext">Reference Material</span></a></li>
</ul>
</li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Origin_of_Syntax" id="Origin_of_Syntax"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=JavaScript_syntax&amp;action=edit&amp;section=1" title="Edit section: Origin of Syntax">edit</a>]</span> <span class="mw-headline">Origin of Syntax</span></h2>
<p><a href="/wiki/Brendan_Eich" title="Brendan Eich">Brendan Eich</a> summarized the ancestry of the syntax in the first paragraph of the <a href="http://hepunx.rl.ac.uk/~adye/jsspec11/intro.htm#1006028" class="external text" title="http://hepunx.rl.ac.uk/~adye/jsspec11/intro.htm#1006028" rel="nofollow">JavaScript 1.1</a> specification as follows:</p>
<blockquote>
<div>
<p><big style="position:absolute; margin-left: -1ex">“</big></p>
JavaScript borrows most of its syntax from <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a>, but also inherits from <a href="/wiki/Awk" title="Awk" class="mw-redirect">Awk</a> and <a href="/wiki/Perl" title="Perl">Perl</a>, with some indirect influence from <a href="/wiki/Self_programming_language" title="Self programming language" class="mw-redirect">Self</a> in its object prototype system.<big>”</big></div>
</blockquote>
<p><a name="Syntax_Basics" id="Syntax_Basics"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=JavaScript_syntax&amp;action=edit&amp;section=2" title="Edit section: Syntax Basics">edit</a>]</span> <span class="mw-headline">Syntax Basics</span></h2>
<p><a name="Case_sensitivity" id="Case_sensitivity"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=JavaScript_syntax&amp;action=edit&amp;section=3" title="Edit section: Case sensitivity">edit</a>]</span> <span class="mw-headline">Case sensitivity</span></h3>
<p>JavaScript is case sensitive. It is common to start object names with a <a href="/wiki/CamelCase" title="CamelCase">capitalised</a> letter and functions or variables with a lower-case letter.</p>
<p><a name="Whitespace_and_semicolons" id="Whitespace_and_semicolons"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=JavaScript_syntax&amp;action=edit&amp;section=4" title="Edit section: Whitespace and semicolons">edit</a>]</span> <span class="mw-headline">Whitespace and semicolons</span></h3>
<p><a href="/wiki/Space_(punctuation)" title="Space (punctuation)">Spaces</a>, <a href="/wiki/Tab_character" title="Tab character" class="mw-redirect">tabs</a> and <a href="/wiki/Newline" title="Newline">newlines</a> used outside of string constants are called <a href="/wiki/Whitespace_(computer_science)" title="Whitespace (computer science)">whitespace</a>. Unlike C, whitespace in JavaScript source can directly impact semantics. Because of a technique called "semicolon insertion", some statements that are well formed when a newline is parsed will be considered complete (as if a semicolon were inserted just prior to the newline). Programmers are advised to supply statement-terminating semicolons explicitly although it degrades readability because it may lessen unintended effects of the automatic semicolon insertion.<sup class="noprint Template-Fact" title="This claim needs references to reliable sources&#160;since June 2008" style="white-space:nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</sup></p>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
<span class="kw1">return</span>
a + b;
 
<span class="co1">// Returns undefined. Treated as:</span>
<span class="co1">//   return;</span>
<span class="co1">//   a + b;</span>
</pre></div>
<p>But:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
a = b + c
<span class="br0">(</span>d + e<span class="br0">)</span>.<span class="me1">foo</span><span class="br0">(</span><span class="br0">)</span>
 
<span class="co1">// No semicolon insertion. Treated as:</span>
<span class="co1">//   a = b + c(d + e).foo()</span>
</pre></div>
<p><a name="Comments" id="Comments"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=JavaScript_syntax&amp;action=edit&amp;section=5" title="Edit section: Comments">edit</a>]</span> <span class="mw-headline">Comments</span></h3>
<p><a href="/wiki/Comment_(computer_programming)" title="Comment (computer programming)">Comment</a> syntax is the same as in <a href="/wiki/C%2B%2B" title="C++">C++</a> and many other languages.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
<span class="co1">// comment</span>
 
<span class="coMULTI">/* multi-line
   comment */</span>
</pre></div>
<p>Note that JavaScript explicitly forbids nesting of comments, e.g.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
<span class="coMULTI">/* You can't do
   /* this */</span>
*/
</pre></div>
<p><a name="Variables" id="Variables"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=JavaScript_syntax&amp;action=edit&amp;section=6" title="Edit section: Variables">edit</a>]</span> <span class="mw-headline">Variables</span></h2>
<p><a href="/wiki/Variable_(programming)" title="Variable (programming)">Variables</a> in standard JavaScript have no <a href="/wiki/Type_system" title="Type system">type</a> attached, and any value can be stored in any variable. Variables can be declared with a <code>var</code> statement. These variables are <a href="/wiki/Variable_(programming)#Scope_and_extent" title="Variable (programming)">lexically scoped</a> and once a variable is declared, it may be accessed anywhere inside the function where it is declared. Variables declared outside any function, and variables first used within functions without being declared with 'var', are <a href="/wiki/Global_variable" title="Global variable">global</a>. Here is an example of variable declarations and global values:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
x = <span class="nu0">0</span>; <span class="co1">// A global variable</span>
<span class="kw2">var</span> y = <span class="st0">'Hello!'</span>; <span class="co1">// Another global variable</span>
 
<span class="kw2">function</span> f<span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
  <span class="kw2">var</span> z = <span class="st0">'foxes'</span>; <span class="co1">// A local variable</span>
  twenty = <span class="nu0">20</span>; <span class="co1">// Global because keyword var is not used</span>
  <span class="kw1">return</span> x; <span class="co1">// We can use x here because it is global</span>
<span class="br0">}</span>
<span class="co1">// The value of z is no longer available</span>
</pre></div>
<p><a name="Primitive_data_types" id="Primitive_data_types"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=JavaScript_syntax&amp;action=edit&amp;section=7" title="Edit section: Primitive data types">edit</a>]</span> <span class="mw-headline">Primitive data types</span></h2>
<p>The JavaScript language provides a handful of <a href="/wiki/Primitive_data_types" title="Primitive data types" class="mw-redirect">primitive data types</a>. Some of the primitive data types also provide a set of named values that represent the extents of the type boundaries. These named values are described within the appropriate sections below.</p>
<p><a name="Numbers" id="Numbers"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=JavaScript_syntax&amp;action=edit&amp;section=8" title="Edit section: Numbers">edit</a>]</span> <span class="mw-headline">Numbers</span></h3>
<p>Numbers in JavaScript are represented in binary as <a href="/wiki/IEEE-754" title="IEEE-754" class="mw-redirect">IEEE-754</a> Doubles, which provides an accuracy to about 14 or 15 significant digits <a href="http://www.jibbering.com/faq/#FAQ4_2" class="external text" title="http://www.jibbering.com/faq/#FAQ4_2" rel="nofollow">JavaScript FAQ 4.2</a>. Because they are <a href="/wiki/Floating_point" title="Floating point">floating point</a> numbers, they do not always exactly represent real numbers, including fractions.</p>
<p>This becomes an issue when formatting numbers. For example:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
<span class="kw3">alert</span><span class="br0">(</span><span class="nu0">0.94</span> - <span class="nu0">0.01</span><span class="br0">)</span>; <span class="co1">// displays 0.9299999999999999</span>
</pre></div>
<p>As a result, the toFixed() method should be used to round numbers whenever they are <a href="http://www.jibbering.com/faq/#FAQ4_1" class="external text" title="http://www.jibbering.com/faq/#FAQ4_1" rel="nofollow">formatted for output</a>.</p>
<p>Numbers may be specified in any of these notations:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
<span class="nu0">345</span>;    <span class="co1">// an "integer", although there is only one numeric type in JavaScript</span>
<span class="nu0">34.5</span>;   <span class="co1">// a floating-point number</span>
<span class="nu0">3</span>.45e2; <span class="co1">// another floating-point, equivalent to 345</span>
<span class="nu0">0377</span>;   <span class="co1">// an octal integer equal to 255</span>
0xFF;   <span class="co1">// a hexadecimal integer equal to 255, digits represented by the letters A-F may be upper or lowercase</span>
</pre></div>
<p>In some ECMAScript implementations such as <a href="/wiki/ActionScript" title="ActionScript">ActionScript</a>, <a href="/wiki/RGB_color" title="RGB color" class="mw-redirect">RGB color</a> values are sometimes specified with hexadecimal integers:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
<span class="kw2">var</span> colorful = <span class="kw2">new</span> Color<span class="br0">(</span> <span class="st0">'_root.shapes'</span> <span class="br0">)</span>;
colorful.<span class="me1">setRGB</span><span class="br0">(</span> 0x003366 <span class="br0">)</span>;
</pre></div>
<p>The extents of the number type may also be described by named constant values:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
Infinity;  <span class="co1">// Construct equivalent to positive Infinity</span>
-Infinity; <span class="co1">// Negated Infinity construct, equal to negative Infinity</span>
NaN;       <span class="co1">// The Not-A-Number value, often returned as a failure in string-to-number conversions</span>
&lt;source&gt;
 
The Number constructor, or a unary + or -, may be used to perform explicit numeric conversion:
&lt;source lang=<span class="st0">"JavaScript"</span>&gt;
<span class="kw2">var</span> myString = <span class="st0">"123.456"</span>;
<span class="kw2">var</span> myNumber1 = Number<span class="br0">(</span> myString <span class="br0">)</span>;
<span class="kw2">var</span> myNumber2 = + myString ;
</pre></div>
<p>When used as a constructor, a numeric <i>wrapper</i> object is created, (though it is of little use):</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
myNumericWrapper = <span class="kw2">new</span> Number<span class="br0">(</span> <span class="nu0">123.456</span> <span class="br0">)</span>;
</pre></div>
<p><a name="Arrays" id="Arrays"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=JavaScript_syntax&amp;action=edit&amp;section=9" title="Edit section: Arrays">edit</a>]</span> <span class="mw-headline">Arrays</span></h3>
<p>An <a href="/wiki/Array" title="Array">Array</a> is a native JavaScript type specifically designed to store data values indexed by integer keys. Arrays, unlike the basic Object type, are prototyped with methods and properties to aid the programmer in routine tasks (e.g., <code>join</code>, <code>slice</code>, and <code>push</code>).</p>
<p>While arrays can be used creatively in JavaScript, as compared to other languages in the C family (see below), by default they use a zero-based indexing scheme: the first data value added to an empty array with the helper <code>push</code> method would occupy the 0th index.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
<span class="kw2">var</span> myArray = <span class="br0">[</span><span class="br0">]</span> <span class="co1">// Point the variable myArray to a newly created, empty Array</span>
myArray.<span class="me1">push</span><span class="br0">(</span><span class="st0">"hello world"</span><span class="br0">)</span>; <span class="co1">// Fill the next empty index, in this case 0</span>
<span class="kw3">alert</span><span class="br0">(</span>myArray<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span><span class="br0">)</span>; <span class="co1">// returns "hello world"</span>
</pre></div>
<p>Arrays have a <code>length</code> property that is guaranteed to always be larger than the largest integer index used in the array. It is automatically updated if one creates a property with an even larger index. Writing a smaller number to the <code>length</code> property will remove larger indices.</p>
<p>Elements of Arrays may be accessed using normal object property access notation:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
myArray<span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span>;
myArray<span class="br0">[</span><span class="st0">"1"</span><span class="br0">]</span>;
</pre></div>
<p>The above two are equivalent. It's not possible to use the "dot"-notation or strings with alternative representations of the number:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
myArray<span class="nu0">.1</span>;     <span class="co1">// syntax error</span>
myArray<span class="br0">[</span><span class="st0">"01"</span><span class="br0">]</span>; <span class="co1">// not the same as myArray[1]</span>
</pre></div>
<p>Declaration of an array can use either an Array literal or the <code>Array</code> constructor:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
myArray = <span class="br0">[</span><span class="nu0">0</span>,<span class="nu0">1</span>,,,<span class="nu0">4</span>,<span class="nu0">5</span><span class="br0">]</span>;            <span class="co1">// array with length 6 and 6 elements, including 2 undefined elements</span>
myArray = <span class="kw2">new</span> Array<span class="br0">(</span><span class="nu0">0</span>,<span class="nu0">1</span>,<span class="nu0">2</span>,<span class="nu0">3</span>,<span class="nu0">4</span>,<span class="nu0">5</span><span class="br0">)</span>; <span class="co1">// array with length 6 and 6 elements</span>
myArray = <span class="kw2">new</span> Array<span class="br0">(</span><span class="nu0">365</span><span class="br0">)</span>;         <span class="co1">// an empty array with length 365</span>
</pre></div>
<p><a href="/wiki/Array" title="Array">Arrays</a> are implemented so that only the elements defined use memory; they are "<a href="/wiki/Sparse_array" title="Sparse array">sparse arrays</a>". Setting <code>myArray[10] = 'someThing'</code> and <code>myArray[57] = 'somethingOther'</code> only uses space for these two elements, just like any other object. The <code>length</code> of the array will still be reported as 58.</p>
<p>You can use the object declaration literal to create objects that behave much like associative arrays in other languages:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
dog = <span class="br0">{</span><span class="st0">"color"</span>:<span class="st0">"brown"</span>, <span class="st0">"size"</span>:<span class="st0">"large"</span><span class="br0">}</span>;
dog<span class="br0">[</span><span class="st0">"color"</span><span class="br0">]</span>; <span class="co1">// this gives you "brown"</span>
dog.<span class="me1">color</span>; <span class="co1">// this also gives you "brown"</span>
</pre></div>
<p>You can use the object and array declaration literals to quickly create arrays that are associative, multidimensional, or both.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
cats = <span class="br0">[</span><span class="br0">{</span><span class="st0">"color"</span>:<span class="st0">"brown"</span>, <span class="st0">"size"</span>:<span class="st0">"large"</span><span class="br0">}</span>,
        <span class="br0">{</span><span class="st0">"color"</span>:<span class="st0">"black"</span>, <span class="st0">"size"</span>:<span class="st0">"small"</span><span class="br0">}</span><span class="br0">]</span>;
cats<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span><span class="br0">[</span><span class="st0">"size"</span><span class="br0">]</span>; <span class="co1">// this gives you "large"</span>
 
dogs = <span class="br0">{</span><span class="st0">"rover"</span>:<span class="br0">{</span><span class="st0">"color"</span>:<span class="st0">"brown"</span>, <span class="st0">"size"</span>:<span class="st0">"large"</span><span class="br0">}</span>,
        <span class="st0">"spot"</span>:<span class="br0">{</span><span class="st0">"color"</span>:<span class="st0">"black"</span>, <span class="st0">"size"</span>:<span class="st0">"small"</span><span class="br0">}</span><span class="br0">}</span>;
dogs<span class="br0">[</span><span class="st0">"spot"</span><span class="br0">]</span><span class="br0">[</span><span class="st0">"size"</span><span class="br0">]</span>; <span class="co1">// this gives you "small"</span>
</pre></div>
<p><a name="Strings" id="Strings"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=JavaScript_syntax&amp;action=edit&amp;section=10" title="Edit section: Strings">edit</a>]</span> <span class="mw-headline">Strings</span></h3>
<p><a href="/wiki/String_(computer_science)" title="String (computer science)">Strings</a> in Javascript are a sequence of characters. Strings in JavaScript can be created directly by placing the series of characters between double or single quotes.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
<span class="kw2">var</span> greeting = <span class="st0">"Hello, world!"</span>;
<span class="kw2">var</span> another_greeting = <span class="st0">'Greetings, people of Earth.'</span>;
</pre></div>
<p>You can access individual characters within a string using the charAt() method (provided by <code>String.prototype</code>). This is the preferred way when accessing individual characters within a string, as it also works in Mozilla-based browsers:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
<span class="kw2">var</span> h = greeting.<span class="me1">charAt</span><span class="br0">(</span><span class="nu0">0</span><span class="br0">)</span>; <span class="co1">// Now h contains 'H' - Works in both Internet Explorer </span>
                            <span class="co1">// and Mozilla based browsers</span>
</pre></div>
<p>In <a href="/wiki/Mozilla" title="Mozilla">Mozilla</a> based browsers, individual characters within a string can be accessed (as strings with only a single character) through the same notation as arrays:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
<span class="kw2">var</span> h = greeting<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span>; <span class="co1">// Now h contains 'H' - Works in Mozilla based browsers</span>
</pre></div>
<p>But, for <a href="/wiki/Internet_Explorer" title="Internet Explorer">Internet Explorer</a>, however, JavaScript strings are <a href="/wiki/Immutable_object" title="Immutable object">immutable</a>:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
greeting<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span> = <span class="st0">"H"</span>; <span class="co1">// ERROR</span>
</pre></div>
<p>Applying the equality operator ("==") to two strings returns true if the strings have the same contents, which means: of same length and same cases (for alphabets). Thus:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
<span class="kw2">var</span> x = <span class="st0">"world"</span>;
<span class="kw2">var</span> compare1 = <span class="br0">(</span><span class="st0">"Hello, "</span> + x == <span class="st0">"Hello, world"</span><span class="br0">)</span>; <span class="co1">// Now compare1 contains true</span>
<span class="kw2">var</span> compare2 = <span class="br0">(</span><span class="st0">"Hello, "</span> + x == <span class="st0">"hello, world"</span><span class="br0">)</span>; <span class="co1">// Now compare2 contains false since the</span>
                                                  <span class="co1">// first characters of both operands are</span>
                                                  <span class="co1">// not of the same case</span>
</pre></div>
<p><a name="Operators" id="Operators"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=JavaScript_syntax&amp;action=edit&amp;section=11" title="Edit section: Operators">edit</a>]</span> <span class="mw-headline">Operators</span></h2>
<p>The '+' operator is <a href="/wiki/Operator_overloading" title="Operator overloading">overloaded</a>; it is used for string concatenation and arithmetic addition and also to convert strings to numbers. It also has special meaning when used in a <a href="/wiki/Regular_expression" title="Regular expression">regular expression</a>.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
<span class="co1">// Concatenate 2 strings</span>
<span class="kw2">var</span> a = <span class="st0">'This'</span>;
<span class="kw2">var</span> b = <span class="st0">' and that'</span>;
<span class="kw3">alert</span><span class="br0">(</span>a + b<span class="br0">)</span>;  <span class="co1">// displays 'This and that'</span>
 
<span class="co1">// Add two numbers</span>
<span class="kw2">var</span> x = <span class="nu0">2</span>;
<span class="kw2">var</span> y = <span class="nu0">6</span>;
<span class="kw3">alert</span><span class="br0">(</span>x + y<span class="br0">)</span>; <span class="co1">// displays 8</span>
 
<span class="co1">// Adding a string and a number results in concatenation</span>
<span class="kw3">alert</span><span class="br0">(</span>x + <span class="st0">'2'</span><span class="br0">)</span>; <span class="co1">// displays 22</span>
 
<span class="co1">// Convert a string to a number</span>
<span class="kw2">var</span> z = <span class="st0">'4'</span>;   <span class="co1">// z is a string (the digit 4)</span>
<span class="kw3">alert</span><span class="br0">(</span>z + x<span class="br0">)</span>; <span class="co1">// displays 42</span>
<span class="kw3">alert</span><span class="br0">(</span>+z + x<span class="br0">)</span>;<span class="co1">// displays 6</span>
</pre></div>
<p><a name="Arithmetic" id="Arithmetic"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=JavaScript_syntax&amp;action=edit&amp;section=12" title="Edit section: Arithmetic">edit</a>]</span> <span class="mw-headline">Arithmetic</span></h3>
<p>Binary operators</p>
<pre>
+     Addition
-     Subtraction
*     Multiplication
/     Division (returns a floating-point value)
%     Modulus (returns the integer remainder)
</pre>
<p>Unary operators</p>
<pre>
-     Unary negation (reverses the sign)
++    Increment (can be prefix or postfix)
--    Decrement (can be prefix or postfix)
</pre>
<p><a name="Assignment" id="Assignment"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=JavaScript_syntax&amp;action=edit&amp;section=13" title="Edit section: Assignment">edit</a>]</span> <span class="mw-headline">Assignment</span></h3>
<pre>
=     Assign
+=    Add and assign
-=    Subtract and assign
*=    Multiply and assign
/=    Divide and assign
%=    Modulus and assign
</pre>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
<span class="kw2">var</span> x = <span class="nu0">1</span>;
x *= <span class="nu0">3</span>;
<span class="kw3">alert</span><span class="br0">(</span> x <span class="br0">)</span>;  <span class="co1">// displays: 3</span>
x /= <span class="nu0">3</span>;
<span class="kw3">alert</span><span class="br0">(</span> x <span class="br0">)</span>;  <span class="co1">// displays: 1</span>
x -= <span class="nu0">1</span>;
<span class="kw3">alert</span><span class="br0">(</span> x <span class="br0">)</span>;  <span class="co1">// displays: 0</span>
</pre></div>
<p><a name="Comparison" id="Comparison"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=JavaScript_syntax&amp;action=edit&amp;section=14" title="Edit section: Comparison">edit</a>]</span> <span class="mw-headline">Comparison</span></h3>
<pre>
==    Equal
!=    Not equal
&gt;     Greater than
&gt;=    Greater than or equal to
&lt;     Less than
&lt;=    Less than or equal to

===   Identical (equal and of the same type)
!==   Not identical
</pre>
<p><a name="Boolean" id="Boolean"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=JavaScript_syntax&amp;action=edit&amp;section=15" title="Edit section: Boolean">edit</a>]</span> <span class="mw-headline">Boolean</span></h3>
<p>JavaScript has three logical boolean operators: <i>&amp;&amp;</i> (logical AND), <i>||</i> (logical OR), and <i>!</i> (logical NOT).</p>
<p>In the context of a boolean operation, all JavaScript values evaluate to true unless the value is the boolean <i>false</i> itself, the number 0, a string of length 0 (empty string), or one of the special values <i>null</i>, <i>undefined</i>, or <i>NaN</i>. The Boolean function can be used to explicitly perform this conversion:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
Boolean<span class="br0">(</span> <span class="kw2">false</span> <span class="br0">)</span>;     <span class="co1">// returns false</span>
Boolean<span class="br0">(</span> <span class="nu0">0</span> <span class="br0">)</span>;         <span class="co1">// returns false</span>
Boolean<span class="br0">(</span> <span class="nu0">0.0</span> <span class="br0">)</span>;       <span class="co1">// returns false</span>
Boolean<span class="br0">(</span> <span class="st0">""</span> <span class="br0">)</span>;        <span class="co1">// returns false</span>
Boolean<span class="br0">(</span> <span class="kw2">null</span> <span class="br0">)</span>;      <span class="co1">// returns false</span>
Boolean<span class="br0">(</span> undefined <span class="br0">)</span>; <span class="co1">// returns false</span>
Boolean<span class="br0">(</span> NaN <span class="br0">)</span>;       <span class="co1">// returns false</span>
<span class="co1">// ONLY empty strings return false</span>
Boolean<span class="br0">(</span><span class="st0">"false"</span><span class="br0">)</span>;     <span class="co1">// returns true</span>
Boolean<span class="br0">(</span><span class="st0">"0"</span><span class="br0">)</span>;         <span class="co1">// returns true</span>
</pre></div>
<p>The unary NOT operator <i>!</i> first evaluates its operand in a boolean context, and then returns the opposite boolean value:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
<span class="kw2">var</span> a = <span class="nu0">0</span>;
<span class="kw2">var</span> b = <span class="nu0">9</span>;
!a; <span class="co1">// evaluates to true,  just as (Boolean( a ) == false)</span>
!b; <span class="co1">// evaluates to false, just as (Boolean( b ) == false)</span>
</pre></div>
<p>A double use of the <i>!</i> operator can be used to <i>normalize</i> a boolean value:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
<span class="kw2">var</span> arg = <span class="kw2">null</span>;
arg = !!arg; <span class="co1">// arg is now the value false, rather than null</span>
 
arg = <span class="st0">"finished"</span>; <span class="co1">// non-empty string</span>
arg = !!arg; <span class="co1">// arg is now the value true</span>
</pre></div>
<p>In the earliest implementations of JavaScript and JScript, the <i>&amp;&amp;</i> and <i>||</i> operators behaved in the same manner as their counterparts in other C derived programming languages, in that they always returned a boolean value:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
x &amp;&amp; y; <span class="co1">// returns true if x AND y evaluate to true: (Boolean( x ) == Boolean( y ) == true), false otherwise</span>
x || y; <span class="co1">// returns true if x OR y evaluates to true, false otherwise</span>
</pre></div>
<p>In the newer implementations, these operators return one of their operands:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
expr1 &amp;&amp; expr2; <span class="co1">// returns expr1 if it evaluates to false, otherwise it returns expr2</span>
expr1 || expr2; <span class="co1">// returns expr1 if it evaluates to true, otherwise it returns expr2</span>
</pre></div>
<p>This novel behavior is little known even among experienced JavaScripters, and can cause problems if one expects an actual boolean value.</p>
<ul>
<li>Short-circuit logical operations means the expression will be evaluated from left to right until the answer can be determined. For example:</li>
</ul>
<p>a || b is automatically true if a is true. There is no reason to evaluate b. a &amp;&amp; b is false if a is false. There is no reason to evaluate b.</p>
<pre>
&amp;&amp;    and
||    or
!     not (logical negation)
</pre>
<p><a name="Bitwise" id="Bitwise"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=JavaScript_syntax&amp;action=edit&amp;section=16" title="Edit section: Bitwise">edit</a>]</span> <span class="mw-headline">Bitwise</span></h3>
<p>Binary operators</p>
<pre>
&amp;     And
|     Or
^     Xor

&lt;&lt;    Shift left  (zero fill)
&gt;&gt;    Shift right (sign-propagating); copies of the leftmost bit (sign bit) are shifted in from the
      left.
&gt;&gt;&gt;   Shift right (zero fill)

      For positive numbers, &gt;&gt; and &gt;&gt;&gt; yield the same result.
</pre>
<p>Unary operators</p>
<pre>
~     Not (inverts the bits)
</pre>
<p><a name="String" id="String"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=JavaScript_syntax&amp;action=edit&amp;section=17" title="Edit section: String">edit</a>]</span> <span class="mw-headline">String</span></h3>
<pre>
=     Assignment
+     Concatenation
+=    Concatenate and assign
</pre>
<p>Examples</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
str = <span class="st0">"ab"</span> + <span class="st0">"cd"</span>;   <span class="co1">// "abcd"</span>
str += <span class="st0">"e"</span>;          <span class="co1">// "abcde"</span>
</pre></div>
<p><a name="Control_structures" id="Control_structures"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=JavaScript_syntax&amp;action=edit&amp;section=18" title="Edit section: Control structures">edit</a>]</span> <span class="mw-headline">Control structures</span></h2>
<p><a name="If_..._else" id="If_..._else"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=JavaScript_syntax&amp;action=edit&amp;section=19" title="Edit section: If ... else">edit</a>]</span> <span class="mw-headline">If ... else</span></h3>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
 <span class="kw1">if</span> <span class="br0">(</span>expr<span class="br0">)</span>
 <span class="br0">{</span>
   <span class="co1">//statements;</span>
 <span class="br0">}</span>
 <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">(</span>expr2<span class="br0">)</span>
 <span class="br0">{</span>
   <span class="co1">//statements;</span>
 <span class="br0">}</span>
 <span class="kw1">else</span>
 <span class="br0">{</span>
   <span class="co1">//statements;</span>
 <span class="br0">}</span>
</pre></div>
<p><a name="Conditional_operator" id="Conditional_operator"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=JavaScript_syntax&amp;action=edit&amp;section=20" title="Edit section: Conditional operator">edit</a>]</span> <span class="mw-headline">Conditional operator</span></h3>
<p>The conditional operator creates an expression that evaluates as one of two expressions depending on a condition. This is similar to the <i>if</i> statement that selects one of two statements to execute depending on a condition. I.e., the conditional operator is to expressions what <i>if</i> is to statements.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
 <span class="kw2">var</span> result = <span class="br0">(</span>condition<span class="br0">)</span> ? expression : alternative;
</pre></div>
<p>is the same as:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
 <span class="kw1">if</span> <span class="br0">(</span>condition<span class="br0">)</span>
 <span class="br0">{</span>
   result = expression;
 <span class="br0">}</span>
 <span class="kw1">else</span>
 <span class="br0">{</span>
   result = alternative;
 <span class="br0">}</span>
</pre></div>
<p>Unlike the <i>if</i> statement, the conditional operator cannot omit its "else-branch".</p>
<p><a name="Switch_statement" id="Switch_statement"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=JavaScript_syntax&amp;action=edit&amp;section=21" title="Edit section: Switch statement">edit</a>]</span> <span class="mw-headline"><a href="/wiki/Control_flow#Choice_based_on_specific_constant_values" title="Control flow">Switch statement</a></span></h3>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
 <span class="kw1">switch</span> <span class="br0">(</span>expr<span class="br0">)</span> <span class="br0">{</span>
   <span class="kw1">case</span> SOMEVALUE: 
     <span class="co1">//statements;</span>
     <span class="kw1">break</span>;
   <span class="kw1">case</span> ANOTHERVALUE: 
     <span class="co1">//statements;</span>
     <span class="kw1">break</span>;
   <span class="kw2">default</span>:
     <span class="co1">//statements;</span>
     <span class="kw1">break</span>;
 <span class="br0">}</span>
</pre></div>
<ul>
<li><code>break;</code> is optional; however, it's recommended to use it in most cases, since otherwise code execution will continue to the body of the next <code>case</code> block.</li>
<li>Add a break statement to the end of the last case as a precautionary measure, in case additional cases are added later.</li>
<li>Strings can be used for the case values.</li>
<li>Braces are required.</li>
</ul>
<p><a name="For_loop" id="For_loop"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=JavaScript_syntax&amp;action=edit&amp;section=22" title="Edit section: For loop">edit</a>]</span> <span class="mw-headline"><a href="/wiki/For_loop" title="For loop">For loop</a></span></h3>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
 <span class="kw1">for</span> <span class="br0">(</span>initial;condition;loop statement<span class="br0">)</span> <span class="br0">{</span>
   <span class="coMULTI">/*
     statements will be executed every time
     the for{} loop cycles, while the
     condition is satisfied
   */</span>
 <span class="br0">}</span>
</pre></div>
<p>or</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
 <span class="kw1">for</span> <span class="br0">(</span>initial;condition;loop statement<span class="br0">)</span> <span class="co1">// one line of statements</span>
</pre></div>
<p><a name="For_..._in_loop" id="For_..._in_loop"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=JavaScript_syntax&amp;action=edit&amp;section=23" title="Edit section: For ... in loop">edit</a>]</span> <span class="mw-headline"><a href="/wiki/Foreach" title="Foreach">For ... in loop</a></span></h3>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
 <span class="kw1">for</span> <span class="br0">(</span><span class="kw2">var</span> property-<span class="kw3">name</span> <span class="kw1">in</span> object-<span class="kw3">name</span><span class="br0">)</span> <span class="br0">{</span>
   <span class="co1">//statements using object-name[property-name];</span>
 <span class="br0">}</span>
</pre></div>
<ul>
<li>Iterates through all enumerable properties of an object.</li>
<li><i>Sources differ on whether this is usable for arrays</i><sup id="cite_ref-0" class="reference"><a href="#cite_note-0" title=""><span>[</span>1<span>]</span></a></sup>.</li>
<li>There are differences between the various web browsers with regard to which properties will be reflected with the for...in loop statement. In theory, this is controlled by an internal state property defined by the ECMAscript standard called "DontEnum", but in practice each browser returns a slightly different set of properties during introspection.</li>
</ul>
<p><a name="While_loop" id="While_loop"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=JavaScript_syntax&amp;action=edit&amp;section=24" title="Edit section: While loop">edit</a>]</span> <span class="mw-headline"><a href="/wiki/While_loop" title="While loop">While loop</a></span></h3>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
 <span class="kw1">while</span> <span class="br0">(</span>condition<span class="br0">)</span> <span class="br0">{</span>
   statements;
 <span class="br0">}</span>
</pre></div>
<p><a name="Do_..._while" id="Do_..._while"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=JavaScript_syntax&amp;action=edit&amp;section=25" title="Edit section: Do ... while">edit</a>]</span> <span class="mw-headline"><a href="/wiki/Do_while_loop" title="Do while loop">Do ... while</a></span></h3>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
 <span class="kw1">do</span> <span class="br0">{</span>
   statements;
 <span class="br0">}</span> <span class="kw1">while</span> <span class="br0">(</span>condition<span class="br0">)</span>;
</pre></div>
<p><a name="With" id="With"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=JavaScript_syntax&amp;action=edit&amp;section=26" title="Edit section: With">edit</a>]</span> <span class="mw-headline">With</span></h3>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
 <span class="kw1">with</span><span class="br0">(</span>document<span class="br0">)</span> <span class="br0">{</span>
   <span class="kw2">var</span> a = getElementById<span class="br0">(</span><span class="st0">'a'</span><span class="br0">)</span>;
   <span class="kw2">var</span> b = getElementById<span class="br0">(</span><span class="st0">'b'</span><span class="br0">)</span>;
   <span class="kw2">var</span> c = getElementById<span class="br0">(</span><span class="st0">'c'</span><span class="br0">)</span>;
 <span class="br0">}</span>;
</pre></div>
<ul>
<li>Note the absence of <code>document.</code> before each <code>getElementById()</code> invocation.</li>
</ul>
<p><a name="Functions" id="Functions"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=JavaScript_syntax&amp;action=edit&amp;section=27" title="Edit section: Functions">edit</a>]</span> <span class="mw-headline">Functions</span></h2>
<p>A <a href="/wiki/Function_(programming)" title="Function (programming)" class="mw-redirect">function</a> is a block with a (possibly empty) parameter list that is normally given a name. A function may contain local variables return a value.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
<span class="kw2">function</span> gcd<span class="br0">(</span>segmentA, segmentB<span class="br0">)</span> <span class="br0">{</span>
  <span class="kw2">var</span> diff = segmentA - segmentB
  <span class="kw1">if</span> <span class="br0">(</span>diff == <span class="nu0">0</span><span class="br0">)</span> <span class="kw1">return</span> segmentA
  <span class="kw1">if</span> <span class="br0">(</span>diff &gt; <span class="nu0">0</span><span class="br0">)</span> 
     <span class="kw1">return</span> gcd<span class="br0">(</span>segmentB, diff<span class="br0">)</span>
  <span class="kw1">else</span>
     <span class="kw1">return</span> gcd<span class="br0">(</span>setgmentA, -diff<span class="br0">)</span>
<span class="br0">}</span>
<span class="kw3">alert</span><span class="br0">(</span>gcd<span class="br0">(</span><span class="nu0">60</span>, <span class="nu0">40</span><span class="br0">)</span><span class="br0">)</span>; <span class="co1">// 20</span>
</pre></div>
<p>The number of arguments given when calling a function may not necessarily correspond to the number of arguments in the function definition; a named argument in the definition that does not have a matching argument in the call will have the value <code>undefined</code>. Within the function, the arguments may also be accessed through the <code>arguments</code> object; this provides access to all arguments using indices (e.g. <code>arguments[0], arguments[1], ... arguments[n]</code>), including those beyond the number of named arguments. Note that while the arguments list has a .length property, it is <i>not</i> an instance of Array; it does not have methods such as .slice(), .sort(), etc.</p>
<p>All parameters are passed by value (for objects it is the reference to the object that is passed).</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
<span class="kw2">var</span> obj1 = <span class="br0">{</span>a:<span class="nu0">1</span><span class="br0">}</span>
<span class="kw2">var</span> obj2 = <span class="br0">{</span>b:<span class="nu0">2</span><span class="br0">}</span>
<span class="kw2">function</span> foo<span class="br0">(</span>p<span class="br0">)</span> <span class="br0">{</span>
  p = obj2; <span class="co1">// ignores actual parameter</span>
  p.<span class="me1">b</span> = arguments<span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span>
<span class="br0">}</span>
foo<span class="br0">(</span>obj1, <span class="nu0">3</span><span class="br0">)</span> <span class="co1">// Does not affect obj1 at all.  3 is additional parameter</span>
<span class="kw3">alert</span><span class="br0">(</span>obj1.<span class="me1">a</span> + <span class="st0">" "</span> + obj2.<span class="me1">b</span><span class="br0">)</span>; <span class="co1">// writes 1 3</span>
</pre></div>
<p>Functions can be declared inside other functions, and access the outer function's local variables. Furthermore they impelement <a href="/wiki/Closure_(computer_science)" title="Closure (computer science)">closures</a> by remembering the outer function's local variables even after the outer function has exited.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
<span class="kw2">var</span> v = <span class="st0">"top"</span>
<span class="kw2">var</span> bar
<span class="kw2">function</span> foo<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
  <span class="kw2">var</span> v = <span class="st0">"foo"</span>
  bar = <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span><span class="kw3">alert</span><span class="br0">(</span>v<span class="br0">)</span><span class="br0">}</span>
<span class="br0">}</span>
foo<span class="br0">(</span><span class="br0">)</span>
bar<span class="br0">(</span><span class="br0">)</span> <span class="co1">// writes "foo", not "top" even though foo() has exited.</span>
</pre></div>
<p><a name="Objects" id="Objects"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=JavaScript_syntax&amp;action=edit&amp;section=28" title="Edit section: Objects">edit</a>]</span> <span class="mw-headline">Objects</span></h2>
<p>For convenience, Types are normally subdivided into <i>primitives</i> and <i>objects</i>. Objects are entities that have an identity (they are only equal to themselves) and that map property names to values, ("slots" in <a href="/wiki/Prototype-based_programming" title="Prototype-based programming">prototype-based programming</a> terminology). Objects may be thought of as <a href="/wiki/Associative_arrays" title="Associative arrays" class="mw-redirect">associative arrays</a> or hashes, and are often implemented using these data structures. However, objects have additional features, such as a prototype chain, which ordinary associative arrays do not have.</p>
<p>JavaScript has several kinds of built-in objects, namely <a href="/wiki/Array" title="Array">Array</a>, <a href="/wiki/Boolean_datatype" title="Boolean datatype" class="mw-redirect">Boolean</a>, <a href="/wiki/Calendar_date" title="Calendar date">Date</a>, <a href="/wiki/Function_(programming)" title="Function (programming)" class="mw-redirect">Function</a>, <a href="/wiki/Mathematics" title="Mathematics">Math</a>, <a href="/wiki/Number" title="Number">Number</a>, <a href="/wiki/Object_(computer_science)" title="Object (computer science)">Object</a>, <a href="/wiki/Regular_expressions" title="Regular expressions" class="mw-redirect">RegExp</a> and <a href="/wiki/String_(computer_science)" title="String (computer science)">String</a>. Other objects are "host objects", defined not by the language but by the runtime environment. For example, in a browser, typical host objects belong to the <a href="/wiki/Document_Object_Model" title="Document Object Model">DOM</a> (<a href="/wiki/Window_(computing)" title="Window (computing)">window</a>, <a href="/wiki/Form_(document)" title="Form (document)">form</a>, <a href="/wiki/Hyperlink" title="Hyperlink">links</a> etc.).</p>
<p><a name="Creating_objects" id="Creating_objects"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=JavaScript_syntax&amp;action=edit&amp;section=29" title="Edit section: Creating objects">edit</a>]</span> <span class="mw-headline">Creating objects</span></h3>
<p>Objects can be created using a constructor or an object literal. The constructor can use either the built-in Object function or a custom function. It is a convention that constructor functions are given a name that starts with a capital letter:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
<span class="co1">// Constructor</span>
<span class="kw2">var</span> anObject = <span class="kw2">new</span> Object<span class="br0">(</span><span class="br0">)</span>;
 
<span class="co1">// Object literal</span>
<span class="kw2">var</span> objectA = <span class="br0">{</span><span class="br0">}</span>;
<span class="kw2">var</span> objectB = <span class="br0">{</span>index1:<span class="st0">'value 1'</span>, index2:<span class="st0">'value 2'</span><span class="br0">}</span>;
 
<span class="co1">// Custom constructor (see below)</span>
</pre></div>
<p>Object literals and array literals allow one to easily create flexible data structures:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
<span class="kw2">var</span> myStructure = <span class="br0">{</span>
  <span class="kw3">name</span>: <span class="br0">{</span>
    first: <span class="st0">"Mel"</span>,
    last: <span class="st0">"Smith"</span>
  <span class="br0">}</span>,
  age: <span class="nu0">33</span>,
  hobbies: <span class="br0">[</span> <span class="st0">"chess"</span>, <span class="st0">"jogging"</span> <span class="br0">]</span>
<span class="br0">}</span>;
</pre></div>
<p>This is the basis for <a href="/wiki/JSON" title="JSON">JSON</a>, which is a simple notation that uses JavaScript-like syntax for data exchange.</p>
<p><a name="Constructors" id="Constructors"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=JavaScript_syntax&amp;action=edit&amp;section=30" title="Edit section: Constructors">edit</a>]</span> <span class="mw-headline">Constructors</span></h3>
<p><a href="/wiki/Constructor_function" title="Constructor function" class="mw-redirect">Constructor functions</a> simply assign values to slots of a newly created object. The values may be values or other functions.</p>
<p>Unlike other object oriented languages, javascript objects do not really have a type other than their values. The constructor function that happened to be used to create them is not remembered. Thus the constructor function does not really correspond to a "class" in other languages. It just assigns the new object's slots and prototype.</p>
<p>Functions are objects themselves, which can be used produce an effect similar to "static properties" (using C++/Java terminology) as shown below. (The function object also has a special <code>prototype</code> property, as discussed in the Inheritance section below.)</p>
<p>Object deletion is rarely used as the scripting engine will <a href="/wiki/Garbage_collection_(computer_science)" title="Garbage collection (computer science)">garbage collect</a> objects that are no longer being referenced.</p>
<p>Example: Manipulating an object</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
<span class="kw2">function</span> MyObject<span class="br0">(</span>attributeA, attributeB<span class="br0">)</span> <span class="br0">{</span>
  <span class="kw1">this</span>.<span class="me1">attributeA</span> = attributeA;
  <span class="kw1">this</span>.<span class="me1">attributeB</span> = attributeB;
<span class="br0">}</span>
 
MyObject.<span class="me1">staticC</span> = <span class="st0">" blue"</span>; <span class="co1">// On MyObject Function, not obj</span>
<span class="kw3">alert</span><span class="br0">(</span>MyObject.<span class="me1">staticC</span><span class="br0">)</span>; <span class="co1">// blue</span>
 
obj = <span class="kw2">new</span> MyObject<span class="br0">(</span><span class="st0">' red'</span>, <span class="nu0">1000</span><span class="br0">)</span>;
 
<span class="kw3">alert</span><span class="br0">(</span>obj.<span class="me1">attributeA</span><span class="br0">)</span>; <span class="co1">// red</span>
<span class="kw3">alert</span><span class="br0">(</span>obj<span class="br0">[</span><span class="st0">"attributeB"</span><span class="br0">]</span><span class="br0">)</span>; <span class="co1">// 1000</span>
 
<span class="kw3">alert</span><span class="br0">(</span>obj.<span class="me1">staticC</span><span class="br0">)</span>; <span class="co1">// undefined</span>
 
obj.<span class="me1">attributeC</span> = <span class="kw2">new</span> Date<span class="br0">(</span><span class="br0">)</span>; <span class="co1">// add a new property</span>
 
<span class="kw1">delete</span> obj.<span class="me1">attributeB</span>; <span class="co1">// remove a property of obj</span>
<span class="kw3">alert</span><span class="br0">(</span>obj.<span class="me1">attributeB</span><span class="br0">)</span>; <span class="co1">// undefined</span>
 
<span class="kw1">delete</span> obj; <span class="co1">// remove the whole Object (rarely used)</span>
<span class="kw3">alert</span><span class="br0">(</span>obj.<span class="me1">attributeA</span><span class="br0">)</span>; <span class="co1">// throws an exception</span>
</pre></div>
<p><a name="Methods" id="Methods"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=JavaScript_syntax&amp;action=edit&amp;section=31" title="Edit section: Methods">edit</a>]</span> <span class="mw-headline">Methods</span></h3>
<p>A <a href="/wiki/Method_(computer_science)" title="Method (computer science)">method</a> is simply a function that is assigned to the value of an object's slot. Unlike many object-oriented languages, there is no distinction between a function definition and a method definition. Rather, the distinction occurs during function calling; a function can be called as a method.</p>
<p>Note that in the example below, Foo is simply assigning values to slots, some of which are functions. Thus it can assign different functions to different instances. There is no prototyping in this example.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
<span class="kw2">function</span> y2<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span><span class="kw1">return</span> <span class="kw1">this</span>.<span class="me1">xxx</span> + <span class="st0">"2 "</span>;<span class="br0">}</span>
 
<span class="kw2">function</span> Foo<span class="br0">(</span>xz<span class="br0">)</span> <span class="br0">{</span>
  <span class="kw1">this</span>.<span class="me1">xxx</span> = <span class="st0">"yyy-"</span>;
  <span class="kw1">if</span> <span class="br0">(</span>xz &gt; <span class="nu0">0</span><span class="br0">)</span> 
    <span class="kw1">this</span>.<span class="me1">xx</span> = <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span><span class="kw1">return</span> <span class="kw1">this</span>.<span class="me1">xxx</span> +<span class="st0">"X "</span>;<span class="br0">}</span>;
  <span class="kw1">else</span> 
    <span class="kw1">this</span>.<span class="me1">xx</span> = <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span><span class="kw1">return</span> <span class="kw1">this</span>.<span class="me1">xxx</span> +<span class="st0">"Z "</span>;<span class="br0">}</span>;
  <span class="kw1">this</span>.<span class="me1">yy</span> = y2;
<span class="br0">}</span>
 
<span class="kw2">var</span> foo1 = <span class="kw2">new</span> Foo<span class="br0">(</span><span class="nu0">1</span><span class="br0">)</span>;
<span class="kw2">var</span> foo2 = <span class="kw2">new</span> Foo<span class="br0">(</span><span class="nu0">0</span><span class="br0">)</span>;
 
foo1.<span class="me1">y3</span> = y2; <span class="co1">// Assigns the function itself, not its evaluated result, i.e. not y2()</span>
foo2.<span class="me1">xxx</span> = <span class="st0">"aaa-"</span>;
 
<span class="kw3">alert</span><span class="br0">(</span><span class="st0">"foo1/2 "</span> + foo1.<span class="me1">xx</span><span class="br0">(</span><span class="br0">)</span> + foo2.<span class="me1">xx</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>;
<span class="co1">// foo1/2 yyy-X aaa-Z </span>
 
<span class="kw2">var</span> baz=<span class="br0">{</span><span class="st0">"xxx"</span>: <span class="st0">"zzz-"</span><span class="br0">}</span>
baz.<span class="me1">y4</span> = y2 <span class="co1">// No need for a constructor to make an object.</span>
 
<span class="kw3">alert</span><span class="br0">(</span><span class="st0">"yy/y3/y4 "</span> + foo1.<span class="me1">yy</span><span class="br0">(</span><span class="br0">)</span> + foo1.<span class="me1">y3</span><span class="br0">(</span><span class="br0">)</span> + baz.<span class="me1">y4</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>;
<span class="co1">// yy/y3/y4 yyy-2 yyy-2 zzz-2</span>
 
foo1.<span class="me1">y2</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">// Throws an exception, because foo1.y2 doesn't exist.</span>
</pre></div>
<p><a name="Inheritance" id="Inheritance"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=JavaScript_syntax&amp;action=edit&amp;section=32" title="Edit section: Inheritance">edit</a>]</span> <span class="mw-headline">Inheritance</span></h3>
<p>JavaScript supports inheritance hierarchies through prototyping in the manner of <a href="/wiki/Self_(programming_language)" title="Self (programming language)">Self</a>.</p>
<p>In the following example, the Derive class inherits from the Base class. When d is created as a Derive, the reference to the base instance of Base is copied to d. base.</p>
<p>Derive does not contain a value for aBaseFunction, so it is retrieved from Base <i>when aBaseFunction is accessed</i>. This is made clear by changing the value of base.aBaseFunction, which is reflected in the value of d.aBaseFunction.</p>
<p>Some implementations allow the prototype to be accessed or set explicitly using the __proto__ slot as shown below.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
<span class="kw2">function</span> Base<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
  <span class="kw1">this</span>.<span class="me1">anOverride</span> = <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span><span class="kw3">alert</span><span class="br0">(</span><span class="st0">"Base::anOverride()"</span><span class="br0">)</span>;<span class="br0">}</span>;
 
  <span class="kw1">this</span>.<span class="me1">aBaseFunction</span> = <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span><span class="kw3">alert</span><span class="br0">(</span><span class="st0">"Base::aBaseFunction()"</span><span class="br0">)</span>;<span class="br0">}</span>;
<span class="br0">}</span>
 
<span class="kw2">function</span> Derive<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
  <span class="kw1">this</span>.<span class="me1">anOverride</span> = <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span><span class="kw3">alert</span><span class="br0">(</span><span class="st0">"Derive::anOverride()"</span><span class="br0">)</span>;<span class="br0">}</span>;
<span class="br0">}</span>
 
base = <span class="kw2">new</span> Base<span class="br0">(</span><span class="br0">)</span>;
Derive.<span class="me1">prototype</span> = base; <span class="co1">// Must be before new Derive()</span>
 
d = <span class="kw2">new</span> Derive<span class="br0">(</span><span class="br0">)</span>; <span class="co1">// Copies Derive.prototype to d instance's hidden prototype slot.</span>
 
base.<span class="me1">aBaseFunction</span> = <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span><span class="kw3">alert</span><span class="br0">(</span><span class="st0">"Base::aNEWBaseFunction()"</span><span class="br0">)</span><span class="br0">}</span>
 
d.<span class="me1">anOverride</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">// Derive::anOverride()</span>
d.<span class="me1">aBaseFunction</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">// Base::aNEWBaseFunction()</span>
<span class="kw3">alert</span><span class="br0">(</span>d.<span class="me1">aBaseFunction</span> == Derive.<span class="me1">prototype</span>.<span class="me1">aBaseFunction</span><span class="br0">)</span>; <span class="co1">// true</span>
 
<span class="kw3">alert</span><span class="br0">(</span>d.__proto__ == base<span class="br0">)</span>; <span class="co1">// true in Mozilla-based implementations but false in many other implementations</span>
</pre></div>
<p>The following shows clearly how references to prototypes are <i>copied</i> on instance creation, but that changes to a prototype can affect all instances that refer to it.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
<span class="kw2">function</span> m1<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span><span class="kw1">return</span> <span class="st0">"One "</span>;<span class="br0">}</span>
<span class="kw2">function</span> m2<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span><span class="kw1">return</span> <span class="st0">"Two "</span>;<span class="br0">}</span>
<span class="kw2">function</span> m3<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span><span class="kw1">return</span> <span class="st0">"Three "</span>;<span class="br0">}</span>
 
<span class="kw2">function</span> Base<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span><span class="br0">}</span>
 
Base.<span class="me1">prototype</span>.<span class="me1">yyy</span> = m2;
bar = <span class="kw2">new</span> Base<span class="br0">(</span><span class="br0">)</span>;
<span class="kw3">alert</span><span class="br0">(</span><span class="st0">"bar.yyy "</span> + bar.<span class="me1">yyy</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>; <span class="co1">// bar.yyy Two </span>
 
<span class="kw2">function</span> Top<span class="br0">(</span><span class="br0">)</span><span class="br0">{</span><span class="kw1">this</span>.<span class="me1">yyy</span> = m3<span class="br0">}</span>
ttt = <span class="kw2">new</span> Top<span class="br0">(</span><span class="br0">)</span>;
 
foo = <span class="kw2">new</span> Base<span class="br0">(</span><span class="br0">)</span>;
Base.<span class="me1">prototype</span> = ttt;
  <span class="co1">// No effect on foo, the *reference* to ttt is copied.</span>
<span class="kw3">alert</span><span class="br0">(</span><span class="st0">"foo.yyy "</span> + foo.<span class="me1">yyy</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>; <span class="co1">// foo.yyy Two </span>
 
baz = <span class="kw2">new</span> Base<span class="br0">(</span><span class="br0">)</span>;
<span class="kw3">alert</span><span class="br0">(</span><span class="st0">"baz.yyy "</span> + baz.<span class="me1">yyy</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>; <span class="co1">// baz.yyy Three </span>
 
ttt.<span class="me1">yyy</span> = m1; <span class="co1">// Does affect baz, and any other derived classes.</span>
<span class="kw3">alert</span><span class="br0">(</span><span class="st0">"baz.yyy1 "</span> + baz.<span class="me1">yyy</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>; <span class="co1">// baz.yyy1 One</span>
</pre></div>
<p>In practice many variations of these themes are used, and it can be both powerful and confusing.</p>
<p><a name="Exceptions" id="Exceptions"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=JavaScript_syntax&amp;action=edit&amp;section=33" title="Edit section: Exceptions">edit</a>]</span> <span class="mw-headline">Exceptions</span></h2>
<p>Newer versions of JavaScript (as used in <a href="/wiki/Internet_Explorer" title="Internet Explorer">Internet Explorer</a> 5 and <a href="/wiki/Netscape_(web_browser)" title="Netscape (web browser)">Netscape</a> 6) include a <code>try ... catch ... finally</code> <a href="/wiki/Exception_handling" title="Exception handling">exception handling</a> statement to handle run-time errors.<sup class="noprint Template-Fact" title="This claim needs references to reliable sources&#160;since May 2009" style="white-space:nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</sup></p>
<p>The <code>try ... catch ... finally</code> statement catches <a href="/wiki/Exception_handling" title="Exception handling">exceptions</a> resulting from an error or a <a href="/w/index.php?title=Throw_statement&amp;action=edit&amp;redlink=1" class="new" title="Throw statement (page does not exist)">throw statement</a>. Its syntax is as follows:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
<span class="kw1">try</span> <span class="br0">{</span>
  <span class="co1">// Statements in which exceptions might be thrown</span>
<span class="br0">}</span> <span class="kw1">catch</span><span class="br0">(</span>errorValue<span class="br0">)</span> <span class="br0">{</span>
  <span class="co1">// Statements that execute in the event of an exception</span>
<span class="br0">}</span> <span class="kw1">finally</span> <span class="br0">{</span>
  <span class="co1">// Statements that execute afterward either way</span>
<span class="br0">}</span>
</pre></div>
<p>Initially, the statements within the try block execute. If an exception is thrown, the script's control flow immediately transfers to the statements in the catch block, with the exception available as the error argument. Otherwise the catch block is skipped. The Catch block can <code>throw(errorValue)</code> if it does not want to handle a specific error.</p>
<p>In any case the statements in the finally block are always executed. This can be used to free resources, although memory is automatically garbage collected.</p>
<p>Either the <code>catch</code> or the <code>finally</code> clause may be omitted. The catch argument is also required.</p>
<p>The Mozilla implementation allows for multiple catch statements, as an extension to the ECMAScript standard. They follow a syntax similar to that used in <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a>:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
<span class="kw1">try</span> <span class="br0">{</span> statement; <span class="br0">}</span>
<span class="kw1">catch</span> <span class="br0">(</span> e <span class="kw1">if</span> e == <span class="st0">"InvalidNameException"</span>  <span class="br0">)</span> <span class="br0">{</span> statement; <span class="br0">}</span>
<span class="kw1">catch</span> <span class="br0">(</span> e <span class="kw1">if</span> e == <span class="st0">"InvalidIdException"</span>    <span class="br0">)</span> <span class="br0">{</span> statement; <span class="br0">}</span>
<span class="kw1">catch</span> <span class="br0">(</span> e <span class="kw1">if</span> e == <span class="st0">"InvalidEmailException"</span> <span class="br0">)</span> <span class="br0">{</span> statement; <span class="br0">}</span>
<span class="kw1">catch</span> <span class="br0">(</span> e <span class="br0">)</span> <span class="br0">{</span> statement; <span class="br0">}</span>
</pre></div>
<p>In a browser, the <code>onerror</code> event is more commonly used to trap exceptions.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
<span class="kw2">function</span> handleErr<span class="br0">(</span>errorValue,url,lineNr<span class="br0">)</span><span class="br0">{</span>...; <span class="kw1">return</span> <span class="kw2">true</span>;<span class="br0">}</span>
<span class="kw3">onerror</span>=handleErr;
</pre></div>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=JavaScript_syntax&amp;action=edit&amp;section=34" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<ul>
<li><a href="/wiki/JavaScript" title="JavaScript">JavaScript</a></li>
<li><a href="/wiki/ECMAScript" title="ECMAScript">ECMAScript</a></li>
<li><a href="/wiki/JScript" title="JScript">JScript</a></li>
<li><a href="/wiki/Comparison_of_Javascript-based_source_code_editors" title="Comparison of Javascript-based source code editors" class="mw-redirect">Comparison of Javascript-based source code editors</a></li>
</ul>
<p><a name="Notes" id="Notes"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=JavaScript_syntax&amp;action=edit&amp;section=35" title="Edit section: Notes">edit</a>]</span> <span class="mw-headline">Notes</span></h2>
<ol class="references">
<li id="cite_note-0"><b><a href="#cite_ref-0" title="">^</a></b> The issue is whether it would iterate not only through the array indices, but also through other visible properties. <a href="http://msdn.microsoft.com/en-us/library/kw1tezhk(VS.85).aspx" class="external text" title="http://msdn.microsoft.com/en-us/library/kw1tezhk(VS.85).aspx" rel="nofollow">An article in the Microsoft Developer Network website</a>specifically states that For...In can be used for <i>"stepping through ... all the elements of an array"</i>. The MSDN article refers to JScript, which is, effectively, what is used by Internet Explorer for JavaScript script. <a href="http://www.w3schools.com/js/js_loop_for_in.asp" class="external text" title="http://www.w3schools.com/js/js_loop_for_in.asp" rel="nofollow">An example in the W3Schools website</a> gives arrays as an example of the use of For...In. <a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Object_Manipulation_Statements#for...in_Statement" class="external text" title="https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Object_Manipulation_Statements#for...in_Statement" rel="nofollow">An article in the Mozilla Developer Centre</a> explains more about the problem: <i>"Although it may be tempting to use this as a way to iterate over Array elements, because the for...in statement iterates over user-defined properties in addition to the array elements, if you modify the Array object, such as adding custom properties or methods, the for...in statement will return the name of your user-defined properties in addition to the numeric indexes. Thus it is better to use a traditional for loop with a numeric index when iterating over arrays."</i></li>
</ol>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=JavaScript_syntax&amp;action=edit&amp;section=36" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<p><a name="Reference_Material" id="Reference_Material"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=JavaScript_syntax&amp;action=edit&amp;section=37" title="Edit section: Reference Material">edit</a>]</span> <span class="mw-headline">Reference Material</span></h3>
<ul>
<li>David Flanagan, Paula Ferguson: <i>JavaScript: The Definitive Guide</i>, O'Reilly &amp; Associates, <a href="/wiki/Special:BookSources/0596101996" class="internal">ISBN 0-596-10199-6</a></li>
<li>Danny Goodman: <i>JavaScript Bible</i>, Wiley, John &amp; Sons, <a href="/wiki/Special:BookSources/0764533428" class="internal">ISBN 0-7645-3342-8</a></li>
<li>Thomas A. Powell, Fritz Schneider: <i>JavaScript: The Complete Reference</i>, McGraw-Hill Companies, <a href="/wiki/Special:BookSources/0072191279" class="internal">ISBN 0-07-219127-9</a></li>
<li>Emily Vander Veer: <i>JavaScript For Dummies, 4th Edition</i>, Wiley, <a href="/wiki/Special:BookSources/0764576593" class="internal">ISBN 0-7645-7659-3</a></li>
<li><a href="http://developer.mozilla.org/en/docs/JavaScript" class="external text" title="http://developer.mozilla.org/en/docs/JavaScript" rel="nofollow">Mozilla JavaScript Language Documentation</a></li>
<li><a href="http://developer.mozilla.org/en/docs/A_re-introduction_to_JavaScript" class="external text" title="http://developer.mozilla.org/en/docs/A_re-introduction_to_JavaScript" rel="nofollow">A re-introduction to JavaScript - Mozilla Developer Center</a></li>
<li><a href="http://javalessons.com/cgi-bin/fun/java-tutorials-main.cgi?sub=javascript&amp;code=script" class="external text" title="http://javalessons.com/cgi-bin/fun/java-tutorials-main.cgi?sub=javascript&amp;code=script" rel="nofollow">Interactive JavaScript Lessons - example-based</a></li>
<li><a href="http://javascript.about.com/" class="external text" title="http://javascript.about.com/" rel="nofollow">JavaScript on About.com: lessons and explanation</a></li>
<li><a href="/wiki/ECMAScript" title="ECMAScript">ECMAScript</a> standard references: <a href="http://www.ecma-international.org/publications/standards/Ecma-262.htm" class="external text" title="http://www.ecma-international.org/publications/standards/Ecma-262.htm" rel="nofollow">ECMA-262</a></li>
<li>Mozilla Developer Center Core References for JavaScript versions <a href="http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference" class="external text" title="http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference" rel="nofollow">1.5</a>, <a href="http://research.nihonsoft.org/javascript/CoreReferenceJS14/" class="external text" title="http://research.nihonsoft.org/javascript/CoreReferenceJS14/" rel="nofollow">1.4</a>, <a href="http://research.nihonsoft.org/javascript/ClientReferenceJS13/" class="external text" title="http://research.nihonsoft.org/javascript/ClientReferenceJS13/" rel="nofollow">1.3</a> and <a href="http://research.nihonsoft.org/javascript/jsref/" class="external text" title="http://research.nihonsoft.org/javascript/jsref/" rel="nofollow">1.2</a></li>
</ul>
<table class="metadata plainlinks mbox-small" style="border:1px solid #aaa; background-color:#f9f9f9;">
<tr>
<td class="mbox-image"><a href="http://en.wikibooks.org/wiki/Special:Search/JavaScript_syntax" title="b:Special:Search/JavaScript syntax"><img alt="Sister project" src="http://upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/40px-Wikibooks-logo-en-noslogan.svg.png" width="40" height="40" border="0" /></a></td>
<td class="mbox-text" style=""><a href="/wiki/Wikibooks" title="Wikibooks">Wikibooks</a> has a book on the topic of
<div style="margin-left:10px;"><i><b><a href="http://en.wikibooks.org/wiki/Programming:JavaScript" class="extiw" title="wikibooks:Programming:JavaScript">Programming:JavaScript</a></b></i></div>
</td>
</tr>
</table>


<!-- 
NewPP limit report
Preprocessor node count: 593/1000000
Post-expand include size: 6545/2048000 bytes
Template argument size: 1794/2048000 bytes
Expensive parser function count: 2/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:3824186-0!1!0!default!!en!2 and timestamp 20090518102802 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/JavaScript_syntax">http://en.wikipedia.org/wiki/JavaScript_syntax</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:JavaScript_programming_language" title="Category:JavaScript programming language">JavaScript programming language</a></span></div><div id="mw-hidden-catlinks" class="mw-hidden-cats-hidden">Hidden categories:&#32;<span dir='ltr'><a href="/wiki/Category:All_articles_with_unsourced_statements" title="Category:All articles with unsourced statements">All articles with unsourced statements</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_unsourced_statements_since_June_2008" title="Category:Articles with unsourced statements since June 2008">Articles with unsourced statements since June 2008</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_unsourced_statements_since_May_2009" title="Category:Articles with unsourced statements since May 2009">Articles with unsourced statements since May 2009</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/JavaScript_syntax" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:JavaScript_syntax" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=JavaScript_syntax&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=JavaScript_syntax&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=JavaScript_syntax" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate/Now/en?utm_source=donate&amp;utm_medium=sidebar&amp;utm_campaign=spontaneous_donation" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/JavaScript_syntax" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/JavaScript_syntax" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=JavaScript_syntax&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=JavaScript_syntax&amp;oldid=290688274" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=JavaScript_syntax&amp;id=290688274">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Syntaxe_JavaScript">Français</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 18 May 2009, at 10:28 (UTC).</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv203 in 0.059 secs. --></body></html>
