<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Breadth-first search,Infobox Algorithm,A* search algorithm,Algorithm,B* search algorithm,Bellman-Ford algorithm,Best-first search,Bidirectional search,Bipartite graph,Boost Graph Library,Branching factor" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Breadth-first_search&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Breadth-first_search&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Breadth-first search - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Breadth-first_search";
		var wgTitle = "Breadth-first search";
		var wgAction = "view";
		var wgArticleId = "97026";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 279189359;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
<style type="text/css">/*<![CDATA[*/
.source-python {line-height: normal;}
.source-python li, .source-python pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for python
 * CSS class: source-python, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-python .de1, .source-python .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-python  {}
.source-python .head {}
.source-python .foot {}
.source-python .imp {font-weight: bold; color: red;}
.source-python .ln-xtra {color: #cc0; background-color: #ffc;}
.source-python li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-python li.li2 {font-weight: bold;}
.source-python .kw1 {color: #ff7700;font-weight:bold;}
.source-python .kw2 {color: #008000;}
.source-python .kw3 {color: #dc143c;}
.source-python .kw4 {color: #0000cd;}
.source-python .co1 {color: #808080; font-style: italic;}
.source-python .coMULTI {color: #808080; font-style: italic;}
.source-python .es0 {color: #000099; font-weight: bold;}
.source-python .br0 {color: #66cc66;}
.source-python .st0 {color: #483d8b;}
.source-python .nu0 {color: #ff4500;}
.source-python .me1 {color: black;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-c .de1, .source-c .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-c  {}
.source-c .head {}
.source-c .foot {}
.source-c .imp {font-weight: bold; color: red;}
.source-c .ln-xtra {color: #cc0; background-color: #ffc;}
.source-c li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-c li.li2 {font-weight: bold;}
.source-c .kw1 {color: #b1b100;}
.source-c .kw2 {color: #000000; font-weight: bold;}
.source-c .kw3 {color: #000066;}
.source-c .kw4 {color: #993333;}
.source-c .co1 {color: #808080; font-style: italic;}
.source-c .co2 {color: #339933;}
.source-c .coMULTI {color: #808080; font-style: italic;}
.source-c .es0 {color: #000099; font-weight: bold;}
.source-c .br0 {color: #66cc66;}
.source-c .st0 {color: #ff0000;}
.source-c .nu0 {color: #cc66cc;}
.source-c .me1 {color: #202020;}
.source-c .me2 {color: #202020;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-cpp {line-height: normal;}
.source-cpp li, .source-cpp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for cpp
 * CSS class: source-cpp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-cpp .de1, .source-cpp .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-cpp  {}
.source-cpp .head {}
.source-cpp .foot {}
.source-cpp .imp {font-weight: bold; color: red;}
.source-cpp .ln-xtra {color: #cc0; background-color: #ffc;}
.source-cpp li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-cpp li.li2 {font-weight: bold;}
.source-cpp .kw1 {color: #0000ff;}
.source-cpp .kw2 {color: #0000ff;}
.source-cpp .kw3 {color: #0000dd;}
.source-cpp .kw4 {color: #0000ff;}
.source-cpp .co1 {color: #ff0000;}
.source-cpp .co2 {color: #339900;}
.source-cpp .coMULTI {color: #ff0000; font-style: italic;}
.source-cpp .es0 {color: #666666; font-weight: bold;}
.source-cpp .br0 {color: #000000;}
.source-cpp .st0 {color: #666666;}
.source-cpp .nu0 {color: #0000dd;}
.source-cpp .me1 {color: #00eeff;}
.source-cpp .me2 {color: #00eeff;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-csharp {line-height: normal;}
.source-csharp li, .source-csharp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for csharp
 * CSS class: source-csharp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-csharp .de1, .source-csharp .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-csharp  {}
.source-csharp .head {}
.source-csharp .foot {}
.source-csharp .imp {font-weight: bold; color: red;}
.source-csharp .ln-xtra {color: #cc0; background-color: #ffc;}
.source-csharp li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-csharp li.li2 {font-weight: bold;}
.source-csharp .kw1 {color: #0600FF;}
.source-csharp .kw2 {color: #FF8000; font-weight: bold;}
.source-csharp .kw3 {color: #008000;}
.source-csharp .kw4 {color: #FF0000;}
.source-csharp .kw5 {color: #000000;}
.source-csharp .co1 {color: #008080; font-style: italic;}
.source-csharp .co2 {color: #008080;}
.source-csharp .coMULTI {color: #008080; font-style: italic;}
.source-csharp .es0 {color: #008080; font-weight: bold;}
.source-csharp .br0 {color: #008000;}
.source-csharp .st0 {color: #808080;}
.source-csharp .nu0 {color: #FF0000;}
.source-csharp .me1 {color: #0000FF;}
.source-csharp .me2 {color: #0000FF;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style>		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Breadth-first_search skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Breadth-first search</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<table class="infobox" cellspacing="5" style="width: 22em; text-align: left; font-size: 88%; line-height: 1.5em; background:#fff6d9">
<caption class="" style="font-size: 125%; font-weight: bold;">Breadth-first search</caption>
<tr>
<td colspan="2" class="" style="text-align:center;">
<div class="floatnone"><a href="/wiki/File:Breadth-first-tree.svg" class="image" title="Order in which the nodes get expanded"><img alt="Order in which the nodes get expanded" src="http://upload.wikimedia.org/wikipedia/commons/thumb/3/33/Breadth-first-tree.svg/300px-Breadth-first-tree.svg.png" width="300" height="192" border="0" /></a></div>
<br />
<span style="">Order in which the nodes are expanded</span></td>
</tr>
<tr>
<th style="">Class</th>
<td class="" style=""><a href="/wiki/Search_Algorithm" title="Search Algorithm" class="mw-redirect">Search Algorithm</a></td>
</tr>
<tr>
<th style="">Data structure</th>
<td class="" style=""><a href="/wiki/Graph_(data_structure)" title="Graph (data structure)">Graph</a></td>
</tr>
<tr>
<th style="">Worst case performance</th>
<td class="" style=""><span class="texhtml"><i>O</i>( | <i>V</i> | + | <i>E</i> | ) = <i>O</i>(<i>b</i><sup><i>d</i></sup>)</span></td>
</tr>
<tr>
<th style="">Worst case space complexity</th>
<td class="" style=""><span class="texhtml"><i>O</i>( | <i>V</i> | + | <i>E</i> | ) = <i>O</i>(<i>b</i><sup><i>d</i></sup>)</span></td>
</tr>
<tr>
<th style="">Optimal</th>
<td class="" style="">yes (for unweighted graphs)</td>
</tr>
<tr>
<td style="text-align:right;" colspan="2">
<div class="noprint plainlinksneverexpand navbar" style="background:none; padding:0; font-weight:normal;; font-size:xx-small;">This box: <a href="/wiki/Template:Infobox_Algorithm" title="Template:Infobox Algorithm"><span title="View this template" style="">view</span></a>&#160;<span style="font-size:80%;">•</span>&#160;<a href="/wiki/Template_talk:Infobox_Algorithm" title="Template talk:Infobox Algorithm"><span title="Discussion about this template" style="">talk</span></a></div>
</td>
</tr>
</table>
<table align="right" class="toccolours" style="padding: 0px; width: 170px; margin: 0 0 1em 1em;">
<tr>
<th style="background: #ccf;"><a href="/wiki/Graph_traversal" title="Graph traversal">Graph search algorithms</a></th>
</tr>
<tr>
<td><b>Search</b>
<ul>
<li><a href="/wiki/A*_search_algorithm" title="A* search algorithm">A*</a></li>
<li><a href="/wiki/B*_search_algorithm" title="B* search algorithm">B*</a></li>
<li><a href="/wiki/Bellman-Ford_algorithm" title="Bellman-Ford algorithm">Bellman-Ford algorithm</a></li>
<li><a href="/wiki/Best-first_search" title="Best-first search">Best-first search</a></li>
<li><a href="/wiki/Bidirectional_search" title="Bidirectional search">Bidirectional search</a></li>
<li><strong class="selflink">Breadth-first search</strong></li>
<li><a href="/wiki/D*_search_algorithm" title="D* search algorithm">D*</a></li>
<li><a href="/wiki/Depth-first_search" title="Depth-first search">Depth-first search</a></li>
<li><a href="/wiki/Depth-limited_search" title="Depth-limited search">Depth-limited search</a></li>
<li><a href="/wiki/Dijkstra%27s_algorithm" title="Dijkstra's algorithm">Dijkstra's algorithm</a></li>
<li><a href="/wiki/Floyd%E2%80%93Warshall_algorithm" title="Floyd–Warshall algorithm">Floyd–Warshall algorithm</a></li>
<li><a href="/wiki/Hill_climbing" title="Hill climbing">Hill climbing</a></li>
<li><a href="/wiki/Iterative_deepening_depth-first_search" title="Iterative deepening depth-first search">Iterative deepening depth-first search</a></li>
<li><a href="/wiki/Johnson%27s_algorithm" title="Johnson's algorithm">Johnson's algorithm</a></li>
<li><a href="/wiki/Uniform-cost_search" title="Uniform-cost search">Uniform-cost search</a></li>
</ul>
</td>
</tr>
</table>
<p>In <a href="/wiki/Graph_theory" title="Graph theory">graph theory</a>, <b>breadth-first search</b> (<b>BFS</b>) is a <a href="/wiki/Graph_search_algorithm" title="Graph search algorithm" class="mw-redirect">graph search algorithm</a> that begins at the root <a href="/wiki/Node_(computer_science)" title="Node (computer science)">node</a> and explores all the neighboring nodes. Then for each of those nearest nodes, it explores their unexplored neighbor nodes, and so on, until it finds the goal.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#How_it_works"><span class="tocnumber">1</span> <span class="toctext">How it works</span></a></li>
<li class="toclevel-1"><a href="#Algorithm_.28informal.29"><span class="tocnumber">2</span> <span class="toctext">Algorithm (informal)</span></a></li>
<li class="toclevel-1"><a href="#Implementation"><span class="tocnumber">3</span> <span class="toctext">Implementation</span></a>
<ul>
<li class="toclevel-2"><a href="#Python"><span class="tocnumber">3.1</span> <span class="toctext">Python</span></a></li>
<li class="toclevel-2"><a href="#C"><span class="tocnumber">3.2</span> <span class="toctext">C</span></a></li>
<li class="toclevel-2"><a href="#C.2B.2B"><span class="tocnumber">3.3</span> <span class="toctext">C++</span></a></li>
<li class="toclevel-2"><a href="#C.23_and_Java"><span class="tocnumber">3.4</span> <span class="toctext">C# and Java</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Features"><span class="tocnumber">4</span> <span class="toctext">Features</span></a>
<ul>
<li class="toclevel-2"><a href="#Space_Complexity"><span class="tocnumber">4.1</span> <span class="toctext">Space Complexity</span></a></li>
<li class="toclevel-2"><a href="#Time_Complexity"><span class="tocnumber">4.2</span> <span class="toctext">Time Complexity</span></a></li>
<li class="toclevel-2"><a href="#Completeness"><span class="tocnumber">4.3</span> <span class="toctext">Completeness</span></a></li>
<li class="toclevel-2"><a href="#Optimality"><span class="tocnumber">4.4</span> <span class="toctext">Optimality</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Applications_of_BFS"><span class="tocnumber">5</span> <span class="toctext">Applications of BFS</span></a>
<ul>
<li class="toclevel-2"><a href="#Finding_connected_Components"><span class="tocnumber">5.1</span> <span class="toctext">Finding connected Components</span></a></li>
<li class="toclevel-2"><a href="#Testing_bipartiteness"><span class="tocnumber">5.2</span> <span class="toctext">Testing bipartiteness</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Literature"><span class="tocnumber">6</span> <span class="toctext">Literature</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">7</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="How_it_works" id="How_it_works"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Breadth-first_search&amp;action=edit&amp;section=1" title="Edit section: How it works">edit</a>]</span> <span class="mw-headline">How it works</span></h2>
<p>BFS is an <a href="/wiki/Uninformed_search" title="Uninformed search" class="mw-redirect">uninformed search</a> method that aims to expand and examine all nodes of a <a href="/wiki/Graph_(data_structure)" title="Graph (data structure)">graph</a> or combinations of sequence by systematically searching through every solution. In other words, it exhaustively searches the entire graph or sequence without considering the goal until it finds it. It does not use a <a href="/wiki/Heuristic_(computer_science)" title="Heuristic (computer science)" class="mw-redirect">heuristic</a>.</p>
<p>From the standpoint of the <a href="/wiki/Algorithm" title="Algorithm">algorithm</a>, all child nodes obtained by expanding a node are added to a <a href="/wiki/FIFO" title="FIFO" class="mw-redirect">FIFO</a> <a href="/wiki/Queue_(data_structure)" title="Queue (data structure)">queue</a>. In typical implementations, nodes that have not yet been examined for their neighbors are placed in some container (such as a queue or <a href="/wiki/Linked_list" title="Linked list">linked list</a>) called "open" and then once examined are placed in the container "closed".</p>
<table>
<tr>
<td>
<div class="thumb tleft">
<div class="thumbinner" style="width:252px;"><a href="/wiki/File:MapGermanyGraph.svg" class="image" title="An example map of Germany with some connections between cities."><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/a/ad/MapGermanyGraph.svg/250px-MapGermanyGraph.svg.png" width="250" height="252" border="0" class="thumbimage" /></a>
<div class="thumbcaption">
<div class="magnify"><a href="/wiki/File:MapGermanyGraph.svg" class="internal" title="Enlarge"><img src="/skins-1.5/common/images/magnify-clip.png" width="15" height="11" alt="" /></a></div>
An example map of <a href="/wiki/Germany" title="Germany">Germany</a> with some connections between cities.</div>
</div>
</div>
</td>
<td>
<div class="center">
<div class="thumb tnone">
<div class="thumbinner" style="width:252px;"><a href="/wiki/File:GermanyBFS.svg" class="image" title="The breadth-first tree obtained when running BFS on the given map and starting in Frankfurt."><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/6/63/GermanyBFS.svg/250px-GermanyBFS.svg.png" width="250" height="179" border="0" class="thumbimage" /></a>
<div class="thumbcaption">
<div class="magnify"><a href="/wiki/File:GermanyBFS.svg" class="internal" title="Enlarge"><img src="/skins-1.5/common/images/magnify-clip.png" width="15" height="11" alt="" /></a></div>
The breadth-first tree obtained when running BFS on the given map and starting in <a href="/wiki/Frankfurt" title="Frankfurt" class="mw-redirect">Frankfurt</a>.</div>
</div>
</div>
</div>
</td>
<td>
<div class="thumb tright">
<div class="thumbinner" style="width:189px;"><a href="/wiki/File:Animated_BFS.gif" class="image" title="Animated example of a breadth-first search"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/4/46/Animated_BFS.gif" width="187" height="175" border="0" class="thumbimage" /></a>
<div class="thumbcaption">
<div class="magnify"><a href="/wiki/File:Animated_BFS.gif" class="internal" title="Enlarge"><img src="/skins-1.5/common/images/magnify-clip.png" width="15" height="11" alt="" /></a></div>
Animated example of a breadth-first search</div>
</div>
</div>
</td>
</tr>
</table>
<p><a name="Algorithm_.28informal.29" id="Algorithm_.28informal.29"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Breadth-first_search&amp;action=edit&amp;section=2" title="Edit section: Algorithm (informal)">edit</a>]</span> <span class="mw-headline">Algorithm (informal)</span></h2>
<ol>
<li>Enqueue the root node.</li>
<li>Dequeue a node and examine it.
<ul>
<li>If the element sought is found in this node, quit the search and return a result.</li>
<li>Otherwise enqueue any successors (the direct child nodes) that have not yet been examined.</li>
</ul>
</li>
<li>If the queue is empty, every node on the graph has been examined -- quit the search and return "not found".</li>
<li>Repeat from Step 2.</li>
</ol>
<p><b>Note</b>: Using a stack instead of a queue to store the nodes yet to be visited would turn this algorithm into a <a href="/wiki/Depth-first_search" title="Depth-first search">depth-first search</a>.</p>
<p><a name="Implementation" id="Implementation"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Breadth-first_search&amp;action=edit&amp;section=3" title="Edit section: Implementation">edit</a>]</span> <span class="mw-headline">Implementation</span></h2>
<p><a name="Python" id="Python"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Breadth-first_search&amp;action=edit&amp;section=4" title="Edit section: Python">edit</a>]</span> <span class="mw-headline">Python</span></h3>
<p>Assume we have a graph made up of Node objects, each containing a value and a list of child Node objects:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-python">
<span class="kw1">class</span> Node:
    <span class="st0">""</span><span class="st0">"Simple structure for nodes in a graph."</span><span class="st0">""</span>
    <span class="kw1">def</span> <span class="kw4">__init__</span><span class="br0">(</span><span class="kw2">self</span>, value, neighbors = <span class="kw2">None</span><span class="br0">)</span>:
        <span class="kw1">if</span> neighbors <span class="kw1">is</span> <span class="kw2">None</span>: neighbors = <span class="br0">[</span><span class="br0">]</span>
        <span class="kw2">self</span>.<span class="me1">value</span> = value
        <span class="kw2">self</span>.<span class="me1">neighbors</span> = neighbors
</pre></div>
<p>Then this function performs a breadth-first search on that graph whenIn graph theory, breadth-first search (BFS) is a graph search algorithm that begins at the root node and explores all the neighboring nodes. Then for each of those nearest nodes, it explores their unexplored neighbor nodes, and so on, until it finds the goal.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-python">
<span class="kw1">from</span> <span class="kw3">collections</span> <span class="kw1">import</span> deque
<span class="kw1">def</span> bfs<span class="br0">(</span>top_node,
        visit_function = <span class="kw1">lambda</span> x: <span class="kw2">None</span>,
        visited = <span class="kw2">None</span><span class="br0">)</span>:
    <span class="st0">""</span><span class="st0">"Breadth-first search on a graph, starting at top_node.
    Given the graph's root node (a Node instance) and a function
    to apply to each node in the graph.
    "</span><span class="st0">""</span>
    <span class="kw1">if</span> visited <span class="kw1">is</span> <span class="kw2">None</span>: visited = <span class="kw2">set</span><span class="br0">(</span><span class="br0">)</span>
    queue = deque<span class="br0">(</span><span class="br0">[</span>top_node<span class="br0">]</span><span class="br0">)</span>
    <span class="kw1">while</span> queue:
        curr_node = queue.<span class="me1">popleft</span><span class="br0">(</span><span class="br0">)</span>          <span class="co1"># Dequeue</span>
        <span class="kw1">if</span> curr_node <span class="kw1">not</span> <span class="kw1">in</span> visited:         <span class="co1"># Skip visited nodes</span>
            visit_function<span class="br0">(</span>curr_node<span class="br0">)</span>        <span class="co1"># Visit the node</span>
            visited.<span class="me1">add</span><span class="br0">(</span>curr_node<span class="br0">)</span>
            queue.<span class="me1">extend</span><span class="br0">(</span>curr_node.<span class="me1">neighbors</span><span class="br0">)</span> <span class="co1"># Enqueue the neighbors</span>
</pre></div>
<p>For example, this script finds the sum of the integer values of each node in the graph:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-python">
<span class="co1"># Build an example graph</span>
the_graph = Node<span class="br0">(</span><span class="nu0">1</span>, <span class="br0">[</span>Node<span class="br0">(</span><span class="nu0">1</span>, <span class="br0">[</span>Node<span class="br0">(</span><span class="nu0">2</span><span class="br0">)</span>, Node<span class="br0">(</span><span class="nu0">3</span><span class="br0">)</span><span class="br0">]</span><span class="br0">)</span>,
                     Node<span class="br0">(</span><span class="nu0">5</span>, <span class="br0">[</span>Node<span class="br0">(</span><span class="nu0">8</span>, <span class="br0">[</span>Node<span class="br0">(</span><span class="nu0">13</span><span class="br0">)</span><span class="br0">]</span><span class="br0">)</span>,
                              Node<span class="br0">(</span><span class="nu0">21</span>, <span class="br0">[</span>Node<span class="br0">(</span><span class="nu0">34</span><span class="br0">)</span>, Node<span class="br0">(</span><span class="nu0">55</span><span class="br0">)</span><span class="br0">]</span><span class="br0">)</span><span class="br0">]</span><span class="br0">)</span><span class="br0">]</span><span class="br0">)</span>
 
<span class="co1"># Define a "visit" function</span>
total = <span class="nu0">0</span>
<span class="kw1">def</span> sum_graph<span class="br0">(</span>node<span class="br0">)</span>:
    <span class="kw1">global</span> total
    total += node.<span class="me1">value</span>
 
<span class="co1"># Visit the whole graph</span>
bfs<span class="br0">(</span>the_graph, sum_graph<span class="br0">)</span>
<span class="kw1">print</span> total
</pre></div>
<p><a name="C" id="C"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Breadth-first_search&amp;action=edit&amp;section=5" title="Edit section: C">edit</a>]</span> <span class="mw-headline">C</span></h3>
<p>Algorithm of Breadth-first search：</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
 <span class="kw4">void</span> BFS<span class="br0">(</span>VLink G<span class="br0">[</span><span class="br0">]</span>, <span class="kw4">int</span> v<span class="br0">)</span> <span class="br0">{</span> 
   <span class="kw4">int</span> w;
   VISIT<span class="br0">(</span>v<span class="br0">)</span>;                    <span class="coMULTI">/*visit vertex v*/</span>
   visited<span class="br0">[</span>v<span class="br0">]</span> = <span class="nu0">1</span>;              <span class="coMULTI">/*mark v as visited : 1 */</span>
   ADDQ<span class="br0">(</span>Q,v<span class="br0">)</span>;
   <span class="kw1">while</span><span class="br0">(</span>!EMPTYQ<span class="br0">(</span>Q<span class="br0">)</span><span class="br0">)</span> <span class="br0">{</span> 
     v = DELQ<span class="br0">(</span>Q<span class="br0">)</span>;               <span class="coMULTI">/*Dequeue v*/</span>
     w = FIRSTADJ<span class="br0">(</span>G,v<span class="br0">)</span>;         <span class="coMULTI">/*Find first neighbor, return -1 if no neighbor*/</span>
     <span class="kw1">while</span><span class="br0">(</span>w != <span class="nu0">-1</span><span class="br0">)</span> <span class="br0">{</span> 
       <span class="kw1">if</span><span class="br0">(</span>visited<span class="br0">[</span>w<span class="br0">]</span> == <span class="nu0">0</span><span class="br0">)</span> <span class="br0">{</span> 
         VISIT<span class="br0">(</span>w<span class="br0">)</span>;              <span class="coMULTI">/*visit vertex w*/</span>
         ADDQ<span class="br0">(</span>Q,w<span class="br0">)</span>;             <span class="coMULTI">/*Enqueue current visited vertex w*/</span>
         visited<span class="br0">[</span>w<span class="br0">]</span> = <span class="nu0">1</span>;        <span class="coMULTI">/*mark w as visited*/</span>
       <span class="br0">}</span>
       w = NEXTADJ<span class="br0">(</span>G,v<span class="br0">)</span>;        <span class="coMULTI">/*Find next neighbor, return -1 if no neighbor*/</span>
     <span class="br0">}</span>
   <span class="br0">}</span>  
 <span class="br0">}</span>
</pre></div>
<p>Main Algorithm of apply Breadth-first search to graph G=(V,E)：</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
 <span class="kw4">void</span> TRAVEL_BFS<span class="br0">(</span>VLink G<span class="br0">[</span><span class="br0">]</span>, <span class="kw4">int</span> visited<span class="br0">[</span><span class="br0">]</span>, <span class="kw4">int</span> n<span class="br0">)</span> <span class="br0">{</span> 
   <span class="kw4">int</span> i;
   <span class="kw1">for</span><span class="br0">(</span>i = <span class="nu0">0</span>; i &lt; n; i ++<span class="br0">)</span> <span class="br0">{</span>
     visited<span class="br0">[</span>i<span class="br0">]</span> = <span class="nu0">0</span>;            <span class="coMULTI">/* Mark initial value as 0 */</span>
   <span class="br0">}</span>
   <span class="kw1">for</span><span class="br0">(</span>i = <span class="nu0">0</span>; i &lt; n; i ++<span class="br0">)</span>
     <span class="kw1">if</span><span class="br0">(</span>visited<span class="br0">[</span>i<span class="br0">]</span> == <span class="nu0">0</span><span class="br0">)</span>
       BFS<span class="br0">(</span>G,i<span class="br0">)</span>;
 <span class="br0">}</span>
</pre></div>
<p><a name="C.2B.2B" id="C.2B.2B"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Breadth-first_search&amp;action=edit&amp;section=6" title="Edit section: C++">edit</a>]</span> <span class="mw-headline">C++</span></h3>
<p>This is the implementation of the above informal algorithm, where the "so-far-unexamined" is handled by the parent array. For actual C++ applications, see the <a href="/wiki/Boost_Graph_Library" title="Boost Graph Library" class="mw-redirect">Boost Graph Library</a>.</p>
<dl>
<dd>Suppose we have a struct:</dd>
</dl>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
<span class="kw4">struct</span> Vertex <span class="br0">{</span>
 	<span class="coMULTI">/* Some code */</span>
 	std::<span class="me2">vector</span>&lt;int&gt; out;
 	<span class="coMULTI">/* Some more code */</span>
 <span class="br0">}</span>;
</pre></div>
<dl>
<dd>and an array of vertices: (the algorithm will use the indices of this array, to handle the vertices)</dd>
</dl>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
std::<span class="me2">vector</span>&lt;Vertex&gt; graph<span class="br0">(</span>vertices<span class="br0">)</span>;
</pre></div>
<dl>
<dd>the algorithm starts from <b>start</b> and returns true if there is a directed path from <b>start</b> to <b>end</b>:</dd>
</dl>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
 <span class="kw4">bool</span> BFS<span class="br0">(</span><span class="kw4">const</span> std::<span class="me2">vector</span>&lt;Vertex&gt;&amp; graph, <span class="kw4">int</span> start, <span class="kw4">int</span> end<span class="br0">)</span> <span class="br0">{</span>
   std::<span class="me2">queue</span>&lt;int&gt; next;
   std::<span class="me2">vector</span>&lt;int&gt; parent<span class="br0">(</span>graph.<span class="me1">size</span><span class="br0">(</span><span class="br0">)</span>, <span class="nu0">-1</span><span class="br0">)</span> ;
   next.<span class="me1">push</span><span class="br0">(</span>start<span class="br0">)</span>;
   parent<span class="br0">[</span>start<span class="br0">]</span> = start;
   <span class="kw1">while</span> <span class="br0">(</span>!next.<span class="me1">empty</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span> <span class="br0">{</span>
     <span class="kw4">int</span> u = next.<span class="me1">front</span><span class="br0">(</span><span class="br0">)</span>;
     next.<span class="me1">pop</span><span class="br0">(</span><span class="br0">)</span>;
     <span class="co1">// Here is the point where you can examine the u th vertex of graph</span>
     <span class="co1">// For example:</span>
     <span class="kw1">if</span> <span class="br0">(</span>u == end<span class="br0">)</span> <span class="kw1">return</span> <span class="kw2">true</span>;
     <span class="kw1">for</span> <span class="br0">(</span>std::<span class="me2">vector</span>&lt;int&gt;::<span class="me2">const_iterator</span> j = graph<span class="br0">[</span>u<span class="br0">]</span>.<span class="me1">out</span>.<span class="me1">begin</span><span class="br0">(</span><span class="br0">)</span>; j != graph<span class="br0">[</span>u<span class="br0">]</span>.<span class="me1">out</span>.<span class="me1">end</span><span class="br0">(</span><span class="br0">)</span>; ++j<span class="br0">)</span> <span class="br0">{</span>
       <span class="co1">// Look through neighbors.</span>
       <span class="kw4">int</span> v = *j;
       <span class="kw1">if</span> <span class="br0">(</span>parent<span class="br0">[</span>v<span class="br0">]</span> == <span class="nu0">-1</span><span class="br0">)</span> <span class="br0">{</span>
         <span class="co1">// If v is unvisited.</span>
         parent<span class="br0">[</span>v<span class="br0">]</span> = u;
         next.<span class="me1">push</span><span class="br0">(</span>v<span class="br0">)</span>;
       <span class="br0">}</span>
     <span class="br0">}</span>
   <span class="br0">}</span>
   <span class="kw1">return</span> <span class="kw2">false</span>;
 <span class="br0">}</span>
</pre></div>
<dl>
<dd>it also stores the parents of each node, from which you can get the path.</dd>
</dl>
<p><a name="C.23_and_Java" id="C.23_and_Java"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Breadth-first_search&amp;action=edit&amp;section=7" title="Edit section: C# and Java">edit</a>]</span> <span class="mw-headline">C# and Java</span></h3>
<div dir="ltr" style="text-align: left;">
<pre class="source-csharp">
<span class="kw4">class</span> Node <span class="br0">{</span>
 
	Node<span class="br0">[</span><span class="br0">]</span> Children;
 
<span class="br0">}</span>
 
<span class="co1">/// &lt;summary&gt;Prints out all the children of graph fragment &lt;paramref name="n" /&gt; to Console in breadth-first order&lt;/summary&gt;</span>
<span class="kw1">public</span> <span class="kw1">static</span> <span class="kw1">void</span> BreadthFirstSearch<span class="br0">(</span>Node n<span class="br0">)</span> <span class="br0">{</span>
 
	<span class="co1">// 'Queue' can be any Queue-like structure that implements Enqueue, Dequeue, and exposes a Count (Length) property</span>
	Queue q = <span class="kw3">new</span> Queue<span class="br0">(</span><span class="br0">)</span>;
	q.<span class="me1">Enqueue</span><span class="br0">(</span> n <span class="br0">)</span>;
 
	<span class="kw1">while</span><span class="br0">(</span> q.<span class="me1">Count</span> &gt; <span class="nu0">0</span> <span class="br0">)</span> <span class="br0">{</span>
		Node m = q.<span class="me1">Dequeue</span><span class="br0">(</span><span class="br0">)</span>;
 
		<span class="co1">// Perform task on m here. For example, printing it out to the console:</span>
		Console.<span class="me1">WriteLine</span><span class="br0">(</span> m + <span class="st0">", "</span> <span class="br0">)</span>;
 
		<span class="kw1">foreach</span><span class="br0">(</span>Node child <span class="kw1">in</span> m.<span class="me1">Children</span><span class="br0">)</span> <span class="br0">{</span>
			q.<span class="me1">Enqueue</span><span class="br0">(</span> child <span class="br0">)</span>;
		<span class="br0">}</span>
	<span class="br0">}</span>
 
<span class="br0">}</span>
</pre></div>
<p><br /></p>
<p><a name="Features" id="Features"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Breadth-first_search&amp;action=edit&amp;section=8" title="Edit section: Features">edit</a>]</span> <span class="mw-headline">Features</span></h2>
<table align="right" class="toccolours" style="padding: 0px; width: 170px; margin: 0 0 1em 1em;">
<tr>
<th style="background: #ccf;"><a href="/wiki/Graph_traversal" title="Graph traversal">Graph search algorithms</a></th>
</tr>
<tr>
<td><b>Search</b>
<ul>
<li><a href="/wiki/A*_search_algorithm" title="A* search algorithm">A*</a></li>
<li><a href="/wiki/B*_search_algorithm" title="B* search algorithm">B*</a></li>
<li><a href="/wiki/Bellman-Ford_algorithm" title="Bellman-Ford algorithm">Bellman-Ford algorithm</a></li>
<li><a href="/wiki/Best-first_search" title="Best-first search">Best-first search</a></li>
<li><a href="/wiki/Bidirectional_search" title="Bidirectional search">Bidirectional search</a></li>
<li><strong class="selflink">Breadth-first search</strong></li>
<li><a href="/wiki/D*_search_algorithm" title="D* search algorithm">D*</a></li>
<li><a href="/wiki/Depth-first_search" title="Depth-first search">Depth-first search</a></li>
<li><a href="/wiki/Depth-limited_search" title="Depth-limited search">Depth-limited search</a></li>
<li><a href="/wiki/Dijkstra%27s_algorithm" title="Dijkstra's algorithm">Dijkstra's algorithm</a></li>
<li><a href="/wiki/Floyd%E2%80%93Warshall_algorithm" title="Floyd–Warshall algorithm">Floyd–Warshall algorithm</a></li>
<li><a href="/wiki/Hill_climbing" title="Hill climbing">Hill climbing</a></li>
<li><a href="/wiki/Iterative_deepening_depth-first_search" title="Iterative deepening depth-first search">Iterative deepening depth-first search</a></li>
<li><a href="/wiki/Johnson%27s_algorithm" title="Johnson's algorithm">Johnson's algorithm</a></li>
<li><a href="/wiki/Uniform-cost_search" title="Uniform-cost search">Uniform-cost search</a></li>
</ul>
</td>
</tr>
</table>
<p><a name="Space_Complexity" id="Space_Complexity"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Breadth-first_search&amp;action=edit&amp;section=9" title="Edit section: Space Complexity">edit</a>]</span> <span class="mw-headline">Space Complexity</span></h3>
<p>Since all of the nodes of a level must be saved until their child nodes in the next level have been generated, the space complexity is proportional to the number of nodes at the deepest level. Given a <a href="/wiki/Branching_factor" title="Branching factor">branching factor</a> <span class="texhtml"><i>b</i></span> and graph depth <span class="texhtml"><i>d</i></span> the asymptotic space complexity is the number of nodes at the deepest level, <span class="texhtml"><i>O</i>(<i>b</i><sup><i>d</i></sup>)</span>. When the number of vertices and edges in the graph are known ahead of time, the space complexity can also be expressed as <span class="texhtml"><i>O</i>( | <i>E</i> | + | <i>V</i> | )</span> where <span class="texhtml">| <i>E</i> |</span> is the <a href="/wiki/Cardinality" title="Cardinality">cardinality</a> of the set of edges (the number of edges), and <span class="texhtml">| <i>V</i> |</span> is the cardinality of the set of vertices. In the worst case the graph has a depth of 1 and all vertices must be stored. Since it is exponential in the depth of the graph, breadth-first search is often impractical for large problems on systems with bounded space.</p>
<p><a name="Time_Complexity" id="Time_Complexity"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Breadth-first_search&amp;action=edit&amp;section=10" title="Edit section: Time Complexity">edit</a>]</span> <span class="mw-headline">Time Complexity</span></h3>
<p>Since in the worst case breadth-first search has to consider all paths to all possible nodes the time complexity of breadth-first search is <span class="texhtml"><i>b</i> + <i>b</i><sup>2</sup> + <i>b</i><sup>3</sup> + ... + <i>b</i><sup><i>d</i></sup></span> which asymptotically approaches <span class="texhtml"><i>O</i>(<i>b</i><sup><i>d</i></sup>)</span>. The time complexity can also be expressed as <span class="texhtml"><i>O</i>( | <i>E</i> | + | <i>V</i> | )</span> since every vertex and every edge will be explored in the worst case.</p>
<p><a name="Completeness" id="Completeness"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Breadth-first_search&amp;action=edit&amp;section=11" title="Edit section: Completeness">edit</a>]</span> <span class="mw-headline">Completeness</span></h3>
<p>Breadth-first search is complete. This means that if there is a solution breadth-first search will find it regardless of the kind of graph. However, if the graph is infinite and there is no solution breadth-first search will diverge.</p>
<p><a name="Optimality" id="Optimality"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Breadth-first_search&amp;action=edit&amp;section=12" title="Edit section: Optimality">edit</a>]</span> <span class="mw-headline">Optimality</span></h3>
<p>For unit-step cost, breadth-first search is optimal. In general breadth-first search is not optimal since it always returns the result with the fewest edges between the start node and the goal node. If the graph is a weighted graph, and therefore has costs associated with each step, a goal next to the start does not have to be the cheapest goal available. This problem is solved by improving breadth-first search to <a href="/wiki/Uniform-cost_search" title="Uniform-cost search">uniform-cost search</a> which considers the path costs. Nevertheless, if the graph is not weighted, and therefore all step costs are equal, breadth-first search will find the nearest and the best solution.</p>
<p><a name="Applications_of_BFS" id="Applications_of_BFS"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Breadth-first_search&amp;action=edit&amp;section=13" title="Edit section: Applications of BFS">edit</a>]</span> <span class="mw-headline">Applications of BFS</span></h2>
<p>Breadth-first search can be used to solve many problems in graph theory, for example:</p>
<ul>
<li>Finding all <a href="/wiki/Connected_component_(graph_theory)" title="Connected component (graph theory)">connected components</a> in a <a href="/wiki/Graph_(data_structure)" title="Graph (data structure)">graph</a>.</li>
<li>Finding all nodes within one connected component</li>
<li>Copying Collection, <a href="/wiki/Cheney%27s_algorithm" title="Cheney's algorithm">Cheney's algorithm</a></li>
<li>Finding the <a href="/wiki/Shortest_path" title="Shortest path" class="mw-redirect">shortest path</a> between two nodes <i>u</i> and <i>v</i> (in an <a href="/wiki/Unweighted_graph" title="Unweighted graph" class="mw-redirect">unweighted graph</a>)</li>
<li>Finding the <a href="/wiki/Shortest_path" title="Shortest path" class="mw-redirect">shortest path</a> between two nodes <i>u</i> and <i>v</i> (in a <a href="/wiki/Weighted_graph" title="Weighted graph" class="mw-redirect">weighted graph</a>: see talk page)</li>
<li>Testing a graph for <a href="/wiki/Bipartite_graph" title="Bipartite graph">bipartiteness</a></li>
<li><a href="/wiki/Cuthill%E2%80%93McKee_algorithm" title="Cuthill–McKee algorithm">(Reverse) Cuthill–McKee</a> mesh numbering</li>
</ul>
<p><a name="Finding_connected_Components" id="Finding_connected_Components"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Breadth-first_search&amp;action=edit&amp;section=14" title="Edit section: Finding connected Components">edit</a>]</span> <span class="mw-headline">Finding connected Components</span></h3>
<p>The set of nodes reached by a BFS (breadth-first search) form the largest connected component containing the starting node.</p>
<p><a name="Testing_bipartiteness" id="Testing_bipartiteness"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Breadth-first_search&amp;action=edit&amp;section=15" title="Edit section: Testing bipartiteness">edit</a>]</span> <span class="mw-headline">Testing bipartiteness</span></h3>
<p>BFS can be used to test bipartiteness, by starting the search at any vertex and giving alternating labels to the vertices visited during the search. That is, give label 0 to the starting vertex, 1 to all its neighbours, 0 to those neighbours' neighbours, and so on. If at any step a vertex has (visited) neighbours with the same label as itself, then the graph is not bipartite. If the search ends without such a situation occurring, then the graph is bipartite.</p>
<p><a name="Literature" id="Literature"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Breadth-first_search&amp;action=edit&amp;section=16" title="Edit section: Literature">edit</a>]</span> <span class="mw-headline">Literature</span></h2>
<p><cite style="font-style:normal" class="" id="CITEREFKnuth1997">Knuth, Donald E. (1997), <i><a href="http://www-cs-faculty.stanford.edu/~knuth/taocp.html" class="external text" title="http://www-cs-faculty.stanford.edu/~knuth/taocp.html" rel="nofollow">The Art Of Computer Programming Vol 1. 3rd ed.</a></i>, Boston: Addison-Wesley, <a href="/wiki/Special:BookSources/0201896834" class="internal">ISBN 0-201-89683-4</a><span class="printonly">, <a href="http://www-cs-faculty.stanford.edu/~knuth/taocp.html" class="external free" title="http://www-cs-faculty.stanford.edu/~knuth/taocp.html" rel="nofollow">http://www-cs-faculty.stanford.edu/~knuth/taocp.html</a></span></cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=The+Art+Of+Computer+Programming+Vol+1.++3rd+ed.&amp;rft.aulast=Knuth&amp;rft.aufirst=Donald+E.&amp;rft.au=Knuth%2C+Donald+E.&amp;rft.date=1997&amp;rft.place=Boston&amp;rft.pub=Addison-Wesley&amp;rft.isbn=0-201-89683-4&amp;rft_id=http%3A%2F%2Fwww-cs-faculty.stanford.edu%2F%7Eknuth%2Ftaocp.html&amp;rfr_id=info:sid/en.wikipedia.org:Breadth-first_search"><span style="display: none;">&#160;</span></span></p>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Breadth-first_search&amp;action=edit&amp;section=17" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<table class="metadata plainlinks ambox ambox-style" style="">
<tr>
<td class="mbox-image">
<div style="width: 52px;"><a href="/wiki/File:Ambox_style.png" class="image" title="Ambox style.png"><img alt="" src="http://upload.wikimedia.org/wikipedia/en/d/d6/Ambox_style.png" width="40" height="40" border="0" /></a></div>
</td>
<td class="mbox-text" style="">This article's <a href="/wiki/Wikipedia:External_links" title="Wikipedia:External links">external links</a> <b>may not follow Wikipedia's <a href="/wiki/Wikipedia:What_Wikipedia_is_not#Wikipedia_is_not_a_mirror_or_a_repository_of_links.2C_images.2C_or_media_files" title="Wikipedia:What Wikipedia is not">content policies</a> or <a href="/wiki/Wikipedia:External_links" title="Wikipedia:External links">guidelines</a></b>. Please <a href="http://en.wikipedia.org/w/index.php?title=Breadth-first_search&amp;action=edit" class="external text" title="http://en.wikipedia.org/w/index.php?title=Breadth-first_search&amp;action=edit" rel="nofollow">improve this article</a> by removing excessive or inappropriate external links.</td>
</tr>
</table>
<ul>
<li><a href="http://www.martienus.com/code/t-sql-breadth-first-shortest-route-search.html" class="external text" title="http://www.martienus.com/code/t-sql-breadth-first-shortest-route-search.html" rel="nofollow">Breadth-First shortest-route search implemented in T-SQL by Martin Withaar</a></li>
</ul>


<!-- 
NewPP limit report
Preprocessor node count: 1608/1000000
Post-expand include size: 14450/2048000 bytes
Template argument size: 3371/2048000 bytes
Expensive parser function count: 0/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:97026-0!1!0!default!!en!2 and timestamp 20090403231314 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Breadth-first_search">http://en.wikipedia.org/wiki/Breadth-first_search</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Graph_algorithms" title="Category:Graph algorithms">Graph algorithms</a></span> | <span dir='ltr'><a href="/wiki/Category:Search_algorithms" title="Category:Search algorithms">Search algorithms</a></span></div><div id="mw-hidden-catlinks" class="mw-hidden-cats-hidden">Hidden categories:&#32;<span dir='ltr'><a href="/wiki/Category:Wikipedia_external_links_cleanup" title="Category:Wikipedia external links cleanup">Wikipedia external links cleanup</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Breadth-first_search" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Breadth-first_search" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Breadth-first_search&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Breadth-first_search&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Breadth-first_search" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Breadth-first_search" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Breadth-first_search" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Breadth-first_search&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Breadth-first_search&amp;oldid=279189359" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Breadth-first_search&amp;id=279189359">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-cs"><a href="http://cs.wikipedia.org/wiki/Prohled%C3%A1v%C3%A1n%C3%AD_do_%C5%A1%C3%AD%C5%99ky">Česky</a></li>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/Breitensuche">Deutsch</a></li>
				<li class="interwiki-es"><a href="http://es.wikipedia.org/wiki/B%C3%BAsqueda_en_anchura">Español</a></li>
				<li class="interwiki-fa"><a href="http://fa.wikipedia.org/wiki/%D8%AC%D8%B3%D8%AA%D8%AC%D9%88%DB%8C_%D8%B3%D8%B7%D8%AD_%D8%A7%D9%88%D9%84">فارسی</a></li>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Algorithme_de_parcours_en_largeur">Français</a></li>
				<li class="interwiki-it"><a href="http://it.wikipedia.org/wiki/Breadth-first_search">Italiano</a></li>
				<li class="interwiki-he"><a href="http://he.wikipedia.org/wiki/%D7%90%D7%9C%D7%92%D7%95%D7%A8%D7%99%D7%AA%D7%9D_%D7%97%D7%99%D7%A4%D7%95%D7%A9_%D7%9C%D7%A8%D7%95%D7%97%D7%91">עברית</a></li>
				<li class="interwiki-lt"><a href="http://lt.wikipedia.org/wiki/Paie%C5%A1ka_%C4%AF_plot%C4%AF">Lietuvių</a></li>
				<li class="interwiki-nl"><a href="http://nl.wikipedia.org/wiki/Breedte-eerst_zoeken">Nederlands</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/%E5%B9%85%E5%84%AA%E5%85%88%E6%8E%A2%E7%B4%A2">日本語</a></li>
				<li class="interwiki-pl"><a href="http://pl.wikipedia.org/wiki/Przeszukiwanie_wszerz">Polski</a></li>
				<li class="interwiki-pt"><a href="http://pt.wikipedia.org/wiki/Busca_em_largura">Português</a></li>
				<li class="interwiki-ru"><a href="http://ru.wikipedia.org/wiki/%D0%9F%D0%BE%D0%B8%D1%81%D0%BA_%D0%B2_%D1%88%D0%B8%D1%80%D0%B8%D0%BD%D1%83">Русский</a></li>
				<li class="interwiki-uk"><a href="http://uk.wikipedia.org/wiki/%D0%9F%D0%BE%D1%88%D1%83%D0%BA_%D1%83_%D1%88%D0%B8%D1%80%D0%B8%D0%BD%D1%83">Українська</a></li>
				<li class="interwiki-zh"><a href="http://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2">中文</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 23 March 2009, at 17:39.</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv220 in 0.050 secs. --></body></html>
