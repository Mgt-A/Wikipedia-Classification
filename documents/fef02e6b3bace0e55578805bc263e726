<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Lisp (programming language),Articles with unsourced statements since March 2009,Articles with unsourced statements since November 2008,Lisp programming language family,Special:Search/Lisp (programming language),2002,2008,ACL2,AI,AI winter,ALGOL" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Lisp_(programming_language)&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Lisp_(programming_language)&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Lisp (programming language) - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Lisp_(programming_language)";
		var wgTitle = "Lisp (programming language)";
		var wgAction = "view";
		var wgArticleId = "18016";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281417905;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
<style type="text/css">/*<![CDATA[*/
.source-lisp {line-height: normal;}
.source-lisp li, .source-lisp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for lisp
 * CSS class: source-lisp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-lisp .de1, .source-lisp .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-lisp  {}
.source-lisp .head {}
.source-lisp .foot {}
.source-lisp .imp {font-weight: bold; color: red;}
.source-lisp .ln-xtra {color: #cc0; background-color: #ffc;}
.source-lisp li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-lisp li.li2 {font-weight: bold;}
.source-lisp .kw1 {color: #b1b100;}
.source-lisp .co1 {color: #808080; font-style: italic;}
.source-lisp .coMULTI {color: #808080; font-style: italic;}
.source-lisp .es0 {color: #000099; font-weight: bold;}
.source-lisp .br0 {color: #66cc66;}
.source-lisp .st0 {color: #ff0000;}
.source-lisp .nu0 {color: #cc66cc;}
.source-lisp .me0 {color: #555;}
.source-lisp .me1 {color: #555;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style>		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Lisp_programming_language skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Lisp (programming language)</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<table class="infobox vevent" cellspacing="5" style="width: 22em; text-align: left; font-size: 88%; line-height: 1.5em;">
<caption class="summary" style="font-size: 125%; font-weight: bold;">Lisp</caption>
<tr>
<th style=""><a href="/wiki/Programming_paradigm" title="Programming paradigm">Paradigm</a></th>
<td class="" style=""><a href="/wiki/Multi-paradigm_programming_language" title="Multi-paradigm programming language">multi-paradigm</a>: <a href="/wiki/Functional_programming" title="Functional programming">functional</a>, <a href="/wiki/Procedural_programming" title="Procedural programming">procedural</a>, <a href="/wiki/Reflection_(computer_science)" title="Reflection (computer science)">reflective</a></td>
</tr>
<tr>
<th style="">Appeared in</th>
<td class="" style="">1958</td>
</tr>
<tr>
<th style="">Designed by</th>
<td class="organiser" style=""><a href="/wiki/John_McCarthy_(computer_scientist)" title="John McCarthy (computer scientist)">John McCarthy</a></td>
</tr>
<tr>
<th style=""><a href="/wiki/Software_developer" title="Software developer">Developer</a></th>
<td class="" style=""><a href="/wiki/Steve_Russell" title="Steve Russell">Steve Russell</a>, <a href="/w/index.php?title=Timothy_P._Hart&amp;action=edit&amp;redlink=1" class="new" title="Timothy P. Hart (page does not exist)">Timothy P. Hart</a>, and <a href="/w/index.php?title=Mike_Levin&amp;action=edit&amp;redlink=1" class="new" title="Mike Levin (page does not exist)">Mike Levin</a></td>
</tr>
<tr>
<th style=""><a href="/wiki/Type_system" title="Type system">Typing discipline</a></th>
<td class="" style=""><a href="/wiki/Type_system" title="Type system">dynamic</a>, <a href="/wiki/Strongly-typed_programming_language" title="Strongly-typed programming language">strong</a></td>
</tr>
<tr>
<th style=""><a href="/wiki/Programming_language_dialect" title="Programming language dialect" class="mw-redirect">Dialects</a></th>
<td class="" style=""><a href="/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a>, <a href="/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme</a>, <a href="/wiki/Emacs_Lisp" title="Emacs Lisp">Emacs Lisp</a>, <a href="/wiki/AutoLISP" title="AutoLISP">AutoLISP</a>, <a href="/wiki/Logo_programming_language" title="Logo programming language" class="mw-redirect">Logo</a>, <a href="/wiki/Clojure" title="Clojure">Clojure</a>, <a href="/wiki/ISLISP" title="ISLISP">ISLISP</a>, <a href="/wiki/Newlisp" title="Newlisp" class="mw-redirect">Newlisp</a>, <a href="/wiki/Arc_(programming_language)" title="Arc (programming language)">Arc</a></td>
</tr>
<tr>
<th style="">Influenced</th>
<td class="" style=""><a href="/wiki/ML_(programming_language)" title="ML (programming language)">ML</a>, <a href="/wiki/Perl" title="Perl">Perl</a>, <a href="/wiki/Python_(programming_language)" title="Python (programming language)">Python</a>, <a href="/wiki/Smalltalk" title="Smalltalk">Smalltalk</a>, <a href="/wiki/Ruby_(programming_language)" title="Ruby (programming language)">Ruby</a>, <a href="/wiki/Dylan_programming_language" title="Dylan programming language" class="mw-redirect">Dylan</a>, <a href="/wiki/Mathematica" title="Mathematica">Mathematica</a>, <a href="/wiki/Rebol" title="Rebol" class="mw-redirect">Rebol</a>, <a href="/wiki/Qi_(programming_language)" title="Qi (programming language)">Qi</a>, <a href="/wiki/Lua_(programming_language)" title="Lua (programming language)">Lua</a>, <a href="/wiki/JavaScript" title="JavaScript">JavaScript</a>, <a href="/wiki/Forth_(programming_language)" title="Forth (programming language)">Forth</a>, <a href="/wiki/Nu_(programming_language)" title="Nu (programming language)">Nu</a>, <a href="/wiki/OPS5" title="OPS5">OPS5</a></td>
</tr>
</table>
<p><b>Lisp</b> (or <b>LISP</b>) is a family of <a href="/wiki/Computer" title="Computer">computer</a> <a href="/wiki/Programming_language" title="Programming language">programming languages</a> with a long history and a distinctive, fully parenthesized syntax. Originally specified in 1958, Lisp is the second-oldest <a href="/wiki/High-level_programming_language" title="High-level programming language">high-level programming language</a> in widespread use today; only <a href="/wiki/Fortran" title="Fortran">Fortran</a> is older. Like Fortran, Lisp has changed a great deal since its early days, and a number of <a href="/wiki/Programming_language_dialect" title="Programming language dialect" class="mw-redirect">dialects</a> have existed over its history. Today, the most widely known general-purpose Lisp dialects are <a href="/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a> and <a href="/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme</a>.</p>
<p>Lisp was originally created as a practical mathematical notation for computer programs, based on <a href="/wiki/Alonzo_Church" title="Alonzo Church">Alonzo Church</a>'s <a href="/wiki/Lambda_calculus" title="Lambda calculus">lambda calculus</a>. It quickly became the favored programming language for <a href="/wiki/Artificial_intelligence" title="Artificial intelligence">artificial intelligence</a> (AI) research. As one of the earliest programming languages, Lisp pioneered many ideas in <a href="/wiki/Computer_science" title="Computer science">computer science</a>, including <a href="/wiki/Tree_data_structure" title="Tree data structure" class="mw-redirect">tree data structures</a>, <a href="/wiki/Garbage_collection_(computer_science)" title="Garbage collection (computer science)">automatic storage management</a>, <a href="/wiki/Dynamic_typing" title="Dynamic typing" class="mw-redirect">dynamic typing</a>, <a href="/wiki/Object-oriented_programming" title="Object-oriented programming">object-oriented programming</a>, and the <a href="/wiki/Self-hosting" title="Self-hosting">self-hosting</a> <a href="/wiki/Compiler" title="Compiler">compiler</a>.</p>
<p>The name <i>LISP</i> derives from "LISt Processing language". <a href="/wiki/Linked_list" title="Linked list">Linked lists</a> are one of Lisp languages' major <a href="/wiki/Data_structure" title="Data structure">data structures</a>, and Lisp <a href="/wiki/Source_code" title="Source code">source code</a> is itself made up of lists. As a result, Lisp programs can manipulate source code as a data structure, giving rise to the <a href="/wiki/Macro_(computer_science)" title="Macro (computer science)">macro</a> systems that allow programmers to create new syntax or even new <a href="/wiki/Domain-specific_programming_language" title="Domain-specific programming language" class="mw-redirect">domain-specific programming languages</a> embedded in Lisp.</p>
<p>The interchangeability of code and data also gives Lisp its instantly recognizable syntax. All program code is written as <i><a href="/wiki/S-expression" title="S-expression">s-expressions</a></i>, or parenthesized lists. A function call or syntactic form is written as a list with the function or operator's name first, and the arguments following; for instance, a function f that takes three arguments might be called using <code>(f x y z)</code>.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#History"><span class="tocnumber">1</span> <span class="toctext">History</span></a>
<ul>
<li class="toclevel-2"><a href="#Genealogy_and_variants"><span class="tocnumber">1.1</span> <span class="toctext">Genealogy and variants</span></a>
<ul>
<li class="toclevel-3"><a href="#Historically_significant_dialects"><span class="tocnumber">1.1.1</span> <span class="toctext">Historically significant dialects</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#Connection_to_artificial_intelligence"><span class="tocnumber">1.2</span> <span class="toctext">Connection to artificial intelligence</span></a></li>
<li class="toclevel-2"><a href="#Since_2000"><span class="tocnumber">1.3</span> <span class="toctext">Since 2000</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Major_dialects"><span class="tocnumber">2</span> <span class="toctext">Major dialects</span></a></li>
<li class="toclevel-1"><a href="#Language_innovations"><span class="tocnumber">3</span> <span class="toctext">Language innovations</span></a></li>
<li class="toclevel-1"><a href="#Syntax_and_semantics"><span class="tocnumber">4</span> <span class="toctext">Syntax and semantics</span></a>
<ul>
<li class="toclevel-2"><a href="#Lambda_expressions"><span class="tocnumber">4.1</span> <span class="toctext">Lambda expressions</span></a></li>
<li class="toclevel-2"><a href="#Atoms"><span class="tocnumber">4.2</span> <span class="toctext">Atoms</span></a></li>
<li class="toclevel-2"><a href="#Conses_and_lists"><span class="tocnumber">4.3</span> <span class="toctext">Conses and lists</span></a>
<ul>
<li class="toclevel-3"><a href="#S-expressions_represent_lists"><span class="tocnumber">4.3.1</span> <span class="toctext">S-expressions represent lists</span></a></li>
<li class="toclevel-3"><a href="#List-processing_procedures"><span class="tocnumber">4.3.2</span> <span class="toctext">List-processing procedures</span></a></li>
<li class="toclevel-3"><a href="#Shared_structure"><span class="tocnumber">4.3.3</span> <span class="toctext">Shared structure</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#Self-evaluating_forms_and_quoting"><span class="tocnumber">4.4</span> <span class="toctext">Self-evaluating forms and quoting</span></a></li>
<li class="toclevel-2"><a href="#Scope_and_closure"><span class="tocnumber">4.5</span> <span class="toctext">Scope and closure</span></a></li>
<li class="toclevel-2"><a href="#List_structure_of_program_code"><span class="tocnumber">4.6</span> <span class="toctext">List structure of program code</span></a></li>
<li class="toclevel-2"><a href="#Evaluation_and_the_Read-Eval-Print_Loop"><span class="tocnumber">4.7</span> <span class="toctext">Evaluation and the Read-Eval-Print Loop</span></a></li>
<li class="toclevel-2"><a href="#Control_structures"><span class="tocnumber">4.8</span> <span class="toctext">Control structures</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Examples"><span class="tocnumber">5</span> <span class="toctext">Examples</span></a></li>
<li class="toclevel-1"><a href="#Object_systems"><span class="tocnumber">6</span> <span class="toctext">Object systems</span></a></li>
<li class="toclevel-1"><a href="#Various_dialects_and_implementations"><span class="tocnumber">7</span> <span class="toctext">Various dialects and implementations</span></a></li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">8</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1"><a href="#Further_reading"><span class="tocnumber">9</span> <span class="toctext">Further reading</span></a></li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">10</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">11</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="History" id="History"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Lisp_(programming_language)&amp;action=edit&amp;section=1" title="Edit section: History">edit</a>]</span> <span class="mw-headline">History</span></h2>
<p>Lisp was invented by <a href="/wiki/John_McCarthy_(computer_scientist)" title="John McCarthy (computer scientist)">John McCarthy</a> in 1958 while he was at the <a href="/wiki/Massachusetts_Institute_of_Technology" title="Massachusetts Institute of Technology">Massachusetts Institute of Technology</a> (MIT). McCarthy published its design in a paper in <i><a href="/wiki/Communications_of_the_ACM" title="Communications of the ACM">Communications of the ACM</a></i> in 1960, entitled "Recursive Functions of Symbolic Expressions and Their Computation by Machine, Part I"<sup id="cite_ref-MCCARTHY_0-0" class="reference"><a href="#cite_note-MCCARTHY-0" title=""><span>[</span>1<span>]</span></a></sup> ("Part II" was never published). He showed that with a few simple operators and a notation for functions, one can build a <a href="/wiki/Turing-complete" title="Turing-complete" class="mw-redirect">Turing-complete</a> language for algorithms.</p>
<p><a href="/wiki/Information_Processing_Language" title="Information Processing Language">Information Processing Language</a> was the first AI language, from 1955 or 1956, and already included many of the concepts, such as list-processing and recursion, which came to be used in Lisp.</p>
<p>McCarthy's original notation used bracketed "<a href="/wiki/M-expression" title="M-expression">M-expressions</a>" that would be translated into <a href="/wiki/S-expression" title="S-expression">S-expressions</a>. As an example, the M-expression <code>car[cons[A,B]]</code> is equivalent to the S-expression <code>(car&#160;(cons&#160;A&#160;B))</code>. Once Lisp was implemented, programmers rapidly chose to use S-expressions, and M-expressions were abandoned. M-expressions surfaced again with short-lived attempts of <a href="/wiki/MLISP" title="MLISP" class="mw-redirect">MLISP</a><sup id="cite_ref-SMITH_1-0" class="reference"><a href="#cite_note-SMITH-1" title=""><span>[</span>2<span>]</span></a></sup> by <a href="/w/index.php?title=Horace_Enea&amp;action=edit&amp;redlink=1" class="new" title="Horace Enea (page does not exist)">Horace Enea</a> and <a href="/wiki/CGOL" title="CGOL">CGOL</a> by <a href="/wiki/Vaughan_Pratt" title="Vaughan Pratt">Vaughan Pratt</a>.</p>
<p>Lisp was first implemented by <a href="/wiki/Steve_Russell" title="Steve Russell">Steve Russell</a> on an <a href="/wiki/IBM_704" title="IBM 704">IBM 704</a> computer. Russell had read McCarthy's paper, and realized (to McCarthy's surprise) that the Lisp <i>eval</i> function could be implemented in machine code.<sup id="cite_ref-2" class="reference"><a href="#cite_note-2" title=""><span>[</span>3<span>]</span></a></sup> The result was a working Lisp interpreter which could be used to run Lisp programs, or more properly, 'evaluate Lisp expressions.'</p>
<p>Two assembly language routines for the <a href="/wiki/IBM_704" title="IBM 704">IBM 704</a> became the primitive operations for decomposing lists: <a href="/wiki/Car_and_cdr" title="Car and cdr" class="mw-redirect"><code>car</code></a> (Contents of Address Register) and <a href="/wiki/Car_and_cdr" title="Car and cdr" class="mw-redirect"><code>cdr</code></a> (Contents of Decrement Register). Lisp dialects still use <code>car</code> and <code>cdr</code> (pronounced <span title="Pronunciation in the International Phonetic Alphabet (IPA)" class="IPA"><a href="/wiki/Wikipedia:IPA_for_English" title="Wikipedia:IPA for English">/ˈkɑr/</a></span> and <span title="Representation in the International Phonetic Alphabet (IPA)" class="IPA">/ˈkʊdər/</span>) for the operations that return the first item in a list and the rest of the list respectively.</p>
<p>The first complete Lisp compiler, written in Lisp, was implemented in 1962 by Tim Hart and Mike Levin at MIT.<sup id="cite_ref-LEVIN_3-0" class="reference"><a href="#cite_note-LEVIN-3" title=""><span>[</span>4<span>]</span></a></sup> This compiler introduced the Lisp model of incremental compilation, in which compiled and interpreted functions can intermix freely. The language used in Hart and Levin's memo is much closer to modern Lisp style than McCarthy's earlier code.</p>
<p><a name="Genealogy_and_variants" id="Genealogy_and_variants"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Lisp_(programming_language)&amp;action=edit&amp;section=2" title="Edit section: Genealogy and variants">edit</a>]</span> <span class="mw-headline">Genealogy and variants</span></h3>
<p>Over its fifty-year history, Lisp has spawned many variations on the core theme of an S-expression language. Moreover, each given dialect may have several implementations—for instance, there are more than a dozen implementations of <a href="/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a>.</p>
<p>Differences between dialects may be quite visible—for instance, Common Lisp and Scheme use different keywords to define functions. Within a dialect that is standardized, however, conforming implementations support the same core language, but with different extensions and libraries.</p>
<p><a name="Historically_significant_dialects" id="Historically_significant_dialects"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Lisp_(programming_language)&amp;action=edit&amp;section=3" title="Edit section: Historically significant dialects">edit</a>]</span> <span class="mw-headline">Historically significant dialects</span></h4>
<ul>
<li>LISP 1.5 <a href="http://community.computerhistory.org/scc/projects/LISP/book/LISP%201.5%20Programmers%20Manual.pdf" class="external autonumber" title="http://community.computerhistory.org/scc/projects/LISP/book/LISP%201.5%20Programmers%20Manual.pdf" rel="nofollow">[2]</a> – First widely distributed version, developed by McCarthy and others at MIT. So named because it contained several improvements on the original "LISP 1" interpreter, but was not a major restructuring as the planned <a href="/wiki/LISP_2" title="LISP 2">LISP 2</a> would be.</li>
<li><a href="/w/index.php?title=Stanford_LISP&amp;action=edit&amp;redlink=1" class="new" title="Stanford LISP (page does not exist)">Stanford LISP</a> 1.6 <a href="http://community.computerhistory.org/scc/projects/LISP/stanford/SAILON-28.6.pdf" class="external autonumber" title="http://community.computerhistory.org/scc/projects/LISP/stanford/SAILON-28.6.pdf" rel="nofollow">[3]</a> – This was a successor to LISP 1.5 developed at the <a href="/wiki/Stanford_AI_Lab" title="Stanford AI Lab" class="mw-redirect">Stanford AI Lab</a>, and widely distributed to <a href="/wiki/PDP-10" title="PDP-10">PDP-10</a> systems running the <a href="/wiki/TOPS-10" title="TOPS-10">TOPS-10</a> operating system. It was rendered obsolete by Maclisp and InterLisp.</li>
<li><a href="/wiki/Maclisp" title="Maclisp">MACLISP</a> <a href="http://zane.brouhaha.com/~healyzh/doc/lisp.doc.txt" class="external autonumber" title="http://zane.brouhaha.com/~healyzh/doc/lisp.doc.txt" rel="nofollow">[4]</a> – developed for MIT's <a href="/wiki/Project_MAC" title="Project MAC" class="mw-redirect">Project MAC</a> (no relation to Apple's <a href="/wiki/Macintosh" title="Macintosh">Macintosh</a>, nor to <a href="/wiki/John_McCarthy_(computer_scientist)" title="John McCarthy (computer scientist)">McCarthy</a>), direct descendant of LISP 1.5. It ran on the PDP-10 and <a href="/wiki/Multics" title="Multics">Multics</a> systems. (MACLISP would later come to be called Maclisp, and is often referred to as MacLisp.)</li>
<li><a href="/wiki/InterLisp" title="InterLisp" class="mw-redirect">InterLisp</a> <a href="http://www.bitsavers.org/pdf/xerox/interlisp/1974_InterlispRefMan.pdf" class="external autonumber" title="http://www.bitsavers.org/pdf/xerox/interlisp/1974_InterlispRefMan.pdf" rel="nofollow">[5]</a> – developed at <a href="/wiki/BBN_Technologies" title="BBN Technologies">BBN Technologies</a> for PDP-10 systems running the <a href="/wiki/TOPS-20" title="TOPS-20">Tenex</a> operating system, later adopted as a "West coast" Lisp for the Xerox Lisp machines as <a href="/w/index.php?title=InterLisp-D&amp;action=edit&amp;redlink=1" class="new" title="InterLisp-D (page does not exist)">InterLisp-D</a>. A small version called "InterLISP 65" was published for <a href="/wiki/Atari" title="Atari">Atari</a>'s <a href="/wiki/MOS_Technology_6502" title="MOS Technology 6502">6502</a>-based computer line. For quite some time Maclisp and InterLisp were strong competitors.</li>
<li><a href="/wiki/Franz_Lisp" title="Franz Lisp">Franz Lisp</a> – originally a <a href="/wiki/University_of_California,_Berkeley" title="University of California, Berkeley">Berkeley</a> project; later developed by <a href="/w/index.php?title=Franz_Inc&amp;action=edit&amp;redlink=1" class="new" title="Franz Inc (page does not exist)">Franz Inc.</a> The name is a humorous deformation of "<a href="/wiki/Franz_Liszt" title="Franz Liszt">Franz Liszt</a>". The name "Franz Lisp" does <i>not</i> refer to <a href="/wiki/Allegro_Common_Lisp" title="Allegro Common Lisp">Allegro Common Lisp</a>, the dialect of Common Lisp sold by Franz Inc. in more recent years.</li>
<li><a href="/wiki/XLISP" title="XLISP">XLISP</a>, which <a href="/wiki/AutoLisp" title="AutoLisp" class="mw-redirect">AutoLisp</a> was based on.</li>
<li><a href="/w/index.php?title=Standard_Lisp&amp;action=edit&amp;redlink=1" class="new" title="Standard Lisp (page does not exist)">Standard Lisp</a> and <a href="/wiki/Portable_Standard_Lisp" title="Portable Standard Lisp">Portable Standard Lisp</a> were widely used and ported, especially with the Computer Algebra System REDUCE.</li>
<li><a href="/wiki/ZetaLisp" title="ZetaLisp">ZetaLisp</a>, also known as Lisp Machine Lisp – used on the <a href="/wiki/Lisp_machine" title="Lisp machine">Lisp machines</a>, direct descendant of Maclisp. ZetaLisp had big influence on Common Lisp.</li>
<li><a href="/wiki/LeLisp" title="LeLisp" class="mw-redirect">LeLisp</a> is a French Lisp dialect. One of the first Interface Builders was written in LeLisp.</li>
<li><a href="/wiki/Common_Lisp" title="Common Lisp">Common Lisp (1984)</a>, as described by <i><a href="/wiki/Common_Lisp_the_Language" title="Common Lisp the Language">Common Lisp: The Language</a></i> – a consolidation of several divergent attempts (ZetaLisp, <a href="/wiki/Spice_Lisp" title="Spice Lisp">Spice Lisp</a>, <a href="/wiki/NIL_(programming_language)" title="NIL (programming language)">NIL</a>, and <a href="/wiki/S-1_Lisp" title="S-1 Lisp">S-1 Lisp</a>) to create successor dialects<a href="http://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node6.html" class="external autonumber" title="http://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node6.html" rel="nofollow">[6]</a> to Maclisp, with substantive influences from the Scheme dialect as well. This version of Common Lisp was available for wide-ranging platforms and was accepted by many as a <a href="/wiki/De_facto_standard" title="De facto standard">de facto standard</a><a href="http://www.cs.cmu.edu/Groups/AI/html/faqs/lang/lisp/part2/faq-doc-13.html" class="external autonumber" title="http://www.cs.cmu.edu/Groups/AI/html/faqs/lang/lisp/part2/faq-doc-13.html" rel="nofollow">[7]</a> until the publication of ANSI Common Lisp (ANSI X3.226-1994).</li>
<li><a href="/wiki/Dylan_(programming_language)" title="Dylan (programming language)">Dylan</a> was in its first version a mix of Scheme with the Common Lisp Object System.</li>
<li><a href="/wiki/EuLisp" title="EuLisp">EuLisp</a> – attempt to develop a new efficient and cleaned-up Lisp.</li>
<li><a href="/wiki/ISLisp" title="ISLisp" class="mw-redirect">ISLisp</a> – attempt to develop a new efficient and cleaned-up Lisp. Standardized as <a href="http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=22987" class="external text" title="http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=22987" rel="nofollow">ISO/IEC 13816:1997</a> and later revised as <a href="http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=44338" class="external text" title="http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=44338" rel="nofollow">ISO/IEC 13816:2007</a> - <i>Information technology – Programming languages, their environments and system software interfaces – Programming language ISLISP</i>.</li>
<li><a href="/wiki/Scheme_(programming_language)" title="Scheme (programming language)">IEEE Scheme</a> – IEEE standard, 1178–1990 (R1995)</li>
<li><a href="/wiki/ANSI_Common_Lisp" title="ANSI Common Lisp" class="mw-redirect">ANSI Common Lisp</a> – an <a href="/wiki/American_National_Standards_Institute" title="American National Standards Institute">American National Standards Institute</a> (ANSI) <a href="/wiki/Standardization" title="Standardization">standard</a> for Common Lisp, created by subcommittee <a href="/wiki/X3J13" title="X3J13">X3J13</a>, chartered<a href="http://www.nhplace.com/kent/CL/x3j13-86-020.html" class="external autonumber" title="http://www.nhplace.com/kent/CL/x3j13-86-020.html" rel="nofollow">[8]</a> to begin with <i>Common Lisp: The Language</i> as a base document and to work through a public <a href="/wiki/Consensus_decision-making" title="Consensus decision-making">consensus</a> process to find solutions to shared issues of <a href="/wiki/Portability_(software)" title="Portability (software)" class="mw-redirect">portability</a> of programs and <a href="/wiki/Computer_compatibility" title="Computer compatibility">compatibility</a> of Common Lisp implementations. Although formally an ANSI standard, the implementation, sale, use, and influence of ANSI Common Lisp has been and continues to be seen world-wide.</li>
<li><a href="/wiki/ACL2" title="ACL2">ACL2</a> or "A Computational Logic for Applicative Common Lisp", an applicative (side-effect free) variant of Common LISP. ACL2 is both a programming language in which you can model computer systems and a tool to help proving properties of those models.</li>
<li><a href="/wiki/Arc_(programming_language)" title="Arc (programming language)">arc</a> – a new sub version of Lisp created by <a href="/wiki/Paul_Graham" title="Paul Graham">Paul Graham</a>, released on January 29, 2008.</li>
<li><a href="/wiki/Clojure" title="Clojure">Clojure</a> - a modern Lisp dialect which runs on the <a href="/wiki/Java_Virtual_Machine" title="Java Virtual Machine">Java Virtual Machine</a>. Designed with <a href="/wiki/Concurrent_programming" title="Concurrent programming" class="mw-redirect">concurrency</a> in mind.</li>
</ul>
<p>For more information about various dialects of Lisp see category <a href="/wiki/Category:Lisp_programming_language_family" title="Category:Lisp programming language family">Lisp programming language family</a>, and <a href="http://www.softwarepreservation.org/projects/LISP/" class="external text" title="http://www.softwarepreservation.org/projects/LISP/" rel="nofollow">The History of Lisp</a>.</p>
<p><a name="Connection_to_artificial_intelligence" id="Connection_to_artificial_intelligence"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Lisp_(programming_language)&amp;action=edit&amp;section=4" title="Edit section: Connection to artificial intelligence">edit</a>]</span> <span class="mw-headline">Connection to artificial intelligence</span></h3>
<p>Since its inception, Lisp was closely connected with the <a href="/wiki/Artificial_intelligence" title="Artificial intelligence">artificial intelligence</a> research community, especially on <a href="/wiki/PDP-10" title="PDP-10">PDP-10</a><sup id="cite_ref-4" class="reference"><a href="#cite_note-4" title=""><span>[</span>5<span>]</span></a></sup> systems. Lisp was used as the implementation of the programming language <a href="/wiki/Planner_programming_language" title="Planner programming language" class="mw-redirect">Micro Planner</a> that was the foundation for the famous AI system <a href="/wiki/SHRDLU" title="SHRDLU">SHRDLU</a>. In the 1970s, as AI research spawned commercial offshoots, the performance of existing Lisp systems became a growing issue.</p>
<p>Lisp was a difficult system to implement with the compiler techniques and stock hardware of the 1970s. <a href="/wiki/Garbage_collection_(computer_science)" title="Garbage collection (computer science)">Garbage collection</a> routines, developed by then-<a href="/wiki/MIT" title="MIT" class="mw-redirect">MIT</a> graduate student <a href="/w/index.php?title=Daniel_Edwards_(programmer)&amp;action=edit&amp;redlink=1" class="new" title="Daniel Edwards (programmer) (page does not exist)">Daniel Edwards</a>, made it practical to run Lisp on general-purpose computing systems, but efficiency was still a problem. This led to the creation of <a href="/wiki/Lisp_machine" title="Lisp machine">Lisp machines</a>: dedicated hardware for running Lisp environments and programs. Advances in both computer hardware and compiler technology soon made Lisp machines obsolete, to the detriment of the Lisp market.</p>
<p>During the 1980s and 1990s, a great effort was made to unify the numerous Lisp dialects (most notably, <a href="/wiki/InterLisp" title="InterLisp" class="mw-redirect">InterLisp</a>, <a href="/wiki/Maclisp" title="Maclisp">Maclisp</a>, <a href="/wiki/ZetaLisp" title="ZetaLisp">ZetaLisp</a>, MetaLisp, and <a href="/wiki/Franz_Lisp" title="Franz Lisp">Franz Lisp</a>) into a single language. The new language, <a href="/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a>, was essentially a compatible subset of the dialects it replaced. In 1994, <a href="/wiki/ANSI" title="ANSI" class="mw-redirect">ANSI</a> published the Common Lisp standard, "ANSI X3.226-1994 Information Technology Programming Language Common Lisp." At that time the world market for Lisp was much smaller than it is today<sup class="noprint Inline-Template"><span title="The time period in the vicinity of this tag is ambiguous&#160;since March 2009" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Manual_of_Style_(dates_and_numbers)#Chronological_items" title="Wikipedia:Manual of Style (dates and numbers)">when?</a></i>]</span></sup><sup class="noprint Template-Fact"><span title="This claim needs references to reliable sources&#160;since March 2009" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</span></sup>.</p>
<p><a name="Since_2000" id="Since_2000"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Lisp_(programming_language)&amp;action=edit&amp;section=5" title="Edit section: Since 2000">edit</a>]</span> <span class="mw-headline">Since 2000</span></h3>
<p>Having declined somewhat in the 1990s, Lisp experienced a regrowth of interest. Most new activity is focused around <a href="/wiki/Open_source" title="Open source">open source</a> implementations of <a href="/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a>, and includes the development of new portable libraries and applications. This interest can be measured partly by sales from the print version of <i><a href="/wiki/Practical_Common_Lisp" title="Practical Common Lisp">Practical Common Lisp</a></i> by <a href="/w/index.php?title=Peter_Seibel&amp;action=edit&amp;redlink=1" class="new" title="Peter Seibel (page does not exist)">Peter Seibel</a>, a tutorial for new Lisp programmers published in 2004<sup id="cite_ref-5" class="reference"><a href="#cite_note-5" title=""><span>[</span>6<span>]</span></a></sup>. It was briefly <a href="/wiki/Amazon.com" title="Amazon.com">Amazon.com</a>'s second most popular programming book. It is available online for free<sup id="cite_ref-6" class="reference"><a href="#cite_note-6" title=""><span>[</span>7<span>]</span></a></sup>.</p>
<p>Many new Lisp programmers were inspired by writers such as <a href="/wiki/Paul_Graham" title="Paul Graham">Paul Graham</a> and <a href="/wiki/Eric_S._Raymond" title="Eric S. Raymond">Eric S. Raymond</a> to pursue a language others consider antiquated. New Lisp programmers often describe the language as an eye-opening experience and claim to be substantially more productive than in other languages.<sup id="cite_ref-7" class="reference"><a href="#cite_note-7" title=""><span>[</span>8<span>]</span></a></sup> This increase in awareness may be contrasted to the "<a href="/wiki/AI_winter" title="AI winter">AI winter</a>" and Lisp's brief gain in the mid-1990s. <sup id="cite_ref-8" class="reference"><a href="#cite_note-8" title=""><span>[</span>9<span>]</span></a></sup></p>
<p>Dan Weinreb lists in his survey of Common Lisp implementations eleven actively maintained Common Lisp implementations. Scieneer Common Lisp is a new commercial implementation forked from CMUCL with a first release in 2002.</p>
<p>The open source community has created new supporting infrastructure: <a href="/wiki/Cliki" title="Cliki" class="mw-redirect">Cliki</a> is a Wiki that collects Common Lisp related information, the <a href="http://www.cl-user.net/" class="external text" title="http://www.cl-user.net/" rel="nofollow">Common Lisp directory</a> lists resources, #lisp is a popular IRC channel (with support by a Lisp-written Bot), <a href="http://paste.lisp.org/" class="external text" title="http://paste.lisp.org/" rel="nofollow">lisppaste</a> supports the sharing and commenting of code snippets, <a href="http://planet.lisp.org/" class="external text" title="http://planet.lisp.org/" rel="nofollow">Planet Lisp</a> collects the contents of various Lisp-related Blogs, on <a href="http://www.lispforum.com/" class="external text" title="http://www.lispforum.com/" rel="nofollow">LispForum</a> user discuss Lisp topics, <a href="http://lispjobs.wordpress.com/" class="external text" title="http://lispjobs.wordpress.com/" rel="nofollow">Lispjobs</a> is a service for announcing job offers and there is a new weekly news service (<a href="http://lispnews.wordpress.com/" class="external text" title="http://lispnews.wordpress.com/" rel="nofollow">Weekly Lisp News</a>).</p>
<p>50 years of Lisp (1958-2008) has been celebrated at <a href="http://www.lisp50.org/" class="external text" title="http://www.lisp50.org/" rel="nofollow">LISP50@OOPSLA</a>. There are several regular local user meetings (Boston, Vancouver, <a href="http://lisp-hh.de/wiki/Stammtisch" class="external text" title="http://lisp-hh.de/wiki/Stammtisch" rel="nofollow">Hamburg</a>, ...), Lisp Meetings (<a href="http://www.weitz.de/eclm2009/" class="external text" title="http://www.weitz.de/eclm2009/" rel="nofollow">European Common Lisp Meeting</a>, <a href="http://european-lisp-symposium.org/," class="external text" title="http://european-lisp-symposium.org/," rel="nofollow">European Lisp Symposium</a>) and an <a href="http://www.international-lisp-conference.org/" class="external text" title="http://www.international-lisp-conference.org/" rel="nofollow">International Lisp Conference</a> .</p>
<p>The Scheme community actively maintains <a href="/wiki/Scheme_(programming_language)#Implementations" title="Scheme (programming language)">over twenty implementations</a>. Several significant new implementations (Chicken, Gauche, Ikarus, Larceny, Ypsilon) have been developed in the last few years. The <a href="http://www.schemers.org/Documents/Standards/R5RS/" class="external text" title="http://www.schemers.org/Documents/Standards/R5RS/" rel="nofollow">Revised<sup>5</sup> Report on the Algorithmic Language Scheme</a> standard of Scheme was widely accepted in the Scheme community. The <a href="/wiki/Scheme_Requests_for_Implementation" title="Scheme Requests for Implementation">Scheme Requests for Implementation</a> process has created a lot of quasi standard libraries and extensions for Scheme. User communities of individual Scheme implementations continue to grow. A new language standardization process was started in 2003 and led to the R<sup>6</sup>RS Scheme standard in 2007. Academic use of Scheme for teaching computer science seems to have declined somewhat. Some universities are no longer using Scheme in their computer science introductory courses.</p>
<p>There are also a few new dialects of Lisp. Notably: <a href="/wiki/Newlisp" title="Newlisp" class="mw-redirect">Newlisp</a> (a scripting language), Arc (developed by Paul Graham) and recently <a href="/wiki/Clojure" title="Clojure">Clojure</a> (developed by Rich Hickey) and Nu for programming with Apple's Cocoa.</p>
<p><a name="Major_dialects" id="Major_dialects"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Lisp_(programming_language)&amp;action=edit&amp;section=6" title="Edit section: Major dialects">edit</a>]</span> <span class="mw-headline">Major dialects</span></h2>
<p>The two major dialects of Lisp used for general-purpose programming today are <a href="/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a> and <a href="/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme</a>. These languages represent significantly different design choices.</p>
<p><a href="/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a>, descended mainly from <a href="/wiki/MacLisp" title="MacLisp" class="mw-redirect">MacLisp</a>, <a href="/wiki/Interlisp" title="Interlisp">Interlisp</a>, and <a href="/wiki/Lisp_Machine_Lisp" title="Lisp Machine Lisp">Lisp Machine Lisp</a>, is an expanded superset of earlier Lisp dialects, with a large language standard including many built-in data types and syntactic forms, as well as an object system. Scheme is a more minimalist design, with a much smaller set of standard features but with certain implementation features (such as <a href="/wiki/Tail-call_optimization" title="Tail-call optimization" class="mw-redirect">tail-call optimization</a> and full <a href="/wiki/Continuation" title="Continuation">continuations</a>) not necessarily found in Common Lisp. Common Lisp also borrowed certain features from Scheme such as <a href="/wiki/Scope_(programming)#Static_scoping" title="Scope (programming)">lexical scoping</a> and <a href="/wiki/Lexical_closure" title="Lexical closure" class="mw-redirect">lexical closures</a>.</p>
<p><a href="/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme</a> is a statically scoped and properly tail-recursive dialect of the Lisp programming language invented by Guy Lewis Steele Jr. and Gerald Jay Sussman. It was designed to have an exceptionally clear and simple semantics and few different ways to form expressions. A wide variety of programming paradigms, including imperative, functional, and message passing styles, find convenient expression in Scheme. Scheme continues to evolve with a series of standards (Revised<sup>n</sup> Report on the Algorithmic Language Scheme) and a series of <a href="/wiki/Scheme_Requests_for_Implementation" title="Scheme Requests for Implementation">Scheme Requests for Implementation</a>.</p>
<p>In addition, Lisp dialects are used as <a href="/wiki/Scripting_language" title="Scripting language">scripting languages</a> in a number of applications, with the most well-known being <a href="/wiki/Emacs_Lisp" title="Emacs Lisp">Emacs Lisp</a> in the <a href="/wiki/Emacs" title="Emacs">Emacs</a> editor, Visual Lisp in <a href="/wiki/AutoCAD" title="AutoCAD">AutoCAD</a>, Nyquist in Audacity (a popular audio editor).</p>
<p><a name="Language_innovations" id="Language_innovations"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Lisp_(programming_language)&amp;action=edit&amp;section=7" title="Edit section: Language innovations">edit</a>]</span> <span class="mw-headline">Language innovations</span></h2>
<p>Lisp was the first <a href="/wiki/Homoiconicity" title="Homoiconicity">homoiconic</a> programming language: the primary representation of program code is the same type of list structure that is also used for the main data structures. As a result, Lisp functions can be manipulated, altered or even created within a Lisp program without extensive parsing or manipulation of binary machine code. This is generally considered one of the primary advantages of the language with regards to its expressiveness, and makes the language amenable to <a href="/wiki/Metacircular_evaluation" title="Metacircular evaluation" class="mw-redirect">metacircular evaluation</a>.</p>
<p>The ubiquitous <i>if-then-else</i> structure, now taken for granted as an essential element of any programming language, was invented by McCarthy for use in Lisp, where it saw its first appearance in a more general form (the cond structure). It was inherited by Algol, which popularized it.</p>
<p>Lisp deeply influenced <a href="/wiki/Alan_Kay" title="Alan Kay">Alan Kay</a>, the leader of the research on <a href="/wiki/Smalltalk" title="Smalltalk">Smalltalk</a>, and then in turn Lisp was influenced by Smalltalk, by adopting object-oriented programming features (classes, instances, etc.) in the late 1970s.</p>
<p>Largely because of its resource requirements with respect to early computing hardware (including early microprocessors), Lisp did not become as popular outside of the <a href="/wiki/AI" title="AI" class="mw-redirect">AI</a> community as <a href="/wiki/Fortran" title="Fortran">Fortran</a> and the <a href="/wiki/ALGOL" title="ALGOL">ALGOL</a>-descended <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a> language. Newer languages such as <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a> and <a href="/wiki/Python_(programming_language)" title="Python (programming language)">Python</a> have incorporated some limited versions of some of the features of Lisp, but are necessarily unable to bring the coherence and synergy of the full concepts found in Lisp. Because of its suitability to ill-defined, complex, and dynamic applications, Lisp is currently enjoying some resurgence of popular interest.</p>
<p><a name="Syntax_and_semantics" id="Syntax_and_semantics"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Lisp_(programming_language)&amp;action=edit&amp;section=8" title="Edit section: Syntax and semantics">edit</a>]</span> <span class="mw-headline">Syntax and semantics</span></h2>
<dl>
<dd><i><b>Note</b>: This article's examples are written in <a href="/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a> (though most are also valid in <a href="/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme</a>).</i></dd>
</dl>
<p>Lisp is an expression-oriented language. Unlike most other languages, no distinction is made between <a href="/wiki/Expression_(programming)" title="Expression (programming)">"expressions"</a> and <a href="/wiki/Statement_(programming)" title="Statement (programming)">"statements"</a>; all code and data are written as expressions. When an expression is <i>evaluated</i>, it produces a value (in Common Lisp, possibly multiple values), which then can be embedded into other expressions. Each value can be any data type.</p>
<p>McCarthy's 1958 paper introduced two types of syntax: <a href="/wiki/S-expression" title="S-expression">S-expressions</a> (Symbolic Expressions, also called "sexps"), which mirror the internal representation of code and data; and <a href="/wiki/M-expression" title="M-expression">M-expressions</a> (Meta Expressions), which express functions of S-expressions. M-expressions never found favor, and almost all Lisps today use S-expressions to manipulate both code and data.</p>
<p>The use of parentheses is Lisp's most immediately obvious difference from other programming language families. As a result, students have long given Lisp nicknames such as <i>Lost In Stupid Parentheses</i>, or <i>Lots of Irritating Superfluous Parentheses</i>.<sup id="cite_ref-LEVIN2_9-0" class="reference"><a href="#cite_note-LEVIN2-9" title=""><span>[</span>10<span>]</span></a></sup> However, the S-expression syntax is also responsible for much of Lisp's power; the syntax is extremely regular, which facilitates manipulation by computer. However, the syntax of Lisp is not limited to traditional parentheses notation. It can be extended to include alternative notations. <a href="/w/index.php?title=XMLisp&amp;action=edit&amp;redlink=1" class="new" title="XMLisp (page does not exist)">XMLisp</a>, for instance, is a Common Lisp extension that employs the <a href="/wiki/Meta-object_protocol" title="Meta-object protocol" class="mw-redirect">metaobject-protocol</a> to integrate S-expressions with the <a href="/wiki/Xml" title="Xml" class="mw-redirect">Extensible Markup Language (XML)</a>.</p>
<p>The reliance on expressions gives the language great flexibility. Because Lisp <a href="/wiki/Function_(programming)" title="Function (programming)" class="mw-redirect">functions</a> are themselves written as lists, they can be processed exactly like data. This allows easy writing of programs which manipulate other programs (<a href="/wiki/Metaprogramming" title="Metaprogramming">metaprogramming</a>). Many Lisp dialects exploit this feature using macro systems, which enables extension of the language almost without limit.</p>
<p>A Lisp list is written with its elements separated by whitespace, and surrounded by parentheses. For example, <code>(1 2 foo)</code> is a list whose elements are three <i>atoms</i>: the values <code>1</code>, <code>2</code>, and <code><a href="/wiki/Metasyntactic_variable#Foo.2C_Bar_and_Baz" title="Metasyntactic variable">foo</a></code>. These values are implicitly typed: they are respectively two integers and a Lisp-specific data type called a "symbol", and do not have to be declared as such.</p>
<p>The empty list <code>()</code> is also represented as the special atom <code>nil</code>. This is the only entity in Lisp which is both an atom and a list.</p>
<p>Expressions are written as lists, using <a href="/wiki/Prefix_notation" title="Prefix notation" class="mw-redirect">prefix notation</a>. The first element in the list is the name of a <i>form</i>, i.e., a function, operator, macro, or "special operator" (see below.) The remainder of the list are the arguments. For example, the function <code>list</code> returns its arguments as a list, so the expression</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-lisp">
 <span class="br0">(</span><span class="kw1">list</span> '<span class="nu0">1</span> '<span class="nu0">2</span> 'foo<span class="br0">)</span>
</pre></div>
<p>evaluates to the list <code>(1 2 foo)</code>. The "quote" before the arguments in the preceding example is a "special operator" which prevents the quoted arguments from being evaluated (not strictly necessary for the numbers, since 1 evaluates to 1, etc). Any unquoted expressions are recursively evaluated before the enclosing expression is evaluated. For example,</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-lisp">
 <span class="br0">(</span><span class="kw1">list</span> <span class="nu0">1</span> <span class="nu0">2</span> <span class="br0">(</span><span class="kw1">list</span> <span class="nu0">3</span> <span class="nu0">4</span><span class="br0">)</span><span class="br0">)</span>
</pre></div>
<p>evaluates to the list <code>(1 2 (3 4))</code>. Note that the third argument is a list; lists can be nested.</p>
<p>Arithmetic operators are treated similarly. The expression</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-lisp">
 <span class="br0">(</span>+ <span class="nu0">1</span> <span class="nu0">2</span> <span class="nu0">3</span> <span class="nu0">4</span><span class="br0">)</span>
</pre></div>
<p>evaluates to 10. The equivalent under <a href="/wiki/Infix_notation" title="Infix notation">infix notation</a> would be "<code>1 + 2 + 3 + 4</code>". Arithmetic operators in Lisp are <a href="/wiki/Variadic_function" title="Variadic function">variadic</a> (or <i><a href="/wiki/N-ary" title="N-ary" class="mw-redirect">n-ary</a></i>), able to take any number of arguments.</p>
<p>"Special operators" (sometimes called "special forms" by older users) provide Lisp's control structure. For example, the special operator <code>if</code> takes three arguments. If the first argument is non-nil, it evaluates to the second argument; otherwise, it evaluates to the third argument. Thus, the expression</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-lisp">
 <span class="br0">(</span><span class="kw1">if</span> <span class="kw1">nil</span>
     <span class="br0">(</span><span class="kw1">list</span> <span class="nu0">1</span> <span class="nu0">2</span> <span class="st0">"foo"</span><span class="br0">)</span>
     <span class="br0">(</span><span class="kw1">list</span> <span class="nu0">3</span> <span class="nu0">4</span> <span class="st0">"bar"</span><span class="br0">)</span><span class="br0">)</span>
</pre></div>
<p>evaluates to <code>(3 4 "bar")</code>. Of course, this would be more useful if a non-trivial expression had been substituted in place of <code>nil</code>.</p>
<p><a name="Lambda_expressions" id="Lambda_expressions"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Lisp_(programming_language)&amp;action=edit&amp;section=9" title="Edit section: Lambda expressions">edit</a>]</span> <span class="mw-headline">Lambda expressions</span></h3>
<p>Another special operator, <code>lambda</code>, is used to bind variables to values which are then evaluated within an expression. This operator is also used to create functions: the arguments to <code>lambda</code> are a list of arguments, and the expression or expressions to which the function evaluates (the returned value is the value of the last expression that is evaluated). The expression</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-lisp">
 <span class="br0">(</span><span class="kw1">lambda</span> <span class="br0">(</span>arg<span class="br0">)</span> <span class="br0">(</span>+ arg <span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span>
</pre></div>
<p>evaluates to a function that, when applied, takes one argument, binds it to <code>arg</code> and returns the number one greater than that argument. Lambda expressions are treated no differently from named functions; they are invoked the same way. Therefore, the expression</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-lisp">
 <span class="br0">(</span><span class="br0">(</span><span class="kw1">lambda</span> <span class="br0">(</span>arg<span class="br0">)</span> <span class="br0">(</span>+ arg <span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span> <span class="nu0">5</span><span class="br0">)</span>
</pre></div>
<p>evaluates to <code>6</code>.</p>
<p><a name="Atoms" id="Atoms"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Lisp_(programming_language)&amp;action=edit&amp;section=10" title="Edit section: Atoms">edit</a>]</span> <span class="mw-headline">Atoms</span></h3>
<p>In the original <b>LISP</b> there were two fundamental <a href="/wiki/Data_type" title="Data type">data types</a>: atoms and lists. A list was a finite ordered sequence of elements, where each element is in itself either an atom or a list, and an atom was a <a href="/wiki/Number" title="Number">number</a> or a symbol. A symbol was essentially a unique named item, written as an <a href="/wiki/Alphanumeric" title="Alphanumeric">Alphanumeric</a> string in <a href="/wiki/Source_code" title="Source code">source code</a>, and used either as a variable name or as a data item in <a href="/w/index.php?title=Symbolic_processing&amp;action=edit&amp;redlink=1" class="new" title="Symbolic processing (page does not exist)">symbolic processing</a>. For example, the list <code>(FOO (BAR 1) 2)</code> contains three elements: the symbol FOO, the list <code>(BAR 1)</code>, and the number 2.</p>
<p>The essential difference between atoms and lists was that atoms were immutable and unique. Two atoms that appeared in different places in source code but were written in the exact same way represented the same object<sup class="noprint Template-Fact"><span title="This claim needs references to reliable sources&#160;since November 2008" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</span></sup>, whereas each list was a separate object that could be altered independently of other lists and could be distinguished from other lists by comparison operators.</p>
<p>As more data types were introduced in later Lisp dialects, and <a href="/wiki/Programming_style" title="Programming style">programming styles</a> evolved, the concept of an atom lost importance.<sup class="noprint Template-Fact"><span title="This claim needs references to reliable sources&#160;since November 2008" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</span></sup> Many dialects still retained the predicate <i>atom</i> for <a href="/w/index.php?title=Legacy_compatibility&amp;action=edit&amp;redlink=1" class="new" title="Legacy compatibility (page does not exist)">legacy compatibility</a><sup class="noprint Template-Fact"><span title="This claim needs references to reliable sources&#160;since November 2008" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</span></sup>, defining it true for any object which is not a cons.</p>
<p><a name="Conses_and_lists" id="Conses_and_lists"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Lisp_(programming_language)&amp;action=edit&amp;section=11" title="Edit section: Conses and lists">edit</a>]</span> <span class="mw-headline">Conses and lists</span></h3>
<div class="rellink noprint relarticle mainarticle">Main article: <a href="/wiki/Cons" title="Cons">Cons</a></div>
<div class="thumb tright">
<div class="thumbinner" style="width:302px;"><a href="/wiki/File:Cons-cells.svg" class="image" title="Box-and-pointer diagram for the list (42 69 613)"><img alt="" src="http://upload.wikimedia.org/wikipedia/en/thumb/1/1b/Cons-cells.svg/300px-Cons-cells.svg.png" width="300" height="73" border="0" class="thumbimage" /></a>
<div class="thumbcaption">
<div class="magnify"><a href="/wiki/File:Cons-cells.svg" class="internal" title="Enlarge"><img src="/skins-1.5/common/images/magnify-clip.png" width="15" height="11" alt="" /></a></div>
Box-and-pointer diagram for the list (42 69 613)</div>
</div>
</div>
<p>A Lisp list is a <a href="/wiki/Singly-linked_list" title="Singly-linked list" class="mw-redirect">singly-linked list</a>. Each cell of this list is called a <i>cons</i> (in Scheme, a <i>pair</i>), and is composed of two <a href="/wiki/Pointer" title="Pointer" class="mw-redirect">pointers</a>, called the <i>car</i> and <i>cdr</i>. These are equivalent to the <code>data</code> and <code>next</code> fields discussed in the article <i><a href="/wiki/Linked_list" title="Linked list">linked list</a></i>, respectively.</p>
<p>Of the many data structures that can be built out of cons cells, one of the most basic is called a <i>proper list</i>. A proper list is either the special <code>nil</code> (empty list) symbol, or a cons in which the <code>car</code> points to a datum (which may be another cons structure, such as a list), and the <code>cdr</code> points to another proper list.</p>
<p>If a given cons is taken to be the head of a linked list, then its car points to the first element of the list, and its cdr points to the rest of the list. For this reason, the <code>car</code> and <code>cdr</code> functions are also called <code>first</code> and <code>rest</code> when referring to conses which are part of a linked list (rather than, say, a tree).</p>
<p>Thus, a Lisp list is not an atomic object, as an instance of a container class in C++ or Java would be. A list is nothing more than an aggregate of linked conses. A variable which refers to a given list is simply a pointer to the first cons in the list. Traversal of a list can be done by "cdring down" the list; that is, taking successive cdrs to visit each cons of the list; or by using any of a number of <a href="/wiki/Higher-order_function" title="Higher-order function">higher-order functions</a> to map a function over a list.</p>
<p>Because conses and lists are so universal in Lisp systems, it is a common misconception that they are Lisp's only data structures. In fact, all but the most simplistic Lisps have other data structures – such as vectors (<a href="/wiki/Array" title="Array">arrays</a>), hash tables, structures, and so forth.</p>
<p><a name="S-expressions_represent_lists" id="S-expressions_represent_lists"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Lisp_(programming_language)&amp;action=edit&amp;section=12" title="Edit section: S-expressions represent lists">edit</a>]</span> <span class="mw-headline">S-expressions represent lists</span></h4>
<p>Parenthesized S-expressions represent linked list structure. There are several ways to represent the same list as an S-expression. A cons can be written in <i>dotted-pair notation</i> as <code>(a . b)</code>, where <code>a</code> is the car and <code>b</code> the cdr. A longer proper list might be written <code>(a . (b . (c . (d . nil))))</code> in dotted-pair notation. This is conventionally abbreviated as <code>(a b c d)</code> in <i>list notation</i>. An improper list<sup id="cite_ref-10" class="reference"><a href="#cite_note-10" title=""><span>[</span>11<span>]</span></a></sup> may be written in a combination of the two – as <code>(a b c . d)</code> for the list of three conses whose last cdr is <code>d</code> (i.e., the list <code>(a . (b . (c . d)))</code> in fully specified form).</p>
<p><a name="List-processing_procedures" id="List-processing_procedures"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Lisp_(programming_language)&amp;action=edit&amp;section=13" title="Edit section: List-processing procedures">edit</a>]</span> <span class="mw-headline">List-processing procedures</span></h4>
<p>Lisp provides many built-in procedures for accessing and controlling lists. Lists can be created directly with the <code>list</code> procedure, which takes any number of arguments, and returns the list of these arguments.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-lisp">
 <span class="br0">(</span><span class="kw1">list</span> <span class="nu0">1</span> <span class="nu0">2</span> 'a <span class="nu0">3</span><span class="br0">)</span>
 <span class="co1">;Output: (1 2 a 3)</span>
</pre></div>
<div dir="ltr" style="text-align: left;">
<pre class="source-lisp">
 <span class="br0">(</span><span class="kw1">list</span> <span class="nu0">1</span> '<span class="br0">(</span><span class="nu0">2</span> <span class="nu0">3</span><span class="br0">)</span> <span class="nu0">4</span><span class="br0">)</span>
 <span class="co1">;Output: (1 (2 3) 4)</span>
</pre></div>
<p>Because of the way that lists are constructed from <a href="/wiki/Cons_pair" title="Cons pair" class="mw-redirect">cons pairs</a>, the <code><a href="/wiki/Cons" title="Cons">cons</a></code> procedure can be used to add an element to the front of a list. Note that the <code>cons</code> procedure is asymmetric in how it handles list arguments, because of how lists are constructed.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-lisp">
 <span class="br0">(</span><span class="kw1">cons</span> <span class="nu0">1</span> '<span class="br0">(</span><span class="nu0">2</span> <span class="nu0">3</span><span class="br0">)</span><span class="br0">)</span>
 <span class="co1">;Output: (1 2 3)</span>
</pre></div>
<div dir="ltr" style="text-align: left;">
<pre class="source-lisp">
 <span class="br0">(</span><span class="kw1">cons</span> '<span class="br0">(</span><span class="nu0">1</span> <span class="nu0">2</span><span class="br0">)</span> '<span class="br0">(</span><span class="nu0">3</span> <span class="nu0">4</span><span class="br0">)</span><span class="br0">)</span>
 <span class="co1">;Output: ((1 2) 3 4)</span>
</pre></div>
<p>The <code><a href="/wiki/Append" title="Append">append</a></code> procedure appends two (or more) lists to one another. Because Lisp lists are linked lists, appending two lists has <a href="/wiki/Big_O_notation" title="Big O notation">asymptotic time complexity</a> <span class="texhtml"><i>O</i>(<i>n</i>)</span>.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-lisp">
 <span class="br0">(</span><span class="kw1">append</span> '<span class="br0">(</span><span class="nu0">1</span> <span class="nu0">2</span><span class="br0">)</span> '<span class="br0">(</span><span class="nu0">3</span> <span class="nu0">4</span><span class="br0">)</span><span class="br0">)</span>
 <span class="co1">;Output: (1 2 3 4)</span>
</pre></div>
<div dir="ltr" style="text-align: left;">
<pre class="source-lisp">
 <span class="br0">(</span><span class="kw1">append</span> '<span class="br0">(</span><span class="nu0">1</span> <span class="nu0">2</span> <span class="nu0">3</span><span class="br0">)</span> '<span class="br0">(</span><span class="br0">)</span> '<span class="br0">(</span>a<span class="br0">)</span> '<span class="br0">(</span><span class="nu0">5</span> <span class="nu0">6</span><span class="br0">)</span><span class="br0">)</span>
 <span class="co1">;Output: (1 2 3 a 5 6)</span>
</pre></div>
<p><a name="Shared_structure" id="Shared_structure"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Lisp_(programming_language)&amp;action=edit&amp;section=14" title="Edit section: Shared structure">edit</a>]</span> <span class="mw-headline">Shared structure</span></h4>
<p>Lisp lists, being simple linked lists, can share structure with one another. That is to say, two lists can have the same <i>tail</i>, or final sequence of conses. For instance, after the execution of the following Common Lisp code:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-lisp">
<span class="br0">(</span><span class="kw1">setf</span> foo <span class="br0">(</span><span class="kw1">list</span> 'a 'b 'c<span class="br0">)</span><span class="br0">)</span>
<span class="br0">(</span><span class="kw1">setf</span> bar <span class="br0">(</span><span class="kw1">cons</span> 'x <span class="br0">(</span><span class="kw1">cdr</span> foo<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>
</pre></div>
<p>the lists <code>foo</code> and <code>bar</code> are <code>(a b c)</code> and <code>(x b c)</code> respectively. However, the tail <code>(b c)</code> is the same structure in both lists. It is not a copy; the cons cells pointing to <code>b</code> and <code>c</code> are in the same memory locations for both lists.</p>
<p>Sharing structure rather than copying can give a dramatic performance improvement. However, this technique can interact in undesired ways with functions that alter lists passed to them as arguments. Altering one list, such as by replacing the <code>c</code> with a <code>goose</code>, will affect the other:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-lisp">
 <span class="br0">(</span><span class="kw1">setf</span> <span class="br0">(</span>third foo<span class="br0">)</span> 'goose<span class="br0">)</span>
</pre></div>
<p>This changes <code>foo</code> to <code>(a b goose)</code>, but thereby also changes <code>bar</code> to <code>(x b goose)</code> – a possibly unexpected result. This can be a source of bugs, and functions which alter their arguments are documented as <i>destructive</i> for this very reason.</p>
<p>Aficionados of <a href="/wiki/Functional_programming" title="Functional programming">functional programming</a> avoid destructive functions. In the Scheme dialect, which favors the functional style, the names of destructive functions are marked with a cautionary exclamation point, or "bang"—such as <code>set-car!</code> (read <i>set car bang</i>), which replaces the car of a cons. In the Common Lisp dialect, destructive functions are commonplace; the equivalent of <code>set-car!</code> is named <code>rplaca</code> for "replace car." This function is rarely seen however as Common Lisp includes a special facility, <code>setf</code>, to make it easier to define and use destructive functions. A frequent style in Common Lisp is to write code functionally (without destructive calls) when prototyping, then to add destructive calls as an optimization where it is safe to do so.</p>
<p><a name="Self-evaluating_forms_and_quoting" id="Self-evaluating_forms_and_quoting"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Lisp_(programming_language)&amp;action=edit&amp;section=15" title="Edit section: Self-evaluating forms and quoting">edit</a>]</span> <span class="mw-headline">Self-evaluating forms and quoting</span></h3>
<p>Lisp evaluates expressions which are entered by the user. Symbols and lists evaluate to some other (usually, simpler) expression – for instance, a symbol evaluates to the value of the variable it names; <code>(+ 2 3)</code> evaluates to <code>5</code>. However, most other forms evaluate to themselves: if you enter <code>5</code> into Lisp, it returns <code>5</code>.</p>
<p>Any expression can also be marked to prevent it from being evaluated (as is necessary for symbols and lists). This is the role of the <code>quote</code> special operator, or its abbreviation <code>'</code> (a single quotation mark). For instance, usually if you enter the symbol <code>foo</code> you will get back the value of the corresponding variable (or an error, if there is no such variable). If you wish to refer to the literal symbol, you enter <code>(quote foo)</code> or, usually, <code>'foo</code>.</p>
<p>Both Common Lisp and Scheme also support the <i>backquote</i> operator (often called <i>quasiquote</i> by Schemers), entered with the <code>`</code> character. This is almost the same as the plain quote, except it allows expressions to be evaluated and their values interpolated into a quoted list with the comma and comma-at operators. If the variable <code>snue</code> has the value <code>(bar baz)</code> then <code>`(foo ,snue)</code> evaluates to <code>(foo (bar baz))</code>, while <code>`(foo ,@snue)</code> evaluates to <code>(foo bar baz)</code>. The backquote is most frequently used in defining macro expansions.</p>
<p>Self-evaluating forms and quoted forms are Lisp's equivalent of literals. It may be possible to modify the values of (mutable) literals in program code. For instance, if a function returns a quoted form, and the code that calls the function modifies the form, this may alter the behavior of the function on subsequent iterations.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-lisp">
<span class="br0">(</span><span class="kw1">defun</span> should-be-constant <span class="br0">(</span><span class="br0">)</span>
  '<span class="br0">(</span>one two three<span class="br0">)</span><span class="br0">)</span>
 
<span class="br0">(</span><span class="kw1">let</span> <span class="br0">(</span><span class="br0">(</span>stuff <span class="br0">(</span>should-be-constant<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>
  <span class="br0">(</span><span class="kw1">setf</span> <span class="br0">(</span>third stuff<span class="br0">)</span> 'bizarre<span class="br0">)</span><span class="br0">)</span>   <span class="co1">; bad!</span>
 
<span class="br0">(</span>should-be-constant<span class="br0">)</span>   <span class="co1">; returns (one two bizarre)</span>
</pre></div>
<p>Modifying a quoted form like this is generally considered bad style, and is defined by ANSI Common Lisp as erroneous (resulting in "undefined" behavior in compiled files, because the file-compiler can coalesce similar constants, put them in write-protected memory, etc).</p>
<p>Lisp's formalization of quotation has been noted by <a href="/wiki/Douglas_Hofstadter" title="Douglas Hofstadter">Douglas Hofstadter</a> (in <i><a href="/wiki/G%C3%B6del,_Escher,_Bach" title="Gödel, Escher, Bach">Gödel, Escher, Bach</a></i>) and others as an example of the <a href="/wiki/Philosophy" title="Philosophy">philosophical</a> idea of <a href="/wiki/Self-reference" title="Self-reference">self-reference</a>.</p>
<p><a name="Scope_and_closure" id="Scope_and_closure"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Lisp_(programming_language)&amp;action=edit&amp;section=16" title="Edit section: Scope and closure">edit</a>]</span> <span class="mw-headline">Scope and closure</span></h3>
<p>The modern Lisp family splits over the use of dynamic or static (aka lexical) <a href="/wiki/Scope_(programming)" title="Scope (programming)">scope</a>. Scheme and Common Lisp make use of static scoping by default, while <a href="/wiki/Newlisp" title="Newlisp" class="mw-redirect">Newlisp</a> and the embedded languages in <a href="/wiki/Emacs" title="Emacs">Emacs</a> and <a href="/wiki/AutoCAD" title="AutoCAD">AutoCAD</a> use dynamic scoping.</p>
<p><a name="List_structure_of_program_code" id="List_structure_of_program_code"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Lisp_(programming_language)&amp;action=edit&amp;section=17" title="Edit section: List structure of program code">edit</a>]</span> <span class="mw-headline">List structure of program code</span></h3>
<p>A fundamental distinction between Lisp and other languages is that in Lisp, the textual representation of a program is simply a human-readable description of the same internal data structures (linked lists, symbols, number, characters, etc.) as would be used by the underlying Lisp system.</p>
<p>Lisp macros operate on these structures. Because Lisp code has the same structure as lists, macros can be built with any of the list-processing functions in the language. In short, anything that Lisp can do to a data structure, Lisp macros can do to code. In contrast, in most other languages the parser's output is purely internal to the language implementation and cannot be manipulated by the programmer. Macros in <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a>, for instance, operate on the level of the <i><a href="/wiki/Preprocessor" title="Preprocessor">preprocessor</a></i>, before the parser is invoked, and cannot re-structure the program code in the way Lisp macros can.</p>
<p>In simplistic Lisp implementations, this list structure is directly <a href="/wiki/Interpreter_(computing)" title="Interpreter (computing)">interpreted</a> to run the program; a function is literally a piece of list structure which is traversed by the interpreter in executing it. However, most actual Lisp systems (including all conforming <a href="/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a> systems) also include a compiler. The compiler translates list structure into machine code or <a href="/wiki/Bytecode" title="Bytecode">bytecode</a> for execution.</p>
<p><a name="Evaluation_and_the_Read-Eval-Print_Loop" id="Evaluation_and_the_Read-Eval-Print_Loop"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Lisp_(programming_language)&amp;action=edit&amp;section=18" title="Edit section: Evaluation and the Read-Eval-Print Loop">edit</a>]</span> <span class="mw-headline">Evaluation and the Read-Eval-Print Loop</span></h3>
<p>Lisp languages are frequently used with an interactive <a href="/wiki/Command_line" title="Command line" class="mw-redirect">command line</a>, which may be combined with an <a href="/wiki/Integrated_development_environment" title="Integrated development environment">integrated development environment</a>. The user types in expressions at the command line, or directs the IDE to transmit them to the Lisp system. Lisp <i>reads</i> the entered expressions, <i>evaluates</i> them, and <i>prints</i> the result. For this reason, the Lisp command line is called a "<a href="/wiki/Read-eval-print_loop" title="Read-eval-print loop">read-eval-print loop</a>", or <i><a href="/wiki/REPL" title="REPL" class="mw-redirect">REPL</a></i>.</p>
<p>The basic operation of the REPL is as follows. This is a simplistic description which omits many elements of a real Lisp, such as quoting and macros.</p>
<p>The <code>read</code> function accepts textual S-expressions as input, and parses them into an internal data structure. For instance, if you type the text <code>(+ 1 2)</code> at the prompt, <code>read</code> translates this into a linked list with three elements: the symbol <code>+</code>, the number 1, and the number 2. It so happens that this list is also a valid piece of Lisp code; that is, it can be evaluated. This is because the car of the list names a function—the addition operation.</p>
<p>Note that a <code>foo</code> will be read as a single symbol. <code>123</code> will be read as the number 123. <code>"123"</code> will be read as the string "123".</p>
<p>The <code>eval</code> function evaluates the data, returning zero or more other Lisp data as a result. Evaluation does not have to mean interpretation; some Lisp systems compile every expression to native machine code. It is simple, however, to describe evaluation as interpretation: To evaluate a list whose car names a function, <code>eval</code> first evaluates each of the arguments given in its cdr, then applies the function to the arguments. In this case, the function is addition, and applying it to the argument list <code>(1 2)</code> yields the answer <code>3</code>. This is the result of the evaluation.</p>
<p>The symbol <code>foo</code> evaluates to the value of the symbol foo. Data like the string "123" evaluates to the same string. The list <code>(quote (1 2 3))</code> evalutes to the list (1 2 3).</p>
<p>It is the job of the <code>print</code> function to represent output to the user. For a simple result such as <code>3</code> this is trivial. An expression which evaluated to a piece of list structure would require that <code>print</code> traverse the list and print it out as an S-expression.</p>
<p>To implement a Lisp REPL, it is necessary only to implement these three functions and an infinite-loop function. (Naturally, the implementation of <code>eval</code> will be complicated, since it must also implement all special operators like <code>if</code> or <code>lambda</code>.) This done, a basic REPL itself is but a single line of code: <code>(loop (print (eval (read))))</code>.</p>
<p>The Lisp REPL typically also provides input editing, an input history, error handling and an interface to the debugger.</p>
<p>Lisp is usually evaluated <a href="/wiki/Eager_evaluation" title="Eager evaluation">eagerly</a>. In <a href="/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a>, arguments are evaluated in <a href="/wiki/Applicative_order" title="Applicative order" class="mw-redirect">applicative order</a> ('leftmost innermost'), while in <a href="/wiki/Scheme_programming_language" title="Scheme programming language" class="mw-redirect">Scheme</a> order of arguments is undefined, leaving room for optimization by a compiler.</p>
<p><a name="Control_structures" id="Control_structures"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Lisp_(programming_language)&amp;action=edit&amp;section=19" title="Edit section: Control structures">edit</a>]</span> <span class="mw-headline">Control structures</span></h3>
<p>Lisp originally had very few control structures, but many more were added during the language's evolution. (Lisp's original conditional operator, <code>cond</code>, is the precursor to later <code>if-then-else</code> structures.)</p>
<p>Programmers in the <a href="/wiki/Scheme_programming_language" title="Scheme programming language" class="mw-redirect">Scheme</a> dialect often express loops using <a href="/wiki/Tail_recursion" title="Tail recursion">tail recursion</a>. Scheme's commonality in academic computer science has led some students to believe that tail recursion is the only, or the most common, way to write iterations in Lisp; this is incorrect. All frequently seen Lisp dialects have imperative-style iteration constructs, from Scheme's <code>do</code> loop to <a href="/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a>'s complex <code>loop</code> expressions. Moreover, the key issue that makes this an objective rather than subjective matter is that Scheme makes specific requirements for the handling of <a href="/wiki/Tail_call" title="Tail call">tail calls</a>, and consequently the reason that the use of tail recursion is generally encouraged for Scheme is that the practice is expressly supported by the language definition itself. By contrast, <a href="/wiki/ANSI_Common_Lisp" title="ANSI Common Lisp" class="mw-redirect">ANSI Common Lisp</a> does not require<sup id="cite_ref-11" class="reference"><a href="#cite_note-11" title=""><span>[</span>12<span>]</span></a></sup> the optimization commonly referred to as tail call elimination. Consequently, the fact that tail recursive style as a casual replacement for the use of more traditional <a href="/wiki/Iteration" title="Iteration">iteration</a> constructs (such as <code>do</code>, <code>dolist</code> or <code>loop</code>) is discouraged<sup id="cite_ref-12" class="reference"><a href="#cite_note-12" title=""><span>[</span>13<span>]</span></a></sup> in Common Lisp is not just a matter of stylistic preference, but potentially one of efficiency (since an apparent tail call in Common Lisp may not compile as a simple <a href="/wiki/Branch_(computer_science)" title="Branch (computer science)">jump</a>) and program correctness (since tail recursion may increase stack use in Common Lisp, risking <a href="/wiki/Stack_overflow" title="Stack overflow">stack overflow</a>).</p>
<p>Some Lisp control structures are <i>special operators</i>, equivalent to other languages' syntactic keywords. Expressions using these operators have the same surface appearance as function calls, but differ in that the arguments are not necessarily evaluated—or, in the case of an iteration expression, may be evaluated more than once.</p>
<p>In contrast to most other major programming languages, Lisp allows the programmer to implement control structures using the language itself. Several control structures are implemented as Lisp macros, and can even be macro-expanded by the programmer who wants to know how they work.</p>
<p>Both Common Lisp and Scheme have operators for non-local control flow. The differences in these operators are some of the deepest differences between the two dialects. Scheme supports <i>re-entrant <a href="/wiki/Continuation" title="Continuation">continuations</a></i> using the <code>call/cc</code> procedure, which allows a program to save (and later restore) a particular place in execution. Common Lisp does not support re-entrant continuations, but does support several ways of handling escape continuations.</p>
<p>Frequently, the same algorithm can be expressed in Lisp in either an imperative or a functional style. As noted above, Scheme tends to favor the functional style, using tail recursion and continuations to express control flow. However, imperative style is still quite possible. The style preferred by many Common Lisp programmers may seem more familiar to programmers used to structured languages such as C, while that preferred by Schemers more closely resembles pure-functional languages such as <a href="/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell</a>.</p>
<p>Because of Lisp's early heritage in list processing, it has a wide array of higher-order functions relating to iteration over sequences. In many cases where an explicit loop would be needed in other languages (like a <code>for</code> loop in C) in Lisp the same task can be accomplished with a higher-order function. (The same is true of many functional programming languages.)</p>
<p>A good example is a function which in Scheme is called <code>map</code> and in Common Lisp is called <code>mapcar</code>. Given a function and one or more lists, <code>mapcar</code> applies the function successively to the lists' elements in order, collecting the results in a new list:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-lisp">
 <span class="br0">(</span><span class="kw1">mapcar</span> #'+ '<span class="br0">(</span><span class="nu0">1</span> <span class="nu0">2</span> <span class="nu0">3</span> <span class="nu0">4</span> <span class="nu0">5</span><span class="br0">)</span> '<span class="br0">(</span><span class="nu0">10</span> <span class="nu0">20</span> <span class="nu0">30</span> <span class="nu0">40</span> <span class="nu0">50</span><span class="br0">)</span><span class="br0">)</span>
</pre></div>
<p>This applies the <code>+</code> function to each corresponding pair of list elements, yielding the result <code>(11 22 33 44 55)</code>.</p>
<p><a name="Examples" id="Examples"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Lisp_(programming_language)&amp;action=edit&amp;section=20" title="Edit section: Examples">edit</a>]</span> <span class="mw-headline">Examples</span></h2>
<p>Here are examples of Common Lisp code.</p>
<p>The basic "<a href="/wiki/Hello_world" title="Hello world" class="mw-redirect">Hello world</a>" program:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-lisp">
  <span class="br0">(</span>print <span class="st0">"Hello world"</span><span class="br0">)</span>
</pre></div>
<p>As the reader may have noticed from the above discussion, Lisp syntax lends itself naturally to recursion. Mathematical problems such as the enumeration of recursively defined sets are simple to express in this notation.</p>
<p>Evaluate a number's <a href="/wiki/Factorial" title="Factorial">factorial</a>:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-lisp">
 <span class="br0">(</span><span class="kw1">defun</span> factorial <span class="br0">(</span>n<span class="br0">)</span>
   <span class="br0">(</span><span class="kw1">if</span> <span class="br0">(</span>&lt;= n <span class="nu0">1</span><span class="br0">)</span>
       <span class="nu0">1</span>
       <span class="br0">(</span>* n <span class="br0">(</span>factorial <span class="br0">(</span>- n <span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>
</pre></div>
<p>An alternative implementation, often faster than the previous version if the Lisp system has <a href="/wiki/Tail_recursion" title="Tail recursion">tail recursion</a> optimization:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-lisp">
 <span class="br0">(</span><span class="kw1">defun</span> factorial <span class="br0">(</span>n &amp;optional <span class="br0">(</span>acc <span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span>
   <span class="br0">(</span><span class="kw1">if</span> <span class="br0">(</span>&lt;= n <span class="nu0">1</span><span class="br0">)</span>
       acc
       <span class="br0">(</span>factorial <span class="br0">(</span>- n <span class="nu0">1</span><span class="br0">)</span> <span class="br0">(</span>* acc n<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>
</pre></div>
<p>Contrast with an iterative version which uses <a href="/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a>'s <code>loop</code> macro:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-lisp">
 <span class="br0">(</span><span class="kw1">defun</span> factorial <span class="br0">(</span>n<span class="br0">)</span>
   <span class="br0">(</span>loop for i from <span class="nu0">1</span> to n
         for fac = <span class="nu0">1</span> then <span class="br0">(</span>* fac i<span class="br0">)</span>
         finally <span class="br0">(</span><span class="kw1">return</span> fac<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>
</pre></div>
<p>The following function reverses a list. (Lisp's built-in <i>reverse</i> function does the same thing.)</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-lisp">
 <span class="br0">(</span><span class="kw1">defun</span> -<span class="kw1">reverse</span> <span class="br0">(</span><span class="kw1">l</span> &amp;optional acc<span class="br0">)</span>
   <span class="br0">(</span><span class="kw1">if</span> <span class="br0">(</span><span class="kw1">atom</span> <span class="kw1">l</span><span class="br0">)</span>
       acc
       <span class="br0">(</span>-<span class="kw1">reverse</span> <span class="br0">(</span><span class="kw1">cdr</span> <span class="kw1">l</span><span class="br0">)</span> <span class="br0">(</span><span class="kw1">cons</span> <span class="br0">(</span><span class="kw1">car</span> <span class="kw1">l</span><span class="br0">)</span> acc<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>
</pre></div>
<p><a name="Object_systems" id="Object_systems"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Lisp_(programming_language)&amp;action=edit&amp;section=21" title="Edit section: Object systems">edit</a>]</span> <span class="mw-headline">Object systems</span></h2>
<p>Various object systems and models have been built on top of, alongside, or into Lisp, including:</p>
<ul>
<li>ObjectLisp<sup id="cite_ref-13" class="reference"><a href="#cite_note-13" title=""><span>[</span>14<span>]</span></a></sup> or Object Lisp, used by <a href="/wiki/Lisp_Machines_Incorporated" title="Lisp Machines Incorporated" class="mw-redirect">Lisp Machines Incorporated</a> and early versions of Macintosh Common Lisp</li>
<li>LOOPS (Lisp Object-Oriented Programming System) and the later <a href="/wiki/CommonLOOPS" title="CommonLOOPS" class="mw-redirect">CommonLOOPS</a></li>
<li><a href="/wiki/Flavors_(computer_science)" title="Flavors (computer science)" class="mw-redirect">Flavors</a>, built at <a href="/wiki/Massachusetts_Institute_of_Technology" title="Massachusetts Institute of Technology">MIT</a>, and its descendant New Flavors (developed by <a href="/wiki/Symbolics" title="Symbolics">Symbolics</a>).</li>
<li>KR (short for Knowledge Representation), a <a href="/wiki/Constraint" title="Constraint">constraints</a>-based object system developed to aid the writing of Garnet, a GUI library for <a href="/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a>.</li>
<li><a href="/wiki/IntelliCorp_(Software)" title="IntelliCorp (Software)">KEE</a> used an object system called UNITS and integrated it with an <a href="/wiki/Inference_engine" title="Inference engine">inference engine</a>.<sup id="cite_ref-14" class="reference"><a href="#cite_note-14" title=""><span>[</span>15<span>]</span></a></sup> and a <a href="/wiki/Truth_maintenance_systems" title="Truth maintenance systems" class="mw-redirect">truth maintenance system</a> (ATMS).</li>
<li>The <a href="/wiki/Common_Lisp_Object_System" title="Common Lisp Object System">Common Lisp Object System</a>, CLOS. CLOS is an integral part of <a href="/wiki/Common_Lisp" title="Common Lisp">ANSI Common Lisp</a>. CLOS descended from New Flavors and CommonLOOPS. ANSI Common Lisp was the first standardized object-oriented Programming Language (1994, ANSI X3J13).</li>
</ul>
<p><a name="Various_dialects_and_implementations" id="Various_dialects_and_implementations"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Lisp_(programming_language)&amp;action=edit&amp;section=22" title="Edit section: Various dialects and implementations">edit</a>]</span> <span class="mw-headline">Various dialects and implementations</span></h2>
<p>Since the first Lisp in 1958 many implementations of Lisp have been created. Lisp has some standardized dialects like Common Lisp (ANSI), Scheme (ANSI, IEEE) and ISLisp (ISO). There are also a lot of Lisp implementations of Lisp dialects that are based on an informal standard. Lisp dialects like Portable Standard Lisp, Emacs Lisp and InterLisp are in this category. Third there are also many Lisp systems that implement their own dialect of Lisp.</p>
<ul>
<li><a href="/wiki/Lush_(programming_language)" title="Lush (programming language)">Lush (Lisp Universal Shell)</a> is an object-oriented Lisp dialect initially developed as a <a href="/wiki/Scripting_language" title="Scripting language">Scripting language</a>.</li>
<li>M&amp;P <sup id="cite_ref-15" class="reference"><a href="#cite_note-15" title=""><span>[</span>16<span>]</span></a></sup> incorporates mpLISP, a minimum Lisp dialect that enables the development of model-driven systems.</li>
<li><a href="/w/index.php?title=ExperCommonLISP&amp;action=edit&amp;redlink=1" class="new" title="ExperCommonLISP (page does not exist)">ExperCommonLISP</a> was derived from the ExperLISP product available for the Mac. It is no longer available. <sup id="cite_ref-16" class="reference"><a href="#cite_note-16" title=""><span>[</span>17<span>]</span></a></sup></li>
</ul>
<p>For more information about various dialects of Lisp see category <a href="/wiki/Category:Lisp_programming_language_family" title="Category:Lisp programming language family">Lisp programming language family</a>, and <a href="http://www.softwarepreservation.org/projects/LISP/|The" class="external text" title="http://www.softwarepreservation.org/projects/LISP/|The" rel="nofollow">History of Lisp</a>.</p>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Lisp_(programming_language)&amp;action=edit&amp;section=23" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<div class="references-small references-column-count references-column-count-2" style="-moz-column-count:2; column-count:2;">
<ol class="references">
<li id="cite_note-MCCARTHY-0"><b><a href="#cite_ref-MCCARTHY_0-0" title="">^</a></b> <cite style="font-style:normal" class="web" id="CITEREFJohn_McCarthy">John McCarthy. <a href="http://www-formal.stanford.edu/jmc/recursive.html" class="external text" title="http://www-formal.stanford.edu/jmc/recursive.html" rel="nofollow">"Recursive Functions of Symbolic Expressions and Their Computation by Machine, Part I"</a><span class="printonly">. <a href="http://www-formal.stanford.edu/jmc/recursive.html" class="external free" title="http://www-formal.stanford.edu/jmc/recursive.html" rel="nofollow">http://www-formal.stanford.edu/jmc/recursive.html</a></span><span class="reference-accessdate">. Retrieved on 2006-10-13</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Recursive+Functions+of+Symbolic+Expressions+and+Their+Computation+by+Machine%2C+Part+I&amp;rft.atitle=&amp;rft.aulast=John+McCarthy&amp;rft.au=John+McCarthy&amp;rft_id=http%3A%2F%2Fwww-formal.stanford.edu%2Fjmc%2Frecursive.html&amp;rfr_id=info:sid/en.wikipedia.org:Lisp_(programming_language)"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-SMITH-1"><b><a href="#cite_ref-SMITH_1-0" title="">^</a></b> <cite style="font-style:normal" class="web" id="CITEREFDavid_Canfield_Smith">David Canfield Smith. <a href="http://community.computerhistory.org/scc/projects/LISP/stanford/Smith-MLISP-AIM-84.pdf" class="external text" title="http://community.computerhistory.org/scc/projects/LISP/stanford/Smith-MLISP-AIM-84.pdf" rel="nofollow">"MLISP Users Manual"</a><span class="printonly">. <a href="http://community.computerhistory.org/scc/projects/LISP/stanford/Smith-MLISP-AIM-84.pdf" class="external free" title="http://community.computerhistory.org/scc/projects/LISP/stanford/Smith-MLISP-AIM-84.pdf" rel="nofollow">http://community.computerhistory.org/scc/projects/LISP/stanford/Smith-MLISP-AIM-84.pdf</a></span><span class="reference-accessdate">. Retrieved on 2006-10-13</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=MLISP+Users+Manual&amp;rft.atitle=&amp;rft.aulast=David+Canfield+Smith&amp;rft.au=David+Canfield+Smith&amp;rft_id=http%3A%2F%2Fcommunity.computerhistory.org%2Fscc%2Fprojects%2FLISP%2Fstanford%2FSmith-MLISP-AIM-84.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Lisp_(programming_language)"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-2"><b><a href="#cite_ref-2" title="">^</a></b> According to what reported by <a href="/wiki/Paul_Graham" title="Paul Graham">Paul Graham</a> in <i><a href="/wiki/Hackers_%26_Painters" title="Hackers &amp; Painters">Hackers &amp; Painters</a></i>, p. 185, McCarthy said: "Steve Russell said, look, why don't I program this <i>eval</i>..., and I said to him, ho, ho, you're confusing theory with practice, this <i>eval</i> is intended for reading, not for computing. But he went ahead and did it. That is, he compiled the <i>eval</i> in my paper into <a href="/wiki/IBM_704" title="IBM 704">IBM 704</a> machine code, fixing <a href="/wiki/Software_bug" title="Software bug">bug</a> , and then advertised this as a Lisp interpreter, which it certainly was. So at that point Lisp had essentially the form that it has today..."</li>
<li id="cite_note-LEVIN-3"><b><a href="#cite_ref-LEVIN_3-0" title="">^</a></b> <cite style="font-style:normal" class="web" id="CITEREFTim_Hart_and_Mike_Levin">Tim Hart and Mike Levin. <a href="ftp://publications.ai.mit.edu/ai-publications/pdf/AIM-039.pdf" class="external text" title="ftp://publications.ai.mit.edu/ai-publications/pdf/AIM-039.pdf" rel="nofollow">"AI Memo 39-The new compiler"</a><span class="printonly">. <a href="ftp://publications.ai.mit.edu/ai-publications/pdf/AIM-039.pdf" class="external free" title="ftp://publications.ai.mit.edu/ai-publications/pdf/AIM-039.pdf" rel="nofollow">ftp://publications.ai.mit.edu/ai-publications/pdf/AIM-039.pdf</a></span><span class="reference-accessdate">. Retrieved on 2006-10-13</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=AI+Memo+39-The+new+compiler&amp;rft.atitle=&amp;rft.aulast=Tim+Hart+and+Mike+Levin&amp;rft.au=Tim+Hart+and+Mike+Levin&amp;rft_id=ftp%3A%2F%2Fpublications.ai.mit.edu%2Fai-publications%2Fpdf%2FAIM-039.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Lisp_(programming_language)"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-4"><b><a href="#cite_ref-4" title="">^</a></b> The 36-bit word size of the <a href="/wiki/PDP-6" title="PDP-6">PDP-6</a>/<a href="/wiki/PDP-10" title="PDP-10">PDP-10</a> was influenced by the usefulness of having two Lisp 18-bit pointers in a single word. "The PDP-6 project started in early 1963, as a 24-bit machine. It grew to 36 bits for LISP, a design goal." <a href="http://groups.google.com/group/alt.folklore.computers/browse_thread/thread/6e5602ce733d0ec/17597705ae289112" class="external autonumber" title="http://groups.google.com/group/alt.folklore.computers/browse_thread/thread/6e5602ce733d0ec/17597705ae289112" rel="nofollow">[1]</a></li>
<li id="cite_note-5"><b><a href="#cite_ref-5" title="">^</a></b> <a href="http://gigamonkeys.com/blog/2007/05/26/pcl-third-printing.html" class="external text" title="http://gigamonkeys.com/blog/2007/05/26/pcl-third-printing.html" rel="nofollow">Practical Common Lisp going into 3rd printing</a></li>
<li id="cite_note-6"><b><a href="#cite_ref-6" title="">^</a></b> <a href="http://gigamonkeys.com/book/" class="external text" title="http://gigamonkeys.com/book/" rel="nofollow">Practical Common Lisp</a></li>
<li id="cite_note-7"><b><a href="#cite_ref-7" title="">^</a></b> <cite style="font-style:normal" class="web"><a href="http://wiki.alu.org/The_Road_To_Lisp_Survey" class="external text" title="http://wiki.alu.org/The_Road_To_Lisp_Survey" rel="nofollow">"The Road To Lisp Survey"</a><span class="printonly">. <a href="http://wiki.alu.org/The_Road_To_Lisp_Survey" class="external free" title="http://wiki.alu.org/The_Road_To_Lisp_Survey" rel="nofollow">http://wiki.alu.org/The_Road_To_Lisp_Survey</a></span><span class="reference-accessdate">. Retrieved on 2006-10-13</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=The+Road+To+Lisp+Survey&amp;rft.atitle=&amp;rft_id=http%3A%2F%2Fwiki.alu.org%2FThe_Road_To_Lisp_Survey&amp;rfr_id=info:sid/en.wikipedia.org:Lisp_(programming_language)"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-8"><b><a href="#cite_ref-8" title="">^</a></b> <a href="http://www.faqs.org/docs/artu/ch14s05.html" class="external text" title="http://www.faqs.org/docs/artu/ch14s05.html" rel="nofollow">Trends for the Future</a></li>
<li id="cite_note-LEVIN2-9"><b><a href="#cite_ref-LEVIN2_9-0" title="">^</a></b> <cite style="font-style:normal" class="web"><a href="http://www.catb.org/~esr/jargon/html/L/LISP.html" class="external text" title="http://www.catb.org/~esr/jargon/html/L/LISP.html" rel="nofollow">"The Jargon File - Lisp"</a><span class="printonly">. <a href="http://www.catb.org/~esr/jargon/html/L/LISP.html" class="external free" title="http://www.catb.org/~esr/jargon/html/L/LISP.html" rel="nofollow">http://www.catb.org/~esr/jargon/html/L/LISP.html</a></span><span class="reference-accessdate">. Retrieved on 2006-10-13</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=The+Jargon+File+-+Lisp&amp;rft.atitle=&amp;rft_id=http%3A%2F%2Fwww.catb.org%2F%7Eesr%2Fjargon%2Fhtml%2FL%2FLISP.html&amp;rfr_id=info:sid/en.wikipedia.org:Lisp_(programming_language)"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-10"><b><a href="#cite_ref-10" title="">^</a></b> NB: a so-called "dotted list" is only one kind of "improper list". The other kind is the "circular list" where the cons cells form a loop. Typically this is represented using #n=(...) to represent the target cons cell that will have multiple references, and #n# is used to refer to this cons. For instance, (#1=(a b) #1#) would normally be printed as ((a b) a b) (without circular structure printing enabled), but makes the reuse of the cons cell clear. #1=(a . #1#) cannot normally be printed as it is circular, the CDR of the cons cell defined by #1= is itself.</li>
<li id="cite_note-11"><b><a href="#cite_ref-11" title="">^</a></b> <a href="http://www.lispworks.com/documentation/HyperSpec/Body/03_bbc.htm" class="external text" title="http://www.lispworks.com/documentation/HyperSpec/Body/03_bbc.htm" rel="nofollow">3.2.2.3 Semantic Constraints</a> in <a href="http://www.lispworks.com/documentation/HyperSpec/Front/index.htm" class="external text" title="http://www.lispworks.com/documentation/HyperSpec/Front/index.htm" rel="nofollow"><i>Common Lisp HyperSpec</i></a></li>
<li id="cite_note-12"><b><a href="#cite_ref-12" title="">^</a></b> 4.3. Control Abstraction (Recursion vs. Iteration) in <a href="http://www.cs.umd.edu/~nau/cmsc421/norvig-lisp-style.pdf" class="external text" title="http://www.cs.umd.edu/~nau/cmsc421/norvig-lisp-style.pdf" rel="nofollow">Tutorial on Good Lisp Programming Style</a> by <a href="/wiki/Kent_Pitman" title="Kent Pitman">Pitman</a> and <a href="/wiki/Peter_Norvig" title="Peter Norvig">Norvig</a>, August, 1993.</li>
<li id="cite_note-13"><b><a href="#cite_ref-13" title="">^</a></b> pg 17 of Bobrow 1986</li>
<li id="cite_note-14"><b><a href="#cite_ref-14" title="">^</a></b> Veitch, p 108, 1988</li>
<li id="cite_note-15"><b><a href="#cite_ref-15" title="">^</a></b> www.hdolder.com/ARTEC_EN.htm</li>
<li id="cite_note-16"><b><a href="#cite_ref-16" title="">^</a></b> <a href="http://www.byte.com/art/9608/sec4/art2.htm" class="external free" title="http://www.byte.com/art/9608/sec4/art2.htm" rel="nofollow">http://www.byte.com/art/9608/sec4/art2.htm</a></li>
</ol>
</div>
<p><a name="Further_reading" id="Further_reading"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Lisp_(programming_language)&amp;action=edit&amp;section=24" title="Edit section: Further reading">edit</a>]</span> <span class="mw-headline">Further reading</span></h2>
<div class="references-small" style="margin-left:1.5em;">
<ul>
<li><cite style="font-style:normal" class="web" id="CITEREFMcCarthy1979">McCarthy, John (1979-02-12). <a href="http://www-formal.stanford.edu/jmc/history/lisp/node3.html" class="external text" title="http://www-formal.stanford.edu/jmc/history/lisp/node3.html" rel="nofollow">"The implementation of Lisp"</a>. <i>History of Lisp</i>. Stanford University<span class="printonly">. <a href="http://www-formal.stanford.edu/jmc/history/lisp/node3.html" class="external free" title="http://www-formal.stanford.edu/jmc/history/lisp/node3.html" rel="nofollow">http://www-formal.stanford.edu/jmc/history/lisp/node3.html</a></span><span class="reference-accessdate">. Retrieved on 2008-10-17</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=The+implementation+of+Lisp&amp;rft.atitle=History+of+Lisp&amp;rft.aulast=McCarthy&amp;rft.aufirst=John&amp;rft.au=McCarthy%2C+John&amp;rft.date=1979-02-12&amp;rft.pub=Stanford+University&amp;rft_id=http%3A%2F%2Fwww-formal.stanford.edu%2Fjmc%2Fhistory%2Flisp%2Fnode3.html&amp;rfr_id=info:sid/en.wikipedia.org:Lisp_(programming_language)"><span style="display: none;">&#160;</span></span></li>
<li><cite style="font-style:normal">Steele, Jr., Guy L.; Richard P. Gabriel (1993). "<a href="http://www.dreamsongs.com/NewFiles/HOPL2-Uncut.pdf" class="external text" title="http://www.dreamsongs.com/NewFiles/HOPL2-Uncut.pdf" rel="nofollow">The evolution of Lisp</a>". <i>The second ACM SIGPLAN conference on History of programming languages</i>: 231 - 270, New York, NY: ACM, <a href="/wiki/Special:BookSources/0897915704" class="internal">ISBN 0897915704</a>. <span class="reference-accessdate">Retrieved on <span class="mw-formatted-date" title="2008-10-17"><a href="/wiki/2008" title="2008">2008</a>-<a href="/wiki/October_17" title="October 17">10-17</a></span></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=proceeding&amp;rft.btitle=The+second+ACM+SIGPLAN+conference+on+History+of+programming+languages&amp;rft.atitle=The+evolution+of+Lisp&amp;rft.aulast=Steele%2C+Jr.&amp;rft.aufirst=Guy+L.&amp;rft.date=1993&amp;rft.pub=ACM%2C+ISBN+0897915704&amp;rft.place=New+York%2C+NY&amp;rft.pages=231+-+270&amp;rft_id=http%3A%2F%2Fwww.dreamsongs.com%2FNewFiles%2FHOPL2-Uncut.pdf"><span style="display: none;">&#160;</span></span></li>
<li><cite style="font-style:normal" class="" id="CITEREFVeitch1998">Veitch, Jim (1998), "A history and description of CLOS", in Salus, Peter H, <i>Handbook of programming languages</i>, <b>Volume IV, Functional and logic programming languages</b> (first ed.), Indianapolis, IN: Macmillan Technical Publishing, pp.&#160;107 - 158, <a href="/wiki/Special:BookSources/1578700116" class="internal">ISBN 1578700116</a></cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=A+history+and+description+of+CLOS&amp;rft.atitle=Handbook+of+programming+languages&amp;rft.aulast=Veitch&amp;rft.aufirst=Jim&amp;rft.au=Veitch%2C+Jim&amp;rft.date=1998&amp;rft.volume=Volume+IV%2C+Functional+and+logic+programming+languages&amp;rft.pages=pp.%26nbsp%3B107+-+158&amp;rft.edition=first&amp;rft.place=Indianapolis%2C+IN&amp;rft.pub=Macmillan+Technical+Publishing&amp;rft.isbn=1578700116&amp;rfr_id=info:sid/en.wikipedia.org:Lisp_(programming_language)"><span style="display: none;">&#160;</span></span></li>
<li><i><a href="/wiki/Structure_and_Interpretation_of_Computer_Programs" title="Structure and Interpretation of Computer Programs">Structure and Interpretation of Computer Programs</a></i>, by <a href="/wiki/Harold_Abelson" title="Harold Abelson" class="mw-redirect">Harold Abelson</a>, <a href="/wiki/Gerald_Jay_Sussman" title="Gerald Jay Sussman">Gerald Jay Sussman</a> and <a href="/w/index.php?title=Julie_Sussman&amp;action=edit&amp;redlink=1" class="new" title="Julie Sussman (page does not exist)">Julie Sussman</a>. 1996 (2nd edition), MIT Press; <a href="/wiki/Special:BookSources/0262011530" class="internal">ISBN 0262011530</a></li>
<li><a href="http://www.gnu.org/gnu/rms-lisp.html" class="external text" title="http://www.gnu.org/gnu/rms-lisp.html" rel="nofollow">My Lisp Experiences and the Development of GNU Emacs</a>, <a href="/wiki/Transcript" title="Transcript">transcript</a> of <a href="/wiki/Richard_Stallman" title="Richard Stallman">Richard Stallman</a>'s speech, <span class="mw-formatted-date" title="2002-10-28"><a href="/wiki/Oct_28" title="Oct 28" class="mw-redirect">28 Oct</a> <a href="/wiki/2002" title="2002">2002</a></span>, at the <a href="/w/index.php?title=International_Lisp_Conference&amp;action=edit&amp;redlink=1" class="new" title="International Lisp Conference (page does not exist)">International Lisp Conference</a></li>
<li><a href="/wiki/Paul_Graham" title="Paul Graham">Paul Graham</a>, <i><a href="/wiki/Hackers_%26_Painters" title="Hackers &amp; Painters">Hackers &amp; Painters. Big Ideas from the Computer Age</a></i>, 2004, O'Reilly, <a href="/wiki/Special:BookSources/0596006624" class="internal">ISBN 0-596-00662-4</a></li>
</ul>
</div>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Lisp_(programming_language)&amp;action=edit&amp;section=25" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<table class="metadata plainlinks mbox-small" style="border:1px solid #aaa; background-color:#f9f9f9;">
<tr>
<td class="mbox-image"><a href="http://en.wikiquote.org/wiki/Special:Search/Lisp_(programming_language)" title="q:Special:Search/Lisp (programming language)"><img alt="Sister project" src="http://upload.wikimedia.org/wikipedia/commons/thumb/d/d6/Wikiquote-logo-en.svg/40px-Wikiquote-logo-en.svg.png" width="40" height="40" border="0" /></a></td>
<td class="mbox-text" style=""><a href="/wiki/Wikiquote" title="Wikiquote">Wikiquote</a> has a collection of quotations related to: <i><b><a href="http://en.wikiquote.org/wiki/Lisp_programming_language" class="extiw" title="q:Lisp programming language">Lisp</a></b></i></td>
</tr>
</table>
<ul>
<li><a href="/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a></li>
<li><a href="/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme (programming language)</a></li>
<li><a href="/wiki/Clojure" title="Clojure">Clojure</a></li>
<li><a href="/wiki/Object_Lisp" title="Object Lisp">Object Lisp</a></li>
<li><a href="/wiki/Artificial_intelligence" title="Artificial intelligence">Artificial intelligence</a></li>
<li><a href="/wiki/Maxima_(software)" title="Maxima (software)">Maxima</a></li>
<li><a href="/wiki/Fexpr" title="Fexpr">Fexpr</a></li>
<li><a href="/wiki/Mod_lisp" title="Mod lisp">mod_lisp</a></li>
</ul>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Lisp_(programming_language)&amp;action=edit&amp;section=26" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<table class="metadata plainlinks ambox ambox-style" style="">
<tr>
<td class="mbox-image">
<div style="width: 52px;"><a href="/wiki/File:Ambox_style.png" class="image" title="Ambox style.png"><img alt="" src="http://upload.wikimedia.org/wikipedia/en/d/d6/Ambox_style.png" width="40" height="40" border="0" /></a></div>
</td>
<td class="mbox-text" style="">This article's <a href="/wiki/Wikipedia:External_links" title="Wikipedia:External links">external links</a> <b>may not follow Wikipedia's <a href="/wiki/Wikipedia:What_Wikipedia_is_not#Wikipedia_is_not_a_mirror_or_a_repository_of_links.2C_images.2C_or_media_files" title="Wikipedia:What Wikipedia is not">content policies</a> or <a href="/wiki/Wikipedia:External_links" title="Wikipedia:External links">guidelines</a></b>. Please <a href="http://en.wikipedia.org/w/index.php?title=Lisp_(programming_language)&amp;action=edit" class="external text" title="http://en.wikipedia.org/w/index.php?title=Lisp_(programming_language)&amp;action=edit" rel="nofollow">improve this article</a> by removing excessive or inappropriate external links.</td>
</tr>
</table>
<ul>
<li><a href="http://www-formal.stanford.edu/jmc/history/lisp/lisp.html" class="external text" title="http://www-formal.stanford.edu/jmc/history/lisp/lisp.html" rel="nofollow">History of Lisp</a> <a href="/wiki/John_McCarthy_(computer_scientist)" title="John McCarthy (computer scientist)">John McCarthy</a>'s history of 12 Feb 79</li>
<li><a href="http://www8.informatik.uni-erlangen.de/html/lisp-enter.html" class="external text" title="http://www8.informatik.uni-erlangen.de/html/lisp-enter.html" rel="nofollow">Lisp History</a> - Herbert Stoyan's history compiled from the documents (acknowledged by McCarthy as more complete than his own, see: <a href="http://www-formal.stanford.edu/jmc/history/" class="external text" title="http://www-formal.stanford.edu/jmc/history/" rel="nofollow">McCarthy's history links</a>)</li>
<li><a href="http://www.cbi.umn.edu/oh/display.phtml?id=92" class="external text" title="http://www.cbi.umn.edu/oh/display.phtml?id=92" rel="nofollow">Oral history interview with John McCarthy</a> at <a href="/wiki/Charles_Babbage_Institute" title="Charles Babbage Institute">Charles Babbage Institute</a>, University of Minnesota, Minneapolis. McCarthy discusses his role in the development of time-sharing at the Massachusetts Institute of Technology. He also describes his work in artificial intelligence (AI) funded by the Advanced Research Projects Agency, including logic-based AI (LISP) and robotics.</li>
<li><a href="http://lispers.org/" class="external text" title="http://lispers.org/" rel="nofollow">Lisp: made with secret alien technology</a> – Selection of Lisp quotes by eminent Lispers</li>
<li><a href="news://comp.lang.lisp" class="external autonumber" title="news://comp.lang.lisp" rel="nofollow">[9]</a> <a href="/wiki/Usenet" title="Usenet">Usenet</a> <a href="/wiki/Newsgroup" title="Newsgroup" class="mw-redirect">newsgroup</a></li>
<li><a href="http://lisp.org" class="external text" title="http://lisp.org" rel="nofollow">Association of Lisp Users</a></li>
<li><a href="http://wiki.alu.org/" class="external text" title="http://wiki.alu.org/" rel="nofollow">Association of Lisp Users Wiki</a>, a general discussion of things Lisp</li>
<li><a href="http://community.computerhistory.org/scc/projects/LISP/" class="external text" title="http://community.computerhistory.org/scc/projects/LISP/" rel="nofollow">History of LISP at the Computer History Museum</a></li>
<li><a href="http://www.lispmachine.net" class="external text" title="http://www.lispmachine.net" rel="nofollow">LispMachine.net - Lisp books and information</a></li>
<li><a href="http://paulgraham.com/onlisptext.html?asdf" class="external text" title="http://paulgraham.com/onlisptext.html?asdf" rel="nofollow">On Lisp</a>, a free book by <a href="/wiki/Paul_Graham" title="Paul Graham">Paul Graham</a></li>
<li><a href="http://se-radio.net/podcast/2008-01/episode-84-dick-gabriel-lisp" class="external text" title="http://se-radio.net/podcast/2008-01/episode-84-dick-gabriel-lisp" rel="nofollow">Interview</a> with <a href="/wiki/Richard_P._Gabriel" title="Richard P. Gabriel">Richard P. Gabriel</a> (Podcast)</li>
<li><a href="http://common-lisp.net/project/lispbox/" class="external text" title="http://common-lisp.net/project/lispbox/" rel="nofollow">Lisp in a Box</a>, a useful package for lisp beginners - for Windows or Unix</li>
<li><a href="http://www.gigamonkeys.com/book/" class="external text" title="http://www.gigamonkeys.com/book/" rel="nofollow">Practical Common Lisp</a>, a free book by Peter Seibel</li>
<li><a href="http://www.faqs.org/faqs/lisp-faq/" class="external text" title="http://www.faqs.org/faqs/lisp-faq/" rel="nofollow">LISP FAQ</a></li>
</ul>


<!-- 
NewPP limit report
Preprocessor node count: 4907/1000000
Post-expand include size: 44451/2048000 bytes
Template argument size: 15830/2048000 bytes
Expensive parser function count: 4/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:18016-0!1!0!default!!en!2 and timestamp 20090403015959 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Lisp_(programming_language)">http://en.wikipedia.org/wiki/Lisp_(programming_language)</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Dynamically-typed_programming_languages" title="Category:Dynamically-typed programming languages">Dynamically-typed programming languages</a></span> | <span dir='ltr'><a href="/wiki/Category:Functional_languages" title="Category:Functional languages">Functional languages</a></span> | <span dir='ltr'><a href="/wiki/Category:Lisp_programming_language" title="Category:Lisp programming language">Lisp programming language</a></span> | <span dir='ltr'><a href="/wiki/Category:Lisp_programming_language_family" title="Category:Lisp programming language family">Lisp programming language family</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_example_Lisp_code" title="Category:Articles with example Lisp code">Articles with example Lisp code</a></span> | <span dir='ltr'><a href="/wiki/Category:American_inventions" title="Category:American inventions">American inventions</a></span></div><div id="mw-hidden-catlinks" class="mw-hidden-cats-hidden">Hidden categories:&#32;<span dir='ltr'><a href="/wiki/Category:Vague_or_ambiguous_time" title="Category:Vague or ambiguous time">Vague or ambiguous time</a></span> | <span dir='ltr'><a href="/wiki/Category:All_articles_with_unsourced_statements" title="Category:All articles with unsourced statements">All articles with unsourced statements</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_unsourced_statements_since_March_2009" title="Category:Articles with unsourced statements since March 2009">Articles with unsourced statements since March 2009</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_unsourced_statements_since_November_2008" title="Category:Articles with unsourced statements since November 2008">Articles with unsourced statements since November 2008</a></span> | <span dir='ltr'><a href="/wiki/Category:Wikipedia_external_links_cleanup" title="Category:Wikipedia external links cleanup">Wikipedia external links cleanup</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Lisp_(programming_language)" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Lisp_(programming_language)" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Lisp_(programming_language)&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Lisp_(programming_language)&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Lisp_(programming_language)" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Lisp_(programming_language)" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Lisp_(programming_language)" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Lisp_(programming_language)&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Lisp_(programming_language)&amp;oldid=281417905" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Lisp_(programming_language)&amp;id=281417905">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-ar"><a href="http://ar.wikipedia.org/wiki/%D9%84%D9%8A%D8%B3%D8%A8">العربية</a></li>
				<li class="interwiki-an"><a href="http://an.wikipedia.org/wiki/Lisp">Aragonés</a></li>
				<li class="interwiki-bn"><a href="http://bn.wikipedia.org/wiki/%E0%A6%B2%E0%A6%BF%E0%A6%B8%E0%A7%8D%E0%A6%AA_(%E0%A6%AA%E0%A7%8D%E0%A6%B0%E0%A7%8B%E0%A6%97%E0%A7%8D%E0%A6%B0%E0%A6%BE%E0%A6%AE%E0%A6%BF%E0%A6%82_%E0%A6%AD%E0%A6%BE%E0%A6%B7%E0%A6%BE)">বাংলা</a></li>
				<li class="interwiki-bs"><a href="http://bs.wikipedia.org/wiki/Lisp_programski_jezik">Bosanski</a></li>
				<li class="interwiki-bg"><a href="http://bg.wikipedia.org/wiki/Lisp">Български</a></li>
				<li class="interwiki-ca"><a href="http://ca.wikipedia.org/wiki/Lisp">Català</a></li>
				<li class="interwiki-cs"><a href="http://cs.wikipedia.org/wiki/Lisp">Česky</a></li>
				<li class="interwiki-cy"><a href="http://cy.wikipedia.org/wiki/Lisp">Cymraeg</a></li>
				<li class="interwiki-da"><a href="http://da.wikipedia.org/wiki/Lisp">Dansk</a></li>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/LISP">Deutsch</a></li>
				<li class="interwiki-et"><a href="http://et.wikipedia.org/wiki/LISP">Eesti</a></li>
				<li class="interwiki-el"><a href="http://el.wikipedia.org/wiki/Lisp">Ελληνικά</a></li>
				<li class="interwiki-es"><a href="http://es.wikipedia.org/wiki/Lisp">Español</a></li>
				<li class="interwiki-eo"><a href="http://eo.wikipedia.org/wiki/LISP_(programlingvo)">Esperanto</a></li>
				<li class="interwiki-eu"><a href="http://eu.wikipedia.org/wiki/Lisp">Euskara</a></li>
				<li class="interwiki-fa"><a href="http://fa.wikipedia.org/wiki/%D9%84%DB%8C%D8%B3%D9%BE">فارسی</a></li>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Lisp">Français</a></li>
				<li class="interwiki-ga"><a href="http://ga.wikipedia.org/wiki/LISP">Gaeilge</a></li>
				<li class="interwiki-gl"><a href="http://gl.wikipedia.org/wiki/Lisp">Galego</a></li>
				<li class="interwiki-ko"><a href="http://ko.wikipedia.org/wiki/%EB%A6%AC%EC%8A%A4%ED%94%84">한국어</a></li>
				<li class="interwiki-hr"><a href="http://hr.wikipedia.org/wiki/Lisp_(programski_jezik)">Hrvatski</a></li>
				<li class="interwiki-it"><a href="http://it.wikipedia.org/wiki/Lisp">Italiano</a></li>
				<li class="interwiki-he"><a href="http://he.wikipedia.org/wiki/LISP">עברית</a></li>
				<li class="interwiki-lv"><a href="http://lv.wikipedia.org/wiki/Lisp">Latviešu</a></li>
				<li class="interwiki-lt"><a href="http://lt.wikipedia.org/wiki/Lisp">Lietuvių</a></li>
				<li class="interwiki-hu"><a href="http://hu.wikipedia.org/wiki/Lisp">Magyar</a></li>
				<li class="interwiki-ml"><a href="http://ml.wikipedia.org/wiki/%E0%B4%B2%E0%B4%BF%E0%B4%B8%E0%B5%8D%E0%B4%AA%E0%B5%8D">മലയാളം</a></li>
				<li class="interwiki-ms"><a href="http://ms.wikipedia.org/wiki/LISP">Bahasa Melayu</a></li>
				<li class="interwiki-nl"><a href="http://nl.wikipedia.org/wiki/Lisp_(programmeertaal)">Nederlands</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/LISP">日本語</a></li>
				<li class="interwiki-no"><a href="http://no.wikipedia.org/wiki/Lisp">‪Norsk (bokmål)‬</a></li>
				<li class="interwiki-pl"><a href="http://pl.wikipedia.org/wiki/Lisp">Polski</a></li>
				<li class="interwiki-pt"><a href="http://pt.wikipedia.org/wiki/Lisp">Português</a></li>
				<li class="interwiki-ro"><a href="http://ro.wikipedia.org/wiki/LISP">Română</a></li>
				<li class="interwiki-ru"><a href="http://ru.wikipedia.org/wiki/%D0%9B%D0%B8%D1%81%D0%BF">Русский</a></li>
				<li class="interwiki-sq"><a href="http://sq.wikipedia.org/wiki/Lisp">Shqip</a></li>
				<li class="interwiki-simple"><a href="http://simple.wikipedia.org/wiki/LISP">Simple English</a></li>
				<li class="interwiki-sk"><a href="http://sk.wikipedia.org/wiki/Lisp">Slovenčina</a></li>
				<li class="interwiki-sl"><a href="http://sl.wikipedia.org/wiki/Lisp_(programski_jezik)">Slovenščina</a></li>
				<li class="interwiki-sr"><a href="http://sr.wikipedia.org/wiki/Lisp">Српски / Srpski</a></li>
				<li class="interwiki-sh"><a href="http://sh.wikipedia.org/wiki/Lisp">Srpskohrvatski / Српскохрватски</a></li>
				<li class="interwiki-fi"><a href="http://fi.wikipedia.org/wiki/Lisp">Suomi</a></li>
				<li class="interwiki-sv"><a href="http://sv.wikipedia.org/wiki/Lisp">Svenska</a></li>
				<li class="interwiki-th"><a href="http://th.wikipedia.org/wiki/%E0%B8%A0%E0%B8%B2%E0%B8%A9%E0%B8%B2%E0%B8%A5%E0%B8%B4%E0%B8%AA%E0%B8%9B%E0%B9%8C">ไทย</a></li>
				<li class="interwiki-tg"><a href="http://tg.wikipedia.org/wiki/%D0%9B%D0%B8%D1%81%D0%BF">Тоҷикӣ</a></li>
				<li class="interwiki-tr"><a href="http://tr.wikipedia.org/wiki/Lisp">Türkçe</a></li>
				<li class="interwiki-uk"><a href="http://uk.wikipedia.org/wiki/LISP">Українська</a></li>
				<li class="interwiki-bat-smg"><a href="http://bat-smg.wikipedia.org/wiki/Lisp">Žemaitėška</a></li>
				<li class="interwiki-zh"><a href="http://zh.wikipedia.org/wiki/LISP">中文</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 3 April 2009, at 01:59.</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv175 in 1.816 secs. --></body></html>
