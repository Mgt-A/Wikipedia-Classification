<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Self-modifying code,Articles with unsourced statements since March 2008,Articles with unsourced statements since December 2008,1970&#039;s,4GL,ActionScript,Algorithm,Algorithmic efficiency,Alter,Apple II,Assembler" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Self-modifying_code&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Self-modifying_code&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Self-modifying code - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Self-modifying_code";
		var wgTitle = "Self-modifying code";
		var wgAction = "view";
		var wgArticleId = "217647";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 277361213;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Self-modifying_code skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Self-modifying code</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<p>In <a href="/wiki/Computer_science" title="Computer science">computer science</a>, <b>self-modifying code</b> is <a href="/wiki/Code_(computer_programming)" title="Code (computer programming)" class="mw-redirect">code</a> that alters its own <a href="/wiki/Instruction_(computer_science)" title="Instruction (computer science)">instructions</a> while it is <a href="/wiki/Execution_(computers)" title="Execution (computers)" class="mw-redirect">executing</a> - usually to reduce the <a href="/wiki/Instruction_path_length" title="Instruction path length">instruction path length</a> and improve <a href="/wiki/Performance" title="Performance">performance</a> or simply to reduce otherwise repetitively similar code thus simplify maintenance. Self modification is an alternative to the method of 'flag setting' and conditional program branching, used primarily to reduce the number of times a condition needs to be tested for.</p>
<p>The method is frequently used for conditionally invoking <a href="/wiki/Test/debugging" title="Test/debugging" class="mw-redirect">test/debugging</a> code without requiring additional <a href="/wiki/Overhead" title="Overhead">overhead</a> for every <a href="/wiki/Input/output" title="Input/output">input/output</a> cycle and also in just-in-time (<a href="/wiki/JIT" title="JIT">JIT</a>) compilers.</p>
<p>The modifications may be performed:-</p>
<ul>
<li><b>only during initialization</b> - based on input parameters (when the process is more commonly described as software '<a href="/wiki/Computer_configuration" title="Computer configuration">configuration</a>' and is somewhat analagous, in hardware terms, to setting <a href="/wiki/Jumper_(computing)" title="Jumper (computing)">jumpers</a> for <a href="/wiki/Printed_circuit_board" title="Printed circuit board">printed circuit boards</a>). Alteration of program entry <a href="/wiki/Pointer" title="Pointer" class="mw-redirect">pointers</a> is an equivalent indirect method of self-modification, but requiring the co-existence of one or more alternative instruction paths, increasing the <a href="/wiki/Binary_file" title="Binary file">program size</a>.</li>
<li><b>throughout execution</b> ('on-the-fly') - based on particular program states that have been reached during the execution</li>
</ul>
<p>In either case, the modifications may be performed directly to the <a href="/wiki/Machine_code" title="Machine code">machine code</a> instructions themselves, by overlaying new instructions over the existing ones (for example: altering a compare and branch to an <a href="/wiki/Unconditional_branch" title="Unconditional branch" class="mw-redirect">unconditional branch</a> or alternatively a '<a href="/wiki/Noop" title="Noop" class="mw-redirect">noop</a>').</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Application_in_low_and_high_level_languages"><span class="tocnumber">1</span> <span class="toctext">Application in low and high level languages</span></a>
<ul>
<li class="toclevel-2"><a href="#Assembly_language"><span class="tocnumber">1.1</span> <span class="toctext">Assembly language</span></a></li>
<li class="toclevel-2"><a href="#High_level_languages"><span class="tocnumber">1.2</span> <span class="toctext">High level languages</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#History"><span class="tocnumber">2</span> <span class="toctext">History</span></a></li>
<li class="toclevel-1"><a href="#Usage"><span class="tocnumber">3</span> <span class="toctext">Usage</span></a>
<ul>
<li class="toclevel-2"><a href="#Optimizing_a_state-dependent_loop"><span class="tocnumber">3.1</span> <span class="toctext">Optimizing a state-dependent loop</span></a></li>
<li class="toclevel-2"><a href="#Use_as_camouflage"><span class="tocnumber">3.2</span> <span class="toctext">Use as camouflage</span></a></li>
<li class="toclevel-2"><a href="#Self-referential_machine_learning_systems"><span class="tocnumber">3.3</span> <span class="toctext">Self-referential machine learning systems</span></a></li>
<li class="toclevel-2"><a href="#Operating_systems"><span class="tocnumber">3.4</span> <span class="toctext">Operating systems</span></a></li>
<li class="toclevel-2"><a href="#Just-in-time_compilers"><span class="tocnumber">3.5</span> <span class="toctext">Just-in-time compilers</span></a></li>
<li class="toclevel-2"><a href="#Interaction_of_cache_and_self-modifying_code"><span class="tocnumber">3.6</span> <span class="toctext">Interaction of cache and self-modifying code</span></a></li>
<li class="toclevel-2"><a href="#Henry_Massalin.27s_Synthesis_kernel"><span class="tocnumber">3.7</span> <span class="toctext">Henry Massalin's Synthesis kernel</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Advantages"><span class="tocnumber">4</span> <span class="toctext">Advantages</span></a></li>
<li class="toclevel-1"><a href="#Disadvantages"><span class="tocnumber">5</span> <span class="toctext">Disadvantages</span></a></li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">6</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">7</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">8</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Application_in_low_and_high_level_languages" id="Application_in_low_and_high_level_languages"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Self-modifying_code&amp;action=edit&amp;section=1" title="Edit section: Application in low and high level languages">edit</a>]</span> <span class="mw-headline">Application in low and high level languages</span></h2>
<p>Self-modification can be accomplished in a variety of ways depending upon the programming language and its support for pointers and/or access to dynamic compiler or interpreter 'engines':-</p>
<ul>
<li><b>overlay of existing instructions</b> (or parts of instructions such as opcode, register, flags or address) or</li>
<li><b>direct creation of whole instructions</b> or sequences of instructions in memory</li>
<li><b>creating or modification of <a href="/wiki/Source_code" title="Source code">source code</a> statements</b> followed by a 'mini compile' or a dynamic interpretation</li>
<li><b>creating an entire program dynamically</b> and then executing it</li>
</ul>
<p><a name="Assembly_language" id="Assembly_language"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Self-modifying_code&amp;action=edit&amp;section=2" title="Edit section: Assembly language">edit</a>]</span> <span class="mw-headline">Assembly language</span></h3>
<p>Self-modifying code is quite straightforward to implement when using <a href="/wiki/Assembly_language" title="Assembly language">assembly language</a>. Instructions can be dynamically created in <a href="/wiki/Memory" title="Memory">memory</a> (or else overlaid over existing code in non-protected program storage), in a sequence equivalent to the ones that a standard compiler may generate as the <a href="/wiki/Object_code" title="Object code" class="mw-redirect">object code</a> (/<a href="/wiki/Binary_file" title="Binary file">binary file</a>). With modern processors, there can be unintended side effects on the CPU <a href="/wiki/CPU_cache" title="CPU cache">cache</a> that have to be considered. The method was frequently used for testing 'first time' conditions, as in this suitably commented <a href="/wiki/IBM/360" title="IBM/360" class="mw-redirect">IBM/360</a> <a href="/wiki/Assembler" title="Assembler">Assembler</a> example. It uses instruction overlay to reduce the <a href="/wiki/Instruction_path_length" title="Instruction path length">instruction path length</a> by (N x 1)-1 where N is the number of records on the file (-1 being the <a href="/wiki/Overhead" title="Overhead">overhead</a> to perform the overlay).</p>
<pre>
<code>     SUBRTN CLI    SUBRTN,X'95'       FIRST TIME HERE?  (this instruction is immediately overlaid during 1st time through)
            BNE    OPENED                  (WILL DROP THROUGH IF CLI OPCODE, = x'95' HAS NOT BEEN CHANGED YET)
            MVC    SUBRTN(4),JUMP     YES, OVERLAY THE TEST BY THE MOVE OF AN UNCONDITIONAL BRANCH (same length machine code)
            OPEN   INPUT                      and OPEN THE INPUT FILE since its first time through here
     JUMP   B      OPENED             THIS 4-BYTE UNCONDITIONAL BRANCH INSTRUCTION OVERLAYS THE 4-BYTE INSTRUCTION AT LABEL 'TEST' 
     OPENED GET    INPUT              NORMAL PROCESSING RESUMES HERE
            ...
</code>
</pre>
<p>(Since the replacement unconditional branch is also slightly faster than a compare instruction, as well as reducing the overall path length, the saved difference in timing between the two instructions is magnified by a factor of N. The 'jump' instruction retains locality of reference and much higher 'visibility' by its close proximity to the overwritten instruction, despite adding an unecessary extra instruction after the OPEN) In later Operating systems for programs residing in <a href="/wiki/Memory_protection" title="Memory protection">protected storage</a> this technique could not be used and so changing the pointer to the <a href="/wiki/Subroutine" title="Subroutine">subroutine</a> would be used instead. The pointer would reside in <a href="/wiki/Dynamic_storage" title="Dynamic storage" class="mw-redirect">dynamic storage</a> and could be altered at will after the first pass to bypass the OPEN (Having to load a pointer first instead of a direct branch &amp; link to the subroutine would add N instructions to the path length - but there would be a corresponding reduction of N for the unconditional branch that would no longer be required).</p>
<p><a name="High_level_languages" id="High_level_languages"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Self-modifying_code&amp;action=edit&amp;section=3" title="Edit section: High level languages">edit</a>]</span> <span class="mw-headline">High level languages</span></h3>
<p>Some <a href="/wiki/High_level_language" title="High level language" class="mw-redirect">high level languages</a>/ <a href="/wiki/Interpreter_(computing)" title="Interpreter (computing)">interpreters</a> such as <a href="/wiki/SNOBOL4" title="SNOBOL4" class="mw-redirect">SNOBOL4</a>, the <a href="/wiki/Lisp_programming_language" title="Lisp programming language" class="mw-redirect">Lisp programming language</a>, the <a href="/wiki/Alter" title="Alter">ALTER verb</a> in <a href="/wiki/COBOL" title="COBOL">COBOL</a> and the <a href="/wiki/Eval" title="Eval">eval</a> statement in <a href="/wiki/Javascript" title="Javascript" class="mw-redirect">javascript</a> actively support self-modification. The ALTER verb in COBOL has historically been severely criticised for providing the facility but this criticism is mainly focused on its lack of 'visibility' (i.e. no compiler warnings or cross references to the dynamically altered statements). This shortcoming can however be overcome with suitable programmer embedded comments in these cases. Self-modification can be more difficult to implement on certain <a href="/wiki/Compiler" title="Compiler">compilers</a> but <a href="/wiki/Clipper_programming_language" title="Clipper programming language" class="mw-redirect">Clipper</a> and <a href="/wiki/Spitbol" title="Spitbol" class="mw-redirect">Spitbol</a> are two that also provide it. Most <a href="/wiki/Scripting_languages" title="Scripting languages" class="mw-redirect">scripting languages</a> such as <a href="/wiki/Perl" title="Perl">Perl</a>, <a href="/wiki/Python_(programming_language)" title="Python (programming language)">Python</a> and <a href="/wiki/Javascript" title="Javascript" class="mw-redirect">javascript</a> are interpreted, which means that the program can easily generate new code dynamically and then execute it 'on-the-fly'. Usually, the code is created in <a href="/wiki/Dynamic_memory" title="Dynamic memory" class="mw-redirect">dynamic memory</a>, but it can also be indirectly executed by first writing out a new (external) file and then running the new file using the scripting language interpreter (a process actually more similar to 'compile and run' than true self-modification - some <a href="/wiki/4GL" title="4GL" class="mw-redirect">4GL</a> systems from the <a href="/wiki/1970%27s" title="1970's" class="mw-redirect">1970's</a>, for example, generated complete <a href="/wiki/COBOL" title="COBOL">COBOL</a> or <a href="/wiki/Assembler" title="Assembler">Assembler</a> programs, compiled them and then executed them in quick succession - whether or not this kind of <i>on-the-fly</i> program construction is viewed as 'self-modification' is clearly open to debate and might be better categorized as simply 'program generation' using a 4GL)</p>
<p>One <a href="/wiki/Batch_file" title="Batch file">batch</a> programming technique is to use self-modifying code<sup id="cite_ref-0" class="reference"><a href="#cite_note-0" title=""><span>[</span>1<span>]</span></a></sup>.</p>
<p><a href="/wiki/Dynamic_dispatch" title="Dynamic dispatch">Dynamic dispatch</a> and <a href="/wiki/Virtual_table" title="Virtual table" class="mw-redirect">virtual tables</a> can be considered a form of self-modification using <a href="/wiki/Late_binding" title="Late binding" class="mw-redirect">late binding</a> to choose which <a href="/wiki/Control_flow" title="Control flow">control flow</a> the program will actually take. Use of this relatively new terminology appears to completely satiate the otherwise quite strong distaste amongst <a href="/wiki/Computer_science" title="Computer science">computer science</a> purists for what is, essentially, nothing less than thinly disguised <a href="/wiki/Legacy" title="Legacy">legacy</a> self-modification.</p>
<p><a name="History" id="History"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Self-modifying_code&amp;action=edit&amp;section=4" title="Edit section: History">edit</a>]</span> <span class="mw-headline">History</span></h2>
<p>In the early days of computers, self-modifying code was often used in order to reduce the usage of limited memory or improve performance or both. It was also sometimes used to implement subroutine calls and returns when the instruction set only provided simple branching or skipping instructions to vary the <a href="/wiki/Control_flow" title="Control flow">control flow</a> (This application is still relevant in certain ultra-<a href="/wiki/RISC" title="RISC" class="mw-redirect">RISC</a> architectures, at least theoretically; see for example <a href="/wiki/One_instruction_set_computer" title="One instruction set computer">One instruction set computer</a>). <a href="/wiki/Donald_Knuth" title="Donald Knuth">Donald Knuth</a>'s <a href="/wiki/MIX" title="MIX">MIX</a> architecture also used self-modifying code to implement subroutine calls.</p>
<p>Already, critical systems which are too complex for people to fully manage in real time, such as the <a href="/wiki/Internet" title="Internet">Internet</a> and <a href="/wiki/Power_grid" title="Power grid" class="mw-redirect">electrical distribution networks</a> routinely rely upon self-modifying behaviors (though not necessarily self-modifying code) in order to function acceptably.</p>
<p><a name="Usage" id="Usage"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Self-modifying_code&amp;action=edit&amp;section=5" title="Edit section: Usage">edit</a>]</span> <span class="mw-headline">Usage</span></h2>
<p>Self-modifying code can be used for various purposes:</p>
<ul>
<li>Semi-automatic <a href="/wiki/Optimization_(computer_science)" title="Optimization (computer science)">optimization</a> of a state dependent loop.</li>
<li><a href="/wiki/Runtime" title="Runtime">Runtime</a> code generation, or specialization of an algorithm in runtime or loadtime (which is popular, for example, in the domain of real-time graphics) such as a general sort utility - preparing code to perform the key comparison described in a specific invocation.</li>
<li><a href="/wiki/JIT" title="JIT">JIT</a> compilers building code 'on-the-fly'</li>
<li>Altering of <a href="/wiki/Inline_function" title="Inline function">inlined</a> state of an <a href="/wiki/Object_(computer_science)" title="Object (computer science)">object</a>, or simulating the high-level construction of <a href="/wiki/Closure_(computer_science)" title="Closure (computer science)">closures</a>.</li>
<li>Patching of <a href="/wiki/Subroutine" title="Subroutine">subroutine</a> (<a href="/wiki/Pointer" title="Pointer" class="mw-redirect">pointer</a>) address calling, usually as performed at load/initialization time of <a href="/wiki/Dynamic_library" title="Dynamic library" class="mw-redirect">dynamic libraries</a>, or else on each invocation, patching the subroutine's internal references to its parameters so as to use actual addresses of specific routines. (i.e. Indirect 'self-modification').</li>
<li>Evolutionary computing systems such as <a href="/wiki/Genetic_programming" title="Genetic programming">genetic programming</a>.</li>
<li>Hiding of code to prevent <a href="/wiki/Reverse_engineering" title="Reverse engineering">reverse engineering</a> (by use of a <a href="/wiki/Disassembler" title="Disassembler">disassembler</a> or <a href="/wiki/Debugger" title="Debugger">debugger</a>) or to evade detection by virus/spyware scanning software and the like.</li>
<li>Filling 100% of memory (in some architectures) with a rolling pattern of repeating <a href="/wiki/Opcodes" title="Opcodes" class="mw-redirect">opcodes</a>, to erase all programs and data, or to <a href="/wiki/Burn-in" title="Burn-in">burn-in</a> hardware.</li>
<li><a href="/wiki/Data_compression" title="Data compression">Compression</a> of code to be decompressed and executed at runtime, e.g., when memory or disk space is limited.</li>
<li>Some very limited <a href="/wiki/Instruction_Set" title="Instruction Set" class="mw-redirect">instruction sets</a> leave no option but to use self-modifying code to achieve certain functionality. For example, a <a href="/wiki/OISC" title="OISC" class="mw-redirect">"One Instruction Set Computer"</a> machine that uses only the subtract-and-branch-if-negative "instruction" cannot do an indirect copy (something like the equivalent of "*a = **b" in the <a href="/wiki/C_(programming_language)" title="C (programming language)">C programming language</a>) without using self-modifying code.</li>
<li>Altering instructions for fault-tolerance</li>
</ul>
<p><a name="Optimizing_a_state-dependent_loop" id="Optimizing_a_state-dependent_loop"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Self-modifying_code&amp;action=edit&amp;section=6" title="Edit section: Optimizing a state-dependent loop">edit</a>]</span> <span class="mw-headline">Optimizing a state-dependent loop</span></h3>
<p><a href="/wiki/Pseudocode" title="Pseudocode">Pseudocode</a> example:</p>
<pre>
repeat N times {
  if STATE is 1
   increase A by one
  else
   decrease A by one

  do something with A
}
</pre>
<p>Self-modifying code in this case would simply be a matter of rewriting the loop like this:</p>
<pre>
 repeat N times {

  <i>increase</i> A by one
  do something with A
 }
 
 when STATE has to switch {
    replace the opcode "increase" above with the opcode to decrease
 }
</pre>
<p>Note that 2-state replacement of the <a href="/wiki/Opcode" title="Opcode">opcode</a> can be easily written as 'xor var at address with the value "opcodeOf(Inc) xor opcodeOf(dec)"'.</p>
<p>Choosing this solution will have to depend of course on the value of 'N' and the frequency of state changing.</p>
<p><a name="Use_as_camouflage" id="Use_as_camouflage"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Self-modifying_code&amp;action=edit&amp;section=7" title="Edit section: Use as camouflage">edit</a>]</span> <span class="mw-headline">Use as camouflage</span></h3>
<p>Self-modifying code was used to hide copy protection instructions in 1980s disk based programs for platforms such as <a href="/wiki/IBM_PC" title="IBM PC" class="mw-redirect">IBM PC</a> and <a href="/wiki/Apple_II" title="Apple II" class="mw-redirect">Apple II</a>. For example, on an IBM PC (or <a href="/wiki/IBM_PC_compatible" title="IBM PC compatible">compatible</a>), the <a href="/wiki/Floppy_disk" title="Floppy disk">floppy disk</a> drive access instruction '<a href="/wiki/Interrupt" title="Interrupt">int</a> 0x13' would not appear in the executable program's image but it would be written into the executable's memory image after the program started executing.</p>
<p>Self-modifying code is also sometimes used by programs that do not want to reveal their presence — such as <a href="/wiki/Computer_virus" title="Computer virus">computer viruses</a> and some <a href="/wiki/Shellcode" title="Shellcode">shellcodes</a>. Viruses and shellcodes that use self-modifying code mostly do this in combination with <a href="/wiki/Polymorphic_code" title="Polymorphic code">polymorphic code</a>. Polymorphic viruses are sometimes called primitive self-mutators. Modifying a piece of running code is also used in certain attacks, such as <a href="/wiki/Buffer_overflow" title="Buffer overflow">buffer overflows</a>.</p>
<p><a name="Self-referential_machine_learning_systems" id="Self-referential_machine_learning_systems"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Self-modifying_code&amp;action=edit&amp;section=8" title="Edit section: Self-referential machine learning systems">edit</a>]</span> <span class="mw-headline">Self-referential machine learning systems</span></h3>
<p>Traditional <a href="/wiki/Machine_learning" title="Machine learning">machine learning</a> systems have a fixed, pre-programmed learning <a href="/wiki/Algorithm" title="Algorithm">algorithm</a> to adjust their <a href="/wiki/Parameters" title="Parameters" class="mw-redirect">parameters</a>. However, since the 1980s <a href="/wiki/J%C3%BCrgen_Schmidhuber" title="Jürgen Schmidhuber">Jürgen Schmidhuber</a> has published several self-modifying systems with the ability to change their own learning algorithm. They avoid the danger of catastrophic self-rewrites by making sure that self-modifications will survive only if they are useful according to a user-given <a href="/wiki/Fitness_function" title="Fitness function">fitness function</a> or <a href="/wiki/Error_function" title="Error function">error function</a> or <a href="/wiki/Reward" title="Reward">reward</a> function.</p>
<p><a name="Operating_systems" id="Operating_systems"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Self-modifying_code&amp;action=edit&amp;section=9" title="Edit section: Operating systems">edit</a>]</span> <span class="mw-headline">Operating systems</span></h3>
<p>Because of the security implications of self-modifying code, all of the major <a href="/wiki/Operating_system" title="Operating system">operating systems</a> are careful to remove such vulnerabilities as they become known. The concern is typically not that programs will intentionally modify themselves, but that they could be maliciously changed by an <a href="/wiki/Exploit_(computer_security)" title="Exploit (computer security)">exploit</a>.</p>
<p>As consequence of the troubles that can be caused by these exploits, an OS feature called <a href="/wiki/W%5EX" title="W^X">W^X</a> (for "write <a href="/wiki/Xor" title="Xor" class="mw-redirect">xor</a> execute") has been developed which prohibits a program from making any page of memory both writable and executable. Some systems prevent a writable page from ever being changed to be executable, even if write permission is removed. Other systems provide a '<a href="/wiki/Back_door" title="Back door">back door</a>' of sorts, allowing multiple mappings of a page of memory to have different permissions. A relatively portable way to bypass W^X is to create a file with all permissions, then map the file into memory twice. On Linux, one may use an undocumented SysV shared memory flag to get executable shared memory without needing to create a file. On Windows Vista and Windows XP the W^X protection is named <a href="/wiki/Data_Execution_Prevention" title="Data Execution Prevention">Data Execution Prevention</a> and can be disabled via the Control Panel.</p>
<p>Regardless, at a <a href="/wiki/Meta-level" title="Meta-level" class="mw-redirect">meta-level</a>, programs can still modify their own behavior by changing data stored elsewhere (see <a href="/wiki/Metaprogramming" title="Metaprogramming">Metaprogramming</a>) or via use of <a href="/wiki/Polymorphism" title="Polymorphism">polymorphism</a>.</p>
<p><a name="Just-in-time_compilers" id="Just-in-time_compilers"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Self-modifying_code&amp;action=edit&amp;section=10" title="Edit section: Just-in-time compilers">edit</a>]</span> <span class="mw-headline">Just-in-time compilers</span></h3>
<p><a href="/wiki/Just-in-time_compilation" title="Just-in-time compilation">Just-in-time</a> compilers for <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a>, <a href="/wiki/Microsoft_.NET" title="Microsoft .NET" class="mw-redirect">.NET</a>, <a href="/wiki/ActionScript" title="ActionScript">ActionScript 3.0</a> and other <a href="/wiki/Programming_language" title="Programming language">programming languages</a> compile blocks of <a href="/wiki/Byte-code" title="Byte-code" class="mw-redirect">byte-code</a> or <a href="/wiki/P-code_machine" title="P-code machine">p-code</a> into machine code suitable for the host processor and then immediately execute them. Fabrice Bellard's <a href="/wiki/Tiny_C_Compiler" title="Tiny C Compiler">Tiny C Compiler</a> can and has been used as <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a>-Just-in-Time-Compiler-Library, e.g. by TCCBOOT (a bootloader that can compile, load and run its operation system on-the-fly).</p>
<p>Graphics drivers for modern GPUs perform JIT-Compilation of DirectX or OpenGL/<a href="/wiki/GLSL" title="GLSL">GLSL</a> geometry and fragment shaders, and can thus be seen as self-modifying code, sometimes distributed over multiple processors and DSPs (or even self-modifying hardware).</p>
<p>Some CPU Architecture Emulators use similar techniques to JIT-Compilers (simulated instruction set as "programming language" that becomes compiled for the target processor).</p>
<p><a name="Interaction_of_cache_and_self-modifying_code" id="Interaction_of_cache_and_self-modifying_code"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Self-modifying_code&amp;action=edit&amp;section=11" title="Edit section: Interaction of cache and self-modifying code">edit</a>]</span> <span class="mw-headline">Interaction of cache and self-modifying code</span></h3>
<p>On architectures without coupled data and instruction cache (some ARM and MIPS cores) the cache synchronization must be explicitly performed by the modifying code (flush data cache and invalidate instruction cache for the modified memory area).</p>
<p>In some cases short sections of self-modifying code executes more slowly on modern processors. This is because a modern processor will usually try to keep blocks of code in its cache memory. Each time the program rewrites a part of itself, the rewritten part must be loaded into the cache again, which results in a slight delay, if the modified codelet shares the same cache line with the modifying code, as is the case when the modified memory address is located within a few bytes to the one of the modifying code.</p>
<p>The cache invalidation issue on modern processors usually means that self-modifying code would still be faster only when the modification will occur rarely, such as in the case of a state switching inside an inner loop.<sup class="noprint Template-Fact"><span title="This claim needs references to reliable sources&#160;since March 2008" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</span></sup></p>
<p>Most modern processors load the machine code before they execute it, which means that if an instruction that is too near the <a href="/wiki/Instruction_pointer" title="Instruction pointer" class="mw-redirect">instruction pointer</a> is modified, the processor will not notice, but instead execute the code as it was <i>before</i> it was modified. See <a href="/wiki/Prefetch_Input_Queue" title="Prefetch Input Queue" class="mw-redirect">Prefetch Input Queue</a> (PIQ). PC processors have to handle self-modifying code correctly for backwards compatibility reasons but they are far from efficient at doing so<sup class="noprint Template-Fact"><span title="This claim needs references to reliable sources&#160;since March 2008" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</span></sup>.</p>
<p><a name="Henry_Massalin.27s_Synthesis_kernel" id="Henry_Massalin.27s_Synthesis_kernel"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Self-modifying_code&amp;action=edit&amp;section=12" title="Edit section: Henry Massalin's Synthesis kernel">edit</a>]</span> <span class="mw-headline">Henry Massalin's Synthesis kernel</span></h3>
<p>The Synthesis <a href="/wiki/Kernel_(computer_science)" title="Kernel (computer science)" class="mw-redirect">kernel</a> written by Dr. <a href="/wiki/Henry_Massalin" title="Henry Massalin" class="mw-redirect">Henry Massalin</a> as his <a href="/wiki/Doctor_of_Philosophy" title="Doctor of Philosophy">Ph.D.</a> thesis is commonly viewed to be the "mother of all self-modifying code." Massalin's tiny <a href="/wiki/Unix" title="Unix">Unix</a> kernel takes a <a href="/wiki/Structured_programming" title="Structured programming">structured</a>, or even <a href="/wiki/Object-oriented_programming" title="Object-oriented programming">object oriented</a>, approach to self-modifying code, where code is created for individual <a href="/w/index.php?title=Quaject&amp;action=edit&amp;redlink=1" class="new" title="Quaject (page does not exist)">quajects</a>, like filehandles; generating code for specific tasks allows the Synthesis kernel to (as a JIT interpreter might) apply a number of <a href="/wiki/Compiler_optimization" title="Compiler optimization">optimizations</a> such as <a href="/wiki/Constant_folding" title="Constant folding">constant folding</a> or <a href="/wiki/Common_subexpression_elimination" title="Common subexpression elimination">common subexpression elimination</a>.</p>
<p>The Synthesis kernel was extremely fast, but was written entirely in assembly. The resulting lack of portability has prevented Massalin's optimization ideas from being adopted by any production kernel. However, the structure of the techniques suggests that they could be captured by a higher level <a href="/wiki/Programming_language" title="Programming language">language</a>, albeit one more complex than existing mid-level languages. Such a language and compiler could allow development of extremely fast operating systems and applications.</p>
<p>Paul Haeberli and Bruce Karsh have objected to the "marginalization" of self-modifying code, and optimization in general, in favor of reduced development costs, drawing a parallel to the "heavy religious atmosphere" which the <a href="/wiki/Futurism_(art)" title="Futurism (art)" class="mw-redirect">Italian Futurist</a> movement rebelled against<sup class="noprint Template-Fact"><span title="This claim needs references to reliable sources&#160;since December 2008" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</span></sup>.</p>
<p><a name="Advantages" id="Advantages"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Self-modifying_code&amp;action=edit&amp;section=13" title="Edit section: Advantages">edit</a>]</span> <span class="mw-headline">Advantages</span></h2>
<ul>
<li><a href="/wiki/Fast_path" title="Fast path">Fast paths</a> can be established for a programs execution, reducing some otherwise repetetive <a href="/wiki/Conditional_branch" title="Conditional branch" class="mw-redirect">conditional branches</a> and</li>
<li><a href="/wiki/JIT" title="JIT">JIT</a> compilers can build programs that are more highly optimized than even an <a href="/wiki/Compiler_optimization" title="Compiler optimization">optimzing compiler</a> can generate</li>
</ul>
<p>improving <a href="/wiki/Algorithmic_efficiency" title="Algorithmic efficiency">algorithmic efficiency</a></p>
<p><a name="Disadvantages" id="Disadvantages"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Self-modifying_code&amp;action=edit&amp;section=14" title="Edit section: Disadvantages">edit</a>]</span> <span class="mw-headline">Disadvantages</span></h2>
<p>Self-modifying code is seen by some as a bad <a href="/wiki/Best_practice" title="Best practice">practice</a> which makes code harder to read and maintain. There are however ways in which self modification is nevertheless deemed acceptable, such as when <a href="/wiki/Sub_routine" title="Sub routine" class="mw-redirect">sub routine</a> <a href="/wiki/Pointer" title="Pointer" class="mw-redirect">pointers</a> are dynamically altered - even though the effect is almost identical to direct modification. The subtle difference, in this case, is that a <a href="/wiki/Pointer" title="Pointer" class="mw-redirect">pointer</a> <a href="/wiki/Variable" title="Variable">variable</a> is altered, not actual program <i>instructions</i>. The change to the pointer is, in this case, equivalent to the setting of a '<a href="/wiki/Flag_(computing)" title="Flag (computing)">flag</a>' (that might have been set as an alternative) - except that the flag does not need to be tested each time thereafter.</p>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Self-modifying_code&amp;action=edit&amp;section=15" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<ul>
<li><a href="/wiki/Algorithmic_efficiency" title="Algorithmic efficiency">Algorithmic efficiency</a></li>
<li><a href="/wiki/Reflection_(computer_science)" title="Reflection (computer science)">Reflection (computer science)</a></li>
<li><a href="/wiki/Self-replication" title="Self-replication">Self-replication</a></li>
<li><a href="/wiki/Quine_(computing)" title="Quine (computing)">Quine (computing)</a></li>
<li><a href="/wiki/PCASTL" title="PCASTL">PCASTL</a></li>
</ul>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Self-modifying_code&amp;action=edit&amp;section=16" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<div class="references-small">
<ol class="references">
<li id="cite_note-0"><b><a href="#cite_ref-0" title="">^</a></b> <a href="http://www.csd.net/~cgadd/knowbase/DOS0019.HTM" class="external text" title="http://www.csd.net/~cgadd/knowbase/DOS0019.HTM" rel="nofollow">Self-modifying Batch File</a> by Lars Fosdal</li>
</ol>
</div>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Self-modifying_code&amp;action=edit&amp;section=17" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<ul>
<li><a href="http://asm.sourceforge.net/articles/smc.html" class="external text" title="http://asm.sourceforge.net/articles/smc.html" rel="nofollow">Using self-modifying code under Linux</a></li>
<li><a href="http://public.carnet.hr/~jbrecak/sm.html" class="external text" title="http://public.carnet.hr/~jbrecak/sm.html" rel="nofollow">Self-modifying C code</a></li>
<li><a href="http://www.cs.columbia.edu/~library/TR-repository/reports/reports-1992/cucs-039-92.ps.gz" class="external text" title="http://www.cs.columbia.edu/~library/TR-repository/reports/reports-1992/cucs-039-92.ps.gz" rel="nofollow">"Synthesis: An Efficient Implementation of Fundamental Operating System Services"</a>: Henry Massalin's Ph.D. thesis on the Synthesis kernel</li>
<li><a href="http://www.graficaobscura.com/future/index.html" class="external text" title="http://www.graficaobscura.com/future/index.html" rel="nofollow">Futurist Programming</a></li>
<li><a href="http://flint.cs.yale.edu/flint/publications/smc.html" class="external text" title="http://flint.cs.yale.edu/flint/publications/smc.html" rel="nofollow">Certified Self-Modifying Code</a></li>
<li><a href="/wiki/J%C3%BCrgen_Schmidhuber" title="Jürgen Schmidhuber">Jürgen Schmidhuber</a>'s publications on <a href="http://www.idsia.ch/~juergen/metalearner.html" class="external text" title="http://www.idsia.ch/~juergen/metalearner.html" rel="nofollow">self-modifying code for self-referential machine learning systems</a></li>
</ul>


<!-- 
NewPP limit report
Preprocessor node count: 249/1000000
Post-expand include size: 3553/2048000 bytes
Template argument size: 1140/2048000 bytes
Expensive parser function count: 3/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:217647-0!1!0!default!!en!2 and timestamp 20090329095413 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Self-modifying_code">http://en.wikipedia.org/wiki/Self-modifying_code</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Programming_paradigms" title="Category:Programming paradigms">Programming paradigms</a></span></div><div id="mw-hidden-catlinks" class="mw-hidden-cats-hidden">Hidden categories:&#32;<span dir='ltr'><a href="/wiki/Category:All_articles_with_unsourced_statements" title="Category:All articles with unsourced statements">All articles with unsourced statements</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_unsourced_statements_since_March_2008" title="Category:Articles with unsourced statements since March 2008">Articles with unsourced statements since March 2008</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_unsourced_statements_since_December_2008" title="Category:Articles with unsourced statements since December 2008">Articles with unsourced statements since December 2008</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Self-modifying_code" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Self-modifying_code" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Self-modifying_code&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Self-modifying_code&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Self-modifying_code" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Self-modifying_code" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Self-modifying_code" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Self-modifying_code&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Self-modifying_code&amp;oldid=277361213" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Self-modifying_code&amp;id=277361213">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/Selbstmodifizierender_Code">Deutsch</a></li>
				<li class="interwiki-es"><a href="http://es.wikipedia.org/wiki/C%C3%B3digo_mutante">Español</a></li>
				<li class="interwiki-it"><a href="http://it.wikipedia.org/wiki/Codice_automodificante">Italiano</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/%E8%87%AA%E5%B7%B1%E6%9B%B8%E3%81%8D%E6%8F%9B%E3%81%88%E3%82%B3%E3%83%BC%E3%83%89">日本語</a></li>
				<li class="interwiki-ru"><a href="http://ru.wikipedia.org/wiki/%D0%A1%D0%B0%D0%BC%D0%BE%D0%BC%D0%BE%D0%B4%D0%B8%D1%84%D0%B8%D1%86%D0%B8%D1%80%D1%83%D1%8E%D1%89%D0%B8%D0%B9%D1%81%D1%8F_%D0%BA%D0%BE%D0%B4">Русский</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 15 March 2009, at 08:00 (UTC).</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv178 in 0.070 secs. --></body></html>
