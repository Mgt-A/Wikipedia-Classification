<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Standard ML,Articles with unsourced statements since August 2008,.NET Framework,Abstract data type,Adapter pattern,Alice (programming language),Anonymous function,Arity,Assembly language,Automated theorem proving,CAML" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Standard_ML&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Standard_ML&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Standard ML - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Standard_ML";
		var wgTitle = "Standard ML";
		var wgAction = "view";
		var wgArticleId = "100337";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 274704775;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Standard_ML skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Standard ML</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<table class="infobox vevent" cellspacing="5" style="width: 22em; text-align: left; font-size: 88%; line-height: 1.5em;">
<caption class="summary" style="font-size: 125%; font-weight: bold;">Standard ML</caption>
<tr>
<th style=""><a href="/wiki/Programming_paradigm" title="Programming paradigm">Paradigm</a></th>
<td class="" style=""><a href="/wiki/Multi-paradigm_programming_language" title="Multi-paradigm programming language">multi-paradigm</a>: <a href="/wiki/Functional_programming_language" title="Functional programming language" class="mw-redirect">functional</a>, <a href="/wiki/Imperative_programming" title="Imperative programming">imperative</a></td>
</tr>
<tr>
<th style=""><a href="/wiki/Type_system" title="Type system">Typing discipline</a></th>
<td class="" style=""><a href="/wiki/Strong_typing" title="Strong typing" class="mw-redirect">strong</a>, <a href="/wiki/Static_typing" title="Static typing" class="mw-redirect">static</a>, <a href="/wiki/Type_inference" title="Type inference">inferred</a></td>
</tr>
<tr>
<th style=""><a href="/wiki/Programming_language_implementation" title="Programming language implementation">Major implementations</a></th>
<td class="" style=""><a href="/wiki/MLton" title="MLton">MLton</a>, <a href="/w/index.php?title=MLWorks&amp;action=edit&amp;redlink=1" class="new" title="MLWorks (page does not exist)">MLWorks</a>, <a href="/wiki/Moscow_ML" title="Moscow ML">Moscow ML</a>, Poly/ML, <a href="/wiki/Standard_ML_of_New_Jersey" title="Standard ML of New Jersey">SML/NJ</a>, SML.NET</td>
</tr>
<tr>
<th style=""><a href="/wiki/Programming_language_dialect" title="Programming language dialect" class="mw-redirect">Dialects</a></th>
<td class="" style=""><a href="/wiki/Alice_(programming_language)" title="Alice (programming language)">Alice</a>, <a href="/wiki/Dependent_ML" title="Dependent ML">Dependent ML</a></td>
</tr>
<tr>
<th style="">Influenced by</th>
<td class="" style=""><a href="/wiki/ML_programming_language" title="ML programming language" class="mw-redirect">ML</a></td>
</tr>
</table>
<p><b>Standard ML</b> (<b>SML</b>) is a general-purpose, <a href="/wiki/Module_(programming)" title="Module (programming)" class="mw-redirect">modular</a>, <a href="/wiki/Functional_programming_language" title="Functional programming language" class="mw-redirect">functional programming language</a> with <a href="/wiki/Compile-time_type_checking" title="Compile-time type checking" class="mw-redirect">compile-time type checking</a> and <a href="/wiki/Type_inference" title="Type inference">type inference</a>. It is popular among <a href="/wiki/Compiler" title="Compiler">compiler</a> writers and <a href="/wiki/Programming_language_research" title="Programming language research" class="mw-redirect">programming language researchers</a>, as well as in the development of <a href="/wiki/Automated_theorem_proving" title="Automated theorem proving">theorem provers</a>.</p>
<p>SML is a modern descendant of the <a href="/wiki/ML_programming_language" title="ML programming language" class="mw-redirect">ML programming language</a> used in the Logic for Computable Functions <a href="/wiki/LCF_theorem_prover" title="LCF theorem prover" class="mw-redirect">(LCF)</a> theorem-proving project. It is distinctive among widely used languages in that it has a formal specification, given as typing rules and <a href="/wiki/Operational_semantics" title="Operational semantics">operational semantics</a> in <i>The Definition of Standard ML</i> (1990, revised and simplified as <i>The Definition of Standard ML (Revised)</i> in 1997).<sup id="cite_ref-0" class="reference"><a href="#cite_note-0" title=""><span>[</span>1<span>]</span></a></sup></p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Language"><span class="tocnumber">1</span> <span class="toctext">Language</span></a>
<ul>
<li class="toclevel-2"><a href="#Module_System"><span class="tocnumber">1.1</span> <span class="toctext">Module System</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Code_examples"><span class="tocnumber">2</span> <span class="toctext">Code examples</span></a>
<ul>
<li class="toclevel-2"><a href="#Hello_world"><span class="tocnumber">2.1</span> <span class="toctext">Hello world</span></a></li>
<li class="toclevel-2"><a href="#Merge_Sort"><span class="tocnumber">2.2</span> <span class="toctext">Merge Sort</span></a></li>
<li class="toclevel-2"><a href="#Arbitrary-precision_factorial_function_.28libraries.29"><span class="tocnumber">2.3</span> <span class="toctext">Arbitrary-precision factorial function (libraries)</span></a></li>
<li class="toclevel-2"><a href="#Numerical_derivative_.28higher-order_functions.29"><span class="tocnumber">2.4</span> <span class="toctext">Numerical derivative (higher-order functions)</span></a></li>
<li class="toclevel-2"><a href="#Discrete_Wavelet_Transform_.28pattern_matching.29"><span class="tocnumber">2.5</span> <span class="toctext">Discrete Wavelet Transform (pattern matching)</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Implementations"><span class="tocnumber">3</span> <span class="toctext">Implementations</span></a></li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">4</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">5</span> <span class="toctext">External links</span></a></li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">6</span> <span class="toctext">References</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Language" id="Language"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Standard_ML&amp;action=edit&amp;section=1" title="Edit section: Language">edit</a>]</span> <span class="mw-headline">Language</span></h2>
<p>Standard ML is a mostly functional programming language. Programs written in Standard ML mostly consist of <a href="/wiki/Expression_(programming)" title="Expression (programming)">expressions</a> whose values are to be calculated.</p>
<p>Like all functional programming languages, a key feature of Standard ML is the <a href="/wiki/Function_(programming)" title="Function (programming)" class="mw-redirect">function</a>, which is used for abstraction. For instance, the <a href="/wiki/Factorial" title="Factorial">factorial</a> function can be expressed as:</p>
<pre>
   <b>fun</b> factorial n = 
       <b>if</b> n = 0 <b>then</b> 1 <b>else</b> n * factorial (n-1) 
</pre>
<p>A Standard ML compiler is required to infer the static type <tt>int -&gt; int</tt> of this function without user-supplied type annotations. I.e., it has to deduce that <i>n</i> is only used with integer expressions, and must therefore itself be an integer, and that all value-producing expressions within the function return integers.</p>
<p>The same function can be expressed with <a href="/w/index.php?title=Clausal_function_definitions&amp;action=edit&amp;redlink=1" class="new" title="Clausal function definitions (page does not exist)">clausal function definitions</a> where the <i>if</i>-<i>then</i>-<i>else</i> conditional is replaced by a sequence of templates of the factorial function evaluated for specific values, separated by '|', which are tried one by one in the order written until a match is found:</p>
<pre>
   <b>fun</b> factorial 0 = 1
     | factorial n = n * factorial (n - 1)  
</pre>
<p>This can be rewritten using a case statement like this:</p>
<pre>
   <b>val</b> <b>rec</b> factorial =
       <b>fn</b> n =&gt; <b>case</b> n <b>of</b> 0 =&gt; 1
                       | n =&gt; n * factorial (n - 1)
</pre>
<p>Here, the keyword <code>val</code> introduces a binding of an identifier to a value, <code>fn</code> introduces the definition of an <a href="/wiki/Anonymous_function" title="Anonymous function">anonymous function</a>, and <code>case</code> introduces a sequence of patterns and corresponding expressions.</p>
<p>Using a local function, this function can be rewritten to use <a href="/wiki/Tail_recursion" title="Tail recursion">tail recursion</a>:</p>
<pre>
   <b>fun</b> factorial n =
       <b>let</b>
           <b>fun</b> tail_fact p 0 = p
             | tail_fact p m = tail_fact (p * m) (m - 1)
       <b>in</b>
           tail_fact 1 n
       <b>end</b>
</pre>
<p>The value of a <b>let</b>-expression is that of the expression between <b>in</b> and <b>end</b>.</p>
<p><a name="Module_System" id="Module_System"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Standard_ML&amp;action=edit&amp;section=2" title="Edit section: Module System">edit</a>]</span> <span class="mw-headline">Module System</span></h3>
<p>Standard ML has an advanced <a href="/wiki/Module_(programming)" title="Module (programming)" class="mw-redirect">module</a> system, allowing programs to be decomposed into hierarchically organized <i>structures</i> of logically related type and value declarations. SML modules provide not only <a href="/wiki/Namespace_(computer_science)" title="Namespace (computer science)">namespace</a> control but also abstraction, in the sense that they allow programmers to define <a href="/wiki/Abstract_data_type" title="Abstract data type">abstract data types</a>.</p>
<p>Three main syntactic constructs comprise the SML module system: signatures, structures and functors. A <i>structure</i> is a module; it consists of a collection of types, exceptions, values and structures (called <i>substructures</i>) packaged together into a logical unit. A <i>signature</i> is an <a href="/wiki/Interface_(computer_science)" title="Interface (computer science)">interface</a>, usually thought of as a type for a structure: it specifies the names of all the entities provided by the structure as well as the <a href="/wiki/Arity" title="Arity">arities</a> of type components, the types of value components, and signatures for substructures. The definitions of type components may or may not be exported; type components whose definitions are hidden are <i>abstract types</i>. Finally, a <i>functor</i> is a function from structures to structures; that is, a functor accepts one or more arguments, which are usually structures of a given signature, and produces a structure as its result. Functors are used to implement <a href="/wiki/Generic_programming" title="Generic programming">generic</a> data structures and algorithms.</p>
<p>For example, the signature for a <a href="/wiki/Queue_(data_structure)" title="Queue (data structure)">queue</a> data structure might be:</p>
<pre>
<b>signature</b> QUEUE = 
<b>sig</b>
   <b>type</b> 'a queue
   <b>exception</b> Queue
   <b>val</b> empty : 'a queue
   <b>val</b> insert : 'a * 'a queue -&gt; 'a queue
   <b>val</b> isEmpty : 'a queue -&gt; bool
   <b>val</b> peek : 'a queue -&gt; 'a 
   <b>val</b> remove : 'a queue -&gt; 'a * 'a queue
<b>end</b>
</pre>
<p>This signature describes a module that provides a parameterized type <code>queue</code> of queues, an exception called <code>Queue</code>, and five values (four of which are functions) providing the basic operations on queues. One can now implement the queue data structure by writing a structure with this signature:</p>
<pre>
<b>structure</b> TwoListQueue :&gt; QUEUE = 
<b>struct</b>
   <b>type</b> 'a queue = 'a list * 'a list
   <b>exception</b> Queue
   <b>val</b> empty = ([],[])
   <b>fun</b> insert (a,(ins,outs)) = (a::ins,outs)
   <b>fun</b> isEmpty ([],[]) = true
     | isEmpty _ = false
   <b>fun</b> peek ([],[]) = <b>raise</b> Queue
     | peek (ins,[]) = hd (rev ins)
     | peek (ins,a::outs) = a
   <b>fun</b> remove ([],[]) = <b>raise</b> Queue
     | remove (ins,[]) = 
       <b>let</b> <b>val</b> newouts = rev ins
       <b>in</b> (hd newouts,([],tl newouts))
       <b>end</b>
     | remove (ins,a::outs) = (a,(ins,outs))
 <b>end</b>
</pre>
<p>This definition declares that <code>TwoListQueue</code> is an implementation of the <code>QUEUE</code> signature. Furthermore, the <i>opaque ascription</i> (denoted by <code>:&gt;</code>) states that any type components whose definitions are not provided in the signature (<i>i.e.,</i> <code>queue</code>) should be treated as abstract, meaning that the definition of a queue as a pair of lists is not visible outside the module. The body of the structure provides bindings for all of the components listed in the signature.</p>
<p>To use a structure, one can access its type and value members using "dot notation". For instance, a queue of strings would have type <code>string TwoListQueue.queue</code>, the empty queue is <code>TwoListQueue.empty</code>, and to remove the first element from a queue called <code>q</code> one would write <code>TwoListQueue.remove q</code>.</p>
<p><a name="Code_examples" id="Code_examples"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Standard_ML&amp;action=edit&amp;section=3" title="Edit section: Code examples">edit</a>]</span> <span class="mw-headline">Code examples</span></h2>
<p>Snippets of SML code are most easily studied by entering them into a "top-level", also known as a <a href="/wiki/Read-eval-print_loop" title="Read-eval-print loop">read-eval-print loop</a>. This is an interactive session that prints the inferred types of resulting or defined expressions. Many SML implementations provide an interactive top-level, including SML/NJ:</p>
<pre>
  $ sml
  Standard ML of New Jersey v110.52 [built: Fri Jan 21 16:42:10 2005]
  -
</pre>
<p>Code can then be entered at the "-" prompt. For example, to calculate 1+2*3:</p>
<pre>
  - 1 + 2 * 3;
  val it = 7 : int
</pre>
<p>The top-level infers the type of the expression to be "int" and gives the result "7".</p>
<p><a name="Hello_world" id="Hello_world"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Standard_ML&amp;action=edit&amp;section=4" title="Edit section: Hello world">edit</a>]</span> <span class="mw-headline">Hello world</span></h3>
<p>The following program "hello.sml":</p>
<pre>
  print "Hello world!\n";
</pre>
<p>can be compiled with MLton:</p>
<pre>
  $ mlton hello.sml
</pre>
<p>and executed:</p>
<pre>
  $ ./hello
  Hello world!
  $
</pre>
<p><a name="Merge_Sort" id="Merge_Sort"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Standard_ML&amp;action=edit&amp;section=5" title="Edit section: Merge Sort">edit</a>]</span> <span class="mw-headline">Merge Sort</span></h3>
<p><i>Main article:</i> <a href="/wiki/Merge_sort" title="Merge sort">Merge sort</a></p>
<p>Here, Merge Sort is implemented in three functions: split, merge and MergeSort.</p>
<p>The split function is implemented with a local function named split_iter, which has an additional parameter. One uses such a function because it is <a href="/wiki/Tail_recursion" title="Tail recursion">tail recursive</a>. This function makes use of SML's pattern matching syntax, being defined for both the non-empty ('x::xs') and empty ('[]') list cases.</p>
<pre>
(* Given a list of elements, split it into two elements of
 * about the same size.
 * O(n)
 *)
local
 fun split_iter (x1::x2::xs, left, right) = split_iter(xs, x2::right, x1::left)
 |   split_iter ([x], left, right) = (left, x::right)
 |   split_iter ([], left, right) = (left, right)
in
 fun split(x) = split_iter(x,[],[])
end;
</pre>
<p>The local-in-end syntax could be replaced with a let-in-end syntax, yielding the equivalent definition:</p>
<pre>
fun split(x) =
 let
  fun split_iter (x1::x2::xs, left, right) = split_iter(xs, x2::right, x1::left)
  |   split_iter ([x], left, right) = (left, x::right)
  |   split_iter ([], left, right) = (left, right)
 in
  split_iter(x,[],[])
 end;
</pre>
<p>As with split, merge also uses a local function merge_iter for efficiency. Merge_iter is defined in terms of cases: when two non-empty lists are passed, when one non-empty list is passed, and when two empty lists are passed. Note the use of '_' as a wildcard pattern.</p>
<p>This function merges two '<i>ascending</i> lists into one <i>descending</i> because of how lists are constructed in SML. Because SML lists are implemented as imbalanced binary trees, it is efficient to prepend an element to a list, but very inefficient to append an element to a list.</p>
<pre>
(* Given two lists in ascending order, merge them into
 * a single list in descending order.
 * The function lt(a,b) iff a &lt; b
 * O(n)
 *)
local
 fun merge_iter (out, left as (x::xs), right as (y::ys), lt) =
     if lt(x, y)
      then merge_iter(x::out, xs, right, lt)
      else merge_iter(y::out, left, ys, lt)
 |   merge_iter (out, x::xs, [], lt) = merge_iter( x::out, xs, [], lt)
 |   merge_iter (out, [], y::ys, lt) = merge_iter( y::out, [], ys, lt)
 |   merge_iter (out, [], [], _) = out
in
 fun merge(x,y,lt) = merge_iter([],x,y,lt)
end;

</pre>
<p>Finally, the MergeSort function.</p>
<pre>
(* Sort a list in ascending order according to lt(a,b) &lt;==&gt; a &lt; b
 * O(n log n)
 *)
fun MergeSort(empty as [], _) = empty
|   MergeSort(single as _::[], _) = single
|   MergeSort(x, lt) =
    let
     val (left, right) = split(x)
     val sl = MergeSort(left, lt)
     val sr = MergeSort(right, lt)
     val s = merge(sl,sr,lt)
    in
     rev s
    end;
</pre>
<p><br />
Also note that the code makes no mention of variable types, with the exception of the&#160;:: and [] syntax which signify lists. This code will sort lists of any type, so long as a consistent ordering function lt can be defined. Using <a href="/wiki/Hindley-Milner_type_inference" title="Hindley-Milner type inference" class="mw-redirect">Hindley-Milner type inference</a>, the compiler is capable of inferring the types of all variables, even complicated types such as that of the lt function.</p>
<p><a name="Arbitrary-precision_factorial_function_.28libraries.29" id="Arbitrary-precision_factorial_function_.28libraries.29"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Standard_ML&amp;action=edit&amp;section=6" title="Edit section: Arbitrary-precision factorial function (libraries)">edit</a>]</span> <span class="mw-headline">Arbitrary-precision factorial function (libraries)</span></h3>
<p>In SML, the IntInf module provides arbitrary-precision integer arithmetic. Moreover, integer literals may be used as arbitrary-precision integers without the programmer having to do anything.</p>
<p>The following program "fact.sml" implements an arbitrary-precision factorial function and prints the factorial of 120:</p>
<pre>
  fun fact n : IntInf.int =
      if n=0 then 1 else n * fact(n - 1)
  
  val () =
      print (IntInf.toString (fact 120)^"\n")
</pre>
<p>and can be compiled and run with:</p>
<pre>
  $ mlton fact.sml
  $ ./fact
  66895029134491270575881180540903725867527463331380298102956713523016335
  57244962989366874165271984981308157637893214090552534408589408121859898
  481114389650005964960521256960000000000000000000000000000
</pre>
<p><a name="Numerical_derivative_.28higher-order_functions.29" id="Numerical_derivative_.28higher-order_functions.29"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Standard_ML&amp;action=edit&amp;section=7" title="Edit section: Numerical derivative (higher-order functions)">edit</a>]</span> <span class="mw-headline">Numerical derivative (higher-order functions)</span></h3>
<p>Since SML is a functional programming language, it is easy to create and pass around functions in SML programs. This capability has an enormous number of applications. Calculating the numerical derivative of a function is one such application. The following SML function "d" computes the numerical derivative of a given function "f" at a given point "x":</p>
<pre>
  - fun d delta f x =
      (f (x + delta) - f (x - delta)) / (2.0 * delta);
  val d = fn : real -&gt; (real -&gt; real) -&gt; real -&gt; real
</pre>
<p>This function requires a small value "delta". A good choice for delta when using this algorithm is the cube root of the <a href="/wiki/Machine_epsilon" title="Machine epsilon">machine epsilon</a>.<sup class="noprint Template-Fact"><span title="This claim needs references to reliable sources&#160;since August 2008" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</span></sup></p>
<p>The type of the function "d" indicates that it maps a "float" onto another function with the type "(real -&gt; real) -&gt; real -&gt; real". This allows us to partially apply arguments. This functional style is known as <a href="/wiki/Currying" title="Currying">currying</a>. In this case, it is useful to partially apply the first argument "delta" to "d", to obtain a more specialised function:</p>
<pre>
  - val d = d 1E~8;
  val d = fn : (real -&gt; real) -&gt; real -&gt; real
</pre>
<p>Note that the inferred type indicates that the replacement "d" is expecting a function with the type "real -&gt; real" as its first argument. We can compute a numerical approximation to the derivative of x^3-x-1 at x=3 with:</p>
<pre>
  - d (fn x =&gt; x * x * x - x - 1.0) 3.0;
  val it = 25.9999996644 : real
</pre>
<p>The correct answer is f'(x) = 3x^2-1 =&gt; f'(3) = 27-1 = 26.</p>
<p>The function "d" is called a "higher-order function" because it accepts another function ("f") as an argument.</p>
<p>Curried and higher-order functions can be used to eliminate redundant code. For example, a library may require functions of type <code>a -&gt; b</code>, but it is more convenient to write functions of type <code>a * c -&gt; b</code> where there is a fixed relationship between the objects of type <code>a</code> and <code>c</code>. A higher order function of type (a * c -&gt; b) -&gt; (a -&gt; b) can factor out this commonality. This is an example of the <a href="/wiki/Adapter_pattern" title="Adapter pattern">adapter pattern</a>.</p>
<p><a name="Discrete_Wavelet_Transform_.28pattern_matching.29" id="Discrete_Wavelet_Transform_.28pattern_matching.29"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Standard_ML&amp;action=edit&amp;section=8" title="Edit section: Discrete Wavelet Transform (pattern matching)">edit</a>]</span> <span class="mw-headline">Discrete Wavelet Transform (pattern matching)</span></h3>
<p>The 1D <a href="/wiki/Haar_wavelet" title="Haar wavelet">Haar wavelet</a> <a href="/wiki/Discrete_wavelet_transform" title="Discrete wavelet transform">transform</a> of an <a href="/wiki/Integer" title="Integer">integer</a>-power-of-two-length list of numbers can be implemented very succinctly in SML and is an excellent example of the use of <a href="/wiki/Pattern_matching" title="Pattern matching">pattern matching</a> over lists, taking pairs of elements ("h1" and "h2") off the front and storing their sums and differences on the lists "s" and "d", respectively:</p>
<pre>
  - fun haar l =
      let fun aux [s] [] d = s :: d
            | aux [] s d = aux s [] d
            | aux (h1::h2::t) s d =
              aux t (h1 + h2 :: s) (h1 - h2 :: d)
            | aux _ _ _ = raise Empty
      in  aux l [] []
      end;
  val haar = fn : int list -&gt; int list
</pre>
<p>For example:</p>
<pre>
  - haar [1, 2, 3, 4, ~4, ~3, ~2, ~1];
  val it = [0,20,4,4,~1,~1,~1,~1] : int list
</pre>
<p>Pattern matching is a useful construct that allows complicated transformations to be represented clearly and succinctly. Moreover, SML compilers turn pattern matches into efficient code, resulting in programs that are not only shorter but also faster.</p>
<p><a name="Implementations" id="Implementations"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Standard_ML&amp;action=edit&amp;section=9" title="Edit section: Implementations">edit</a>]</span> <span class="mw-headline">Implementations</span></h2>
<p>Many SML implementations exist, including:</p>
<ul>
<li><a href="/wiki/MLton" title="MLton">MLton</a> is a whole-program optimizing compiler that produces very fast code compared to other ML implementations. <a href="http://www.mlton.org" class="external autonumber" title="http://www.mlton.org" rel="nofollow">[1]</a></li>
<li><a href="/wiki/Standard_ML_of_New_Jersey" title="Standard ML of New Jersey">Standard ML of New Jersey</a> (abbreviated SML/NJ) is a full compiler, with associated libraries, tools, an interactive shell, and documentation. <a href="http://www.smlnj.org/" class="external autonumber" title="http://www.smlnj.org/" rel="nofollow">[2]</a></li>
<li><a href="/wiki/Moscow_ML" title="Moscow ML">Moscow ML</a> is a light-weight implementation, based on the <a href="/wiki/CAML" title="CAML">CAML Light</a> runtime engine. It implements the full SML language, including SML Modules, and much of the SML Basis Library. <a href="http://www.dina.kvl.dk/~sestoft/mosml.html" class="external autonumber" title="http://www.dina.kvl.dk/~sestoft/mosml.html" rel="nofollow">[3]</a></li>
<li><a href="http://www.polyml.org/" class="external text" title="http://www.polyml.org/" rel="nofollow">Poly/ML</a> is a full implementation of Standard ML.</li>
<li><a href="http://www.tilt.cs.cmu.edu/" class="external text" title="http://www.tilt.cs.cmu.edu/" rel="nofollow">TILT</a> is a full certifying compiler for SML. It uses typed intermediate languages to optimize code and ensure correctness, and can compile to <a href="/wiki/Type_system" title="Type system">typed</a> <a href="/wiki/Assembly_language" title="Assembly language">Assembly language</a>.</li>
<li><a href="http://www.ps.uni-sb.de/hamlet/" class="external text" title="http://www.ps.uni-sb.de/hamlet/" rel="nofollow">HaMLet</a> is an SML interpreter that aims to be an accurate and accessible reference implementation of the standard.</li>
<li>The <a href="http://www.it-c.dk/research/mlkit/" class="external text" title="http://www.it-c.dk/research/mlkit/" rel="nofollow">ML Kit</a> integrates a garbage collector (which can be disabled) and region-based memory management with automatic inference of regions, aiming realtime applications. Its implementation is based very closely on the Definition.</li>
<li><a href="http://www.cl.cam.ac.uk/Research/TSG/SMLNET/" class="external text" title="http://www.cl.cam.ac.uk/Research/TSG/SMLNET/" rel="nofollow">SML.NET</a> allows compiling to the Microsoft <a href="/wiki/Common_Language_Runtime" title="Common Language Runtime">CLR</a> and has extensions for linking with other <a href="/wiki/.NET_Framework" title=".NET Framework">.NET</a> code.</li>
<li>SML2c is a batch compiler and compiles only module-level declarations (i.e. signatures, structures, functors) into <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a>. It is based on SML/NJ version 0.67 and shares the front end, and most of its run-time system, but does not support SML/NJ style debugging and profiling. Module-level programs that run on SML/NJ can be compiled by sml2c with no changes.</li>
<li>The <a href="/wiki/Poplog" title="Poplog">Poplog</a> system implements a version of SML, with <a href="/wiki/POP-11" title="POP-11">POP-11</a>, and optionally <a href="/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a>, and <a href="/wiki/Prolog" title="Prolog">Prolog</a>, allowing mixed language programming. For all, the implementation language is POP-11, which is compiled incrementally. It also has an integrated <a href="/wiki/Emacs" title="Emacs">Emacs</a>-like editor that communicates with the compiler.</li>
<li><a href="http://www.pllab.riec.tohoku.ac.jp/smlsharp/" class="external text" title="http://www.pllab.riec.tohoku.ac.jp/smlsharp/" rel="nofollow">SML#</a> is a conservative extension of SML providing record polymorphism and C interoperability.</li>
</ul>
<p>All of these implementations are <a href="/wiki/Open-source" title="Open-source" class="mw-redirect">open-source</a> and freely available. Most are implemented themselves in SML. There are no longer any commercial SML implementations. <a href="/wiki/Harlequin_(software_company)" title="Harlequin (software company)">Harlequin</a> once produced a commercial IDE and compiler for SML called <a href="/w/index.php?title=MLWorks&amp;action=edit&amp;redlink=1" class="new" title="MLWorks (page does not exist)">MLWorks</a>. The company is now defunct. <a href="/w/index.php?title=MLWorks&amp;action=edit&amp;redlink=1" class="new" title="MLWorks (page does not exist)">MLWorks</a> is believed to have been passed on to <a href="/w/index.php?title=Xanalys&amp;action=edit&amp;redlink=1" class="new" title="Xanalys (page does not exist)">Xanalys</a>.</p>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Standard_ML&amp;action=edit&amp;section=10" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<ul>
<li><a href="/wiki/Alice_(programming_language)" title="Alice (programming language)">Alice</a></li>
<li><a href="/wiki/ML_programming_language" title="ML programming language" class="mw-redirect">ML</a></li>
<li><a href="/wiki/Concurrent_ML" title="Concurrent ML">Concurrent ML</a></li>
<li><a href="/wiki/Dependent_ML" title="Dependent ML">Dependent ML</a></li>
<li><a href="/wiki/EML" title="EML">EML</a></li>
<li><a href="/wiki/Extended_ML" title="Extended ML">Extended ML</a></li>
<li><a href="/wiki/F_Sharp_(programming_language)" title="F Sharp (programming language)">F#</a></li>
<li><a href="/wiki/Objective_Caml" title="Objective Caml">Objective Caml</a></li>
</ul>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Standard_ML&amp;action=edit&amp;section=11" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<ul>
<li><a href="http://www.smlnj.org/sml.html" class="external text" title="http://www.smlnj.org/sml.html" rel="nofollow">What is SML?</a></li>
<li><a href="http://www.smlnj.org/sml97.html" class="external text" title="http://www.smlnj.org/sml97.html" rel="nofollow">What is SML '97?</a></li>
<li><a href="http://www.successor-ml.org" class="external text" title="http://www.successor-ml.org" rel="nofollow">successor ML (sML)</a> is intended to provide a vehicle for the continued evolution of ML, using Standard ML as a starting point.</li>
<li><i><a href="http://www.scholarpedia.org/article/http://www.scholarpedia.org/article/Standard_ML_language" class="external text" title="http://www.scholarpedia.org/article/http://www.scholarpedia.org/article/Standard_ML_language" rel="nofollow">Standard ML language</a></i> at <a href="/wiki/Scholarpedia" title="Scholarpedia">Scholarpedia</a>, curated by Mads Tofte.</li>
</ul>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Standard_ML&amp;action=edit&amp;section=12" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<div class="references-small">
<ol class="references">
<li id="cite_note-0"><b><a href="#cite_ref-0" title="">^</a></b> <cite style="font-style:normal" class="book" id="CITEREFMilner.5B.5BMads_Tofte.7CM._Tofte.5D.5D.2C_.5B.5BRobert_Harper_.28computer_scientist.29.7CR._Harper.5D.5D_and_D._MacQueen.1997"><a href="/wiki/Robin_Milner" title="Robin Milner">Milner, R.</a>; <a href="/w/index.php?title=Mads_Tofte&amp;action=edit&amp;redlink=1" class="new" title="Mads Tofte (page does not exist)">M. Tofte</a>, <a href="/wiki/Robert_Harper_(computer_scientist)" title="Robert Harper (computer scientist)">R. Harper</a> and D. MacQueen. (1997). <i>The Definition of Standard ML (Revised)</i>. MIT Press. <a href="/wiki/Special:BookSources/0262631814" class="internal">ISBN 0-262-63181-4</a>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=The+Definition+of+Standard+ML+%28Revised%29&amp;rft.aulast=Milner&amp;rft.aufirst=R.&amp;rft.au=Milner%2C+R.&amp;rft.au=%5B%5BMads+Tofte%7CM.+Tofte%5D%5D%2C+%5B%5BRobert+Harper+%28computer+scientist%29%7CR.+Harper%5D%5D+and+D.+MacQueen.&amp;rft.date=1997&amp;rft.pub=MIT+Press&amp;rft.isbn=0-262-63181-4&amp;rfr_id=info:sid/en.wikipedia.org:Standard_ML"><span style="display: none;">&#160;</span></span></li>
</ol>
</div>


<!-- 
NewPP limit report
Preprocessor node count: 1456/1000000
Post-expand include size: 10022/2048000 bytes
Template argument size: 3318/2048000 bytes
Expensive parser function count: 1/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:100337-0!1!0!default!!en!2 and timestamp 20090404075822 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Standard_ML">http://en.wikipedia.org/wiki/Standard_ML</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Procedural_programming_languages" title="Category:Procedural programming languages">Procedural programming languages</a></span> | <span dir='ltr'><a href="/wiki/Category:ML_programming_language_family" title="Category:ML programming language family">ML programming language family</a></span> | <span dir='ltr'><a href="/wiki/Category:Functional_languages" title="Category:Functional languages">Functional languages</a></span> | <span dir='ltr'><a href="/wiki/Category:Programming_languages_created_in_1990" title="Category:Programming languages created in 1990">Programming languages created in 1990</a></span></div><div id="mw-hidden-catlinks" class="mw-hidden-cats-hidden">Hidden categories:&#32;<span dir='ltr'><a href="/wiki/Category:All_articles_with_unsourced_statements" title="Category:All articles with unsourced statements">All articles with unsourced statements</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_unsourced_statements_since_August_2008" title="Category:Articles with unsourced statements since August 2008">Articles with unsourced statements since August 2008</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Standard_ML" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Standard_ML" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Standard_ML&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Standard_ML&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Standard_ML" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Standard_ML" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Standard_ML" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Standard_ML&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Standard_ML&amp;oldid=274704775" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Standard_ML&amp;id=274704775">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-ca"><a href="http://ca.wikipedia.org/wiki/ML_Est%C3%A0ndard">Català</a></li>
				<li class="interwiki-da"><a href="http://da.wikipedia.org/wiki/SML">Dansk</a></li>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/Standard_ML">Deutsch</a></li>
				<li class="interwiki-es"><a href="http://es.wikipedia.org/wiki/Standard_ML">Español</a></li>
				<li class="interwiki-it"><a href="http://it.wikipedia.org/wiki/Standard_ML">Italiano</a></li>
				<li class="interwiki-hu"><a href="http://hu.wikipedia.org/wiki/SML">Magyar</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/Standard_ML">日本語</a></li>
				<li class="interwiki-pl"><a href="http://pl.wikipedia.org/wiki/Standard_ML">Polski</a></li>
				<li class="interwiki-ru"><a href="http://ru.wikipedia.org/wiki/SML">Русский</a></li>
				<li class="interwiki-tr"><a href="http://tr.wikipedia.org/wiki/Standart_ML">Türkçe</a></li>
				<li class="interwiki-uk"><a href="http://uk.wikipedia.org/wiki/Standard_ML">Українська</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 3 March 2009, at 15:52 (UTC).</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv156 in 0.053 secs. --></body></html>
