<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="X86 assembly language,Articles with unsourced statements since July 2008,Special:Search/X86 assembly language,*nix,3DNow!,80186,80188,80286,80386,80486,AMD" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=X86_assembly_language&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=X86_assembly_language&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>x86 assembly language - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "X86_assembly_language";
		var wgTitle = "X86 assembly language";
		var wgAction = "view";
		var wgArticleId = "214948";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 285226422;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-X86_assembly_language skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">x86 assembly language</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<div class="dablink">For a specific list of x86 assembly language instructions, see <a href="/wiki/X86_instruction_listings" title="X86 instruction listings">x86 instruction listings</a>.</div>
<p><b>x86 assembly language</b> is the family of <a href="/wiki/Backwards-compatible" title="Backwards-compatible" class="mw-redirect">backwards-compatible</a> <a href="/wiki/Assembly_language" title="Assembly language">assembly languages</a> for the <a href="/wiki/X86" title="X86">x86</a> class of processors, which includes <a href="/wiki/Intel" title="Intel" class="mw-redirect">Intel</a>'s <a href="/wiki/Pentium" title="Pentium">Pentium</a> series and <a href="/wiki/AMD" title="AMD" class="mw-redirect">AMD</a>'s <a href="/wiki/Athlon" title="Athlon">Athlon</a> series. Like all assembly languages, it uses short <a href="/wiki/Mnemonic" title="Mnemonic">mnemonics</a> to represent the fundamental operations that the <a href="/wiki/CPU" title="CPU" class="mw-redirect">CPU</a> in a computer can perform. <a href="/wiki/Compiler" title="Compiler">Compilers</a> often produce assembly code as an intermediate step when translating a high level program into <a href="/wiki/Machine_code" title="Machine code">machine code</a>. Regarded as a <i><a href="/wiki/Programming_language" title="Programming language">programming language</a></i>, assembly coding is <i>machine specific</i> and low level. It is therefore mainly used for detailed or time critical applications such as <a href="/wiki/Booting" title="Booting">bootloaders</a>, <a href="/wiki/Operating_system" title="Operating system">operating system</a> <a href="/wiki/Kernel_(computer_science)" title="Kernel (computer science)" class="mw-redirect">kernels</a>, and <a href="/wiki/Device_drivers" title="Device drivers" class="mw-redirect">device drivers</a>, as well as for <a href="/wiki/Real_time" title="Real time" class="mw-redirect">real time</a> or small <a href="/wiki/Embedded_system" title="Embedded system">embedded systems</a>.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#History"><span class="tocnumber">1</span> <span class="toctext">History</span></a></li>
<li class="toclevel-1"><a href="#Mnemonics_and_opcodes"><span class="tocnumber">2</span> <span class="toctext">Mnemonics and opcodes</span></a>
<ul>
<li class="toclevel-2"><a href="#Syntax"><span class="tocnumber">2.1</span> <span class="toctext">Syntax</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Registers"><span class="tocnumber">3</span> <span class="toctext">Registers</span></a></li>
<li class="toclevel-1"><a href="#Segmented_addressing"><span class="tocnumber">4</span> <span class="toctext">Segmented addressing</span></a></li>
<li class="toclevel-1"><a href="#Execution_modes"><span class="tocnumber">5</span> <span class="toctext">Execution modes</span></a>
<ul>
<li class="toclevel-2"><a href="#Switching_modes"><span class="tocnumber">5.1</span> <span class="toctext">Switching modes</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Instruction_types"><span class="tocnumber">6</span> <span class="toctext">Instruction types</span></a>
<ul>
<li class="toclevel-2"><a href="#Stack_instructions"><span class="tocnumber">6.1</span> <span class="toctext">Stack instructions</span></a></li>
<li class="toclevel-2"><a href="#Integer_ALU_instructions"><span class="tocnumber">6.2</span> <span class="toctext">Integer ALU instructions</span></a></li>
<li class="toclevel-2"><a href="#Floating_point_instructions"><span class="tocnumber">6.3</span> <span class="toctext">Floating point instructions</span></a></li>
<li class="toclevel-2"><a href="#SIMD_instructions"><span class="tocnumber">6.4</span> <span class="toctext">SIMD instructions</span></a></li>
<li class="toclevel-2"><a href="#Data_manipulation_instructions"><span class="tocnumber">6.5</span> <span class="toctext">Data manipulation instructions</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Program_flow"><span class="tocnumber">7</span> <span class="toctext">Program flow</span></a></li>
<li class="toclevel-1"><a href="#Examples"><span class="tocnumber">8</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2"><a href="#Using_the_flags_register"><span class="tocnumber">8.1</span> <span class="toctext">Using the flags register</span></a></li>
<li class="toclevel-2"><a href="#Using_the_instruction_pointer_register"><span class="tocnumber">8.2</span> <span class="toctext">Using the instruction pointer register</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">9</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">10</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1"><a href="#Further_reading"><span class="tocnumber">11</span> <span class="toctext">Further reading</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">12</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="History" id="History"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=X86_assembly_language&amp;action=edit&amp;section=1" title="Edit section: History">edit</a>]</span> <span class="mw-headline">History</span></h2>
<p>The <a href="/wiki/Intel_8088" title="Intel 8088">Intel 8088</a> and <a href="/wiki/Intel_8086" title="Intel 8086">8086</a> CPUs were 16-bit CPU's that first had an <a href="/wiki/Instruction_set" title="Instruction set">instruction set</a> that is now commonly referred to as x86. They were an evolutionary step up from the previous generation of 8-bit CPUs such as the 8080 and inherited many characteristics and instructions which were extended for the 16-bit era. Both CPUs contained a 20-bit <a href="/wiki/Address_bus" title="Address bus">address bus</a> and 16-bit internal register width. The 8086 had a 16-bit <a href="/wiki/Data_bus" title="Data bus" class="mw-redirect">data bus</a> and 8-bit for the 8088 which was intended as a low-cost option targeted at the embedded market. The x86 assembly language also refers to the many different versions of CPUs that followed from Intel, such as <a href="/wiki/80188" title="80188" class="mw-redirect">80188</a>, <a href="/wiki/80186" title="80186" class="mw-redirect">80186</a>, <a href="/wiki/80286" title="80286" class="mw-redirect">80286</a>, <a href="/wiki/80386" title="80386" class="mw-redirect">80386</a>, <a href="/wiki/80486" title="80486" class="mw-redirect">80486</a>, <a href="/wiki/Pentium" title="Pentium">Pentium</a> and non-Intel CPUs from <a href="/wiki/AMD" title="AMD" class="mw-redirect">AMD</a> and <a href="/wiki/Cyrix" title="Cyrix">Cyrix</a>. The term x86 refers to all the CPUs that can run the same original assembly language.</p>
<p>The modern <a href="/wiki/X86_instruction_set" title="X86 instruction set" class="mw-redirect">x86 instruction set</a> is really a series of extensions of instruction sets that began with the <a href="/wiki/Intel_8008" title="Intel 8008">Intel 8008</a> microprocessor. Nearly full binary <a href="/wiki/Backward_compatibility" title="Backward compatibility">backward compatibility</a> is present between the Intel 8086 chip through to the modern <a href="/wiki/Pentium_4" title="Pentium 4">Pentium 4</a>, <a href="/wiki/Intel_Core" title="Intel Core">Intel Core</a> <a href="/wiki/Core_i7" title="Core i7" class="mw-redirect">Core i7</a>, <a href="/wiki/AMD_Athlon_64" title="AMD Athlon 64" class="mw-redirect">AMD Athlon 64</a>, <a href="/wiki/Opteron" title="Opteron">Opteron</a>, etc. processors. (There are certain unusual exceptions, such as the counted shift instructions, corrections to the original PUSHA instruction, some orphaned Intel 80286 semantics, the dropped <a href="/wiki/LOADALL" title="LOADALL">LOADALL</a> instruction, and the Pentium 4 giving up on precise FPU operation counts.) This is accomplished through its use of two <a href="/wiki/Instruction_set_architecture" title="Instruction set architecture" class="mw-redirect">ISAs</a>, something which is commonly criticized. Compatibility of assembly language programs with older processors depends upon whether the program includes instructions only available on later processors.</p>
<p><a name="Mnemonics_and_opcodes" id="Mnemonics_and_opcodes"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=X86_assembly_language&amp;action=edit&amp;section=2" title="Edit section: Mnemonics and opcodes">edit</a>]</span> <span class="mw-headline">Mnemonics and opcodes</span></h2>
<div class="rellink boilerplate further">Further information: <a href="/wiki/X86_instruction_listings" title="X86 instruction listings">x86 instruction listings</a></div>
<p>Each x86 assembly instruction is represented by a <a href="/wiki/Mnemonic" title="Mnemonic">mnemonic</a>, which in turn directly translates to a series of bytes which represent that instruction, called an <a href="/wiki/Opcode" title="Opcode">opcode</a>. For example, the <a href="/wiki/NOP" title="NOP">NOP</a> instruction translates to 0x90 and the <a href="/wiki/HLT" title="HLT">HLT</a> instruction translates to 0xF4. Some <a href="/wiki/Opcode" title="Opcode">opcodes</a> have no mnemonics named after them and are undocumented. Different processors in the x86-family may interpret undocumented opcodes differently, making a program using them behave differently on different processors. Some undocumented opcodes may generate processor exceptions on some processors.</p>
<p><a name="Syntax" id="Syntax"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=X86_assembly_language&amp;action=edit&amp;section=3" title="Edit section: Syntax">edit</a>]</span> <span class="mw-headline">Syntax</span></h3>
<p>x86 assembly language has two main <a href="/wiki/Syntax_of_programming_languages" title="Syntax of programming languages" class="mw-redirect">syntax</a> branches: <i><a href="/wiki/Intel" title="Intel" class="mw-redirect">Intel</a> syntax</i>, originally used for documentation of the <a href="/wiki/X86_architecture" title="X86 architecture" class="mw-redirect">x86 platform</a>, and <i><a href="/wiki/AT%26T" title="AT&amp;T">AT&amp;T</a> syntax</i>.<sup id="cite_ref-GASvsNASM_0-0" class="reference"><a href="#cite_note-GASvsNASM-0" title=""><span>[</span>1<span>]</span></a></sup> <i>Intel syntax</i> is dominant in the <a href="/wiki/Windows" title="Windows" class="mw-redirect">Windows</a> world. In the <a href="/wiki/*nix" title="*nix" class="mw-redirect">Unix/Linux</a> world, both are used because <a href="/wiki/GNU_Compiler_Collection" title="GNU Compiler Collection">GCC</a> only supported <i>AT&amp;T-syntax</i> in former times.<sup class="noprint Template-Fact"><span title="This claim needs references to reliable sources&#160;since July 2008" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</span></sup> Here is a summarized list of the main differences between <i>Intel syntax</i> and <i>AT&amp;T syntax</i>:</p>
<ul>
<li>in <i>AT&amp;T syntax</i>, the source comes before the destination, in the opposite style from <i>Intel syntax</i><sup id="cite_ref-GASvsNASM_0-1" class="reference"><a href="#cite_note-GASvsNASM-0" title=""><span>[</span>1<span>]</span></a></sup></li>
<li>in <i>AT&amp;T syntax</i>, the mnemonics are suffixed with a letter indicating the size of the operands (e.g. "q" for qword, "l" for dword, "w" for word, and "b" for byte)<sup id="cite_ref-GASvsNASM_0-2" class="reference"><a href="#cite_note-GASvsNASM-0" title=""><span>[</span>1<span>]</span></a></sup></li>
<li>in <i>AT&amp;T syntax</i>, <a href="/wiki/Constant_(programming)" title="Constant (programming)">immediate values</a> must be prefixed with a "$", and registers must be prefixed with a "%"<sup id="cite_ref-GASvsNASM_0-3" class="reference"><a href="#cite_note-GASvsNASM-0" title=""><span>[</span>1<span>]</span></a></sup></li>
<li>in <i>AT&amp;T syntax</i>, effective <a href="/wiki/Memory_address" title="Memory address">addresses</a> use the general syntax <i>DISP(BASE,INDEX,SCALE)</i>, whereas in <i>Intel syntax</i>, effective addresses use variables, and need to be in square brackets; additionally, size keywords like 'byte', 'word' or 'dword' have to be used.<sup id="cite_ref-GASvsNASM_0-4" class="reference"><a href="#cite_note-GASvsNASM-0" title=""><span>[</span>1<span>]</span></a></sup> For example, the following are equivalent:
<ul>
<li>in <i>AT&amp;T syntax</i>: <i>movl mem_location(%ebx,%ecx,4),&#160;%eax</i></li>
<li>in <i>Intel syntax</i>: <i>mov eax, dword [ebx + ecx*4 + mem_location]</i></li>
</ul>
</li>
</ul>
<p>Most x86 assemblers use <i>Intel syntax</i> including <a href="/wiki/MASM" title="MASM" class="mw-redirect">MASM</a>, <a href="/wiki/TASM" title="TASM" class="mw-redirect">TASM</a>, <a href="/wiki/Netwide_Assembler" title="Netwide Assembler">NASM</a>, <a href="/wiki/FASM" title="FASM">FASM</a> and <a href="/wiki/YASM" title="YASM" class="mw-redirect">YASM</a>. <a href="/wiki/GNU_Assembler" title="GNU Assembler">GAS</a> has supported both syntaxes since version 2.10 via the <i>.intel_syntax</i> directive.<sup id="cite_ref-GASvsNASM_0-5" class="reference"><a href="#cite_note-GASvsNASM-0" title=""><span>[</span>1<span>]</span></a></sup><sup id="cite_ref-WhichAsm_1-0" class="reference"><a href="#cite_note-WhichAsm-1" title=""><span>[</span>2<span>]</span></a></sup><sup id="cite_ref-2" class="reference"><a href="#cite_note-2" title=""><span>[</span>3<span>]</span></a></sup></p>
<p><a name="Registers" id="Registers"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=X86_assembly_language&amp;action=edit&amp;section=4" title="Edit section: Registers">edit</a>]</span> <span class="mw-headline">Registers</span></h2>
<div class="rellink boilerplate further">Further information: <a href="/wiki/X86_architecture" title="X86 architecture" class="mw-redirect">X86 architecture</a>, <a href="/wiki/MOV_(x86_instruction)" title="MOV (x86 instruction)">MOV (x86 instruction)</a></div>
<p>x86 processors have a collection of registers available to be used as stores for binary data. Collectively the data and address registers are called the general registers.</p>
<p>With the general registers, there are additionally the:</p>
<ul>
<li>segment registers (CS, DS, ES, FS, GS, SS)</li>
<li>other registers (IP instruction pointer, <a href="/wiki/FLAGS_register_(computing)" title="FLAGS register (computing)">FLAGS</a>)</li>
<li>extra extension registers (<a href="/wiki/MMX_(instruction_set)" title="MMX (instruction set)">MMX</a>, <a href="/wiki/3DNow!" title="3DNow!">3DNow!</a>, <a href="/wiki/Streaming_SIMD_Extensions" title="Streaming SIMD Extensions">SSE</a>, etc).</li>
</ul>
<p>The IP register points to where in the program the processor is currently executing its code. The IP register cannot be accessed by the programmer directly.</p>
<p>The x86 registers can be used by using the <a href="/wiki/MOV_(x86_instruction)" title="MOV (x86 instruction)">MOV</a> instructions. For example:</p>
<pre>
   mov ax, 1234<a href="/wiki/Hexadecimal" title="Hexadecimal">h</a>
   mov bx, ax
</pre>
<p>copies the value 1234h into register ax and then copies the value of the ax register into the bx register. (Intel syntax)</p>
<p><a name="Segmented_addressing" id="Segmented_addressing"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=X86_assembly_language&amp;action=edit&amp;section=5" title="Edit section: Segmented addressing">edit</a>]</span> <span class="mw-headline">Segmented addressing</span></h2>
<p>The <a href="/wiki/X86_architecture" title="X86 architecture" class="mw-redirect">x86 architecture</a> in real and virtual 8086 mode uses a process known as segmentation to address memory, and not a linear method as used in other architectures. Segmentation involves decomposing a linear address into two parts - a <i>segment</i> and an <i>offset</i>. The segment address points to the beginning of a 64K group of addresses and an offset from the base address of the specified segment. In real mode, to translate back into a linear address, the segment address is shifted four bits left (i.e. multiplied by 16) and then added to the offset.</p>
<p>Two registers are used for a memory address: one to hold the segment, and one to hold the offset.</p>
<p>In real mode only, for example, if DS contains the <a href="/wiki/Hexadecimal" title="Hexadecimal">hexadecimal</a> number 0xDEAD and DX contains the number 0xCAFE they would together point to the memory address 0xDEAD * 0x10 + 0xCAFE = 0xEB5CE. In real mode the CPU can address up to 1,048,576 bytes. This applies to 20-bit address space. By combining <i>segment</i> and <i>offset</i> values we find a 20-bit address.</p>
<p>In protected mode, the segment selector can be broken down into three parts: A 13-bit index, a TI (Table Indicator) bit that indicates whether the entry is in the <a href="/wiki/Global_Descriptor_Table" title="Global Descriptor Table">GDT</a> or <a href="/wiki/Local_Descriptor_Table" title="Local Descriptor Table">LDT</a> (which when loaded, looked up for the base), and a 2-bit RPL (Requested Privilege Level). See <a href="/wiki/X86_memory_segmentation" title="X86 memory segmentation">x86 memory segmentation</a>.</p>
<p>In referring to an address with a segment and an offset, the notation of <i>segment</i>:<i>offset</i> is used, in the above example (for real mode only), the linear address 0xEB5CE can be written as 0xDEAD:0xCAFE, or if one has a segment and offset register pair, DS:DX.</p>
<p>There are some special combinations of segment registers and general registers that point to important addresses:</p>
<ul>
<li>CS:IP points to the address where the processor will fetch the next byte of code.</li>
<li>SS:SP points to the location of the last item pushed onto the stack.</li>
<li>DS:SI is often used to point to data that is about to be copied to ES:DI</li>
</ul>
<p><a name="Execution_modes" id="Execution_modes"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=X86_assembly_language&amp;action=edit&amp;section=6" title="Edit section: Execution modes">edit</a>]</span> <span class="mw-headline">Execution modes</span></h2>
<div class="rellink boilerplate further">Further information: <a href="/wiki/X86_architecture" title="X86 architecture" class="mw-redirect">X86 architecture</a></div>
<p>The processor supports numerous modes of operation for x86 code in which some instructions are available and some are not. A 16-bit subset of instructions are available in "real mode" (available in all x86 processors), "16-bit protected mode" (available since the <a href="/wiki/80286" title="80286" class="mw-redirect">80286</a>), or "v86 mode" (available since the Intel <a href="/wiki/80386" title="80386" class="mw-redirect">80386</a>). In "32-bit protected mode" (available in processors starting with the Intel 80386) or "<a href="/wiki/Legacy_mode" title="Legacy mode">legacy mode</a>" (available when 64 bit extensions are enabled), 32-bit instructions (plus SIMD instructions) are available. In "long mode" (available since the <a href="/wiki/AMD_Opteron" title="AMD Opteron" class="mw-redirect">AMD Opteron</a> processor) 64-bit instructions are available. The instruction set is based on similar ideas in each mode, but involves different ways of accessing memory and thus employs different programming strategies.</p>
<p>The modes in which x86 code can be executed in are:</p>
<ul>
<li><a href="/wiki/Real_mode" title="Real mode">Real mode</a> (16-bit)</li>
<li><a href="/wiki/Protected_mode" title="Protected mode">Protected mode</a> (16-bit and 32-bit)</li>
<li><a href="/wiki/Virtual_8086_mode" title="Virtual 8086 mode">Virtual 8086 mode</a> (16-bit)</li>
<li><a href="/wiki/System_Management_Mode" title="System Management Mode">System Management Mode</a> (16-bit)</li>
<li><a href="/wiki/Long_mode" title="Long mode">Long mode</a> (64-bit)</li>
</ul>
<p><a name="Switching_modes" id="Switching_modes"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=X86_assembly_language&amp;action=edit&amp;section=7" title="Edit section: Switching modes">edit</a>]</span> <span class="mw-headline">Switching modes</span></h3>
<p>By default, the processor starts in real mode; an <a href="/wiki/Operating_system" title="Operating system">operating system</a> <a href="/wiki/Kernel_(computer_science)" title="Kernel (computer science)" class="mw-redirect">kernel</a>, or other program, must explicitly switch to protected mode if it is to run in that mode, and, on <a href="/wiki/X86-64" title="X86-64">x86-64</a> processors, must then switch to long mode if it is to run in that mode. Switching modes can be accomplished by modifying certain bits of the processor's <a href="/wiki/Control_register" title="Control register">control registers</a>.</p>
<p><a name="Instruction_types" id="Instruction_types"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=X86_assembly_language&amp;action=edit&amp;section=8" title="Edit section: Instruction types">edit</a>]</span> <span class="mw-headline">Instruction types</span></h2>
<p>In general, the features of the modern <a href="/wiki/X86_instruction_set" title="X86 instruction set" class="mw-redirect">x86 instruction set</a> are:</p>
<ul>
<li>A compact encoding
<ul>
<li>Variable length and alignment independent (encoded as <a href="/wiki/Endianness" title="Endianness">little endian</a>, as is all data in the x86 architecture)</li>
<li>Mainly one-address and two-address instructions, that is to say, the first <a href="/wiki/Operand" title="Operand">operand</a> is also the destination.</li>
<li>Memory operands as both source and destination are supported (frequently used to read/write stack elements addressed using small immediate offsets).</li>
<li>Both general and implicit <a href="/wiki/Register_(computing)" title="Register (computing)" class="mw-redirect">register</a> usage; although all seven (counting <b>ebp</b>) general registers can be freely used as <a href="/wiki/Accumulator_(computing)" title="Accumulator (computing)">accumulators</a> or for addressing, most of them are also <i>implicitly</i> used by certain (more or less) special instructions; affected registers must therefore be temporarily preserved (normally stacked), if active during such instruction sequences.</li>
</ul>
</li>
<li>Produces conditional flags implicitly through most integer <a href="/wiki/Arithmetic_logic_unit" title="Arithmetic logic unit">ALU</a> instructions.</li>
<li>Supports various <a href="/wiki/Addressing_mode" title="Addressing mode">addressing modes</a> including immediate, offset, and scaled index, but not PC-relative (except jumps) until <a href="/wiki/X86-64" title="X86-64">x86-64</a>.</li>
<li>Includes <a href="/wiki/Floating_point" title="Floating point">floating point</a> to a stack of registers.</li>
<li>Contains special support for atomic instructions (XCHG, CMPXCHG(8B), XADD, and integer instructions which combine with the LOCK prefix)</li>
<li><a href="/wiki/SIMD" title="SIMD">SIMD</a> instructions (instructions which perform parallel simultaneous single instructions on many operands encoded in adjacent cells of wider registers).</li>
</ul>
<p><a name="Stack_instructions" id="Stack_instructions"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=X86_assembly_language&amp;action=edit&amp;section=9" title="Edit section: Stack instructions">edit</a>]</span> <span class="mw-headline">Stack instructions</span></h3>
<p>The x86 architecture has hardware support for an execution stack mechanism. Instructions such as <b>push</b>, <b>call</b>, <b>pop</b>, <b>ret</b>, etc are used with the properly set up stack to pass parameters, to allocate space for local data, and to save and restore call-return points. The <b>ret</b> <i>size</i> instruction is very useful for implementing space efficient (and thereby fast) <a href="/wiki/Calling_convention" title="Calling convention">calling conventions</a> where the callee is responsible for reclaiming stack space occupied by parameters.</p>
<p>When setting up a <a href="/wiki/Stack_frame" title="Stack frame" class="mw-redirect">stack frame</a> to hold local data of a <a href="/wiki/Recursion_(computer_science)" title="Recursion (computer science)">recursive procedure</a> there are several choices; the high level <b>enter</b> instruction takes a <i>procedure-nesting-depth</i> argument as well as a <i>local size</i> argument, and may be faster than more explicit manipulations of the registers (such as <b>push bp</b>, <b>mov bp,sp</b>, <b>sub sp</b>,<i>size</i>). It depends on the particular x86 implementation (i.e. chip), as well as the calling convention and language compiled; the differences are not great however.</p>
<p>The full range of addressing modes (including <i>immediate</i> and <i>base+offset</i>) even for instructions such as <b>push</b> and <b>pop</b>, makes direct usage of the stack for <a href="/wiki/Integer" title="Integer">integer</a>, <a href="/wiki/Floating_point" title="Floating point">floating point</a>, and <a href="/wiki/Memory_address" title="Memory address">address</a> quantities simple. This also means that <a href="/wiki/Application_binary_interface" title="Application binary interface">ABI</a> specifications and mechanisms are fairly simple compared to some RISC architectures, which must be more explicit about call stack details.</p>
<p><a name="Integer_ALU_instructions" id="Integer_ALU_instructions"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=X86_assembly_language&amp;action=edit&amp;section=10" title="Edit section: Integer ALU instructions">edit</a>]</span> <span class="mw-headline">Integer ALU instructions</span></h3>
<p>x86 assembly has the standard mathematical operations, <tt>add</tt>, <tt>sub</tt>, <tt>mul</tt>, with <tt>idiv</tt>; the <a href="/wiki/Logical_operator" title="Logical operator" class="mw-redirect">logical operators</a> <tt>and</tt>, <tt>or</tt>, <tt>xor</tt>, <tt>neg</tt>; <a href="/wiki/Bitshift" title="Bitshift" class="mw-redirect">bitshift</a> arithmetic and logical, <tt>sal</tt>/<tt>sar</tt>, <tt>shl</tt>/<tt>shr</tt>; rotate with and without carry, <tt>rcl</tt>/<tt>rcr</tt>, <tt>rol</tt>/<tt>ror</tt>, a complement of BCD arithmetic instructions, <tt>aaa</tt>, <tt>aad</tt>, <tt>daa</tt> and others.</p>
<p><a name="Floating_point_instructions" id="Floating_point_instructions"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=X86_assembly_language&amp;action=edit&amp;section=11" title="Edit section: Floating point instructions">edit</a>]</span> <span class="mw-headline">Floating point instructions</span></h3>
<p>x86 assembly language includes instructions for a stack-based floating point unit. They include addition, subtraction, negation, multiplication, division, remainder, square roots, integer truncation, fraction truncation, and scale by power of two. The operations also include conversion instructions which can load or store a value from memory in any of the following formats: Binary coded decimal, 32-bit integer, 64-bit integer, 32-bit floating point, 64-bit floating point or 80-bit floating point (upon loading, the value is converted to the currently used floating point mode). The x86 also includes a number of transcendental functions including sine, cosine, tangent, arctangent, exponentiation with the base 2 and logarithms to bases 2, 10, or <a href="/wiki/E_(mathematical_constant)" title="E (mathematical constant)">e</a>.</p>
<p>The stack register to stack register format of the instructions is usually <tt>F(OP) st, st(*)</tt> or <tt>F(OP) st(*), st</tt>. Where st is equivalent to st(0), and st(*) is one of the 8 stack registers (st(0), st(1), ..., st(7)) Like the integers, the first operand is both the first source operand and the destination operand. FSUBR and FDIVR should be singled out as first swapping the source operands before performing the subtraction or division. The addition, subtraction, multiplication, division, store and comparison instructions include instruction modes that will pop the top of the stack after their operation is complete. So for example <tt>FADDP st(1), st</tt> performs the calculation st(1) = st(1) + st(0), then removes st(0) from the top of stack, thus making what was the result in st(1) the top of the stack in st(0).</p>
<p><a name="SIMD_instructions" id="SIMD_instructions"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=X86_assembly_language&amp;action=edit&amp;section=12" title="Edit section: SIMD instructions">edit</a>]</span> <span class="mw-headline">SIMD instructions</span></h3>
<p>Modern x86 CPUs contain SIMD instructions, which largely perform the same operation in parallel on many values encoded in a wide SIMD register. Various instruction technologies support different operations on different register sets, but taken as complete whole (from <a href="/wiki/MMX_(instruction_set)" title="MMX (instruction set)">MMX</a> to <a href="/wiki/SSE4#SSE4.2" title="SSE4">SSE4.2</a>) they include general computations on integer or floating point arithmetic (addition, subtraction, multiplication, shift, minimization, maximization, comparison, division or square root). So for example, <tt>PADDW MM0, MM1</tt> performs 4 parallel 16-bit (indicated by the W) integer adds (indicated by the PADD) of mm0 values to mm1 and stores the result in mm0. <a href="/wiki/Streaming_SIMD_Extensions" title="Streaming SIMD Extensions">SSE</a> also includes a floating point mode in which only the very first value of the registers is actually modified (expanded in <a href="/wiki/SSE2" title="SSE2">SSE2</a>). Some other unusual instructions have been added including a <a href="/wiki/Sum_of_absolute_differences" title="Sum of absolute differences">sum of absolute differences</a> (used for <a href="/wiki/Motion_compensation#motion_estimation" title="Motion compensation">motion estimation</a> in <a href="/wiki/Video_compression" title="Video compression">video compression</a>, such as is done in <a href="/wiki/MPEG" title="MPEG" class="mw-redirect">MPEG</a>) and a 16-bit multiply accumulation instruction (useful for software-based alpha-blending and <a href="/wiki/Digital_filter" title="Digital filter">digital filtering</a>). SSE (since <a href="/wiki/SSE3" title="SSE3">SSE3</a>) and <a href="/wiki/3DNow!" title="3DNow!">3DNow!</a> extensions include addition and subtraction instructions for treating paired floating point values like complex numbers.</p>
<p>These instruction sets also include numerous fixed sub-word instructions for shuffling, inserting and extracting the values around within the registers. In addition there are instructions for moving data between the integer registers and XMM (used in SSE)/FPU (used in MMX) registers.</p>
<p><a name="Data_manipulation_instructions" id="Data_manipulation_instructions"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=X86_assembly_language&amp;action=edit&amp;section=13" title="Edit section: Data manipulation instructions">edit</a>]</span> <span class="mw-headline">Data manipulation instructions</span></h3>
<p>The x86 processor also includes complex addressing modes for addressing memory with an immediate offset, a register, a register with an offset, a scaled register with or without an offset, and a register with an optional offset and another scaled register. So for example, one can encode <tt>mov eax, [Table + ebx + esi*4]</tt> as a single instruction which loads 32 bits of data from the address computed as (Table + ebx + esi * 4) offset from the DS selector, and stores it to the eax register. In general the x86 processor can load and use memory matched to the size of any register it is operating on. (The SIMD instructions also include half-load instructions.)</p>
<p>The x86 instruction set includes string load, store and move instructions (LODS, STOS, and MOVS) which perform each operation to a specified size (B for 8-bit byte, W for 16-bit word, D for 32-bit double word) then increments/decrements (depending on DF, direction flag) the implicit address register (SI for LODS, DI for STOS, and both for MOVS). For the load and store, the implicit target/source register is in the AL, AX or EAX register (depending on size). The implicit segment used is DS for LODS, ES for STOS and both for MOVS. In modern x86 processors, these complex instructions don't offer any performance advantage over more simply implemented separate load/store and address increment instructions.</p>
<p>The stack is implemented with an implicitly decrementing (push) and incrementing (pop) stack pointer. In 16-bit mode, this implicit stack pointer is addressed as SS:[SP], in 32-bit mode it's SS:[ESP], and in 64-bit mode it's [RSP]. The stack pointer actually points to the last value that was stored, under the assumption that its size will match the operating mode of the processor (i.e., 16, 32, or 64 bits) to match the default width of the PUSH/POP/CALL/RET instructions. Also included are the instructions ENTER and LEAVE which reserve and remove data from the top of the stack while setting up a stack frame pointer in BP/EBP/RBP. However, direct setting, or addition and subtraction to the SP/ESP/RSP register is also supported, so the ENTER/LEAVE instructions are generally unnecessary. Other instructions for manipulating the stack include PUSHF/POPF for storing and retrieving the (E)FLAGS register. The PUSHA/POPA instructions will store and retrieve the entire integer register state to and from the stack.</p>
<p>Values for a SIMD load or store are assumed to be packed in adjacent positions for the SIMD register and will align them in sequential little-endian order. Some SSE load and store instructions require 16-byte alignment to function properly. The SIMD instruction sets also include "prefetch" instructions which perform the load but do not target any register, used for cache loading. The SSE instruction sets also include non-temporal store instructions which will perform stores straight to memory without performing a cache allocate if the destination is not already cached (otherwise it will behave like a regular store.)</p>
<p>Most generic integer and floating point (but no SIMD) instructions can use one parameter as a complex address as the second source parameter. Integer instructions can also accept one memory parameter as a destination operand.</p>
<p><a name="Program_flow" id="Program_flow"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=X86_assembly_language&amp;action=edit&amp;section=14" title="Edit section: Program flow">edit</a>]</span> <span class="mw-headline">Program flow</span></h2>
<p>The x86 assembly has an unconditional jump operation, <a href="/wiki/JMP_(x86_instruction)" title="JMP (x86 instruction)"><code>jmp</code></a>, which can take an immediate address, a register or an indirect address as a parameter. (Note that most RISC processors only support a link register or short immediate displacement for jumping.)</p>
<p>Also supported are several conditional jumps, including <code>je</code> (jump on equality), <code>jne</code> (jump on inequality), <code>jg</code> (jump on greater than, signed), <code>jl</code> (jump on less than, signed), <code>ja</code> (jump on above/greater than, unsigned), <code>jb</code> (jump on below/less than, unsigned). These conditional operations are based on the state of specific bits in the <a href="/wiki/FLAGS_register_(computing)" title="FLAGS register (computing)">(E)FLAGS</a> register. Many arithmetic and logic operations set, clear or complement these flags depending on their result. The comparison <code>cmp</code> (compare) and <a href="/wiki/TEST_(x86_instruction)" title="TEST (x86 instruction)"><code>test</code></a> instructions set the flags as if they had performed a subtraction or a bitwise AND operation, respectively, without altering the values of the operands. There are also instructions such as <code>clc</code> (clear carry flag) and <code>cmc</code> (complement carry flag) which work on the flags directly. Floating point comparisons are performed via FCOM or FICOM instructions which eventually have to be converted to integer flags.</p>
<p>Each jump operation has three different forms, depending on the size of the operand. A <i>short</i> jump uses an 8-bit signed operand, which is a relative offset from the current instruction. A <i>near</i> jump is similar to a short jump but uses a 16-bit signed operand (in real or protected mode) or a 32-bit signed operand (in 32-bit protected mode only). A <i>far</i> jump is one that uses the full segment base:offset value as an absolute address. There are also indirect and indexed forms of each of these.</p>
<p>In addition to the simple jump operations, there are the <code>call</code> (call a subroutine) and <code>ret</code> (return from subroutine) instructions. Before transferring control to the subroutine, <code>call</code> pushes the segment offset address of the instruction following the <code>call</code> onto the stack; <code>ret</code> pops this value off the stack, and jumps to it, effectively returning the flow of control to that part of the program. In the case of a <code>far call</code>, the segment base is pushed following the offset; <code>far ret</code> pops the offset and then the segment base to return.</p>
<p>There are also two similar instructions, <a href="/wiki/INT_(x86_instruction)" title="INT (x86 instruction)"><code>int</code></a> (interrupt), which saves the current <a href="/wiki/FLAGS_register_(computing)" title="FLAGS register (computing)">(E)FLAGS</a> register value on the stack, then performs a <code>far call</code>, except that instead of an address, it uses an <i>interrupt vector</i>, an index into a table of interrupt handler addresses. Typically, the interrupt handler saves all other CPU registers it uses, unless they are used to return the result of an operation to the calling program (in software called interrupts). The matching return from interrupt instruction is <code>iret</code>, which restores the flags after returning. <i>Soft Interrupts</i> of the type described above are used by some operating systems for system calls, and can also be used in debugging hard interrupt handlers. <i>Hard interrupts</i> are triggered by external hardware events, and must preserve all register values as the state of the currently executing program is unknown. In Protected Mode, interrupts may be set up by the OS to trigger a task switch, which will automatically save all registers of the active task.</p>
<p><a name="Examples" id="Examples"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=X86_assembly_language&amp;action=edit&amp;section=15" title="Edit section: Examples">edit</a>]</span> <span class="mw-headline">Examples</span></h2>
<p><a name="Using_the_flags_register" id="Using_the_flags_register"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=X86_assembly_language&amp;action=edit&amp;section=16" title="Edit section: Using the flags register">edit</a>]</span> <span class="mw-headline">Using the flags register</span></h3>
<p>Flags are notably used in the x86 architecture for comparisons. A comparison is made between two registers, for example, and in comparison of their difference a flag is raised. A jump instruction then checks the respective flag and jumps if the flag has been raised: for example</p>
<pre>
    cmp eax, ebx
    jne do_something
</pre>
<p>Flags are also used in the x86 architecture to turn on and off certain features or execution modes. For example, to disable the processing of interrupts you can use the command:</p>
<pre>
    cli
</pre>
<p>The flags register can also be directly accessed. The low 8 bits of the flag register can be loaded into AH using the LAHF instruction. The entire flags register can also be moved on and off the stack using the instructions PUSHF, POPF, INT (including INTO) and IRET.</p>
<p><a name="Using_the_instruction_pointer_register" id="Using_the_instruction_pointer_register"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=X86_assembly_language&amp;action=edit&amp;section=17" title="Edit section: Using the instruction pointer register">edit</a>]</span> <span class="mw-headline">Using the instruction pointer register</span></h3>
<p>There is also a 32-bit <a href="/wiki/Instruction_pointer" title="Instruction pointer" class="mw-redirect">instruction pointer</a>, named EIP. The EIP register points to where in the program the processor is currently executing its code. The EIP register cannot be accessed by the programmer directly. Instead, a sequence like the following can be done to retrieve the address of <i>next_line</i> into EAX:</p>
<pre>
    call next_line
next_line:
    pop eax
</pre>
<p>This works even in <a href="/wiki/Position-independent_code" title="Position-independent code">position-independent code</a> because <b>call</b> takes an EIP-relative immediate operand. To write to EIP is simple:</p>
<pre>
    jmp eax
</pre>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=X86_assembly_language&amp;action=edit&amp;section=18" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<ul>
<li><a href="/wiki/Assembly_language" title="Assembly language">assembly language</a></li>
<li><a href="/wiki/X86_instruction_listings" title="X86 instruction listings">X86 instruction listings</a></li>
<li><a href="/wiki/X86_architecture" title="X86 architecture" class="mw-redirect">X86 architecture</a></li>
<li><a href="/wiki/CPU_design" title="CPU design">CPU design</a></li>
<li><a href="/wiki/List_of_assemblers" title="List of assemblers" class="mw-redirect">List of assemblers</a></li>
<li><a href="/wiki/Self-modifying_code" title="Self-modifying code">self-modifying code</a></li>
<li><a href="/wiki/DOS" title="DOS">DOS</a></li>
</ul>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=X86_assembly_language&amp;action=edit&amp;section=19" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<div class="references-small">
<ol class="references">
<li id="cite_note-GASvsNASM-0">^ <a href="#cite_ref-GASvsNASM_0-0" title=""><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-GASvsNASM_0-1" title=""><sup><i><b>b</b></i></sup></a> <a href="#cite_ref-GASvsNASM_0-2" title=""><sup><i><b>c</b></i></sup></a> <a href="#cite_ref-GASvsNASM_0-3" title=""><sup><i><b>d</b></i></sup></a> <a href="#cite_ref-GASvsNASM_0-4" title=""><sup><i><b>e</b></i></sup></a> <a href="#cite_ref-GASvsNASM_0-5" title=""><sup><i><b>f</b></i></sup></a> <cite style="font-style:normal" class="web" id="CITEREFRam_Narayam2007">Ram Narayam (2007-10-17). <a href="http://www.ibm.com/developerworks/library/l-gas-nasm.html" class="external text" title="http://www.ibm.com/developerworks/library/l-gas-nasm.html" rel="nofollow">"Linux assemblers: A comparison of GAS and NASM"</a><span class="printonly">. <a href="http://www.ibm.com/developerworks/library/l-gas-nasm.html" class="external free" title="http://www.ibm.com/developerworks/library/l-gas-nasm.html" rel="nofollow">http://www.ibm.com/developerworks/library/l-gas-nasm.html</a></span><span class="reference-accessdate">. Retrieved on 2008-07-02</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Linux+assemblers%3A+A+comparison+of+GAS+and+NASM&amp;rft.atitle=&amp;rft.aulast=Ram+Narayam&amp;rft.au=Ram+Narayam&amp;rft.date=2007-10-17&amp;rft_id=http%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Flibrary%2Fl-gas-nasm.html&amp;rfr_id=info:sid/en.wikipedia.org:X86_assembly_language"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-WhichAsm-1"><b><a href="#cite_ref-WhichAsm_1-0" title="">^</a></b> <cite style="font-style:normal" class="web" id="CITEREFRandall_Hyde">Randall Hyde. <a href="http://webster.cs.ucr.edu/AsmTools/WhichAsm.html" class="external text" title="http://webster.cs.ucr.edu/AsmTools/WhichAsm.html" rel="nofollow">"Which Assembler is the Best?"</a><span class="printonly">. <a href="http://webster.cs.ucr.edu/AsmTools/WhichAsm.html" class="external free" title="http://webster.cs.ucr.edu/AsmTools/WhichAsm.html" rel="nofollow">http://webster.cs.ucr.edu/AsmTools/WhichAsm.html</a></span><span class="reference-accessdate">. Retrieved on 2008-05-18</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Which+Assembler+is+the+Best%3F&amp;rft.atitle=&amp;rft.aulast=Randall+Hyde&amp;rft.au=Randall+Hyde&amp;rft_id=http%3A%2F%2Fwebster.cs.ucr.edu%2FAsmTools%2FWhichAsm.html&amp;rfr_id=info:sid/en.wikipedia.org:X86_assembly_language"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-2"><b><a href="#cite_ref-2" title="">^</a></b> <cite style="font-style:normal" class="web"><a href="http://sourceware.org/cgi-bin/cvsweb.cgi/src/gas/NEWS?rev=1.93&amp;content-type=text/x-cvsweb-markup&amp;cvsroot=src" class="external text" title="http://sourceware.org/cgi-bin/cvsweb.cgi/src/gas/NEWS?rev=1.93&amp;content-type=text/x-cvsweb-markup&amp;cvsroot=src" rel="nofollow">"GNU Assembler News, v2.1 supports Intel syntax"</a>. 2008-04-04<span class="printonly">. <a href="http://sourceware.org/cgi-bin/cvsweb.cgi/src/gas/NEWS?rev=1.93&amp;content-type=text/x-cvsweb-markup&amp;cvsroot=src" class="external free" title="http://sourceware.org/cgi-bin/cvsweb.cgi/src/gas/NEWS?rev=1.93&amp;content-type=text/x-cvsweb-markup&amp;cvsroot=src" rel="nofollow">http://sourceware.org/cgi-bin/cvsweb.cgi/src/gas/NEWS?rev=1.93&amp;content-type=text/x-cvsweb-markup&amp;cvsroot=src</a></span><span class="reference-accessdate">. Retrieved on 2008-07-02</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=GNU+Assembler+News%2C+v2.1+supports+Intel+syntax&amp;rft.atitle=&amp;rft.date=2008-04-04&amp;rft_id=http%3A%2F%2Fsourceware.org%2Fcgi-bin%2Fcvsweb.cgi%2Fsrc%2Fgas%2FNEWS%3Frev%3D1.93%26content-type%3Dtext%2Fx-cvsweb-markup%26cvsroot%3Dsrc&amp;rfr_id=info:sid/en.wikipedia.org:X86_assembly_language"><span style="display: none;">&#160;</span></span></li>
</ol>
</div>
<p><a name="Further_reading" id="Further_reading"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=X86_assembly_language&amp;action=edit&amp;section=20" title="Edit section: Further reading">edit</a>]</span> <span class="mw-headline">Further reading</span></h2>
<ul>
<li><a href="http://www.intel.com/products/processor/manuals/index.htm" class="external text" title="http://www.intel.com/products/processor/manuals/index.htm" rel="nofollow">Intel 64 and IA-32 Software Developer Manuals</a></li>
<li><a href="http://www.amd.com/us-en/assets/content_type/white_papers_and_tech_docs/24592.pdf" class="external text" title="http://www.amd.com/us-en/assets/content_type/white_papers_and_tech_docs/24592.pdf" rel="nofollow">AMD64 Architecture Programmer's Manual Volume 1: Application Programming</a> (PDF)</li>
<li><a href="http://www.amd.com/us-en/assets/content_type/white_papers_and_tech_docs/24593.pdf" class="external text" title="http://www.amd.com/us-en/assets/content_type/white_papers_and_tech_docs/24593.pdf" rel="nofollow">AMD64 Architecture Programmer's Manual Volume 2: System Programming</a> (PDF)</li>
<li><a href="http://www.amd.com/us-en/assets/content_type/white_papers_and_tech_docs/24594.pdf" class="external text" title="http://www.amd.com/us-en/assets/content_type/white_papers_and_tech_docs/24594.pdf" rel="nofollow">AMD64 Architecture Programmer's Manual Volume 3: General-Purpose and System Instructions</a> (PDF)</li>
<li><a href="http://www.amd.com/us-en/assets/content_type/white_papers_and_tech_docs/26568.pdf" class="external text" title="http://www.amd.com/us-en/assets/content_type/white_papers_and_tech_docs/26568.pdf" rel="nofollow">AMD64 Architecture Programmer's Manual Volume 4: 128-Bit Media Instructions</a> (PDF)</li>
<li><a href="http://www.amd.com/us-en/assets/content_type/white_papers_and_tech_docs/26569.pdf" class="external text" title="http://www.amd.com/us-en/assets/content_type/white_papers_and_tech_docs/26569.pdf" rel="nofollow">AMD64 Architecture Programmer's Manual Volume 5: 64-Bit Media and x87 Floating-Point Instructions</a> (PDF)</li>
</ul>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=X86_assembly_language&amp;action=edit&amp;section=21" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<table class="metadata plainlinks mbox-small" style="border:1px solid #aaa; background-color:#f9f9f9;">
<tr>
<td class="mbox-image"><a href="http://en.wikibooks.org/wiki/Special:Search/X86_assembly_language" title="b:Special:Search/X86 assembly language"><img alt="Sister project" src="http://upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/40px-Wikibooks-logo-en-noslogan.svg.png" width="40" height="40" border="0" /></a></td>
<td class="mbox-text" style=""><a href="/wiki/Wikibooks" title="Wikibooks">Wikibooks</a> has a book on the topic of
<div style="margin-left:10px;"><i><b><a href="http://en.wikibooks.org/wiki/x86_Assembly" class="extiw" title="wikibooks:x86 Assembly">x86 Assembly</a></b></i></div>
</td>
</tr>
</table>
<ul>
<li><a href="http://siyobik.info/index.php?document=x86_32bit_asm" class="external text" title="http://siyobik.info/index.php?document=x86_32bit_asm" rel="nofollow">An Introduction to Writing 32-bit Applications Using the x86 Assembly Language</a></li>
</ul>
<ul>
<li><a href="http://www.intel-assembler.it" class="external text" title="http://www.intel-assembler.it" rel="nofollow">Novice and Advanced Assembly resources for x86 Platform</a></li>
</ul>


<!-- 
NewPP limit report
Preprocessor node count: 1592/1000000
Post-expand include size: 14443/2048000 bytes
Template argument size: 5443/2048000 bytes
Expensive parser function count: 1/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:214948-0!1!0!default!!en!2 and timestamp 20090424175419 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/X86_assembly_language">http://en.wikipedia.org/wiki/X86_assembly_language</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Assembly_languages" title="Category:Assembly languages">Assembly languages</a></span> | <span dir='ltr'><a href="/wiki/Category:X86_architecture" title="Category:X86 architecture">X86 architecture</a></span></div><div id="mw-hidden-catlinks" class="mw-hidden-cats-hidden">Hidden categories:&#32;<span dir='ltr'><a href="/wiki/Category:All_articles_with_unsourced_statements" title="Category:All articles with unsourced statements">All articles with unsourced statements</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_unsourced_statements_since_July_2008" title="Category:Articles with unsourced statements since July 2008">Articles with unsourced statements since July 2008</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/X86_assembly_language" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:X86_assembly_language" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=X86_assembly_language&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=X86_assembly_language&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=X86_assembly_language" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/X86_assembly_language" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/X86_assembly_language" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=X86_assembly_language&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=X86_assembly_language&amp;oldid=285226422" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=X86_assembly_language&amp;id=285226422">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/ASM86">Deutsch</a></li>
				<li class="interwiki-es"><a href="http://es.wikipedia.org/wiki/Lenguaje_ensamblador_x86">Español</a></li>
				<li class="interwiki-pl"><a href="http://pl.wikipedia.org/wiki/Asembler_x86">Polski</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 21 April 2009, at 13:14 (UTC).</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv204 in 0.041 secs. --></body></html>
