<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Stack (data structure),Special:Search/Stack (data structure),68000 family,Abstract data type,Array,Associative array,B-tree,Big O notation,Binary search tree,Breadth-first search,Buffer overflow" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Stack_(data_structure)&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Stack_(data_structure)&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Stack (data structure) - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Stack_(data_structure)";
		var wgTitle = "Stack (data structure)";
		var wgAction = "view";
		var wgArticleId = "273993";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281735858;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
<style type="text/css">/*<![CDATA[*/
.source-pascal {line-height: normal;}
.source-pascal li, .source-pascal pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for pascal
 * CSS class: source-pascal, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-pascal .de1, .source-pascal .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-pascal  {}
.source-pascal .head {}
.source-pascal .foot {}
.source-pascal .imp {font-weight: bold; color: red;}
.source-pascal .ln-xtra {color: #cc0; background-color: #ffc;}
.source-pascal li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-pascal li.li2 {font-weight: bold;}
.source-pascal .kw1 {color: #b1b100;}
.source-pascal .kw2 {color: #000000; font-weight: bold;}
.source-pascal .kw3 {}
.source-pascal .kw4 {color: #993333;}
.source-pascal .co1 {color: #808080; font-style: italic;}
.source-pascal .co2 {color: #339933;}
.source-pascal .coMULTI {color: #808080; font-style: italic;}
.source-pascal .es0 {color: #000099; font-weight: bold;}
.source-pascal .br0 {color: #66cc66;}
.source-pascal .st0 {color: #ff0000;}
.source-pascal .nu0 {color: #cc66cc;}
.source-pascal .me1 {color: #202020;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style>		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Stack_data_structure skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Stack (data structure)</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<div class="dablink">"Pushdown" redirects here. For the strength training exercise, see <a href="/wiki/Pushdown_(exercise)" title="Pushdown (exercise)">pushdown (exercise)</a>.</div>
<div class="thumb tright">
<div class="thumbinner" style="width:202px;"><a href="/wiki/File:Data_stack.svg" class="image" title="Simple representation of a stack"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/2/29/Data_stack.svg/200px-Data_stack.svg.png" width="200" height="144" border="0" class="thumbimage" /></a>
<div class="thumbcaption">
<div class="magnify"><a href="/wiki/File:Data_stack.svg" class="internal" title="Enlarge"><img src="/skins-1.5/common/images/magnify-clip.png" width="15" height="11" alt="" /></a></div>
Simple representation of a stack</div>
</div>
</div>
<p>In <a href="/wiki/Computer_science" title="Computer science">computer science</a>, a <b>stack</b> is an <a href="/wiki/Abstract_data_type" title="Abstract data type">abstract data type</a> and <a href="/wiki/Data_structure" title="Data structure">data structure</a> based on the principle of <i><a href="/wiki/LIFO_(computing)" title="LIFO (computing)">Last In First Out</a> (LIFO)</i>.</p>
<p>A stack is an ordered list of items.</p>
<p>Items are removed from this list in the reverse order to the order of their addition.</p>
<p>Any <a href="/wiki/Abstract_data_type" title="Abstract data type">abstract data type</a> can be an item or element of this list.</p>
<p>There are two main operations: <i>push</i> and <i>pop</i>. The push operation adds (stores) to the list. Due to practical memory limits, stacks are often of a particular size, so this operation must check that the stack is not full, otherwise it will fail. The pop operation removes (deletes) an item from the list, AND returns or exports this item value to the calling program. The pop operation must check to see if the stack is not empty, otherwise it will fail.</p>
<p>Other operations on the stack are optional extras.</p>
<p>A stack's data structure can be implemented by other data structures such as arrays, linked lists and trees.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#History"><span class="tocnumber">1</span> <span class="toctext">History</span></a></li>
<li class="toclevel-1"><a href="#Abstract_data_type"><span class="tocnumber">2</span> <span class="toctext">Abstract data type</span></a>
<ul>
<li class="toclevel-2"><a href="#Operations"><span class="tocnumber">2.1</span> <span class="toctext">Operations</span></a></li>
<li class="toclevel-2"><a href="#Implementation"><span class="tocnumber">2.2</span> <span class="toctext">Implementation</span></a></li>
<li class="toclevel-2"><a href="#Related_data_structures"><span class="tocnumber">2.3</span> <span class="toctext">Related data structures</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Hardware_stacks"><span class="tocnumber">3</span> <span class="toctext">Hardware stacks</span></a>
<ul>
<li class="toclevel-2"><a href="#Basic_architecture_of_a_stack"><span class="tocnumber">3.1</span> <span class="toctext">Basic architecture of a stack</span></a></li>
<li class="toclevel-2"><a href="#Hardware_support"><span class="tocnumber">3.2</span> <span class="toctext">Hardware support</span></a>
<ul>
<li class="toclevel-3"><a href="#Stack_in_main_memory"><span class="tocnumber">3.2.1</span> <span class="toctext">Stack in main memory</span></a></li>
<li class="toclevel-3"><a href="#Stack_in_registers"><span class="tocnumber">3.2.2</span> <span class="toctext">Stack in registers</span></a></li>
<li class="toclevel-3"><a href="#Stack_in_separate_stack_memory"><span class="tocnumber">3.2.3</span> <span class="toctext">Stack in separate stack memory</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-1"><a href="#Applications"><span class="tocnumber">4</span> <span class="toctext">Applications</span></a>
<ul>
<li class="toclevel-2"><a href="#Expression_evaluation_and_syntax_parsing"><span class="tocnumber">4.1</span> <span class="toctext">Expression evaluation and syntax parsing</span></a>
<ul>
<li class="toclevel-3"><a href="#Example_.28general.29"><span class="tocnumber">4.1.1</span> <span class="toctext">Example (general)</span></a></li>
<li class="toclevel-3"><a href="#Example_.28Pascal.29"><span class="tocnumber">4.1.2</span> <span class="toctext">Example (Pascal)</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#Runtime_memory_management"><span class="tocnumber">4.2</span> <span class="toctext">Runtime memory management</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Security"><span class="tocnumber">5</span> <span class="toctext">Security</span></a></li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">6</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">7</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1"><a href="#Further_reading"><span class="tocnumber">8</span> <span class="toctext">Further reading</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">9</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="History" id="History"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Stack_(data_structure)&amp;action=edit&amp;section=1" title="Edit section: History">edit</a>]</span> <span class="mw-headline">History</span></h2>
<p>The stack method of expression evaluation was first proposed in 1955 and then patented in 1957 by early German computer scientist <a href="/wiki/Friedrich_L._Bauer" title="Friedrich L. Bauer">Friedrich L. Bauer</a>, who received the <a href="/wiki/IEEE" title="IEEE" class="mw-redirect">IEEE</a> Computer Society Pioneer Award in 1988 for his work on <i>Computer Stacks.</i> Apparently the same concept was introduced independently by the Australian scientist <a href="/wiki/Charles_Leonard_Hamblin" title="Charles Leonard Hamblin">Charles Leonard Hamblin</a></p>
<p><a name="Abstract_data_type" id="Abstract_data_type"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Stack_(data_structure)&amp;action=edit&amp;section=2" title="Edit section: Abstract data type">edit</a>]</span> <span class="mw-headline">Abstract data type</span></h2>
<p>As an <a href="/wiki/Abstract_data_type" title="Abstract data type">abstract data type</a>, the stack is a <a href="/wiki/Container_(data_structure)" title="Container (data structure)">container</a> of <a href="/wiki/Node_(computer_science)" title="Node (computer science)">nodes</a> and has two basic operations: <i>push</i> and <i>pop</i>. <i>Push</i> adds a given node to the top of the stack leaving previous nodes below. <i>Pop</i> removes and returns the current top node of the stack. A frequently used metaphor is the idea of a stack of plates in a spring loaded cafeteria stack. In such a stack, only the top plate is visible and accessible to the user, all other plates remain hidden. As new plates are added, each new plate becomes the top of the stack, hiding each plate below, <i>pushing</i> the stack of plates down. As the top plate is removed from the stack, they can be used, the plates <i>pop</i> back up, and the second plate becomes the top of the stack. Two important principles are illustrated by this metaphor: the <a href="/wiki/LIFO_(computing)" title="LIFO (computing)">Last In First Out</a> principle is one; the second is that the contents of the stack are hidden. Only the top plate is visible, so to see what is on the third plate, the first and second plates will have to be removed. This can also be written as FILO-First In Last Out, i.e. the record inserted first will be popped out at last.</p>
<p><a name="Operations" id="Operations"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Stack_(data_structure)&amp;action=edit&amp;section=3" title="Edit section: Operations">edit</a>]</span> <span class="mw-headline">Operations</span></h3>
<p>In modern computer languages, the stack is usually implemented with more operations than just "push" and "pop". The length of a stack can often be returned as a parameter. Another helper operation <i>top</i><sup id="cite_ref-0" class="reference"><a href="#cite_note-0" title=""><span>[</span>1<span>]</span></a></sup> (also known as <i>peek</i>) can return the current top element of the stack without removing it from the stack.</p>
<p>This section gives <a href="/wiki/Pseudocode" title="Pseudocode">pseudocode</a> for adding or removing nodes from a stack, as well as the length and top functions. Throughout we will use <a href="/wiki/Null" title="Null">null</a> to refer to an end-of-list marker or <a href="/wiki/Sentinel_value" title="Sentinel value">sentinel value</a>, which may be implemented in a number of ways using <a href="/wiki/Pointer_(computing)" title="Pointer (computing)">pointers</a>.</p>
<pre>
 <b>record</b> <i>Node</i> {
    data <i>// The data being stored in the node</i>
    next <i>// A <a href="/wiki/Reference" title="Reference">reference</a> to the next node; null for last node</i>
 }
</pre>
<pre>
 <b>record</b> <i>Stack</i> {
     <i>Node</i> stackPointer   <i>// points to the 'top' node; null for an empty stack</i>
 }
</pre>
<pre>
 <b>function</b> push(<i>Stack</i> stack, <i>Element</i> element) { <i>// push element onto stack</i>
     new(newNode)            <i>// Allocate memory to hold new node</i>
     newNode.data   := element
     newNode.next   := stack.stackPointer
     stack.stackPointer := newNode
 }
</pre>
<pre>
 <b>function</b> pop(<i>Stack</i> stack) { <i>// increase the stack pointer and return 'top' node data</i>
     <i>// You could check if stack.stackPointer is null here.</i>
     <i>// If so, you may wish to error, citing the stack underflow.</i>
     node := stack.stackPointer
     stack.stackPointer := node.next
     element := node.data      
     <b>return</b> element
 }
</pre>
<pre>
 <b>function</b> top(<i>Stack</i> stack) { <i>// return 'top' node data</i>
     <b>return</b> stack.stackPointer.data
 }
</pre>
<pre>
 <b>function</b> length(<i>Stack</i> stack) { <i>// return the amount of nodes in the stack</i>
     length := 0
     node := stack.stackPointer
     <b>while</b> node not null {
         length := length + 1
         node := node.next
     }
     <b>return</b> length
 }
</pre>
<p>As you can see, these functions pass the stack and the data elements as parameters and return values, not the data nodes that, in this implementation, include pointers. A stack may also be implemented as a linear section of memory (i.e. an array), in which case the function headers would not change, just the internals of the functions.</p>
<p><a name="Implementation" id="Implementation"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Stack_(data_structure)&amp;action=edit&amp;section=4" title="Edit section: Implementation">edit</a>]</span> <span class="mw-headline">Implementation</span></h3>
<p>In application programs written in a <a href="/wiki/High_level_language" title="High level language" class="mw-redirect">high level language</a>, a stack can be implemented efficiently using either <a href="/wiki/Array" title="Array">arrays</a> or <a href="/wiki/Linked_list" title="Linked list">linked lists</a>. In <a href="/wiki/LISP" title="LISP" class="mw-redirect">LISP</a> there is no need to implement the stack, as the functions <b>push</b> and <b>pop</b> are available for any list. Similar, <a href="/wiki/Python_(programming_language)" title="Python (programming language)">Python</a> provides the 'pop' and 'append' functions to lists. All <a href="/wiki/Forth_(programming_language)" title="Forth (programming language)">Forth</a> like languages (such as <a href="/wiki/PostScript" title="PostScript">Adobe PostScript</a>) are also designed around a stack that is directly visible to and manipulated by the programmer.</p>
<p>A typical storage requirement for a stack of <i>n</i> elements is <i><a href="/wiki/Big_O_notation" title="Big O notation">O</a>(n)</i>. The typical time requirement of <a href="/wiki/Big_O_notation" title="Big O notation">O</a>(1) operations is also easy to satisfy with a <a href="/wiki/Dynamic_array" title="Dynamic array">dynamic array</a> or (singly) <a href="/wiki/Linked_list" title="Linked list">linked list</a> implementation.</p>
<p>C++'s <a href="/wiki/Standard_Template_Library" title="Standard Template Library">Standard Template Library</a> provides a "<code>stack</code>" templated class which is restricted to only push/pop operations. Java's library contains a <code><a href="http://java.sun.com/javase/6/docs/api/java/util/Stack.html" class="external text" title="http://java.sun.com/javase/6/docs/api/java/util/Stack.html" rel="nofollow">Stack</a></code> class that is a specialization of <code><a href="http://java.sun.com/javase/6/docs/api/java/util/Vector.html" class="external text" title="http://java.sun.com/javase/6/docs/api/java/util/Vector.html" rel="nofollow">Vector</a></code>. This could be considered a design flaw because the inherited get() method from <code><a href="http://java.sun.com/javase/6/docs/api/java/util/Vector.html" class="external text" title="http://java.sun.com/javase/6/docs/api/java/util/Vector.html" rel="nofollow">Vector</a></code> ignores the LIFO constraint of the <code><a href="http://java.sun.com/javase/6/docs/api/java/util/Stack.html" class="external text" title="http://java.sun.com/javase/6/docs/api/java/util/Stack.html" rel="nofollow">Stack</a></code>.</p>
<p><a name="Related_data_structures" id="Related_data_structures"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Stack_(data_structure)&amp;action=edit&amp;section=5" title="Edit section: Related data structures">edit</a>]</span> <span class="mw-headline">Related data structures</span></h3>
<p>The abstract data type and data structure of the <i><a href="/wiki/First_In_First_Out" title="First In First Out" class="mw-redirect">First In First Out</a> (FIFO)</i> principle is the <a href="/wiki/Queue_(data_structure)" title="Queue (data structure)">queue</a>, and the combination of stack and queue operations is provided by the <a href="/wiki/Deque" title="Deque">deque</a>. For example, changing a stack into a queue in a <a href="/wiki/Search_algorithm" title="Search algorithm">search algorithm</a> can change the algorithm from <a href="/wiki/Depth-first_search" title="Depth-first search">depth-first search</a> (DFS) into a <a href="/wiki/Breadth-first_search" title="Breadth-first search">breadth-first search</a> (BFS). A <b>bounded stack</b> is a stack limited to a fixed size.</p>
<p><a name="Hardware_stacks" id="Hardware_stacks"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Stack_(data_structure)&amp;action=edit&amp;section=6" title="Edit section: Hardware stacks">edit</a>]</span> <span class="mw-headline">Hardware stacks</span></h2>
<p>A common use of stacks at the Architecture level is as a means of allocating and accessing memory.</p>
<p><a name="Basic_architecture_of_a_stack" id="Basic_architecture_of_a_stack"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Stack_(data_structure)&amp;action=edit&amp;section=7" title="Edit section: Basic architecture of a stack">edit</a>]</span> <span class="mw-headline">Basic architecture of a stack</span></h3>
<div class="thumb tright">
<div class="thumbinner" style="width:352px;"><a href="/wiki/File:ProgramCallStack2.png" class="image" title="A typical stack, storing local data and call information for nested procedures. This stack grows downward from its origin. The stack pointer points to the current topmost datum on the stack. A push operation decrements the pointer and copies the data to the stack; a pop operation copies data from the stack and then increments the pointer. Each procedure called in the program stores procedure return information (in yellow) and local data (in other colors) by pushing them onto the stack. This type of stack implementation is extremely common, but it is vulnerable to buffer overflow attacks (see the text)."><img alt="" src="http://upload.wikimedia.org/wikipedia/en/thumb/a/a7/ProgramCallStack2.png/350px-ProgramCallStack2.png" width="350" height="416" border="0" class="thumbimage" /></a>
<div class="thumbcaption">
<div class="magnify"><a href="/wiki/File:ProgramCallStack2.png" class="internal" title="Enlarge"><img src="/skins-1.5/common/images/magnify-clip.png" width="15" height="11" alt="" /></a></div>
A typical stack, storing local data and call information for nested procedures. This stack grows downward from its origin. The stack pointer points to the current topmost <a href="/wiki/Datum" title="Datum">datum</a> on the stack. A push operation decrements the pointer and copies the data to the stack; a pop operation copies data from the stack and then increments the pointer. Each procedure called in the program stores procedure return information (in yellow) and local data (in other colors) by pushing them onto the stack. This type of stack implementation is extremely common, but it is vulnerable to <a href="/wiki/Buffer_overflow" title="Buffer overflow">buffer overflow</a> attacks (see the text).</div>
</div>
</div>
<p>A typical stack is an area of computer memory with a fixed origin and a variable size. Initially the size of the stack is zero. A <i>stack pointer,</i> usually in the form of a hardware register, points to the most recently referenced location on the stack; when the stack has a size of zero, the stack pointer points to the origin of the stack.</p>
<p>The two operations applicable to all stacks are:</p>
<ul>
<li>a <i>push</i> operation, in which a data item is placed at the location pointed to by the stack pointer, and the address in the stack pointer is adjusted by the size of the data item;</li>
<li>a <i>pop</i> or <i>pull</i> operation: a data item at the current location pointed to by the stack pointer is removed, and the stack pointer is adjusted by the size of the data item.</li>
</ul>
<p>There are many variations on the basic principle of stack operations. Every stack has a fixed location in memory at which it begins. As data items are added to the stack, the stack pointer is displaced to indicate the current extent of the stack, which expands away from the origin (either up or down, depending on the specific implementation).</p>
<p>For example, a stack might start at a memory location of one thousand, and expand towards lower addresses, in which case new data items are stored at locations ranging below 1000, and the stack pointer is decremented each time a new item is added. When an item is removed from the stack, the stack pointer is incremented.</p>
<p>Stack pointers may point to the origin of a stack or to a limited range of addresses either above or below the origin (depending on the direction in which the stack grows); however, the stack pointer cannot cross the origin of the stack. In other words, if the origin of the stack is at address 1000 and the stack grows downwards (towards addresses 999, 998, and so on), the stack pointer must never be incremented beyond 1000 (to 1001, 1002, etc.). If a pop operation on the stack causes the stack pointer to move past the origin of the stack, a <i>stack underflow</i> occurs. If a push operation causes the stack pointer to increment or decrement beyond the maximum extent of the stack, a <i>stack overflow</i> occurs.</p>
<p>Some environments that rely heavily on stacks may provide additional operations, for example:</p>
<ul>
<li><i>Dup</i>(licate): the top item is popped, and then pushed again (twice), so that an additional copy of the former top item is now on top, with the original below it.</li>
<li><i>Peek</i>: the topmost item is inspected (or returned), but the stack pointer is not changed, and the stack size does not change (meaning that the item remains on the stack). This is also called <b>top</b> operation in many articles.</li>
<li><i>Swap</i> or <i>exchange</i>: the two topmost items on the stack exchange places.</li>
<li><i>Rotate</i>: the <i>n</i> topmost items are moved on the stack in a rotating fashion. For example, if <i>n</i>=3, items 1, 2, and 3 on the stack are moved to positions 2, 3, and 1 on the stack, respectively. Many variants of this operation are possible, with the most common being called <i>left rotate</i> and <i>right rotate.</i></li>
</ul>
<p>Stacks are either visualized growing from the bottom up (like real-world stacks), or, with the top of the stack in a fixed position (see image), a coin holder, a <a href="/wiki/Pez" title="Pez">Pez</a> dispenser, or growing from left to right, so that "topmost" becomes "rightmost". This visualization may be independent of the actual structure of the stack in memory. This means that a <i>right rotate</i> will move the first element to the third position, the second to the first and the third to the second. Here are two equivalent visualisations of this process:</p>
<pre>
apple                        banana
banana    ==right rotate==&gt;  cucumber
cucumber                     apple
</pre>
<pre>
cucumber                     apple
banana    ===left rotate==&gt;  cucumber 
apple                        banana
</pre>
<p>A stack is usually represented in computers by a block of memory cells, with the "bottom" at a fixed location, and the stack pointer holding the address of the current "top" cell in the stack. The top and bottom terminology are used irrespective of whether the stack actually grows towards lower memory addresses or towards higher memory addresses.</p>
<p>Pushing an item on to the stack adjusts the stack pointer by the size of the item (either decrementing or incrementing, depending on the direction in which the stack grows in memory), pointing it to the next cell, and copies the new top item to the stack area. Depending again on the exact implementation, at the end of a push operation, the stack pointer may point to the next unused location in the stack, or it may point to the topmost item in the stack. If the stack points to the current topmost item, the stack pointer will be updated before a new item is pushed onto the stack; if it points to the next available location in the stack, it will be updated <i>after</i> the new item is pushed onto the stack.</p>
<p>Popping the stack is simply the inverse of pushing. The topmost item in the stack is removed and the stack pointer is updated, in the opposite order of that used in the push operation.</p>
<p><a name="Hardware_support" id="Hardware_support"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Stack_(data_structure)&amp;action=edit&amp;section=8" title="Edit section: Hardware support">edit</a>]</span> <span class="mw-headline">Hardware support</span></h3>
<p><a name="Stack_in_main_memory" id="Stack_in_main_memory"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Stack_(data_structure)&amp;action=edit&amp;section=9" title="Edit section: Stack in main memory">edit</a>]</span> <span class="mw-headline">Stack in main memory</span></h4>
<p>Many <a href="/wiki/Central_processing_unit" title="Central processing unit">CPUs</a> have registers that can be used as stack pointers. Some, like the <a href="/wiki/Intel_Corporation" title="Intel Corporation">Intel</a> <a href="/wiki/X86" title="X86">x86</a>, have special instructions that implicitly use a register dedicated to the job of being a stack pointer. Others, like the <a href="/wiki/Digital_Equipment_Corporation" title="Digital Equipment Corporation">DEC</a> <a href="/wiki/PDP-11" title="PDP-11">PDP-11</a> and the <a href="/wiki/Motorola" title="Motorola">Motorola</a> <a href="/wiki/68000_family" title="68000 family" class="mw-redirect">68000 family</a> have addressing modes that make it possible to use any of a set of registers as a stack pointer.</p>
<p><a name="Stack_in_registers" id="Stack_in_registers"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Stack_(data_structure)&amp;action=edit&amp;section=10" title="Edit section: Stack in registers">edit</a>]</span> <span class="mw-headline">Stack in registers</span></h4>
<p>The <a href="/wiki/Intel_Corporation" title="Intel Corporation">Intel</a> <a href="/wiki/Intel_8087" title="Intel 8087">80x87</a> series of numeric coprocessors has a set of registers that can be accessed either as a stack or as a series of numbered registers. Sun's <a href="/wiki/SPARC" title="SPARC">SPARC</a> has a number of register windows organized as a stack which significantly reduces the need to use memory for passing function's arguments and return values.</p>
<p><a name="Stack_in_separate_stack_memory" id="Stack_in_separate_stack_memory"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Stack_(data_structure)&amp;action=edit&amp;section=11" title="Edit section: Stack in separate stack memory">edit</a>]</span> <span class="mw-headline">Stack in separate stack memory</span></h4>
<p>There are also a number of microprocessors which implement a stack directly in hardware: Some <a href="/wiki/Microcontroller" title="Microcontroller">microcontrollers</a> have a fixed-depth stack that is not directly accessible.</p>
<ul>
<li>some <a href="/wiki/PIC_microcontroller" title="PIC microcontroller">PIC microcontrollers</a></li>
<li>Computer Cowboys MuP21</li>
<li>Harris RTX line</li>
<li>Novix NC4016</li>
</ul>
<p>Many stack-based microprocessors were used to implement the programming language <a href="/wiki/Forth_(programming_language)" title="Forth (programming language)">Forth</a> at the <a href="/wiki/Microcode" title="Microcode">microcode</a> level. Stacks were also used as a basis of a number of mainframes and mini computers. Such machines were called <a href="/wiki/Stack_machines" title="Stack machines" class="mw-redirect">stack machines</a>, the most famous being the <a href="/wiki/Burroughs_large_systems" title="Burroughs large systems">Burroughs B5000</a>.</p>
<p><a name="Applications" id="Applications"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Stack_(data_structure)&amp;action=edit&amp;section=12" title="Edit section: Applications">edit</a>]</span> <span class="mw-headline">Applications</span></h2>
<p>Stacks are ubiquitous in the computing world.</p>
<p><a name="Expression_evaluation_and_syntax_parsing" id="Expression_evaluation_and_syntax_parsing"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Stack_(data_structure)&amp;action=edit&amp;section=13" title="Edit section: Expression evaluation and syntax parsing">edit</a>]</span> <span class="mw-headline">Expression evaluation and syntax parsing</span></h3>
<p>Calculators employing <a href="/wiki/Reverse_Polish_notation" title="Reverse Polish notation">reverse Polish notation</a> use a stack structure to hold values. Expressions can be represented in prefix, postfix or infix notations. Conversion from one form of the expression to another form needs a stack. Many compilers use a stack for parsing the syntax of expressions, program blocks etc. before translating into low level code. Most of the programming languages are <a href="/wiki/Context-free_grammar" title="Context-free grammar">context-free languages</a> allowing them to be parsed with stack based machines.</p>
<p><a name="Example_.28general.29" id="Example_.28general.29"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Stack_(data_structure)&amp;action=edit&amp;section=14" title="Edit section: Example (general)">edit</a>]</span> <span class="mw-headline">Example (general)</span></h4>
<p>The calculation: ((1 + 2) * 4) + 3 can be written down like this in postfix notation with the advantage of no precedence rules and parentheses needed:</p>
<pre>
1 2 + 4 * 3 +
</pre>
<p>The expression is evaluated from the left to right using a stack:</p>
<ol>
<li>push when encountering an operand and</li>
<li>pop two operands and evaluate the value when encountering an operation.</li>
<li>push the result</li>
</ol>
<p>Like the following way (the <i>Stack</i> is displayed after <i>Operation</i> has taken place):</p>
<table>
<tr>
<th>Input</th>
<th>Operation</th>
<th>Stack</th>
</tr>
<tr>
<td>1</td>
<td>Push operand</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>Push operand</td>
<td>1, 2</td>
</tr>
<tr>
<td>+</td>
<td>Add</td>
<td>3</td>
</tr>
<tr>
<td>4</td>
<td>Push operand</td>
<td>3, 4</td>
</tr>
<tr>
<td>*</td>
<td>Multiply</td>
<td>12</td>
</tr>
<tr>
<td>3</td>
<td>Push operand</td>
<td>12, 3</td>
</tr>
<tr>
<td>+</td>
<td>Add</td>
<td>15</td>
</tr>
</table>
<p>The final result, 15, lies on the top of the stack at the end of the calculation.</p>
<p><a name="Example_.28Pascal.29" id="Example_.28Pascal.29"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Stack_(data_structure)&amp;action=edit&amp;section=15" title="Edit section: Example (Pascal)">edit</a>]</span> <span class="mw-headline">Example (Pascal)</span></h4>
<p>This is an implementation in <a href="/wiki/Pascal_(programming_language)" title="Pascal (programming language)">Pascal</a>, using marked sequential file as data archives.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-pascal">
<span class="coMULTI">{
programmer : clx321
file  : stack.pas
unit  : Pstack.tpu
}</span>
<span class="kw2">program</span> TestStack;
<span class="coMULTI">{this program use ADT of Stack, i will assume that the unit of ADT of Stack has already existed}</span>
 
<span class="kw2">uses</span>
   PStack;   <span class="coMULTI">{ADT of STACK}</span>
 
<span class="coMULTI">{dictionary}</span>
<span class="kw4">const</span>
   mark = <span class="st0">'.'</span>;
 
<span class="kw1">var</span>
   data : stack;
   f : text;
   cc : <span class="kw4">char</span>;
   ccInt, cc1, cc2 : <span class="kw4">integer</span>;
 
  <span class="coMULTI">{functions}</span>
  IsOperand <span class="br0">(</span>cc : <span class="kw4">char</span><span class="br0">)</span> : <span class="kw4">boolean</span>;    <span class="coMULTI">{JUST  Prototype}</span>
    <span class="coMULTI">{return TRUE if cc is operand}</span>
  ChrToInt <span class="br0">(</span>cc : <span class="kw4">char</span><span class="br0">)</span> : <span class="kw4">integer</span>;     <span class="coMULTI">{JUST Prototype}</span>
    <span class="coMULTI">{change char to integer}</span>
  Operator <span class="br0">(</span>cc1, cc2 : <span class="kw4">integer</span><span class="br0">)</span> : <span class="kw4">integer</span>;     <span class="coMULTI">{JUST Prototype}</span>
    <span class="coMULTI">{operate two operands}</span>
 
<span class="coMULTI">{algorithms}</span>
<span class="kw1">begin</span>
  assign <span class="br0">(</span>f, cc<span class="br0">)</span>;
  reset <span class="br0">(</span>f<span class="br0">)</span>;
  <span class="kw3">read</span> <span class="br0">(</span>f, cc<span class="br0">)</span>;  <span class="coMULTI">{first elmt}</span>
  <span class="kw1">if</span> <span class="br0">(</span>cc = mark<span class="br0">)</span> <span class="kw1">then</span>
     <span class="kw1">begin</span>
        <span class="kw3">writeln</span> <span class="br0">(</span><span class="st0">'empty archives !'</span><span class="br0">)</span>;
     <span class="kw1">end</span>
  <span class="kw1">else</span>   
     <span class="kw1">begin</span>
        <span class="kw1">repeat</span>
          <span class="kw1">if</span> <span class="br0">(</span>IsOperand <span class="br0">(</span>cc<span class="br0">)</span><span class="br0">)</span> <span class="kw1">then</span>
             <span class="kw1">begin</span>
               ccInt := ChrToInt <span class="br0">(</span>cc<span class="br0">)</span>;
               push <span class="br0">(</span>ccInt, data<span class="br0">)</span>;               
             <span class="kw1">end</span>
          <span class="kw1">else</span>
             <span class="kw1">begin</span>
               pop <span class="br0">(</span>cc1, data<span class="br0">)</span>;
               pop <span class="br0">(</span>cc2, data<span class="br0">)</span>;
               push <span class="br0">(</span>data, Operator <span class="br0">(</span>cc2, cc1<span class="br0">)</span><span class="br0">)</span>;
             <span class="kw1">end</span>;
           <span class="kw3">read</span> <span class="br0">(</span>f, cc<span class="br0">)</span>;   <span class="coMULTI">{next elmt}</span>
        <span class="kw1">until</span> <span class="br0">(</span>cc = mark<span class="br0">)</span>;
     <span class="kw1">end</span>;
  close <span class="br0">(</span>f<span class="br0">)</span>;
<span class="kw1">end</span>.
</pre></div>
<p><a name="Runtime_memory_management" id="Runtime_memory_management"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Stack_(data_structure)&amp;action=edit&amp;section=16" title="Edit section: Runtime memory management">edit</a>]</span> <span class="mw-headline">Runtime memory management</span></h3>
<div class="rellink noprint relarticle mainarticle">Main articles: <a href="/wiki/Stack-based_memory_allocation" title="Stack-based memory allocation">Stack-based memory allocation</a> and <a href="/wiki/Stack_machine" title="Stack machine">Stack machine</a></div>
<p>A number of <a href="/wiki/Programming_language" title="Programming language">programming languages</a> are <a href="/wiki/Stack-oriented_programming_language" title="Stack-oriented programming language">stack-oriented</a>, meaning they define most basic operations (adding two numbers, printing a character) as taking their arguments from the stack, and placing any return values back on the stack. For example, <a href="/wiki/PostScript" title="PostScript">PostScript</a> has a return stack and an operand stack, and also has a graphics state stack and a dictionary stack.</p>
<p><a href="/wiki/Forth_(programming_language)" title="Forth (programming language)">Forth</a> uses two stacks, one for argument passing and one for subroutine <a href="/wiki/Return_address" title="Return address">return addresses</a>. The use of a return stack is extremely commonplace, but the somewhat unusual use of an argument stack for a human-readable programming language is the reason Forth is referred to as a <i><a href="/wiki/Stack-oriented_programming_language" title="Stack-oriented programming language">stack-based</a></i> language.</p>
<p>Many <a href="/wiki/Virtual_machine" title="Virtual machine">virtual machines</a> are also stack-oriented, including the <a href="/wiki/P-code_machine" title="P-code machine">p-code machine</a> and the <a href="/wiki/Java_virtual_machine" title="Java virtual machine" class="mw-redirect">Java virtual machine</a>.</p>
<p>Almost all computer runtime memory environments use a special stack (the "<a href="/wiki/Call_stack" title="Call stack">call stack</a>") to hold information about procedure/function calling and nesting in order to switch to the context of the called function and restore to the caller function when the calling finishes. They follow a runtime protocol between caller and callee to save arguments and return value on the stack. Stacks are an important way of supporting nested or <a href="/wiki/Recursion" title="Recursion">recursive</a> function calls. This type of stack is used implicitly by the compiler to support CALL and RETURN statements (or their equivalents) and is not manipulated directly by the programmer.</p>
<p>Some programming languages use the stack to store data that is local to a procedure. Space for local data items is allocated from the stack when the procedure is entered, and is deallocated when the procedure exits. The <a href="/wiki/C_(programming_language)" title="C (programming language)">C programming language</a> is typically implemented in this way. Using the same stack for both data and procedure calls has important security implications (see below) of which a programmer must be aware in order to avoid introducing serious security bugs into a program.</p>
<p><a name="Security" id="Security"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Stack_(data_structure)&amp;action=edit&amp;section=17" title="Edit section: Security">edit</a>]</span> <span class="mw-headline">Security</span></h2>
<p>Some computing environments use stacks in ways that may make them vulnerable to security breaches and attacks. Programmers working in such environments must take special care to avoid the pitfalls of these implementations.</p>
<p>For example, some programming languages use a common stack to store both data local to a called procedure and the linking information that allows the procedure to return to its caller. This means that the program moves data into and out of the same stack that contains critical return addresses for the procedure calls. If data is moved to the wrong location on the stack, or an oversized data item is moved to a stack location that is not large enough to contain it, return information for procedure calls may be corrupted, causing the program to fail.</p>
<p>Malicious parties may attempt to take advantage of this type of implementation by providing oversized data input to a program that does not check the length of input. Such a program may copy the data in its entirety to a location on the stack, and in so doing it may change the return addresses for procedures that have called it. An attacker can experiment to find a specific type of data that can be provided to such a program such that the return address of the current procedure is reset to point to an area within the stack itself (and within the data provided by the attacker), which in turn contains instructions that carry out unauthorized operations.</p>
<p>This type of attack is a variation on the <a href="/wiki/Buffer_overflow" title="Buffer overflow">buffer overflow</a> attack and is an extremely frequent source of security breaches in software, mainly because some of the most popular programming languages (such as <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a>) use a shared stack for both data and procedure calls, and do not verify the length of data items. Frequently programmers do not write code to verify the size of data items, either, and when an oversized or undersized data item is copied to the stack, a security breach may occur.</p>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Stack_(data_structure)&amp;action=edit&amp;section=18" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<ul>
<li><a href="/wiki/Queue_(data_structure)" title="Queue (data structure)">Queue</a></li>
<li><a href="/wiki/Deque" title="Deque">Deque</a></li>
<li><a href="/wiki/Call_stack" title="Call stack">Call stack</a></li>
<li><a href="/wiki/Stack-based_memory_allocation" title="Stack-based memory allocation">Stack-based memory allocation</a></li>
<li><a href="/wiki/Stack_machine" title="Stack machine">Stack machine</a></li>
</ul>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Stack_(data_structure)&amp;action=edit&amp;section=19" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<div class="references-small">
<ol class="references">
<li id="cite_note-0"><b><a href="#cite_ref-0" title="">^</a></b> Horowitz, Ellis: "Fundamentals of Data Structures in Pascal", page 67. Computer Science Press, 1984</li>
</ol>
</div>
<p><a name="Further_reading" id="Further_reading"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Stack_(data_structure)&amp;action=edit&amp;section=20" title="Edit section: Further reading">edit</a>]</span> <span class="mw-headline">Further reading</span></h2>
<ul>
<li><a href="/wiki/Donald_Knuth" title="Donald Knuth">Donald Knuth</a>. <i>The Art of Computer Programming</i>, Volume 1: <i>Fundamental Algorithms</i>, Third Edition.Addison-Wesley, 1997. <a href="/wiki/Special:BookSources/0201896834" class="internal">ISBN 0-201-89683-4</a>. Section 2.2.1: Stacks, Queues, and Deques, pp. 238–243.</li>
<li><a href="/wiki/Thomas_H._Cormen" title="Thomas H. Cormen">Thomas H. Cormen</a>, <a href="/wiki/Charles_E._Leiserson" title="Charles E. Leiserson">Charles E. Leiserson</a>, <a href="/wiki/Ronald_L._Rivest" title="Ronald L. Rivest" class="mw-redirect">Ronald L. Rivest</a>, and <a href="/wiki/Clifford_Stein" title="Clifford Stein">Clifford Stein</a>. <i><a href="/wiki/Introduction_to_Algorithms" title="Introduction to Algorithms">Introduction to Algorithms</a></i>, Second Edition. MIT Press and McGraw-Hill, 2001. <a href="/wiki/Special:BookSources/0262032937" class="internal">ISBN 0-262-03293-7</a>. Section 10.1: Stacks and queues, pp.200–204.</li>
</ul>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Stack_(data_structure)&amp;action=edit&amp;section=21" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<table class="metadata plainlinks mbox-small" style="border:1px solid #aaa; background-color:#f9f9f9;">
<tr>
<td class="mbox-image"><a href="http://commons.wikimedia.org/wiki/Special:Search/Stack_(data_structure)" title="commons:Special:Search/Stack (data structure)"><img alt="Sister project" src="http://upload.wikimedia.org/wikipedia/en/thumb/4/4a/Commons-logo.svg/40px-Commons-logo.svg.png" width="40" height="54" border="0" /></a></td>
<td class="mbox-text" style=""><a href="/wiki/Wikimedia_Commons" title="Wikimedia Commons">Wikimedia Commons</a> has media related to: <b><i><a href="http://commons.wikimedia.org/wiki/Category:Stack_data_structure" class="extiw" title="commons:Category:Stack data structure">Stack data structure</a> </i></b></td>
</tr>
</table>
<ul>
<li><a href="http://24bytes.com/stack.html" class="external text" title="http://24bytes.com/stack.html" rel="nofollow">Stack program in c++</a></li>
<li><a href="http://www.ece.cmu.edu/~koopman/stack_computers/index.html" class="external text" title="http://www.ece.cmu.edu/~koopman/stack_computers/index.html" rel="nofollow">Stack Machines - the new wave</a></li>
<li><a href="http://www.cs.utah.edu/~regehr/stacktool" class="external text" title="http://www.cs.utah.edu/~regehr/stacktool" rel="nofollow">Bounding stack depth</a></li>
<li><a href="http://research.avayalabs.com/project/libsafe/" class="external text" title="http://research.avayalabs.com/project/libsafe/" rel="nofollow">Libsafe - Protecting Critical Elements of Stacks</a></li>
<li><a href="http://www.cs.ucla.edu/~palsberg/paper/sas03.pdf" class="external text" title="http://www.cs.ucla.edu/~palsberg/paper/sas03.pdf" rel="nofollow">Stack Size Analysis for Interrupt-driven Programs</a> (322 KB)</li>
<li><a href="http://www.mycplus.com/utilitiesdetail.asp?iPro=1" class="external text" title="http://www.mycplus.com/utilitiesdetail.asp?iPro=1" rel="nofollow">Stack Implementation ( Graphical &amp; Text Mode)</a> C Language implementation of Stack</li>
<li>Pointers to <a href="http://web-cat.cs.vt.edu/AlgovizWiki/Stacks" class="external text" title="http://web-cat.cs.vt.edu/AlgovizWiki/Stacks" rel="nofollow">stack visualizations</a></li>
<li><i>This article incorporates text from the <a href="/wiki/National_Institute_of_Standards_and_Technology" title="National Institute of Standards and Technology">NIST</a> <a href="/wiki/Dictionary_of_Algorithms_and_Data_Structures" title="Dictionary of Algorithms and Data Structures">Dictionary of Algorithms and Data Structures</a>, which, as a <a href="/wiki/Copyright_status_of_work_by_the_U.S._government" title="Copyright status of work by the U.S. government">U.S. government publication</a>, is in the <a href="/wiki/Public_domain" title="Public domain">public domain</a>. Source: <a href="http://www.nist.gov/dads/HTML/boundedstack.html" class="external text" title="http://www.nist.gov/dads/HTML/boundedstack.html" rel="nofollow">Bounded stack</a></i>.</li>
</ul>
<table class="navbox" cellspacing="0" style=";">
<tr>
<td style="padding:2px;">
<table cellspacing="0" class="nowraplinks collapsible autocollapse" style="width:100%;background:transparent;color:inherit;;">
<tr>
<th style=";" colspan="2" class="navbox-title">
<div style="float:left; width:6em;text-align:left;">
<div class="noprint plainlinksneverexpand navbar" style="background:none; padding:0; font-weight:normal;;;border:none;; font-size:xx-small;"><a href="/wiki/Template:Data_structures" title="Template:Data structures"><span title="View this template" style=";;border:none;">v</span></a>&#160;<span style="font-size:80%;">•</span>&#160;<a href="/wiki/Template_talk:Data_structures" title="Template talk:Data structures"><span title="Discussion about this template" style=";;border:none;">d</span></a>&#160;<span style="font-size:80%;">•</span>&#160;<a href="http://en.wikipedia.org/w/index.php?title=Template:Data_structures&amp;action=edit" class="external text" title="http://en.wikipedia.org/w/index.php?title=Template:Data_structures&amp;action=edit" rel="nofollow"><span title="Edit this template" style=";;border:none;;">e</span></a></div>
</div>
<span style="font-size:110%;"><a href="/wiki/Data_structure" title="Data structure">Data structures</a></span></th>
</tr>
<tr style="height:2px;">
<td></td>
</tr>
<tr>
<td class="navbox-group" style=";;"><a href="/wiki/Array" title="Array">Arrays</a></td>
<td style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<div style="padding:0em 0.25em"><a href="/wiki/Associative_array" title="Associative array">Associative array</a></div>
</td>
</tr>
<tr style="height:2px">
<td></td>
</tr>
<tr>
<td class="navbox-group" style=";;"><a href="/wiki/List_(computing)" title="List (computing)">Lists</a></td>
<td style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<div style="padding:0em 0.25em"><a href="/wiki/Deque" title="Deque">Deque</a>&#160;• <a href="/wiki/Linked_list" title="Linked list">Linked list</a>&#160;• <a href="/wiki/Queue_(data_structure)" title="Queue (data structure)">Queue</a>&#160;• <strong class="selflink">Stack</strong></div>
</td>
</tr>
<tr style="height:2px">
<td></td>
</tr>
<tr>
<td class="navbox-group" style=";;"><a href="/wiki/Tree_(data_structure)" title="Tree (data structure)">Trees</a></td>
<td style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<div style="padding:0em 0.25em"><a href="/wiki/B-tree" title="B-tree">B-tree</a>&#160;• <a href="/wiki/Binary_search_tree" title="Binary search tree">Binary search tree</a>&#160;• <a href="/wiki/Heap_(data_structure)" title="Heap (data structure)">Heap</a></div>
</td>
</tr>
</table>
</td>
</tr>
</table>


<!-- 
NewPP limit report
Preprocessor node count: 681/1000000
Post-expand include size: 12633/2048000 bytes
Template argument size: 2223/2048000 bytes
Expensive parser function count: 0/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:273993-0!1!0!default!!en!2 and timestamp 20090404174939 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Stack_(data_structure)">http://en.wikipedia.org/wiki/Stack_(data_structure)</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Data_structures" title="Category:Data structures">Data structures</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_example_pseudocode" title="Category:Articles with example pseudocode">Articles with example pseudocode</a></span></div><div id="mw-hidden-catlinks" class="mw-hidden-cats-hidden">Hidden categories:&#32;<span dir='ltr'><a href="/wiki/Category:Wikipedia_articles_incorporating_text_from_the_NIST_Dictionary_of_Algorithms_and_Data_Structures" title="Category:Wikipedia articles incorporating text from the NIST Dictionary of Algorithms and Data Structures">Wikipedia articles incorporating text from the NIST Dictionary of Algorithms and Data Structures</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Stack_(data_structure)" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Stack_(data_structure)" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Stack_(data_structure)&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Stack_(data_structure)&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Stack_(data_structure)" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Stack_(data_structure)" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Stack_(data_structure)" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Stack_(data_structure)&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Stack_(data_structure)&amp;oldid=281735858" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Stack_(data_structure)&amp;id=281735858">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-ar"><a href="http://ar.wikipedia.org/wiki/%D9%85%D9%83%D8%AF%D8%B3">العربية</a></li>
				<li class="interwiki-be-x-old"><a href="http://be-x-old.wikipedia.org/wiki/%D0%A1%D1%82%D1%8D%D0%BA">Беларуская (тарашкевіца)</a></li>
				<li class="interwiki-bg"><a href="http://bg.wikipedia.org/wiki/%D0%A1%D1%82%D0%B5%D0%BA_(%D1%81%D1%82%D1%80%D1%83%D0%BA%D1%82%D1%83%D1%80%D0%B0_%D0%BE%D1%82_%D0%B4%D0%B0%D0%BD%D0%BD%D0%B8)">Български</a></li>
				<li class="interwiki-ca"><a href="http://ca.wikipedia.org/wiki/Pila_(estructura_de_dades)">Català</a></li>
				<li class="interwiki-cs"><a href="http://cs.wikipedia.org/wiki/Z%C3%A1sobn%C3%ADk_(datov%C3%A1_struktura)">Česky</a></li>
				<li class="interwiki-da"><a href="http://da.wikipedia.org/wiki/Stak">Dansk</a></li>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/Stapelspeicher">Deutsch</a></li>
				<li class="interwiki-es"><a href="http://es.wikipedia.org/wiki/Pila_(inform%C3%A1tica)">Español</a></li>
				<li class="interwiki-fa"><a href="http://fa.wikipedia.org/wiki/%D9%BE%D8%B4%D8%AA%D9%87_%D9%88_%D8%B5%D9%81">فارسی</a></li>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Pile_(informatique)">Français</a></li>
				<li class="interwiki-ko"><a href="http://ko.wikipedia.org/wiki/%EC%8A%A4%ED%83%9D">한국어</a></li>
				<li class="interwiki-id"><a href="http://id.wikipedia.org/wiki/Stack_(struktur_data)">Bahasa Indonesia</a></li>
				<li class="interwiki-is"><a href="http://is.wikipedia.org/wiki/Hla%C3%B0i_(t%C3%B6lvunarfr%C3%A6%C3%B0i)">Íslenska</a></li>
				<li class="interwiki-it"><a href="http://it.wikipedia.org/wiki/Stack">Italiano</a></li>
				<li class="interwiki-he"><a href="http://he.wikipedia.org/wiki/%D7%9E%D7%97%D7%A1%D7%A0%D7%99%D7%AA_(%D7%9E%D7%91%D7%A0%D7%94_%D7%A0%D7%AA%D7%95%D7%A0%D7%99%D7%9D)">עברית</a></li>
				<li class="interwiki-lb"><a href="http://lb.wikipedia.org/wiki/Stack_(Informatik)">Lëtzebuergesch</a></li>
				<li class="interwiki-lt"><a href="http://lt.wikipedia.org/wiki/Stekas">Lietuvių</a></li>
				<li class="interwiki-hu"><a href="http://hu.wikipedia.org/wiki/Verem_(sz%C3%A1m%C3%ADt%C3%A1stechnika)">Magyar</a></li>
				<li class="interwiki-nl"><a href="http://nl.wikipedia.org/wiki/Stack_(informatica)">Nederlands</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/%E3%82%B9%E3%82%BF%E3%83%83%E3%82%AF">日本語</a></li>
				<li class="interwiki-no"><a href="http://no.wikipedia.org/wiki/Stakk_(datastruktur)">‪Norsk (bokmål)‬</a></li>
				<li class="interwiki-pl"><a href="http://pl.wikipedia.org/wiki/Stos_(informatyka)">Polski</a></li>
				<li class="interwiki-pt"><a href="http://pt.wikipedia.org/wiki/Pilha_(inform%C3%A1tica)">Português</a></li>
				<li class="interwiki-ru"><a href="http://ru.wikipedia.org/wiki/%D0%A1%D1%82%D0%B5%D0%BA">Русский</a></li>
				<li class="interwiki-sl"><a href="http://sl.wikipedia.org/wiki/Sklad_(ra%C4%8Dunalni%C5%A1tvo)">Slovenščina</a></li>
				<li class="interwiki-sr"><a href="http://sr.wikipedia.org/wiki/%D0%A1%D1%82%D0%B5%D0%BA">Српски / Srpski</a></li>
				<li class="interwiki-fi"><a href="http://fi.wikipedia.org/wiki/Pino">Suomi</a></li>
				<li class="interwiki-sv"><a href="http://sv.wikipedia.org/wiki/Stack_(datastruktur)">Svenska</a></li>
				<li class="interwiki-th"><a href="http://th.wikipedia.org/wiki/%E0%B8%81%E0%B8%AD%E0%B8%87%E0%B8%8B%E0%B9%89%E0%B8%AD%E0%B8%99">ไทย</a></li>
				<li class="interwiki-vi"><a href="http://vi.wikipedia.org/wiki/Ng%C4%83n_x%E1%BA%BFp">Tiếng Việt</a></li>
				<li class="interwiki-tr"><a href="http://tr.wikipedia.org/wiki/Y%C4%B1%C4%9F%C4%B1n_(bilgisayar_bilimi)">Türkçe</a></li>
				<li class="interwiki-uk"><a href="http://uk.wikipedia.org/wiki/%D0%A1%D1%82%D0%B5%D0%BA">Українська</a></li>
				<li class="interwiki-zh"><a href="http://zh.wikipedia.org/wiki/%E5%A0%86%E6%A0%88">中文</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 4 April 2009, at 17:49.</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv166 in 0.060 secs. --></body></html>
