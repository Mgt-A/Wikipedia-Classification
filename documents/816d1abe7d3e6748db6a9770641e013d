<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Closure (computer science),Actor model,Anonymous function,Bound variable,Command pattern,Common Lisp,Computer science,Concurrent programming,Continuation,Currying,Data structure" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Closure_(computer_science)&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Closure_(computer_science)&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Closure (computer science) - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Closure_(computer_science)";
		var wgTitle = "Closure (computer science)";
		var wgAction = "view";
		var wgArticleId = "62319";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 275330811;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
<style type="text/css">/*<![CDATA[*/
.source-scheme {line-height: normal;}
.source-scheme li, .source-scheme pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for scheme
 * CSS class: source-scheme, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-scheme .de1, .source-scheme .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-scheme  {}
.source-scheme .head {}
.source-scheme .foot {}
.source-scheme .imp {font-weight: bold; color: red;}
.source-scheme .ln-xtra {color: #cc0; background-color: #ffc;}
.source-scheme li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-scheme li.li2 {font-weight: bold;}
.source-scheme .kw1 {color: #b1b100;}
.source-scheme .co1 {color: #808080; font-style: italic;}
.source-scheme .coMULTI {color: #808080; font-style: italic;}
.source-scheme .es0 {color: #000099; font-weight: bold;}
.source-scheme .br0 {color: #66cc66;}
.source-scheme .st0 {color: #ff0000;}
.source-scheme .nu0 {color: #cc66cc;}
.source-scheme .me0 {color: #202020;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-javascript {line-height: normal;}
.source-javascript li, .source-javascript pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for javascript
 * CSS class: source-javascript, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-javascript .de1, .source-javascript .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-javascript  {}
.source-javascript .head {}
.source-javascript .foot {}
.source-javascript .imp {font-weight: bold; color: red;}
.source-javascript .ln-xtra {color: #cc0; background-color: #ffc;}
.source-javascript li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-javascript li.li2 {font-weight: bold;}
.source-javascript .kw1 {color: #000066; font-weight: bold;}
.source-javascript .kw2 {color: #003366; font-weight: bold;}
.source-javascript .kw3 {color: #000066;}
.source-javascript .co1 {color: #009900; font-style: italic;}
.source-javascript .coMULTI {color: #009900; font-style: italic;}
.source-javascript .es0 {color: #000099; font-weight: bold;}
.source-javascript .br0 {color: #66cc66;}
.source-javascript .st0 {color: #3366CC;}
.source-javascript .nu0 {color: #CC0000;}
.source-javascript .me1 {color: #006600;}
.source-javascript .sc0 {}
.source-javascript .sc1 {}
.source-javascript .sc2 {}
.source-javascript .sc3 {}
.source-javascript .re0 {color: #0066FF;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-python {line-height: normal;}
.source-python li, .source-python pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for python
 * CSS class: source-python, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-python .de1, .source-python .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-python  {}
.source-python .head {}
.source-python .foot {}
.source-python .imp {font-weight: bold; color: red;}
.source-python .ln-xtra {color: #cc0; background-color: #ffc;}
.source-python li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-python li.li2 {font-weight: bold;}
.source-python .kw1 {color: #ff7700;font-weight:bold;}
.source-python .kw2 {color: #008000;}
.source-python .kw3 {color: #dc143c;}
.source-python .kw4 {color: #0000cd;}
.source-python .co1 {color: #808080; font-style: italic;}
.source-python .coMULTI {color: #808080; font-style: italic;}
.source-python .es0 {color: #000099; font-weight: bold;}
.source-python .br0 {color: #66cc66;}
.source-python .st0 {color: #483d8b;}
.source-python .nu0 {color: #ff4500;}
.source-python .me1 {color: black;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-ocaml {line-height: normal;}
.source-ocaml li, .source-ocaml pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for ocaml
 * CSS class: source-ocaml, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-ocaml .de1, .source-ocaml .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-ocaml  {}
.source-ocaml .head {}
.source-ocaml .foot {}
.source-ocaml .imp {font-weight: bold; color: red;}
.source-ocaml .ln-xtra {color: #cc0; background-color: #ffc;}
.source-ocaml li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-ocaml li.li2 {font-weight: bold;}
.source-ocaml .kw1 {color: #06c; font-weight: bold;}
.source-ocaml .coMULTI {color: #5d478b; font-style: italic;}
.source-ocaml .br0 {color: #a52a2a;}
.source-ocaml .st0 {color: #3cb371;}
.source-ocaml .nu0 {color: #c6c;}
.source-ocaml .me1 {color: #060;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-smalltalk {line-height: normal;}
.source-smalltalk li, .source-smalltalk pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for smalltalk
 * CSS class: source-smalltalk, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-smalltalk .de1, .source-smalltalk .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-smalltalk  {}
.source-smalltalk .head {}
.source-smalltalk .foot {}
.source-smalltalk .imp {font-weight: bold; color: red;}
.source-smalltalk .ln-xtra {color: #cc0; background-color: #ffc;}
.source-smalltalk li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-smalltalk li.li2 {font-weight: bold;}
.source-smalltalk .kw1 {color: #7f007f;}
.source-smalltalk .coMULTI {color: #007f00; font-style: italic;}
.source-smalltalk .es0 {}
.source-smalltalk .br0 {color: #000066; font-weight:bold;}
.source-smalltalk .st0 {color: #7f0000;}
.source-smalltalk .nu0 {color: #7f0000;}
.source-smalltalk .me0 {}
.source-smalltalk .sc0 {}
.source-smalltalk .re0 {color: #0000ff;}
.source-smalltalk .re1 {color: #7f0000;}
.source-smalltalk .re2 {color: #7f0000;}
.source-smalltalk .re3 {color: #00007f;}
.source-smalltalk .re4 {color: #7f007f;}
.source-smalltalk .re5 {color: #00007f;}
.source-smalltalk .re6 {color: #00007f;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-ruby {line-height: normal;}
.source-ruby li, .source-ruby pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for ruby
 * CSS class: source-ruby, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-ruby .de1, .source-ruby .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-ruby  {}
.source-ruby .head {}
.source-ruby .foot {}
.source-ruby .imp {font-weight: bold; color: red;}
.source-ruby .ln-xtra {color: #cc0; background-color: #ffc;}
.source-ruby li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-ruby li.li2 {font-weight: bold;}
.source-ruby .kw1 {color:#9966CC; font-weight:bold;}
.source-ruby .kw2 {color:#0000FF; font-weight:bold;}
.source-ruby .kw3 {color:#CC0066; font-weight:bold;}
.source-ruby .kw4 {color:#CC00FF; font-weight:bold;}
.source-ruby .co1 {color:#008000; font-style:italic;}
.source-ruby .coMULTI {color:#000080; font-style:italic;}
.source-ruby .es0 {color:#000099;}
.source-ruby .br0 {color:#006600; font-weight:bold;}
.source-ruby .st0 {color:#996600;}
.source-ruby .nu0 {color:#006666;}
.source-ruby .me1 {color:#9900CC;}
.source-ruby .sc0 {}
.source-ruby .sc1 {}
.source-ruby .sc2 {}
.source-ruby .re0 {color:#ff6633; font-weight:bold;}
.source-ruby .re1 {color:#0066ff; font-weight:bold;}
.source-ruby .re2 {color:#6666ff; font-weight:bold;}
.source-ruby .re3 {color:#ff3333; font-weight:bold;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style>		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Closure_computer_science skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Closure (computer science)</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<p>In <a href="/wiki/Computer_science" title="Computer science">computer science</a>, a <b>closure</b> is a <a href="/wiki/Function_(programming)" title="Function (programming)" class="mw-redirect">function</a> that is evaluated in an environment containing one or more <a href="/wiki/Bound_variable" title="Bound variable" class="mw-redirect">bound variables</a>. When called, the function can access these variables. The explicit use of closures is associated with <a href="/wiki/Functional_programming" title="Functional programming">functional programming</a> and with languages such as <a href="/wiki/ML_programming_language" title="ML programming language" class="mw-redirect">ML</a>, <a href="/wiki/Lisp_(programming_language)" title="Lisp (programming language)">Lisp</a> and <a href="/wiki/Perl_programming_language" title="Perl programming language" class="mw-redirect">Perl</a>. Constructs such as <a href="/wiki/Object_oriented_programming" title="Object oriented programming" class="mw-redirect">objects</a> in other languages can also be modeled with closures.</p>
<p>In some languages, a closure may occur when a function is defined within another function, and the inner function refers to local variables of the outer function. At <a href="/wiki/Runtime" title="Runtime">runtime</a>, when the outer function executes, a closure is formed, consisting of the inner function’s code and references to any variables of the outer function required by the closure.</p>
<p>A closure can be used to associate a function with a set of "private" variables, which persist over several invocations of the function. The <a href="/wiki/Scope_(programming)" title="Scope (programming)">scope</a> of the variable encompasses only the closed-over function, so it cannot be accessed from other program code. However, the variable is of indefinite <a href="/wiki/Variable#Scope_and_extent" title="Variable">extent</a>, so a value established in one invocation remains available in the next. As a consequence, closures can be used to <a href="/wiki/Information_hiding" title="Information hiding">hide state</a>, and thus to implement <a href="/wiki/Object-oriented_programming" title="Object-oriented programming">object-oriented programming</a>.</p>
<p>The term <b>closure</b> is often mistakenly used to mean <a href="/wiki/Anonymous_function" title="Anonymous function">anonymous function</a>. This is probably because most languages implementing anonymous functions allow them to form closures and programmers are usually introduced to both concepts at the same time. These are, however, distinct concepts.</p>
<p>The concept of closures was developed in the 1960s and was first fully implemented as a language feature in the programming language <a href="/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme</a>. Since then, many languages have been designed to support closures.</p>
<p><a href="/wiki/Function_object" title="Function object">Function objects</a> are sometimes also called closures.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Closures_and_first-class_functions"><span class="tocnumber">1</span> <span class="toctext">Closures and first-class functions</span></a></li>
<li class="toclevel-1"><a href="#Uses_of_closures"><span class="tocnumber">2</span> <span class="toctext">Uses of closures</span></a></li>
<li class="toclevel-1"><a href="#Differences_in_semantics"><span class="tocnumber">3</span> <span class="toctext">Differences in semantics</span></a></li>
<li class="toclevel-1"><a href="#Implementation_and_theory"><span class="tocnumber">4</span> <span class="toctext">Implementation and theory</span></a></li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">5</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">6</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">7</span> <span class="toctext">External links</span></a>
<ul>
<li class="toclevel-2"><a href="#Closure_in_Delphi"><span class="tocnumber">7.1</span> <span class="toctext">Closure in Delphi</span></a></li>
</ul>
</li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Closures_and_first-class_functions" id="Closures_and_first-class_functions"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Closure_(computer_science)&amp;action=edit&amp;section=1" title="Edit section: Closures and first-class functions">edit</a>]</span> <span class="mw-headline">Closures and first-class functions</span></h2>
<p>Closures typically appear in languages in which functions are <a href="/wiki/First-class_function" title="First-class function">first-class values</a>—in other words, such languages allow functions to be passed as arguments, returned from function calls, bound to variable names, etc., just like simpler types such as strings and integers. For example, consider the following Scheme function:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-scheme">
<span class="co1">; Return a list of all books with at least THRESHOLD copies sold.</span>
<span class="br0">(</span><span class="kw1">define</span> <span class="br0">(</span>best-selling-books threshold<span class="br0">)</span>
  <span class="br0">(</span>filter 
    <span class="br0">(</span><span class="kw1">lambda</span> <span class="br0">(</span>book<span class="br0">)</span> <span class="br0">(</span>&gt;= <span class="br0">(</span>book-sales book<span class="br0">)</span> threshold<span class="br0">)</span><span class="br0">)</span>
    book-<span class="kw1">list</span><span class="br0">)</span><span class="br0">)</span>
</pre></div>
<p>In this example, the <a href="/wiki/Lambda_expression" title="Lambda expression" class="mw-redirect">lambda expression</a> <code>(lambda (book) (&gt;= (book-sales book) threshold))</code> appears within the function <code>best-selling-books</code>. When the lambda expression is evaluated, Scheme creates a closure consisting of the code for the lambda and a reference to the <code>threshold</code> variable, which is a <a href="/wiki/Free_variable" title="Free variable" class="mw-redirect">free variable</a> inside the lambda.</p>
<p>The closure is then passed to the <code>filter</code> function, which calls it repeatedly to determine which books are to be added to the result list and which are to be discarded. Because the closure itself has a reference to <code>threshold</code>, it can use that variable each time <code>filter</code> calls it. The function <code>filter</code> itself might be defined in a completely separate file.</p>
<p>Here is the same example rewritten in <a href="/wiki/ECMAScript" title="ECMAScript">ECMAScript</a> (JavaScript), another popular language with support for closures:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
<span class="co1">// Return a list of all books with at least 'threshold' copies sold.</span>
<span class="kw2">function</span> bestSellingBooks<span class="br0">(</span>threshold<span class="br0">)</span> <span class="br0">{</span>
  <span class="kw1">return</span> bookList.<span class="me1">filter</span><span class="br0">(</span>
      <span class="kw2">function</span><span class="br0">(</span>book<span class="br0">)</span> <span class="br0">{</span> <span class="kw1">return</span> book.<span class="me1">sales</span> &gt;= threshold; <span class="br0">}</span>
    <span class="br0">)</span>;
<span class="br0">}</span>
</pre></div>
<p>The <code>function</code> keyword is used here instead of <code>lambda</code>, and an <code>Array.filter</code> method<sup id="cite_ref-0" class="reference"><a href="#cite_note-0" title=""><span>[</span>1<span>]</span></a></sup> instead of a global <code>filter</code> function, but otherwise the structure and the effect of the code are the same.</p>
<p>A function may create a closure and return it. The following example is a function that returns a function.</p>
<p>In Scheme:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-scheme">
<span class="co1">; Return a function that approximates the derivative of f</span>
<span class="co1">; using an interval of dx, which should be appropriately small.</span>
<span class="br0">(</span><span class="kw1">define</span> <span class="br0">(</span>derivative <span class="kw1">f</span> dx<span class="br0">)</span>
  <span class="br0">(</span><span class="kw1">lambda</span> <span class="br0">(</span>x<span class="br0">)</span> <span class="br0">(</span>/ <span class="br0">(</span>- <span class="br0">(</span><span class="kw1">f</span> <span class="br0">(</span>+ x dx<span class="br0">)</span><span class="br0">)</span> <span class="br0">(</span><span class="kw1">f</span> x<span class="br0">)</span><span class="br0">)</span> dx<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>
</pre></div>
<p>In ECMAScript:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
<span class="co1">// Return a function that approximates the derivative of f</span>
<span class="co1">// using an interval of dx, which should be appropriately small.</span>
<span class="kw2">function</span> derivative<span class="br0">(</span>f, dx<span class="br0">)</span> <span class="br0">{</span>
  <span class="kw1">return</span> <span class="kw2">function</span><span class="br0">(</span>x<span class="br0">)</span> <span class="br0">{</span>
    <span class="kw1">return</span> <span class="br0">(</span>f<span class="br0">(</span>x + dx<span class="br0">)</span> - f<span class="br0">(</span>x<span class="br0">)</span><span class="br0">)</span> / dx;
  <span class="br0">}</span>;
<span class="br0">}</span>
</pre></div>
<p>Because the closure in this case outlives the <a href="/wiki/Scope_(programming)" title="Scope (programming)">scope</a> of the function that creates it, the variables <code>f</code> and <code>dx</code> live on after the function <code>derivative</code> returns. In languages without closures, the lifetime of a local variable coincides with the execution of the scope where that variable is declared. In languages with closures, variables must continue to exist as long as any existing closures have references to them. This is most commonly implemented using some form of <a href="/wiki/Garbage_collection_(computer_science)" title="Garbage collection (computer science)">garbage collection</a>.</p>
<p>While this is not always clarified, a closure need not be formed using an <a href="/wiki/Anonymous_function" title="Anonymous function">anonymous function</a>. The <a href="/wiki/Python_(programming_language)" title="Python (programming language)">Python</a> programming language, for example, has very limited support for anonymous functions but fully supports closures. For example, one way the above ECMAScript example could be implemented in Python is:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-python">
<span class="co1"># Return a function that approximates the derivative of f</span>
<span class="co1"># using an interval of dx, which should be appropriately small.</span>
<span class="kw1">def</span> derivative<span class="br0">(</span>f, dx<span class="br0">)</span>:
    <span class="kw1">def</span> gradient<span class="br0">(</span>x<span class="br0">)</span>:
        <span class="kw1">return</span> <span class="br0">(</span>f<span class="br0">(</span>x + dx<span class="br0">)</span> - f<span class="br0">(</span>x<span class="br0">)</span><span class="br0">)</span> / dx
    <span class="kw1">return</span> gradient
</pre></div>
<p>In this example, the function named <i>gradient</i> forms a closure together with the variables <i>f</i> and <i>dx</i>. This closure is then returned by the outer function named <i>derivative</i>.</p>
<p>Although lambda expressions in Python are limited to being a single expression, they are still powerful enough to duplicate the above functionality:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-python">
&gt;&gt;&gt; <span class="kw1">from</span> <span class="kw3">math</span> <span class="kw1">import</span> sin, cos
&gt;&gt;&gt; derivative = <span class="kw1">lambda</span> f, dx: <span class="kw1">lambda</span> x: <span class="br0">(</span>f<span class="br0">(</span>x + dx<span class="br0">)</span> - f<span class="br0">(</span>x<span class="br0">)</span><span class="br0">)</span> / dx
&gt;&gt;&gt; dx = derivative<span class="br0">(</span>sin, 1e<span class="nu0">-8</span><span class="br0">)</span>
&gt;&gt;&gt; dx<span class="br0">(</span>.<span class="nu0">5</span><span class="br0">)</span>
<span class="nu0">0.8775825621754052</span>
&gt;&gt;&gt; cos<span class="br0">(</span>.<span class="nu0">5</span><span class="br0">)</span>
<span class="nu0">0.87758256189037276</span>
&gt;&gt;&gt;
</pre></div>
<p><a name="Uses_of_closures" id="Uses_of_closures"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Closure_(computer_science)&amp;action=edit&amp;section=2" title="Edit section: Uses of closures">edit</a>]</span> <span class="mw-headline">Uses of closures</span></h2>
<p>Closures have many uses:</p>
<ul>
<li>Designers of <a href="/wiki/Library_(computer_science)" title="Library (computer science)" class="mw-redirect">software libraries</a> can allow users to customize behavior by passing closures as arguments to important functions. For example, a function that <a href="/wiki/Sorting_algorithm" title="Sorting algorithm">sorts</a> values can accept a closure argument that compares the values to be sorted according to a user-defined criterion.</li>
<li>Because closures delay evaluation—i.e., they do not "do" anything until they are called—they can be used to define control structures. For example, all <a href="/wiki/Smalltalk" title="Smalltalk">Smalltalk</a>'s standard control structures, including branches (if/then/else) and loops (while and for), are defined using objects whose methods accept closures. Users can easily define their own control structures as well.</li>
<li>Multiple functions can be produced which close over the same environment, enabling them to communicate privately by altering that environment (in languages that allow assignment). In Scheme:</li>
</ul>
<div dir="ltr" style="text-align: left;">
<pre class="source-scheme">
<span class="br0">(</span><span class="kw1">define</span> foo #f<span class="br0">)</span>
<span class="br0">(</span><span class="kw1">define</span> bar #f<span class="br0">)</span>
 
<span class="br0">(</span><span class="kw1">let</span> <span class="br0">(</span><span class="br0">(</span>secret-message <span class="st0">"none"</span><span class="br0">)</span><span class="br0">)</span>
  <span class="br0">(</span><span class="kw1">set!</span> foo <span class="br0">(</span><span class="kw1">lambda</span> <span class="br0">(</span>msg<span class="br0">)</span> <span class="br0">(</span><span class="kw1">set!</span> secret-message msg<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>
  <span class="br0">(</span><span class="kw1">set!</span> bar <span class="br0">(</span><span class="kw1">lambda</span> <span class="br0">(</span><span class="br0">)</span> secret-message<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>
 
<span class="br0">(</span><span class="kw1">display</span> <span class="br0">(</span>bar<span class="br0">)</span><span class="br0">)</span> <span class="co1">; prints "none"</span>
<span class="br0">(</span><span class="kw1">newline</span><span class="br0">)</span>
<span class="br0">(</span>foo <span class="st0">"meet me by the docks at midnight"</span><span class="br0">)</span>
<span class="br0">(</span><span class="kw1">display</span> <span class="br0">(</span>bar<span class="br0">)</span><span class="br0">)</span> <span class="co1">; prints "meet me by the docks at midnight"</span>
</pre></div>
<ul>
<li>Closures can be used to implement <a href="/wiki/Object-oriented_programming" title="Object-oriented programming">object</a> systems.<sup id="cite_ref-1" class="reference"><a href="#cite_note-1" title=""><span>[</span>2<span>]</span></a></sup></li>
</ul>
<p>Note: Some speakers call any data structure that binds a <a href="/wiki/Scope_(programming)#Static_scoping_.28also_known_as_lexical_scoping.29" title="Scope (programming)">lexical</a> environment a closure, but the term usually refers specifically to functions.</p>
<p><a name="Differences_in_semantics" id="Differences_in_semantics"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Closure_(computer_science)&amp;action=edit&amp;section=3" title="Edit section: Differences in semantics">edit</a>]</span> <span class="mw-headline">Differences in semantics</span></h2>
<p>As different languages do not always have a common definition of the lexical environment, their definitions of closure may vary as well. The commonly held minimalist definition of the lexical environment defines it as a set of all <a href="/wiki/Name_binding" title="Name binding">bindings of variables</a> in the scope, and that is also what closures in any language have to capture. It should be noted though that the meaning of a <a href="/wiki/Variable" title="Variable">variable</a> binding also differs. In imperative languages, variables bind to relative locations in memory that can store values. Although the relative location of a binding does not change at runtime, the value in the bound location can. In such languages, since closure captures the binding, any operation on the variable, whether done from the closure or not, is performed on the same relative memory location. Here is an example illustrating the concept in <a href="/wiki/ECMAScript" title="ECMAScript">ECMAScript</a>, which is one such language:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
<span class="kw2">var</span> f, g;
<span class="kw2">function</span> foo<span class="br0">(</span><span class="br0">)</span>
<span class="br0">{</span>
  <span class="kw2">var</span> x = <span class="nu0">0</span>;
  f = <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> <span class="kw1">return</span> ++x; <span class="br0">}</span>;
  g = <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> <span class="kw1">return</span> --x; <span class="br0">}</span>;
  x = <span class="nu0">1</span>;
  <span class="kw3">print</span><span class="br0">(</span>f<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>; <span class="co1">// "2"</span>
<span class="br0">}</span>
foo<span class="br0">(</span><span class="br0">)</span>;
<span class="kw3">print</span><span class="br0">(</span>g<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>; <span class="co1">// "1"</span>
<span class="kw3">print</span><span class="br0">(</span>f<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>; <span class="co1">// "2"</span>
</pre></div>
<p>Note how function <code>foo</code> and the closures referred to by variables <code>f</code> and <code>g</code> all use the same relative memory location signified by local variable <code>x</code>.</p>
<p>On the other hand, many functional languages, such as <a href="/wiki/ML_(programming_language)" title="ML (programming language)">ML</a>, bind variables directly to values. In this case, since there is no way to change the value of the variable once it is bound, there is no need to share the state between closures - they just use the same values.</p>
<p>Yet another subset, lazy functional languages such as <a href="/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell</a>, bind variables to a result of a computation in the future. Consider this example in Haskell:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-ocaml">
 
foo x y = <span class="kw1">let</span> r = x / y
          <span class="kw1">in</span> <span class="br0">(</span>\z -&gt; z + r<span class="br0">)</span>
f = foo <span class="nu0">1</span> <span class="nu0">0</span>
main = <span class="kw1">do</span> putStr <span class="br0">(</span>show <span class="br0">(</span>f <span class="nu0">123</span><span class="br0">)</span><span class="br0">)</span>
</pre></div>
<p>The binding of <code>r</code> captured by the closure defined within function <code>foo</code> is to the computation <code>(x / y)</code> - which in this case results in division by zero. However, since it is the computation that is captured, and not the value, the error only manifests itself when the closure is invoked, and actually attempts to use the captured binding.</p>
<p>Yet more differences manifest themselves in the behavior of other lexically scoped constructs, such as <code>return</code>, <code>break</code> and <code>continue</code> statements. Such constructs can in general be considered in terms of invoking an <a href="/wiki/Escape_continuation" title="Escape continuation" class="mw-redirect">escape continuation</a> established by an enclosing control statement (in case of <code>break</code> and <code>continue</code>, such interpretation requires looping constructs to be considered in terms of recursive function calls). In some languages, such as ECMAScript, <code>return</code> refers to the continuation established by the closure lexically innermost with respect to the statement - thus, a <code>return</code> within a closure transfers control to the code that called it. In <a href="/wiki/Smalltalk" title="Smalltalk">Smalltalk</a>, however, the superficially similar <code>^</code> operator invokes the escape continuation established for the method invocation, ignoring the escape continuations of any intervening nested closures. The escape continuation of a particular closure can only be invoked in Smalltalk implicitly by reaching the end of the closure's code. The following examples in ECMAScript and Smalltalk highlight the difference:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-smalltalk">
<span class="coMULTI">"Smalltalk"</span>
foo
  |<span class="re3"> xs </span>|
  <span class="re6">xs</span> := <span class="re2">#<span class="br0">(</span><span class="re5"><span class="nu0">1</span></span> <span class="nu0">2</span> <span class="nu0">3</span> <span class="nu0">4</span><span class="br0">)</span></span>.
  <span class="re5">xs</span> do: <span class="br0">[</span>:<span class="re5">x</span> | ^x<span class="br0">]</span>.
  ^<span class="nu0">0</span>
bar
  <span class="re0">Transcript</span> show: <span class="br0">(</span><span class="re4">self</span> foo printString<span class="br0">)</span> <span class="coMULTI">"prints 1"</span>
</pre></div>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
<span class="co1">// ECMAScript</span>
<span class="kw2">function</span> foo<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
  <span class="kw2">var</span> xs = <span class="kw2">new</span> Array<span class="br0">(</span><span class="nu0">1</span>, <span class="nu0">2</span>, <span class="nu0">3</span>, <span class="nu0">4</span><span class="br0">)</span>;
  xs.<span class="me1">forEach</span><span class="br0">(</span><span class="kw2">function</span><span class="br0">(</span>x<span class="br0">)</span> <span class="br0">{</span> <span class="kw1">return</span> x; <span class="br0">}</span><span class="br0">)</span>;
  <span class="kw1">return</span> <span class="nu0">0</span>;
<span class="br0">}</span>
<span class="kw3">print</span><span class="br0">(</span>foo<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>; <span class="co1">// prints 0</span>
</pre></div>
<p>The above code snippets will behave differently because the Smalltalk <code>^</code> operator and the JavaScript <code>return</code> operator are not analogous. In the ECMAScript example, <code>return x</code> will leave the inner closure to begin a new iteration of the <code>forEach</code> loop, whereas in the Smalltalk example, <code>^x</code> will abort the loop and return from the method <code>foo</code>.</p>
<p><a href="/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a> provides a construct that can express either of the above actions: <a href="/wiki/Smalltalk" title="Smalltalk">Smalltalk</a> <code>^x</code> behaves as <code>(return-from foo x)</code>, while <a href="/wiki/JavaScript" title="JavaScript">JavaScript</a> <code>return x</code> behaves as <code>(return-from nil x)</code>. Hence, Smalltalk makes it possible for a captured escape continuation to outlive the extent in which it can be successfully invoked. Consider:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-smalltalk">
foo
    ^<span class="br0">[</span> :<span class="re5">x</span> | ^x <span class="br0">]</span>
bar
    |<span class="re3"> f </span>|
    <span class="re6">f</span> := <span class="re4">self</span> foo.
    <span class="re5">f</span> value: <span class="re5"><span class="nu0">123</span></span> <span class="coMULTI">"error!"</span>
</pre></div>
<p>When the closure returned by the method <code>foo</code> is invoked, it attempts to return a value from the invocation of <code>foo</code> that created the closure. Since that call has already returned and the Smalltalk method invocation model does not follow the <a href="/wiki/Spaghetti_stack" title="Spaghetti stack">spaghetti stack</a> discipline to allow multiple returns, this operation results in an error.</p>
<p>Some languages, such as <a href="/wiki/Ruby_(programming_language)" title="Ruby (programming language)">Ruby</a>, allow the programmer to choose the way <code>return</code> is captured. An example in Ruby:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-ruby">
<span class="co1"># ruby</span>
<span class="kw1">def</span> foo
  f = <span class="kw3">Proc</span>.<span class="me1">new</span> <span class="br0">{</span> <span class="kw2">return</span> <span class="st0">"return from foo from inside proc"</span> <span class="br0">}</span>
  f.<span class="me1">call</span> <span class="co1"># control leaves foo here</span>
  <span class="kw2">return</span> <span class="st0">"return from foo"</span>
<span class="kw1">end</span>
 
<span class="kw1">def</span> bar
  f = <span class="kw3">lambda</span> <span class="br0">{</span> <span class="kw2">return</span> <span class="st0">"return from lambda"</span> <span class="br0">}</span>
  f.<span class="me1">call</span> <span class="co1"># control does not leave bar here</span>
  <span class="kw2">return</span> <span class="st0">"return from bar"</span>
<span class="kw1">end</span>
 
<span class="kw3">puts</span> foo <span class="co1"># prints "return from foo from inside proc"</span>
<span class="kw3">puts</span> bar <span class="co1"># prints "return from bar"</span>
</pre></div>
<p>Both <code>Proc.new</code> and <code>lambda</code> in this example are ways to create a closure, but semantics of the closures thus created are different with respect to the <code>return</code> statement.</p>
<p>In <a href="/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme</a>, definition and scope of the <code>return</code> control statement is explicit (and only arbitrarily named 'return' for the sake of the example). The following is a direct translation of the Ruby sample.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-scheme">
<span class="br0">(</span><span class="kw1">define</span> <span class="kw1">call/cc</span> <span class="kw1">call-with-current-continuation</span><span class="br0">)</span>
 
<span class="br0">(</span><span class="kw1">define</span> <span class="br0">(</span>foo<span class="br0">)</span>
  <span class="br0">(</span><span class="kw1">call/cc</span> 
   <span class="br0">(</span><span class="kw1">lambda</span> <span class="br0">(</span><span class="kw1">return</span><span class="br0">)</span>
     <span class="br0">(</span><span class="kw1">define</span> <span class="br0">(</span><span class="kw1">f</span><span class="br0">)</span> <span class="br0">(</span><span class="kw1">return</span> <span class="st0">"return from foo from inside proc"</span><span class="br0">)</span><span class="br0">)</span>
     <span class="br0">(</span>f<span class="br0">)</span> <span class="co1">; control leaves foo here</span>
     <span class="br0">(</span><span class="kw1">return</span> <span class="st0">"return from foo"</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>
 
<span class="br0">(</span><span class="kw1">define</span> <span class="br0">(</span>bar<span class="br0">)</span>
  <span class="br0">(</span><span class="kw1">call/cc</span>
   <span class="br0">(</span><span class="kw1">lambda</span> <span class="br0">(</span><span class="kw1">return</span><span class="br0">)</span>
     <span class="br0">(</span><span class="kw1">define</span> <span class="br0">(</span><span class="kw1">f</span><span class="br0">)</span> <span class="br0">(</span><span class="kw1">call/cc</span> <span class="br0">(</span><span class="kw1">lambda</span> <span class="br0">(</span><span class="kw1">return</span><span class="br0">)</span> <span class="br0">(</span><span class="kw1">return</span> <span class="st0">"return from lambda"</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>
     <span class="br0">(</span>f<span class="br0">)</span> <span class="co1">; control does not leave bar here</span>
     <span class="br0">(</span><span class="kw1">return</span> <span class="st0">"return from bar"</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>
 
<span class="br0">(</span><span class="kw1">display</span> <span class="br0">(</span>foo<span class="br0">)</span><span class="br0">)</span> <span class="co1">; prints "return from foo from inside proc"</span>
<span class="br0">(</span><span class="kw1">newline</span><span class="br0">)</span>
<span class="br0">(</span><span class="kw1">display</span> <span class="br0">(</span>bar<span class="br0">)</span><span class="br0">)</span> <span class="co1">; prints "return from bar"</span>
</pre></div>
<p><a name="Implementation_and_theory" id="Implementation_and_theory"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Closure_(computer_science)&amp;action=edit&amp;section=4" title="Edit section: Implementation and theory">edit</a>]</span> <span class="mw-headline">Implementation and theory</span></h2>
<p>Closures are typically implemented with a special <a href="/wiki/Data_structure" title="Data structure">data structure</a> that contains a pointer to the function code, plus a representation of the function's lexical environment (e.g., the set of available variables and their values) at the time when the closure was created.</p>
<p>A language implementation cannot easily support full closures if its run-time memory model allocates all local variables on a linear stack. In such languages, a function's local variables are deallocated when the function returns. However, a closure requires that the free variables it references survive the enclosing function's execution. Therefore those variables must be allocated so that they persist until no longer needed. This explains why typically languages that natively support closures also use <a href="/wiki/Garbage_collection_(computer_science)" title="Garbage collection (computer science)">garbage collection</a>. The alternative is for the language to accept that certain use cases will lead to <a href="/wiki/Undefined_behaviour" title="Undefined behaviour" class="mw-redirect">undefined behaviour</a>, as in the proposal for lambda expressions in C++.<sup id="cite_ref-2" class="reference"><a href="#cite_note-2" title=""><span>[</span>3<span>]</span></a></sup></p>
<p>In ML, local variables are allocated on a linear stack. When a closure is created, it copies the values of those variables that are needed by the closure into the closure's data structure.</p>
<p>A typical modern Scheme implementation allocates local variables that might be used by closures dynamically and stores all other local variables on the stack.</p>
<p>Closures are closely related to Actors in the <a href="/wiki/Actor_model" title="Actor model">Actor model</a> of concurrent computation where the values in the function's lexical environment are called <i>acquaintances</i>. An important issue for closures in <a href="/wiki/Concurrent_programming" title="Concurrent programming" class="mw-redirect">concurrent programming</a> languages is whether the variables in a closure can be updated and if so how these updates can be synchronized. Actors provide one solution.<sup id="cite_ref-3" class="reference"><a href="#cite_note-3" title=""><span>[</span>4<span>]</span></a></sup></p>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Closure_(computer_science)&amp;action=edit&amp;section=5" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<ul>
<li><a href="/wiki/Lambda_calculus" title="Lambda calculus">Lambda calculus</a></li>
<li><a href="/wiki/Funarg_problem" title="Funarg problem">Funarg problem</a></li>
<li><a href="/wiki/Continuation" title="Continuation">Continuation</a></li>
<li><a href="/wiki/Spaghetti_stack" title="Spaghetti stack">Spaghetti stack</a></li>
<li><a href="/wiki/Value-level_programming" title="Value-level programming">Value-level programming</a></li>
<li><a href="/wiki/Command_pattern" title="Command pattern">Command pattern</a></li>
<li><a href="/wiki/Eiffel_(programming_language)" title="Eiffel (programming language)">Eiffel programming language</a></li>
<li><a href="/wiki/Anonymous_function" title="Anonymous function">Anonymous function</a></li>
<li><a href="/wiki/Dependency_injection" title="Dependency injection">Dependency injection</a></li>
<li><a href="/wiki/Currying" title="Currying">Currying (a function)</a></li>
</ul>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Closure_(computer_science)&amp;action=edit&amp;section=6" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<div class="references-small references-column-count references-column-count-2" style="-moz-column-count:2; column-count:2;">
<ol class="references">
<li id="cite_note-0"><b><a href="#cite_ref-0" title="">^</a></b> <cite style="font-style:normal" class="web"><a href="http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Objects:Array:filter" class="external text" title="http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Objects:Array:filter" rel="nofollow">"filter"</a>. <i>Mozilla Developer Center</i>. 29 November 2007<span class="printonly">. <a href="http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Objects:Array:filter" class="external free" title="http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Objects:Array:filter" rel="nofollow">http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Objects:Array:filter</a></span><span class="reference-accessdate">. Retrieved on 2008-12-23</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=filter&amp;rft.atitle=Mozilla+Developer+Center&amp;rft.date=29+November+2007&amp;rft_id=http%3A%2F%2Fdeveloper.mozilla.org%2Fen%2Fdocs%2FCore_JavaScript_1.5_Reference%3AObjects%3AArray%3Afilter&amp;rfr_id=info:sid/en.wikipedia.org:Closure_(computer_science)"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-1"><b><a href="#cite_ref-1" title="">^</a></b> <cite style="font-style:normal" class="web"><a href="http://okmij.org/ftp/Scheme/oop-in-fp.txt" class="external text" title="http://okmij.org/ftp/Scheme/oop-in-fp.txt" rel="nofollow">"Re: FP, OO and relations. Does anyone trump the others?"</a>. 29 December 1999<span class="printonly">. <a href="http://okmij.org/ftp/Scheme/oop-in-fp.txt" class="external free" title="http://okmij.org/ftp/Scheme/oop-in-fp.txt" rel="nofollow">http://okmij.org/ftp/Scheme/oop-in-fp.txt</a></span><span class="reference-accessdate">. Retrieved on 2008-12-23</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Re%3A+FP%2C+OO+and+relations.+Does+anyone+trump+the+others%3F&amp;rft.atitle=&amp;rft.date=29+December+1999&amp;rft_id=http%3A%2F%2Fokmij.org%2Fftp%2FScheme%2Foop-in-fp.txt&amp;rfr_id=info:sid/en.wikipedia.org:Closure_(computer_science)"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-2"><b><a href="#cite_ref-2" title="">^</a></b> <i><a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2550.pdf" class="external text" title="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2550.pdf" rel="nofollow">Lambda Expressions and Closures</a></i> C++ Standards Committee. 29 February 2008.</li>
<li id="cite_note-3"><b><a href="#cite_ref-3" title="">^</a></b> <i><a href="https://dspace.mit.edu/handle/1721.1/6935" class="external text" title="https://dspace.mit.edu/handle/1721.1/6935" rel="nofollow">Foundations of Actor Semantics</a></i> Will Clinger. MIT Mathematics Doctoral Dissertation. June 1981.</li>
</ol>
</div>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Closure_(computer_science)&amp;action=edit&amp;section=7" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<ul>
<li><a href="http://library.readscheme.org/page1.html" class="external text" title="http://library.readscheme.org/page1.html" rel="nofollow">The Original "Lambda Papers"</a>: A classic series of papers by <a href="/wiki/Guy_Steele" title="Guy Steele" class="mw-redirect">Guy Steele</a> and <a href="/wiki/Gerald_Sussman" title="Gerald Sussman" class="mw-redirect">Gerald Sussman</a> discussing, among other things, the versatility of closures in the context of Scheme (where they appear as <i><a href="/wiki/Lambda_calculus" title="Lambda calculus">lambda</a> expressions</i>).</li>
<li><a href="http://martinfowler.com/bliki/Closure.html" class="external text" title="http://martinfowler.com/bliki/Closure.html" rel="nofollow">Closures</a>: An article about closures in <a href="/wiki/Type_system#Dynamic_typing" title="Type system">dynamically-typed</a> imperative languages, by <a href="/wiki/Martin_Fowler" title="Martin Fowler">Martin Fowler</a>.</li>
<li><a href="http://martinfowler.com/bliki/CollectionClosureMethod.html" class="external text" title="http://martinfowler.com/bliki/CollectionClosureMethod.html" rel="nofollow">Collection closure methods</a>: example of a technical domain where using closures is convenient, by <a href="/wiki/Martin_Fowler" title="Martin Fowler">Martin Fowler</a>.</li>
<li><a href="http://www.developerfusion.com/article/8251/the-beauty-of-closures/" class="external text" title="http://www.developerfusion.com/article/8251/the-beauty-of-closures/" rel="nofollow">The beauty of closures</a>: an article about using closures in Java and .NET</li>
<li><a href="http://blogs.msdn.com/kartikb/archive/2009/02/08/closures.aspx" class="external text" title="http://blogs.msdn.com/kartikb/archive/2009/02/08/closures.aspx" rel="nofollow">What are closures</a>: an post on closures in Javascript</li>
</ul>
<p><a name="Closure_in_Delphi" id="Closure_in_Delphi"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Closure_(computer_science)&amp;action=edit&amp;section=8" title="Edit section: Closure in Delphi">edit</a>]</span> <span class="mw-headline">Closure in Delphi</span></h3>
<ul>
<li>Nick Hodges, "<a href="http://dn.codegear.com/article/38757" class="external text" title="http://dn.codegear.com/article/38757" rel="nofollow">Delphi 2009 Reviewers Guide</a>," October 2008, <i>CodeGear Developer Network</i>, CodeGear.</li>
<li>Craig Stuntz, "<a href="http://blogs.teamb.com/craigstuntz/2008/08/04/37828/" class="external text" title="http://blogs.teamb.com/craigstuntz/2008/08/04/37828/" rel="nofollow">Understanding Anonymous Methods</a>," October 2008</li>
<li>Dr. Bob, "<a href="http://www.drbob42.com/examines/examinA5.htm" class="external text" title="http://www.drbob42.com/examines/examinA5.htm" rel="nofollow">Delphi 2009 Anonymous Methods</a>"</li>
</ul>


<!-- 
NewPP limit report
Preprocessor node count: 994/1000000
Post-expand include size: 6626/2048000 bytes
Template argument size: 2435/2048000 bytes
Expensive parser function count: 0/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:62319-0!1!0!default!!en!2 and timestamp 20090320075823 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Closure_(computer_science)">http://en.wikipedia.org/wiki/Closure_(computer_science)</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Theoretical_computer_science" title="Category:Theoretical computer science">Theoretical computer science</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Closure_(computer_science)" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Closure_(computer_science)" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Closure_(computer_science)&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Closure_(computer_science)&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Closure_(computer_science)" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Closure_(computer_science)" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Closure_(computer_science)" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Closure_(computer_science)&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Closure_(computer_science)&amp;oldid=275330811" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Closure_(computer_science)&amp;id=275330811">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-bg"><a href="http://bg.wikipedia.org/wiki/%D0%97%D0%B0%D1%82%D0%B2%D0%B0%D1%80%D1%8F%D0%BD%D0%B5_(%D0%B8%D0%BD%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%82%D0%B8%D0%BA%D0%B0)">Български</a></li>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/Closure">Deutsch</a></li>
				<li class="interwiki-es"><a href="http://es.wikipedia.org/wiki/Clausura_(inform%C3%A1tica)">Español</a></li>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Fermeture_(informatique)">Français</a></li>
				<li class="interwiki-it"><a href="http://it.wikipedia.org/wiki/Chiusura_(informatica)">Italiano</a></li>
				<li class="interwiki-nl"><a href="http://nl.wikipedia.org/wiki/Closure">Nederlands</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/%E3%82%AF%E3%83%AD%E3%83%BC%E3%82%B8%E3%83%A3">日本語</a></li>
				<li class="interwiki-pl"><a href="http://pl.wikipedia.org/wiki/Domkni%C4%99cie_(programowanie)">Polski</a></li>
				<li class="interwiki-pt"><a href="http://pt.wikipedia.org/wiki/Closure">Português</a></li>
				<li class="interwiki-ru"><a href="http://ru.wikipedia.org/wiki/%D0%97%D0%B0%D0%BC%D1%8B%D0%BA%D0%B0%D0%BD%D0%B8%D0%B5_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)">Русский</a></li>
				<li class="interwiki-simple"><a href="http://simple.wikipedia.org/wiki/Closure_(computer_science)">Simple English</a></li>
				<li class="interwiki-th"><a href="http://th.wikipedia.org/wiki/%E0%B8%AA%E0%B9%88%E0%B8%A7%E0%B8%99%E0%B8%9B%E0%B8%B4%E0%B8%94%E0%B8%84%E0%B8%A5%E0%B8%B8%E0%B8%A1_(%E0%B8%A7%E0%B8%B4%E0%B8%97%E0%B8%A2%E0%B8%B2%E0%B8%81%E0%B8%B2%E0%B8%A3%E0%B8%84%E0%B8%AD%E0%B8%A1%E0%B8%9E%E0%B8%B4%E0%B8%A7%E0%B9%80%E0%B8%95%E0%B8%AD%E0%B8%A3%E0%B9%8C)">ไทย</a></li>
				<li class="interwiki-uk"><a href="http://uk.wikipedia.org/wiki/%D0%97%D0%B0%D0%BC%D0%B8%D0%BA%D0%B0%D0%BD%D0%BD%D1%8F_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D1%83%D0%B2%D0%B0%D0%BD%D0%BD%D1%8F)">Українська</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 6 March 2009, at 04:42.</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv213 in 0.041 secs. --></body></html>
