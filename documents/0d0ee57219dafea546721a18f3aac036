<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Exception handling,Articles with unsourced statements since August 2007,.NET Framework,Abrahams guarantees,Actionscript,Ada programming language,Adapter pattern,Anders Hejlsberg,Automated Exception Handling,C++,CLU programming language" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Exception_handling&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Exception_handling&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Exception handling - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Exception_handling";
		var wgTitle = "Exception handling";
		var wgAction = "view";
		var wgArticleId = "59231";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 274818696;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
<style type="text/css">/*<![CDATA[*/
.source-csharp {line-height: normal;}
.source-csharp li, .source-csharp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for csharp
 * CSS class: source-csharp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-csharp .de1, .source-csharp .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-csharp  {}
.source-csharp .head {}
.source-csharp .foot {}
.source-csharp .imp {font-weight: bold; color: red;}
.source-csharp .ln-xtra {color: #cc0; background-color: #ffc;}
.source-csharp li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-csharp li.li2 {font-weight: bold;}
.source-csharp .kw1 {color: #0600FF;}
.source-csharp .kw2 {color: #FF8000; font-weight: bold;}
.source-csharp .kw3 {color: #008000;}
.source-csharp .kw4 {color: #FF0000;}
.source-csharp .kw5 {color: #000000;}
.source-csharp .co1 {color: #008080; font-style: italic;}
.source-csharp .co2 {color: #008080;}
.source-csharp .coMULTI {color: #008080; font-style: italic;}
.source-csharp .es0 {color: #008080; font-weight: bold;}
.source-csharp .br0 {color: #008000;}
.source-csharp .st0 {color: #808080;}
.source-csharp .nu0 {color: #FF0000;}
.source-csharp .me1 {color: #0000FF;}
.source-csharp .me2 {color: #0000FF;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-eiffel {line-height: normal;}
.source-eiffel li, .source-eiffel pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for eiffel
 * CSS class: source-eiffel, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-eiffel .de1, .source-eiffel .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-eiffel  {}
.source-eiffel .head {}
.source-eiffel .foot {}
.source-eiffel .imp {font-weight: bold; color: red;}
.source-eiffel .ln-xtra {color: #cc0; background-color: #ffc;}
.source-eiffel li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-eiffel li.li2 {font-weight: bold;}
.source-eiffel .kw1 {color: #0600FF; font-weight: bold;}
.source-eiffel .kw2 {color: #0600FF; font-weight: bold;}
.source-eiffel .kw3 {color: #800080;}
.source-eiffel .kw4 {color: #800000}
.source-eiffel .kw5 {color: #603000;}
.source-eiffel .co1 {color: #008000; font-style: italic;}
.source-eiffel .coMULTI {}
.source-eiffel .es0 {color: #005070; font-weight: bold;}
.source-eiffel .br0 {color: #600000;}
.source-eiffel .st0 {color: #0080A0;}
.source-eiffel .nu0 {color: #FF0000;}
.source-eiffel .me1 {color: #000060;}
.source-eiffel .me2 {color: #000050;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style>		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Exception_handling skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Exception handling</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<p><b>Exception handling</b> is a programming language construct or computer hardware mechanism designed to handle the occurrence of <i>exceptions</i> - special conditions that change the normal flow of execution.</p>
<p>Unlike <a href="/wiki/Signal_programming" title="Signal programming">signals</a> and <a href="/wiki/Event_handler" title="Event handler">event handlers</a> that are part of the normal program flow, exceptions are typically used to signal that something went wrong (e.g. a division by zero occurred or a required file was not found). Exceptions are <i>raised</i> or <i>thrown</i> (initiated) by either the hardware or the program itself by using a special command.</p>
<p>In general, an exception is <i>handled</i> (resolved) by saving the current state of execution in a predefined place and switching the execution to a specific <a href="/wiki/Subroutine" title="Subroutine">subroutine</a> - an <i>exception handler</i>. Depending on the situation, the handler may later resume the execution at the original location using the saved information. For example, a <a href="/wiki/Page_fault" title="Page fault">page fault</a> will usually allow the program to be resumed, while a <a href="/wiki/Division_by_zero" title="Division by zero">division by zero</a> might not be resolvable transparently.</p>
<p>From the processing point of view, hardware <a href="/wiki/Interrupt" title="Interrupt">interrupts</a> are similar to resumable exceptions, though they are typically unrelated to the user's program flow.</p>
<p>From the point of view of the author of a <a href="/wiki/Routine" title="Routine">routine</a>, raising an exception is a useful way to signal that a routine could not execute normally. For example, when an input argument is invalid (a zero denominator in division) or when a resource it relies on is unavailable (like a missing file, or a hard disk error). In systems without exceptions, routines would need to return some special <a href="/wiki/Error_code" title="Error code">error code</a>. However, this is sometimes complicated by the <a href="/wiki/Semipredicate_problem" title="Semipredicate problem">semipredicate problem</a>, in which users of the routine need to write extra code to distinguish normal return values from erroneous ones.</p>
<p>In runtime engine environments such as <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a> or <a href="/wiki/.NET_Framework" title=".NET Framework">.NET</a>, there exist tools that attach to the runtime engine and every time that an exception of interest occurs, they record debugging information that existed in memory at the time the exception was thrown (<a href="/wiki/Call_stack" title="Call stack">call stack</a> and <a href="/wiki/Heap" title="Heap">heap</a> values). These tools are called <a href="/wiki/Automated_Exception_Handling" title="Automated Exception Handling">Automated Exception Handling</a> or Error Interception tools and provide 'root-cause' information for exceptions.</p>
<p>Contemporary applications face many design challenges when considering exception handling strategies. Particularly in modern enterprise level applications, exceptions must often cross process boundaries and machine boundaries. Part of designing a solid exception handling strategy is recognizing when a process has failed to the point where it cannot be economically handled by the software portion of the process. At such times, it is very important to present exception information to the appropriate stakeholders. <sup id="cite_ref-0" class="reference"><a href="#cite_note-0" title=""><span>[</span>1<span>]</span></a></sup></p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Exception_safety"><span class="tocnumber">1</span> <span class="toctext">Exception safety</span></a>
<ul>
<li class="toclevel-2"><a href="#Verification_of_Exception_Handling"><span class="tocnumber">1.1</span> <span class="toctext">Verification of Exception Handling</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Exception_support_in_programming_languages"><span class="tocnumber">2</span> <span class="toctext">Exception support in programming languages</span></a></li>
<li class="toclevel-1"><a href="#Exception_handling_based_on_Design_by_Contract"><span class="tocnumber">3</span> <span class="toctext">Exception handling based on Design by Contract</span></a></li>
<li class="toclevel-1"><a href="#Checked_exceptions"><span class="tocnumber">4</span> <span class="toctext">Checked exceptions</span></a>
<ul>
<li class="toclevel-2"><a href="#Pros_and_cons"><span class="tocnumber">4.1</span> <span class="toctext">Pros and cons</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Exception_synchronity"><span class="tocnumber">5</span> <span class="toctext">Exception synchronity</span></a></li>
<li class="toclevel-1"><a href="#Condition_systems"><span class="tocnumber">6</span> <span class="toctext">Condition systems</span></a>
<ul>
<li class="toclevel-2"><a href="#Continuable_exceptions"><span class="tocnumber">6.1</span> <span class="toctext">Continuable exceptions</span></a></li>
<li class="toclevel-2"><a href="#Restarts_separate_mechanism_from_policy"><span class="tocnumber">6.2</span> <span class="toctext">Restarts separate mechanism from policy</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">7</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">8</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">9</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Exception_safety" id="Exception_safety"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Exception_handling&amp;action=edit&amp;section=1" title="Edit section: Exception safety">edit</a>]</span> <span class="mw-headline">Exception safety</span></h2>
<p>A piece of code is said to be <b>exception-safe</b>, if run-time failures within the code will not produce ill effects, such as <a href="/wiki/Memory_leak" title="Memory leak">memory leaks</a>, garbled stored data, or invalid output. Exception-safe code must satisfy <a href="/wiki/Invariant_(computer_science)" title="Invariant (computer science)">invariants</a> placed on the code even if exceptions occur. There are several levels of exception safety:</p>
<ol>
<li><b>Failure transparency</b>, also known as the <b>no throw guarantee</b>: Operations are guaranteed to succeed and satisfy all requirements even in presence of exceptional situations. If an exception occurs, it will not throw the exception further up. (Best level of exception safety.)</li>
<li><b>Commit or rollback semantics</b>, also known as <b>strong exception safety</b> or <b>no-change guarantee</b>: Operations can fail, but failed operations are guaranteed to have no side effects so all data retain original values.<sup id="cite_ref-1" class="reference"><a href="#cite_note-1" title=""><span>[</span>2<span>]</span></a></sup></li>
<li><b>Basic exception safety</b>: Partial execution of failed operations can cause side effects, but invariants on the state are preserved. Any stored data will contain valid values even if data has different values now from before the exception.</li>
<li><b>Minimal exception safety</b> also known as <b>no-leak guarantee</b>: Partial execution of failed operations may store invalid data but will not cause a crash, and no resources get leaked.</li>
<li><b>No exception safety</b>: No guarantees are made. (Worst level of exception safety)</li>
</ol>
<p>For instance, consider a smart vector type, such as C++'s <code>std::vector</code> or Java's <code>ArrayList</code>. When an item <i>x</i> is added to a vector <i>v</i>, the vector must actually add <i>x</i> to the internal list of objects and also update a count field that says how many objects are in <i>v</i>. It may also need to allocate new memory if the existing capacity isn't large enough. This memory allocation may fail and throw an exception. Because of this, a vector that provides failure transparency would be very difficult or impossible to write. However, the vector may be able to offer the strong exception guarantee fairly easily; in this case, either the insertion of <i>x</i> into <i>v</i> will succeed, or <i>v</i> will remain unchanged. If the vector provides only the basic exception safety guarantee, if the insertion fails, <i>v</i> may or may not contain <i>x</i>, but at least it will be in a consistent state. However, if the vector makes only the minimal guarantee, it's possible that the vector may be invalid. For instance, perhaps the size field of <i>v</i> was incremented but <i>x</i> wasn't actually inserted, making the state inconsistent. Of course, with no guarantee, the program may crash; perhaps the vector needed to expand but couldn't allocate the memory and blindly ploughs ahead as if the allocation succeeded, touching memory at an invalid address.</p>
<p>Usually at least basic exception safety is required. Failure transparency is difficult to implement, and is usually not possible in libraries where complete knowledge of the application is not available.</p>
<p><a name="Verification_of_Exception_Handling" id="Verification_of_Exception_Handling"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Exception_handling&amp;action=edit&amp;section=2" title="Edit section: Verification of Exception Handling">edit</a>]</span> <span class="mw-headline">Verification of Exception Handling</span></h3>
<p>The point of exception handling routines is to ensure that the code can handle error conditions. In order to establish that exception handling routines are sufficiently robust, it is necessary to present the code with a wide spectrum of invalid or unexpected inputs, such as can be created via software <a href="/wiki/Fault_injection" title="Fault injection">fault injection</a> and <a href="/wiki/Mutation_testing" title="Mutation testing">mutation testing</a> (which is also sometimes referred to as <a href="/wiki/Fuzz_testing" title="Fuzz testing">fuzz testing</a>). One of the most difficult types of software for which to write exception handling routines is protocol software, since a robust protocol implementation must be prepared to receive input that does not comply with the relevant specification(s).</p>
<p>In order to ensure that meaningful regression analysis can be conducted throughout a <a href="/wiki/Software_development_process" title="Software development process">software development lifecycle process</a>, any exception handling verification should be highly automated, and the test cases must be generated in a scientific, repeatable fashion. Several commercially available systems exist that perform such testing, including the Service Assurance Platform from <a href="/w/index.php?title=Mu_Dynamic&amp;action=edit&amp;redlink=1" class="new" title="Mu Dynamic (page does not exist)">Mu Dynamic</a> which can verify exception handling for many common protocol implementation.</p>
<p><a name="Exception_support_in_programming_languages" id="Exception_support_in_programming_languages"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Exception_handling&amp;action=edit&amp;section=3" title="Edit section: Exception support in programming languages">edit</a>]</span> <span class="mw-headline">Exception support in programming languages</span></h2>
<div class="rellink boilerplate seealso">See also: <a href="/wiki/Exception_handling_syntax" title="Exception handling syntax">Exception handling syntax</a></div>
<p>Many computer languages, such as most <a href="/wiki/.NET_Framework" title=".NET Framework">.NET</a> languages, <a href="/wiki/Actionscript" title="Actionscript" class="mw-redirect">Actionscript</a>, <a href="/wiki/Ada_programming_language" title="Ada programming language" class="mw-redirect">Ada</a>, <a href="/wiki/C%2B%2B" title="C++">C++</a>, <a href="/wiki/D_programming_language" title="D programming language" class="mw-redirect">D</a>, <a href="/wiki/ECMAScript" title="ECMAScript">ECMAScript</a>, <a href="/wiki/Eiffel_(programming_language)" title="Eiffel (programming language)">Eiffel</a>, <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a>, <a href="/wiki/ML_programming_language" title="ML programming language" class="mw-redirect">ML</a>, <a href="/wiki/Object_Pascal" title="Object Pascal">Object Pascal</a> (e.g. <a href="/wiki/Delphi_programming_language" title="Delphi programming language" class="mw-redirect">Delphi</a>, <a href="/wiki/Free_Pascal" title="Free Pascal">Free Pascal</a>, and the like), <a href="/wiki/Objective-C" title="Objective-C">Objective-C</a>, <a href="/wiki/Ocaml" title="Ocaml" class="mw-redirect">Ocaml</a>, <a href="/wiki/PHP" title="PHP">PHP</a> (as of version 5), <a href="/wiki/PL/1" title="PL/1" class="mw-redirect">PL/1</a>, <a href="/wiki/Prolog" title="Prolog">Prolog</a>, <a href="/wiki/Python_(programming_language)" title="Python (programming language)">Python</a>, <a href="/wiki/REALbasic" title="REALbasic">REALbasic</a>, <a href="/wiki/Ruby_(programming_language)" title="Ruby (programming language)">Ruby</a>, <a href="/wiki/Visual_Prolog" title="Visual Prolog">Visual Prolog</a>, have built-in support for exceptions and exception handling. In those languages, the advent of an exception (more precisely, an exception handled by the language) <a href="/wiki/Stack_unwinding" title="Stack unwinding" class="mw-redirect">unwinds</a> the <a href="/wiki/Call_stack" title="Call stack">stack</a> of function calls until an exception handler is found. That is, if function <i>f</i> contains a handler <i>H</i> for exception <i>E</i>, calls function <i>g</i>, which in turn calls function <i>h</i>, and an exception <i>E</i> occurs in <i>h</i>, then functions <i>h</i> and <i>g</i> will be terminated, and <i>H</i> in <i>f</i> will handle <i>E</i>. Excluding minor syntactic differences, there are only a couple of exception handling styles in use. In the most popular style, an exception is initiated by a special statement (<code>throw</code>, or <code>raise</code>) with an exception object (e.g. with Java or Object Pascal) or a value of a special extendable enumerated type (e.g. with Ada). The scope for exception handlers starts with a marker clause (<code>try</code>, or the language's block starter such as <code>begin</code>) and ends in the start of the first handler clause (<code>catch</code>, <code>except</code>, <code>rescue</code>). Several handler clauses can follow, and each can specify which exception types it handles and what name it uses for the exception object. A few languages also permit a clause (<code>else</code>) that is used in case no exception occurred before the end of the handler's scope was reached. More common is a related clause (<code>finally</code>, or <code>ensure</code>) that is executed whether an exception occurred or not, typically to release resources acquired within the body of the exception-handling block. Notably, C++ does not need and does not provide this construct, and the <a href="/wiki/Resource_Acquisition_Is_Initialization" title="Resource Acquisition Is Initialization">Resource-Acquisition-Is-Initialization</a> technique is used to free such resources instead. In its whole, exception handling code might look like this (in <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a>-like <a href="/wiki/Pseudocode" title="Pseudocode">pseudocode</a>; note that an exception type called <code>EmptyLineException</code> would need to be declared somewhere):</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-csharp">
 <span class="kw1">try</span> <span class="br0">{</span>
	line = console.<span class="me1">readLine</span><span class="br0">(</span><span class="br0">)</span>;
	<span class="kw1">if</span> <span class="br0">(</span>line.<span class="me1">length</span><span class="br0">(</span><span class="br0">)</span> == <span class="nu0">0</span><span class="br0">)</span> <span class="br0">{</span>
		<span class="kw1">throw</span> <span class="kw3">new</span> EmptyLineException<span class="br0">(</span><span class="st0">"The line read from console was empty!"</span><span class="br0">)</span>;
	<span class="br0">}</span>
	console.<span class="me1">printLine</span><span class="br0">(</span><span class="st0">"Hello %s!"</span> % line<span class="br0">)</span>;
	console.<span class="me1">printLine</span><span class="br0">(</span><span class="st0">"The program ran successfully"</span><span class="br0">)</span>;
 <span class="br0">}</span> <span class="kw1">catch</span> <span class="br0">(</span>EmptyLineException e<span class="br0">)</span> <span class="br0">{</span>
	console.<span class="me1">printLine</span><span class="br0">(</span><span class="st0">"Hello!"</span><span class="br0">)</span>;
 <span class="br0">}</span> <span class="kw1">catch</span> <span class="br0">(</span>Exception e<span class="br0">)</span> <span class="br0">{</span>
	console.<span class="me1">printLine</span><span class="br0">(</span><span class="st0">"Error: "</span> + e.<span class="me1">message</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>;
 <span class="br0">}</span> <span class="kw1">finally</span> <span class="br0">{</span>
	console.<span class="me1">printLine</span><span class="br0">(</span><span class="st0">"The program terminates now"</span><span class="br0">)</span>;
 <span class="br0">}</span>
</pre></div>
<p>As a minor variation, some languages use a single handler clause, which deals with the class of the exception internally.</p>
<p>Languages such as Perl and C don't use the term exception handling, but include facilities that allow implementing similar functionality.</p>
<p>The C++ derivative <a href="/wiki/Embedded_C%2B%2B" title="Embedded C++">Embedded C++</a> excludes exception handling support as it can substantially increase the size of the object code.</p>
<p><a name="Exception_handling_based_on_Design_by_Contract" id="Exception_handling_based_on_Design_by_Contract"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Exception_handling&amp;action=edit&amp;section=4" title="Edit section: Exception handling based on Design by Contract">edit</a>]</span> <span class="mw-headline">Exception handling based on Design by Contract</span></h2>
<p>A different view of exceptions is based on the principles of <a href="/wiki/Design_by_Contract" title="Design by Contract" class="mw-redirect">Design by Contract</a> and is supported in particular by the <a href="/wiki/Eiffel_(programming_language)" title="Eiffel (programming language)">Eiffel language</a>. The idea is to provide a more rigorous basis for exception handling by defining precisely what is "normal" and "abnormal" behavior. Specifically, the approach is based on two concepts:</p>
<ul>
<li><b>Failure</b>: the inability of an operation to fulfill its contract. For example an addition may produce an arithmetic overflow (it does not fulfill its contract of computing a good approximation to the mathematical sum); or a routine may fail to meet its postcondition.</li>
<li><b>Exception</b>: an abnormal event occurring during the execution of a routine (that routine is the "<i>recipient</i>" of the exception) during its execution. Such an abnormal event results from the <i>failure</i> of an operation called by the routine.</li>
</ul>
<p>The "Safe Exception Handling principle" as introduced by Bertrand Meyer in <a href="/wiki/Object-Oriented_Software_Construction" title="Object-Oriented Software Construction">Object-Oriented Software Construction</a> then holds that there are only two meaningful ways a routine can react when an exception occurs:</p>
<ul>
<li>Failure, or "organized panic": the routine fails, triggering an exception in its caller (so that the abnormal event is not ignored!), after fixing the object's state by re-establishing the invariant (the "organized" part).</li>
<li>Retry: try the algorithm again, usually after changing some values so that the next attempt will have a better chance to succeed.</li>
</ul>
<p>Here is an example expressed in Eiffel syntax. It assumes that a routine <i>send_fast</i> is normally the better way to send a message, but it may fail, triggering an exception; if so, the algorithm next uses <i>send_slow</i>, which will fail less often. If <i>send_slow</i> fails, the routine send as a whole should fail, causing the caller to get an exception.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-eiffel">
send <span class="br0">(</span>m: MESSAGE<span class="br0">)</span> <span class="kw2">is</span>
	<span class="co1">-- Send m through fast link if possible, otherwise through slow link.</span>
<span class="kw2">local</span>
	tried_fast, tried_slow: <span class="kw4">BOOLEAN</span>
<span class="kw2">do</span>
	<span class="kw2">if</span> tried_fast <span class="kw2">then</span>
	   tried_slow := <span class="kw3">True</span>
	   send_slow <span class="br0">(</span>m<span class="br0">)</span>
	<span class="kw2">else</span>
	   tried_fast := <span class="kw3">True</span>
	   send_fast <span class="br0">(</span>m<span class="br0">)</span>
	<span class="kw2">end</span>
<span class="kw2">rescue</span>
	<span class="kw2">if</span> <span class="kw2">not</span> tried_slow <span class="kw2">then</span>
	   <span class="kw2">retry</span>
	<span class="kw2">end</span>
<span class="kw2">end</span>
</pre></div>
<p>The boolean local variables are initialized to False at the start. If <i>send_fast</i> fails, the body (<b>do</b> clause) will be executed again, causing execution of <i>send_slow</i>. If this execution of <i>send_slow</i> fails, the <b>rescue</b> clause will execute to the end with no <b>retry</b> (no <b>else</b> clause in the final <b>if</b>), causing the routine execution as a whole to fail.</p>
<p>This approach has the merit of defining clearly what a "normal" and "abnormal" cases are: an abnormal case, causing an exception, is one in which the routine is unable to fulfill its contract.</p>
<p>It defines a clear distribution of roles: the <b>do</b> clause (normal body) is in charge of achieving, or attempting to achieve, the routine's contract; the <b>rescue</b> clause is in charge of reestablishing the context and restarting the process if this has a chance of succeeding, but not of performing any actual computation.</p>
<p><a name="Checked_exceptions" id="Checked_exceptions"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Exception_handling&amp;action=edit&amp;section=5" title="Edit section: Checked exceptions">edit</a>]</span> <span class="mw-headline">Checked exceptions</span></h2>
<p>The designers of Java devised<sup id="cite_ref-2" class="reference"><a href="#cite_note-2" title=""><span>[</span>3<span>]</span></a></sup><sup id="cite_ref-3" class="reference"><a href="#cite_note-3" title=""><span>[</span>4<span>]</span></a></sup> checked exceptions<sup id="cite_ref-4" class="reference"><a href="#cite_note-4" title=""><span>[</span>5<span>]</span></a></sup>, which are a special set of exceptions. The checked exceptions that a method may raise are part of the method's signature. For instance, if a method might throw an <code>IOException</code>, it must declare this fact explicitly in its method signature. Failure to do so raises a compile-time error.</p>
<p>This is related to exception checkers that exist at least for <a href="/wiki/OCaml" title="OCaml" class="mw-redirect">OCaml</a><sup id="cite_ref-5" class="reference"><a href="#cite_note-5" title=""><span>[</span>6<span>]</span></a></sup>. The external tool for OCaml is both transparent (i.e. it does not require any syntactic annotations) and facultative (i.e. it is possible to compile and run a program without having checked the exceptions, although this is not suggested for production code).</p>
<p>The <a href="/wiki/CLU_programming_language" title="CLU programming language" class="mw-redirect">CLU programming language</a> had a feature with the interface closer to what Java has introduced later. A function could raise only exceptions listed in its type, but any leaking exceptions from called functions would automatically be turned into the sole runtime exception, <code>failure</code>, instead of resulting in compile-time error. Later, <a href="/wiki/Modula-3" title="Modula-3">Modula-3</a> had a similar feature.<sup id="cite_ref-6" class="reference"><a href="#cite_note-6" title=""><span>[</span>7<span>]</span></a></sup> These features don't include the compile time checking which is central in the concept of checked exceptions, and hasn't (as of 2006) been incorporated into major programming languages other than Java.<sup id="cite_ref-7" class="reference"><a href="#cite_note-7" title=""><span>[</span>8<span>]</span></a></sup></p>
<p><a name="Pros_and_cons" id="Pros_and_cons"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Exception_handling&amp;action=edit&amp;section=6" title="Edit section: Pros and cons">edit</a>]</span> <span class="mw-headline">Pros and cons</span></h3>
<p>Checked exceptions can, at <a href="/wiki/Compile_time" title="Compile time">compile time</a>, greatly reduce (but not entirely eliminate) the incidence of unhandled exceptions surfacing at <a href="/wiki/Runtime" title="Runtime">runtime</a> in a given application<sup class="noprint Template-Fact"><span title="This claim needs references to reliable sources&#160;since August 2007" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</span></sup>; the unchecked exceptions (<code>RuntimeException</code>s and <code>Error</code>s) can still go unhandled.</p>
<p>However, some see checked exceptions as a nuisance, <a href="/wiki/Syntactic_salt" title="Syntactic salt" class="mw-redirect">syntactic salt</a> that either requires large <code>throws</code> declarations, often revealing implementation details and reducing <a href="/wiki/Encapsulation_(computer_science)" title="Encapsulation (computer science)">encapsulation</a>, or encourages the (ab)use of poorly-considered <code>try/catch</code> blocks that can potentially hide legitimate exceptions from their appropriate handlers. The problem is more evident considering what happens to code over time. An interface may be declared to throw exceptions X &amp; Y. In a later version of the code, if one wants to throw exception Z, it would make the new code incompatible with the earlier uses. Furthermore, with the <a href="/wiki/Adapter_pattern" title="Adapter pattern">adapter pattern</a>, where one body of code declares an interface that is then implemented by a different body of code so that code can be plugged in and called by the first, the adapter code may have a rich set of exceptions to describe problems, but is forced to use the exception types declared in the interface.</p>
<p>Others do not consider this a nuisance as it is possible to reduce the number of declared exceptions by either declaring a <a href="/wiki/Superclass_(computer_science)" title="Superclass (computer science)">superclass</a> of all potentially thrown exceptions or by defining and declaring exception types that are suitable for the level of abstraction of the called method,<sup id="cite_ref-8" class="reference"><a href="#cite_note-8" title=""><span>[</span>9<span>]</span></a></sup> and mapping lower level exceptions to these types, preferably wrapped using the <a href="/wiki/Exception_chaining" title="Exception chaining">exception chaining</a> in order to preserve the root cause. In addition, it's very possible that in the example above of the changing interface that the calling code would need to be modified as well, since in some sense the exceptions a method may throw are part of the method's implicit interface anyway.</p>
<p>A simple <code>throws Exception</code> declaration or <code>catch (Exception e)</code> is always sufficient to satisfy the checking. While this technique is sometimes useful, it effectively circumvents the checked exception mechanism, so it should only be used after careful consideration. Additionally, <code>throws Exception</code> forces all calling code to do the same.</p>
<p>One prevalent view is that unchecked exception types should not be handled, except maybe at the outermost levels of scope, as they often represent scenarios that do not allow for recovery: <code>RuntimeException</code>s frequently reflect programming defects,<sup id="cite_ref-9" class="reference"><a href="#cite_note-9" title=""><span>[</span>10<span>]</span></a></sup> and <code>Error</code>s generally represent unrecoverable JVM failures. The view is that, even in a language that supports checked exceptions, there are cases where the use of checked exceptions is not appropriate.</p>
<p><a name="Exception_synchronity" id="Exception_synchronity"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Exception_handling&amp;action=edit&amp;section=7" title="Edit section: Exception synchronity">edit</a>]</span> <span class="mw-headline">Exception synchronity</span></h2>
<p>Somewhat related with the concept of checked exceptions is <i>exception synchronity</i>. Synchronous exceptions happen at a specific program statement whereas <b>asynchronous exceptions</b> can raise practically anywhere.<sup id="cite_ref-10" class="reference"><a href="#cite_note-10" title=""><span>[</span>11<span>]</span></a></sup><sup id="cite_ref-11" class="reference"><a href="#cite_note-11" title=""><span>[</span>12<span>]</span></a></sup> It follows that asynchronous exception handling can't be required by the compiler. They are also difficult to program with. Examples of naturally asynchronous events include pressing Ctrl-C to interrupt a program, and receiving a <a href="/wiki/Signal_(computing)" title="Signal (computing)">signal</a> such as "stop" or "suspend" from another <a href="/wiki/Thread_(computer_science)" title="Thread (computer science)">thread of execution</a>.</p>
<p>Programming languages typically deal with this by limiting asynchronity, for example Java has lost thread stopping and resuming.<sup id="cite_ref-12" class="reference"><a href="#cite_note-12" title=""><span>[</span>13<span>]</span></a></sup> Instead, there can be semi-asynchronous exceptions that only raise in suitable locations of the program or synchronously.</p>
<p><a name="Condition_systems" id="Condition_systems"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Exception_handling&amp;action=edit&amp;section=8" title="Edit section: Condition systems">edit</a>]</span> <span class="mw-headline">Condition systems</span></h2>
<p><a href="/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a>, <a href="/wiki/Dylan_programming_language" title="Dylan programming language" class="mw-redirect">Dylan</a> and <a href="/wiki/Smalltalk" title="Smalltalk">Smalltalk</a> have a <a href="/w/index.php?title=Condition_system&amp;action=edit&amp;redlink=1" class="new" title="Condition system (page does not exist)">Condition system</a> which encompasses the aforementioned exception handling systems. In those languages or environments the advent of a condition (a "generalisation of an error" according to <a href="/wiki/Kent_Pitman" title="Kent Pitman">Kent Pitman</a>) implies a function call, and only late in the exception handler the decision to unwind the stack may be taken.</p>
<p>Conditions are a generalization of exceptions. When a condition arises, an appropriate condition handler is searched for and selected, in stack order, to handle the condition. Conditions which do not represent errors may safely go unhandled entirely; their only purpose may be to propagate hints or warnings toward the user.<sup id="cite_ref-13" class="reference"><a href="#cite_note-13" title=""><span>[</span>14<span>]</span></a></sup></p>
<p><a name="Continuable_exceptions" id="Continuable_exceptions"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Exception_handling&amp;action=edit&amp;section=9" title="Edit section: Continuable exceptions">edit</a>]</span> <span class="mw-headline">Continuable exceptions</span></h3>
<p>This is related to the so-called <i>resumption model</i> of exception handling, in which some exceptions are said to be <i>continuable</i>: it is permitted to return to the expression that signaled an exception, after having taken corrective action in the handler. The condition system is generalized thus: within the handler of a non-serious condition (a.k.a. <i>continuable exception</i>), it is possible to jump to predefined restart points (a.k.a. <i>restarts</i>) that lie between the signaling expression and the condition handler. Restarts are functions closed over some lexical environment, allowing the programmer to repair this environment before exiting the condition handler completely or unwinding the stack even partially.</p>
<p><a name="Restarts_separate_mechanism_from_policy" id="Restarts_separate_mechanism_from_policy"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Exception_handling&amp;action=edit&amp;section=10" title="Edit section: Restarts separate mechanism from policy">edit</a>]</span> <span class="mw-headline">Restarts separate mechanism from policy</span></h3>
<p>Condition handling moreover provides a <a href="/wiki/Separation_of_mechanism_from_policy" title="Separation of mechanism from policy" class="mw-redirect">separation of mechanism from policy</a>. Restarts provide various possible mechanisms for recovering from error, but do not select which mechanism is appropriate in a given situation. That is the province of the condition handler, which (since it is located in higher-level code) has access to a broader view.</p>
<p>An example: Suppose there is a library function whose purpose is to parse a single <a href="/wiki/Syslog" title="Syslog">syslog</a> file entry. What should this function do if the entry is malformed? There is no one right answer, because the same library could be deployed in programs for many different purposes. In an interactive log-file browser, the right thing to do might be to return the entry unparsed, so the user can see it -- but in an automated log-summarizing program, the right thing to do might be to supply null values for the unreadable fields, but abort with an error if too many entries have been malformed.</p>
<p>That is to say, the question can only be answered in terms of the broader goals of the program, which are not known to the general-purpose library function. Nonetheless, exiting with an error message is only rarely the right answer. So instead of simply exiting with an error, the function may <i>establish restarts</i> offering various ways to continue -- for instance, to skip the log entry, to supply default or null values for the unreadable fields, to ask the user for the missing values, <i>or</i> to unwind the stack and abort processing with an error message. The restarts offered constitute the <i><a href="/wiki/Mechanism" title="Mechanism">mechanisms</a></i> available for recovering from error; the selection of restart by the condition handler supplies the <i><a href="/wiki/Policy" title="Policy">policy</a></i>.</p>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Exception_handling&amp;action=edit&amp;section=11" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<ul>
<li><a href="/wiki/Abrahams_guarantees" title="Abrahams guarantees" class="mw-redirect">Abrahams guarantees</a></li>
<li><a href="/wiki/Setjmp/longjmp" title="Setjmp/longjmp" class="mw-redirect">setjmp/longjmp</a></li>
<li><a href="/wiki/Triple_fault" title="Triple fault">Triple fault</a></li>
<li><a href="/wiki/Vectored_Exception_Handling" title="Vectored Exception Handling">Vectored Exception Handling</a> (VEH)</li>
</ul>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Exception_handling&amp;action=edit&amp;section=12" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<div class="references-small references-column-count references-column-count-2" style="-moz-column-count:2; column-count:2;">
<ol class="references">
<li id="cite_note-0"><b><a href="#cite_ref-0" title="">^</a></b> All Exceptions Are Handled, Jim Wilcox, <a href="http://poliTechnosis.kataire.com/2008/02/all-exceptions-are-handled.html" class="external free" title="http://poliTechnosis.kataire.com/2008/02/all-exceptions-are-handled.html" rel="nofollow">http://poliTechnosis.kataire.com/2008/02/all-exceptions-are-handled.html</a></li>
<li id="cite_note-1"><b><a href="#cite_ref-1" title="">^</a></b> <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/1997/N1077.asc" class="external free" title="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/1997/N1077.asc" rel="nofollow">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/1997/N1077.asc</a></li>
<li id="cite_note-2"><b><a href="#cite_ref-2" title="">^</a></b> <a href="http://archives.java.sun.com/cgi-bin/wa?A2=ind9901&amp;L=rmi-users&amp;F=P&amp;P=36083" class="external text" title="http://archives.java.sun.com/cgi-bin/wa?A2=ind9901&amp;L=rmi-users&amp;F=P&amp;P=36083" rel="nofollow">LISTSERV 15.0 - RMI-USERS Archives</a></li>
<li id="cite_note-3"><b><a href="#cite_ref-3" title="">^</a></b> <a href="http://answers.google.com/answers/threadview?id=26101" class="external text" title="http://answers.google.com/answers/threadview?id=26101" rel="nofollow">Google Answers: The origin of checked exceptions</a></li>
<li id="cite_note-4"><b><a href="#cite_ref-4" title="">^</a></b> Java Language Specification, chapter 11.2. <a href="http://java.sun.com/docs/books/jls/third_edition/html/exceptions.html#11.2" class="external free" title="http://java.sun.com/docs/books/jls/third_edition/html/exceptions.html#11.2" rel="nofollow">http://java.sun.com/docs/books/jls/third_edition/html/exceptions.html#11.2</a></li>
<li id="cite_note-5"><b><a href="#cite_ref-5" title="">^</a></b> [<a href="http://caml.inria.fr/pub/old_caml_site/ocamlexc/ocamlexc.htm" class="external free" title="http://caml.inria.fr/pub/old_caml_site/ocamlexc/ocamlexc.htm" rel="nofollow">http://caml.inria.fr/pub/old_caml_site/ocamlexc/ocamlexc.htm</a> OcamlExc -- An uncaught exceptions analyzer for Objective Caml]</li>
<li id="cite_note-6"><b><a href="#cite_ref-6" title="">^</a></b> <a href="http://www1.cs.columbia.edu/graphics/modula3/tutorial/www/m3_23.html#SEC23" class="external text" title="http://www1.cs.columbia.edu/graphics/modula3/tutorial/www/m3_23.html#SEC23" rel="nofollow">Modula-3 - Procedure Types</a></li>
<li id="cite_note-7"><b><a href="#cite_ref-7" title="">^</a></b> <a href="http://www.mindview.net/Etc/Discussions/CheckedExceptions" class="external text" title="http://www.mindview.net/Etc/Discussions/CheckedExceptions" rel="nofollow">Bruce Eckel's MindView, Inc: Does Java need Checked Exceptions?</a></li>
<li id="cite_note-8"><b><a href="#cite_ref-8" title="">^</a></b> Bloch 2001:178 <cite style="font-style:normal" class="book" id="CITEREFBloch2001">Bloch, Joshua (2001). <i>Effective Java Programming Language Guide</i>. Addison-Wesley Professional. <a href="/wiki/Special:BookSources/0201310058" class="internal">ISBN 0-201-31005-8</a>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Effective+Java+Programming+Language+Guide&amp;rft.aulast=Bloch&amp;rft.aufirst=Joshua&amp;rft.au=Bloch%2C+Joshua&amp;rft.date=2001&amp;rft.pub=Addison-Wesley+Professional&amp;rft.isbn=0-201-31005-8&amp;rfr_id=info:sid/en.wikipedia.org:Exception_handling"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-9"><b><a href="#cite_ref-9" title="">^</a></b> Bloch 2001:172</li>
<li id="cite_note-10"><b><a href="#cite_ref-10" title="">^</a></b> <a href="http://citeseer.ist.psu.edu/415348.html" class="external text" title="http://citeseer.ist.psu.edu/415348.html" rel="nofollow">Asynchronous Exceptions in Haskell - Marlow, Jones, Moran (ResearchIndex)</a></li>
<li id="cite_note-11"><b><a href="#cite_ref-11" title="">^</a></b> Safe asynchronous exceptions for Python. <a href="http://www.cs.williams.edu/~freund/papers/02-lwl2.ps" class="external free" title="http://www.cs.williams.edu/~freund/papers/02-lwl2.ps" rel="nofollow">http://www.cs.williams.edu/~freund/papers/02-lwl2.ps</a></li>
<li id="cite_note-12"><b><a href="#cite_ref-12" title="">^</a></b> <a href="http://java.sun.com/j2se/1.5.0/docs/guide/misc/threadPrimitiveDeprecation.html" class="external text" title="http://java.sun.com/j2se/1.5.0/docs/guide/misc/threadPrimitiveDeprecation.html" rel="nofollow">Java Thread Primitive Deprecation</a></li>
<li id="cite_note-13"><b><a href="#cite_ref-13" title="">^</a></b> <a href="http://www.franz.com/support/documentation/6.2/ansicl/section/conditio.htm" class="external text" title="http://www.franz.com/support/documentation/6.2/ansicl/section/conditio.htm" rel="nofollow">Condition System Concepts</a></li>
</ol>
</div>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Exception_handling&amp;action=edit&amp;section=13" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<ul>
<li>Article "<a href="http://www.chrisjhill.co.uk/Articles/PHP_exception_handling" class="external text" title="http://www.chrisjhill.co.uk/Articles/PHP_exception_handling" rel="nofollow">PHP exception handling</a>" by <a href="/wiki/Christopher_Hill" title="Christopher Hill">Christopher Hill</a></li>
<li>Article "<a href="http://java.sun.com/docs/books/tutorial/essential/exceptions/runtime.html" class="external text" title="http://java.sun.com/docs/books/tutorial/essential/exceptions/runtime.html" rel="nofollow">Unchecked Exceptions - The Controversy</a>"</li>
<li>Article "<a href="http://ddj.com/dept/debug/197003350" class="external text" title="http://ddj.com/dept/debug/197003350" rel="nofollow">Practical C++ Error Handling in Hybrid Environments</a>" by <a href="/w/index.php?title=Gigi_Sayfan&amp;action=edit&amp;redlink=1" class="new" title="Gigi Sayfan (page does not exist)">Gigi Sayfan</a></li>
<li>Article "<a href="https://db.usenix.org/events/wiess2000/full_papers/dinechin/dinechin.pdf" class="external text" title="https://db.usenix.org/events/wiess2000/full_papers/dinechin/dinechin.pdf" rel="nofollow">C++ Exception Handling</a>" by <a href="/w/index.php?title=Christophe_de_Dinechin&amp;action=edit&amp;redlink=1" class="new" title="Christophe de Dinechin (page does not exist)">Christophe de Dinechin</a></li>
<li>Article "<a href="http://www.cs.nott.ac.uk/~gmh/exceptions.pdf" class="external text" title="http://www.cs.nott.ac.uk/~gmh/exceptions.pdf" rel="nofollow">Compiling Exceptions Correctly</a>" by <a href="/w/index.php?title=Graham_Hutton&amp;action=edit&amp;redlink=1" class="new" title="Graham Hutton (page does not exist)">Graham Hutton</a> and <a href="/wiki/Joel_Wright" title="Joel Wright">Joel Wright</a></li>
<li>Article "<a href="http://java.sun.com/developer/technicalArticles/Programming/exceptions2/index.html" class="external text" title="http://java.sun.com/developer/technicalArticles/Programming/exceptions2/index.html" rel="nofollow">Exceptional practices</a>" by <a href="/w/index.php?title=Brian_Goetz&amp;action=edit&amp;redlink=1" class="new" title="Brian Goetz (page does not exist)">Brian Goetz</a></li>
<li>Article "<a href="http://oreillynet.com/pub/a/network/2003/05/05/cpluspocketref.html" class="external text" title="http://oreillynet.com/pub/a/network/2003/05/05/cpluspocketref.html" rel="nofollow">Programming with Exceptions in C++</a>" by <a href="/w/index.php?title=Kyle_Loudon&amp;action=edit&amp;redlink=1" class="new" title="Kyle Loudon (page does not exist)">Kyle Loudon</a></li>
<li>Article "<a href="http://perl.com/pub/a/2002/11/14/exception.html" class="external text" title="http://perl.com/pub/a/2002/11/14/exception.html" rel="nofollow">Object Oriented Exception Handling in Perl</a>" by <a href="/w/index.php?title=Arun_Udaya_Shankar&amp;action=edit&amp;redlink=1" class="new" title="Arun Udaya Shankar (page does not exist)">Arun Udaya Shankar</a></li>
<li>Article "<a href="http://intel.com/cd/ids/developer/asmo-na/eng/81438.htm" class="external text" title="http://intel.com/cd/ids/developer/asmo-na/eng/81438.htm" rel="nofollow">How to Implement Software Exception Handling</a>"</li>
<li>Article "<a href="http://www.on-time.com/ddj0011.htm" class="external text" title="http://www.on-time.com/ddj0011.htm" rel="nofollow">Exception Handling in C without C++</a>" by <a href="/w/index.php?title=Tom_Schotland&amp;action=edit&amp;redlink=1" class="new" title="Tom Schotland (page does not exist)">Tom Schotland</a> and <a href="/w/index.php?title=Peter_Petersen&amp;action=edit&amp;redlink=1" class="new" title="Peter Petersen (page does not exist)">Peter Petersen</a></li>
<li>Article "<a href="http://www.gamedev.net/reference/programming/features/sehbasics/" class="external text" title="http://www.gamedev.net/reference/programming/features/sehbasics/" rel="nofollow">Structured Exception Handling Basics</a>" by <a href="/w/index.php?title=Vadim_Kokielov&amp;action=edit&amp;redlink=1" class="new" title="Vadim Kokielov (page does not exist)">Vadim Kokielov</a></li>
<li>Article "<a href="http://politechnosis.kataire.com/2008/02/all-exceptions-are-handled.html" class="external text" title="http://politechnosis.kataire.com/2008/02/all-exceptions-are-handled.html" rel="nofollow">All Exceptions Are Handled</a>" by James "Jim" Wilcox</li>
<li>Article "<a href="http://www.dlugosz.com/Magazine/WTJ/May96/" class="external text" title="http://www.dlugosz.com/Magazine/WTJ/May96/" rel="nofollow">An Exceptional Philosophy</a>" by John M. Dlugosz</li>
<li>Paper "<a href="http://www.informatik.uni-hamburg.de/TGI/pnbib/f/faustmann_g1.html" class="external text" title="http://www.informatik.uni-hamburg.de/TGI/pnbib/f/faustmann_g1.html" rel="nofollow">Exception Handling in Petri-Net-based Workflow Management</a>" by <a href="/w/index.php?title=Gert_Faustmann&amp;action=edit&amp;redlink=1" class="new" title="Gert Faustmann (page does not exist)">Gert Faustmann</a> and <a href="/w/index.php?title=Dietmar_Wikarski&amp;action=edit&amp;redlink=1" class="new" title="Dietmar Wikarski (page does not exist)">Dietmar Wikarski</a></li>
<li>Paper "<a href="http://www.ssw.uni-linz.ac.at/Research/Papers/Hof97b.html" class="external text" title="http://www.ssw.uni-linz.ac.at/Research/Papers/Hof97b.html" rel="nofollow">Zero-Overhead Exception Handling Using Metaprogramming</a>"</li>
<li><a href="http://www.object-arts.com/EducationCentre/Overviews/ExceptionHandling.htm" class="external text" title="http://www.object-arts.com/EducationCentre/Overviews/ExceptionHandling.htm" rel="nofollow">Overview for Smalltalk</a></li>
<li><a href="http://c2.com/cgi/wiki?CategoryException" class="external text" title="http://c2.com/cgi/wiki?CategoryException" rel="nofollow">Descriptions from Portland Pattern Repository</a></li>
<li><a href="http://www.microsoft.com/msj/0197/exception/exception.aspx" class="external text" title="http://www.microsoft.com/msj/0197/exception/exception.aspx" rel="nofollow">A Crash Course on the Depths of Win32 Structured Exception Handling</a> by <a href="/wiki/Matt_Pietrek" title="Matt Pietrek">Matt Pietrek</a> - Microsoft Systems Journal (1997)</li>
<li><a href="http://artima.com/intv/handcuffsP.html" class="external text" title="http://artima.com/intv/handcuffsP.html" rel="nofollow">The Trouble with Checked Exceptions</a> - a conversation with <a href="/wiki/Anders_Hejlsberg" title="Anders Hejlsberg">Anders Hejlsberg</a></li>
<li><a href="http://www.mindview.net/Etc/Discussions/CheckedExceptions" class="external text" title="http://www.mindview.net/Etc/Discussions/CheckedExceptions" rel="nofollow">Does Java Need Checked Exceptions?</a></li>
<li><a href="http://neil.fraser.name/writing/exception/" class="external text" title="http://neil.fraser.name/writing/exception/" rel="nofollow">Problems and Benefits of Exception Handling</a></li>
<li><a href="http://codebetter.com/blogs/karlseguin/archive/2006/04/05/142355.aspx" class="external text" title="http://codebetter.com/blogs/karlseguin/archive/2006/04/05/142355.aspx" rel="nofollow">Understanding and Using Exceptions in .NET</a></li>
<li><a href="http://tutorials.jenkov.com/java-exception-handling/index.html" class="external text" title="http://tutorials.jenkov.com/java-exception-handling/index.html" rel="nofollow">Java Exception Handling</a> - Jakob Jenkov</li>
<li><a href="http://gethelp.devx.com/techtips/cpp_pro/10min/2002/June/10min0602.asp" class="external text" title="http://gethelp.devx.com/techtips/cpp_pro/10min/2002/June/10min0602.asp" rel="nofollow">C++ Exception Handling</a> - Danny Kalev</li>
<li>Visual Prolog <a href="http://wiki.visual-prolog.com/index.php?title=Exception_Handling" class="external text" title="http://wiki.visual-prolog.com/index.php?title=Exception_Handling" rel="nofollow">Exception Handling</a> (wiki article)</li>
<li><a href="http://javapapers.com/core-java/java-exception/explain-type-of-exceptions-or-checked-vs-unchecked-exceptions-in-java/" class="external text" title="http://javapapers.com/core-java/java-exception/explain-type-of-exceptions-or-checked-vs-unchecked-exceptions-in-java/" rel="nofollow">Type of Java Exceptions</a></li>
</ul>


<!-- 
NewPP limit report
Preprocessor node count: 799/1000000
Post-expand include size: 4084/2048000 bytes
Template argument size: 1107/2048000 bytes
Expensive parser function count: 1/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:59231-0!1!0!default!!en!2 and timestamp 20090331081454 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Exception_handling">http://en.wikipedia.org/wiki/Exception_handling</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Control_flow" title="Category:Control flow">Control flow</a></span> | <span dir='ltr'><a href="/wiki/Category:Software_anomalies" title="Category:Software anomalies">Software anomalies</a></span></div><div id="mw-hidden-catlinks" class="mw-hidden-cats-hidden">Hidden categories:&#32;<span dir='ltr'><a href="/wiki/Category:All_articles_with_unsourced_statements" title="Category:All articles with unsourced statements">All articles with unsourced statements</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_unsourced_statements_since_August_2007" title="Category:Articles with unsourced statements since August 2007">Articles with unsourced statements since August 2007</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Exception_handling" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Exception_handling" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Exception_handling&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Exception_handling&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Exception_handling" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Exception_handling" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Exception_handling" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Exception_handling&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Exception_handling&amp;oldid=274818696" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Exception_handling&amp;id=274818696">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/Ausnahmebehandlung">Deutsch</a></li>
				<li class="interwiki-es"><a href="http://es.wikipedia.org/wiki/Manejo_de_excepciones">Español</a></li>
				<li class="interwiki-fa"><a href="http://fa.wikipedia.org/wiki/%D9%85%D8%AF%DB%8C%D8%B1%DB%8C%D8%AA_%D8%A7%D8%B3%D8%AA%D8%AB%D9%86%D8%A7">فارسی</a></li>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Syst%C3%A8me_de_gestion_d%27exceptions">Français</a></li>
				<li class="interwiki-ko"><a href="http://ko.wikipedia.org/wiki/%EC%98%88%EC%99%B8_%EC%B2%98%EB%A6%AC">한국어</a></li>
				<li class="interwiki-is"><a href="http://is.wikipedia.org/wiki/Fr%C3%A1brig%C3%B0iss%C3%BDslari">Íslenska</a></li>
				<li class="interwiki-it"><a href="http://it.wikipedia.org/wiki/Gestione_delle_eccezioni">Italiano</a></li>
				<li class="interwiki-he"><a href="http://he.wikipedia.org/wiki/%D7%98%D7%99%D7%A4%D7%95%D7%9C_%D7%91%D7%97%D7%A8%D7%99%D7%92%D7%95%D7%AA_(%D7%AA%D7%9B%D7%A0%D7%95%D7%AA)">עברית</a></li>
				<li class="interwiki-hu"><a href="http://hu.wikipedia.org/wiki/Kiv%C3%A9telkezel%C3%A9s">Magyar</a></li>
				<li class="interwiki-nl"><a href="http://nl.wikipedia.org/wiki/Exception_handling">Nederlands</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/%E4%BE%8B%E5%A4%96%E5%87%A6%E7%90%86">日本語</a></li>
				<li class="interwiki-pl"><a href="http://pl.wikipedia.org/wiki/Wyj%C4%85tek">Polski</a></li>
				<li class="interwiki-pt"><a href="http://pt.wikipedia.org/wiki/Tratamento_de_exce%C3%A7%C3%A3o">Português</a></li>
				<li class="interwiki-ru"><a href="http://ru.wikipedia.org/wiki/%D0%9E%D0%B1%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B0_%D0%B8%D1%81%D0%BA%D0%BB%D1%8E%D1%87%D0%B5%D0%BD%D0%B8%D0%B9">Русский</a></li>
				<li class="interwiki-sr"><a href="http://sr.wikipedia.org/wiki/%D0%98%D0%B7%D1%83%D0%B7%D0%B5%D1%82%D0%B0%D0%BA_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%B8%D1%80%D0%B0%D1%9A%D0%B5)">Српски / Srpski</a></li>
				<li class="interwiki-fi"><a href="http://fi.wikipedia.org/wiki/Poikkeus">Suomi</a></li>
				<li class="interwiki-sv"><a href="http://sv.wikipedia.org/wiki/Undantagshantering">Svenska</a></li>
				<li class="interwiki-ta"><a href="http://ta.wikipedia.org/wiki/%E0%AE%B5%E0%AE%BF%E0%AE%A4%E0%AE%BF%E0%AE%B5%E0%AE%BF%E0%AE%B2%E0%AE%95%E0%AF%8D%E0%AE%95%E0%AF%88_%E0%AE%95%E0%AF%88%E0%AE%AF%E0%AE%BE%E0%AE%B3%E0%AF%81%E0%AE%A4%E0%AE%B2%E0%AF%8D">தமிழ்</a></li>
				<li class="interwiki-uk"><a href="http://uk.wikipedia.org/wiki/%D0%9E%D0%B1%D1%80%D0%BE%D0%B1%D0%BA%D0%B0_%D0%B2%D0%B8%D0%BD%D1%8F%D1%82%D0%BA%D1%96%D0%B2">Українська</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 4 March 2009, at 01:20.</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv151 in 0.059 secs. --></body></html>
