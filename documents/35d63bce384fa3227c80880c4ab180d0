<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Malloc,2007,2008,Address space,Address space layout randomization,Array,Automatic memory allocation,Buffer overflow,C++,C99,C (programming language)" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Malloc&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Malloc&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>malloc - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Malloc";
		var wgTitle = "Malloc";
		var wgAction = "view";
		var wgArticleId = "384289";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 282254497;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
<style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-c .de1, .source-c .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-c  {}
.source-c .head {}
.source-c .foot {}
.source-c .imp {font-weight: bold; color: red;}
.source-c .ln-xtra {color: #cc0; background-color: #ffc;}
.source-c li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-c li.li2 {font-weight: bold;}
.source-c .kw1 {color: #b1b100;}
.source-c .kw2 {color: #000000; font-weight: bold;}
.source-c .kw3 {color: #000066;}
.source-c .kw4 {color: #993333;}
.source-c .co1 {color: #808080; font-style: italic;}
.source-c .co2 {color: #339933;}
.source-c .coMULTI {color: #808080; font-style: italic;}
.source-c .es0 {color: #000099; font-weight: bold;}
.source-c .br0 {color: #66cc66;}
.source-c .st0 {color: #ff0000;}
.source-c .nu0 {color: #cc66cc;}
.source-c .me1 {color: #202020;}
.source-c .me2 {color: #202020;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style>		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Malloc skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">malloc</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<p>In <a href="/wiki/Computing" title="Computing">computing</a>, <code><b>malloc</b></code> is a <a href="/wiki/Subroutine" title="Subroutine">subroutine</a> provided in the <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a> and <a href="/wiki/C%2B%2B" title="C++">C++ programming language</a>'s <a href="/wiki/Standard_library" title="Standard library">standard libraries</a> for performing <a href="/wiki/Dynamic_memory_allocation" title="Dynamic memory allocation">dynamic memory allocation</a>.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Rationale"><span class="tocnumber">1</span> <span class="toctext">Rationale</span></a></li>
<li class="toclevel-1"><a href="#Dynamic_memory_allocation_in_C"><span class="tocnumber">2</span> <span class="toctext">Dynamic memory allocation in C</span></a></li>
<li class="toclevel-1"><a href="#Usage_example"><span class="tocnumber">3</span> <span class="toctext">Usage example</span></a></li>
<li class="toclevel-1"><a href="#Related_functions"><span class="tocnumber">4</span> <span class="toctext">Related functions</span></a>
<ul>
<li class="toclevel-2"><a href="#calloc"><span class="tocnumber">4.1</span> <span class="toctext">calloc</span></a></li>
<li class="toclevel-2"><a href="#realloc"><span class="tocnumber">4.2</span> <span class="toctext">realloc</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Common_errors"><span class="tocnumber">5</span> <span class="toctext">Common errors</span></a>
<ul>
<li class="toclevel-2"><a href="#Allocation_failure"><span class="tocnumber">5.1</span> <span class="toctext">Allocation failure</span></a></li>
<li class="toclevel-2"><a href="#Memory_leaks"><span class="tocnumber">5.2</span> <span class="toctext">Memory leaks</span></a></li>
<li class="toclevel-2"><a href="#Use_after_free"><span class="tocnumber">5.3</span> <span class="toctext">Use after free</span></a></li>
<li class="toclevel-2"><a href="#Freeing_unallocated_memory"><span class="tocnumber">5.4</span> <span class="toctext">Freeing unallocated memory</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Implementations"><span class="tocnumber">6</span> <span class="toctext">Implementations</span></a>
<ul>
<li class="toclevel-2"><a href="#Heap-based"><span class="tocnumber">6.1</span> <span class="toctext">Heap-based</span></a></li>
<li class="toclevel-2"><a href="#The_glibc_allocator"><span class="tocnumber">6.2</span> <span class="toctext">The glibc allocator</span></a></li>
<li class="toclevel-2"><a href="#OpenBSD.27s_malloc"><span class="tocnumber">6.3</span> <span class="toctext">OpenBSD's malloc</span></a></li>
<li class="toclevel-2"><a href="#Hoard.27s_malloc"><span class="tocnumber">6.4</span> <span class="toctext">Hoard's malloc</span></a></li>
<li class="toclevel-2"><a href="#In-kernel"><span class="tocnumber">6.5</span> <span class="toctext">In-kernel</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Allocation_size_limits"><span class="tocnumber">7</span> <span class="toctext">Allocation size limits</span></a></li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">8</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">9</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">10</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Rationale" id="Rationale"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Malloc&amp;action=edit&amp;section=1" title="Edit section: Rationale">edit</a>]</span> <span class="mw-headline">Rationale</span></h2>
<p>The <a href="/wiki/C_Programming_Language" title="C Programming Language" class="mw-redirect">C</a> <a href="/wiki/Programming_language" title="Programming language">programming language</a> manages <a href="/wiki/Memory_(computers)" title="Memory (computers)" class="mw-redirect">memory</a> either <a href="/wiki/Static_memory_allocation" title="Static memory allocation">statically</a>, <a href="/wiki/Automatic_memory_allocation" title="Automatic memory allocation" class="mw-redirect">automatically</a>, or <a href="/wiki/Dynamic_memory_allocation" title="Dynamic memory allocation">dynamically</a>. Static-duration variables are allocated in main (fixed) memory and persist for the lifetime of the program; automatic-duration variables are allocated on the <a href="/wiki/Call_stack" title="Call stack">stack</a> and come and go as functions are called and return. For static-duration and, before <a href="/wiki/C99" title="C99">C99</a> (which allows variable-length automatic arrays<sup id="cite_ref-0" class="reference"><a href="#cite_note-0" title=""><span>[</span>1<span>]</span></a></sup>), automatic-duration variables, the size of the allocation is required to be <a href="/wiki/Compile-time" title="Compile-time" class="mw-redirect">compile-time</a> constant. If the required size is not known until <a href="/wiki/Run-time" title="Run-time" class="mw-redirect">run-time</a> (for example, if data of arbitrary size is being read from the user or from a disk file), then using fixed-size data objects is inadequate.</p>
<p>Some platforms provide library calls which allow run-time dynamic allocation from the C stack rather than the heap (e.g. <a href="/wiki/Glibc" title="Glibc" class="mw-redirect">glibc</a>'s <code>alloca()</code><sup id="cite_ref-1" class="reference"><a href="#cite_note-1" title=""><span>[</span>2<span>]</span></a></sup>, <a href="/wiki/Microsoft_Windows" title="Microsoft Windows">Microsoft Windows</a> CRTL's <code>malloca()</code><sup id="cite_ref-2" class="reference"><a href="#cite_note-2" title=""><span>[</span>3<span>]</span></a></sup>). This memory is automatically freed when the calling function ends. The need for this is lessened by changes in the <a href="/wiki/C99" title="C99">C99</a> standard, which added support for <a href="/wiki/Variable-length_array" title="Variable-length array">variable-length arrays</a> of block scope having sizes determined at runtime.</p>
<p>The lifetime of allocated memory is also a concern. Neither static- nor automatic-duration memory is adequate for all situations. Automatic-allocated data cannot persist across multiple function calls, while static data persists for the life of the program whether it is needed or not. In many situations the programmer requires greater flexibility in managing the lifetime of allocated memory.</p>
<p>These limitations are avoided by using <a href="/wiki/Dynamic_memory_allocation" title="Dynamic memory allocation">dynamic memory allocation</a> in which memory is more explicitly (but more flexibly) managed, typically, by allocating it from <a href="/wiki/Dynamic_memory_allocation" title="Dynamic memory allocation">the heap</a>, an area of memory structured for this purpose. In C, the library function <code>malloc</code> is used to allocate a block of memory on the heap. The program accesses this block of memory via a <a href="/wiki/Pointer" title="Pointer" class="mw-redirect">pointer</a> that <code>malloc</code> returns. When the memory is no longer needed, the pointer is passed to <code>free</code> which deallocates the memory so that it can be used for other purposes.</p>
<p><a name="Dynamic_memory_allocation_in_C" id="Dynamic_memory_allocation_in_C"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Malloc&amp;action=edit&amp;section=2" title="Edit section: Dynamic memory allocation in C">edit</a>]</span> <span class="mw-headline">Dynamic memory allocation in C</span></h2>
<p>The <code>malloc</code> function is one of the functions in standard C to allocate memory. Its <a href="/wiki/Function_prototype" title="Function prototype">function prototype</a> is</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">void</span> *malloc<span class="br0">(</span>size_t size<span class="br0">)</span>;
</pre></div>
<p>which allocates <code><var>size</var></code> bytes of memory. If the allocation succeeds, a pointer to the block of memory is returned, otherwise a null pointer is returned.</p>
<p><code>malloc</code> returns a <a href="/wiki/Void_pointer" title="Void pointer" class="mw-redirect">void pointer</a> (<code>void *</code>), which indicates that it is a pointer to a region of unknown data type. It need <b>not</b> be explicitly cast to a more specific pointer type, since ANSI C defines an implicit conversion between the void pointer type and other pointers to objects. An explicit cast of <code>malloc</code>'s return value is sometimes performed because <code>malloc</code> originally returned a <code>char *</code>, but this cast is unnecessary in standard C code.<sup id="cite_ref-3" class="reference"><a href="#cite_note-3" title=""><span>[</span>4<span>]</span></a></sup><sup id="cite_ref-4" class="reference"><a href="#cite_note-4" title=""><span>[</span>5<span>]</span></a></sup> Omitting the cast, however, creates an incompatibility with <a href="/wiki/C%2B%2B" title="C++">C++</a>, which does require it.</p>
<p>Memory allocated via <code>malloc</code> is persistent: it will continue to exist until the program terminates or the memory is explicitly deallocated by the programmer (that is, the block is said to be "freed"). This is achieved by use of the <code>free</code> function. Its prototype is</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">void</span> free<span class="br0">(</span><span class="kw4">void</span> *pointer<span class="br0">)</span>;
</pre></div>
<p>which releases the block of memory pointed to by <code>pointer</code>. <code>pointer</code> must have been previously returned by <code>malloc</code>, <code>calloc</code>, or <code>realloc</code> and must only be passed to <code>free</code> once.</p>
<p><a name="Usage_example" id="Usage_example"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Malloc&amp;action=edit&amp;section=3" title="Edit section: Usage example">edit</a>]</span> <span class="mw-headline">Usage example</span></h2>
<p>The standard method of creating an <a href="/wiki/Array" title="Array">array</a> of ten int objects:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">int</span> array<span class="br0">[</span><span class="nu0">10</span><span class="br0">]</span>;
</pre></div>
<p>However, if one wishes to allocate a similar array dynamically, the following code could be used:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="coMULTI">/* Allocate space for an array with ten elements of type int. */</span>
<span class="kw4">int</span> *ptr = malloc<span class="br0">(</span><span class="nu0">10</span> * <span class="kw4">sizeof</span> <span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span><span class="br0">)</span>;
<span class="kw1">if</span> <span class="br0">(</span>ptr == <span class="kw2">NULL</span><span class="br0">)</span> <span class="br0">{</span>
    <span class="coMULTI">/* Memory could not be allocated, the program should handle the error here as appropriate. */</span>
<span class="br0">}</span> <span class="kw1">else</span> <span class="br0">{</span>
    <span class="coMULTI">/* Allocation succeeded.  Do something.  */</span>
    free<span class="br0">(</span>ptr<span class="br0">)</span>; <span class="coMULTI">/* We are done with the int objects, and free the associated pointer.  
               The pointer must not be used again. */</span>
<span class="br0">}</span>
</pre></div>
<p><code>malloc</code> returns a null pointer to indicate that no memory is available, or that some other error occurred which prevented memory being allocated.</p>
<p>You will sometimes see code in which the value returned by <code>malloc</code> is "cast" (see <a href="/wiki/Type_conversion" title="Type conversion">type conversion</a>) to a specific type, as in</p>
<p><code>int *ptr = (int*)malloc(10 * sizeof (int));</code>.</p>
<p>But this is bad practice: it is redundant under the C standard, as noted above; and moreover, putting in a cast may mask failure to include the header, <code>stdlib.h</code>, in which the prototype for <code>malloc</code> is found. In the absence of a prototype for <code>malloc</code>, the C compiler will assume that <code>malloc</code> returns an <code>int</code>, and will issue a warning in a context such as the above -- provided the error is not masked by a cast. (A cast says, in effect, "Don't warn me, I know what I'm doing!" Casts should therefore be used sparingly.)</p>
<p>A useful idiom with <code>malloc</code> is shown in this example:</p>
<p><code>int *ptr = malloc(10 * sizeof *ptr);</code>.</p>
<p>That is, instead of writing a hard-wired type into the argument to malloc, one uses the <code>sizeof</code> operator on the content of the pointer to be allocated. This ensures that the types on the left and right of the assignment will never get out of sync when code is revised.</p>
<p><a name="Related_functions" id="Related_functions"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Malloc&amp;action=edit&amp;section=4" title="Edit section: Related functions">edit</a>]</span> <span class="mw-headline">Related functions</span></h2>
<p><a name="calloc" id="calloc"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Malloc&amp;action=edit&amp;section=5" title="Edit section: calloc">edit</a>]</span> <span class="mw-headline">calloc</span></h3>
<p><code>malloc</code> returns a block of memory that is allocated for the programmer to use, but is uninitialized. The memory is usually initialized by hand if necessary—either via the <b><code>memset</code></b> function, or by one or more assignment statements that dereference the pointer. An alternative is to use the <b><code>calloc</code></b> function, which allocates memory and then initializes it. Its prototype is</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">void</span> *calloc<span class="br0">(</span>size_t nelements, size_t elementSize<span class="br0">)</span>;
</pre></div>
<p>which allocates a region of memory, initialized to 0, of size <code>nelements</code>&#160;×&#160;<code>elementSize</code>.</p>
<p><a name="realloc" id="realloc"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Malloc&amp;action=edit&amp;section=6" title="Edit section: realloc">edit</a>]</span> <span class="mw-headline">realloc</span></h3>
<p>It is often useful to be able to grow or shrink a block of memory. This can be done using <code>realloc</code> which returns a pointer to a memory region of the specified size, which contains the same data as the old region pointed to by <code>pointer</code> (truncated to the minimum of the old and new sizes). If <code>realloc</code> is unable to resize the memory region in place, it allocates new storage, copies the required data, and frees the old pointer. If this allocation fails, <code>realloc</code> maintains the original pointer unaltered, and returns the null pointer value. The newly allocated region of memory is uninitialized (its contents are not predictable). The function prototype is</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">void</span> *realloc<span class="br0">(</span><span class="kw4">void</span> *pointer, size_t size<span class="br0">)</span>;
</pre></div>
<p><code>realloc</code> behaves like <code>malloc</code> if the first argument is NULL:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">void</span> *p = malloc<span class="br0">(</span><span class="nu0">42</span><span class="br0">)</span>;
<span class="kw4">void</span> *p = realloc<span class="br0">(</span><span class="kw2">NULL</span>, <span class="nu0">42</span><span class="br0">)</span>; <span class="coMULTI">/* equivalent */</span>
</pre></div>
<p>In the C89 standard, realloc with length 0 is the same as a free(). In the C99 standard, this is no longer the case; here, the allocated memory block is reduced in size to zero bytes and a non-NULL pointer is returned (which cannot be directly dereferenced, since it points at no allocated memory, but it can be used in future calls to realloc and free).</p>
<p>When using <code>realloc</code> in production code, one should always use a temporary variable. For example</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">void</span> *p = malloc<span class="br0">(</span>orig_size<span class="br0">)</span>;
<span class="coMULTI">/* and later... */</span>
<span class="kw4">void</span> *tmp = realloc<span class="br0">(</span>p, big_size<span class="br0">)</span>; 
<span class="kw1">if</span> <span class="br0">(</span>tmp != <span class="kw2">NULL</span><span class="br0">)</span> <span class="br0">{</span>
   p = tmp; <span class="coMULTI">/* OK, assign new, larger storage to p */</span>
<span class="br0">}</span> <span class="kw1">else</span> <span class="br0">{</span>
   <span class="coMULTI">/* handle the problem somehow */</span>
<span class="br0">}</span>
</pre></div>
<p>If instead one did</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">void</span> *p = malloc<span class="br0">(</span>orig_size<span class="br0">)</span>;
<span class="coMULTI">/* and later... */</span>
p = realloc<span class="br0">(</span>p, big_size<span class="br0">)</span>;
</pre></div>
<p>then in case it is not possible to obtain <code>big_size</code> bytes of memory, p will have value NULL and we no longer have a pointer to the memory previously allocated for p, creating a memory leak (see below).</p>
<p><a name="Common_errors" id="Common_errors"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Malloc&amp;action=edit&amp;section=7" title="Edit section: Common errors">edit</a>]</span> <span class="mw-headline">Common errors</span></h2>
<p>The improper use of <code>malloc</code> and related functions can frequently be a source of bugs.</p>
<p><a name="Allocation_failure" id="Allocation_failure"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Malloc&amp;action=edit&amp;section=8" title="Edit section: Allocation failure">edit</a>]</span> <span class="mw-headline">Allocation failure</span></h3>
<p><code>malloc</code> is not guaranteed to succeed — if there is no memory available, or if the program has exceeded the amount of memory it is allowed to reference, <code>malloc</code> will return a null pointer. Many programs do not check for <code>malloc</code> failure. Such a program would attempt to use the null pointer returned by <code>malloc</code> as if it pointed to allocated memory, and the program would crash.</p>
<p><a name="Memory_leaks" id="Memory_leaks"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Malloc&amp;action=edit&amp;section=9" title="Edit section: Memory leaks">edit</a>]</span> <span class="mw-headline">Memory leaks</span></h3>
<p>When a call to <code>malloc</code>, <code>calloc</code> or <code>realloc</code> succeeds, the return value of the call should eventually be passed to the <code>free</code> function. This releases the allocated memory, allowing it to be reused to satisfy other memory allocation requests. If this is not done, the allocated memory will not be released until the process exits — in other words, a <a href="/wiki/Memory_leak" title="Memory leak">memory leak</a> will occur. Typically, memory leaks are caused by losing track of pointers, for example not using a temporary pointer for the return value of <code>realloc</code>, which may lead to the original pointer being overwritten with a null pointer, for example:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">void</span> *ptr;
size_t size = BUFSIZ;
 
ptr = malloc<span class="br0">(</span>size<span class="br0">)</span>;
 
<span class="coMULTI">/* some further execution happens here... */</span>
 
<span class="coMULTI">/* now the buffer size needs to be doubled */</span>
<span class="kw1">if</span> <span class="br0">(</span>size &gt; SIZE_MAX / <span class="nu0">2</span><span class="br0">)</span> <span class="br0">{</span>
  <span class="coMULTI">/* handle overflow error */</span>
  <span class="coMULTI">/* ... */</span>
  <span class="kw1">return</span> <span class="br0">(</span><span class="nu0">1</span><span class="br0">)</span>;
<span class="br0">}</span>
size *= <span class="nu0">2</span>;
ptr = realloc<span class="br0">(</span>ptr, size<span class="br0">)</span>;
<span class="kw1">if</span> <span class="br0">(</span>ptr == <span class="kw2">NULL</span><span class="br0">)</span> <span class="br0">{</span>
  <span class="coMULTI">/* the realloc failed (it returned a null pointer), but the original address in ptr has been lost
     so the memory cannot be freed and a leak has occurred */</span>
  <span class="coMULTI">/* ... */</span>
  <span class="kw1">return</span> <span class="nu0">1</span>;
<span class="br0">}</span>
<span class="coMULTI">/* ... */</span>
</pre></div>
<p><a name="Use_after_free" id="Use_after_free"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Malloc&amp;action=edit&amp;section=10" title="Edit section: Use after free">edit</a>]</span> <span class="mw-headline">Use after free</span></h3>
<p>After a pointer has been passed to <code>free</code>, it becomes a <a href="/wiki/Dangling_pointer" title="Dangling pointer">dangling pointer</a>: it references a region of memory with undefined content, which may not be available for use. The pointer's value cannot be accessed. For example:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">int</span> *ptr = <span class="br0">(</span><span class="kw4">int</span>*<span class="br0">)</span>malloc<span class="br0">(</span><span class="kw4">sizeof</span> <span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span><span class="br0">)</span>;
free<span class="br0">(</span>ptr<span class="br0">)</span>;
*ptr = <span class="nu0">0</span>; <span class="coMULTI">/* Undefined behavior */</span>
</pre></div>
<p>Code like this has undefined behavior: its effect may vary. Even attempting to print the variable with <a href="/wiki/Printf" title="Printf">printf</a> is undefined behavior (assuming <code>malloc</code> did not return a null pointer); for example:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw3">printf</span><span class="br0">(</span><span class="st0">"%p"</span>, <span class="br0">(</span><span class="kw4">void</span> *<span class="br0">)</span> ptr<span class="br0">)</span>; <span class="coMULTI">/* Undefined behavior */</span>
</pre></div>
<p>Commonly, the system may have reused freed memory for other purposes. Therefore, writing through a pointer to a deallocated region of memory may result in overwriting another piece of data somewhere else in the program. Depending on what data is overwritten, this may result in data corruption or cause the program to crash at a later time. A particularly bad example of this problem is if the same pointer is passed to <code>free</code> twice, known as a <i>double free</i>. To avoid this, some programmers set pointers to <code>NULL</code> after passing them to <code>free</code>: <code>free(NULL)</code> is safe (it does nothing).<sup id="cite_ref-5" class="reference"><a href="#cite_note-5" title=""><span>[</span>6<span>]</span></a></sup> However, this will not protect other aliases to the same pointer from being doubly freed.</p>
<p><a name="Freeing_unallocated_memory" id="Freeing_unallocated_memory"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Malloc&amp;action=edit&amp;section=11" title="Edit section: Freeing unallocated memory">edit</a>]</span> <span class="mw-headline">Freeing unallocated memory</span></h3>
<p>Another problem is when <code>free</code> is passed an address that wasn't allocated by <code>malloc</code>, <code>realloc</code> or <code>calloc</code>. This can be caused when a pointer to a literal string or the name of a declared array is passed to <code>free</code>, for example:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">char</span> *msg = <span class="st0">"Default message"</span>;
<span class="kw4">int</span> tbl<span class="br0">[</span><span class="nu0">100</span><span class="br0">]</span>;
</pre></div>
<p>Passing either of the above pointers to <code>free</code> will result in undefined behaviour.</p>
<p><a name="Implementations" id="Implementations"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Malloc&amp;action=edit&amp;section=12" title="Edit section: Implementations">edit</a>]</span> <span class="mw-headline">Implementations</span></h2>
<p>The implementation of memory management depends greatly upon operating system and architecture. Some operating systems supply an allocator for malloc, while others supply functions to control certain regions of data. The same dynamic memory allocator is often used to implement both malloc and <code>operator new</code> in <a href="/wiki/C%2B%2B" title="C++">C++</a>. Hence, it is referred to below as the <i>allocator</i> rather than <code>malloc</code>.</p>
<p><a name="Heap-based" id="Heap-based"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Malloc&amp;action=edit&amp;section=13" title="Edit section: Heap-based">edit</a>]</span> <span class="mw-headline">Heap-based</span></h3>
<p>Implementation of the allocator on <a href="/wiki/IA-32" title="IA-32">IA-32</a> architectures is commonly done using the heap, or data segment. The allocator will usually expand and contract the heap to fulfill allocation requests.</p>
<p>The heap method suffers from a few inherent flaws, stemming entirely from <a href="/wiki/Fragmentation_(computer)" title="Fragmentation (computer)">fragmentation</a>. Like any method of memory allocation, the heap will become fragmented; that is, there will be sections of used and unused memory in the allocated space on the heap. A good allocator will attempt to find an unused area of already allocated memory to use before resorting to expanding the heap. The major problem with this method is that the heap has only two significant attributes: base, or the beginning of the heap in virtual memory space; and length, or its size. The heap requires enough system memory to fill its entire length, and its base can never change. Thus, any large areas of unused memory are wasted. The heap can get "stuck" in this position if a small used segment exists at the end of the heap, which could waste any magnitude of address space, from a few megabytes to a few hundred.</p>
<p><a name="The_glibc_allocator" id="The_glibc_allocator"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Malloc&amp;action=edit&amp;section=14" title="Edit section: The glibc allocator">edit</a>]</span> <span class="mw-headline">The glibc allocator</span></h3>
<p>The <a href="/wiki/GNU_C_library" title="GNU C library" class="mw-redirect">GNU C library</a> (glibc) uses both <code>brk</code> and <code><a href="/wiki/Mmap" title="Mmap">mmap</a></code> on the <a href="/wiki/Linux" title="Linux">Linux</a> operating system. The <code>brk</code> system call will change the size of the heap to be larger or smaller as needed, while the <code>mmap</code> system call will be used when extremely large segments are allocated. The heap method suffers the same flaws as any other, while the mmap method may avert problems with huge buffers trapping a small allocation at the end after their expiration.</p>
<p>The <code>mmap</code> method has its own flaws: it always allocates a segment by mapping entire <a href="/wiki/Page_(computing)" title="Page (computing)">pages</a>. Mapping even a single byte will use an entire page, which is usually 4096 bytes. Although this is usually quite acceptable, many architectures provide large page support (up to four megabytes). The combination of this method with large pages can potentially waste vast amounts of memory. The advantage to the <code>mmap</code> method is that when the segment is freed, the memory is returned to the system immediately.</p>
<p><a name="OpenBSD.27s_malloc" id="OpenBSD.27s_malloc"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Malloc&amp;action=edit&amp;section=15" title="Edit section: OpenBSD's malloc">edit</a>]</span> <span class="mw-headline">OpenBSD's <code>malloc</code></span></h3>
<p><a href="/wiki/OpenBSD" title="OpenBSD">OpenBSD</a>'s implementation of the <code>malloc</code> function makes use of <code>mmap</code>. For requests greater in size than one page, the entire allocation is retrieved using <code>mmap</code>; smaller sizes are assigned from memory pools maintained by <code>malloc</code> within a number of "bucket pages," also allocated with <code>mmap</code>. On a call to <code>free</code>, memory is released and unmapped from the process <a href="/wiki/Address_space" title="Address space">address space</a> using <code>munmap</code>. This system is designed to improve security by taking advantage of the <a href="/wiki/Address_space_layout_randomization" title="Address space layout randomization">address space layout randomization</a> and gap page features implemented as part of OpenBSD's <code>mmap</code> <a href="/wiki/System_call" title="System call">system call</a>, and to detect <a href="#Use_after_free" title="">use-after-free bugs</a>—as a large memory allocation is completely unmapped after it is freed, further use causes a <a href="/wiki/Segmentation_fault" title="Segmentation fault">segmentation fault</a> and termination of the program.</p>
<p><a name="Hoard.27s_malloc" id="Hoard.27s_malloc"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Malloc&amp;action=edit&amp;section=16" title="Edit section: Hoard's malloc">edit</a>]</span> <span class="mw-headline">Hoard's <code>malloc</code></span></h3>
<p>The <a href="/wiki/Hoard_memory_allocator" title="Hoard memory allocator">Hoard memory allocator</a> is an allocator whose goal is scalable memory allocation performance. Like OpenBSD's allocator, Hoard uses <code>mmap</code> exclusively, but manages memory in chunks of 64 kilobytes called superblocks. Hoard's heap is logically divided into a single global heap and a number of per-processor heaps. In addition, there is a thread-local cache that can hold a limited number of superblocks. By allocating only from superblocks on the local per-thread or per-processor heap, and moving mostly-empty superblocks to the global heap so they can be reused by other processors, Hoard keeps fragmentation low while achieving near linear scalability with the number of threads.<a href="http://www.cs.umass.edu/~emery/pubs/berger-asplos2000.pdf" class="external autonumber" title="http://www.cs.umass.edu/~emery/pubs/berger-asplos2000.pdf" rel="nofollow">[1]</a></p>
<p><a name="In-kernel" id="In-kernel"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Malloc&amp;action=edit&amp;section=17" title="Edit section: In-kernel">edit</a>]</span> <span class="mw-headline">In-kernel</span></h3>
<p>Operating system <a href="/wiki/Kernel_(computer_science)" title="Kernel (computer science)" class="mw-redirect">kernels</a> need to allocate memory just as application programs do. The implementation of <code>malloc</code> within a kernel often differs significantly from the implementations used by C libraries, however. For example, memory buffers might need to conform to special restrictions imposed by <a href="/wiki/Direct_memory_access" title="Direct memory access">DMA</a>, or the memory allocation function might be called from interrupt context <a href="http://people.netfilter.org/~rusty/unreliable-guides/kernel-hacking/routines-kmalloc.html" class="external autonumber" title="http://people.netfilter.org/~rusty/unreliable-guides/kernel-hacking/routines-kmalloc.html" rel="nofollow">[2]</a>. This necessitates a <code>malloc</code> implementation tightly integrated with the <a href="/wiki/Virtual_memory" title="Virtual memory">virtual memory</a> subsystem of the operating system kernel.</p>
<p><a name="Allocation_size_limits" id="Allocation_size_limits"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Malloc&amp;action=edit&amp;section=18" title="Edit section: Allocation size limits">edit</a>]</span> <span class="mw-headline">Allocation size limits</span></h2>
<p>The largest possible memory block <code>malloc</code> can allocate depends on the host system, particularly the size of physical memory and the operating system implementation. Theoretically, the largest number should be the maximum value that can be held in a <i><a href="/wiki/Size_t" title="Size t" class="mw-redirect">size_t</a></i> type, which is an implementation-dependent unsigned integer representing the size of an area of memory. The maximum value is <code>2<sup>8*sizeof(size_t)</sup> − 1</code>, or the constant <code>SIZE_MAX</code> in the C99 standard.</p>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Malloc&amp;action=edit&amp;section=19" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<ul>
<li><a href="/wiki/Buffer_overflow" title="Buffer overflow">Buffer overflow</a></li>
<li><a href="/wiki/Memory_debugger" title="Memory debugger">Memory debugger</a></li>
<li><code><a href="/wiki/Mprotect" title="Mprotect">mprotect</a></code></li>
<li><a href="/wiki/New_(C%2B%2B)" title="New (C++)"><code>new</code> (C++)</a></li>
<li><a href="/wiki/Page_size" title="Page size" class="mw-redirect">Page size</a></li>
<li><a href="/wiki/Variable-length_array" title="Variable-length array">Variable-length array</a></li>
</ul>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Malloc&amp;action=edit&amp;section=20" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<div class="references-small">
<ol class="references">
<li id="cite_note-0"><b><a href="#cite_ref-0" title="">^</a></b> <a href="http://gcc.gnu.org/onlinedocs/gcc/Variable-Length.html" class="external text" title="http://gcc.gnu.org/onlinedocs/gcc/Variable-Length.html" rel="nofollow">gcc manual</a> on gnu.org accessed at <span class="mw-formatted-date" title="2008-12-14"><span class="mw-formatted-date" title="12-14"><a href="/wiki/December_14" title="December 14">December 14</a></span>, <a href="/wiki/2008" title="2008">2008</a></span></li>
<li id="cite_note-1"><b><a href="#cite_ref-1" title="">^</a></b> <a href="http://www.gnu.org/software/libc/manual/html_node/Variable-Size-Automatic.html" class="external text" title="http://www.gnu.org/software/libc/manual/html_node/Variable-Size-Automatic.html" rel="nofollow">GNU libc manual</a> on gnu.org accessed at <span class="mw-formatted-date" title="2007-03-09"><span class="mw-formatted-date" title="03-09"><a href="/wiki/March_9" title="March 9">March 9</a></span>, <a href="/wiki/2007" title="2007">2007</a></span></li>
<li id="cite_note-2"><b><a href="#cite_ref-2" title="">^</a></b> <a href="http://msdn.microsoft.com/en-us/library/5471dc8s.aspx" class="external text" title="http://msdn.microsoft.com/en-us/library/5471dc8s.aspx" rel="nofollow"><code>malloca()</code></a> page on <a href="/wiki/MSDN" title="MSDN" class="mw-redirect">MSDN</a> Visual C++ Developer Center. Accessed on 12th March 2009</li>
<li id="cite_note-3"><b><a href="#cite_ref-3" title="">^</a></b> <a href="http://www.c-faq.com/malloc/mallocnocast.html" class="external text" title="http://www.c-faq.com/malloc/mallocnocast.html" rel="nofollow">comp.lang.c FAQ list · Question 7.7b</a> on C-FAQ accessed at <span class="mw-formatted-date" title="2007-03-09"><span class="mw-formatted-date" title="03-09"><a href="/wiki/March_9" title="March 9">March 9</a></span>, <a href="/wiki/2007" title="2007">2007</a></span></li>
<li id="cite_note-4"><b><a href="#cite_ref-4" title="">^</a></b> <a href="http://faq.cprogramming.com/cgi-bin/smartfaq.cgi?id=1043284351&amp;answer=1047673478" class="external text" title="http://faq.cprogramming.com/cgi-bin/smartfaq.cgi?id=1043284351&amp;answer=1047673478" rel="nofollow">FAQ &gt; Explanations of... &gt; Casting malloc</a> on Cprogramming.com accessed at <span class="mw-formatted-date" title="2007-03-09"><span class="mw-formatted-date" title="03-09"><a href="/wiki/March_9" title="March 9">March 9</a></span>, <a href="/wiki/2007" title="2007">2007</a></span></li>
<li id="cite_note-5"><b><a href="#cite_ref-5" title="">^</a></b> <a href="http://www.opengroup.org/onlinepubs/009695399/functions/free.html" class="external text" title="http://www.opengroup.org/onlinepubs/009695399/functions/free.html" rel="nofollow">The Open Group Base Specifications Issue 6</a> on The Open Group accessed at <span class="mw-formatted-date" title="2007-03-09"><span class="mw-formatted-date" title="03-09"><a href="/wiki/March_9" title="March 9">March 9</a></span>, <a href="/wiki/2007" title="2007">2007</a></span></li>
</ol>
</div>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Malloc&amp;action=edit&amp;section=21" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<ul>
<li><a href="http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html" class="external text" title="http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html" rel="nofollow">Definition of malloc in IEEE Std 1003.1 standard</a></li>
<li><a href="http://gee.cs.oswego.edu/dl/html/malloc.html" class="external text" title="http://gee.cs.oswego.edu/dl/html/malloc.html" rel="nofollow">The design of the basis of the glibc allocator</a> by <a href="/wiki/Doug_Lea" title="Doug Lea">Doug Lea</a></li>
<li><a href="http://www.osdcom.info/content/view/31/39/" class="external text" title="http://www.osdcom.info/content/view/31/39/" rel="nofollow">Simple Memory Allocation Algorithms</a> on OSDEV Community</li>
<li>"<a href="http://www.cs.umass.edu/~emery/pubs/berger-asplos2000.pdf" class="external text" title="http://www.cs.umass.edu/~emery/pubs/berger-asplos2000.pdf" rel="nofollow">Hoard: A Scalable Memory Allocator for Multithreaded Applications</a>" by Emery Berger</li>
<li>"<a href="http://www.research.ibm.com/people/m/michael/pldi-2004.pdf" class="external text" title="http://www.research.ibm.com/people/m/michael/pldi-2004.pdf" rel="nofollow">Scalable Lock-Free Dynamic Memory Allocation</a>" by Maged M. Michael</li>
<li>"<a href="http://www-106.ibm.com/developerworks/linux/library/l-memory/" class="external text" title="http://www-106.ibm.com/developerworks/linux/library/l-memory/" rel="nofollow"><i>Inside memory management</i> - The choices, tradeoffs, and implementations of dynamic allocation</a>" by Jonathan Bartlett</li>
<li><a href="http://live.gnome.org/MemoryReduction" class="external text" title="http://live.gnome.org/MemoryReduction" rel="nofollow">Memory Reduction (GNOME)</a> wiki page with lots of information about fixing malloc</li>
<li><a href="http://goog-perftools.sourceforge.net/doc/tcmalloc.html" class="external text" title="http://goog-perftools.sourceforge.net/doc/tcmalloc.html" rel="nofollow">"TCMalloc: Thread-Caching Malloc"</a>, a high-performance malloc developed by Google</li>
</ul>


<!-- 
NewPP limit report
Preprocessor node count: 164/1000000
Post-expand include size: 184/2048000 bytes
Template argument size: 0/2048000 bytes
Expensive parser function count: 0/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:384289-0!1!0!default!!en!2 and timestamp 20090407022758 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Malloc">http://en.wikipedia.org/wiki/Malloc</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Stdlib.h" title="Category:Stdlib.h">Stdlib.h</a></span> | <span dir='ltr'><a href="/wiki/Category:Memory_management" title="Category:Memory management">Memory management</a></span> | <span dir='ltr'><a href="/wiki/Category:C_programming_language" title="Category:C programming language">C programming language</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_example_C_code" title="Category:Articles with example C code">Articles with example C code</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Malloc" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Malloc" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Malloc&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Malloc&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Malloc" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Malloc" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Malloc" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Malloc&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Malloc&amp;oldid=282254497" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Malloc&amp;id=282254497">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Malloc">Français</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/Malloc">日本語</a></li>
				<li class="interwiki-pt"><a href="http://pt.wikipedia.org/wiki/Malloc">Português</a></li>
				<li class="interwiki-ru"><a href="http://ru.wikipedia.org/wiki/Malloc">Русский</a></li>
				<li class="interwiki-sr"><a href="http://sr.wikipedia.org/wiki/Malloc">Српски / Srpski</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 7 April 2009, at 02:27 (UTC).</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv102 in 0.067 secs. --></body></html>
