<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Duck typing,Alex Martelli,Boo (programming language),C Sharp (programming language),ColdFusion,Computer programming,Duck test,Dynamic typing,Exception handling,Gzip,Inheritance (computer science)" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Duck_typing&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Duck_typing&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Duck typing - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Duck_typing";
		var wgTitle = "Duck typing";
		var wgAction = "view";
		var wgArticleId = "440018";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 283510998;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
<style type="text/css">/*<![CDATA[*/
.source-python {line-height: normal;}
.source-python li, .source-python pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for python
 * CSS class: source-python, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-python .de1, .source-python .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-python  {}
.source-python .head {}
.source-python .foot {}
.source-python .imp {font-weight: bold; color: red;}
.source-python .ln-xtra {color: #cc0; background-color: #ffc;}
.source-python li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-python li.li2 {font-weight: bold;}
.source-python .kw1 {color: #ff7700;font-weight:bold;}
.source-python .kw2 {color: #008000;}
.source-python .kw3 {color: #dc143c;}
.source-python .kw4 {color: #0000cd;}
.source-python .co1 {color: #808080; font-style: italic;}
.source-python .coMULTI {color: #808080; font-style: italic;}
.source-python .es0 {color: #000099; font-weight: bold;}
.source-python .br0 {color: #66cc66;}
.source-python .st0 {color: #483d8b;}
.source-python .nu0 {color: #ff4500;}
.source-python .me1 {color: black;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style>		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Duck_typing skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Duck typing</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<p>In <a href="/wiki/Computer_programming" title="Computer programming">computer programming</a>, <b>duck typing</b> is a style of <a href="/wiki/Dynamic_typing" title="Dynamic typing" class="mw-redirect">dynamic typing</a> in which an object's <i>current set of <a href="/wiki/Method_(computer_science)" title="Method (computer science)">methods</a> and properties</i> determines the valid semantics, rather than its inheritance from a particular class or implementation of a specific interface. The name of the concept refers to the <a href="/wiki/Duck_test" title="Duck test">duck test</a>, attributed to <a href="/wiki/James_Whitcomb_Riley" title="James Whitcomb Riley">James Whitcomb Riley</a> (see <a href="#History" title="">History</a> below), which may be phrased as follows:</p>
<dl>
<dd><i>If it walks like a duck and quacks like a duck, I would call it a duck.</i></dd>
</dl>
<p>In duck typing one is concerned with just those aspects of an object that are used, rather than with the type of the object itself. For example, in a non-duck-typed language, one can create a function that takes an object of type Duck and calls that object's walk and quack methods. In a duck-typed language, the equivalent function would take an object of any type and call that object's walk and quack methods. If the object does not have the methods that are called then the function signals a run-time error. It is this action of any object having the correct walk and quack methods being accepted by the function that evokes the quotation and hence the name of this form of typing.</p>
<p>Duck typing is aided by habitually <i>not</i> testing for the type of arguments in method and function bodies, relying on documentation, clear code, and testing to ensure correct use. Users of statically typed languages new to dynamically typed languages may want to add such static (before run-time) type checks which defeats duck typing, constraining the language's dynamism.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Concept_example"><span class="tocnumber">1</span> <span class="toctext">Concept example</span></a></li>
<li class="toclevel-1"><a href="#In_mainly_static_languages"><span class="tocnumber">2</span> <span class="toctext">In mainly static languages</span></a></li>
<li class="toclevel-1"><a href="#Comparison_with_other_type_systems"><span class="tocnumber">3</span> <span class="toctext">Comparison with other type systems</span></a>
<ul>
<li class="toclevel-2"><a href="#Comparison_with_structural_type_systems"><span class="tocnumber">3.1</span> <span class="toctext">Comparison with structural type systems</span></a></li>
<li class="toclevel-2"><a href="#Comparison_with_interfaces"><span class="tocnumber">3.2</span> <span class="toctext">Comparison with interfaces</span></a></li>
<li class="toclevel-2"><a href="#Comparison_with_templates_or_generic_types"><span class="tocnumber">3.3</span> <span class="toctext">Comparison with templates or generic types</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Criticism"><span class="tocnumber">4</span> <span class="toctext">Criticism</span></a></li>
<li class="toclevel-1"><a href="#History"><span class="tocnumber">5</span> <span class="toctext">History</span></a></li>
<li class="toclevel-1"><a href="#Implementations"><span class="tocnumber">6</span> <span class="toctext">Implementations</span></a>
<ul>
<li class="toclevel-2"><a href="#In_ColdFusion"><span class="tocnumber">6.1</span> <span class="toctext">In ColdFusion</span></a></li>
<li class="toclevel-2"><a href="#In_Objective-C"><span class="tocnumber">6.2</span> <span class="toctext">In Objective-C</span></a></li>
<li class="toclevel-2"><a href="#In_Python"><span class="tocnumber">6.3</span> <span class="toctext">In Python</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">7</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">8</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Concept_example" id="Concept_example"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Duck_typing&amp;action=edit&amp;section=1" title="Edit section: Concept example">edit</a>]</span> <span class="mw-headline">Concept example</span></h2>
<p>Consider the following pseudo-code for a duck typed language:</p>
<pre>
<b>function</b> calculate(a, b, c) =&gt; <b>return</b> (a+b)*c

example1 = calculate (1, 2, 3)
example2 = calculate ([1, 2, 3], [4, 5, 6], 2)
example3 = calculate ('apples ', 'and oranges, ', 3)

<b>print</b> <b>to_string</b> example1
<b>print</b> <b>to_string</b> example2
<b>print</b> <b>to_string</b> example3
</pre>
<p>In the example, each time the <code>calculate</code> function is called, objects without related inheritance may be used (numbers, lists and strings). As long as the objects support the "+" and "*" methods, the operation will succeed. If translated to <a href="/wiki/Ruby_(programming_language)" title="Ruby (programming language)">Ruby</a> or <a href="/wiki/Python_(programming_language)" title="Python (programming language)">Python</a>, for example, the result of the code would be:</p>
<pre>
9
[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6]
apples and oranges, apples and oranges, apples and oranges, 
</pre>
<p>Thus, duck typing allows <a href="/wiki/Type_polymorphism" title="Type polymorphism">polymorphism</a> without <a href="/wiki/Inheritance_(computer_science)" title="Inheritance (computer science)">inheritance</a>. The only requirement that function <code>calculate</code> needs in its variables is having the "+" and the "*" methods. The duck test can be seen in the following example (in python). As far as the function <code>in_the_forest</code> is concerned, the object is a duck:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-python">
<span class="kw1">class</span> Duck:
        <span class="kw1">def</span> quack<span class="br0">(</span><span class="kw2">self</span><span class="br0">)</span>: <span class="kw1">print</span> <span class="st0">"Quaaaaaack!"</span>
        <span class="kw1">def</span> feathers<span class="br0">(</span><span class="kw2">self</span><span class="br0">)</span>: <span class="kw1">print</span> <span class="st0">"The duck has white and gray feathers."</span>
 
<span class="kw1">class</span> Person:
        <span class="kw1">def</span> quack<span class="br0">(</span><span class="kw2">self</span><span class="br0">)</span>: <span class="kw1">print</span> <span class="st0">"The person imitates a duck."</span>
        <span class="kw1">def</span> feathers<span class="br0">(</span><span class="kw2">self</span><span class="br0">)</span>: <span class="kw1">print</span> <span class="st0">"The person takes a feather from the ground and shows it."</span>
 
<span class="kw1">def</span> in_the_forest<span class="br0">(</span>duck<span class="br0">)</span>:
        duck.<span class="me1">quack</span><span class="br0">(</span><span class="br0">)</span>
        duck.<span class="me1">feathers</span><span class="br0">(</span><span class="br0">)</span>
 
<span class="kw1">def</span> game<span class="br0">(</span><span class="br0">)</span>:
        donald = Duck<span class="br0">(</span><span class="br0">)</span>
        john = Person<span class="br0">(</span><span class="br0">)</span>
        in_the_forest<span class="br0">(</span>donald<span class="br0">)</span>
        in_the_forest<span class="br0">(</span>john<span class="br0">)</span>
</pre></div>
<p><a name="In_mainly_static_languages" id="In_mainly_static_languages"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Duck_typing&amp;action=edit&amp;section=2" title="Edit section: In mainly static languages">edit</a>]</span> <span class="mw-headline">In mainly static languages</span></h2>
<p>Certain usually <a href="/wiki/Type_system#Static_typing" title="Type system">statically typed</a> languages such as <a href="/wiki/Boo_(programming_language)" title="Boo (programming language)">Boo</a> and the version 4 release of <a href="/wiki/C_Sharp_(programming_language)" title="C Sharp (programming language)">C#</a> have added extra type annotations<sup id="cite_ref-0" class="reference"><a href="#cite_note-0" title=""><span>[</span>1<span>]</span></a></sup><sup id="cite_ref-1" class="reference"><a href="#cite_note-1" title=""><span>[</span>2<span>]</span></a></sup> that instruct the compiler to arrange for type checking of the class to occur at run-time rather than the normal compile time checking, and include run-time type checking code in the compiled output. Such additions allow the language to enjoy most of the benefits of Duck Typing with the only drawback being the need to identify and specify such dynamic classes at compile time.</p>
<p><a name="Comparison_with_other_type_systems" id="Comparison_with_other_type_systems"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Duck_typing&amp;action=edit&amp;section=3" title="Edit section: Comparison with other type systems">edit</a>]</span> <span class="mw-headline">Comparison with other type systems</span></h2>
<p><a name="Comparison_with_structural_type_systems" id="Comparison_with_structural_type_systems"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Duck_typing&amp;action=edit&amp;section=4" title="Edit section: Comparison with structural type systems">edit</a>]</span> <span class="mw-headline">Comparison with structural type systems</span></h3>
<p>Duck typing is similar to but distinct from <a href="/wiki/Structural_typing" title="Structural typing" class="mw-redirect">structural typing</a>. Structural typing determines type compatibility and equivalence by a type's structure, whereas duck typing determines type compatibility <i>only by that part of a type's structure that is accessed during <a href="/wiki/Runtime" title="Runtime">run time</a></i>. The <a href="/wiki/Objective_Caml" title="Objective Caml">Objective Caml</a> programming language uses a structural type system.</p>
<p><a name="Comparison_with_interfaces" id="Comparison_with_interfaces"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Duck_typing&amp;action=edit&amp;section=5" title="Edit section: Comparison with interfaces">edit</a>]</span> <span class="mw-headline">Comparison with interfaces</span></h3>
<p><a href="/wiki/Interface_(computer_science)#Interfaces_in_practice" title="Interface (computer science)">Interfaces</a> can provide some of the benefits of duck typing but duck typing is distinct in that no explicit interface is defined. For example, if a third party Java library implements a class you are not allowed to modify, you cannot use an instance of the class in place of an interface you've defined yourself. Duck typing would allow this.</p>
<p><a name="Comparison_with_templates_or_generic_types" id="Comparison_with_templates_or_generic_types"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Duck_typing&amp;action=edit&amp;section=6" title="Edit section: Comparison with templates or generic types">edit</a>]</span> <span class="mw-headline">Comparison with templates or generic types</span></h3>
<p><a href="/wiki/Template_(programming)" title="Template (programming)">Template</a> functions or methods apply the duck test in a <a href="/wiki/Type_system#Static_typing" title="Type system">static typing</a> context; this brings all the advantages and disadvantages of <a href="/wiki/Type_system#Static_and_dynamic_type_checking_in_practice" title="Type system">static versus dynamic type checking</a> in general. Duck typing can also be more flexible in that only the methods <i>actually called at run time</i> need to be implemented, while templates require implementation of all methods that <i>cannot be proven <a href="/wiki/Unreachable_code" title="Unreachable code">unreachable</a> at compile time</i>.</p>
<p>Examples include the language C++ with templates, and the Java languages generics.</p>
<p><a name="Criticism" id="Criticism"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Duck_typing&amp;action=edit&amp;section=7" title="Edit section: Criticism">edit</a>]</span> <span class="mw-headline">Criticism</span></h2>
<p>An often cited criticism is this:</p>
<dl>
<dd>One issue with duck typing is that it forces the programmer to have a much wider understanding of the code he or she is working with at any given time. In a strongly and statically typed language that uses type hierarchies and parameter type checking, it's much harder to supply an unexpected object type to a class. For instance, in Python, you could easily create a class called Wine, which expects a class implementing the "press" attribute as an ingredient. However, a class called Trousers might also implement the press() method. With Duck Typing, in order to prevent strange, hard to detect errors, the developer needs to be aware of each potential use of the method "press", even when it's conceptually unrelated to what he or she is working on.</dd>
</dl>
<dl>
<dd>In essence, the problem is that, "if it walks like a duck and quacks like a duck", it could be a dragon doing a duck impersonation. You may not always want to let dragons into a pond, even if they can impersonate a duck.</dd>
</dl>
<p>In practice, the issue is equivalent to not mixing dissimilar objects for duck-typing and is handled almost transparently as part of the knowledge of the codebase required to maintain it<sup id="cite_ref-2" class="reference"><a href="#cite_note-2" title=""><span>[</span>3<span>]</span></a></sup><sup id="cite_ref-3" class="reference"><a href="#cite_note-3" title=""><span>[</span>4<span>]</span></a></sup>.</p>
<p>Criticisms around duck typing tend to be special cases of broader points of contention regarding <a href="/wiki/Type_system#Controversy" title="Type system">dynamically typed versus statically typed</a> programming language semantics.</p>
<p><a name="History" id="History"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Duck_typing&amp;action=edit&amp;section=8" title="Edit section: History">edit</a>]</span> <span class="mw-headline">History</span></h2>
<p><a href="/wiki/Alex_Martelli" title="Alex Martelli">Alex Martelli</a> made an early (2000) use of the term in a <a href="http://groups.google.com/group/comp.lang.python/msg/e230ca916be58835?hl=en&amp;" class="external text" title="http://groups.google.com/group/comp.lang.python/msg/e230ca916be58835?hl=en&amp;" rel="nofollow">message</a> to the comp.lang.python <a href="/wiki/Newsgroup" title="Newsgroup" class="mw-redirect">newsgroup</a>. He also highlighted misunderstanding of the literal duck test, which may indicate that the term was already in use.</p>
<dl>
<dd><i>In other words, don't check whether it IS-a duck: check whether it QUACKS-like-a duck, WALKS-like-a duck, etc, etc, depending on exactly what subset of duck-like behaviour you need to play your language-games with.</i></dd>
</dl>
<p><a name="Implementations" id="Implementations"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Duck_typing&amp;action=edit&amp;section=9" title="Edit section: Implementations">edit</a>]</span> <span class="mw-headline">Implementations</span></h2>
<p><a name="In_ColdFusion" id="In_ColdFusion"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Duck_typing&amp;action=edit&amp;section=10" title="Edit section: In ColdFusion">edit</a>]</span> <span class="mw-headline">In ColdFusion</span></h3>
<p>The web application scripting language <a href="/wiki/ColdFusion" title="ColdFusion">ColdFusion</a> allows function arguments to be specified as having type <i>any</i>. For this sort of argument, an arbitrary object can be passed in and method calls are bound dynamically at runtime. If an object does not implement a called method, a runtime exception is thrown which can be caught and handled gracefully. In ColdFusion 8, this can be picked up as a defined event onMissingMethod()rather than through an exception handler. An alternative argument type of <i>WEB-INF.cftags.component</i> restricts the passed argument to be a ColdFusion Component (CFC), which provides better error messages should a non-object be passed in.</p>
<p><a name="In_Objective-C" id="In_Objective-C"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Duck_typing&amp;action=edit&amp;section=11" title="Edit section: In Objective-C">edit</a>]</span> <span class="mw-headline">In Objective-C</span></h3>
<p><a href="/wiki/Objective-C" title="Objective-C">Objective-C</a>, a cross between C and Smalltalk, allows one to declare objects of type 'id' and send any message to them, like in Smalltalk. The sender can test an object to see if it responds to a message, the object can decide at the time of the message whether it will respond to it or not, and if the sender sends a message a recipient cannot respond to, an exception is raised. Thus, duck typing is fully supported by Objective-C.</p>
<p><a name="In_Python" id="In_Python"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Duck_typing&amp;action=edit&amp;section=12" title="Edit section: In Python">edit</a>]</span> <span class="mw-headline">In Python</span></h3>
<p>Duck typing is heavily used in <a href="/wiki/Python_(programming_language)" title="Python (programming language)">Python</a>. The <a href="http://docs.python.org/tut/node18.html#l2h-46" class="external text" title="http://docs.python.org/tut/node18.html#l2h-46" rel="nofollow">Python Tutorial's Glossary</a> defines duck typing as follows:</p>
<blockquote class="toccolours" style="float:none; padding: 10px 15px 10px 15px; display:table;">
<p>Pythonic programming style that determines an object's type by inspection of its method or attribute signature rather than by explicit relationship to some type object ("If it looks like a duck and quacks like a duck, it must be a duck.") By emphasizing interfaces rather than specific types, well-designed code improves its flexibility by allowing polymorphic substitution. Duck-typing avoids tests using <code>type()</code> or <code>isinstance()</code>. Instead, it typically employs the <i><a href="/wiki/Python_syntax_and_semantics#Exceptions" title="Python syntax and semantics">EAFP</a></i> (Easier to Ask Forgiveness than Permission) style of programming.</p>
</blockquote>
<p>The standard example of duck typing in Python is file-like classes. Classes can implement some or all of the methods of <code>file</code> and can be used where <code>file</code> would normally be used. For example, <a href="http://docs.python.org/lib/module-gzip.html" class="external text" title="http://docs.python.org/lib/module-gzip.html" rel="nofollow"><code>GzipFile</code></a> implements a file-like object for accessing <a href="/wiki/Gzip" title="Gzip">gzip</a>-compressed data. <a href="http://docs.python.org/lib/module-cStringIO.html" class="external text" title="http://docs.python.org/lib/module-cStringIO.html" rel="nofollow"><code>cStringIO</code></a> allows treating a Python string as a file. Sockets and files share many of the same methods as well. However, sockets lack the <a href="http://diveintopython.org/http_web_services/gzip_compression.html#d0e29389" class="external text" title="http://diveintopython.org/http_web_services/gzip_compression.html#d0e29389" rel="nofollow"><code>tell()</code> method</a> and cannot be used everywhere that <code>GzipFile</code> can be used. This shows the flexibility of duck typing: a file-like object can implement only methods it is able to, and consequently it can only be used in situations where it makes sense.</p>
<p>The <a href="/wiki/Python_syntax_and_semantics#Exceptions" title="Python syntax and semantics">EAFP</a> principle describes the use of <a href="/wiki/Exception_handling" title="Exception handling">exception handling</a>. For example instead of checking to see if some purportedly Duck-like object has a <i>quack()</i> method (using <code>if hasattr(mallard, "quack"): ...</code>) it's usually preferable to wrap the attempted quacking with exception handling</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-python">
<span class="kw1">try</span>: 
    mallard.<span class="me1">quack</span><span class="br0">(</span><span class="br0">)</span> 
<span class="kw1">except</span> <span class="br0">(</span><span class="kw2">AttributeError</span>, <span class="kw2">TypeError</span><span class="br0">)</span>:
    <span class="kw1">print</span> &gt;&gt; <span class="kw3">sys</span>.<span class="me1">stderr</span> <span class="st0">"mallard can't quack()"</span><span class="st0">''</span><span class="br0">)</span>
</pre></div>
<p>Advantages of this approach are that it encourages the structured handling of other classes of errors (so, for example, a mute Duck subclass could raise a "QuackException" which can be added to the wrapper without delving more deeply into the logic of the code, and it handles situations where different classes of objects might have naming collisions for incompatible members (for example, Mallard the purported medical professional might have a boolean attribute which classifies him as a "quack=True"; an attempt to perform Mallard.quack() would raise a TypeError).</p>
<p>In the more practical examples of classes which implement file-like behavior the use of Python's exception handling facilities is generally preferred for handling a wide variety of I/O errors that can occur due to numerous environmental and <a href="/wiki/Operating_system" title="Operating system">operating system</a> issues that are outside of the programmer's control. Here again the "duck typing" exceptions can be caught in their own clauses alongside the OS, I/O or other possible errors without complicated testing and error checking logic.</p>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Duck_typing&amp;action=edit&amp;section=13" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<div class="references-small">
<ol class="references">
<li id="cite_note-0"><b><a href="#cite_ref-0" title="">^</a></b> <a href="http://boo.codehaus.org/Duck+Typing" class="external text" title="http://boo.codehaus.org/Duck+Typing" rel="nofollow">Boo: Duck Typing</a></li>
<li id="cite_note-1"><b><a href="#cite_ref-1" title="">^</a></b> <a href="http://blogs.msdn.com/ericwhite/archive/2008/10/29/anders-hejlsberg-introduces-c-4-0-at-pdc-2008.aspx" class="external text" title="http://blogs.msdn.com/ericwhite/archive/2008/10/29/anders-hejlsberg-introduces-c-4-0-at-pdc-2008.aspx" rel="nofollow">Anders Hejlsberg Introduces C# 4.0 at PDC 2008</a></li>
<li id="cite_note-2"><b><a href="#cite_ref-2" title="">^</a></b> <cite style="font-style:normal" class="web" id="CITEREFBruce_Eckel">Bruce Eckel. <a href="http://mindview.net/WebLog/log-0025" class="external text" title="http://mindview.net/WebLog/log-0025" rel="nofollow">"Strong Typing vs. Strong Testing"</a>. mindview<span class="printonly">. <a href="http://mindview.net/WebLog/log-0025" class="external free" title="http://mindview.net/WebLog/log-0025" rel="nofollow">http://mindview.net/WebLog/log-0025</a></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Strong+Typing+vs.+Strong+Testing&amp;rft.atitle=&amp;rft.aulast=Bruce+Eckel&amp;rft.au=Bruce+Eckel&amp;rft.pub=mindview&amp;rft_id=http%3A%2F%2Fmindview.net%2FWebLog%2Flog-0025&amp;rfr_id=info:sid/en.wikipedia.org:Duck_typing"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-3"><b><a href="#cite_ref-3" title="">^</a></b> <cite style="font-style:normal" class="web" id="CITEREFBill_Venners">Bill Venners. <a href="http://www.artima.com/intv/pycontract.html" class="external text" title="http://www.artima.com/intv/pycontract.html" rel="nofollow">"Contracts in Python. A Conversation with Guido van Rossum, Part IV"</a>. Artima<span class="printonly">. <a href="http://www.artima.com/intv/pycontract.html" class="external free" title="http://www.artima.com/intv/pycontract.html" rel="nofollow">http://www.artima.com/intv/pycontract.html</a></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Contracts+in+Python.+A+Conversation+with+Guido+van+Rossum%2C+Part+IV&amp;rft.atitle=&amp;rft.aulast=Bill+Venners&amp;rft.au=Bill+Venners&amp;rft.pub=Artima&amp;rft_id=http%3A%2F%2Fwww.artima.com%2Fintv%2Fpycontract.html&amp;rfr_id=info:sid/en.wikipedia.org:Duck_typing"><span style="display: none;">&#160;</span></span></li>
</ol>
</div>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Duck_typing&amp;action=edit&amp;section=14" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<ul>
<li><a href="http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/78502" class="external text" title="http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/78502" rel="nofollow">Duck Typing: Ruby</a></li>
<li><a href="http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/100511" class="external text" title="http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/100511" rel="nofollow">How to duck type? - the psychology of static typing in Ruby</a></li>
<li><a href="http://docs.python.org/tut/node18.html#l2h-46" class="external text" title="http://docs.python.org/tut/node18.html#l2h-46" rel="nofollow">Python documentation glossary entry on duck-typing</a></li>
<li><a href="http://www.ddj.com/cpp/184401971" class="external text" title="http://www.ddj.com/cpp/184401971" rel="nofollow">Dr. Dobbs June 01 2005: "Templates and Duck Typing"</a></li>
<li><a href="http://bigdingus.com/2007/12/08/just-what-is-this-javascript-object-you-handed-me/" class="external text" title="http://bigdingus.com/2007/12/08/just-what-is-this-javascript-object-you-handed-me/" rel="nofollow">Javascript 'typeof' limitations and duck typing</a></li>
<li><a href="http://blog.dhananjaynene.com/2008/09/python-from-java-how-duck-typing-influences-class-design-and-design-principles/" class="external text" title="http://blog.dhananjaynene.com/2008/09/python-from-java-how-duck-typing-influences-class-design-and-design-principles/" rel="nofollow">Python from a Java perspective - Part 2 - How duck typing influences class design and design principles</a></li>
<li><a href="http://duckapter.googlecode.com" class="external text" title="http://duckapter.googlecode.com" rel="nofollow">Duckapter - Duck typing support for Java</a></li>
</ul>


<!-- 
NewPP limit report
Preprocessor node count: 915/1000000
Post-expand include size: 6164/2048000 bytes
Template argument size: 2602/2048000 bytes
Expensive parser function count: 0/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:440018-0!1!0!default!!en!2 and timestamp 20090413054612 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Duck_typing">http://en.wikipedia.org/wiki/Duck_typing</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Object-oriented_programming" title="Category:Object-oriented programming">Object-oriented programming</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_example_pseudocode" title="Category:Articles with example pseudocode">Articles with example pseudocode</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_example_Python_code" title="Category:Articles with example Python code">Articles with example Python code</a></span> | <span dir='ltr'><a href="/wiki/Category:Type_theory" title="Category:Type theory">Type theory</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Duck_typing" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Duck_typing" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Duck_typing&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Duck_typing&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Duck_typing" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Duck_typing" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Duck_typing" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Duck_typing&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Duck_typing&amp;oldid=283510998" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Duck_typing&amp;id=283510998">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/Duck-Typing">Deutsch</a></li>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Duck_typing">Français</a></li>
				<li class="interwiki-gl"><a href="http://gl.wikipedia.org/wiki/Tipado_Pato">Galego</a></li>
				<li class="interwiki-ko"><a href="http://ko.wikipedia.org/wiki/%EB%8D%95_%ED%83%80%EC%9D%B4%ED%95%91">한국어</a></li>
				<li class="interwiki-nl"><a href="http://nl.wikipedia.org/wiki/Duck-typing">Nederlands</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/%E3%83%80%E3%83%83%E3%82%AF%E3%83%BB%E3%82%BF%E3%82%A4%E3%83%94%E3%83%B3%E3%82%B0">日本語</a></li>
				<li class="interwiki-pl"><a href="http://pl.wikipedia.org/wiki/Duck_typing">Polski</a></li>
				<li class="interwiki-ru"><a href="http://ru.wikipedia.org/wiki/%D0%A3%D1%82%D0%B8%D0%BD%D0%B0%D1%8F_%D1%82%D0%B8%D0%BF%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F">Русский</a></li>
				<li class="interwiki-zh"><a href="http://zh.wikipedia.org/wiki/Duck_typing">中文</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 13 April 2009, at 05:46 (UTC).</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv70 in 0.064 secs. --></body></html>
