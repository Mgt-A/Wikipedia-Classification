<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Generic programming,Articles with unsourced statements since March 2009,Programming paradigms,AaPOV,.NET Framework,Abductive logic programming,Ada (programming language),Ada programming language,Algorithm,Array programming,Aspect-oriented programming" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Generic_programming&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Generic_programming&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Generic programming - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Generic_programming";
		var wgTitle = "Generic programming";
		var wgAction = "view";
		var wgArticleId = "105837";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281479428;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
<style type="text/css">/*<![CDATA[*/
.source-cpp {line-height: normal;}
.source-cpp li, .source-cpp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for cpp
 * CSS class: source-cpp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-cpp .de1, .source-cpp .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-cpp  {}
.source-cpp .head {}
.source-cpp .foot {}
.source-cpp .imp {font-weight: bold; color: red;}
.source-cpp .ln-xtra {color: #cc0; background-color: #ffc;}
.source-cpp li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-cpp li.li2 {font-weight: bold;}
.source-cpp .kw1 {color: #0000ff;}
.source-cpp .kw2 {color: #0000ff;}
.source-cpp .kw3 {color: #0000dd;}
.source-cpp .kw4 {color: #0000ff;}
.source-cpp .co1 {color: #ff0000;}
.source-cpp .co2 {color: #339900;}
.source-cpp .coMULTI {color: #ff0000; font-style: italic;}
.source-cpp .es0 {color: #666666; font-weight: bold;}
.source-cpp .br0 {color: #000000;}
.source-cpp .st0 {color: #666666;}
.source-cpp .nu0 {color: #0000dd;}
.source-cpp .me1 {color: #00eeff;}
.source-cpp .me2 {color: #00eeff;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-python {line-height: normal;}
.source-python li, .source-python pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for python
 * CSS class: source-python, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-python .de1, .source-python .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-python  {}
.source-python .head {}
.source-python .foot {}
.source-python .imp {font-weight: bold; color: red;}
.source-python .ln-xtra {color: #cc0; background-color: #ffc;}
.source-python li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-python li.li2 {font-weight: bold;}
.source-python .kw1 {color: #ff7700;font-weight:bold;}
.source-python .kw2 {color: #008000;}
.source-python .kw3 {color: #dc143c;}
.source-python .kw4 {color: #0000cd;}
.source-python .co1 {color: #808080; font-style: italic;}
.source-python .coMULTI {color: #808080; font-style: italic;}
.source-python .es0 {color: #000099; font-weight: bold;}
.source-python .br0 {color: #66cc66;}
.source-python .st0 {color: #483d8b;}
.source-python .nu0 {color: #ff4500;}
.source-python .me1 {color: black;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-ada {line-height: normal;}
.source-ada li, .source-ada pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for ada
 * CSS class: source-ada, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-ada .de1, .source-ada .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-ada  {}
.source-ada .head {}
.source-ada .foot {}
.source-ada .imp {font-weight: bold; color: red;}
.source-ada .ln-xtra {color: #cc0; background-color: #ffc;}
.source-ada li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-ada li.li2 {font-weight: bold;}
.source-ada .kw1 {color: #00007f;}
.source-ada .kw2 {color: #0000ff;}
.source-ada .kw3 {color: #46aa03; font-weight:bold;}
.source-ada .co1 {color: #adadad; font-style: italic;}
.source-ada .coMULTI {color: #808080; font-style: italic;}
.source-ada .es0 {color: #000099; font-weight: bold;}
.source-ada .br0 {color: #66cc66;}
.source-ada .st0 {color: #7f007f;}
.source-ada .nu0 {color: #ff0000;}
.source-ada .me1 {color: #202020;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-csharp {line-height: normal;}
.source-csharp li, .source-csharp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for csharp
 * CSS class: source-csharp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-csharp .de1, .source-csharp .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-csharp  {}
.source-csharp .head {}
.source-csharp .foot {}
.source-csharp .imp {font-weight: bold; color: red;}
.source-csharp .ln-xtra {color: #cc0; background-color: #ffc;}
.source-csharp li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-csharp li.li2 {font-weight: bold;}
.source-csharp .kw1 {color: #0600FF;}
.source-csharp .kw2 {color: #FF8000; font-weight: bold;}
.source-csharp .kw3 {color: #008000;}
.source-csharp .kw4 {color: #FF0000;}
.source-csharp .kw5 {color: #000000;}
.source-csharp .co1 {color: #008080; font-style: italic;}
.source-csharp .co2 {color: #008080;}
.source-csharp .coMULTI {color: #008080; font-style: italic;}
.source-csharp .es0 {color: #008080; font-weight: bold;}
.source-csharp .br0 {color: #008000;}
.source-csharp .st0 {color: #808080;}
.source-csharp .nu0 {color: #FF0000;}
.source-csharp .me1 {color: #0000FF;}
.source-csharp .me2 {color: #0000FF;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-scheme {line-height: normal;}
.source-scheme li, .source-scheme pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for scheme
 * CSS class: source-scheme, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-scheme .de1, .source-scheme .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-scheme  {}
.source-scheme .head {}
.source-scheme .foot {}
.source-scheme .imp {font-weight: bold; color: red;}
.source-scheme .ln-xtra {color: #cc0; background-color: #ffc;}
.source-scheme li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-scheme li.li2 {font-weight: bold;}
.source-scheme .kw1 {color: #b1b100;}
.source-scheme .co1 {color: #808080; font-style: italic;}
.source-scheme .coMULTI {color: #808080; font-style: italic;}
.source-scheme .es0 {color: #000099; font-weight: bold;}
.source-scheme .br0 {color: #66cc66;}
.source-scheme .st0 {color: #ff0000;}
.source-scheme .nu0 {color: #cc66cc;}
.source-scheme .me0 {color: #202020;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style>		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Generic_programming skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Generic programming</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<p><a href="/w/index.php?title=Template:AaPOV&amp;action=edit&amp;redlink=1" class="new" title="Template:AaPOV (page does not exist)">Template:AaPOV</a></p>
<table class="navbox" style="float:right; background-color:rgb(248,248,255); clear:right; margin: 1ex 0 0.5em 1em; width: 20em">
<tr>
<th><a href="/wiki/Programming_paradigm" title="Programming paradigm">Programming paradigms</a></th>
</tr>
<tr>
<td style="text-align:left">
<ul>
<li><a href="/wiki/Software_agent" title="Software agent">Agent-oriented</a></li>
<li><a href="/wiki/Component-based_software_engineering" title="Component-based software engineering">Component-based</a>
<ul>
<li><a href="/wiki/Flow-based_programming" title="Flow-based programming">Flow-based</a></li>
<li><a href="/wiki/Pipeline_programming" title="Pipeline programming">Pipeline</a></li>
</ul>
</li>
<li><a href="/wiki/Concatenative_programming_language" title="Concatenative programming language">Concatenative</a></li>
<li><a href="/wiki/Concurrent_computing" title="Concurrent computing">Concurrent computing</a></li>
<li><a href="/w/index.php?title=Context-oriented_programming&amp;action=edit&amp;redlink=1" class="new" title="Context-oriented programming (page does not exist)">Context-oriented</a></li>
<li><a href="/wiki/Declarative_programming" title="Declarative programming">Declarative</a> (Contrast: <a href="/wiki/Imperative_programming" title="Imperative programming">Imperative</a>)
<ul>
<li><a href="/wiki/Functional_programming" title="Functional programming">Functional</a>
<ul>
<li><a href="/wiki/Dataflow" title="Dataflow">Dataflow</a>
<ul>
<li><a href="/wiki/Spreadsheet" title="Spreadsheet">Cell-oriented (spreadsheets)</a></li>
<li><a href="/wiki/Reactive_programming" title="Reactive programming">Reactive</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="/w/index.php?title=Goal-directed_programming&amp;action=edit&amp;redlink=1" class="new" title="Goal-directed programming (page does not exist)">Goal-directed</a>
<ul>
<li><a href="/wiki/Constraint_programming" title="Constraint programming">Constraint</a></li>
<li><a href="/wiki/Constraint_logic_programming" title="Constraint logic programming">Constraint logic</a></li>
<li><a href="/wiki/Logic_programming" title="Logic programming">Logic</a>
<ul>
<li><a href="/wiki/Abductive_logic_programming" title="Abductive logic programming">Abductive logic</a></li>
<li><a href="/wiki/Inductive_logic_programming" title="Inductive logic programming">Inductive logic</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><a href="/wiki/Event-driven_programming" title="Event-driven programming">Event-driven</a></li>
<li><a href="/wiki/Feature_Oriented_Programming" title="Feature Oriented Programming">Feature-oriented</a></li>
<li><a href="/wiki/Function-level_programming" title="Function-level programming">Function-level</a> (Contrast: <a href="/wiki/Value-level_programming" title="Value-level programming">Value-level</a>)</li>
<li><a href="/wiki/Imperative_programming" title="Imperative programming">Imperative</a> (Contrast: <a href="/wiki/Declarative_programming" title="Declarative programming">Declarative</a>)
<ul>
<li>Advanced separation of concerns
<ul>
<li><a href="/wiki/Aspect-oriented_programming" title="Aspect-oriented programming">Aspect-oriented</a></li>
<li><a href="/wiki/Subject-oriented_programming" title="Subject-oriented programming">Subject-oriented</a></li>
</ul>
</li>
<li><a href="/wiki/Array_programming" title="Array programming">Array</a> (Contrast: <a href="/wiki/Scalar_programming" title="Scalar programming">Scalar</a>)</li>
<li><a href="/wiki/Automata-based_programming" title="Automata-based programming">Automata-based</a></li>
<li><a href="/wiki/Object-oriented_programming" title="Object-oriented programming">Object-oriented</a>
<ul>
<li><a href="/wiki/Class-based_programming" title="Class-based programming">Class-based</a></li>
<li><a href="/wiki/Prototype-based_programming" title="Prototype-based programming">Prototype-based</a></li>
</ul>
</li>
<li><a href="/wiki/Procedural_programming" title="Procedural programming">Procedural</a>
<ul>
<li><a href="/wiki/Structured_programming" title="Structured programming">Structured</a></li>
</ul>
</li>
<li><a href="/wiki/Role-oriented_programming" title="Role-oriented programming">Role-oriented</a></li>
<li><a href="/wiki/Scalar_programming" title="Scalar programming">Scalar</a> (Contrast: <a href="/wiki/Array_programming" title="Array programming">Array</a>)</li>
</ul>
</li>
<li><a href="/wiki/Iteration" title="Iteration">Iterative</a> (Contrast: <a href="/wiki/Recursion_(computer_science)" title="Recursion (computer science)">Recursive</a>)</li>
<li><a href="/wiki/Metaprogramming" title="Metaprogramming">Metaprogramming</a>
<ul>
<li><a href="/wiki/Attribute-Oriented_Programming" title="Attribute-Oriented Programming">Attribute-oriented</a></li>
<li><a href="/wiki/Automatic_programming" title="Automatic programming">Automatic</a>
<ul>
<li><strong class="selflink">Generic</strong>
<ul>
<li><a href="/wiki/Template_metaprogramming" title="Template metaprogramming">Template</a>
<ul>
<li><a href="/wiki/Policy-based_design" title="Policy-based design">Policy-based</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="/wiki/Language-oriented_programming" title="Language-oriented programming">Language-oriented</a>
<ul>
<li><a href="/wiki/Grammar-oriented_programming" title="Grammar-oriented programming">Grammar-oriented</a>
<ul>
<li><a href="/wiki/Dialecting" title="Dialecting">Dialecting</a></li>
</ul>
</li>
<li><a href="/wiki/Intentional_programming" title="Intentional programming">Intentional</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="/wiki/Reflection_(computer_science)" title="Reflection (computer science)">Reflective</a></li>
</ul>
</li>
<li><a href="/wiki/Modular_programming" title="Modular programming">Modular</a></li>
<li><a href="/wiki/Nondeterministic_programming" title="Nondeterministic programming">Nondeterministic</a></li>
<li><a href="/wiki/Parallel_computing" title="Parallel computing">Parallel computing</a>
<ul>
<li><a href="/wiki/Process-oriented_programming" title="Process-oriented programming">Process-oriented</a></li>
</ul>
</li>
<li><a href="/wiki/Programming_in_the_large_and_programming_in_the_small" title="Programming in the large and programming in the small">Programming in the large and programming in the small</a></li>
<li><a href="/wiki/Recursion_(computer_science)" title="Recursion (computer science)">Recursive</a> (Contrast: <a href="/wiki/Iteration" title="Iteration">Iterative</a>)</li>
<li><a href="/wiki/Tree_programming" title="Tree programming">Tree</a></li>
<li><a href="/wiki/Value-level_programming" title="Value-level programming">Value-level</a> (Contrast: <a href="/wiki/Function-level_programming" title="Function-level programming">Function-level</a>)</li>
</ul>
<hr />
<div class="noprint plainlinksneverexpand navbar" style="background:none; padding:0; font-weight:normal;; font-size:xx-small; text-align:center;">This box: <a href="/wiki/Template:Programming_paradigms" title="Template:Programming paradigms"><span title="View this template" style="">view</span></a>&#160;•&#160;<a href="/wiki/Template_talk:Programming_paradigms" title="Template talk:Programming paradigms"><span title="Discussion about this template" style="">talk</span></a>&#160;•&#160;<a href="http://en.wikipedia.org/w/index.php?title=Template:Programming_paradigms&amp;action=edit" class="external text" title="http://en.wikipedia.org/w/index.php?title=Template:Programming_paradigms&amp;action=edit" rel="nofollow"><span title="Edit this template" style=";">edit</span></a></div>
</td>
</tr>
</table>
<p><b>Generic programming</b> is a style of <a href="/wiki/Computer_programming" title="Computer programming">computer programming</a> in which algorithms are written in terms of <i>to-be-specified-later</i> types that are then <i>instantiated</i> when needed for specific types provided as parameters and was pioneered by <a href="/wiki/Ada_(programming_language)" title="Ada (programming language)">Ada</a> which appeared in 1983. This approach permits writing common <a href="/wiki/Function_(computer_science)" title="Function (computer science)" class="mw-redirect">functions</a> or <a href="/wiki/Type_(computer_science)" title="Type (computer science)" class="mw-redirect">types</a> that differ only in the set of types on which they operate when used, thus reducing <a href="/wiki/Duplicate_code" title="Duplicate code">duplication</a>. Software entities created using generic programming are known as <i>generics</i> in Ada, <a href="/wiki/Eiffel_(programming_language)" title="Eiffel (programming language)">Eiffel</a>, <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a>, <a href="/wiki/C_Sharp_(programming_language)" title="C Sharp (programming language)">C#</a>, <a href="/wiki/Visual_Basic_.NET" title="Visual Basic .NET">Visual Basic .NET</a> and <a href="/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell</a>; <i><a href="/wiki/Template_(programming)" title="Template (programming)">templates</a></i> in <a href="/wiki/C%2B%2B" title="C++">C++</a>; and <i>parameterized types</i> in the influential 1994 book <i><a href="/wiki/Design_Patterns_(book)" title="Design Patterns (book)">Design Patterns</a></i>. The authors of <i>Design Patterns</i> note that this technique, especially when combined with <a href="/wiki/Delegation_(programming)" title="Delegation (programming)">delegation</a>, is very powerful but that "Dynamic, highly parameterized software is harder to understand than more static software." (<a href="/wiki/Gang_of_Four_(software)" title="Gang of Four (software)" class="mw-redirect">Gang of Four</a> 1995:21)</p>
<p>Generic programming refers to features of certain <a href="/wiki/Static_typing" title="Static typing" class="mw-redirect">statically typed</a> <a href="/wiki/Programming_languages" title="Programming languages" class="mw-redirect">programming languages</a> that allow some code to effectively circumvent the static typing requirements. For instance in C++, a template is a routine in which some parameters are qualified by a type variable. Since code generation in C++ depends on concrete types, the template is specialized for each combination of argument types that occur in practice. Generic programming is commonly used to implement <a href="/wiki/Container_(data_structure)" title="Container (data structure)">containers</a> such as <a href="/wiki/List_(computing)" title="List (computing)">lists</a> and <a href="/wiki/Hash_table" title="Hash table">hash tables</a> and <a href="/wiki/Function_(computer_science)" title="Function (computer science)" class="mw-redirect">functions</a> such as a particular <a href="/wiki/Sorting_algorithm" title="Sorting algorithm">sorting algorithm</a> for objects specified in terms more general than a concrete <a href="/wiki/Type_(computer_science)" title="Type (computer science)" class="mw-redirect">type</a>.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Programming_language_support_for_generic_programming"><span class="tocnumber">1</span> <span class="toctext">Programming language support for generic programming</span></a>
<ul>
<li class="toclevel-2"><a href="#Generic_programming_in_object-oriented_languages"><span class="tocnumber">1.1</span> <span class="toctext">Generic programming in object-oriented languages</span></a>
<ul>
<li class="toclevel-3"><a href="#Generics_in_Ada"><span class="tocnumber">1.1.1</span> <span class="toctext">Generics in Ada</span></a>
<ul>
<li class="toclevel-4"><a href="#Ada_example"><span class="tocnumber">1.1.1.1</span> <span class="toctext">Ada example</span></a></li>
<li class="toclevel-4"><a href="#Advantages_and_limitations"><span class="tocnumber">1.1.1.2</span> <span class="toctext">Advantages and limitations</span></a></li>
</ul>
</li>
<li class="toclevel-3"><a href="#Templates_in_C.2B.2B"><span class="tocnumber">1.1.2</span> <span class="toctext">Templates in C++</span></a>
<ul>
<li class="toclevel-4"><a href="#Technical_overview"><span class="tocnumber">1.1.2.1</span> <span class="toctext">Technical overview</span></a></li>
<li class="toclevel-4"><a href="#Template_specialization"><span class="tocnumber">1.1.2.2</span> <span class="toctext">Template specialization</span></a></li>
<li class="toclevel-4"><a href="#Advantages_and_disadvantages"><span class="tocnumber">1.1.2.3</span> <span class="toctext">Advantages and disadvantages</span></a></li>
</ul>
</li>
<li class="toclevel-3"><a href="#Templates_in_D"><span class="tocnumber">1.1.3</span> <span class="toctext">Templates in D</span></a>
<ul>
<li class="toclevel-4"><a href="#Static-if"><span class="tocnumber">1.1.3.1</span> <span class="toctext">Static-if</span></a></li>
<li class="toclevel-4"><a href="#Alias_parameters"><span class="tocnumber">1.1.3.2</span> <span class="toctext">Alias parameters</span></a></li>
</ul>
</li>
<li class="toclevel-3"><a href="#Generics_in_Java"><span class="tocnumber">1.1.4</span> <span class="toctext">Generics in Java</span></a></li>
<li class="toclevel-3"><a href="#Generic_programming_in_C.23_and_.NET"><span class="tocnumber">1.1.5</span> <span class="toctext">Generic programming in C# and .NET</span></a></li>
<li class="toclevel-3"><a href="#Generic_programming_in_Delphi"><span class="tocnumber">1.1.6</span> <span class="toctext">Generic programming in Delphi</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#Generic_programming_in_Functional_languages"><span class="tocnumber">1.2</span> <span class="toctext">Generic programming in Functional languages</span></a>
<ul>
<li class="toclevel-3"><a href="#Generic_programming_in_Haskell"><span class="tocnumber">1.2.1</span> <span class="toctext">Generic programming in Haskell</span></a>
<ul>
<li class="toclevel-4"><a href="#PolyP"><span class="tocnumber">1.2.1.1</span> <span class="toctext">PolyP</span></a></li>
<li class="toclevel-4"><a href="#Generic_Haskell"><span class="tocnumber">1.2.1.2</span> <span class="toctext">Generic Haskell</span></a></li>
<li class="toclevel-4"><a href="#The_.22Scrap_your_boilerplate.22_approach"><span class="tocnumber">1.2.1.3</span> <span class="toctext">The "Scrap your boilerplate" approach</span></a></li>
</ul>
</li>
<li class="toclevel-3"><a href="#Clean"><span class="tocnumber">1.2.2</span> <span class="toctext">Clean</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#Generic_programming_features_in_other_languages"><span class="tocnumber">1.3</span> <span class="toctext">Generic programming features in other languages</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">2</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#External_links_and_references"><span class="tocnumber">3</span> <span class="toctext">External links and references</span></a>
<ul>
<li class="toclevel-2"><a href="#General"><span class="tocnumber">3.1</span> <span class="toctext">General</span></a></li>
<li class="toclevel-2"><a href="#C.2B.2B.2FD"><span class="tocnumber">3.2</span> <span class="toctext">C++/D</span></a></li>
<li class="toclevel-2"><a href="#C.23.2F.NET"><span class="tocnumber">3.3</span> <span class="toctext">C#/.NET</span></a></li>
<li class="toclevel-2"><a href="#Delphi"><span class="tocnumber">3.4</span> <span class="toctext">Delphi</span></a></li>
<li class="toclevel-2"><a href="#Haskell.2Ffunctional"><span class="tocnumber">3.5</span> <span class="toctext">Haskell/functional</span></a></li>
<li class="toclevel-2"><a href="#Java"><span class="tocnumber">3.6</span> <span class="toctext">Java</span></a></li>
<li class="toclevel-2"><a href="#Object_Pascal"><span class="tocnumber">3.7</span> <span class="toctext">Object Pascal</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Notes"><span class="tocnumber">4</span> <span class="toctext">Notes</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Programming_language_support_for_generic_programming" id="Programming_language_support_for_generic_programming"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=1" title="Edit section: Programming language support for generic programming">edit</a>]</span> <span class="mw-headline">Programming language support for generic programming</span></h2>
<p>Generic programming facilities first appeared in the 1970s in languages like <a href="/wiki/CLU_programming_language" title="CLU programming language" class="mw-redirect">CLU</a> and <a href="/wiki/Ada_programming_language" title="Ada programming language" class="mw-redirect">Ada</a>, and were subsequently adopted by many <a href="/wiki/Object-based_programming" title="Object-based programming" class="mw-redirect">object-based</a> and <a href="/wiki/Object-oriented_programming" title="Object-oriented programming">object-oriented</a> languages, including <a href="/wiki/BETA_programming_language" title="BETA programming language" class="mw-redirect">BETA</a>, <a href="/wiki/C%2B%2B" title="C++">C++</a>, <a href="/wiki/D_programming_language" title="D programming language" class="mw-redirect">D</a>, <a href="/wiki/Eiffel_(programming_language)" title="Eiffel (programming language)">Eiffel</a>, <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a>, and <a href="/wiki/DEC" title="DEC" class="mw-redirect">DEC</a>'s now defunct <a href="/w/index.php?title=Trellis-Owl&amp;action=edit&amp;redlink=1" class="new" title="Trellis-Owl (page does not exist)">Trellis-Owl</a> language. Implementations of generics in languages such as <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a> and <a href="/wiki/C_Sharp_(programming_language)" title="C Sharp (programming language)">C#</a> are formally based on the notion of <a href="/wiki/Parametricity" title="Parametricity">parametricity</a>, due to <a href="/wiki/John_C._Reynolds" title="John C. Reynolds">John C. Reynolds</a>. Software entities created using generic programming are known as <i>generics</i> in Ada, Eiffel, Java, C#, VB .NET and Haskell; <i>templates</i> in C++; and <i>parameterized types</i> in <a href="/wiki/Design_Patterns_(book)" title="Design Patterns (book)">Design Patterns</a>.</p>
<p>Generic programming is implemented and supported differently within each language. The term "generic" has also been used differently in programming contexts. For example, in <a href="/wiki/Forth_(programming_language)" title="Forth (programming language)">Forth</a> the compiler can execute code while compiling and one can create new <i>compiler keywords</i> and new implementations for those words on the fly. It has few <i>words</i> that expose the compiler behaviour and therefore naturally offers <i>generic programming</i> capacities which, however, are not referred to as such in most Forth texts. The term has been used in <a href="/wiki/Functional_programming" title="Functional programming">functional programming</a>, specifically in <a href="/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell-like</a> languages, which use a <a href="/wiki/Structural_type_system" title="Structural type system">structural type system</a> where types are always parametric and the actual code on those types is generic. In these uses <i>generic programming</i> still serves the similar purpose of code-saving and the rendering of an abstraction.</p>
<p><a name="Generic_programming_in_object-oriented_languages" id="Generic_programming_in_object-oriented_languages"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=2" title="Edit section: Generic programming in object-oriented languages">edit</a>]</span> <span class="mw-headline">Generic programming in object-oriented languages</span></h3>
<p>When creating containers of objects it is possible to write specific implementations for each datatype contained, even if the code is virtually identical except for different datatypes. In C++, this duplication of code can be circumvented by defining a template class:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
template&lt;typename T&gt; 
<span class="kw2">class</span> List 
<span class="br0">{</span> 
   <span class="coMULTI">/* class contents */</span> 
<span class="br0">}</span>;
 
List&lt;Animal&gt; list_of_animals;
List&lt;Car&gt; list_of_cars;
</pre></div>
<p>Above, <tt>T</tt> is a placeholder for whatever type is specified when the list is created. These "containers-of-type-T", commonly called <b>generics</b>, are a generic programming technique allowing a class to be reused with different datatypes as long as certain contracts such as <a href="/wiki/Subtype" title="Subtype">subtypes</a> and <a href="/wiki/Signature_(computer_science)" title="Signature (computer science)">signature</a> are kept. Generic programming should not to be confused with <i><a href="/wiki/Polymorphism_(computer_science)" title="Polymorphism (computer science)" class="mw-redirect">inclusion polymorphism</a></i>, which is the <a href="/wiki/Algorithm" title="Algorithm">algorithmic</a> usage of exchangeable sub-classes: for instance, a list of objects of type <tt>Moving_Object</tt> containing objects of type <tt>Animal</tt> and <tt>Car</tt>. Generics can also be used for type-independent functions as in the <code>Swap</code> example below:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
template&lt;typename T&gt;
<span class="kw4">void</span> Swap<span class="br0">(</span>T &amp; a, T &amp; b<span class="br0">)</span> <span class="co1">//"&amp;" passes parameters by reference</span>
<span class="br0">{</span>
   T temp = b;
   b = a;
   a = temp;
<span class="br0">}</span>
 
string hello = <span class="st0">"world!"</span>, world = <span class="st0">"Hello, "</span>;
Swap<span class="br0">(</span> world, hello <span class="br0">)</span>;
<span class="kw3">cout</span> &lt;&lt; hello &lt;&lt; world &lt;&lt; endl; <span class="co1">//Output is "Hello, world!"</span>
</pre></div>
<p>The C++ <code>template</code> construct used above is widely cited as the generic programming construct that popularized the notion among programmers and language designers and supports many generic programming idioms. The D programming language also offers fully generic-capable templates based on the C++ precedent but with a simplified syntax. The Java programming language has provided generic programming facilities syntactically based on C++'s since the introduction of <a href="/wiki/Java_Platform,_Standard_Edition" title="Java Platform, Standard Edition">J2SE</a> 5.0 and implements the <i>generics</i> subset of generic programming.</p>
<p>Although the examples above are a common use of generic programming, and some languages implement only this aspect of it, the concept of generic programming is not limited to "generics" as a programming language construct. In Python, a language with strong, dynamic typing, generic programming is both transparent and also the simplest way to write routines. For example, the preceding example can be translated into <a href="/wiki/Python_(programming_language)" title="Python (programming language)">Python</a> if a box class is created to simulate the C++ notion of call-by-reference.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-python">
<span class="kw1">class</span> Box:
  <span class="kw1">def</span> <span class="kw4">__init__</span><span class="br0">(</span><span class="kw2">self</span>,ob<span class="br0">)</span>:
    <span class="kw2">self</span>.<span class="me1">contents</span> = ob
 
<span class="kw1">def</span> swap<span class="br0">(</span>box1,box2<span class="br0">)</span>:
  box2.<span class="me1">contents</span>, box1.<span class="me1">contents</span> = box1.<span class="me1">contents</span>, box2.<span class="me1">contents</span>
</pre></div>
<p><a href="/wiki/C_Sharp_(programming_language)" title="C Sharp (programming language)">C#</a> 2.0, <a href="/wiki/Chrome_programming_language" title="Chrome programming language" class="mw-redirect">Chrome 1.5</a> and <a href="/wiki/Visual_Basic_.NET" title="Visual Basic .NET">Visual Basic .NET 2005</a> have constructs that take advantage of the support for generics present in the <a href="/wiki/.NET_Framework" title=".NET Framework">Microsoft .NET Framework</a> since version 2.0. The <a href="/wiki/ML_programming_language" title="ML programming language" class="mw-redirect">ML</a> family of programming languages encourage generic programming through <a href="/wiki/Polymorphism_(computer_science)" title="Polymorphism (computer science)" class="mw-redirect">parametric polymorphism</a> and generic <a href="/wiki/Module_(programming)" title="Module (programming)" class="mw-redirect">modules</a> called <i>functors.</i> The <a href="/wiki/Type_class" title="Type class">type class</a> mechanism of <a href="/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell</a> supports generic programming.</p>
<p><a href="/wiki/Dynamic_typing" title="Dynamic typing" class="mw-redirect">Dynamic typing</a>, such as is featured in <a href="/wiki/Objective-C" title="Objective-C">Objective-C</a>, and, judicious use of <a href="/wiki/Interface_(computing)" title="Interface (computing)" class="mw-redirect">protocols</a> circumvent the need for use of generic programming techniques, since there exists a general type to contain any object. While Java does so also, the casting that needs to be done breaks the discipline of <a href="/wiki/Static_typing" title="Static typing" class="mw-redirect">static typing</a>, and generics are one way of achieving some of the benefits of dynamic typing with the advantages of having static typing.</p>
<p><a name="Generics_in_Ada" id="Generics_in_Ada"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=3" title="Edit section: Generics in Ada">edit</a>]</span> <span class="mw-headline">Generics in Ada</span></h4>
<p><a href="/wiki/Ada_(programming_language)" title="Ada (programming language)">Ada</a> has had generics since it was first designed in 1977-1980. The standard library uses generics to provide many services. Ada 2005 adds a comprehensive generic container library to the standard library, which was inspired by C++'s standard template library.</p>
<p>A <i>generic unit</i> is a package or a subprogram that takes one or more <i>generic formal parameters</i>.</p>
<p>A <i>generic formal parameter</i> is a value, a variable, a constant, a type, a subprogram, or even an instance of another, designated, generic unit. For generic formal types, the syntax distinguishes between discrete, floating-point, fixed-point, access (pointer) types, etc. Some formal parameters can have default values.</p>
<p>To <i>instantiate</i> a generic unit, the programmer passes <i>actual</i> parameters for each formal. The generic instance then behaves just like any other unit. It is possible to instantiate generic units at run-time, for example inside a loop.</p>
<p><a name="Ada_example" id="Ada_example"></a></p>
<h5><span class="editsection">[<a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=4" title="Edit section: Ada example">edit</a>]</span> <span class="mw-headline">Ada example</span></h5>
<p>The specification of a generic package:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-ada">
 <span class="kw3">generic</span>
    Max_Size : Natural; <span class="co1">-- a generic formal value</span>
    <span class="kw3">type</span> Element_Type <span class="kw1">is</span> <span class="kw3">private</span>; <span class="co1">-- a generic formal type; accepts any nonlimited type</span>
 <span class="kw3">package</span> Stacks <span class="kw1">is</span>
    <span class="kw3">type</span> Size_Type <span class="kw1">is</span> <span class="kw3">range</span> <span class="nu0">0</span> .. <span class="me1">Max_Size</span>;
    <span class="kw3">type</span> Stack <span class="kw1">is</span> <span class="kw3">limited</span> <span class="kw3">private</span>;
    <span class="kw3">procedure</span> Create <span class="br0">(</span>S : <span class="kw3">out</span> Stack;
                      Initial_Size : <span class="kw3">in</span> Size_Type := Max_Size<span class="br0">)</span>;
    <span class="kw3">procedure</span> Push <span class="br0">(</span>Into : <span class="kw3">in</span> <span class="kw3">out</span> Stack; Element : <span class="kw3">in</span> Element_Type<span class="br0">)</span>;
    <span class="kw3">procedure</span> Pop <span class="br0">(</span>From : <span class="kw3">in</span> <span class="kw3">out</span> Stack; Element : <span class="kw3">out</span> Element_Type<span class="br0">)</span>;
    Overflow : <span class="kw1">exception</span>;
    Underflow : <span class="kw1">exception</span>;
 <span class="kw3">private</span>
    <span class="kw3">subtype</span> Index_Type <span class="kw1">is</span> Size_Type <span class="kw3">range</span> <span class="nu0">1</span> .. <span class="me1">Max_Size</span>;
    <span class="kw3">type</span> Vector <span class="kw1">is</span> <span class="kw3">array</span> <span class="br0">(</span>Index_Type <span class="kw3">range</span> &lt;&gt;<span class="br0">)</span> <span class="kw3">of</span> Element_Type;
    <span class="kw3">type</span> Stack <span class="br0">(</span>Allocated_Size : Size_Type := <span class="nu0">0</span><span class="br0">)</span> <span class="kw1">is</span> <span class="kw3">record</span>
       Top : Index_Type;
       Storage : Vector <span class="br0">(</span><span class="nu0">1</span> .. <span class="me1">Allocated_Size</span><span class="br0">)</span>;
    <span class="kw1">end</span> <span class="kw3">record</span>;
 <span class="kw1">end</span> Stacks;
</pre></div>
<p>Instantiating the generic package:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-ada">
 <span class="kw3">type</span> Bookmark_Type <span class="kw1">is</span> <span class="kw3">new</span> Natural;
 <span class="co1">-- records a location in the text document we are editing</span>
 
 <span class="kw3">package</span> Bookmark_Stacks <span class="kw1">is</span> <span class="kw3">new</span> Stacks <span class="br0">(</span>Max_Size =&gt; <span class="nu0">20</span>,
                                        Element_Type =&gt; Bookmark_Type<span class="br0">)</span>;
 <span class="co1">-- Allows the user to jump between recorded locations in a document</span>
</pre></div>
<p>Using an instance of a generic package:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-ada">
 <span class="kw3">type</span> Document_Type <span class="kw1">is</span> <span class="kw3">record</span>
    Contents : Ada.<span class="me1">Strings</span>.<span class="me1">Unbounded</span>.<span class="me1">Unbounded_String</span>;
    Bookmarks : Bookmark_Stacks.<span class="me1">Stack</span>;
 <span class="kw1">end</span> <span class="kw3">record</span>;
 
 <span class="kw3">procedure</span> Edit <span class="br0">(</span>Document_Name : <span class="kw3">in</span> String<span class="br0">)</span> <span class="kw1">is</span>
   Document : Document_Type;
 <span class="kw1">begin</span>
   <span class="co1">-- Initialise the stack of bookmarks:</span>
   Bookmark_Stacks.<span class="me1">Create</span> <span class="br0">(</span>S =&gt; Document.<span class="me1">Bookmarks</span>, Initial_Size =&gt; <span class="nu0">10</span><span class="br0">)</span>;
   <span class="co1">-- Now, open the file Document_Name and read it in...</span>
 <span class="kw1">end</span> Edit;
</pre></div>
<p><a name="Advantages_and_limitations" id="Advantages_and_limitations"></a></p>
<h5><span class="editsection">[<a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=5" title="Edit section: Advantages and limitations">edit</a>]</span> <span class="mw-headline">Advantages and limitations</span></h5>
<p>The language syntax allows precise specification of constraints on generic formal parameters. For example, it is possible to specify that a generic formal type will only accept a modular type as the actual. It is also possible to express constraints <i>between</i> generic formal parameters; for example:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-ada">
 <span class="kw3">generic</span>
    <span class="kw3">type</span> Index_Type <span class="kw1">is</span> <span class="br0">(</span>&lt;&gt;<span class="br0">)</span>; <span class="co1">-- must be a discrete type</span>
    <span class="kw3">type</span> Element_Type <span class="kw1">is</span> <span class="kw3">private</span>; <span class="co1">-- can be any nonlimited type</span>
    <span class="kw3">type</span> Array_Type <span class="kw1">is</span> <span class="kw3">array</span> <span class="br0">(</span>Index_Type <span class="kw3">range</span> &lt;&gt;<span class="br0">)</span> <span class="kw3">of</span> Element_Type;
</pre></div>
<p>In this example, Array_Type is constrained by both Index_Type and Element_Type. When instantiating the unit, the programmer must pass an actual array type that satisfies these constraints.</p>
<p>The disadvantage of this fine-grained control is a complicated syntax, but, because all generic formal parameters are completely defined in the specification, the compiler can instantiate generics without looking at the body of the generic.</p>
<p>Unlike C++, Ada does not allow specialised generic instances, and requires that all generics be instantiated explicitly. These rules have several consequences:</p>
<ul>
<li>the compiler can implement <i>shared generics</i>: the object code for a generic unit can be shared between all instances (unless the programmer requests inlining of subprograms, of course). As further consequences:
<ul>
<li>there is no possibility of code bloat (code bloat is common in C++ and requires special care, as explained below).</li>
<li>it is possible to instantiate generics at run time, as well as at compile time, since no new object code is required for a new instance.</li>
<li>actual objects corresponding to a generic formal object are always considered to be nonstatic inside the generic; see <a href="http://en.wikibooks.org/wiki/Ada_Programming/Generics#Generic_formal_objects" class="extiw" title="wikibooks:Ada Programming/Generics">Generic formal objects</a> in the Wikibook for details and consequences.</li>
</ul>
</li>
<li>all instances of a generic being exactly the same, it is easier to review and understand programs written by others; there are no "special cases" to take into account.</li>
<li>all instantiations being explicit, there are no hidden instantiations that might make it difficult to understand the program.</li>
<li>Ada does not permit "template metaprogramming", because it does not allow specialisations.</li>
</ul>
<p><a name="Templates_in_C.2B.2B" id="Templates_in_C.2B.2B"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=6" title="Edit section: Templates in C++">edit</a>]</span> <span class="mw-headline">Templates in C++</span></h4>
<p>C++ uses templates to enable generic programming techniques. The C++ Standard Library (also known as the <a href="/wiki/Standard_Template_Library" title="Standard Template Library">Standard Template Library</a> or STL) provides a framework of templates for common data structures and algorithms. Templates in C++ may also be used for <a href="/wiki/Template_metaprogramming" title="Template metaprogramming">template metaprogramming</a>, which is a way of pre-evaluating some of the code at compile-time rather than run-time. Using template specialization, C++ Templates are considered <a href="/wiki/Turing_complete" title="Turing complete" class="mw-redirect">turing complete</a>.</p>
<p><a name="Technical_overview" id="Technical_overview"></a></p>
<h5><span class="editsection">[<a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=7" title="Edit section: Technical overview">edit</a>]</span> <span class="mw-headline">Technical overview</span></h5>
<p>There are two kinds of templates: function templates and class templates. A <i>function template</i> is a pattern for creating ordinary functions based upon the parameterizing types supplied when instantiated. For example, the C++ Standard Template Library contains the function template <code>max(x, y)</code> which creates functions that return either <i>x</i> or <i>y,</i> whichever is larger. <code>max()</code> could be defined like this:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
<span class="kw2">template</span> &lt;typename T&gt;
T max<span class="br0">(</span>T x, T y<span class="br0">)</span> <span class="br0">{</span>
    <span class="kw1">return</span> x &lt; y ? y : x;
<span class="br0">}</span>
</pre></div>
<p><i>Specializations</i> of this function template, instantiations with specific types, can be called just like an ordinary function:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
<span class="kw3">cout</span> &lt;&lt; max<span class="br0">(</span><span class="nu0">3</span>, <span class="nu0">7</span><span class="br0">)</span>;   <span class="co1">// outputs 7</span>
</pre></div>
<p>The compiler examines the arguments used to call <code>max</code> and determines that this is a call to <code>max(int, int)</code>. It then instantiates a version of the function where the parameterizing type <code>T</code> is <code>int</code>, making the equivalent of the following function:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
<span class="kw4">int</span> max<span class="br0">(</span><span class="kw4">int</span> x, <span class="kw4">int</span> y<span class="br0">)</span> <span class="br0">{</span>
    <span class="kw1">return</span> x &lt; y ? y : x;
<span class="br0">}</span>
</pre></div>
<p>This works whether the arguments <code>x</code> and <code>y</code> are integers, strings, or any other type for which the expression <code>x &lt; y</code> is sensible, or more specifically, for any type for which <code>operator&lt;</code> is defined. Common inheritance is not needed for the set of types that can be used, and so it is very similar to <a href="/wiki/Duck_typing#Comparison_with_templates_or_generic_types" title="Duck typing">duck typing</a>. A program defining a custom data type can use operator overloading to define the meaning of <code>&lt;</code> for that type, thus allowing its use with the <code>max()</code> function template. While this may seem a minor benefit in this isolated example, in the context of a comprehensive library like the STL it allows the programmer to get extensive functionality for a new data type, just by defining a few operators for it. Merely defining <code>&lt;</code> allows a type to be used with the standard <code>sort()</code>, <code>stable_sort()</code>, and <code>binary_search()</code> algorithms or to be put inside data structures such as <code>set</code>s, heaps, and associative arrays.</p>
<p>C++ templates are completely <a href="/wiki/Type_safety" title="Type safety">type safe</a> at compile time. As a demonstration, the standard type <code>complex</code> does not define the <code>&lt;</code> operator, because there is no strict order on <a href="/wiki/Complex_number" title="Complex number">complex numbers</a>. Therefore <code>max(x, y)</code> will fail with a compile error if <i>x</i> and <i>y</i> are <code>complex</code> values. Likewise, other templates that rely on <code>&lt;</code> cannot be applied to <code>complex</code> data. Unfortunately, compilers historically generate somewhat esoteric, long, and unhelpful error messages for this sort of error. Ensuring that a certain object adheres to a <a href="/wiki/Protocol_(computer_science)" title="Protocol (computer science)" class="mw-redirect">method protocol</a> can alleviate this issue.</p>
<p>The second kind of template, a <i>class template,</i> extends the same concept to classes. A class template specialization is a class. Class templates are often used to make generic containers. For example, the STL has a <a href="/wiki/Linked_list" title="Linked list">linked list</a> container. To make a linked list of integers, one writes <code>list&lt;int&gt;</code>. A list of strings is denoted <code>list&lt;string&gt;</code>. A <code>list</code> has a set of standard functions associated with it, which work for any compatible parameterizing types.</p>
<p><a name="Template_specialization" id="Template_specialization"></a></p>
<h5><span class="editsection">[<a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=8" title="Edit section: Template specialization">edit</a>]</span> <span class="mw-headline">Template specialization</span></h5>
<p>A powerful feature of C++'s templates is <i>template specialization</i>. This allows alternative implementations to be provided based on certain characteristics of the parameterized type that is being instantiated. Template specialization has two purposes: to allow certain forms of optimization, and to reduce code bloat.</p>
<p>For example, consider a <code>sort()</code> template function. One of the primary activities that such a function does is to swap or exchange the values in two of the container's positions. If the values are large (in terms of the number of bytes it takes to store each of them), then it is often quicker to first build a separate list of pointers to the objects, sort those pointers, and then build the final sorted sequence. If the values are quite small however it is usually fastest to just swap the values in-place as needed. Furthermore if the parameterized type is already of some pointer-type, then there is no need to build a separate pointer array. Template specialization allows the template creator to write different implementations and to specify the characteristics that the parameterized type(s) must have for each implementation to be used.</p>
<p>Unlike function templates, class templates can be <a href="/wiki/Partial_template_specialization" title="Partial template specialization">partially specialized</a>. That means that an alternate version of the class template code can be provided when some of the template parameters are known, while leaving other template parameters generic. This can be used, for example, to create a default implementation (the <i>primary specialization</i>) that assumes that copying a parameterizing type is expensive and then create partial specializations for types that are cheap to copy, thus increasing overall efficiency. Clients of such a class template just use specializations of it without needing to know whether the compiler used the primary specialization or some partial specialization in each case. Class templates can also be <i>fully specialized,</i> which means that an alternate implementation can be provided when all of the parameterizing types are known.</p>
<p><a name="Advantages_and_disadvantages" id="Advantages_and_disadvantages"></a></p>
<h5><span class="editsection">[<a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=9" title="Edit section: Advantages and disadvantages">edit</a>]</span> <span class="mw-headline">Advantages and disadvantages</span></h5>
<p>Some uses of templates, such as the <code>max()</code> function, were previously filled by function-like <a href="/wiki/Preprocessor" title="Preprocessor">preprocessor</a> macros (a legacy of the <a href="/wiki/C_(programming_language)" title="C (programming language)">C programming language</a>). For example, here is a possible <code>max()</code> macro:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
<span class="co2">#define max(a,b) ((a) &lt; (b) ? (b) : (a))</span>
</pre></div>
<p>Both macros and templates are expanded at compile time. Macros are always expanded inline; templates can also be expanded as inline functions when the compiler deems it appropriate. Thus both function-like macros and function templates have no run-time overhead.</p>
<p>However, templates are generally considered an improvement over macros for these purposes. Templates are type-safe. Templates avoid some of the common errors found in code that makes heavy use of function-like macros. Perhaps most importantly, templates were designed to be applicable to much larger problems than macros.</p>
<p>There are three primary drawbacks to the use of templates: compiler support, poor error messages, and code bloat. Many compilers historically have poor support for templates, thus the use of templates can make code somewhat less portable. Support may also be poor when a C++ compiler is being used with a <a href="/wiki/Linker" title="Linker">linker</a> which is not C++-aware, or when attempting to use templates across <a href="/wiki/Library_(computer_science)#Shared_library" title="Library (computer science)" class="mw-redirect">shared library</a> boundaries. Most modern compilers however now have fairly robust and standard template support, and the new C++ standard, <a href="/wiki/C%2B%2B0x" title="C++0x">C++0x</a>, is expected to further address these issues.</p>
<p>Almost all compilers produce confusing, long, or sometimes unhelpful error messages when errors are detected in code that uses templates.<sup class="noprint Template-Fact"><span title="This claim needs references to reliable sources&#160;since March 2009" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</span></sup> This can make templates difficult to develop.</p>
<p>Finally, the use of templates requires the compiler to generate a separate <i>instance</i> of the templated class or function for every <a href="/wiki/Permutation" title="Permutation">permutation</a> of type parameters used with it. (This is necessary because types in C++ are not all the same size, and the sizes of data fields are important to how classes work.) So the indiscriminate use of templates can lead to <a href="/wiki/Code_bloat" title="Code bloat">code bloat</a>, resulting in excessively large executables.<sup class="noprint Template-Fact"><span title="This claim needs references to reliable sources&#160;since March 2009" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</span></sup> However, judicious use of template specialization can dramatically reduce such code bloat in some cases. The extra instantiations generated by templates can also cause debuggers to have difficulty working gracefully with templates. For example, setting a debug breakpoint within a template from a source file may either miss setting the breakpoint in the actual instantiation desired or may set a breakpoint in every place the template is instantiated.</p>
<p>Also, because the compiler needs to perform macro-like expansions of templates and generate different instances of them at compile time, the implementation source code for the templated class or function must be available (e.g. included in a header) to the code using it. Templated classes or functions, including much of the Standard Template Library (STL), cannot be compiled. (This is in contrast to non-templated code, which may be compiled to binary, providing only a declarations header file for code using it.) This may be a disadvantage by exposing the implementing code, which removes some abstractions, and could restrict its use in closed-source projects.<sup class="noprint Template-Fact"><span title="This claim needs references to reliable sources&#160;since March 2009" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</span></sup></p>
<p><a name="Templates_in_D" id="Templates_in_D"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=10" title="Edit section: Templates in D">edit</a>]</span> <span class="mw-headline">Templates in D</span></h4>
<p>The <a href="/wiki/D_programming_language" title="D programming language" class="mw-redirect">D programming language</a> supports templates that are evolved from those in C++. Most C++ template idioms will carry over to D without alteration, but D adds functionality that streamlines some common cases.</p>
<p>The most obvious differences are syntax changes. D uses parentheses ( ) instead of angle-brackets &lt; &gt; in a template definition. It also uses the&#160;!( ) construct (that is, parentheses preceded by an exclamation point) instead of angle-brackets in template instantiation. Therefore, <code>a!(b)</code> in D is the equivalent of <code>a&lt;b&gt;</code> in C++. These changes were made in the interest of making templates easier to parse, as using angle-brackets can lead to ambiguous syntax.</p>
<p><a name="Static-if" id="Static-if"></a></p>
<h5><span class="editsection">[<a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=11" title="Edit section: Static-if">edit</a>]</span> <span class="mw-headline">Static-if</span></h5>
<p>D provides a <code>static if</code> construct that checks conditions at compile-time. This is vaguely analogous to C++'s <code>#if</code> and <code>#endif</code> <a href="/wiki/Preprocessor" title="Preprocessor">preprocessor macross</a>. The major difference is that <code>static if</code> has access to all compile-time values, including template arguments. Therefore, many situations which require template specialization in C++ may be written inline in D. Recursive templates in D can look almost identical to their runtime equivalents. This is shown in the classic compile-time factorial template.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
<span class="kw2">template</span> factorial<span class="br0">(</span>uint n<span class="br0">)</span> <span class="br0">{</span>
    <span class="kw4">static</span> <span class="kw1">if</span> <span class="br0">(</span>n &lt; <span class="nu0">2</span><span class="br0">)</span>
        <span class="kw4">const</span> uint factorial = <span class="nu0">1</span>;
    <span class="kw1">else</span>
        <span class="kw4">const</span> uint factorial = n * factorial!<span class="br0">(</span>n<span class="nu0">-1</span><span class="br0">)</span>;
<span class="br0">}</span>
</pre></div>
<p><a name="Alias_parameters" id="Alias_parameters"></a></p>
<h5><span class="editsection">[<a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=12" title="Edit section: Alias parameters">edit</a>]</span> <span class="mw-headline">Alias parameters</span></h5>
<p>Templates in D may also accept alias parameters. Alias parameters are similar to C++'s <code>typedef</code> but can also substitute templates parameters. This is a superset of the functionality of template arguments in C++, and will be added in the forthcoming <a href="/wiki/C%2B%2B0x" title="C++0x">C++0x</a> specification. Alias parameters may be templates, functions, types, or any other compile-time symbol. This allows a coder to, for example, "inject" a function into the middle of a template function.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
<span class="kw2">template</span> wrapper<span class="br0">(</span>alias Fn<span class="br0">)</span> <span class="br0">{</span>
    <span class="co1">// Wraps a D function with an "extern(C)" interface.</span>
    <span class="kw4">extern</span><span class="br0">(</span>C<span class="br0">)</span> <span class="kw4">void</span> wrapper<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
        Fn<span class="br0">(</span><span class="br0">)</span>;
    <span class="br0">}</span>
<span class="br0">}</span>
</pre></div>
<p>This sort of template might be useful when interfacing D code with a C API. If a hypothetical C API wants a function pointer, you might use the template like this:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
<span class="kw4">void</span> foo<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
    <span class="co1">// ...</span>
<span class="br0">}</span>
 
some_c_function<span class="br0">(</span>&amp;wrapper!<span class="br0">(</span>foo<span class="br0">)</span><span class="br0">)</span>;
</pre></div>
<p><a name="Generics_in_Java" id="Generics_in_Java"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=13" title="Edit section: Generics in Java">edit</a>]</span> <span class="mw-headline">Generics in Java</span></h4>
<div class="rellink noprint relarticle mainarticle">Main article: <a href="/wiki/Generics_in_Java" title="Generics in Java">Generics in Java</a></div>
<p>Support for the <i>generics</i>, or "containers-of-type-T", subset of generic programming were added to the <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java programming language</a> in 2004 as part of J2SE 5.0. In Java, generics are checked at compile time for type correctness. The generic type information is then removed via a process called <a href="/wiki/Type_erasure" title="Type erasure" class="mw-redirect">type erasure</a>, and is unavailable at runtime. For example, a <code>List&lt;String&gt;</code> is converted to the raw type <code>List</code>. The compiler inserts <a href="/wiki/Type_conversion" title="Type conversion">type casts</a> to convert the elements to the <code>String</code> type when they are retrieved from the list.</p>
<p><a name="Generic_programming_in_C.23_and_.NET" id="Generic_programming_in_C.23_and_.NET"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=14" title="Edit section: Generic programming in C# and .NET">edit</a>]</span> <span class="mw-headline">Generic programming in C# and .NET</span></h4>
<p>Generics in C# (and other .NET languages) were added as part of <a href="/wiki/.NET_Framework#.NET_Framework_2.0" title=".NET Framework">.NET Framework 2.0</a> in <a href="/wiki/November_2005" title="November 2005">November 2005</a>. Although similar to generics in Java, .NET generics do not apply type erasure, but implement generics as a first class object in the runtime using <a href="/wiki/Reification_(computer_science)" title="Reification (computer science)">reification</a>. This design choice provides additional functionality, such as allowing <a href="/wiki/Reflection_(computer_science)" title="Reflection (computer science)">reflection</a> with preservation of generic types, as well as alleviating some of the limitations of erasure (such as being unable to create generic arrays).<sup id="cite_ref-0" class="reference"><a href="#cite_note-0" title=""><span>[</span>1<span>]</span></a></sup><sup id="cite_ref-1" class="reference"><a href="#cite_note-1" title=""><span>[</span>2<span>]</span></a></sup> This also means that there is no performance hit from runtime <a href="/wiki/Type_conversion" title="Type conversion">casts</a> and normally expensive <a href="/wiki/Boxing_(computer_science)" title="Boxing (computer science)" class="mw-redirect">boxing conversions</a>. When primitive and value types are used as generic arguments, they get specialized implementations, allowing for efficient generic <a href="/wiki/Collection_class" title="Collection class" class="mw-redirect">collections</a> and methods. As in C++ and Java, nested generic types such as <code>Dictionary&lt;string, List&lt;int&gt;&gt;</code> are valid types.</p>
<p>C# (and .NET in general) allows six varieties of generic type constraints using the <code>where</code> keyword including restricting generic types to be value types, to be classes, to have constructors, and to inherit from interfaces.<sup id="cite_ref-2" class="reference"><a href="#cite_note-2" title=""><span>[</span>3<span>]</span></a></sup> Below is an example with an interface constraint:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-csharp">
<span class="kw4">class</span> Sample
<span class="br0">{</span>
  <span class="kw1">public</span> <span class="kw1">static</span> <span class="kw1">void</span> Main<span class="br0">(</span><span class="br0">)</span>
  <span class="br0">{</span>
    <span class="kw4">int</span><span class="br0">[</span><span class="br0">]</span> list = <span class="br0">{</span> <span class="nu0">0</span>, <span class="nu0">1</span>, <span class="nu0">2</span>, <span class="nu0">3</span> <span class="br0">}</span>;
    MakeAtLeast&lt;int&gt;<span class="br0">(</span>list, <span class="nu0">2</span><span class="br0">)</span>; <span class="co1">// change array to { 2, 2, 2, 3 }</span>
  <span class="br0">}</span>
 
  <span class="kw1">public</span> <span class="kw1">static</span> <span class="kw1">void</span> MakeAtLeast&lt;T&gt;<span class="br0">(</span>IList&lt;T&gt; list, T lowest<span class="br0">)</span> where T : IComparable&lt;T&gt;
  <span class="br0">{</span>
    <span class="kw1">for</span> <span class="br0">(</span><span class="kw4">int</span> i = <span class="nu0">0</span>; i &lt; list.<span class="me1">Count</span>; i++<span class="br0">)</span>
      <span class="kw1">if</span> <span class="br0">(</span>list<span class="br0">[</span>i<span class="br0">]</span>.<span class="me1">CompareTo</span><span class="br0">(</span>lowest<span class="br0">)</span> &lt; <span class="nu0">0</span><span class="br0">)</span> list<span class="br0">[</span>i<span class="br0">]</span> = lowest;
  <span class="br0">}</span>
<span class="br0">}</span>
</pre></div>
<p>Since all arrays implement the <code>IList&lt;T&gt;</code> interface (commonly associated with <a href="/wiki/List_(computing)" title="List (computing)">list</a> classes), the <code>MakeAtLeast()</code> method allows operation on arrays, with elements of type <code>T</code>. The method's type constraint indicates that the method is applicable to any type <code>T</code> that implements the generic <code>IComparable&lt;T&gt;</code> interface. This ensures a <a href="/wiki/Compile_time" title="Compile time">compile time</a> error if the method is called with a list of another type. The interface provides the generic method <code>CompareTo(T)</code>.</p>
<p>The above method could also be written without generic types, simply using the non-generic <code>IList</code> type. However, this would make the method less <a href="/wiki/Type_safe" title="Type safe" class="mw-redirect">type safe</a>, as it would allow the method to be applied to a list of incomparable items, resulting in a <a href="/wiki/Runtime" title="Runtime">run time</a> error. The method would need to access the list items as objects instead, and would require <a href="/wiki/Type_conversion" title="Type conversion">casting</a> to compare two elements. (For value types like types such as <code>int</code> this requires a boxing conversion, although this can be worked around using the <code>Comparer&lt;T&gt;</code> class, as is done in the standard collection classes.)</p>
<p><a name="Generic_programming_in_Delphi" id="Generic_programming_in_Delphi"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=15" title="Edit section: Generic programming in Delphi">edit</a>]</span> <span class="mw-headline">Generic programming in Delphi</span></h4>
<p>Generic support was added to <a href="/wiki/Delphi_(programming_language)" title="Delphi (programming language)" class="mw-redirect">Delphi language</a> in October 2008. The first generic support to Generics was Delphi 2007 .NET in 2006, but it was only for .NET platform, and real support for Generics in Delphi was added in Delphi 2009.</p>
<p><a name="Generic_programming_in_Functional_languages" id="Generic_programming_in_Functional_languages"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=16" title="Edit section: Generic programming in Functional languages">edit</a>]</span> <span class="mw-headline">Generic programming in Functional languages</span></h3>
<p><a name="Generic_programming_in_Haskell" id="Generic_programming_in_Haskell"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=17" title="Edit section: Generic programming in Haskell">edit</a>]</span> <span class="mw-headline">Generic programming in Haskell</span></h4>
<p>Six of the predefined type classes in Haskell (including <code>Eq</code>, the types that can be compared for equality, and <code>Show</code>, the types whose values can be rendered as strings) have the special property of supporting <i>derived instances.</i> This means that a programmer defining a new type can state that this type is to be an instance of one of these special type classes, without providing implementations of the class methods as is usually necessary when declaring class instances. All the necessary methods will be "derived" -- that is, constructed automatically -- based on the structure of the type. For instance, the following declaration of a type of <a href="/wiki/Binary_tree" title="Binary tree">binary trees</a> states that it is to be an instance of the classes <code>Eq</code> and <code>Show</code>:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
data BinTree a = Leaf a | Node <span class="br0">(</span>BinTree a<span class="br0">)</span> a <span class="br0">(</span>BinTree a<span class="br0">)</span>
      deriving <span class="br0">(</span>Eq, Show<span class="br0">)</span>
</pre></div>
<p>This results in an equality function (<code>==</code>) and a string representation function (<code>show</code>) being automatically defined for any type of the form <code>BinTree T</code> provided that <code>T</code> itself supports those operations.</p>
<p>The support for derived instances of <code>Eq</code> and <code>Show</code> makes their methods <code>==</code> and <code>show</code> generic in a qualitatively different way from parametrically polymorphic functions: these "functions" (more accurately, type-indexed families of functions) can be applied to values of various types, and although they behave differently for every argument type, little work is needed to add support for a new type. Ralf Hinze (2004) has shown that a similar effect can be achieved for user-defined type classes by certain programming techniques. Other researchers have proposed approaches to this and other kinds of genericity in the context of Haskell and extensions to Haskell (discussed below).</p>
<p><a name="PolyP" id="PolyP"></a></p>
<h5><span class="editsection">[<a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=18" title="Edit section: PolyP">edit</a>]</span> <span class="mw-headline">PolyP</span></h5>
<p>PolyP was the first generic programming language extension to <a href="/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell</a>. In PolyP, generic functions are called <i>polytypic</i>. The language introduces a special construct in which such polytypic functions can be defined via structural induction over the structure of the pattern functor of a regular datatype. Regular datatypes in PolyP are a subset of Haskell datatypes. A regular datatype t must be of <a href="/wiki/Kind_(type_theory)" title="Kind (type theory)">kind</a> <i>* → *</i>, and if <i>a</i> is the formal type argument in the definition, then all recursive calls to <i>t</i> must have the form <i>t a</i>. These restrictions rule out higher-kinded datatypes as well as nested datatypes, where the recursive calls are of a different form. The flatten function in PolyP is here provided as an example:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-scheme">
   flatten :: Regular <span class="kw1">d</span> =&gt; <span class="kw1">d</span> a -&gt; <span class="br0">[</span>a<span class="br0">]</span>
   flatten = cata fl
 
   polytypic fl :: <span class="kw1">f</span> a <span class="br0">[</span>a<span class="br0">]</span> -&gt; <span class="br0">[</span>a<span class="br0">]</span>
     <span class="kw1">case</span> <span class="kw1">f</span> of
       g+h -&gt; either fl fl
       g*h -&gt; \<span class="br0">(</span>x,y<span class="br0">)</span> -&gt; fl x ++ fl y
       <span class="br0">(</span><span class="br0">)</span> -&gt; \x -&gt; <span class="br0">[</span><span class="br0">]</span>
       Par -&gt; \x -&gt; <span class="br0">[</span>x<span class="br0">]</span>
       Rec -&gt; \x -&gt; x
       <span class="kw1">d</span>@g -&gt; concat . flatten . pmap fl
       Con <span class="kw1">t</span> -&gt; \x -&gt; <span class="br0">[</span><span class="br0">]</span>
 
   cata :: Regular <span class="kw1">d</span> =&gt; <span class="br0">(</span>FunctorOf <span class="kw1">d</span> a b -&gt; b<span class="br0">)</span> -&gt; <span class="kw1">d</span> a -&gt; b
</pre></div>
<p><a name="Generic_Haskell" id="Generic_Haskell"></a></p>
<h5><span class="editsection">[<a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=19" title="Edit section: Generic Haskell">edit</a>]</span> <span class="mw-headline">Generic Haskell</span></h5>
<p>Generic Haskell is another extension to <a href="/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell</a>, developed at <a href="/wiki/Utrecht_University" title="Utrecht University">Utrecht University</a> in <a href="/wiki/The_Netherlands" title="The Netherlands" class="mw-redirect">The Netherlands</a>. The extensions it provides are:</p>
<ul>
<li><i>Type-indexed values</i> are defined as a value indexed over the various Haskell type constructors (unit, primitive types, sums, products, and user-defined type constructors). In addition, we can also specify the behaviour of a type-indexed values for a specific constructor using <i>constructor cases</i>, and reuse one generic definition in another using <i>default cases</i>.</li>
</ul>
<p>The resulting type-indexed value can be specialised to any type.</p>
<ul>
<li><i>Kind-indexed types</i> are types indexed over kinds, defined by giving a case for both <i>*</i> and <i>k → k'</i>. Instances are obtained by applying the kind-indexed type to a kind.</li>
<li>Generic definitions can be used by applying them to a type or kind. This is called <i>generic application</i>. The result is a type or value, depending on which sort of generic definition is applied.</li>
<li><i>Generic abstraction</i> enables generic definitions be defined by abstracting a type parameter (of a given kind).</li>
<li><i>Type-indexed types</i> are types which are indexed over the type constructors. These can be used to give types to more involved generic values. The resulting type-indexed types can be specialised to any type.</li>
</ul>
<p>As an example, the equality function in Generic Haskell:<sup id="cite_ref-3" class="reference"><a href="#cite_note-3" title=""><span>[</span>4<span>]</span></a></sup></p>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
   type Eq <span class="br0">{</span><span class="br0">[</span> * <span class="br0">]</span><span class="br0">}</span> t1 t2 = t1 -&gt; t2 -&gt; <span class="kw4">Bool</span>
   type Eq <span class="br0">{</span><span class="br0">[</span> k -&gt; l <span class="br0">]</span><span class="br0">}</span> t1 t2 = forall u1 u2. <span class="me1">Eq</span> <span class="br0">{</span><span class="br0">[</span> k <span class="br0">]</span><span class="br0">}</span> u1 u2 -&gt; Eq <span class="br0">{</span><span class="br0">[</span> l <span class="br0">]</span><span class="br0">}</span> <span class="br0">(</span>t1 u1<span class="br0">)</span> <span class="br0">(</span>t2 u2<span class="br0">)</span>
 
   eq <span class="br0">{</span>| t :: <span class="me2">k</span> |<span class="br0">}</span> :: <span class="me2">Eq</span> <span class="br0">{</span><span class="br0">[</span> k <span class="br0">]</span><span class="br0">}</span> t t
   eq <span class="br0">{</span>| Unit |<span class="br0">}</span> _ _ = <span class="kw2">True</span>
   eq <span class="br0">{</span>| :+: |<span class="br0">}</span> eqA eqB <span class="br0">(</span>Inl a1<span class="br0">)</span> <span class="br0">(</span>Inl a2<span class="br0">)</span> = eqA a1 a2
   eq <span class="br0">{</span>| :+: |<span class="br0">}</span> eqA eqB <span class="br0">(</span>Inr b1<span class="br0">)</span> <span class="br0">(</span>Inr b2<span class="br0">)</span> = eqB b1 b2
   eq <span class="br0">{</span>| :+: |<span class="br0">}</span> eqA eqB _ _ = <span class="kw2">False</span>
   eq <span class="br0">{</span>| :*: |<span class="br0">}</span> eqA eqB <span class="br0">(</span>a1 :*: b1<span class="br0">)</span> <span class="br0">(</span>a2 :*: b2<span class="br0">)</span> = eqA a1 a2 &amp;&amp; eqB b1 b2
   eq <span class="br0">{</span>| <span class="kw4">Int</span> |<span class="br0">}</span> = <span class="br0">(</span>==<span class="br0">)</span>
   eq <span class="br0">{</span>| <span class="kw4">Char</span> |<span class="br0">}</span> = <span class="br0">(</span>==<span class="br0">)</span>
   eq <span class="br0">{</span>| <span class="kw4">Bool</span> |<span class="br0">}</span> = <span class="br0">(</span>==<span class="br0">)</span>
</pre></div>
<p><a name="The_.22Scrap_your_boilerplate.22_approach" id="The_.22Scrap_your_boilerplate.22_approach"></a></p>
<h5><span class="editsection">[<a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=20" title="Edit section: The &quot;Scrap your boilerplate&quot; approach">edit</a>]</span> <span class="mw-headline">The "Scrap your boilerplate" approach</span></h5>
<p>The <i>Scrap your <a href="/wiki/Boilerplate_(text)" title="Boilerplate (text)">boilerplate</a></i> approach is a lightweight generic programming approach for Haskell (Lämmel and Peyton Jones, 2003). A <a href="http://www.cs.vu.nl/boilerplate/" class="external text" title="http://www.cs.vu.nl/boilerplate/" rel="nofollow">web site</a> for this approach explains which components of it are currently implemented in <a href="/wiki/Glasgow_Haskell_Compiler" title="Glasgow Haskell Compiler">GHC</a>. <i>Uniplate</i> is an even simpler package with a similar basic approach.<a href="http://www-users.cs.york.ac.uk/~ndm/uniplate/" class="external autonumber" title="http://www-users.cs.york.ac.uk/~ndm/uniplate/" rel="nofollow">[1]</a></p>
<p><a name="Clean" id="Clean"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=21" title="Edit section: Clean">edit</a>]</span> <span class="mw-headline">Clean</span></h4>
<p><a href="/wiki/Clean_(programming_language)" title="Clean (programming language)">Clean</a> offers generic programming based PolyP and the generic Haskell as supported by the GHC&gt;=6.0. It parametrizes by kind as those but offers overloading.</p>
<p><a name="Generic_programming_features_in_other_languages" id="Generic_programming_features_in_other_languages"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=22" title="Edit section: Generic programming features in other languages">edit</a>]</span> <span class="mw-headline">Generic programming features in other languages</span></h3>
<p><a href="/wiki/Standard_ML" title="Standard ML">Standard ML</a> and <a href="/wiki/OCaml" title="OCaml" class="mw-redirect">OCaml</a> provide functors, which are similar to class templates and to Ada's generic packages. <a href="/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme</a> syntactic abstractions also have connection to generic programming -- these are in fact a superset of templating a la C++.</p>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=23" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<ul>
<li><a href="/wiki/Partial_evaluation" title="Partial evaluation">Partial evaluation</a></li>
<li><a href="/wiki/Concept_(generic_programming)" title="Concept (generic programming)">Concept (generic programming)</a></li>
<li><a href="/wiki/Type_polymorphism" title="Type polymorphism">Type polymorphism</a></li>
</ul>
<p><a name="External_links_and_references" id="External_links_and_references"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=24" title="Edit section: External links and references">edit</a>]</span> <span class="mw-headline">External links and references</span></h2>
<p><a name="General" id="General"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=25" title="Edit section: General">edit</a>]</span> <span class="mw-headline">General</span></h3>
<ul>
<li>Bertrand Meyer. "<a href="http://se.ethz.ch/~meyer/publications/acm/geninh.pdf" class="external text" title="http://se.ethz.ch/~meyer/publications/acm/geninh.pdf" rel="nofollow">Genericity vs Inheritance</a>." In <i>OOPSLA (First ACM Conference on Object-Oriented Programming Systems, Languages and Applications),</i> Portland (Oregon), September 29–October 2, 1986, pages 391–405.</li>
<li>Gabriel Dos Reis and Jaakko Järvi, <i><a href="http://lcsd05.cs.tamu.edu/papers/dos_reis_et_al.pdf" class="external text" title="http://lcsd05.cs.tamu.edu/papers/dos_reis_et_al.pdf" rel="nofollow">What is Generic Programming?</a>,</i> <a href="http://lcsd05.cs.tamu.edu" class="external text" title="http://lcsd05.cs.tamu.edu" rel="nofollow">LCSD 2005</a>.</li>
<li>Alexander A. Stepanov, <a href="http://www.stepanovpapers.com/" class="external text" title="http://www.stepanovpapers.com/" rel="nofollow">Collected Papers of Alexander A. Stepanov</a> (creator of the <a href="/wiki/Standard_Template_Library" title="Standard Template Library">STL</a>)</li>
<li><a href="http://www.generic-programming.org" class="external free" title="http://www.generic-programming.org" rel="nofollow">http://www.generic-programming.org</a></li>
</ul>
<p><a name="C.2B.2B.2FD" id="C.2B.2B.2FD"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=26" title="Edit section: C++/D">edit</a>]</span> <span class="mw-headline">C++/D</span></h3>
<ul>
<li>Walter Bright, <i><a href="http://www.digitalmars.com/d/templates-revisited.html" class="external text" title="http://www.digitalmars.com/d/templates-revisited.html" rel="nofollow">Templates Revisited</a>.</i></li>
<li>David Vandevoorde, <i>C++ Templates: The Complete Guide</i>, 2003 Addison-Wesley. <a href="/wiki/Special:BookSources/0201734842" class="internal">ISBN 0-201-73484-2</a></li>
</ul>
<p><a name="C.23.2F.NET" id="C.23.2F.NET"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=27" title="Edit section: C#/.NET">edit</a>]</span> <span class="mw-headline">C#/.NET</span></h3>
<ul>
<li>Jason Clark, "<a href="http://msdn.microsoft.com/msdnmag/issues/03/09/NET/" class="external text" title="http://msdn.microsoft.com/msdnmag/issues/03/09/NET/" rel="nofollow">Introducing Generics in the Microsoft CLR</a>," September 2003, <i>MSDN Magazine</i>, Microsoft.</li>
<li>Jason Clark, "<a href="http://msdn.microsoft.com/msdnmag/issues/03/10/NET/" class="external text" title="http://msdn.microsoft.com/msdnmag/issues/03/10/NET/" rel="nofollow">More on Generics in the Microsoft CLR</a>," October 2003, <i>MSDN Magazine</i>, Microsoft.</li>
<li>M. Aamir Maniar, <a href="http://codeplex.com/Wiki/View.aspx?ProjectName=genericsnet" class="external text" title="http://codeplex.com/Wiki/View.aspx?ProjectName=genericsnet" rel="nofollow">Generics.Net</a>. An open source generics library for C#.</li>
</ul>
<p><a name="Delphi" id="Delphi"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=28" title="Edit section: Delphi">edit</a>]</span> <span class="mw-headline">Delphi</span></h3>
<ul>
<li>Nick Hodges, "<a href="http://dn.codegear.com/article/38757" class="external text" title="http://dn.codegear.com/article/38757" rel="nofollow">Delphi 2009 Reviewers Guide</a>," October 2008, <i>CodeGear Developer Network</i>, CodeGear.</li>
<li>Craig Stuntz, "<a href="http://blogs.teamb.com/craigstuntz/2008/08/29/37832/" class="external text" title="http://blogs.teamb.com/craigstuntz/2008/08/29/37832/" rel="nofollow">Delphi 2009 Generics and Type Constraints</a>," October 2008</li>
<li>Dr. Bob, "<a href="http://www.drbob42.com/examines/examinA4.htm" class="external text" title="http://www.drbob42.com/examines/examinA4.htm" rel="nofollow">Delphi 2009 Generics</a>"</li>
</ul>
<p><a name="Haskell.2Ffunctional" id="Haskell.2Ffunctional"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=29" title="Edit section: Haskell/functional">edit</a>]</span> <span class="mw-headline">Haskell/functional</span></h3>
<ul>
<li>Dæv Clarke, Johan Jeuring and Andres Löh, <a href="http://www.cs.uu.nl/research/projects/generic-haskell/compiler/diamond/GHUsersGuide.pdf" class="external text" title="http://www.cs.uu.nl/research/projects/generic-haskell/compiler/diamond/GHUsersGuide.pdf" rel="nofollow">The Generic Haskell user's guide</a></li>
<li>Ralf Hinze, "<a href="http://www.informatik.uni-bonn.de/~ralf/publications/ICFP04.pdf" class="external text" title="http://www.informatik.uni-bonn.de/~ralf/publications/ICFP04.pdf" rel="nofollow">Generics for the Masses</a>," In <i>Proceedings of the <a href="/wiki/Association_for_Computing_Machinery" title="Association for Computing Machinery">ACM</a> <a href="/wiki/SIGPLAN" title="SIGPLAN">SIGPLAN</a> <a href="/wiki/International_Conference_on_Functional_Programming" title="International Conference on Functional Programming">International Conference on Functional Programming</a> (ICFP),</i> 2004.</li>
<li><a href="/wiki/Simon_Peyton_Jones" title="Simon Peyton Jones">Simon Peyton Jones</a>, editor, <i><a href="http://haskell.org/onlinereport/index.html" class="external text" title="http://haskell.org/onlinereport/index.html" rel="nofollow">The Haskell 98 Language Report</a>,</i> Revised 2002.</li>
<li><a href="/w/index.php?title=Ralf_L%C3%A4mmel&amp;action=edit&amp;redlink=1" class="new" title="Ralf Lämmel (page does not exist)">Ralf Lämmel</a> and <a href="/wiki/Simon_Peyton_Jones" title="Simon Peyton Jones">Simon Peyton Jones</a>, "Scrap Your Boilerplate: A Practical Design Pattern for Generic Programming," In <i>Proceedings of the <a href="/wiki/Association_for_Computing_Machinery" title="Association for Computing Machinery">ACM</a> <a href="/wiki/SIGPLAN" title="SIGPLAN">SIGPLAN</a> International Workshop on Types in Language Design and Implementation (TLDI'03),</i> 2003. (Also see the website <a href="http://www.cs.vu.nl/boilerplate/" class="external text" title="http://www.cs.vu.nl/boilerplate/" rel="nofollow">devoted to this research</a>)</li>
<li>Andres Löh, <i><a href="http://www.cs.uu.nl/~andres/ExploringGH.pdf" class="external text" title="http://www.cs.uu.nl/~andres/ExploringGH.pdf" rel="nofollow">Exploring Generic Haskell</a>,</i> Ph.D. thesis, 2004 <a href="/wiki/Utrecht_University" title="Utrecht University">Utrecht University</a>. <a href="/wiki/Special:BookSources/9039337659" class="internal">ISBN 90-393-3765-9</a></li>
<li><a href="http://www.generic-haskell.org/" class="external text" title="http://www.generic-haskell.org/" rel="nofollow">Generic Haskell: a language for generic programming</a></li>
</ul>
<p><a name="Java" id="Java"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=30" title="Edit section: Java">edit</a>]</span> <span class="mw-headline">Java</span></h3>
<ul>
<li>Gilad Bracha, <i><a href="http://java.sun.com/j2se/1.5/pdf/generics-tutorial.pdf" class="external text" title="http://java.sun.com/j2se/1.5/pdf/generics-tutorial.pdf" rel="nofollow">Generics in the Java Programming Language</a>,</i> 2004.</li>
<li>Maurice Naftalin and Philip Wadler, <i>Java Generics and Collections,</i> 2006, O'Reilly Media, Inc. <a href="/wiki/Special:BookSources/0596527756" class="internal">ISBN 0-596-52775-6</a></li>
<li>Peter Sestoft, <i>Java Precisely, Second Edition,</i> 2005 MIT Press. <a href="/wiki/Special:BookSources/0262693259" class="internal">ISBN 0-262-69325-9</a></li>
<li><a href="http://java.sun.com/javase/6/docs/technotes/guides/language/generics.html" class="external text" title="http://java.sun.com/javase/6/docs/technotes/guides/language/generics.html" rel="nofollow">Generic Programming In Java</a>, 2004 Sun Microsystems, Inc.</li>
<li>Angelika Langer, <a href="http://www.angelikalanger.com/GenericsFAQ/JavaGenericsFAQ.html" class="external text" title="http://www.angelikalanger.com/GenericsFAQ/JavaGenericsFAQ.html" rel="nofollow">Java Generics FAQs</a></li>
</ul>
<p><a name="Object_Pascal" id="Object_Pascal"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=31" title="Edit section: Object Pascal">edit</a>]</span> <span class="mw-headline">Object Pascal</span></h3>
<ul>
<li><b><a href="/wiki/Free_Pascal" title="Free Pascal">Free Pascal</a></b>: <a href="http://www.freepascal.org/docs-html/ref/refch8.html" class="external text" title="http://www.freepascal.org/docs-html/ref/refch8.html" rel="nofollow">Free Pascal Reference guide Chapter 8: Generics</a>, Michaël Van Canneyt, 2007</li>
<li><b><a href="/wiki/CodeGear_Delphi" title="CodeGear Delphi">Delphi</a> for Win32</b>: <a href="http://sjrd.developpez.com/delphi/tutoriel/generics/" class="external text" title="http://sjrd.developpez.com/delphi/tutoriel/generics/" rel="nofollow">Generics with Delphi 2009 Win32</a>, Sébastien DOERAENE, 2008</li>
<li><b>Delphi for .NET</b>: <a href="http://www.felix-colibri.com/papers/oop_components/delphi_generics_tutorial/delphi_generics_tutorial.html" class="external text" title="http://www.felix-colibri.com/papers/oop_components/delphi_generics_tutorial/delphi_generics_tutorial.html" rel="nofollow">Delphi Generics</a>, Felix COLIBRI, 2008</li>
</ul>
<p><a name="Notes" id="Notes"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Generic_programming&amp;action=edit&amp;section=32" title="Edit section: Notes">edit</a>]</span> <span class="mw-headline">Notes</span></h2>
<ol class="references">
<li id="cite_note-0"><b><a href="#cite_ref-0" title="">^</a></b> <a href="http://www.ondotnet.com/pub/a/dotnet/2005/10/17/interview-with-anders-hejlsberg.html" class="external text" title="http://www.ondotnet.com/pub/a/dotnet/2005/10/17/interview-with-anders-hejlsberg.html" rel="nofollow">C#: Yesterday, Today, and Tomorrow: An Interview with Anders Hejlsberg</a></li>
<li id="cite_note-1"><b><a href="#cite_ref-1" title="">^</a></b> <a href="http://www.artima.com/intv/generics2.html" class="external text" title="http://www.artima.com/intv/generics2.html" rel="nofollow">Generics in C#, Java, and C++</a></li>
<li id="cite_note-2"><b><a href="#cite_ref-2" title="">^</a></b> <a href="http://msdn2.microsoft.com/en-us/library/d5x73970.aspx" class="external text" title="http://msdn2.microsoft.com/en-us/library/d5x73970.aspx" rel="nofollow">Constraints on Type Parameters (C# Programming Guide)</a></li>
<li id="cite_note-3"><b><a href="#cite_ref-3" title="">^</a></b> <a href="http://www.cs.uu.nl/research/projects/generic-haskell/compiler/diamond/GHUsersGuide.pdf" class="external text" title="http://www.cs.uu.nl/research/projects/generic-haskell/compiler/diamond/GHUsersGuide.pdf" rel="nofollow">The Generic Haskell User's Guide</a></li>
</ol>


<!-- 
NewPP limit report
Preprocessor node count: 499/1000000
Post-expand include size: 8409/2048000 bytes
Template argument size: 1646/2048000 bytes
Expensive parser function count: 3/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:105837-0!1!0!default!!en!2 and timestamp 20090403110026 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Generic_programming">http://en.wikipedia.org/wiki/Generic_programming</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Generic_programming" title="Category:Generic programming">Generic programming</a></span></div><div id="mw-hidden-catlinks" class="mw-hidden-cats-hidden">Hidden categories:&#32;<span dir='ltr'><a href="/wiki/Category:All_articles_with_unsourced_statements" title="Category:All articles with unsourced statements">All articles with unsourced statements</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_unsourced_statements_since_March_2009" title="Category:Articles with unsourced statements since March 2009">Articles with unsourced statements since March 2009</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Generic_programming" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Generic_programming" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Generic_programming&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Generic_programming&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Generic_programming" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Generic_programming" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Generic_programming" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Generic_programming&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Generic_programming&amp;oldid=281479428" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Generic_programming&amp;id=281479428">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-cs"><a href="http://cs.wikipedia.org/wiki/Generick%C3%A9_programov%C3%A1n%C3%AD">Česky</a></li>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/Generische_Programmierung">Deutsch</a></li>
				<li class="interwiki-et"><a href="http://et.wikipedia.org/wiki/Mall_(programmeerimine)">Eesti</a></li>
				<li class="interwiki-es"><a href="http://es.wikipedia.org/wiki/Programaci%C3%B3n_gen%C3%A9rica">Español</a></li>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/G%C3%A9n%C3%A9ricit%C3%A9">Français</a></li>
				<li class="interwiki-ko"><a href="http://ko.wikipedia.org/wiki/%EC%A0%9C%EB%84%A4%EB%A6%AD_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D">한국어</a></li>
				<li class="interwiki-nl"><a href="http://nl.wikipedia.org/wiki/Genericiteit_(programmeertaalvoorziening)">Nederlands</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%AA%E3%83%83%E3%82%AF%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0">日本語</a></li>
				<li class="interwiki-no"><a href="http://no.wikipedia.org/wiki/Generisk_programmering">‪Norsk (bokmål)‬</a></li>
				<li class="interwiki-pl"><a href="http://pl.wikipedia.org/wiki/Programowanie_uog%C3%B3lnione">Polski</a></li>
				<li class="interwiki-pt"><a href="http://pt.wikipedia.org/wiki/Programa%C3%A7%C3%A3o_gen%C3%A9rica">Português</a></li>
				<li class="interwiki-ru"><a href="http://ru.wikipedia.org/wiki/%D0%9E%D0%B1%D0%BE%D0%B1%D1%89%D1%91%D0%BD%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5">Русский</a></li>
				<li class="interwiki-sr"><a href="http://sr.wikipedia.org/wiki/%D0%93%D0%B5%D0%BD%D0%B5%D1%80%D0%B8%D1%87%D0%BA%D0%BE_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%B8%D1%80%D0%B0%D1%9A%D0%B5">Српски / Srpski</a></li>
				<li class="interwiki-uk"><a href="http://uk.wikipedia.org/wiki/%D0%A3%D0%B7%D0%B0%D0%B3%D0%B0%D0%BB%D1%8C%D0%BD%D0%B5%D0%BD%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D1%83%D0%B2%D0%B0%D0%BD%D0%BD%D1%8F">Українська</a></li>
				<li class="interwiki-zh-yue"><a href="http://zh-yue.wikipedia.org/wiki/%E9%80%9A%E7%94%A8%E7%B7%A8%E7%A8%8B">粵語</a></li>
				<li class="interwiki-zh"><a href="http://zh.wikipedia.org/wiki/%E6%B3%9B%E5%9E%8B">中文</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 3 April 2009, at 11:00.</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv220 in 0.070 secs. --></body></html>
