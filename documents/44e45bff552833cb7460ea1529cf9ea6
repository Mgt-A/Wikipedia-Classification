<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Fixed point combinator,Alan Turing,Anonymous recursion,Applicative-order evaluation,Church encoding,Combinatory logic,Eigenfunction,Eta expansion,Evaluation strategy,Fixed point (mathematics),Fixed point iteration" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Fixed_point_combinator&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Fixed_point_combinator&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Fixed point combinator - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Fixed_point_combinator";
		var wgTitle = "Fixed point combinator";
		var wgAction = "view";
		var wgArticleId = "150287";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 283660739;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
<style type="text/css">/*<![CDATA[*/
.source-ocaml {line-height: normal;}
.source-ocaml li, .source-ocaml pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for ocaml
 * CSS class: source-ocaml, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-ocaml .de1, .source-ocaml .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-ocaml  {}
.source-ocaml .head {}
.source-ocaml .foot {}
.source-ocaml .imp {font-weight: bold; color: red;}
.source-ocaml .ln-xtra {color: #cc0; background-color: #ffc;}
.source-ocaml li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-ocaml li.li2 {font-weight: bold;}
.source-ocaml .kw1 {color: #06c; font-weight: bold;}
.source-ocaml .coMULTI {color: #5d478b; font-style: italic;}
.source-ocaml .br0 {color: #a52a2a;}
.source-ocaml .st0 {color: #3cb371;}
.source-ocaml .nu0 {color: #c6c;}
.source-ocaml .me1 {color: #060;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-python {line-height: normal;}
.source-python li, .source-python pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for python
 * CSS class: source-python, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-python .de1, .source-python .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-python  {}
.source-python .head {}
.source-python .foot {}
.source-python .imp {font-weight: bold; color: red;}
.source-python .ln-xtra {color: #cc0; background-color: #ffc;}
.source-python li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-python li.li2 {font-weight: bold;}
.source-python .kw1 {color: #ff7700;font-weight:bold;}
.source-python .kw2 {color: #008000;}
.source-python .kw3 {color: #dc143c;}
.source-python .kw4 {color: #0000cd;}
.source-python .co1 {color: #808080; font-style: italic;}
.source-python .coMULTI {color: #808080; font-style: italic;}
.source-python .es0 {color: #000099; font-weight: bold;}
.source-python .br0 {color: #66cc66;}
.source-python .st0 {color: #483d8b;}
.source-python .nu0 {color: #ff4500;}
.source-python .me1 {color: black;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style>		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Fixed_point_combinator skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Fixed point combinator</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<div class="dablink">"Y combinator" redirects here. For the technology venture capital firm, see <a href="/wiki/Y_Combinator" title="Y Combinator">Y Combinator</a>.</div>
<p>A <b>fixed point combinator</b> (or <b>fixed-point operator</b>) is a <a href="/wiki/Higher-order_function" title="Higher-order function">higher-order function</a> that computes a <a href="/wiki/Fixed_point_(mathematics)" title="Fixed point (mathematics)">fixed point</a> of other functions. This operation is relevant in <a href="/wiki/Programming_language_theory" title="Programming language theory">programming language theory</a> because it allows the implementation of <a href="/wiki/Recursion" title="Recursion">recursion</a> in the form of a <a href="/wiki/Rewrite_rule" title="Rewrite rule">rewrite rule</a>, without explicit support from the language's runtime engine.</p>
<p>A <i>fixed point</i> of a function <b>f</b> is a value <i>x</i> such that <b>f</b>(<i>x</i>) = <i>x</i>. For example, 0 and 1 are fixed points of the function <b>f</b>(<i>x</i>) = x<sup>2</sup>, because 0<sup>2</sup> = 0 and 1<sup>2</sup> = 1. Whereas a fixed-point of a first-order function (a function on "simple" values such as integers) is a first-order value, a fixed point of a higher-order function <b>f</b> is <i>another function</i> <b>p</b> such that <b>f</b>(<b>p</b>) = <b>p</b>. A fixed point combinator, then, is a function <b>g</b> which produces such a fixed point <b>p</b> for any function <b>f</b>:</p>
<dl>
<dd><b>p</b> = <b>g</b>(<b>f</b>), <b>f</b>(<b>p</b>) = <b>p</b></dd>
</dl>
<p>or, alternately:</p>
<dl>
<dd><b>f</b>(<b>g</b>(<b>f</b>)) = <b>g</b>(<b>f</b>).</dd>
</dl>
<p>Fixed point combinators allow the definition of anonymous <a href="/wiki/Recursion" title="Recursion">recursive functions</a> (see the <a href="#Example" title="">example below</a>). Somewhat surprisingly, they can be defined with non-recursive <a href="/wiki/Lambda_abstraction" title="Lambda abstraction" class="mw-redirect">lambda abstractions</a>.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Y_combinator"><span class="tocnumber">1</span> <span class="toctext">Y combinator</span></a></li>
<li class="toclevel-1"><a href="#Existence_of_fixed_point_combinators"><span class="tocnumber">2</span> <span class="toctext">Existence of fixed point combinators</span></a></li>
<li class="toclevel-1"><a href="#Example"><span class="tocnumber">3</span> <span class="toctext">Example</span></a></li>
<li class="toclevel-1"><a href="#Other_fixed_point_combinators"><span class="tocnumber">4</span> <span class="toctext">Other fixed point combinators</span></a></li>
<li class="toclevel-1"><a href="#Example_of_encoding_via_recursive_types"><span class="tocnumber">5</span> <span class="toctext">Example of encoding via recursive types</span></a></li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">6</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">7</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Y_combinator" id="Y_combinator"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Fixed_point_combinator&amp;action=edit&amp;section=1" title="Edit section: Y combinator">edit</a>]</span> <span class="mw-headline">Y combinator</span></h2>
<p>One well-known (and perhaps the simplest) fixed point combinator in the <a href="/wiki/Untyped_lambda_calculus" title="Untyped lambda calculus" class="mw-redirect">untyped lambda calculus</a> is called the <b>Y</b> combinator. It was discovered by <a href="/wiki/Haskell_Curry" title="Haskell Curry">Haskell B. Curry</a>, and is defined as</p>
<dl>
<dd><b>Y</b> = λf·(λx·f (x x)) (λx·f (x x))</dd>
</dl>
<p>We can see that this function acts as a fixed point combinator by expanding it for an example function <i>g</i>:</p>
<pre>
<b>Y</b> g = (λf . (λx . f (x x)) (λx . f (x x))) g
<b>Y</b> g = (λx . g (x x)) (λx . g (x x)) (β-reduction of λf - applied main function to g)
<b>Y</b> g = (λy . g (y y)) (λx . g (x x)) (α-conversion - renamed bound variable)
<b>Y</b> g = g ((λx . g (x x)) (λx . g (x x))) (β-reduction of λy - applied left function to right function)
<b>Y</b> g = g (<b>Y</b> g) (definition of <b>Y</b>)
</pre>
<p>Note that the <b>Y</b> combinator is intended for the call-by-name <a href="/wiki/Evaluation_strategy" title="Evaluation strategy">evaluation strategy</a>, since (<b>Y</b> <i>g</i>) diverges (for any <i>g</i>) in call-by-value settings.</p>
<p><a name="Existence_of_fixed_point_combinators" id="Existence_of_fixed_point_combinators"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Fixed_point_combinator&amp;action=edit&amp;section=2" title="Edit section: Existence of fixed point combinators">edit</a>]</span> <span class="mw-headline">Existence of fixed point combinators</span></h2>
<p>In certain mathematical formalizations of computation, such as the <a href="/wiki/Untyped_lambda_calculus" title="Untyped lambda calculus" class="mw-redirect">untyped lambda calculus</a> and <a href="/wiki/Combinatory_logic" title="Combinatory logic">combinatory logic</a>, every expression can be considered a higher-order function. In these formalizations, the existence of a fixed-point combinator means that <i>every function has at least one fixed point;</i> a function may have more than one distinct fixed point.</p>
<p>In some other systems, for example the <a href="/wiki/Simply_typed_lambda_calculus" title="Simply typed lambda calculus">simply typed lambda calculus</a>, a well-typed fixed-point combinator cannot be written. In those systems any support for recursion must be explicitly added to the language. In still others, such as the simply-typed lambda calculus extended with <a href="/wiki/Recursive_type" title="Recursive type">recursive types</a>, fixed-point operators can be written, but the type of a "useful" fixed-point operator (one whose application always returns) may be restricted.</p>
<p>In a language which supports <a href="/wiki/Lazy_evaluation" title="Lazy evaluation">lazy evaluation</a>, the <b>Y</b> combinator can be written with type ∀a.(a→a)→a. For example, the following Haskell code correctly implements the Y combinator:</p>
<pre>
fix :: (a -&gt; a) -&gt; a
fix f = f (fix f)

-- "fix (const 9)" evaluates to "9"

fact f 0 = 1
fact f x = x * f (x-1)

-- "(fix fact) 5" evaluates to "120"
</pre>
<p>Note that this definition doesn't infinitely loop because of laziness. However, the above version loops forever when applied in a <a href="/wiki/Strict_programming_language" title="Strict programming language">strict programming language</a> -- every application <b>Y</b>(<b>f</b>) expands to <b>f</b>(<b>Y</b>(<b>f</b>)). The argument to <b>f</b> is then expanded, as required for a call-by-value language, yielding <b>f</b>(<b>f</b>(<b>Y</b>(<b>f</b>))). This process iterates "forever" (until the system runs out of memory), without ever actually evaluating the body of <b>f</b>.</p>
<p>The strict version of the <b>Y</b> combinator has the type ∀a.∀b.((a→b)→(a→b))→(a→b) (in other words, it only works on a function which itself takes and returns a function). For example, the following OCaml code implements this version of the Y combinator:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-ocaml">
<span class="kw1">let</span> <span class="kw1">rec</span> fix f x = f <span class="br0">(</span>fix f<span class="br0">)</span> x
 
<span class="kw1">let</span> fact f = <span class="kw1">function</span>
 <span class="nu0">0</span> -&gt; <span class="nu0">1</span>
 | x -&gt; x * f <span class="br0">(</span>x<span class="nu0">-1</span><span class="br0">)</span>
 
<span class="kw1">let</span> _ = <span class="br0">(</span>fix fact<span class="br0">)</span> <span class="nu0">5</span> <span class="coMULTI">(* evaluates to "120" *)</span>
</pre></div>
<p><a name="Example" id="Example"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Fixed_point_combinator&amp;action=edit&amp;section=3" title="Edit section: Example">edit</a>]</span> <span class="mw-headline">Example</span></h2>
<p>Consider the factorial function (under <a href="/wiki/Church_encoding" title="Church encoding">Church encoding</a>). The usual recursive mathematical equation is</p>
<dl>
<dd><b>fact</b>(<i>n</i>) = if <i>n</i>=0 then 1 else <i>n</i> * <b>fact</b>(<i>n</i>-1)</dd>
</dl>
<p>We can express a "single step" of this recursion in lambda calculus as</p>
<dl>
<dd><b>F</b> = λf. λx. (ISZERO x) 1 (MULT x (f (PRED x))),</dd>
</dl>
<p>where "f" is a place-holder argument for the factorial function to be passed to itself. The function <b>F</b> performs a single step in the evaluation of the recursive formula. Applying the <b>fix</b> operator gives</p>
<dl>
<dd><b>fix</b>(<b>F</b>)(n) = <b>F</b>(<b>fix</b>(<b>F</b>))(n)</dd>
<dd><b>fix</b>(<b>F</b>)(n) = λx. (ISZERO x) 1 (MULT x (<b>fix</b>(<b>F</b>) (PRED x)))(n)</dd>
<dd><b>fix</b>(<b>F</b>)(n) = (ISZERO n) 1 (MULT n (<b>fix</b>(<b>F</b>) (PRED n)))</dd>
</dl>
<p>We can abbreviate <b>fix</b>(<b>F</b>) as <b>fact</b>, and we have</p>
<dl>
<dd><b>fact</b>(n) = (ISZERO n) 1 (MULT n (<b>fact</b>(PRED n)))</dd>
</dl>
<p>So we see that a fixed-point operator really does turn our non-recursive "factorial step" function into a recursive function satisfying the intended equation.</p>
<p><a name="Other_fixed_point_combinators" id="Other_fixed_point_combinators"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Fixed_point_combinator&amp;action=edit&amp;section=4" title="Edit section: Other fixed point combinators">edit</a>]</span> <span class="mw-headline">Other fixed point combinators</span></h2>
<p>A version of the <b>Y</b> combinator that can be used in call-by-value (<a href="/wiki/Applicative-order_evaluation" title="Applicative-order evaluation" class="mw-redirect">applicative-order</a>) evaluation is given by <a href="/wiki/Eta_expansion" title="Eta expansion" class="mw-redirect">η-expansion</a> of part of the ordinary <b>Y</b> combinator:</p>
<dl>
<dd><b>Z</b> = λf. (λx. f (λy. x x y)) (λx. f (λy. x x y))</dd>
</dl>
<p>Here is an example of this in Python:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-python">
&gt;&gt;&gt; Z = <span class="kw1">lambda</span> f: <span class="br0">(</span><span class="kw1">lambda</span> x: f<span class="br0">(</span><span class="kw1">lambda</span> *args: x<span class="br0">(</span>x<span class="br0">)</span><span class="br0">(</span>*args<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">(</span><span class="kw1">lambda</span> x: f<span class="br0">(</span><span class="kw1">lambda</span> *args: x<span class="br0">(</span>x<span class="br0">)</span><span class="br0">(</span>*args<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>
&gt;&gt;&gt; fact = <span class="kw1">lambda</span> f: <span class="kw1">lambda</span> x: <span class="nu0">1</span> <span class="kw1">if</span> x == <span class="nu0">0</span> <span class="kw1">else</span> x * f<span class="br0">(</span>x<span class="nu0">-1</span><span class="br0">)</span>
&gt;&gt;&gt; Z<span class="br0">(</span>fact<span class="br0">)</span><span class="br0">(</span><span class="nu0">5</span><span class="br0">)</span>
<span class="nu0">120</span>
</pre></div>
<p>The <b>Y</b> combinator can be expressed in the <a href="/wiki/SKI_combinator_calculus" title="SKI combinator calculus">SKI-calculus</a> as</p>
<dl>
<dd><b>Y</b> = S (K (S I I)) (S (S (K S) K) (K (S I I)))</dd>
</dl>
<p>The simplest fixed point combinator in the SK-calculus, found by <a href="/w/index.php?title=John_Tromp&amp;action=edit&amp;redlink=1" class="new" title="John Tromp (page does not exist)">John Tromp</a>, is</p>
<dl>
<dd><b>Y'</b> = S S K (S (K (S S (S (S S K)))) K)</dd>
</dl>
<p>which corresponds to the lambda expression</p>
<dl>
<dd><b>Y'</b> = (λx. λy. x y x) (λy. λx. y (x y x))</dd>
</dl>
<p>Another common fixed point combinator is the Turing fixed-point combinator (named after its discoverer, <a href="/wiki/Alan_Turing" title="Alan Turing">Alan Turing</a>):</p>
<dl>
<dd><b>Θ</b> = (λx. λy. (y (x x y))) (λx. λy. (y (x x y)))</dd>
</dl>
<p>It also has a simple call-by-value form:</p>
<dl>
<dd><b>Θ</b><sub><b>v</b></sub> = (λx. λy. (y (λz. x x y z))) (λx. λy. (y (λz. x x y z)))</dd>
</dl>
<p>Fixed point combinators are not especially rare (there are infinitely many of them). Some, such as this one (constructed by <a href="/w/index.php?title=Jan_Willem_Klop&amp;action=edit&amp;redlink=1" class="new" title="Jan Willem Klop (page does not exist)">Jan Willem Klop</a>) are useful chiefly for amusement:</p>
<dl>
<dd><b>Y<sub>k</sub></b> = (L L L L L L L L L L L L L L L L L L L L L L L L L L)</dd>
</dl>
<p>where:</p>
<dl>
<dd>L = λabcdefghijklmnopqstuvwxyzr. (r (t h i s i s a f i x e d p o i n t c o m b i n a t o r))</dd>
</dl>
<p><a name="Example_of_encoding_via_recursive_types" id="Example_of_encoding_via_recursive_types"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Fixed_point_combinator&amp;action=edit&amp;section=5" title="Edit section: Example of encoding via recursive types">edit</a>]</span> <span class="mw-headline">Example of encoding via recursive types</span></h2>
<p>In systems with recursive types, it's possible to type the Y combinator by appropriately accounting for the recursion at the type level. The need to self-apply the variable x can be managed using a type (Rec a) which is defined so as to be isomorphic to (Rec a -&gt; a).</p>
<p>For example, in the following Haskell code, we have In and out being the names of the two directions of the isomorphism, with types:</p>
<pre>
In :: (Rec a -&gt; a) -&gt; Rec a
out :: Rec a -&gt; (Rec a -&gt; a)
</pre>
<p>which lets us write:</p>
<pre>
newtype Rec a = In { out :: Rec a -&gt; a }

y :: (a -&gt; a) -&gt; a
y = \f -&gt; (\x -&gt; f (out x x)) (In (\x -&gt; f (out x x)))
</pre>
<p>Or equivalently in OCaml:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-ocaml">
<span class="kw1">type</span> 'a recc = <span class="kw1">In</span> <span class="kw1">of</span> <span class="br0">(</span>'a recc -&gt; 'a<span class="br0">)</span>
<span class="kw1">let</span> out <span class="br0">(</span><span class="kw1">In</span> x<span class="br0">)</span> = x
 
<span class="kw1">let</span> y f = <span class="br0">(</span><span class="kw1">fun</span> x a -&gt; f <span class="br0">(</span>out x x<span class="br0">)</span> a<span class="br0">)</span> <span class="br0">(</span><span class="kw1">In</span> <span class="br0">(</span><span class="kw1">fun</span> x a -&gt; f <span class="br0">(</span>out x x<span class="br0">)</span> a<span class="br0">)</span><span class="br0">)</span>
</pre></div>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Fixed_point_combinator&amp;action=edit&amp;section=6" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<ul>
<li><a href="/wiki/Fixed_point_(mathematics)" title="Fixed point (mathematics)">Fixed point (mathematics)</a></li>
<li><a href="/wiki/Fixed_point_iteration" title="Fixed point iteration">Fixed point iteration</a></li>
<li><a href="/wiki/Combinatory_logic" title="Combinatory logic">combinatory logic</a></li>
<li><a href="/wiki/Untyped_lambda_calculus" title="Untyped lambda calculus" class="mw-redirect">untyped lambda calculus</a></li>
<li><a href="/wiki/Typed_lambda_calculus" title="Typed lambda calculus">typed lambda calculus</a></li>
<li><a href="/wiki/Anonymous_recursion" title="Anonymous recursion">anonymous recursion</a></li>
<li><a href="/wiki/Eigenfunction" title="Eigenfunction">eigenfunction</a></li>
</ul>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Fixed_point_combinator&amp;action=edit&amp;section=7" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<ul>
<li><a href="http://www.latrobe.edu.au/philosophy/phimvt/joy/j05cmp.html" class="external free" title="http://www.latrobe.edu.au/philosophy/phimvt/joy/j05cmp.html" rel="nofollow">http://www.latrobe.edu.au/philosophy/phimvt/joy/j05cmp.html</a></li>
<li><a href="http://okmij.org/ftp/Computation/fixed-point-combinators.html" class="external free" title="http://okmij.org/ftp/Computation/fixed-point-combinators.html" rel="nofollow">http://okmij.org/ftp/Computation/fixed-point-combinators.html</a></li>
<li><a href="http://matt.might.net/articles/implementation-of-recursive-fixed-point-y-combinator-in-javascript-for-memoization/" class="external text" title="http://matt.might.net/articles/implementation-of-recursive-fixed-point-y-combinator-in-javascript-for-memoization/" rel="nofollow">"Fixed-point combinators in Javascript"</a></li>
<li><a href="http://www.cs.brown.edu/courses/cs173/2002/Lectures/2002-10-28-lc.pdf" class="external free" title="http://www.cs.brown.edu/courses/cs173/2002/Lectures/2002-10-28-lc.pdf" rel="nofollow">http://www.cs.brown.edu/courses/cs173/2002/Lectures/2002-10-28-lc.pdf</a></li>
<li><a href="http://www.mactech.com/articles/mactech/Vol.07/07.05/LambdaCalculus/" class="external free" title="http://www.mactech.com/articles/mactech/Vol.07/07.05/LambdaCalculus/" rel="nofollow">http://www.mactech.com/articles/mactech/Vol.07/07.05/LambdaCalculus/</a></li>
<li><a href="http://www.csse.monash.edu.au/~lloyd/tildeFP/Lambda/Examples/Y/" class="external free" title="http://www.csse.monash.edu.au/~lloyd/tildeFP/Lambda/Examples/Y/" rel="nofollow">http://www.csse.monash.edu.au/~lloyd/tildeFP/Lambda/Examples/Y/</a> (executable)</li>
<li><a href="http://www.ece.uc.edu/~franco/C511/html/Scheme/ycomb.html" class="external free" title="http://www.ece.uc.edu/~franco/C511/html/Scheme/ycomb.html" rel="nofollow">http://www.ece.uc.edu/~franco/C511/html/Scheme/ycomb.html</a></li>
<li><a href="http://use.perl.org/~Aristotle/journal/30896" class="external text" title="http://use.perl.org/~Aristotle/journal/30896" rel="nofollow">an example and discussion of a perl implementation</a></li>
<li><a href="http://www.ps.uni-sb.de/courses/sem-prog97/material/YYWorks.ps" class="external text" title="http://www.ps.uni-sb.de/courses/sem-prog97/material/YYWorks.ps" rel="nofollow">"A Lecture on the Why of Y"</a></li>
<li><a href="http://www.eecs.harvard.edu/~cduan/technical/ruby/ycombinator.shtml" class="external text" title="http://www.eecs.harvard.edu/~cduan/technical/ruby/ycombinator.shtml" rel="nofollow">"A Use of the Y Combinator in Ruby"</a></li>
</ul>


<!-- 
NewPP limit report
Preprocessor node count: 46/1000000
Post-expand include size: 281/2048000 bytes
Template argument size: 190/2048000 bytes
Expensive parser function count: 0/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:150287-0!1!0!default!!en!2 and timestamp 20090417042057 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Fixed_point_combinator">http://en.wikipedia.org/wiki/Fixed_point_combinator</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Lambda_calculus" title="Category:Lambda calculus">Lambda calculus</a></span> | <span dir='ltr'><a href="/wiki/Category:Mathematics_of_computing" title="Category:Mathematics of computing">Mathematics of computing</a></span> | <span dir='ltr'><a href="/wiki/Category:Fixed_points" title="Category:Fixed points">Fixed points</a></span> | <span dir='ltr'><a href="/wiki/Category:Combinatory_logic" title="Category:Combinatory logic">Combinatory logic</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Fixed_point_combinator" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Fixed_point_combinator" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Fixed_point_combinator&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Fixed_point_combinator&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Fixed_point_combinator" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Fixed_point_combinator" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Fixed_point_combinator" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Fixed_point_combinator&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Fixed_point_combinator&amp;oldid=283660739" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Fixed_point_combinator&amp;id=283660739">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-et"><a href="http://et.wikipedia.org/wiki/P%C3%BCsipunktikombinaator">Eesti</a></li>
				<li class="interwiki-zh"><a href="http://zh.wikipedia.org/wiki/%E4%B8%8D%E5%8A%A8%E7%82%B9%E7%BB%84%E5%90%88%E5%AD%90">中文</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 13 April 2009, at 22:24 (UTC).</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv108 in 0.303 secs. --></body></html>
