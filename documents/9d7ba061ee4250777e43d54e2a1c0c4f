<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Abstraction (computer science),Articles with specifically-marked weasel-worded phrases since March 2009,Abstract data type,Abstract interpretation,Abstraction,Abstraction (mathematics),Abstraction inversion,Abstraction layer,Ada programming language,Algorithm,Aphorism" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Abstraction_(computer_science)&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Abstraction_(computer_science)&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Abstraction (computer science) - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Abstraction_(computer_science)";
		var wgTitle = "Abstraction (computer science)";
		var wgAction = "view";
		var wgArticleId = "60491";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 280793845;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
<style type="text/css">/*<![CDATA[*/
.source-java {line-height: normal;}
.source-java li, .source-java pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for java
 * CSS class: source-java, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-java .de1, .source-java .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-java  {}
.source-java .head {}
.source-java .foot {}
.source-java .imp {font-weight: bold; color: red;}
.source-java .ln-xtra {color: #cc0; background-color: #ffc;}
.source-java li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-java li.li2 {font-weight: bold;}
.source-java .kw1 {color: #b1b100;}
.source-java .kw2 {color: #000000; font-weight: bold;}
.source-java .kw3 {color: #aaaadd; font-weight: bold;}
.source-java .kw4 {color: #993333;}
.source-java .co1 {color: #808080; font-style: italic;}
.source-java .co2 {color: #a1a100;}
.source-java .coMULTI {color: #808080; font-style: italic;}
.source-java .es0 {color: #000099; font-weight: bold;}
.source-java .br0 {color: #66cc66;}
.source-java .st0 {color: #ff0000;}
.source-java .nu0 {color: #cc66cc;}
.source-java .me1 {color: #006600;}
.source-java .me2 {color: #006600;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style>		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Abstraction_computer_science skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Abstraction (computer science)</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<p>In <a href="/wiki/Computer_science" title="Computer science">computer science</a>, the mechanism and practice of <b>abstraction</b> reduce and factor out details so that one can focus on a few concepts at a time.</p>
<p>The following English definition of abstraction helps to understand how this term applies to computer science, IT and objects:</p>
<dl>
<dd><i>abstraction - a concept or idea not associated with any specific instance</i><sup id="cite_ref-0" class="reference"><a href="#cite_note-0" title=""><span>[</span>1<span>]</span></a></sup></dd>
</dl>
<p>The concept originated by analogy with <a href="/wiki/Abstraction_(mathematics)" title="Abstraction (mathematics)">abstraction</a> in <a href="/wiki/Mathematics" title="Mathematics">mathematics</a>. The mathematical technique of abstraction begins with mathematical <a href="/wiki/Definition" title="Definition">definitions</a>; this has the fortunate effect of finessing some of the vexing philosophical issues of <a href="/wiki/Abstraction" title="Abstraction">abstraction</a>. For example, in both computing and in mathematics, <a href="/wiki/Number" title="Number">numbers</a> are concepts in the <a href="/wiki/Programming_language" title="Programming language">programming languages</a>, as founded in mathematics. Implementation details depend on the hardware and software, but this is not a restriction because the computing concept of number is still based on the mathematical concept.</p>
<p>Roughly speaking, abstraction can apply to control or to data: <b>Control abstraction</b> is the abstraction of actions while <b>data abstraction</b> is that of data structures (e.g. datatypes [vectors and pixels]).</p>
<ul>
<li>Control abstraction in the case of <a href="/wiki/Structured_programming" title="Structured programming">structured programming</a> involves the use of <a href="/wiki/Subprogram" title="Subprogram" class="mw-redirect">subprograms</a> and formatted <a href="/wiki/Control_flow" title="Control flow">control flows</a> to simulate desired concepts of surreal features or interactions in reality or in some abstract world</li>
<li>Data abstraction allows handling data bits in meaningful ways. For example, it is the basic motivation behind <a href="/wiki/Datatype" title="Datatype" class="mw-redirect">datatype</a>.</li>
</ul>
<p>One can regard <a href="/wiki/Object-oriented_programming" title="Object-oriented programming">object-oriented programming</a> as an attempt to abstract both data and code.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Rationale"><span class="tocnumber">1</span> <span class="toctext">Rationale</span></a></li>
<li class="toclevel-1"><a href="#Language_features"><span class="tocnumber">2</span> <span class="toctext">Language features</span></a>
<ul>
<li class="toclevel-2"><a href="#Programming_languages"><span class="tocnumber">2.1</span> <span class="toctext">Programming languages</span></a></li>
<li class="toclevel-2"><a href="#Specification_methods"><span class="tocnumber">2.2</span> <span class="toctext">Specification methods</span></a></li>
<li class="toclevel-2"><a href="#Specification_languages"><span class="tocnumber">2.3</span> <span class="toctext">Specification languages</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Control_abstraction"><span class="tocnumber">3</span> <span class="toctext">Control abstraction</span></a>
<ul>
<li class="toclevel-2"><a href="#Structured_programming"><span class="tocnumber">3.1</span> <span class="toctext">Structured programming</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Data_abstraction"><span class="tocnumber">4</span> <span class="toctext">Data abstraction</span></a></li>
<li class="toclevel-1"><a href="#Abstraction_in_object_oriented_programming"><span class="tocnumber">5</span> <span class="toctext">Abstraction in object oriented programming</span></a>
<ul>
<li class="toclevel-2"><a href="#Object-oriented_design"><span class="tocnumber">5.1</span> <span class="toctext">Object-oriented design</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Considerations"><span class="tocnumber">6</span> <span class="toctext">Considerations</span></a></li>
<li class="toclevel-1"><a href="#Levels_of_abstraction"><span class="tocnumber">7</span> <span class="toctext">Levels of abstraction</span></a>
<ul>
<li class="toclevel-2"><a href="#Database_systems"><span class="tocnumber">7.1</span> <span class="toctext">Database systems</span></a></li>
<li class="toclevel-2"><a href="#Layered_architecture"><span class="tocnumber">7.2</span> <span class="toctext">Layered architecture</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">8</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#Further_reading"><span class="tocnumber">9</span> <span class="toctext">Further reading</span></a></li>
<li class="toclevel-1"><a href="#Notes"><span class="tocnumber">10</span> <span class="toctext">Notes</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Rationale" id="Rationale"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Abstraction_(computer_science)&amp;action=edit&amp;section=1" title="Edit section: Rationale">edit</a>]</span> <span class="mw-headline">Rationale</span></h2>
<p>Computing mostly operates independently of the concrete world: The hardware implements a <a href="/wiki/Model_of_computation" title="Model of computation">model of computation</a> that is interchangeable with others. The software is structured in <a href="/wiki/Software_architecture" title="Software architecture">architectures</a> to enable humans to create the enormous systems by concentration on a few issues at a time. These architectures are made of specific choices of abstractions. <a href="/wiki/Greenspun%27s_Tenth_Rule" title="Greenspun's Tenth Rule">Greenspun's Tenth Rule</a> is an <a href="/wiki/Aphorism" title="Aphorism">aphorism</a> on how such an architecture is both inevitable and complex.</p>
<p>A central form of abstraction in computing is language abstraction: new artificial languages are developed to express specific aspects of a system. <i><a href="/wiki/Modeling_languages" title="Modeling languages" class="mw-redirect">Modeling languages</a></i> help in planning. <i><a href="/wiki/Computer_language" title="Computer language" class="mw-redirect">Computer languages</a></i> can be processed with a computer. An example of this abstraction process is the generational development of <a href="/wiki/Programming_language" title="Programming language">programming languages</a> from the <a href="/wiki/First-generation_programming_language" title="First-generation programming language">machine language</a> to the <a href="/wiki/Second-generation_programming_language" title="Second-generation programming language">assembly language</a> and the <a href="/wiki/Third-generation_programming_language" title="Third-generation programming language">high-level language</a>. Each stage can be used as a stepping stone for the next stage. The language abstraction continues for example in <a href="/wiki/Scripting_language" title="Scripting language">scripting languages</a> and <a href="/wiki/Domain-specific_programming_language" title="Domain-specific programming language" class="mw-redirect">domain-specific programming languages</a>.</p>
<p>Within a programming language, some features let the programmer create new abstractions. These include the <a href="/wiki/Subroutine" title="Subroutine">subroutine</a>, the <a href="/wiki/Module_(programming)" title="Module (programming)" class="mw-redirect">module</a>, and the <a href="/wiki/Software_component" title="Software component" class="mw-redirect">software component</a>. Some other abstractions such as <a href="/wiki/Software_design_pattern" title="Software design pattern" class="mw-redirect">software design patterns</a> and <a href="/wiki/Software_architecture#Architecture_examples" title="Software architecture">architectural styles</a> remain invisible to a programming language and operate only in the design of a system.</p>
<p>Some abstractions try to limit the breadth of concepts a programmer needs by completely hiding the abstractions they in turn are built on. <a href="/wiki/Joel_Spolsky" title="Joel Spolsky">Joel Spolsky</a> has criticised these efforts by claiming that all abstractions are <i><a href="/wiki/Leaky_abstraction" title="Leaky abstraction">leaky</a></i> — that they can never completely hide the details below; however this does not negate the usefulness of abstraction. Some abstractions are designed to interoperate with others, for example a programming language may contain a <a href="/wiki/Foreign_function_interface" title="Foreign function interface">foreign function interface</a> for making calls to the lower-level language.</p>
<p><a name="Language_features" id="Language_features"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Abstraction_(computer_science)&amp;action=edit&amp;section=2" title="Edit section: Language features">edit</a>]</span> <span class="mw-headline">Language features</span></h2>
<p><a name="Programming_languages" id="Programming_languages"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Abstraction_(computer_science)&amp;action=edit&amp;section=3" title="Edit section: Programming languages">edit</a>]</span> <span class="mw-headline">Programming languages</span></h3>
<div class="rellink noprint relarticle mainarticle">Main article: <a href="/wiki/Programming_language" title="Programming language">Programming language</a></div>
<p>Different programming languages provide different types of abstraction, depending on the intended applications for the language. For example:</p>
<ul>
<li>In <a href="/wiki/Object-oriented_programming_language" title="Object-oriented programming language">object-oriented programming languages</a> such as <a href="/wiki/C%2B%2B" title="C++">C++</a>, <a href="/wiki/Object_Pascal" title="Object Pascal">Object Pascal</a>, or <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a>, the concept of <b>abstraction</b> has itself become a declarative statement - using the <a href="/wiki/Keyword_(computer_programming)" title="Keyword (computer programming)">keywords</a> <i><code>virtual</code></i> (in <a href="/wiki/C%2B%2B" title="C++">C++</a>) or <i><code>abstract</code></i> (in <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a>). After such a declaration, it is the responsibility of the programmer to implement a <a href="/wiki/Class_(computer_science)" title="Class (computer science)">class</a> to instantiate the <a href="/wiki/Object_(computer_science)" title="Object (computer science)">object</a> of the declaration.</li>
<li><a href="/wiki/Functional_programming_language" title="Functional programming language" class="mw-redirect">Functional programming languages</a> commonly exhibit abstractions related to functions, such as <a href="/wiki/Lambda_abstraction" title="Lambda abstraction" class="mw-redirect">lambda abstractions</a> (making a term into a function of some variable), <a href="/wiki/Higher-order_function" title="Higher-order function">higher-order functions</a> (parameters are functions), <a href="/w/index.php?title=Bracket_abstraction&amp;action=edit&amp;redlink=1" class="new" title="Bracket abstraction (page does not exist)">bracket abstraction</a> (making a term into a function of a variable).</li>
<li>The <a href="/wiki/Linda_(coordination_language)" title="Linda (coordination language)">Linda</a> language abstracts the concepts of <i>server</i> and <i>shared data-space</i> to facilitate distributed programming.</li>
</ul>
<p><a name="Specification_methods" id="Specification_methods"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Abstraction_(computer_science)&amp;action=edit&amp;section=4" title="Edit section: Specification methods">edit</a>]</span> <span class="mw-headline">Specification methods</span></h3>
<div class="rellink noprint relarticle mainarticle">Main article: <a href="/w/index.php?title=Formal_specification_methods&amp;action=edit&amp;redlink=1" class="new" title="Formal specification methods (page does not exist)">Formal specification methods</a></div>
<p>Analysts have developed various methods to formally specify software systems. Some known methods include:</p>
<ul>
<li>Abstract-model based method (VDM, Z);</li>
<li>Algebraic techniques (Larch, CLEAR, OBJ, ACT ONE);</li>
<li>Process-based techniques (LOTOS, SDL, Estelle);</li>
<li>Trace-based techniques (SPECIAL, TAM);</li>
<li>Knowledge-based techniques (Refine, Gist).</li>
</ul>
<p><a name="Specification_languages" id="Specification_languages"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Abstraction_(computer_science)&amp;action=edit&amp;section=5" title="Edit section: Specification languages">edit</a>]</span> <span class="mw-headline">Specification languages</span></h3>
<div class="rellink noprint relarticle mainarticle">Main article: <a href="/wiki/Specification_language" title="Specification language">Specification language</a></div>
<p>Specification languages generally rely on abstractions of one kind or another, since specifications are typically defined earlier in a project (and at a more abstract level) than an eventual implementation. The <a href="/wiki/Unified_Modeling_Language" title="Unified Modeling Language">UML</a> specification language, for example, allows the definition of <i>abstract</i> classes, which remain abstract during the architecture and specification phase of the project.</p>
<p><a name="Control_abstraction" id="Control_abstraction"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Abstraction_(computer_science)&amp;action=edit&amp;section=6" title="Edit section: Control abstraction">edit</a>]</span> <span class="mw-headline">Control abstraction</span></h2>
<div class="rellink noprint relarticle mainarticle">Main article: <a href="/wiki/Control_flow" title="Control flow">Control flow</a></div>
<p>Programming languages offer control abstraction as one of the main purposes of their use. Computer machines understand operations at the very low level such as moving some bits from one location of the memory to another location and producing the sum of two sequences of bits. Programming languages allow this to be done in the higher level. For example, consider this statement written in a <a href="/wiki/Pascal_(programming_language)" title="Pascal (programming language)">Pascal</a>-like fashion:</p>
<dl>
<dd><code>a&#160;:= (1 + 2) * 5</code></dd>
</dl>
<p>To a human, this seems a fairly simple and obvious calculation (<i>"one plus two is three, times five is fifteen"</i>). However, the low-level steps necessary to carry out this evaluation, and return the value "15", and then assign that value to the variable "a", are actually quite subtle and complex. The values need to be converted to binary representation (often a much more complicated task than one would think) and the calculations decomposed (by the compiler or interpreter) into assembly instructions (again, which are much less intuitive to the programmer: operations such as shifting a binary register left, or adding the binary complement of the contents of one register to another, are simply not how humans think about the abstract arithmetical operations of addition or multiplication). Finally, assigning the resulting value of "15" to the variable labeled "a", so that "a" can be used later, involves additional 'behind-the-scenes' steps of looking up a variable's label and the resultant location in physical or virtual memory, storing the binary representation of "15" to that memory location, etc. etc.</p>
<p>Without control abstraction, a programmer would need to specify <i>all</i> the register/binary-level steps each time she simply wanted to add or multiply a couple of numbers and assign the result to a variable. Such duplication of effort has two serious negative consequences:</p>
<ol>
<li>it forces the programmer to constantly repeat fairly common tasks every time a similar operation is needed</li>
<li>it forces the programmer to program for the particular hardware and instruction set</li>
</ol>
<p><a name="Structured_programming" id="Structured_programming"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Abstraction_(computer_science)&amp;action=edit&amp;section=7" title="Edit section: Structured programming">edit</a>]</span> <span class="mw-headline">Structured programming</span></h3>
<div class="rellink noprint relarticle mainarticle">Main article: <a href="/wiki/Structured_programming" title="Structured programming">Structured programming</a></div>
<p>Structured programming involves the splitting of complex program tasks into smaller pieces with clear flow-control and interfaces between components, with reduction of the complexity potential for side-effects.</p>
<p>In a simple program, this may aim to ensure that loops have single or obvious exit points and (where possible) to have single exit points from functions and procedures.</p>
<p>In a larger system, it may involve breaking down complex tasks into many different modules. Consider a system which handles payroll on ships and at shore offices:</p>
<ul>
<li>The uppermost level may feature a menu of typical end-user operations.</li>
<li>Within that could be standalone executables or libraries for tasks such as signing on and off employees or printing checks.</li>
<li>Within each of those standalone components there could be many different source files, each containing the program code to handle a part of the problem, with only selected interfaces available to other parts of the program. A sign on program could have source files for each data entry screen and the database interface (which may itself be a standalone third party library or a statically linked set of library routines).</li>
<li>Either the database or the payroll application also has to initiate the process of exchanging data with between ship and shore, and that data transfer task will often contain many other components.</li>
</ul>
<p>These layers produce the effect of isolating the implementation details of one component and its assorted internal methods from the others. Object-oriented programming embraced and extended this concept.</p>
<p><a name="Data_abstraction" id="Data_abstraction"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Abstraction_(computer_science)&amp;action=edit&amp;section=8" title="Edit section: Data abstraction">edit</a>]</span> <span class="mw-headline">Data abstraction</span></h2>
<div class="rellink noprint relarticle mainarticle">Main article: <a href="/wiki/Abstract_data_type" title="Abstract data type">Abstract data type</a></div>
<p>Data abstraction enforces a clear separation between the <i>abstract</i> properties of a <a href="/wiki/Data_type" title="Data type">data type</a> and the <i>concrete</i> details of its implementation. The abstract properties are those that are visible to client code that makes use of the data type--the <i>interface</i> to the data type--while the concrete implementation is kept entirely private, and indeed can change, for example to incorporate efficiency improvements over time. The idea is that such changes are not supposed to have any impact on client code, since they involve no difference in the abstract behaviour.</p>
<p>For example, one could define an <a href="/wiki/Abstract_data_type" title="Abstract data type">abstract data type</a> called <i>lookup table</i> which uniquely associates <i>keys</i> with <i>values</i>, and in which values may be retrieved by specifying their corresponding keys. Such a lookup table may be implemented in various ways: as a <a href="/wiki/Hash_table" title="Hash table">hash table</a>, a <a href="/wiki/Binary_search_tree" title="Binary search tree">binary search tree</a>, or even a simple linear list. As far as client code is concerned, the abstract properties of the type are the same in each case.</p>
<p>Of course, this all relies on getting the details of the interface right in the first place, since any changes there can have major impacts on client code. As one way to look at this: the interface forms a <i>contract</i> on agreed behaviour between the data type and client code; anything not spelled out in the contract is subject to change without notice.</p>
<p>Languages that implement data abstraction include <a href="/wiki/Ada_programming_language" title="Ada programming language" class="mw-redirect">Ada</a> and <a href="/wiki/Modula-2" title="Modula-2">Modula-2</a>. <a href="/wiki/Object-oriented" title="Object-oriented" class="mw-redirect">Object-oriented</a> languages are commonly claimed<sup class="noprint Inline-Template"><span title="The material in the vicinity of this tag may use weasel words or too-vague attribution.&#160;since March 2009" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Avoid_weasel_words" title="Wikipedia:Avoid weasel words">by whom?</a></i>]</span></sup> to offer data abstraction; however, their <a href="/wiki/Inheritance_(computer_science)" title="Inheritance (computer science)">inheritance</a> concept tends to put information in the interface that more properly belongs in the implementation; thus, changes to such information ends up impacting client code, leading directly to the <a href="/wiki/Fragile_binary_interface_problem" title="Fragile binary interface problem">Fragile binary interface problem</a>.</p>
<p><a name="Abstraction_in_object_oriented_programming" id="Abstraction_in_object_oriented_programming"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Abstraction_(computer_science)&amp;action=edit&amp;section=9" title="Edit section: Abstraction in object oriented programming">edit</a>]</span> <span class="mw-headline">Abstraction in object oriented programming</span></h2>
<div class="rellink noprint relarticle mainarticle">Main article: <a href="/wiki/Object_(computer_science)" title="Object (computer science)">Object (computer science)</a></div>
<p>In <a href="/wiki/Object-oriented_programming" title="Object-oriented programming">object-oriented programming</a> theory, <b>abstraction</b> involves the facility to define objects that represent abstract "actors" that can perform work, report on and change their state, and "communicate" with other objects in the system. The term <a href="/wiki/Information_hiding" title="Information hiding">encapsulation</a> refers to the hiding of <a href="/wiki/State_(computer_science)" title="State (computer science)">state</a> details, but extending the concept of <i>data type</i> from earlier programming languages to associate <i>behavior</i> most strongly with the data, and standardizing the way that different data types interact, is the beginning of <b>abstraction</b>. When abstraction proceeds into the operations defined, enabling objects of different types to be substituted, it is called <a href="/wiki/Polymorphism_(computer_science)" title="Polymorphism (computer science)" class="mw-redirect">polymorphism</a>. When it proceeds in the opposite direction, inside the types or classes, structuring them to simplify a complex set of relationships, it is called <a href="/wiki/Delegation_(programming)" title="Delegation (programming)">delegation</a> or <a href="/wiki/Inheritance_(computer_science)" title="Inheritance (computer science)">inheritance</a>.</p>
<p>Various object-oriented programming languages offer similar facilities for abstraction, all to support a general strategy of <a href="/wiki/Polymorphism_(computer_science)" title="Polymorphism (computer science)" class="mw-redirect">polymorphism</a> in object-oriented programming, which includes the substitution of one <a href="/w/index.php?title=Type_in_object-oriented_programming&amp;action=edit&amp;redlink=1" class="new" title="Type in object-oriented programming (page does not exist)">type</a> for another in the same or similar role. Although not as generally supported, a <a href="/w/index.php?title=Configuration_in_object-oriented_programming&amp;action=edit&amp;redlink=1" class="new" title="Configuration in object-oriented programming (page does not exist)">configuration</a> or image or package may predetermine a great many of these <a href="/wiki/Binding_(computer_science)" title="Binding (computer science)">bindings</a> at <a href="/wiki/Compile-time" title="Compile-time" class="mw-redirect">compile-time</a>, <a href="/wiki/Link-time" title="Link-time" class="mw-redirect">link-time</a>, or <a href="/wiki/Loadtime" title="Loadtime" class="mw-redirect">loadtime</a>. This would leave only a minimum of such bindings to change at <a href="/wiki/Run-time" title="Run-time" class="mw-redirect">run-time</a>.</p>
<p><a href="/wiki/Common_Lisp_Object_System" title="Common Lisp Object System">Common Lisp Object System</a> or <a href="/wiki/Self_programming_language" title="Self programming language" class="mw-redirect">self</a>, for example, feature less of a class-instance distinction and more use of delegation for <a href="/wiki/Polymorphism_in_object-oriented_programming" title="Polymorphism in object-oriented programming">polymorphism</a>. Individual objects and functions are abstracted more flexibly to better fit with a shared functional heritage from <a href="/wiki/Lisp_programming_language" title="Lisp programming language" class="mw-redirect">Lisp</a>.</p>
<p>C++ exemplifies another extreme: it relies heavily on <a href="/wiki/Generic_programming" title="Generic programming">templates</a> and <a href="/wiki/Method_overloading" title="Method overloading">overloading</a> and other static bindings at compile-time, which in turn has certain flexibility problems.</p>
<p>Although these examples offer alternate strategies for achieving the same abstraction, they do not fundamentally alter the need to support abstract nouns in code - all programming relies on an ability to abstract verbs as functions, nouns as data structures, and either as processes.</p>
<p>Consider for example a sample <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a> fragment to represent some common farm "animals" to a level of abstraction suitable to model simple aspects of their hunger and feeding. It defines an <code>Animal</code> class to represent both the state of the animal and its functions:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-java">
<span class="kw2">public</span> <span class="kw2">class</span> Animal <span class="kw2">extends</span> LivingThing
<span class="br0">{</span>
     <span class="kw2">private</span> Location loc;
     <span class="kw2">private</span> <span class="kw4">double</span> energyReserves;
 
     <span class="kw4">boolean</span> isHungry<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
         <span class="kw2">return</span> energyReserves &lt; <span class="nu0">2.5</span>;
     <span class="br0">}</span>
     <span class="kw4">void</span> eat<span class="br0">(</span>Food f<span class="br0">)</span> <span class="br0">{</span>
         <span class="co1">// Consume food</span>
         energyReserves += f.<span class="me1">getCalories</span><span class="br0">(</span><span class="br0">)</span>;
     <span class="br0">}</span>
     <span class="kw4">void</span> moveTo<span class="br0">(</span>Location l<span class="br0">)</span> <span class="br0">{</span>
         <span class="co1">// Move to new location</span>
         loc = l;
     <span class="br0">}</span>
<span class="br0">}</span>
</pre></div>
<p>With the above definition, one could create objects of type <tt>Animal</tt> and call their methods like this:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-java">
thePig = <span class="kw2">new</span> Animal<span class="br0">(</span><span class="br0">)</span>;
theCow = <span class="kw2">new</span> Animal<span class="br0">(</span><span class="br0">)</span>;
<span class="kw1">if</span> <span class="br0">(</span>thePig.<span class="me1">isHungry</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span> <span class="br0">{</span>
    thePig.<span class="me1">eat</span><span class="br0">(</span>tableScraps<span class="br0">)</span>;
<span class="br0">}</span>
<span class="kw1">if</span> <span class="br0">(</span>theCow.<span class="me1">isHungry</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span> <span class="br0">{</span>
    theCow.<span class="me1">eat</span><span class="br0">(</span>grass<span class="br0">)</span>;
<span class="br0">}</span>
theCow.<span class="me1">moveTo</span><span class="br0">(</span>theBarn<span class="br0">)</span>;
</pre></div>
<p>In the above example, the class <i><code>Animal</code></i> is an abstraction used in place of an actual animal, <i><code>LivingThing</code></i> is a further abstraction (in this case a generalisation) of <code>Animal</code>.</p>
<p>If one requires a more differentiated hierarchy of animals — to differentiate, say, those who provide milk from those who provide nothing except meat at the end of their lives — that is an intermediary level of abstraction, probably DairyAnimal (cows, goats) who would eat foods suitable to giving good milk, and Animal (pigs, steers) who would eat foods to give the best meat-quality.</p>
<p>Such an abstraction could remove the need for the application coder to specify the type of food, so s/he could concentrate instead on the feeding schedule. The two classes could be related using <a href="/wiki/Inheritance_(computer_science)" title="Inheritance (computer science)">inheritance</a> or stand alone, and the programmer could define varying degrees of <a href="/wiki/Polymorphism_(computer_science)" title="Polymorphism (computer science)" class="mw-redirect">polymorphism</a> between the two types. These facilities tend to vary drastically between languages, but in general each can achieve anything that is possible with any of the others. A great many operation overloads, data type by data type, can have the same effect at compile-time as any degree of inheritance or other means to achieve polymorphism. The class notation is simply a coder's convenience.</p>
<p><a name="Object-oriented_design" id="Object-oriented_design"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Abstraction_(computer_science)&amp;action=edit&amp;section=10" title="Edit section: Object-oriented design">edit</a>]</span> <span class="mw-headline">Object-oriented design</span></h3>
<div class="rellink noprint relarticle mainarticle">Main article: <a href="/wiki/Object-oriented_design" title="Object-oriented design">Object-oriented design</a></div>
<p>Decisions regarding what to abstract and what to keep under the control of the coder become the major concern of object-oriented design and <a href="/wiki/Domain_analysis" title="Domain analysis">domain analysis</a>—actually determining the relevant relationships in the real world is the concern of <a href="/wiki/Object-oriented_analysis" title="Object-oriented analysis" class="mw-redirect">object-oriented analysis</a> or <a href="/w/index.php?title=Legacy_analysis&amp;action=edit&amp;redlink=1" class="new" title="Legacy analysis (page does not exist)">legacy analysis</a>.</p>
<p>In general, to determine appropriate abstraction, one must make many small decisions about scope (domain analysis), determine what other systems one must cooperate with (legacy analysis), then perform a detailed object-oriented analysis which is expressed within project time and budget constraints as an object-oriented design. In our simple example, the domain is the barnyard, the live pigs and cows and their eating habits are the legacy constraints, the detailed analysis is that coders must have the flexibility to feed the animals what is available and thus there is no reason to code the type of food into the class itself, and the design is a single simple Animal class of which pigs and cows are instances with the same functions. A decision to differentiate DairyAnimal would change the detailed analysis but the domain and legacy analysis would be unchanged—thus it is entirely under the control of the programmer, and we refer to abstraction in object-oriented programming as distinct from abstraction in domain or legacy analysis.</p>
<p><a name="Considerations" id="Considerations"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Abstraction_(computer_science)&amp;action=edit&amp;section=11" title="Edit section: Considerations">edit</a>]</span> <span class="mw-headline">Considerations</span></h2>
<p>When discussing <a href="/wiki/Formal_semantics_of_programming_languages" title="Formal semantics of programming languages">formal semantics of programming languages</a>, <a href="/wiki/Formal_methods" title="Formal methods">formal methods</a> or <a href="/wiki/Abstract_interpretation" title="Abstract interpretation">abstract interpretation</a>, <b>abstraction</b> refers to the act of considering a less accurate, but safe, definition of the observed program behaviors. For instance, one may observe only the final result of program executions instead of considering all the intermediate steps of executions. Abstraction is defined to a <b>concrete</b> (more precise) model of execution.</p>
<p>Abstraction may be <b>exact</b> or <b>faithful</b> with respect to a property if one can answer a question about the property equally well on the concrete or abstract model. For instance, if we wish to know what the result of the evaluation of a mathematical expression involving only integers +, -, ×, is worth <a href="/wiki/Modular_arithmetic" title="Modular arithmetic">modulo</a> <i>n</i>, we need only perform all operations modulo <i>n</i> (a familiar form of this abstraction is <a href="/wiki/Casting_out_nines" title="Casting out nines">casting out nines</a>).</p>
<p>Abstractions, however, though not necessarily <b>exact</b>, should be <b>sound</b>. That is, it should be possible to get sound answers from them—even though the abstraction may simply yield a result of <a href="/wiki/Undecidability" title="Undecidability" class="mw-redirect">undecidability</a>. For instance, we may abstract the students in a class by their minimal and maximal ages; if one asks whether a certain person belongs to that class, one may simply compare that person's age with the minimal and maximal ages; if his age lies outside the range, one may safely answer that the person does not belong to the class; if it does not, one may only answer "I don't know".</p>
<p>The level of abstraction included in a programming language can influence its overall <a href="/wiki/Usability" title="Usability">usability</a>. The <a href="/wiki/Cognitive_dimensions" title="Cognitive dimensions" class="mw-redirect">Cognitive dimensions</a> framework includes the concept of <i>abstraction gradient</i> in a formalism. This framework allows the designer of a programming language to study the trade-offs between abstraction and other characteristics of the design, and how changes in abstraction influence the language usability.</p>
<p>Abstractions can prove useful when dealing with computer programs, because non-trivial properties of computer programs are essentially <a href="/wiki/Undecidable" title="Undecidable">undecidable</a> (see <a href="/wiki/Rice%27s_theorem" title="Rice's theorem">Rice's theorem</a>). As a consequence, automatic methods for deriving information on the behavior of computer programs either have to drop termination (on some occasions, they may fail, crash or never yield out a result), soundness (they may provide false information), or precision (they may answer "I don't know" to some questions).</p>
<p>Abstraction is the core concept of <a href="/wiki/Abstract_interpretation" title="Abstract interpretation">abstract interpretation</a>. <a href="/wiki/Model_checking" title="Model checking">Model checking</a> generally takes place on abstract versions of the studied systems.</p>
<p><a name="Levels_of_abstraction" id="Levels_of_abstraction"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Abstraction_(computer_science)&amp;action=edit&amp;section=12" title="Edit section: Levels of abstraction">edit</a>]</span> <span class="mw-headline">Levels of abstraction</span></h2>
<div class="rellink noprint relarticle mainarticle">Main article: <a href="/wiki/Abstraction_layer" title="Abstraction layer">Abstraction layer</a></div>
<p>Computer science commonly presents <i>levels</i> (or, less commonly, <i>layers</i>) of abstraction, wherein each level represents a different model of the same information and processes, but uses a system of expression involving a unique set of objects and compositions that apply only to a particular domain. <sup id="cite_ref-1" class="reference"><a href="#cite_note-1" title=""><span>[</span>2<span>]</span></a></sup> Each relatively abstract, "higher" level builds on a relatively concrete, "lower" level, which tends to provide an increasingly "granular" representation. For example, gates build on electronic circuits, binary on gates, machine language on binary, programming language on machine language, applications and operating systems on programming languages. Each level is embodied, but not determined, by the level beneath it, making it a language of description that is somewhat self-contained.</p>
<p><a name="Database_systems" id="Database_systems"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Abstraction_(computer_science)&amp;action=edit&amp;section=13" title="Edit section: Database systems">edit</a>]</span> <span class="mw-headline">Database systems</span></h3>
<div class="rellink noprint relarticle mainarticle">Main article: <a href="/wiki/Database_management_system" title="Database management system">Database management system</a></div>
<p>Since many users of database systems lack in-depth familiarity with computer data-structures, database developers often hide complexity through the following levels:</p>
<div class="thumb tright">
<div class="thumbinner" style="width:182px;"><a href="/wiki/File:Data_abstraction_levels.png" class="image" title="Data abstraction levels of a database system"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/0/09/Data_abstraction_levels.png/180px-Data_abstraction_levels.png" width="180" height="119" border="0" class="thumbimage" /></a>
<div class="thumbcaption">
<div class="magnify"><a href="/wiki/File:Data_abstraction_levels.png" class="internal" title="Enlarge"><img src="/skins-1.5/common/images/magnify-clip.png" width="15" height="11" alt="" /></a></div>
Data abstraction levels of a database system</div>
</div>
</div>
<p><b>Physical level:</b> The lowest level of abstraction describes <i>how</i> a system actually stores data. The physical level describes complex low-level data structures in detail.</p>
<p><b>Logical level:</b> The next higher level of abstraction describes <i>what</i> data the database stores, and what relationships exist among those data. The logical level thus describes an entire database in terms of a small number of relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical level structures, the user of the logical level does not need to be aware of this complexity. <a href="/wiki/Database_administrator" title="Database administrator">Database administrators</a>, who must decide what information to keep in a database, use the logical level of abstraction.</p>
<p><b>View level:</b> The highest level of abstraction describes only part of the entire database. Even though the logical level uses simpler structures, complexity remains because of the variety of information stored in a large database. Many users of a database system do not need all this information; instead, they need to access only a part of the database. The view level of abstraction exists to simplify their interaction with the system. The system may provide many <a href="/wiki/View_(database)" title="View (database)">views</a> for the same database.</p>
<p><a name="Layered_architecture" id="Layered_architecture"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Abstraction_(computer_science)&amp;action=edit&amp;section=14" title="Edit section: Layered architecture">edit</a>]</span> <span class="mw-headline">Layered architecture</span></h3>
<p>The ability to provide a <a href="/wiki/Design" title="Design">design</a> of different levels of abstraction can</p>
<ul>
<li>simplify the design considerably</li>
<li>enable different role players to effectively work at various levels of abstraction</li>
</ul>
<p><a href="/wiki/Systems_design" title="Systems design">Systems design</a> and <a href="/wiki/Business_process_modeling" title="Business process modeling">business process design</a> can both use this. Some <a href="/wiki/Software_modeling" title="Software modeling" class="mw-redirect">design processes</a> specifically generate designs that contain various levels of abstraction.</p>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Abstraction_(computer_science)&amp;action=edit&amp;section=15" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<ul>
<li><a href="/wiki/Abstraction_inversion" title="Abstraction inversion">Abstraction inversion</a> for an anti-pattern of one danger in abstraction</li>
<li><a href="/wiki/Abstract_data_type" title="Abstract data type">Abstract data type</a> for an abstract description of a set of data</li>
<li><a href="/wiki/Algorithm" title="Algorithm">Algorithm</a> for an abstract description of a computational procedure</li>
<li><a href="/w/index.php?title=Bracket_abstraction&amp;action=edit&amp;redlink=1" class="new" title="Bracket abstraction (page does not exist)">Bracket abstraction</a> for making a term into a function of a variable</li>
<li><a href="/wiki/Data_modeling" title="Data modeling">Data modeling</a> for structuring data independent of the processes that use it</li>
<li><a href="/wiki/Encapsulation" title="Encapsulation">Encapsulation</a> for the categorical dual (other side) of abstraction</li>
<li><a href="/wiki/Greenspun%27s_Tenth_Rule" title="Greenspun's Tenth Rule">Greenspun's Tenth Rule</a> for an aphorism about an (the?) optimum point in the space of abstractions</li>
<li><a href="/wiki/Higher-order_function" title="Higher-order function">Higher-order function</a> for abstraction of functions as parameters</li>
<li><a href="/wiki/Lambda_abstraction" title="Lambda abstraction" class="mw-redirect">Lambda abstraction</a> for making a term into a function of some variable</li>
<li><a href="/wiki/Program_refinement" title="Program refinement">Refinement</a> for the opposite of abstraction in computing</li>
<li><a href="/wiki/Substitution" title="Substitution">Substitution</a> for the categorical left adjoint (inverse) of abstraction</li>
</ul>
<p><a name="Further_reading" id="Further_reading"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Abstraction_(computer_science)&amp;action=edit&amp;section=16" title="Edit section: Further reading">edit</a>]</span> <span class="mw-headline">Further reading</span></h2>
<ul>
<li>Abelson, Harold, Gerald Jay Sussman with Julie Sussman. (1996) <a href="/wiki/Special:BookSources/0262011530" class="internal">ISBN 0-262-01153-0</a> <i><a href="/wiki/Structure_and_Interpretation_of_Computer_Programs" title="Structure and Interpretation of Computer Programs">Structure and Interpretation of Computer Programs</a> (Second edition)</i>. The MIT Press (See <a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html" class="external autonumber" title="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html" rel="nofollow">[1]</a>)</li>
<li>Joel Spolsky. <i><a href="http://www.joelonsoftware.com/articles/LeakyAbstractions.html" class="external text" title="http://www.joelonsoftware.com/articles/LeakyAbstractions.html" rel="nofollow">The Law of Leaky Abstractions</a></i>. 2002-11-11.</li>
</ul>
<p><span class="boilerplate" id="foldoc"><i>This article was originally based on material from the <a href="/wiki/Free_On-line_Dictionary_of_Computing" title="Free On-line Dictionary of Computing">Free On-line Dictionary of Computing</a>, which is <a href="/wiki/Wikipedia:Foldoc_license" title="Wikipedia:Foldoc license">licensed</a> under the <a href="/wiki/GNU_Free_Documentation_License" title="GNU Free Documentation License">GFDL</a>.</i></span></p>
<p><a name="Notes" id="Notes"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Abstraction_(computer_science)&amp;action=edit&amp;section=17" title="Edit section: Notes">edit</a>]</span> <span class="mw-headline">Notes</span></h2>
<ol class="references">
<li id="cite_note-0"><b><a href="#cite_ref-0" title="">^</a></b> <a href="http://www.thefreedictionary.com/abstraction" class="external free" title="http://www.thefreedictionary.com/abstraction" rel="nofollow">http://www.thefreedictionary.com/abstraction</a></li>
<li id="cite_note-1"><b><a href="#cite_ref-1" title="">^</a></b> <a href="/wiki/Luciano_Floridi" title="Luciano Floridi">Luciano Floridi</a>, <a href="http://www.philosophyofinformation.net/pdf/latmoa.pdf" class="external text" title="http://www.philosophyofinformation.net/pdf/latmoa.pdf" rel="nofollow"><i>Levellism and the Method of Abstraction</i></a> IEG – Research Report 22.11.04</li>
</ol>


<!-- 
NewPP limit report
Preprocessor node count: 538/1000000
Post-expand include size: 5654/2048000 bytes
Template argument size: 2051/2048000 bytes
Expensive parser function count: 1/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:60491-0!1!0!default!!en!2 and timestamp 20090331174914 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Abstraction_(computer_science)">http://en.wikipedia.org/wiki/Abstraction_(computer_science)</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Data_management" title="Category:Data management">Data management</a></span> | <span dir='ltr'><a href="/wiki/Category:Programming_paradigms" title="Category:Programming paradigms">Programming paradigms</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_example_Java_code" title="Category:Articles with example Java code">Articles with example Java code</a></span></div><div id="mw-hidden-catlinks" class="mw-hidden-cats-hidden">Hidden categories:&#32;<span dir='ltr'><a href="/wiki/Category:All_pages_needing_cleanup" title="Category:All pages needing cleanup">All pages needing cleanup</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_specifically-marked_weasel-worded_phrases_since_March_2009" title="Category:Articles with specifically-marked weasel-worded phrases since March 2009">Articles with specifically-marked weasel-worded phrases since March 2009</a></span> | <span dir='ltr'><a href="/wiki/Category:Wikipedia_articles_incorporating_text_from_FOLDOC" title="Category:Wikipedia articles incorporating text from FOLDOC">Wikipedia articles incorporating text from FOLDOC</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Abstraction_(computer_science)" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Abstraction_(computer_science)" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Abstraction_(computer_science)&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Abstraction_(computer_science)&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Abstraction_(computer_science)" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Abstraction_(computer_science)" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Abstraction_(computer_science)" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Abstraction_(computer_science)&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Abstraction_(computer_science)&amp;oldid=280793845" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Abstraction_(computer_science)&amp;id=280793845">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-af"><a href="http://af.wikipedia.org/wiki/Abstraksie_(rekenaarwetenskap)">Afrikaans</a></li>
				<li class="interwiki-bs"><a href="http://bs.wikipedia.org/wiki/Ra%C4%8Dunarska_apstrakcija">Bosanski</a></li>
				<li class="interwiki-da"><a href="http://da.wikipedia.org/wiki/Abstraktion_(datalogi)">Dansk</a></li>
				<li class="interwiki-es"><a href="http://es.wikipedia.org/wiki/Abstracci%C3%B3n_(inform%C3%A1tica)">Español</a></li>
				<li class="interwiki-fa"><a href="http://fa.wikipedia.org/wiki/%D8%A7%D9%86%D8%AA%D8%B2%D8%A7%D8%B9%DB%8C_%DA%A9%D8%B1%D8%AF%D9%86_(%D8%B1%D8%A7%DB%8C%D8%A7%D9%86%D9%87)">فارسی</a></li>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Abstraction_(informatique)">Français</a></li>
				<li class="interwiki-ko"><a href="http://ko.wikipedia.org/wiki/%EC%B6%94%EC%83%81%ED%99%94_(%EC%A0%84%EC%82%B0%ED%95%99)">한국어</a></li>
				<li class="interwiki-it"><a href="http://it.wikipedia.org/wiki/Astrazione_(informatica)">Italiano</a></li>
				<li class="interwiki-ms"><a href="http://ms.wikipedia.org/wiki/Pengabstrakan_(sains_komputer)">Bahasa Melayu</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E5%8C%96_(%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%A6)">日本語</a></li>
				<li class="interwiki-pl"><a href="http://pl.wikipedia.org/wiki/Abstrakcja_(programowanie)">Polski</a></li>
				<li class="interwiki-pt"><a href="http://pt.wikipedia.org/wiki/Abstra%C3%A7%C3%A3o_(programa%C3%A7%C3%A3o)">Português</a></li>
				<li class="interwiki-ru"><a href="http://ru.wikipedia.org/wiki/%D0%90%D0%B1%D1%81%D1%82%D1%80%D0%B0%D0%BA%D1%86%D0%B8%D1%8F_%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85">Русский</a></li>
				<li class="interwiki-sh"><a href="http://sh.wikipedia.org/wiki/Kompjuterska_apstrakcija">Srpskohrvatski / Српскохрватски</a></li>
				<li class="interwiki-tr"><a href="http://tr.wikipedia.org/wiki/Soyutlama_(bilgisayar_bilimi)">Türkçe</a></li>
				<li class="interwiki-uk"><a href="http://uk.wikipedia.org/wiki/%D0%90%D0%B1%D1%81%D1%82%D1%80%D0%B0%D0%B3%D1%83%D0%B2%D0%B0%D0%BD%D0%BD%D1%8F_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D1%83%D0%B2%D0%B0%D0%BD%D0%BD%D1%8F)">Українська</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 31 March 2009, at 03:56.</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv171 in 0.064 secs. --></body></html>
