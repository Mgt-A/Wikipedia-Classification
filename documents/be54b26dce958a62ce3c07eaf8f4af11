<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Monad (functional programming),Articles with unsourced statements since December 2007,Special:Search/Monad (functional programming),Abstract data type,Anonymous function,Arrows in functional programming,Backtracking,Callback (computer science),Category theory,Code reuse,Collection (computing)" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Monad_(functional_programming)&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Monad_(functional_programming)&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Monad (functional programming) - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Monad_(functional_programming)";
		var wgTitle = "Monad (functional programming)";
		var wgAction = "view";
		var wgArticleId = "579061";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 282281658;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
<style type="text/css">/*<![CDATA[*/
.source-ocaml-brief {line-height: normal;}
.source-ocaml-brief li, .source-ocaml-brief pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for ocaml-brief
 * CSS class: source-ocaml-brief, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-ocaml-brief .de1, .source-ocaml-brief .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-ocaml-brief  {}
.source-ocaml-brief .head {}
.source-ocaml-brief .foot {}
.source-ocaml-brief .imp {font-weight: bold; color: red;}
.source-ocaml-brief .ln-xtra {color: #cc0; background-color: #ffc;}
.source-ocaml-brief li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-ocaml-brief li.li2 {font-weight: bold;}
.source-ocaml-brief .kw1 {color: #06c; font-weight: bold;}
.source-ocaml-brief .coMULTI {color: #5d478b; font-style: italic;}
.source-ocaml-brief .br0 {color: #a52a2a;}
.source-ocaml-brief .st0 {color: #3cb371;}
.source-ocaml-brief .nu0 {color: #c6c;}
.source-ocaml-brief .me1 {color: #060;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-ocaml {line-height: normal;}
.source-ocaml li, .source-ocaml pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for ocaml
 * CSS class: source-ocaml, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-ocaml .de1, .source-ocaml .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-ocaml  {}
.source-ocaml .head {}
.source-ocaml .foot {}
.source-ocaml .imp {font-weight: bold; color: red;}
.source-ocaml .ln-xtra {color: #cc0; background-color: #ffc;}
.source-ocaml li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-ocaml li.li2 {font-weight: bold;}
.source-ocaml .kw1 {color: #06c; font-weight: bold;}
.source-ocaml .coMULTI {color: #5d478b; font-style: italic;}
.source-ocaml .br0 {color: #a52a2a;}
.source-ocaml .st0 {color: #3cb371;}
.source-ocaml .nu0 {color: #c6c;}
.source-ocaml .me1 {color: #060;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style>		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Monad_functional_programming skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Monad (functional programming)</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<table class="metadata plainlinks mbox-small" style="border:1px solid #aaa; background-color:#f9f9f9;">
<tr>
<td class="mbox-image"><a href="http://en.wikibooks.org/wiki/Special:Search/Monad_(functional_programming)" title="b:Special:Search/Monad (functional programming)"><img alt="Sister project" src="http://upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/40px-Wikibooks-logo-en-noslogan.svg.png" width="40" height="40" border="0" /></a></td>
<td class="mbox-text" style="">The <a href="/wiki/Wikibooks" title="Wikibooks">Wikibook</a> <i><a href="http://en.wikibooks.org/wiki/Haskell" class="extiw" title="wikibooks:Haskell">Haskell</a></i> has a page on the topic of
<div style="margin-left:10px;"><i><b><a href="http://en.wikibooks.org/wiki/Haskell/Understanding_monads" class="extiw" title="wikibooks:Haskell/Understanding monads">Understanding monads</a></b></i></div>
</td>
</tr>
</table>
<p>In <a href="/wiki/Functional_programming" title="Functional programming">functional programming</a>, a <b>monad</b> is a kind of <a href="/wiki/Abstract_data_type" title="Abstract data type">abstract data type</a> used to represent <a href="/wiki/Computation" title="Computation">computations</a> (instead of data in the <a href="/wiki/Domain_model" title="Domain model">domain model</a>). Programs written in functional style can make use of monads to structure procedures that include sequenced operations,<sup id="cite_ref-0" class="reference"><a href="#cite_note-0" title=""><span>[</span>1<span>]</span></a></sup><sup id="cite_ref-1" class="reference"><a href="#cite_note-1" title=""><span>[</span>2<span>]</span></a></sup> or to define arbitrary <a href="/wiki/Control_flow" title="Control flow">control flows</a> (like handling <a href="/wiki/Concurrency_(computer_science)" title="Concurrency (computer science)">concurrency</a>, <a href="/wiki/Continuation" title="Continuation">continuations</a>, or <a href="/wiki/Exception_handling" title="Exception handling">exceptions</a>).</p>
<p>Formally, a monad is constructed by defining two operations <i>bind</i> and <i>return</i> and a type constructor <i>M</i> that must fulfill several properties. These properties make possible the correct composition of functions that use values from the monad as their arguments (so called <i>monadic</i> functions). The monad acts as a <a href="/wiki/Software_framework" title="Software framework">framework</a> in that it's a reusable behavior that decides the order in which the specific monadic functions are called, and manages all the undercover work required by the computation.<sup id="cite_ref-2" class="reference"><a href="#cite_note-2" title=""><span>[</span>3<span>]</span></a></sup></p>
<p>The primary uses of monads in functional programming are to express <a href="/wiki/Input/output" title="Input/output">input/output</a> (I/O) operations and changes in <a href="/wiki/State_machine" title="State machine" class="mw-redirect">state</a> without using language features that introduce <a href="/wiki/Side_effect_(computer_science)" title="Side effect (computer science)">side effects</a><sup id="cite_ref-3" class="reference"><a href="#cite_note-3" title=""><span>[</span>4<span>]</span></a></sup>. Although a function cannot directly cause a side effect, it can construct a value <i>describing</i> a desired side effect that the caller should apply at a convenient time. However, I/O and state management are by no means the only uses of monads. They are useful in any situation where the programmer wants to carry out a purely functional computation while a related computation is carried out "on the side." In <a href="/wiki/Imperative_programming" title="Imperative programming">imperative programming</a> the side effects are embedded in the <a href="/wiki/Formal_semantics_of_programming_languages" title="Formal semantics of programming languages">semantics</a> of the programming language; with monads, they are made explicit in the monad definition.</p>
<p>The name <a href="/wiki/Monad_(category_theory)" title="Monad (category theory)">monad</a> derives from <a href="/wiki/Category_theory" title="Category theory">category theory</a>, a branch of <a href="/wiki/Mathematics" title="Mathematics">mathematics</a> that describes patterns applicable to many mathematical fields. (As a minor terminological mismatch, the term "monad" in functional programming contexts is usually used with a meaning corresponding to that of the term "<a href="/wiki/Strong_monad" title="Strong monad">strong monad</a>" in category theory, a specific kind of category theoretical monad.<sup class="noprint Template-Fact"><span title="This claim needs references to reliable sources&#160;since December 2007" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</span></sup>)</p>
<p>The <a href="/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell programming language</a> is a functional language that makes heavy use of monads, and includes <a href="/wiki/Syntactic_sugar" title="Syntactic sugar">syntactic sugar</a> to make monadic composition more convenient. All of the code samples below are written in <a href="/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell</a> unless noted otherwise.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Motivation"><span class="tocnumber">1</span> <span class="toctext">Motivation</span></a></li>
<li class="toclevel-1"><a href="#Concepts"><span class="tocnumber">2</span> <span class="toctext">Concepts</span></a>
<ul>
<li class="toclevel-2"><a href="#Definition"><span class="tocnumber">2.1</span> <span class="toctext">Definition</span></a>
<ul>
<li class="toclevel-3"><a href="#Examples"><span class="tocnumber">2.1.1</span> <span class="toctext">Examples</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#Axioms"><span class="tocnumber">2.2</span> <span class="toctext">Axioms</span></a></li>
<li class="toclevel-2"><a href="#Monadic_zero"><span class="tocnumber">2.3</span> <span class="toctext">Monadic zero</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#do-notation"><span class="tocnumber">3</span> <span class="toctext">do-notation</span></a></li>
<li class="toclevel-1"><a href="#Generic_monadic_functions"><span class="tocnumber">4</span> <span class="toctext">Generic monadic functions</span></a></li>
<li class="toclevel-1"><a href="#Examples_2"><span class="tocnumber">5</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2"><a href="#Maybe_monad"><span class="tocnumber">5.1</span> <span class="toctext">Maybe monad</span></a></li>
<li class="toclevel-2"><a href="#Identity_monad"><span class="tocnumber">5.2</span> <span class="toctext">Identity monad</span></a></li>
<li class="toclevel-2"><a href="#Collections"><span class="tocnumber">5.3</span> <span class="toctext">Collections</span></a></li>
<li class="toclevel-2"><a href="#I.2FO"><span class="tocnumber">5.4</span> <span class="toctext">I/O</span></a></li>
<li class="toclevel-2"><a href="#State_transformers"><span class="tocnumber">5.5</span> <span class="toctext">State transformers</span></a></li>
<li class="toclevel-2"><a href="#Others"><span class="tocnumber">5.6</span> <span class="toctext">Others</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Alternative_formulation"><span class="tocnumber">6</span> <span class="toctext">Alternative formulation</span></a></li>
<li class="toclevel-1"><a href="#History"><span class="tocnumber">7</span> <span class="toctext">History</span></a></li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">8</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">9</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">10</span> <span class="toctext">External links</span></a>
<ul>
<li class="toclevel-2"><a href="#Haskell_monad_tutorials"><span class="tocnumber">10.1</span> <span class="toctext">Haskell monad tutorials</span></a></li>
<li class="toclevel-2"><a href="#Other_documentation"><span class="tocnumber">10.2</span> <span class="toctext">Other documentation</span></a></li>
<li class="toclevel-2"><a href="#Monads_in_languages_other_than_Haskell"><span class="tocnumber">10.3</span> <span class="toctext">Monads in languages other than Haskell</span></a></li>
</ul>
</li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Motivation" id="Motivation"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Monad_(functional_programming)&amp;action=edit&amp;section=1" title="Edit section: Motivation">edit</a>]</span> <span class="mw-headline">Motivation</span></h2>
<p>Consider a function, such as <a href="/wiki/Division_(mathematics)" title="Division (mathematics)">division</a>, which is <a href="/wiki/Partial_function" title="Partial function">undefined</a> for some known values, such as zero. Division might occur repeatedly in a calculation, like this one, which returns the resistance of two electrical resistors in parallel:</p>
<pre>
-- par is a function that takes two real numbers and returns another
par :: Float -&gt; Float -&gt; Float
par x y = 1 / ((1 / x) + (1 / y))
</pre>
<p><b>Not a convincing example: two parallel resistors where either is zero amount to a zero resistance; no Maybe's or Monads should even be considered for par.</b> Instead of avoiding any errors by checking whether each divisor is zero, it might be convenient to have a modified division operator that does the check implicitly, as in the following <a href="/wiki/Pseudocode" title="Pseudocode">pseudocode</a>:</p>
<pre>
-- // is an operator that takes two "Maybe Float"s and returns another.
-- "Maybe Float" extends the Float type to represent calculations that may fail.
(//) :: Maybe Float -&gt; Maybe Float -&gt; Maybe Float
x // y = ...   -- the definition appears <a href="#do-notation" title="">below</a>.

par :: Float -&gt; Float -&gt; Maybe Float
par x y = 1' // ((1' // x') +' (1' // y'))
-- where 1', x', y' are the "Maybe" versions of 1, x, y and +' "adds" Maybe Floats.
-- See <a href="#Maybe_monad" title="">below</a> for details.
</pre>
<p>With the <tt>//</tt> operator, dividing by zero anywhere in the computation will result in the entire computation returning a special value of the Maybe monad called "Nothing", which indicates a failure to compute a value. Otherwise, the computation will produce a numerical result, contained in the other Maybe value, which is called "Just". The result of this division operator can then be passed to other functions. This concept of "maybe values" is one situation where monads are useful.</p>
<p><a name="Concepts" id="Concepts"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Monad_(functional_programming)&amp;action=edit&amp;section=2" title="Edit section: Concepts">edit</a>]</span> <span class="mw-headline">Concepts</span></h2>
<p><a name="Definition" id="Definition"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Monad_(functional_programming)&amp;action=edit&amp;section=3" title="Edit section: Definition">edit</a>]</span> <span class="mw-headline">Definition</span></h3>
<p>A monad is a construction that, given an underlying <a href="/wiki/Type_system" title="Type system">type system</a>, embeds a corresponding type system (called the <i>monadic type system</i>) into it (that is, each monadic type acts as the underlying type). This monadic type system preserves all significant aspects of the underlying type system, while adding features particular to the monad.</p>
<p>The usual formulation of a monad for programming is known as a <a href="/wiki/Kleisli_triple" title="Kleisli triple" class="mw-redirect">Kleisli triple</a>, and has the following components:</p>
<ol>
<li>A <i>type construction</i> that defines, for every underlying type, how to obtain a corresponding monadic type. In Haskell's notation, the name of the monad represents the type constructor. If M is the name of the monad and t is a data type, then "M&#160;t" is the corresponding type in the monad.</li>
<li>A <i>unit function</i> that maps a value in an underlying type to a value in the corresponding monadic type. The result is the "simplest" value in the corresponding type that completely preserves the original value (simplicity being understood appropriately to the monad). In Haskell, this function is called <tt>return</tt> due to the way it is used in the do-notation described later. The unit function has the polymorphic type t→M&#160;t.</li>
<li>A <i>binding operation</i> of polymorphic type (M&#160;t)→(t→M&#160;u)→(M&#160;u), which Haskell represents by the <a href="/wiki/Infix" title="Infix">infix</a> operator <tt>&gt;&gt;=</tt>. Its first argument is a value in a monadic type, its second argument is a function that maps from the underlying type of the first argument to another monadic type, and its result is in that other monadic type. The binding operation can be understood as having four stages:
<ol>
<li>The monad-related structure on the first argument is "pierced" to expose any number of values in the underlying type t.</li>
<li>The given function is applied to all of those values to obtain values of type (M u).</li>
<li>The monad-related structure on those values is also pierced, exposing values of type u.</li>
<li>Finally, the monad-related structure is reassembled over all of the results, giving a single value of type (M u).</li>
</ol>
</li>
</ol>
<p>In <a href="/wiki/Object-oriented_programming" title="Object-oriented programming">Object-oriented programming</a> terms, the type construction would correspond to the declaration of the monadic type, the unit function takes the role of a <a href="/wiki/Constructor_(computer_science)" title="Constructor (computer science)">constructor method</a>, and the binding operation contains the logic necessary to execute its registered <a href="/wiki/Callback_(computer_science)" title="Callback (computer science)">callbacks</a> (the monadic functions).</p>
<p>In practical terms, a monad, unlike your everyday function result, stores function results and side-effect representations. This allows side effects to be propagated through the return values of functions without breaking the pure functional model. For example, Haskell's <tt>Maybe</tt> monad can have either a normal return value, or <tt>Nothing</tt>. Similarly, error monads (such as <tt>Either e</tt>, for some type <tt>e</tt> representing error information) can have a normal return value or an error value.</p>
<p><a name="Examples" id="Examples"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Monad_(functional_programming)&amp;action=edit&amp;section=4" title="Edit section: Examples">edit</a>]</span> <span class="mw-headline">Examples</span></h4>
<p>Consider how these apply to the "Maybe" example. A Maybe type is just the underlying type (represented by wrapping with "Just"), and a value representing "nothing", i.e. undefined.<br /></p>
<pre>
data Maybe t = Just t | Nothing
</pre>
<p>The Maybe value corresponding to an underlying value, is just that value (represented by wrapping with "Just").</p>
<pre>
return x = Just x
</pre>
<p>Binding a function to something that is just a value means applying it directly to that value (the function must return a monadic type). Binding a function to nothing produces nothing.</p>
<pre>
mBind :: Maybe a -&gt; (a -&gt; Maybe b) -&gt; Maybe b
(Just x) `mBind` f = f x
Nothing `mBind` f = Nothing
</pre>
<dl>
<dd>For the safe division example, "(/)" is the underlying function, "(//)" is the safe monadic version. There are two Maybe inputs. If either input is "Nothing", then "Nothing" is returned. Otherwise the inputs are <code>Just a</code> and <code>Just b</code>, from which a and b are extracted. If b is zero, (/) cannot be applied, so "<code>Nothing</code>" is returned, otherwise "<code>Just (a / b)</code>" is returned:</dd>
</dl>
<pre>
(//) :: Maybe a -&gt; Maybe a -&gt; Maybe a
_ // Nothing = Nothing
Nothing // _  = Nothing
_ // Just 0 = Nothing
Just x // Just y = Just (x / y)
</pre>
<p>A more general version that applies to all types <code>m</code> such that <code>m</code> is an instance of the <code>Monad</code> class:</p>
<pre>
(//) :: (Fractional a, Monad m) =&gt; a -&gt; a -&gt; m a
_ // 0 = fail "//: divide by zero"
x // y = return (x / y)
</pre>
<p>This is the definition of the same Maybe monad in the <a href="/wiki/F_Sharp_(programming_language)" title="F Sharp (programming language)">F# language</a>:<sup id="cite_ref-4" class="reference"><a href="#cite_note-4" title=""><span>[</span>5<span>]</span></a></sup></p>
<div dir="ltr" style="text-align: left;">
<pre class="source-ocaml-brief">
<span class="kw1">type</span> MaybeBuilder<span class="br0">(</span><span class="br0">)</span> =
    member this.<span class="me1">Bind</span><span class="br0">(</span>x, f<span class="br0">)</span> =
        <span class="kw1">match</span> x <span class="kw1">with</span>
        | Some<span class="br0">(</span>x<span class="br0">)</span> -&gt; f<span class="br0">(</span>x<span class="br0">)</span>
        | _ -&gt; None
    member this.<span class="me1">Delay</span><span class="br0">(</span>f<span class="br0">)</span> = f<span class="br0">(</span><span class="br0">)</span>
    member this.<span class="me1">Return</span><span class="br0">(</span>x<span class="br0">)</span> = Some x
 
<span class="kw1">let</span> maybe = MaybeBuilder<span class="br0">(</span><span class="br0">)</span>
</pre></div>
<p><a name="Axioms" id="Axioms"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Monad_(functional_programming)&amp;action=edit&amp;section=5" title="Edit section: Axioms">edit</a>]</span> <span class="mw-headline">Axioms</span></h3>
<p>For a monad to behave correctly, the definitions must obey a few axioms.<sup id="cite_ref-5" class="reference"><a href="#cite_note-5" title=""><span>[</span>6<span>]</span></a></sup> (The ≡ symbol is not Haskell code, but indicates an equivalence between two Haskell expressions.)</p>
<ul>
<li>"return" must preserve all information about its argument.</li>
</ul>
<pre>
(return x) &gt;&gt;= f ≡ f x
m &gt;&gt;= return ≡ m
</pre>
<ul>
<li>Binding two functions in succession is the same as binding one function that can be determined from them.</li>
</ul>
<pre>
(m &gt;&gt;= f) &gt;&gt;= g ≡ m &gt;&gt;= (\x -&gt; f x &gt;&gt;= g)
</pre>
<p>In the last rule, the notation <code>\x -&gt;</code> defines an <a href="/wiki/Anonymous_function" title="Anonymous function">anonymous function</a> that maps any value x to the expression that follows.</p>
<p><a name="Monadic_zero" id="Monadic_zero"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Monad_(functional_programming)&amp;action=edit&amp;section=6" title="Edit section: Monadic zero">edit</a>]</span> <span class="mw-headline">Monadic zero</span></h3>
<p>A monad can optionally define a "zero" value for every type. Binding a zero with any function produces the zero for the result type, just as 0 multiplied by any number is 0.</p>
<pre>
mzero &gt;&gt;= f ≡ mzero
</pre>
<p>Similarly, binding any m with a function that always returns a zero results in a zero</p>
<pre>
m &gt;&gt;= (\x -&gt; mzero) ≡ mzero
</pre>
<p>Intuitively, the zero represents a value in the monad that has only monad-related structure and no values from the underlying type. In the Maybe monad, "Nothing" is a zero. In the List monad, "[]" (the empty list) is a zero.</p>
<p><a name="do-notation" id="do-notation"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Monad_(functional_programming)&amp;action=edit&amp;section=7" title="Edit section: do-notation">edit</a>]</span> <span class="mw-headline">do-notation</span></h2>
<p>Although there are times when it makes sense to use <code>&gt;&gt;=</code> directly in a program, it is more typical to use a format called <i>do-notation</i> (<i>perform-notation</i> in <a href="/wiki/OCaml" title="OCaml" class="mw-redirect">OCaml</a>, <i>computation expressions</i> in <a href="/wiki/F_Sharp_(programming_language)" title="F Sharp (programming language)">F#</a>), that mimics the appearance of imperative languages. The compiler translates do-notation to expressions involving <code>&gt;&gt;=</code>. For example, the following code:</p>
<pre>
a = do x &lt;- [3..4]
       [1..2]
       return (x, 42)
</pre>
<p>is transformed during compilation into:</p>
<pre>
a = [3..4] &gt;&gt;= (\x -&gt; [1..2] &gt;&gt;= (\_ -&gt; return (x, 42)))
</pre>
<p>It is helpful to see the implementation of the list monad, and to know that concatMap maps a function over a list and concatenates (flattens) the resulting lists:</p>
<pre>
instance Monad [] where
  m &gt;&gt;= f  = concatMap f m
  return x = [x]
  fail s   = []
  
</pre>
<p>Therefore, the following transformations hold:</p>
<pre>
a = [3..4] &gt;&gt;= (\x -&gt; [1..2] &gt;&gt;= (\_ -&gt; return (x, 42)))
a = [3..4] &gt;&gt;= (\x -&gt; concatMap (\_ -&gt; return (x, 42)) [1..2] )
a = [3..4] &gt;&gt;= (\x -&gt; [(x,42),(x,42)] )
a = concatMap (\x -&gt; [(x,42),(x,42)] ) [3..4]
a = [(3,42),(3,42),(4,42),(4,42)] 
</pre>
<p>Notice that the list <tt>[1..2]</tt> is not used. The lack of a left-pointing arrow, translated into a binding to a function that ignores its argument, indicates that only the monadic structure is of interest, not the values inside it; for the list monad this is trivial, but e.g. for a state monad this might be used for changing the state without producing any more result values. The do-block notation can be used with any monad as it is simply syntactic sugar for <code>&gt;&gt;=</code>.</p>
<p>The following definitions for safe division for values in the Maybe monad are also equivalent:</p>
<pre>
x // y = do
  a &lt;- x  -- Extract the values "inside" x and y, if there are any.
  b &lt;- y
  if b == 0 then Nothing else Just (a / b)
</pre>
<pre>
x // y = x &gt;&gt;= (\a -&gt; y &gt;&gt;= (\b -&gt; if b == 0 then Nothing else Just (a / b)))
</pre>
<p>A similar example in F# using a computation expression:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-ocaml">
<span class="kw1">let</span> readNum <span class="br0">(</span><span class="br0">)</span> =
  <span class="kw1">let</span> s = Console.<span class="me1">ReadLine</span><span class="br0">(</span><span class="br0">)</span>
  <span class="kw1">let</span> <span class="kw3">succ</span>,v = <span class="kw2">Int32</span>.<span class="me1">TryParse</span><span class="br0">(</span>s<span class="br0">)</span>
  <span class="kw1">if</span> <span class="br0">(</span><span class="kw3">succ</span><span class="br0">)</span> <span class="kw1">then</span> Some<span class="br0">(</span>v<span class="br0">)</span> <span class="kw1">else</span> None
 
<span class="kw1">let</span> secure_div = 
  maybe <span class="br0">{</span> <span class="kw1">let</span>! x = readNum<span class="br0">(</span><span class="br0">)</span>
    <span class="kw1">let</span>! y = readNum<span class="br0">(</span><span class="br0">)</span>
    <span class="kw1">if</span> <span class="br0">(</span>y = <span class="nu0">0</span><span class="br0">)</span> 
    <span class="kw1">then</span> None
    <span class="kw1">else</span> return <span class="br0">(</span>x / y<span class="br0">)</span>
  <span class="br0">}</span>
</pre></div>
<p>The syntactic sugar of the maybe block would get translated internally to the following expression:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-ocaml">
maybe.<span class="me1">Delay</span><span class="br0">(</span><span class="kw1">fun</span> <span class="br0">(</span><span class="br0">)</span> -&gt;
  maybe.<span class="me1">Bind</span><span class="br0">(</span>readNum<span class="br0">(</span><span class="br0">)</span>, <span class="kw1">fun</span> x -&gt;
    maybe.<span class="me1">Bind</span><span class="br0">(</span>readNum<span class="br0">(</span><span class="br0">)</span>, <span class="kw1">fun</span> y -&gt;
      <span class="kw1">if</span> <span class="br0">(</span>y=<span class="nu0">0</span><span class="br0">)</span> <span class="kw1">then</span> None <span class="kw1">else</span> maybe.<span class="me1">Return</span><span class="br0">(</span> x/y <span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>
</pre></div>
<p><a name="Generic_monadic_functions" id="Generic_monadic_functions"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Monad_(functional_programming)&amp;action=edit&amp;section=8" title="Edit section: Generic monadic functions">edit</a>]</span> <span class="mw-headline">Generic monadic functions</span></h2>
<p>Given values produced by safe division, we might want to carry on doing calculations without having to check manually if they are <tt>Nothing</tt> (i.e. resulted from an attempted division by zero). We can do this using a "lifting" function, which we can define not only for <tt>Maybe</tt> but for arbitrary monads. In Haskell this is called <tt>liftM2</tt>:</p>
<pre>
liftM2 :: Monad m =&gt; (a -&gt; b -&gt; c) -&gt; m a -&gt; m b -&gt; m c
liftM2 op mx my = do
    x &lt;- mx
    y &lt;- my
    return (op x y)
</pre>
<p>Recall that arrows in a type associate to the right, so <tt>liftM2</tt> is a function that takes a binary function as an argument and returns another binary function. The type signature says: If <tt>m</tt> is a monad, we can "lift" any binary function into it. For example:</p>
<pre>
(.*.) :: Monad m =&gt; m Float -&gt; m Float -&gt; m Float
x .*. y = liftM2 (*) x y
</pre>
<p>defines an operator <tt>(.*.)</tt> which multiplies two numbers, unless one of them is <tt>Nothing</tt> (in which case it again returns <tt>Nothing</tt>). The advantage here is that we need not dive into the details of the implementation of the monad; if we need to do the same kind of thing with another function, or in another monad, using <tt>liftM2</tt> makes it immediately clear what is meant (see <a href="/wiki/Code_reuse" title="Code reuse">Code reuse</a>).</p>
<p><a name="Examples_2" id="Examples_2"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Monad_(functional_programming)&amp;action=edit&amp;section=9" title="Edit section: Examples">edit</a>]</span> <span class="mw-headline">Examples</span></h2>
<p><a name="Maybe_monad" id="Maybe_monad"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Monad_(functional_programming)&amp;action=edit&amp;section=10" title="Edit section: Maybe monad">edit</a>]</span> <span class="mw-headline">Maybe monad</span></h3>
<p>The Maybe monad has already been defined above. The following definitions complete the original motivating example of the "par" function.</p>
<pre>
add x y = do
  x' &lt;- x
  y' &lt;- y
  return (x' + y')

par x y = let
  one = return 1
  jx = return x
  jy = return y
  in one // (add (one // jx) (one // jy))
</pre>
<p>If the result of any division is <code>Nothing</code>, it will propagate through the rest of the expression.</p>
<p><a name="Identity_monad" id="Identity_monad"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Monad_(functional_programming)&amp;action=edit&amp;section=11" title="Edit section: Identity monad">edit</a>]</span> <span class="mw-headline">Identity monad</span></h3>
<p>The simplest monad is the identity monad, which attaches no information to values.</p>
<pre>
Id t = t
return x = x
x &gt;&gt;= f = f x
</pre>
<p>A do-block in this monad performs <a href="/wiki/Variable" title="Variable">variable</a> substitution; <tt>do&#160;{x&#160;&lt;-&#160;2;&#160;return&#160;3*x}</tt> results in 6.</p>
<p><a name="Collections" id="Collections"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Monad_(functional_programming)&amp;action=edit&amp;section=12" title="Edit section: Collections">edit</a>]</span> <span class="mw-headline">Collections</span></h3>
<p>Some familiar <a href="/wiki/Collection_(computing)" title="Collection (computing)">collection</a> types, including <a href="/wiki/Linked_list" title="Linked list">lists</a>, <a href="/wiki/Set_(computer_science)" title="Set (computer science)">sets</a>, and <a href="/wiki/Multiset" title="Multiset">multisets</a>, are monads. The definition for lists is given here.</p>
<pre>
-- "return" constructs a one-item list.
return x = [x]
-- "bind" concatenates the lists obtained by applying f to each item in list xs.
xs &gt;&gt;= f = concat (map f xs)
-- The zero object is an empty list.
mzero = []
</pre>
<p><a href="/wiki/List_comprehension" title="List comprehension">List comprehensions</a> are a special case of the list monad. For example, the list comprehension <tt>[ 2*x | x &lt;- [1..n], isOkay x]</tt> corresponds to the list monad <tt>do {x &lt;- [1..n]; if isOkay x then return () else mzero; return (2*x)}</tt>. Similarly, other types of comprehensions, e.g. set comprehensions, are special cases of the corresponding type of monad, e.g. set monad.</p>
<p>The monads for sets and multisets support the use of <a href="/wiki/Set-builder_notation" title="Set-builder notation">set-builder notation</a> similarly. The set monad is useful when the state of a computation is ambiguous, as in a <a href="/wiki/Parser" title="Parser" class="mw-redirect">parser</a> that has not read enough input to decide what syntax it is reading. The parser can maintain a set that represents the possible syntaxes, and scan until the set has one item (meaning that a syntax was recognized) or no items (meaning that the input is unacceptable).</p>
<p>The monads for collections naturally represent <a href="/wiki/Nondeterministic_algorithm" title="Nondeterministic algorithm">nondeterministic computation</a>. The list (or other collection) represents all the possible results from different nondeterministic paths of computation at that given time. For example, when you do <tt>x &lt;- [1,2,3,4,5]</tt>, you are saying that the variable <tt>x</tt> can non-deterministically take on any of the values of that list. If you were to return <tt>x</tt>, it would evaluate to a list of the results from each path of computation. Notice that the bind operator above follows this theme by performing <tt>f</tt> on each of the current possible results, and then it concatenates the result lists together.</p>
<p>You also often see statements like <tt>if condition x y then return () else mzero</tt>; if the condition is true, it chooses from one path of computation, which is a dummy value we are not assigning to anything; however, if the condition is false, then the <tt>mzero = []</tt> monad value non-deterministically chooses from 0 values, effectively terminating that path of computation. Other paths of computations might still succeed. This effectively serves as a "guard" to enforce that only paths of computation that satisfy certain conditions can continue. So collections monads are very useful for solving logic puzzles, Sudoku, and similar problems.</p>
<p>In a language with <a href="/wiki/Lazy_evaluation" title="Lazy evaluation">lazy evaluation</a>, like <a href="/wiki/Haskell" title="Haskell">Haskell</a>, if you only request the first element of a list monad, then, since lists are evaluated lazily, it only performs just enough work to get the first valid result -- that is, it chooses a path of computation, and then if it fails at some point (if it evaluates <tt>mzero</tt>), then it <a href="/wiki/Backtracking" title="Backtracking">backtracks</a> to the last branching point, and follows the next path, and so on. If you then request the second element, it again does just enough work to get the second solution, and so on. So the list monad is a simple way to implement a backtracking algorithm in a lazy language.</p>
<p><a name="I.2FO" id="I.2FO"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Monad_(functional_programming)&amp;action=edit&amp;section=13" title="Edit section: I/O">edit</a>]</span> <span class="mw-headline">I/O</span></h3>
<p>A monad for I/O operations is usually implemented in the language implementation rather than being defined publicly. The following example demonstrates the use of an I/O monad to interact with the user.</p>
<pre>
do
  putStrLn "What is your name?"
  name &lt;- getLine
  putStrLn ("Nice to meet you, " ++ name ++ "!")
</pre>
<p><a name="State_transformers" id="State_transformers"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Monad_(functional_programming)&amp;action=edit&amp;section=14" title="Edit section: State transformers">edit</a>]</span> <span class="mw-headline">State transformers</span></h3>
<p>A state transformer monad allows a programmer to attach state information of any type to a calculation. Given any value, the corresponding value in the state transformer monad is a function that accepts a state, then outputs another state along with a value.</p>
<pre>
type StateTrans s t = s -&gt; (t, s)
</pre>
<p>Note that this monad, unlike those already seen, takes a type parameter, the type of the state information. The monad operations are defined as follows:</p>
<pre>
-- "return" produces the given value without changing the state.
return x = \s -&gt; (x, s)
-- "bind" modifies transformer m so that it applies f to its result.
m &gt;&gt;= f = \r -&gt; let (x, s) = m r in (f x) s
</pre>
<p>Useful state transformers include:</p>
<pre>
readState = \s -&gt; (s, s) -- Examine the state at this point in the computation.
writeState x = \s -&gt; ((), x) -- Replace the state.
</pre>
<p>Another operation applies a state transformer to a given initial state:</p>
<pre>
applyTrans:: StateTrans s a -&gt; s -&gt; (a, s)
applyTrans t s = t s
</pre>
<p>do-blocks in a state monad are sequences of operations that can examine and update the state data.</p>
<p><a name="Others" id="Others"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Monad_(functional_programming)&amp;action=edit&amp;section=15" title="Edit section: Others">edit</a>]</span> <span class="mw-headline">Others</span></h3>
<p>Other concepts that researchers have expressed as monads include:</p>
<ul>
<li><a href="/wiki/Continuation" title="Continuation">Continuations</a></li>
<li><a href="/wiki/Exception_handling" title="Exception handling">Exception handling</a></li>
<li><a href="/wiki/Graphical_user_interface" title="Graphical user interface">Graphical user interfaces</a></li>
<li>Logging</li>
<li><a href="/wiki/Interprocess_communication" title="Interprocess communication" class="mw-redirect">Interprocess communication</a></li>
<li><a href="/wiki/Parser" title="Parser" class="mw-redirect">Parsers</a></li>
<li><a href="/wiki/Interpreter_(computing)" title="Interpreter (computing)">Interpreters</a></li>
<li><a href="/wiki/Strict_evaluation" title="Strict evaluation" class="mw-redirect">Strict evaluation</a></li>
<li>Interfaces to code written in other languages</li>
</ul>
<p><a name="Alternative_formulation" id="Alternative_formulation"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Monad_(functional_programming)&amp;action=edit&amp;section=16" title="Edit section: Alternative formulation">edit</a>]</span> <span class="mw-headline">Alternative formulation</span></h2>
<p>Although Haskell defines monads in terms of the "return" and "bind" functions, it is also possible to define a monad in terms of "return" and two other operations, "join" and "map". This formulation fits more closely with the definition of monads in category theory. The map operation, with type (t→u)→(M&#160;t→M&#160;u), takes a function between two types and produces a function that does the "same thing" to values in the monad. The join operation, with type M&#160;(M&#160;t)→M&#160;t, "flattens" two layers of monadic information into one.</p>
<p>The two formulations are related as follows. As before, the ≡ symbol indicates equivalence between two Haskell expressions.</p>
<pre>
(map f) m ≡ m &gt;&gt;= (\x -&gt; return (f x))
join m ≡ m &gt;&gt;= (\x -&gt; x)

m &gt;&gt;= f ≡ join ((map f) m)
</pre>
<p><a name="History" id="History"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Monad_(functional_programming)&amp;action=edit&amp;section=17" title="Edit section: History">edit</a>]</span> <span class="mw-headline">History</span></h2>
<p><a href="/w/index.php?title=Eugenio_Moggi&amp;action=edit&amp;redlink=1" class="new" title="Eugenio Moggi (page does not exist)">Eugenio Moggi</a> first described the general use of monads to structure programs.<sup id="cite_ref-6" class="reference"><a href="#cite_note-6" title=""><span>[</span>7<span>]</span></a></sup> Several people built on his work, including programming language researchers <a href="/wiki/Philip_Wadler" title="Philip Wadler">Philip Wadler</a> and <a href="/wiki/Simon_Peyton_Jones" title="Simon Peyton Jones">Simon Peyton Jones</a> (both of whom were involved in the specification of Haskell). Early versions of Haskell used a problematic "lazy list" model for I/O, and Haskell 1.3 introduced monads as a more flexible way to combine I/O with lazy evaluation.</p>
<p>In addition to IO, scientific articles and Haskell libraries have successfully applied monads to topics including parsers and programming language interpreters. The concept of monads along with the Haskell do-notation for them has also been generalized to form <a href="/wiki/Arrows_in_functional_programming" title="Arrows in functional programming" class="mw-redirect"><i>arrows</i></a>.</p>
<p>Haskell and its derivatives have been for a long time the only major users of monads in programming. There exist formulations also in Scheme and Perl, and monads have been an option in the design of a new <a href="/wiki/ML_(programming_language)" title="ML (programming language)">ML</a> standard. Recently the research language <a href="/wiki/F_Sharp_(programming_language)" title="F Sharp (programming language)">F#</a> has included a feature called <a href="/wiki/Computation_expressions" title="Computation expressions" class="mw-redirect">computation expressions</a> or <i>workflows</i>, which are an attempt to introduce monadic constructs within a syntax more palatable to programmers with an imperative background.<sup id="cite_ref-seq_7-0" class="reference"><a href="#cite_note-seq-7" title=""><span>[</span>8<span>]</span></a></sup></p>
<p><a href="/wiki/Effect_systems" title="Effect systems" class="mw-redirect">Effect systems</a> are an alternative way of describing side effects as types.</p>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Monad_(functional_programming)&amp;action=edit&amp;section=18" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<ul>
<li><a href="/wiki/Arrows_in_functional_programming" title="Arrows in functional programming" class="mw-redirect">Arrows in functional programming</a> — whereas monads generalize the results of a computation to effects, arrows further generalize the inputs similarly.</li>
<li><a href="/wiki/Monad_transformer" title="Monad transformer">Monad transformers</a> — which allow monads to be composed in a modular and convenient way.</li>
<li><a href="/wiki/Inversion_of_control" title="Inversion of control">Inversion of control</a> — the abstract principle of calling specific functions from a reusable software entity.</li>
<li><a href="/wiki/Uniqueness_type" title="Uniqueness type">Uniqueness types</a> - an alternative way of dealing with side-effects in functional languages</li>
</ul>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Monad_(functional_programming)&amp;action=edit&amp;section=19" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<ol class="references">
<li id="cite_note-0"><b><a href="#cite_ref-0" title="">^</a></b> <a href="/wiki/Philip_Wadler" title="Philip Wadler">Philip Wadler</a>. <a href="http://citeseer.ist.psu.edu/wadler92comprehending.html" class="external text" title="http://citeseer.ist.psu.edu/wadler92comprehending.html" rel="nofollow">Comprehending Monads</a>. Proceedings of the 1990 ACM Conference on LISP and Functional Programming, Nice. 1990.</li>
<li id="cite_note-1"><b><a href="#cite_ref-1" title="">^</a></b> Philip Wadler. <a href="http://citeseer.ist.psu.edu/wadler92essence.html" class="external text" title="http://citeseer.ist.psu.edu/wadler92essence.html" rel="nofollow">The Essence of Functional Programming</a>. Conference Record of the Nineteenth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages. 1992.</li>
<li id="cite_note-2"><b><a href="#cite_ref-2" title="">^</a></b> <a href="http://www.haskell.org/all_about_monads/html/analogy.html" class="external text" title="http://www.haskell.org/all_about_monads/html/analogy.html" rel="nofollow">A physical analogy for monads</a>, explains monads as assembly lines.</li>
<li id="cite_note-3"><b><a href="#cite_ref-3" title="">^</a></b> <a href="/wiki/Simon_Peyton_Jones" title="Simon Peyton Jones">Simon L. Peyton Jones</a>, Philip Wadler. <a href="http://citeseer.ist.psu.edu/peytonjones93imperative.html" class="external text" title="http://citeseer.ist.psu.edu/peytonjones93imperative.html" rel="nofollow">Imperative Functional Programming</a>. Conference record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, Charleston, South Carolina. 1993</li>
<li id="cite_note-4"><b><a href="#cite_ref-4" title="">^</a></b> <a href="http://tomasp.net/blog/fsharp-iv-lang.aspx" class="external text" title="http://tomasp.net/blog/fsharp-iv-lang.aspx" rel="nofollow">F# Overview (IV.) - Language Oriented Programming</a></li>
<li id="cite_note-5"><b><a href="#cite_ref-5" title="">^</a></b> The three fundamental laws of Monad. See <a href="http://www.haskell.org/all_about_monads/html/laws.html#laws" class="external text" title="http://www.haskell.org/all_about_monads/html/laws.html#laws" rel="nofollow">this page</a></li>
<li id="cite_note-6"><b><a href="#cite_ref-6" title="">^</a></b> <cite style="font-style:normal" class="" id="CITEREFMoggi1991">Moggi, Eugenio (1991). "<a href="http://www.disi.unige.it/person/MoggiE/ftp/ic91.pdf" class="external text" title="http://www.disi.unige.it/person/MoggiE/ftp/ic91.pdf" rel="nofollow">Notions of Computation and Monads</a>". <i>Information and Computation</i> <b>93</b> (1)<span class="printonly">. <a href="http://www.disi.unige.it/person/MoggiE/ftp/ic91.pdf" class="external free" title="http://www.disi.unige.it/person/MoggiE/ftp/ic91.pdf" rel="nofollow">http://www.disi.unige.it/person/MoggiE/ftp/ic91.pdf</a></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=Notions+of+Computation+and+Monads&amp;rft.jtitle=Information+and+Computation&amp;rft.aulast=Moggi&amp;rft.aufirst=Eugenio&amp;rft.au=Moggi%2C+Eugenio&amp;rft.date=1991&amp;rft.volume=93&amp;rft.issue=1&amp;rft_id=http%3A%2F%2Fwww.disi.unige.it%2Fperson%2FMoggiE%2Fftp%2Fic91.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Monad_(functional_programming)"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-seq-7"><b><a href="#cite_ref-seq_7-0" title="">^</a></b> <cite style="font-style:normal" class="web"><a href="http://blogs.msdn.com/dsyme/archive/2007/09/22/some-details-on-f-computation-expressions-aka-monadic-or-workflow-syntax.aspx" class="external text" title="http://blogs.msdn.com/dsyme/archive/2007/09/22/some-details-on-f-computation-expressions-aka-monadic-or-workflow-syntax.aspx" rel="nofollow">"Some Details on F# Computation Expressions"</a><span class="printonly">. <a href="http://blogs.msdn.com/dsyme/archive/2007/09/22/some-details-on-f-computation-expressions-aka-monadic-or-workflow-syntax.aspx" class="external free" title="http://blogs.msdn.com/dsyme/archive/2007/09/22/some-details-on-f-computation-expressions-aka-monadic-or-workflow-syntax.aspx" rel="nofollow">http://blogs.msdn.com/dsyme/archive/2007/09/22/some-details-on-f-computation-expressions-aka-monadic-or-workflow-syntax.aspx</a></span><span class="reference-accessdate">. Retrieved on 2007-12-14</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Some+Details+on+F%23+Computation+Expressions&amp;rft.atitle=&amp;rft_id=http%3A%2F%2Fblogs.msdn.com%2Fdsyme%2Farchive%2F2007%2F09%2F22%2Fsome-details-on-f-computation-expressions-aka-monadic-or-workflow-syntax.aspx&amp;rfr_id=info:sid/en.wikipedia.org:Monad_(functional_programming)"><span style="display: none;">&#160;</span></span></li>
</ol>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Monad_(functional_programming)&amp;action=edit&amp;section=20" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<p><a name="Haskell_monad_tutorials" id="Haskell_monad_tutorials"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Monad_(functional_programming)&amp;action=edit&amp;section=21" title="Edit section: Haskell monad tutorials">edit</a>]</span> <span class="mw-headline">Haskell monad tutorials</span></h3>
<ul>
<li><a href="http://www.haskell.org/haskellwiki/Monad_tutorials_timeline" class="external text" title="http://www.haskell.org/haskellwiki/Monad_tutorials_timeline" rel="nofollow">Monad Tutorials Timeline</a> Probably the most comprehensive collection of links to monad tutorials, ordered by date.</li>
<li><a href="http://www.prairienet.org/~dsb/monads.htm" class="external text" title="http://www.prairienet.org/~dsb/monads.htm" rel="nofollow">A (hopefully) painless introduction to monads</a></li>
<li><a href="http://web.cecs.pdx.edu/~antoy/Courses/TPFLP/lectures/MONADS/Noel/research/monads.html" class="external text" title="http://web.cecs.pdx.edu/~antoy/Courses/TPFLP/lectures/MONADS/Noel/research/monads.html" rel="nofollow">What the hell are Monads?</a></li>
<li><a href="http://sigfpe.blogspot.com/2006/08/you-could-have-invented-monads-and.html" class="external text" title="http://sigfpe.blogspot.com/2006/08/you-could-have-invented-monads-and.html" rel="nofollow">You Could Have Invented Monads! (And Maybe You Already Have.)</a>, a gentle introduction.</li>
<li><a href="http://haskell.org/all_about_monads/html/index.html" class="external text" title="http://haskell.org/all_about_monads/html/index.html" rel="nofollow">All About Monads</a></li>
<li><a href="http://www.haskell.org/haskellwiki/Monads_as_computation" class="external text" title="http://www.haskell.org/haskellwiki/Monads_as_computation" rel="nofollow">Monads as Computation</a></li>
<li><a href="http://www.haskell.org/haskellwiki/Monads_as_containers" class="external text" title="http://www.haskell.org/haskellwiki/Monads_as_containers" rel="nofollow">Monads as Containers</a></li>
<li><a href="http://www.engr.mun.ca/~theo/Misc/haskell_and_monads.htm" class="external text" title="http://www.engr.mun.ca/~theo/Misc/haskell_and_monads.htm" rel="nofollow">Monads for the Working Haskell Programmer</a></li>
<li><a href="http://stefan-klinger.de/files/monadGuide.pdf" class="external text" title="http://stefan-klinger.de/files/monadGuide.pdf" rel="nofollow">The Haskell Programmer's Guide to the IO Monad — Don't Panic</a></li>
<li><a href="http://www.onlamp.com/pub/a/onlamp/2007/08/02/introduction-to-haskell-pure-functions.html" class="external text" title="http://www.onlamp.com/pub/a/onlamp/2007/08/02/introduction-to-haskell-pure-functions.html" rel="nofollow">Introduction to Haskell, Part 3: Monads</a></li>
<li><a href="http://c2.com/cgi/wiki?OnMonads" class="external text" title="http://c2.com/cgi/wiki?OnMonads" rel="nofollow">On Monads</a> A discussion of monads in Haskell, at the <a href="/wiki/WikiWikiWeb" title="WikiWikiWeb">WikiWikiWeb</a> site.</li>
<li><a href="http://spbhug.folding-maps.org/wiki/MonadsEn" class="external text" title="http://spbhug.folding-maps.org/wiki/MonadsEn" rel="nofollow">Monads</a> A monad tutorial providing examples of non-trivial monads apart from the conventional IO/Maybe/List/State monads.</li>
</ul>
<p><a name="Other_documentation" id="Other_documentation"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Monad_(functional_programming)&amp;action=edit&amp;section=22" title="Edit section: Other documentation">edit</a>]</span> <span class="mw-headline">Other documentation</span></h3>
<ul>
<li><a href="http://members.chello.nl/hjgtuyl/tourdemonad.html" class="external text" title="http://members.chello.nl/hjgtuyl/tourdemonad.html" rel="nofollow">A tour of the Haskell Monad functions</a> by Henk-Jan van Tuyl</li>
<li><a href="http://www.disi.unige.it/person/MoggiE/ftp/ic91.pdf" class="external text" title="http://www.disi.unige.it/person/MoggiE/ftp/ic91.pdf" rel="nofollow">Notions of Computation and Monads</a> by Eugenio Moggi, the original paper suggesting use of monads for programming</li>
<li><a href="http://homepages.inf.ed.ac.uk/wadler/papers/marktoberdorf/baastad.pdf" class="external text" title="http://homepages.inf.ed.ac.uk/wadler/papers/marktoberdorf/baastad.pdf" rel="nofollow">"Monads for Functional Programming"</a> by <a href="/wiki/Philip_Wadler" title="Philip Wadler">Philip Wadler</a>, describing monads in Haskell (before they were implemented)</li>
</ul>
<p><a name="Monads_in_languages_other_than_Haskell" id="Monads_in_languages_other_than_Haskell"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Monad_(functional_programming)&amp;action=edit&amp;section=23" title="Edit section: Monads in languages other than Haskell">edit</a>]</span> <span class="mw-headline">Monads in languages other than Haskell</span></h3>
<ul>
<li><a href="http://moonbase.rydia.net/mental/writings/programming/monads-in-ruby/00introduction.html" class="external text" title="http://moonbase.rydia.net/mental/writings/programming/monads-in-ruby/00introduction.html" rel="nofollow">Monads in Ruby</a></li>
<li><a href="http://www.valuedlessons.com/2008/01/monads-in-python-with-nice-syntax.html" class="external text" title="http://www.valuedlessons.com/2008/01/monads-in-python-with-nice-syntax.html" rel="nofollow">Monads in Python</a></li>
<li><a href="http://lamp.epfl.ch/~emir/bqbase/2005/01/20/monad.html" class="external text" title="http://lamp.epfl.ch/~emir/bqbase/2005/01/20/monad.html" rel="nofollow">Monads in Scala</a></li>
</ul>


<!-- 
NewPP limit report
Preprocessor node count: 1152/1000000
Post-expand include size: 10163/2048000 bytes
Template argument size: 3965/2048000 bytes
Expensive parser function count: 1/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:579061-0!1!0!default!!en!2 and timestamp 20090407054526 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Monad_(functional_programming)">http://en.wikipedia.org/wiki/Monad_(functional_programming)</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Functional_programming" title="Category:Functional programming">Functional programming</a></span> | <span dir='ltr'><a href="/wiki/Category:Adjoint_functors" title="Category:Adjoint functors">Adjoint functors</a></span></div><div id="mw-hidden-catlinks" class="mw-hidden-cats-hidden">Hidden categories:&#32;<span dir='ltr'><a href="/wiki/Category:All_articles_with_unsourced_statements" title="Category:All articles with unsourced statements">All articles with unsourced statements</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_unsourced_statements_since_December_2007" title="Category:Articles with unsourced statements since December 2007">Articles with unsourced statements since December 2007</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Monad_(functional_programming)" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Monad_(functional_programming)" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Monad_(functional_programming)&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Monad_(functional_programming)&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Monad_(functional_programming)" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Monad_(functional_programming)" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Monad_(functional_programming)" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Monad_(functional_programming)&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Monad_(functional_programming)&amp;oldid=282281658" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Monad_(functional_programming)&amp;id=282281658">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Monade_(informatique)">Français</a></li>
				<li class="interwiki-it"><a href="http://it.wikipedia.org/wiki/Monade_(informatica)">Italiano</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/%E3%83%A2%E3%83%8A%E3%83%89_(%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0)">日本語</a></li>
				<li class="interwiki-ru"><a href="http://ru.wikipedia.org/wiki/%D0%9C%D0%BE%D0%BD%D0%B0%D0%B4%D0%B0_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)">Русский</a></li>
				<li class="interwiki-uk"><a href="http://uk.wikipedia.org/wiki/%D0%9C%D0%BE%D0%BD%D0%B0%D0%B4%D0%B8_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D1%83%D0%B2%D0%B0%D0%BD%D0%BD%D1%8F)">Українська</a></li>
				<li class="interwiki-zh"><a href="http://zh.wikipedia.org/wiki/%E5%8D%95%E5%AD%90">中文</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 7 April 2009, at 05:45 (UTC).</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv195 in 0.044 secs. --></body></html>
