<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Observer pattern,Cleanup from February 2008,Articles lacking sources from March 2008,Design Patterns Patterns,Fact,.NET Framework,Abstract factory pattern,ActionScript,Adapter pattern,Bridge pattern,Builder pattern" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Observer_pattern&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Observer_pattern&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Observer pattern - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Observer_pattern";
		var wgTitle = "Observer pattern";
		var wgAction = "view";
		var wgArticleId = "164863";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 280974471;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
<style type="text/css">/*<![CDATA[*/
.source-python {line-height: normal;}
.source-python li, .source-python pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for python
 * CSS class: source-python, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-python .de1, .source-python .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-python  {}
.source-python .head {}
.source-python .foot {}
.source-python .imp {font-weight: bold; color: red;}
.source-python .ln-xtra {color: #cc0; background-color: #ffc;}
.source-python li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-python li.li2 {font-weight: bold;}
.source-python .kw1 {color: #ff7700;font-weight:bold;}
.source-python .kw2 {color: #008000;}
.source-python .kw3 {color: #dc143c;}
.source-python .kw4 {color: #0000cd;}
.source-python .co1 {color: #808080; font-style: italic;}
.source-python .coMULTI {color: #808080; font-style: italic;}
.source-python .es0 {color: #000099; font-weight: bold;}
.source-python .br0 {color: #66cc66;}
.source-python .st0 {color: #483d8b;}
.source-python .nu0 {color: #ff4500;}
.source-python .me1 {color: black;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-java {line-height: normal;}
.source-java li, .source-java pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for java
 * CSS class: source-java, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-java .de1, .source-java .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-java  {}
.source-java .head {}
.source-java .foot {}
.source-java .imp {font-weight: bold; color: red;}
.source-java .ln-xtra {color: #cc0; background-color: #ffc;}
.source-java li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-java li.li2 {font-weight: bold;}
.source-java .kw1 {color: #b1b100;}
.source-java .kw2 {color: #000000; font-weight: bold;}
.source-java .kw3 {color: #aaaadd; font-weight: bold;}
.source-java .kw4 {color: #993333;}
.source-java .co1 {color: #808080; font-style: italic;}
.source-java .co2 {color: #a1a100;}
.source-java .coMULTI {color: #808080; font-style: italic;}
.source-java .es0 {color: #000099; font-weight: bold;}
.source-java .br0 {color: #66cc66;}
.source-java .st0 {color: #ff0000;}
.source-java .nu0 {color: #cc66cc;}
.source-java .me1 {color: #006600;}
.source-java .me2 {color: #006600;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-csharp {line-height: normal;}
.source-csharp li, .source-csharp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for csharp
 * CSS class: source-csharp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-csharp .de1, .source-csharp .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-csharp  {}
.source-csharp .head {}
.source-csharp .foot {}
.source-csharp .imp {font-weight: bold; color: red;}
.source-csharp .ln-xtra {color: #cc0; background-color: #ffc;}
.source-csharp li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-csharp li.li2 {font-weight: bold;}
.source-csharp .kw1 {color: #0600FF;}
.source-csharp .kw2 {color: #FF8000; font-weight: bold;}
.source-csharp .kw3 {color: #008000;}
.source-csharp .kw4 {color: #FF0000;}
.source-csharp .kw5 {color: #000000;}
.source-csharp .co1 {color: #008080; font-style: italic;}
.source-csharp .co2 {color: #008080;}
.source-csharp .coMULTI {color: #008080; font-style: italic;}
.source-csharp .es0 {color: #008080; font-weight: bold;}
.source-csharp .br0 {color: #008000;}
.source-csharp .st0 {color: #808080;}
.source-csharp .nu0 {color: #FF0000;}
.source-csharp .me1 {color: #0000FF;}
.source-csharp .me2 {color: #0000FF;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-cpp {line-height: normal;}
.source-cpp li, .source-cpp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for cpp
 * CSS class: source-cpp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-cpp .de1, .source-cpp .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-cpp  {}
.source-cpp .head {}
.source-cpp .foot {}
.source-cpp .imp {font-weight: bold; color: red;}
.source-cpp .ln-xtra {color: #cc0; background-color: #ffc;}
.source-cpp li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-cpp li.li2 {font-weight: bold;}
.source-cpp .kw1 {color: #0000ff;}
.source-cpp .kw2 {color: #0000ff;}
.source-cpp .kw3 {color: #0000dd;}
.source-cpp .kw4 {color: #0000ff;}
.source-cpp .co1 {color: #ff0000;}
.source-cpp .co2 {color: #339900;}
.source-cpp .coMULTI {color: #ff0000; font-style: italic;}
.source-cpp .es0 {color: #666666; font-weight: bold;}
.source-cpp .br0 {color: #000000;}
.source-cpp .st0 {color: #666666;}
.source-cpp .nu0 {color: #0000dd;}
.source-cpp .me1 {color: #00eeff;}
.source-cpp .me2 {color: #00eeff;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-actionscript {line-height: normal;}
.source-actionscript li, .source-actionscript pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for actionscript
 * CSS class: source-actionscript, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-actionscript .de1, .source-actionscript .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-actionscript  {}
.source-actionscript .head {}
.source-actionscript .foot {}
.source-actionscript .imp {font-weight: bold; color: red;}
.source-actionscript .ln-xtra {color: #cc0; background-color: #ffc;}
.source-actionscript li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-actionscript li.li2 {font-weight: bold;}
.source-actionscript .kw1 {color: #b1b100;}
.source-actionscript .kw2 {color: #000000; font-weight: bold;}
.source-actionscript .kw3 {color: #0066CC;}
.source-actionscript .co1 {color: #808080; font-style: italic;}
.source-actionscript .co2 {color: #808080; font-style: italic;}
.source-actionscript .coMULTI {color: #808080; font-style: italic;}
.source-actionscript .es0 {color: #000099; font-weight: bold;}
.source-actionscript .br0 {color: #66cc66;}
.source-actionscript .st0 {color: #ff0000;}
.source-actionscript .nu0 {color: #cc66cc;}
.source-actionscript .me1 {color: #006600;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-php {line-height: normal;}
.source-php li, .source-php pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for php
 * CSS class: source-php, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-php .de1, .source-php .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-php  {}
.source-php .head {}
.source-php .foot {}
.source-php .imp {font-weight: bold; color: red;}
.source-php .ln-xtra {color: #cc0; background-color: #ffc;}
.source-php li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-php li.li2 {font-weight: bold;}
.source-php .kw1 {color: #b1b100;}
.source-php .kw2 {color: #000000; font-weight: bold;}
.source-php .kw3 {color: #000066;}
.source-php .co1 {color: #808080; font-style: italic;}
.source-php .co2 {color: #808080; font-style: italic;}
.source-php .coMULTI {color: #808080; font-style: italic;}
.source-php .es0 {color: #000099; font-weight: bold;}
.source-php .br0 {color: #66cc66;}
.source-php .st0 {color: #ff0000;}
.source-php .nu0 {color: #cc66cc;}
.source-php .me1 {color: #006600;}
.source-php .me2 {color: #006600;}
.source-php .sc0 {}
.source-php .sc1 {}
.source-php .sc2 {}
.source-php .sc3 {}
.source-php .re0 {color: #0000ff;}
.source-php .re1 {color: #ff0000}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-text {line-height: normal;}
.source-text li, .source-text pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for text
 * CSS class: source-text, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-text .de1, .source-text .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-text  {}
.source-text .head {}
.source-text .foot {}
.source-text .imp {font-weight: bold; color: red;}
.source-text .ln-xtra {color: #cc0; background-color: #ffc;}
.source-text li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-text li.li2 {font-weight: bold;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style>		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Observer_pattern skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Observer pattern</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<table class="metadata plainlinks ambox ambox-style" style="">
<tr>
<td class="mbox-image">
<div style="width: 52px;"><a href="/wiki/File:Ambox_style.png" class="image" title="Ambox style.png"><img alt="" src="http://upload.wikimedia.org/wikipedia/en/d/d6/Ambox_style.png" width="40" height="40" border="0" /></a></div>
</td>
<td class="mbox-text" style="">This article <b>may require <a href="/wiki/Wikipedia:Cleanup" title="Wikipedia:Cleanup">cleanup</a> to meet Wikipedia's <a href="/wiki/Wikipedia:Manual_of_Style" title="Wikipedia:Manual of Style">quality standards</a>.</b> Please <a href="http://en.wikipedia.org/w/index.php?title=Observer_pattern&amp;action=edit" class="external text" title="http://en.wikipedia.org/w/index.php?title=Observer_pattern&amp;action=edit" rel="nofollow">improve this article</a> if you can. <small><i>(February 2008)</i></small></td>
</tr>
</table>
<p>The <b>observer pattern</b> (a subset of the asynchronous <a href="/wiki/Publish/subscribe" title="Publish/subscribe">publish/subscribe pattern</a>) is a <a href="/wiki/Design_pattern_(computer_science)" title="Design pattern (computer science)">software design pattern</a> in which an <a href="/wiki/Object_(computer_science)#Objects_in_object-oriented_programming" title="Object (computer science)">object</a>, called the subject, maintains a list of its dependents, called observers, and notifies them automatically of any state changes, usually by calling one of their <a href="/wiki/Method_(computer_science)" title="Method (computer science)">methods</a>. It is mainly used to implement distributed event handling systems.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Participant_classes"><span class="tocnumber">1</span> <span class="toctext">Participant classes</span></a>
<ul>
<li class="toclevel-2"><a href="#Subject"><span class="tocnumber">1.1</span> <span class="toctext">Subject</span></a></li>
<li class="toclevel-2"><a href="#ConcreteSubject"><span class="tocnumber">1.2</span> <span class="toctext">ConcreteSubject</span></a></li>
<li class="toclevel-2"><a href="#Observer"><span class="tocnumber">1.3</span> <span class="toctext">Observer</span></a></li>
<li class="toclevel-2"><a href="#ConcreteObserver"><span class="tocnumber">1.4</span> <span class="toctext">ConcreteObserver</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Typical_usages"><span class="tocnumber">2</span> <span class="toctext">Typical usages</span></a></li>
<li class="toclevel-1"><a href="#Examples"><span class="tocnumber">3</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2"><a href="#Python"><span class="tocnumber">3.1</span> <span class="toctext">Python</span></a></li>
<li class="toclevel-2"><a href="#Java"><span class="tocnumber">3.2</span> <span class="toctext">Java</span></a></li>
<li class="toclevel-2"><a href="#C.23_-_Traditional_Method"><span class="tocnumber">3.3</span> <span class="toctext">C# - Traditional Method</span></a></li>
<li class="toclevel-2"><a href="#C.23_-_Using_Events"><span class="tocnumber">3.4</span> <span class="toctext">C# - Using Events</span></a></li>
<li class="toclevel-2"><a href="#C.2B.2B"><span class="tocnumber">3.5</span> <span class="toctext">C++</span></a></li>
<li class="toclevel-2"><a href="#AS3"><span class="tocnumber">3.6</span> <span class="toctext">AS3</span></a></li>
<li class="toclevel-2"><a href="#PHP"><span class="tocnumber">3.7</span> <span class="toctext">PHP</span></a></li>
<li class="toclevel-2"><a href="#Ruby"><span class="tocnumber">3.8</span> <span class="toctext">Ruby</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Implementations"><span class="tocnumber">4</span> <span class="toctext">Implementations</span></a></li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">5</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">6</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">7</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Participant_classes" id="Participant_classes"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Observer_pattern&amp;action=edit&amp;section=1" title="Edit section: Participant classes">edit</a>]</span> <span class="mw-headline">Participant classes</span></h2>
<p>The participants of the pattern are detailed below. Member functions are listed with bullets.</p>
<p><a name="Subject" id="Subject"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Observer_pattern&amp;action=edit&amp;section=2" title="Edit section: Subject">edit</a>]</span> <span class="mw-headline">Subject</span></h3>
<p>This abstract class provides an <a href="/wiki/Interface_(computer_science)" title="Interface (computer science)">interface</a> for attaching and detaching observers. Subject class also holds a private list of observers. Contains these functions (methods):</p>
<ul>
<li><i>Attach</i> - Adds a new observer to the list of observers observing the subject.</li>
<li><i>Detach</i> - Removes an existing observer from the list of observers observing the subject</li>
<li><i>Notify</i> - Notifies each observer by calling the <i>Update</i> function in the observer, when a change occurs.</li>
</ul>
<p>The <i>Attach</i> function has an observer as argument. This may be either a <a href="/wiki/Virtual_function" title="Virtual function">virtual function</a> of the observer class (<i>Update</i> in this description) or a function pointer (more generally a <a href="/wiki/Function_object" title="Function object">function object</a> or functor) in a non object oriented setting.</p>
<p><a name="ConcreteSubject" id="ConcreteSubject"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Observer_pattern&amp;action=edit&amp;section=3" title="Edit section: ConcreteSubject">edit</a>]</span> <span class="mw-headline">ConcreteSubject</span></h3>
<p>The class provides the state of interest to observers. It also sends a notification to all observers, by calling the Notify function in its <a href="/wiki/Superclass" title="Superclass">superclass</a> or base class (i.e., in the Subject class). Contains this function:</p>
<ul>
<li><i>GetState</i> - Returns the state of the subject.</li>
</ul>
<p><a name="Observer" id="Observer"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Observer_pattern&amp;action=edit&amp;section=4" title="Edit section: Observer">edit</a>]</span> <span class="mw-headline">Observer</span></h3>
<p>This class defines an updating interface for all observers, to receive update notification from the subject. The Observer class is used as an abstract class to implement concrete observers. Contains this function:</p>
<ul>
<li><i>Update</i> - An abstract function, to be overridden by concrete observers.</li>
</ul>
<p><a name="ConcreteObserver" id="ConcreteObserver"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Observer_pattern&amp;action=edit&amp;section=5" title="Edit section: ConcreteObserver">edit</a>]</span> <span class="mw-headline">ConcreteObserver</span></h3>
<p>This class maintains a reference with the ConcreteSubject, to receive the state of the subject when a notification is received. Contains this function:</p>
<ul>
<li><i>Update</i> - This is the overridden function in the concrete class. When this function is called by the subject, the ConcreteObserver calls the GetState function of the subject to update the information it has about the subject's state.</li>
</ul>
<p>Each concrete observer implements the update function and as a consequence defines its own behavior when the notification occurs.</p>
<p>When a change occurs to the (concrete) subject, it sends a notification to all observers, by calling the <i>Notify</i> function. The <i>Notify</i> function then calls the <i>Update</i> function of all attached (concrete) observers. The <i>Notify</i> and <i>Update</i> functions may have parameters indicating what kind of change has occurred to the subject. This allows for optimizations in the observer (only updating those parts that changed).</p>
<p><a name="Typical_usages" id="Typical_usages"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Observer_pattern&amp;action=edit&amp;section=6" title="Edit section: Typical usages">edit</a>]</span> <span class="mw-headline">Typical usages</span></h2>
<ul>
<li>When an abstraction has two aspects, one dependent on the other. <a href="/wiki/Encapsulation_(object-oriented_programming)" title="Encapsulation (object-oriented programming)" class="mw-redirect">Encapsulating</a> these aspects in separate objects allows the programmer to vary and reuse them independently.</li>
<li>When a change to one object requires changing others, and it's not known in advance how many objects need to be changed.</li>
<li>When an object should be able to notify other objects without making assumptions about who these objects are.</li>
</ul>
<p>The observer pattern is also very often associated with the <a href="/wiki/Model-view-controller" title="Model-view-controller" class="mw-redirect">model-view-controller</a> (MVC) <a href="/wiki/Paradigm" title="Paradigm">paradigm</a>. In MVC, the observer pattern is used to create a <a href="/wiki/Loose_coupling" title="Loose coupling">loose coupling</a> between the model and the view. Typically, a modification in the model triggers the notification of model observers which are actually the views.</p>
<p>An example is <a href="/wiki/Swing_(Java)" title="Swing (Java)">Java Swing</a>, in which the model is expected to issue change notifications to the views via the <i>PropertyChangeNotification</i> infrastructure. Model classes are Java beans that behave as the subject, described above. View classes are associated with some visible item on the GUI and behave as the observers, described above. As the application runs, changes are made to the model. The user sees these changes because the views are updated accordingly.</p>
<p><a name="Examples" id="Examples"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Observer_pattern&amp;action=edit&amp;section=7" title="Edit section: Examples">edit</a>]</span> <span class="mw-headline">Examples</span></h2>
<p><a name="Python" id="Python"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Observer_pattern&amp;action=edit&amp;section=8" title="Edit section: Python">edit</a>]</span> <span class="mw-headline">Python</span></h3>
<p>The observer pattern in <a href="/wiki/Python_(programming_language)" title="Python (programming language)">Python</a>:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-python">
<span class="kw1">class</span> AbstractSubject:
    <span class="kw1">def</span> register<span class="br0">(</span><span class="kw2">self</span>, listener<span class="br0">)</span>:
        <span class="kw1">raise</span> <span class="kw2">NotImplementedError</span><span class="br0">(</span><span class="st0">"Must subclass me"</span><span class="br0">)</span>
 
    <span class="kw1">def</span> unregister<span class="br0">(</span><span class="kw2">self</span>, listener<span class="br0">)</span>:
        <span class="kw1">raise</span> <span class="kw2">NotImplementedError</span><span class="br0">(</span><span class="st0">"Must subclass me"</span><span class="br0">)</span>
 
    <span class="kw1">def</span> notify_listeners<span class="br0">(</span><span class="kw2">self</span>, event<span class="br0">)</span>:
        <span class="kw1">raise</span> <span class="kw2">NotImplementedError</span><span class="br0">(</span><span class="st0">"Must subclass me"</span><span class="br0">)</span>
 
<span class="kw1">class</span> Listener:
    <span class="kw1">def</span> <span class="kw4">__init__</span><span class="br0">(</span><span class="kw2">self</span>, name, subject<span class="br0">)</span>:
        <span class="kw2">self</span>.<span class="me1">name</span> = name
        subject.<span class="me1">register</span><span class="br0">(</span><span class="kw2">self</span><span class="br0">)</span>
 
    <span class="kw1">def</span> notify<span class="br0">(</span><span class="kw2">self</span>, event<span class="br0">)</span>:
        <span class="kw1">print</span> <span class="kw2">self</span>.<span class="me1">name</span>, <span class="st0">"received event"</span>, event
 
<span class="kw1">class</span> Subject<span class="br0">(</span>AbstractSubject<span class="br0">)</span>:
    <span class="kw1">def</span> <span class="kw4">__init__</span><span class="br0">(</span><span class="kw2">self</span><span class="br0">)</span>:
        <span class="kw2">self</span>.<span class="me1">listeners</span> = <span class="br0">[</span><span class="br0">]</span>
        <span class="kw2">self</span>.<span class="me1">data</span> = <span class="kw2">None</span>
 
    <span class="kw1">def</span> getUserAction<span class="br0">(</span><span class="kw2">self</span><span class="br0">)</span>:
        <span class="kw2">self</span>.<span class="me1">data</span> = <span class="kw2">raw_input</span><span class="br0">(</span><span class="st0">'Enter something to do:'</span><span class="br0">)</span>
        <span class="kw1">return</span> <span class="kw2">self</span>.<span class="me1">data</span>
 
    <span class="co1"># Implement abstract Class AbstractSubject</span>
 
    <span class="kw1">def</span> register<span class="br0">(</span><span class="kw2">self</span>, listener<span class="br0">)</span>:
        <span class="kw2">self</span>.<span class="me1">listeners</span>.<span class="me1">append</span><span class="br0">(</span>listener<span class="br0">)</span>
 
    <span class="kw1">def</span> unregister<span class="br0">(</span><span class="kw2">self</span>, listener<span class="br0">)</span>:
        <span class="kw2">self</span>.<span class="me1">listeners</span>.<span class="me1">remove</span><span class="br0">(</span>listener<span class="br0">)</span>
 
    <span class="kw1">def</span> notify_listeners<span class="br0">(</span><span class="kw2">self</span>, event<span class="br0">)</span>:
        <span class="kw1">for</span> listener <span class="kw1">in</span> <span class="kw2">self</span>.<span class="me1">listeners</span>:
            listener.<span class="me1">notify</span><span class="br0">(</span>event<span class="br0">)</span>
 
 
<span class="kw1">if</span> __name__==<span class="st0">"__main__"</span>:
    <span class="co1"># make a subject object to spy on</span>
    subject = Subject<span class="br0">(</span><span class="br0">)</span>
 
    <span class="co1"># register two listeners to monitor it.</span>
    listenerA = Listener<span class="br0">(</span><span class="st0">"&lt;listener A&gt;"</span>, subject<span class="br0">)</span>
    listenerB = Listener<span class="br0">(</span><span class="st0">"&lt;listener B&gt;"</span>, subject<span class="br0">)</span>
 
    <span class="co1"># simulated event</span>
    subject.<span class="me1">notify_listeners</span> <span class="br0">(</span><span class="st0">"&lt;event 1&gt;"</span><span class="br0">)</span>
    <span class="co1"># outputs:</span>
    <span class="co1">#     &lt;listener A&gt; received event &lt;event 1&gt;</span>
    <span class="co1">#     &lt;listener B&gt; received event &lt;event 1&gt;</span>
 
    action = subject.<span class="me1">getUserAction</span><span class="br0">(</span><span class="br0">)</span>
    subject.<span class="me1">notify_listeners</span><span class="br0">(</span>action<span class="br0">)</span>
    <span class="co1">#Enter something to do:hello</span>
    <span class="co1"># outputs:</span>
    <span class="co1">#     &lt;listener A&gt; received event hello</span>
    <span class="co1">#     &lt;listener B&gt; received event hello</span>
</pre></div>
<p>The observer pattern can be implemented more succinctly in Python using <a href="/wiki/Python_syntax_and_semantics#Decorators" title="Python syntax and semantics">function decorators</a>.</p>
<p><a name="Java" id="Java"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Observer_pattern&amp;action=edit&amp;section=9" title="Edit section: Java">edit</a>]</span> <span class="mw-headline">Java</span></h3>
<p>Below is an example that takes keyboard input and treats each input line as an event. The example is built upon the library classes <a href="http://java.sun.com/javase/6/docs/api/java/util/Observer.html" class="external text" title="http://java.sun.com/javase/6/docs/api/java/util/Observer.html" rel="nofollow"><tt>java.util.Observer</tt></a> and <a href="http://java.sun.com/javase/6/docs/api/java/util/Observable.html" class="external text" title="http://java.sun.com/javase/6/docs/api/java/util/Observable.html" rel="nofollow"><tt>java.util.Observable</tt></a>. When a string is supplied from System.in, the method <tt>notifyObserver</tt> is then called, in order to notify all observers of the event's occurrence, in the form of an invocation of their 'update' methods - in our example, <tt>ResponseHandler.update(...)</tt>.</p>
<p>The file myapp.java contains a main() method that might be used in order to run the code.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-java">
<span class="coMULTI">/* File Name : EventSource.java */</span>
 
<span class="kw2">package</span> obs;
<span class="co2">import java.util.Observable;          //Observable is here</span>
<span class="co2">import java.io.BufferedReader;</span>
<span class="co2">import java.io.IOException;</span>
<span class="co2">import java.io.InputStreamReader;</span>
 
<span class="kw2">public</span> <span class="kw2">class</span> EventSource <span class="kw2">extends</span> <span class="kw3">Observable</span> <span class="kw2">implements</span> <span class="kw3">Runnable</span> 
<span class="br0">{</span>
    <span class="kw2">public</span> <span class="kw4">void</span> run<span class="br0">(</span><span class="br0">)</span>
    <span class="br0">{</span>
        <span class="kw2">try</span>
        <span class="br0">{</span>   
            <span class="kw2">final</span> <span class="kw3">InputStreamReader</span> isr = <span class="kw2">new</span> <span class="kw3">InputStreamReader</span><span class="br0">(</span> <span class="kw3">System</span>.<span class="me1">in</span> <span class="br0">)</span>;
            <span class="kw2">final</span> <span class="kw3">BufferedReader</span> br = <span class="kw2">new</span> <span class="kw3">BufferedReader</span><span class="br0">(</span> isr <span class="br0">)</span>;
            <span class="kw1">while</span><span class="br0">(</span> <span class="kw2">true</span> <span class="br0">)</span>
            <span class="br0">{</span>
                <span class="kw2">final</span> <span class="kw3">String</span> response = br.<span class="me1">readLine</span><span class="br0">(</span><span class="br0">)</span>;
                setChanged<span class="br0">(</span><span class="br0">)</span>;
                notifyObservers<span class="br0">(</span> response <span class="br0">)</span>;
            <span class="br0">}</span>
        <span class="br0">}</span>
        <span class="kw2">catch</span> <span class="br0">(</span><span class="kw3">IOException</span> e<span class="br0">)</span>
        <span class="br0">{</span>
            e.<span class="me1">printStackTrace</span><span class="br0">(</span><span class="br0">)</span>;
        <span class="br0">}</span>
    <span class="br0">}</span>
<span class="br0">}</span>
</pre></div>
<div dir="ltr" style="text-align: left;">
<pre class="source-java">
<span class="coMULTI">/* File Name: ResponseHandler.java */</span>
 
<span class="kw2">package</span> obs;
 
<span class="co2">import java.util.Observable;</span>
<span class="co2">import java.util.Observer;  /* this is Event Handler */</span>
 
<span class="kw2">public</span> <span class="kw2">class</span> <span class="kw3">ResponseHandler</span> <span class="kw2">implements</span> <span class="kw3">Observer</span>
<span class="br0">{</span>
    <span class="kw2">private</span> <span class="kw3">String</span> resp;
    <span class="kw2">public</span> <span class="kw4">void</span> update <span class="br0">(</span><span class="kw3">Observable</span> obj, <span class="kw3">Object</span> arg<span class="br0">)</span>
    <span class="br0">{</span>
        <span class="kw1">if</span> <span class="br0">(</span>arg <span class="kw2">instanceof</span> <span class="kw3">String</span><span class="br0">)</span>
        <span class="br0">{</span>
            resp = <span class="br0">(</span><span class="kw3">String</span><span class="br0">)</span> arg;
            <span class="kw3">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span><span class="st0">"<span class="es0">\n</span>Received Response: "</span>+ resp <span class="br0">)</span>;
        <span class="br0">}</span>
    <span class="br0">}</span>
<span class="br0">}</span>
</pre></div>
<div dir="ltr" style="text-align: left;">
<pre class="source-java">
<span class="coMULTI">/* Filename : myapp.java */</span>
<span class="coMULTI">/* This is main program */</span>
 
<span class="kw2">package</span> obs;
 
<span class="kw2">public</span> <span class="kw2">class</span> MyApp
<span class="br0">{</span>
    <span class="kw2">public</span> <span class="kw2">static</span> <span class="kw4">void</span> main<span class="br0">(</span><span class="kw3">String</span> args<span class="br0">[</span><span class="br0">]</span><span class="br0">)</span>
    <span class="br0">{</span>            
        <span class="kw3">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span><span class="st0">"Enter Text &gt;"</span><span class="br0">)</span>;
 
        <span class="co1">// create an event source - reads from stdin</span>
        <span class="kw2">final</span> EventSource evSrc = <span class="kw2">new</span> EventSource<span class="br0">(</span><span class="br0">)</span>;
 
        <span class="co1">// create an observer</span>
        <span class="kw2">final</span> <span class="kw3">ResponseHandler</span> respHandler = <span class="kw2">new</span> <span class="kw3">ResponseHandler</span><span class="br0">(</span><span class="br0">)</span>;
 
        <span class="co1">// subscribe the observer to the event source</span>
        evSrc.<span class="me1">addObserver</span><span class="br0">(</span> respHandler <span class="br0">)</span>;
 
        <span class="co1">// starts the event thread</span>
        <span class="kw3">Thread</span> thread = <span class="kw2">new</span> <span class="kw3">Thread</span><span class="br0">(</span>evSrc<span class="br0">)</span>;
        thread.<span class="me1">start</span><span class="br0">(</span><span class="br0">)</span>;
    <span class="br0">}</span>
<span class="br0">}</span>
</pre></div>
<p><a name="C.23_-_Traditional_Method" id="C.23_-_Traditional_Method"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Observer_pattern&amp;action=edit&amp;section=10" title="Edit section: C# - Traditional Method">edit</a>]</span> <span class="mw-headline">C# - Traditional Method</span></h3>
<p>C# and the other <a href="/wiki/.NET_Framework" title=".NET Framework">.NET Framework</a> languages do not typically require a full implementation of the Observer pattern using interfaces and concrete objects. Here is an example of using them, however.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-csharp">
 
 
<span class="kw1">using</span> <span class="kw5">System</span>;
<span class="kw1">using</span> <span class="kw5">System</span>.<span class="me1">Collections</span>;
 
<span class="kw1">namespace</span> Wikipedia.<span class="me1">Patterns</span>.<span class="me1">Observer</span>
<span class="br0">{</span>
	<span class="co1">// IObserver --&gt; interface for the observer</span>
	<span class="kw1">public</span> <span class="kw4">interface</span> IObserver
	<span class="br0">{</span>
		<span class="co1">// called by the subject to update the observer of any change</span>
		<span class="co1">// The method parameters can be modified to fit certain criteria</span>
		<span class="kw1">void</span> Update<span class="br0">(</span><span class="kw4">string</span> message<span class="br0">)</span>;
	<span class="br0">}</span>
 
	<span class="kw1">public</span> <span class="kw4">class</span> Subject
	<span class="br0">{</span>
		<span class="co1">// use array list implementation for collection of observers</span>
		<span class="kw1">private</span> ArrayList observers;
 
		<span class="co1">// constructor</span>
		<span class="kw1">public</span> Subject<span class="br0">(</span><span class="br0">)</span>
		<span class="br0">{</span>
			observers = <span class="kw3">new</span> ArrayList<span class="br0">(</span><span class="br0">)</span>;
		<span class="br0">}</span>
 
		<span class="kw1">public</span> <span class="kw1">void</span> Register<span class="br0">(</span>IObserver observer<span class="br0">)</span>
		<span class="br0">{</span>
			<span class="co1">// if list does not contain observer, add</span>
			<span class="kw1">if</span> <span class="br0">(</span>!observers.<span class="me1">Contains</span><span class="br0">(</span>observer<span class="br0">)</span><span class="br0">)</span>
			<span class="br0">{</span>
				observers.<span class="me1">Add</span><span class="br0">(</span>observer<span class="br0">)</span>;
			<span class="br0">}</span>
		<span class="br0">}</span>
 
		<span class="kw1">public</span> <span class="kw1">void</span> Unregister<span class="br0">(</span>IObserver observer<span class="br0">)</span>
		<span class="br0">{</span>
			<span class="co1">// if observer is in the list, remove</span>
			<span class="kw1">if</span> <span class="br0">(</span>observers.<span class="me1">Contains</span><span class="br0">(</span>observer<span class="br0">)</span><span class="br0">)</span>
			<span class="br0">{</span>
				observers.<span class="me1">Remove</span><span class="br0">(</span>observer<span class="br0">)</span>;
			<span class="br0">}</span>
		<span class="br0">}</span>
 
		<span class="kw1">public</span> <span class="kw1">void</span> Notify<span class="br0">(</span><span class="kw4">string</span> message<span class="br0">)</span>
		<span class="br0">{</span>
			<span class="co1">// call update method for every observer</span>
			<span class="kw1">foreach</span> <span class="br0">(</span>IObserver observer <span class="kw1">in</span> observers<span class="br0">)</span>
			<span class="br0">{</span>
				observer.<span class="me1">Update</span><span class="br0">(</span>message<span class="br0">)</span>;
			<span class="br0">}</span>
		<span class="br0">}</span>
	<span class="br0">}</span>
 
	<span class="co1">// Observer1 --&gt; Implements the IObserver</span>
	<span class="kw1">public</span> <span class="kw4">class</span> Observer1 : IObserver
	<span class="br0">{</span>
		<span class="kw1">public</span> <span class="kw1">void</span> Update<span class="br0">(</span><span class="kw4">string</span> message<span class="br0">)</span>
		<span class="br0">{</span>
			Console.<span class="me1">WriteLine</span><span class="br0">(</span><span class="st0">"Observer1:"</span> + message<span class="br0">)</span>;
		<span class="br0">}</span>
	<span class="br0">}</span>
 
	<span class="co1">// Observer2 --&gt; Implements the IObserver</span>
	<span class="kw1">public</span> <span class="kw4">class</span> Observer2 : IObserver
	<span class="br0">{</span>
		<span class="kw1">public</span> <span class="kw1">void</span> Update<span class="br0">(</span><span class="kw4">string</span> message<span class="br0">)</span>
		<span class="br0">{</span>
			Console.<span class="me1">WriteLine</span><span class="br0">(</span><span class="st0">"Observer2:"</span> + message<span class="br0">)</span>;
		<span class="br0">}</span>
	<span class="br0">}</span>
 
	<span class="co1">// Test class</span>
	<span class="kw1">public</span> <span class="kw4">class</span> ObserverTester
	<span class="br0">{</span>
		<span class="br0">[</span>STAThread<span class="br0">]</span>
		<span class="kw1">public</span> <span class="kw1">static</span> <span class="kw1">void</span> Main<span class="br0">(</span><span class="br0">)</span>
		<span class="br0">{</span>
			Subject mySubject = <span class="kw3">new</span> Subject<span class="br0">(</span><span class="br0">)</span>;
			IObserver myObserver1 = <span class="kw3">new</span> Observer1<span class="br0">(</span><span class="br0">)</span>;
			IObserver myObserver2 = <span class="kw3">new</span> Observer2<span class="br0">(</span><span class="br0">)</span>;
 
			<span class="co1">// register observers</span>
			mySubject.<span class="me1">Register</span><span class="br0">(</span>myObserver1<span class="br0">)</span>;
			mySubject.<span class="me1">Register</span><span class="br0">(</span>myObserver2<span class="br0">)</span>;
 
			mySubject.<span class="me1">Notify</span><span class="br0">(</span><span class="st0">"message 1"</span><span class="br0">)</span>;
			mySubject.<span class="me1">Notify</span><span class="br0">(</span><span class="st0">"message 2"</span><span class="br0">)</span>;
		<span class="br0">}</span>
	<span class="br0">}</span>
<span class="br0">}</span>
</pre></div>
<p><a name="C.23_-_Using_Events" id="C.23_-_Using_Events"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Observer_pattern&amp;action=edit&amp;section=11" title="Edit section: C# - Using Events">edit</a>]</span> <span class="mw-headline">C# - Using Events</span></h3>
<p>The alternative to using concrete and abstract observers and publishers in C# and other <a href="/wiki/.NET_Framework" title=".NET Framework">.NET Framework</a> languages, such as <a href="/wiki/Visual_Basic" title="Visual Basic">Visual Basic</a>, is to use events. The event model is supported via <a href="/wiki/Delegation_(programming)" title="Delegation (programming)">delegates</a> that define the method signature that should be used to capture events. Consequently, delegates provide the mediation otherwise provided by the abstract observer, the methods themselves provide the concrete observer, the concrete subject is the class defining the event, and the subject is the event system built into the base class library. It is the preferred method of accomplishing the Observer pattern in .NET applications.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-csharp">
<span class="kw1">using</span> <span class="kw5">System</span>;
 
<span class="co1">// First, declare a delegate type that will be used to fire events.</span>
<span class="co1">//  This is the same delegate as System.EventHandler.</span>
<span class="co1">//  This delegate serves as the abstract observer.</span>
<span class="co1">//  It does not provide the implementation, but merely the contract.</span>
<span class="kw1">public</span> <span class="kw4">delegate</span> <span class="kw1">void</span> EventHandler<span class="br0">(</span><span class="kw4">object</span> sender, EventArgs e<span class="br0">)</span>;
 
<span class="co1">// Next, declare a published event.  This serves as the concrete subject.</span>
<span class="co1">//  Note that the abstract subject is handled implicitly by the runtime.</span>
<span class="kw1">public</span> <span class="kw4">class</span> Button
<span class="br0">{</span>
    <span class="co1">// The EventHandler contract is part of the event declaration.</span>
    <span class="kw1">public</span> <span class="kw1">event</span> EventHandler Clicked;
 
    <span class="co1">// By convention, .NET events are fired from descendant classes by a virtual method,</span>
    <span class="co1">//  allowing descendant classes to handle the event invocation without subscribing</span>
    <span class="co1">//  to the event itself.</span>
    <span class="kw1">protected</span> <span class="kw1">virtual</span> <span class="kw1">void</span> OnClicked<span class="br0">(</span>EventArgs e<span class="br0">)</span>
    <span class="br0">{</span>
        <span class="kw1">if</span> <span class="br0">(</span>Clicked != <span class="kw1">null</span><span class="br0">)</span> 
            Clicked<span class="br0">(</span><span class="kw1">this</span>, e<span class="br0">)</span>; <span class="co1">// implicitly calls all observers/subscribers</span>
    <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="co1">// Then in an observing class, you are able to attach and detach from the events:</span>
<span class="kw1">public</span> <span class="kw4">class</span> Window
<span class="br0">{</span>
    <span class="kw1">private</span> Button okButton;
 
    <span class="kw1">public</span> Window<span class="br0">(</span><span class="br0">)</span>
    <span class="br0">{</span>
        okButton = <span class="kw3">new</span> Button<span class="br0">(</span><span class="br0">)</span>;
        <span class="co1">// This is an attach function.  Detaching is accomplished with -=.</span>
        <span class="co1">// Note that it is invalid to use the assignment operator - events are multicast</span>
        <span class="co1">//  and can have multiple observers.</span>
        okButton.<span class="me1">Clicked</span> += <span class="kw3">new</span> EventHandler<span class="br0">(</span>okButton_Clicked<span class="br0">)</span>;
    <span class="br0">}</span>
 
    <span class="kw1">private</span> <span class="kw1">void</span> okButton_Clicked<span class="br0">(</span><span class="kw4">object</span> sender, EventArgs e<span class="br0">)</span>
    <span class="br0">{</span>
        <span class="co1">// This method is called when Clicked(this, e) is called within the Button class</span>
        <span class="co1">//  unless it has been detached.</span>
    <span class="br0">}</span>
<span class="br0">}</span>
</pre></div>
<p><a name="C.2B.2B" id="C.2B.2B"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Observer_pattern&amp;action=edit&amp;section=12" title="Edit section: C++">edit</a>]</span> <span class="mw-headline">C++</span></h3>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
<span class="co2">#include &lt;list&gt;</span>
<span class="co2">#include &lt;algorithm&gt;</span>
<span class="co2">#include &lt;iostream&gt;</span>
<span class="kw2">using</span> <span class="kw2">namespace</span> std;
 
<span class="co1">// The Abstract Observer</span>
<span class="kw2">class</span> ObserverBoardInterface
<span class="br0">{</span>
<span class="kw2">public</span>:
    <span class="kw2">virtual</span> <span class="kw4">void</span> update<span class="br0">(</span><span class="kw4">float</span> a,<span class="kw4">float</span> b,<span class="kw4">float</span> c<span class="br0">)</span> = <span class="nu0">0</span>;
<span class="br0">}</span>;
 
<span class="co1">// Abstract Interface for Displays</span>
<span class="kw2">class</span> DisplayBoardInterface
<span class="br0">{</span>
<span class="kw2">public</span>:
    <span class="kw2">virtual</span> <span class="kw4">void</span> show<span class="br0">(</span><span class="br0">)</span> = <span class="nu0">0</span>;
<span class="br0">}</span>;
 
<span class="co1">// The Abstract Subject</span>
<span class="kw2">class</span> WeatherDataInterface
<span class="br0">{</span>
<span class="kw2">public</span>:
    <span class="kw2">virtual</span> <span class="kw4">void</span> registerOb<span class="br0">(</span>ObserverBoardInterface* ob<span class="br0">)</span> = <span class="nu0">0</span>;
    <span class="kw2">virtual</span> <span class="kw4">void</span> removeOb<span class="br0">(</span>ObserverBoardInterface* ob<span class="br0">)</span> = <span class="nu0">0</span>;
    <span class="kw2">virtual</span> <span class="kw4">void</span> notifyOb<span class="br0">(</span><span class="br0">)</span> = <span class="nu0">0</span>;
<span class="br0">}</span>;
 
<span class="co1">// The Concrete Subject</span>
<span class="kw2">class</span> ParaWeatherData: <span class="kw2">public</span> WeatherDataInterface
<span class="br0">{</span>
<span class="kw2">public</span>:
    <span class="kw4">void</span> SensorDataChange<span class="br0">(</span><span class="kw4">float</span> a,<span class="kw4">float</span> b,<span class="kw4">float</span> c<span class="br0">)</span>
    <span class="br0">{</span>
        m_humidity = a;
        m_temperature = b;
        m_pressure = c;
        notifyOb<span class="br0">(</span><span class="br0">)</span>;
    <span class="br0">}</span>
 
    <span class="kw4">void</span> registerOb<span class="br0">(</span>ObserverBoardInterface* ob<span class="br0">)</span>
    <span class="br0">{</span>
        m_obs.<span class="me1">push_back</span><span class="br0">(</span>ob<span class="br0">)</span>;
    <span class="br0">}</span>
 
    <span class="kw4">void</span> removeOb<span class="br0">(</span>ObserverBoardInterface* ob<span class="br0">)</span>
    <span class="br0">{</span>
        m_obs.<span class="kw3">remove</span><span class="br0">(</span>ob<span class="br0">)</span>;
    <span class="br0">}</span>
<span class="kw2">protected</span>:
    <span class="kw4">void</span> notifyOb<span class="br0">(</span><span class="br0">)</span>
    <span class="br0">{</span>
        list&lt;ObserverBoardInterface*&gt;::<span class="me2">iterator</span> pos = m_obs.<span class="me1">begin</span><span class="br0">(</span><span class="br0">)</span>;
        <span class="kw1">while</span> <span class="br0">(</span>pos != m_obs.<span class="me1">end</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>
        <span class="br0">{</span>
            <span class="br0">(</span><span class="br0">(</span>ObserverBoardInterface* <span class="br0">)</span><span class="br0">(</span>*pos<span class="br0">)</span><span class="br0">)</span>-&gt;update<span class="br0">(</span>m_humidity,m_temperature,m_pressure<span class="br0">)</span>;
            <span class="br0">(</span>dynamic_cast&lt;DisplayBoardInterface*&gt;<span class="br0">(</span>*pos<span class="br0">)</span><span class="br0">)</span>-&gt;show<span class="br0">(</span><span class="br0">)</span>;
            ++pos;
        <span class="br0">}</span>
    <span class="br0">}</span>
 
<span class="kw2">private</span>:
    <span class="kw4">float</span>        m_humidity;
    <span class="kw4">float</span>        m_temperature;
    <span class="kw4">float</span>        m_pressure;
    list&lt;ObserverBoardInterface* &gt; m_obs;
<span class="br0">}</span>;
 
<span class="co1">// A Concrete Observer</span>
<span class="kw2">class</span> CurrentConditionBoard : <span class="kw2">public</span> ObserverBoardInterface, <span class="kw2">public</span> DisplayBoardInterface
<span class="br0">{</span>
<span class="kw2">public</span>:
    CurrentConditionBoard<span class="br0">(</span>ParaWeatherData&amp; a<span class="br0">)</span>:m_data<span class="br0">(</span>a<span class="br0">)</span>
    <span class="br0">{</span>
        m_data.<span class="me1">registerOb</span><span class="br0">(</span><span class="kw3">this</span><span class="br0">)</span>;
    <span class="br0">}</span>
    <span class="kw4">void</span> show<span class="br0">(</span><span class="br0">)</span>
    <span class="br0">{</span>
        cout&lt;&lt;<span class="st0">"_____CurrentConditionBoard_____"</span>&lt;&lt;endl;
        cout&lt;&lt;<span class="st0">"humidity: "</span>&lt;&lt;m_h&lt;&lt;endl;
        cout&lt;&lt;<span class="st0">"temperature: "</span>&lt;&lt;m_t&lt;&lt;endl;
        cout&lt;&lt;<span class="st0">"pressure: "</span>&lt;&lt;m_p&lt;&lt;endl;
        cout&lt;&lt;<span class="st0">"_______________________________"</span>&lt;&lt;endl;
    <span class="br0">}</span>
 
    <span class="kw4">void</span> update<span class="br0">(</span><span class="kw4">float</span> h, <span class="kw4">float</span> t, <span class="kw4">float</span> p<span class="br0">)</span>
    <span class="br0">{</span>
        m_h = h;
        m_t = t;
        m_p = p;
    <span class="br0">}</span>
 
<span class="kw2">private</span>:
    <span class="kw4">float</span> m_h;
    <span class="kw4">float</span> m_t;
    <span class="kw4">float</span> m_p;
    ParaWeatherData&amp; m_data;
<span class="br0">}</span>;
 
<span class="co1">// A Concrete Observer</span>
<span class="kw2">class</span> StatisticBoard : <span class="kw2">public</span> ObserverBoardInterface, <span class="kw2">public</span> DisplayBoardInterface
<span class="br0">{</span>
<span class="kw2">public</span>:
    StatisticBoard<span class="br0">(</span>ParaWeatherData&amp; a<span class="br0">)</span>:m_maxt<span class="br0">(</span><span class="nu0">-1000</span><span class="br0">)</span>,m_mint<span class="br0">(</span><span class="nu0">1000</span><span class="br0">)</span>,m_avet<span class="br0">(</span><span class="nu0">0</span><span class="br0">)</span>,m_count<span class="br0">(</span><span class="nu0">0</span><span class="br0">)</span>,m_data<span class="br0">(</span>a<span class="br0">)</span>
    <span class="br0">{</span>
        m_data.<span class="me1">registerOb</span><span class="br0">(</span><span class="kw3">this</span><span class="br0">)</span>;
    <span class="br0">}</span>
 
    <span class="kw4">void</span> show<span class="br0">(</span><span class="br0">)</span>
    <span class="br0">{</span>
        cout&lt;&lt;<span class="st0">"________StatisticBoard_________"</span>&lt;&lt;endl;
        cout&lt;&lt;<span class="st0">"lowest  temperature: "</span>&lt;&lt;m_mint&lt;&lt;endl;
        cout&lt;&lt;<span class="st0">"highest temperature: "</span>&lt;&lt;m_maxt&lt;&lt;endl;
        cout&lt;&lt;<span class="st0">"average temperature: "</span>&lt;&lt;m_avet&lt;&lt;endl;
        cout&lt;&lt;<span class="st0">"_______________________________"</span>&lt;&lt;endl;
    <span class="br0">}</span>
 
    <span class="kw4">void</span> update<span class="br0">(</span><span class="kw4">float</span> h, <span class="kw4">float</span> t, <span class="kw4">float</span> p<span class="br0">)</span>
    <span class="br0">{</span>
        ++m_count;
        <span class="kw1">if</span> <span class="br0">(</span>t&gt;m_maxt<span class="br0">)</span>
        <span class="br0">{</span>
            m_maxt = t;
        <span class="br0">}</span>
        <span class="kw1">if</span> <span class="br0">(</span>t&lt;m_mint<span class="br0">)</span>
        <span class="br0">{</span>
            m_mint = t;
        <span class="br0">}</span>
        m_avet = <span class="br0">(</span>m_avet * <span class="br0">(</span>m_count<span class="nu0">-1</span><span class="br0">)</span> + t<span class="br0">)</span>/m_count;
    <span class="br0">}</span>
 
<span class="kw2">private</span>:
    <span class="kw4">float</span> m_maxt;
    <span class="kw4">float</span>  m_mint;
    <span class="kw4">float</span> m_avet;
    <span class="kw4">int</span> m_count;
    ParaWeatherData&amp; m_data;
<span class="br0">}</span>;
 
 
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">int</span> argc, <span class="kw4">char</span> *argv<span class="br0">[</span><span class="br0">]</span><span class="br0">)</span>
<span class="br0">{</span>
 
    ParaWeatherData * wdata = <span class="kw3">new</span> ParaWeatherData;
    CurrentConditionBoard* currentB = <span class="kw3">new</span> CurrentConditionBoard<span class="br0">(</span>*wdata<span class="br0">)</span>;
    StatisticBoard* statisticB = <span class="kw3">new</span> StatisticBoard<span class="br0">(</span>*wdata<span class="br0">)</span>;
 
    wdata-&gt;SensorDataChange<span class="br0">(</span><span class="nu0">10.2</span>, <span class="nu0">28.2</span>, <span class="nu0">1001</span><span class="br0">)</span>;
    wdata-&gt;SensorDataChange<span class="br0">(</span><span class="nu0">12</span>, <span class="nu0">30.12</span>, <span class="nu0">1003</span><span class="br0">)</span>;
    wdata-&gt;SensorDataChange<span class="br0">(</span><span class="nu0">10.2</span>, <span class="nu0">26</span>, <span class="nu0">806</span><span class="br0">)</span>;
    wdata-&gt;SensorDataChange<span class="br0">(</span><span class="nu0">10.3</span>, <span class="nu0">35.9</span>, <span class="nu0">900</span><span class="br0">)</span>;
 
    wdata-&gt;removeOb<span class="br0">(</span>currentB<span class="br0">)</span>;
 
    wdata-&gt;SensorDataChange<span class="br0">(</span><span class="nu0">100</span>, <span class="nu0">40</span>, <span class="nu0">1900</span><span class="br0">)</span>;  
 
    <span class="kw3">delete</span> statisticB;
    <span class="kw3">delete</span> currentB;
    <span class="kw3">delete</span> wdata;
 
    <span class="kw1">return</span> <span class="nu0">0</span>;
<span class="br0">}</span>
</pre></div>
<p><a name="AS3" id="AS3"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Observer_pattern&amp;action=edit&amp;section=13" title="Edit section: AS3">edit</a>]</span> <span class="mw-headline">AS3</span></h3>
<div dir="ltr" style="text-align: left;">
<pre class="source-actionscript">
<span class="co1">// Main Class</span>
package <span class="br0">{</span>
    <span class="kw3">import</span> flash.<span class="me1">display</span>.<span class="kw3">MovieClip</span>;
 
    <span class="kw3">public</span> <span class="kw2">class</span> Main <span class="kw3">extends</span> <span class="kw3">MovieClip</span> <span class="br0">{</span>
        <span class="kw3">private</span> <span class="kw2">var</span> _cs:ConcreteSubject = <span class="kw2">new</span> ConcreteSubject<span class="br0">(</span><span class="br0">)</span>;
        <span class="kw3">private</span> <span class="kw2">var</span> _co1:ConcreteObserver1 = <span class="kw2">new</span> ConcreteObserver1<span class="br0">(</span><span class="br0">)</span>;
        <span class="kw3">private</span> <span class="kw2">var</span> _co2:ConcreteObserver2 = <span class="kw2">new</span> ConcreteObserver2<span class="br0">(</span><span class="br0">)</span>;
 
        <span class="kw3">public</span> <span class="kw2">function</span> Main<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
            _cs.<span class="me1">registerObserver</span><span class="br0">(</span>_co1<span class="br0">)</span>;
            _cs.<span class="me1">registerObserver</span><span class="br0">(</span>_co2<span class="br0">)</span>;
 
            _cs.<span class="me1">changeState</span><span class="br0">(</span><span class="nu0">10</span><span class="br0">)</span>;
            _cs.<span class="me1">changeState</span><span class="br0">(</span><span class="nu0">99</span><span class="br0">)</span>;
 
            _cs.<span class="me1">unRegisterObserver</span><span class="br0">(</span>_co1<span class="br0">)</span>;
 
            _cs.<span class="me1">changeState</span><span class="br0">(</span><span class="nu0">17</span><span class="br0">)</span>;
 
            _co1 = <span class="kw2">null</span>;
        <span class="br0">}</span>
    <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="co1">// Interface Subject</span>
package <span class="br0">{</span>
    <span class="kw3">public</span> <span class="kw3">interface</span> ISubject <span class="br0">{</span>
        <span class="kw2">function</span> registerObserver<span class="br0">(</span>o:IObserver<span class="br0">)</span>:<span class="kw3">void</span>;
 
        <span class="kw2">function</span> unRegisterObserver<span class="br0">(</span>o:IObserver<span class="br0">)</span>:<span class="kw3">void</span>;
 
        <span class="kw2">function</span> updateObservers<span class="br0">(</span><span class="br0">)</span>:<span class="kw3">void</span>;
 
        <span class="kw2">function</span> changeState<span class="br0">(</span>newState:uint<span class="br0">)</span>:<span class="kw3">void</span>;
    <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="co1">// Interface Observer</span>
package <span class="br0">{</span>
    <span class="kw3">public</span> <span class="kw3">interface</span> IObserver <span class="br0">{</span>
        <span class="kw2">function</span> update<span class="br0">(</span>newState:uint<span class="br0">)</span>:<span class="kw3">void</span>;
    <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="co1">// Concrete Subject</span>
package <span class="br0">{</span>
    <span class="kw3">public</span> <span class="kw2">class</span> ConcreteSubject <span class="kw3">implements</span> ISubject <span class="br0">{</span>
        <span class="kw3">private</span> <span class="kw2">var</span> _observersList:<span class="kw3">Array</span> = <span class="kw2">new</span> <span class="kw3">Array</span><span class="br0">(</span><span class="br0">)</span>;
        <span class="kw3">private</span> <span class="kw2">var</span> _currentState:uint;
 
        <span class="kw3">public</span> <span class="kw2">function</span> ConcreteSubject<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
        <span class="br0">}</span>
 
        <span class="kw3">public</span> <span class="kw2">function</span> registerObserver<span class="br0">(</span>o:IObserver<span class="br0">)</span>:<span class="kw3">void</span> <span class="br0">{</span>
            _observersList.<span class="kw3">push</span><span class="br0">(</span> o <span class="br0">)</span>;
            _observersList<span class="br0">[</span>_observersList.<span class="me1">length</span><span class="nu0">-1</span><span class="br0">]</span>.<span class="me1">update</span><span class="br0">(</span>_currentState<span class="br0">)</span>; <span class="co1">// update newly registered</span>
        <span class="br0">}</span>
 
        <span class="kw3">public</span> <span class="kw2">function</span> unRegisterObserver<span class="br0">(</span>o:IObserver<span class="br0">)</span>:<span class="kw3">void</span> <span class="br0">{</span>
            _observersList.<span class="kw3">splice</span><span class="br0">(</span> _observersList.<span class="kw3">indexOf</span><span class="br0">(</span> o <span class="br0">)</span>, <span class="nu0">1</span> <span class="br0">)</span>;
        <span class="br0">}</span>
 
        <span class="kw3">public</span> <span class="kw2">function</span> updateObservers<span class="br0">(</span><span class="br0">)</span>:<span class="kw3">void</span> <span class="br0">{</span>
            <span class="kw1">for</span><span class="br0">(</span> <span class="kw2">var</span> i:uint = <span class="nu0">0</span>; i&lt;_observersList.<span class="kw3">length</span>; i++<span class="br0">)</span> <span class="br0">{</span>
                _observersList<span class="br0">[</span>i<span class="br0">]</span>.<span class="me1">update</span><span class="br0">(</span>_currentState<span class="br0">)</span>;
            <span class="br0">}</span>
        <span class="br0">}</span>
 
        <span class="kw3">public</span> <span class="kw2">function</span> changeState<span class="br0">(</span>newState:uint<span class="br0">)</span>:<span class="kw3">void</span> <span class="br0">{</span>
            _currentState = newState;
            updateObservers<span class="br0">(</span><span class="br0">)</span>;
        <span class="br0">}</span>
    <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="co1">// Concrete Observer 1</span>
package <span class="br0">{</span>
    <span class="kw3">public</span> <span class="kw2">class</span> ConcreteObserver1 <span class="kw3">implements</span> IObserver <span class="br0">{</span>
        <span class="kw3">public</span> <span class="kw2">function</span> ConcreteObserver1<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
        <span class="br0">}</span>
 
        <span class="kw3">public</span> <span class="kw2">function</span> update<span class="br0">(</span>newState:uint<span class="br0">)</span>:<span class="kw3">void</span> <span class="br0">{</span>
            <span class="kw3">trace</span><span class="br0">(</span> <span class="st0">"co1: "</span>+newState <span class="br0">)</span>;
        <span class="br0">}</span>
 
        <span class="co1">// other Observer specific methods</span>
    <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="co1">// Concrete Observer 2</span>
package <span class="br0">{</span>
    <span class="kw3">public</span> <span class="kw2">class</span> ConcreteObserver2 <span class="kw3">implements</span> IObserver <span class="br0">{</span>
        <span class="kw3">public</span> <span class="kw2">function</span> ConcreteObserver2<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
        <span class="br0">}</span>
 
        <span class="kw3">public</span> <span class="kw2">function</span> update<span class="br0">(</span>newState:uint<span class="br0">)</span>:<span class="kw3">void</span> <span class="br0">{</span>
            <span class="kw3">trace</span><span class="br0">(</span> <span class="st0">"co2: "</span>+newState <span class="br0">)</span>;
        <span class="br0">}</span>
 
        <span class="co1">// other Observer specific methods</span>
    <span class="br0">}</span>
<span class="br0">}</span>
</pre></div>
<p><a name="PHP" id="PHP"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Observer_pattern&amp;action=edit&amp;section=14" title="Edit section: PHP">edit</a>]</span> <span class="mw-headline">PHP</span></h3>
<p><b>class STUDENT</b></p>
<div dir="ltr" style="text-align: left;">
<pre class="source-php">
<span class="kw2">&lt;?php</span>
<span class="kw2">class</span> Student implements SplObserver <span class="br0">{</span>
 
	protected <span class="re0">$type</span> = <span class="st0">"Student"</span>;
	<span class="kw2">private</span>   <span class="re0">$name</span>;
	<span class="kw2">private</span>   <span class="re0">$address</span>;
	<span class="kw2">private</span>   <span class="re0">$telephone</span>;
	<span class="kw2">private</span>   <span class="re0">$email</span>;
	<span class="kw2">private</span>   <span class="re0">$_classes</span> = <span class="kw3">array</span><span class="br0">(</span><span class="br0">)</span>;
 
	<span class="kw2">public</span> <span class="kw2">function</span> __construct<span class="br0">(</span><span class="re0">$name</span><span class="br0">)</span>
	<span class="br0">{</span>
		<span class="re0">$this</span>-&gt;<span class="me1">name</span> = <span class="re0">$name</span>;
	<span class="br0">}</span>
 
	<span class="kw2">public</span> <span class="kw2">function</span> GET_type<span class="br0">(</span><span class="br0">)</span>
	<span class="br0">{</span>
		<span class="kw1">return</span> <span class="re0">$this</span>-&gt;<span class="me1">type</span>;
	<span class="br0">}</span>
 
	<span class="kw2">public</span> <span class="kw2">function</span> GET_name<span class="br0">(</span><span class="br0">)</span>
	<span class="br0">{</span>
		<span class="kw1">return</span> <span class="re0">$this</span>-&gt;<span class="me1">name</span>;
	<span class="br0">}</span>
 
	<span class="kw2">public</span> <span class="kw2">function</span> GET_email<span class="br0">(</span><span class="br0">)</span>
	<span class="br0">{</span>
		<span class="kw1">return</span> <span class="re0">$this</span>-&gt;<span class="me1">email</span>;
	<span class="br0">}</span>
 
	<span class="kw2">public</span> <span class="kw2">function</span> GET_telephone<span class="br0">(</span><span class="br0">)</span>
	<span class="br0">{</span>
		<span class="kw1">return</span> <span class="re0">$this</span>-&gt;<span class="me1">telephone</span>;
	<span class="br0">}</span>
 
	<span class="kw2">public</span> <span class="kw2">function</span> update<span class="br0">(</span>SplSubject <span class="re0">$object</span><span class="br0">)</span>
	<span class="br0">{</span>
		<span class="re0">$object</span>-&gt;<span class="me1">SET_log</span><span class="br0">(</span><span class="st0">"Comes from "</span>.<span class="re0">$this</span>-&gt;<span class="me1">name</span>.<span class="st0">": I'm a student of "</span>.<span class="re0">$object</span>-&gt;<span class="me1">GET_materia</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>;
	<span class="br0">}</span>
 
<span class="br0">}</span>
 
<span class="kw2">?&gt;</span>
</pre></div>
<p><b>class TEACHER</b></p>
<div dir="ltr" style="text-align: left;">
<pre class="source-php">
<span class="kw2">&lt;?php</span>
<span class="kw2">class</span> Teacher implements SplObserver <span class="br0">{</span>
 
	protected <span class="re0">$type</span> = <span class="st0">"Teacher"</span>;
	<span class="kw2">private</span>   <span class="re0">$name</span>;
	<span class="kw2">private</span>   <span class="re0">$address</span>;
	<span class="kw2">private</span>   <span class="re0">$telephone</span>;
	<span class="kw2">private</span>   <span class="re0">$email</span>;
	<span class="kw2">private</span>   <span class="re0">$_classes</span> = <span class="kw3">array</span><span class="br0">(</span><span class="br0">)</span>;
 
	<span class="kw2">public</span> <span class="kw2">function</span> __construct<span class="br0">(</span><span class="re0">$name</span><span class="br0">)</span>
	<span class="br0">{</span>
		<span class="re0">$this</span>-&gt;<span class="me1">name</span> = <span class="re0">$name</span>;
	<span class="br0">}</span>
 
	<span class="kw2">public</span> <span class="kw2">function</span> GET_type<span class="br0">(</span><span class="br0">)</span>
	<span class="br0">{</span>
		<span class="kw1">return</span> <span class="re0">$this</span>-&gt;<span class="me1">type</span>;
	<span class="br0">}</span>
 
	<span class="kw2">public</span> <span class="kw2">function</span> GET_name<span class="br0">(</span><span class="br0">)</span>
	<span class="br0">{</span>
		<span class="kw1">return</span> <span class="re0">$this</span>-&gt;<span class="me1">name</span>;
	<span class="br0">}</span>
 
	<span class="kw2">public</span> <span class="kw2">function</span> GET_email<span class="br0">(</span><span class="br0">)</span>
	<span class="br0">{</span>
		<span class="kw1">return</span> <span class="re0">$this</span>-&gt;<span class="me1">email</span>;
	<span class="br0">}</span>
 
	<span class="kw2">public</span> <span class="kw2">function</span> GET_telephone<span class="br0">(</span><span class="br0">)</span>
	<span class="br0">{</span>
		<span class="kw1">return</span> <span class="re0">$this</span>-&gt;<span class="me1">name</span>;
	<span class="br0">}</span>
 
	<span class="kw2">public</span> <span class="kw2">function</span> update<span class="br0">(</span>SplSubject <span class="re0">$object</span><span class="br0">)</span>
	<span class="br0">{</span>
		<span class="re0">$object</span>-&gt;<span class="me1">SET_log</span><span class="br0">(</span><span class="st0">"Comes from "</span>.<span class="re0">$this</span>-&gt;<span class="me1">name</span>.<span class="st0">": I teach in "</span>.<span class="re0">$object</span>-&gt;<span class="me1">GET_materia</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>;
	<span class="br0">}</span>
 
<span class="br0">}</span>
 
<span class="kw2">?&gt;</span>
</pre></div>
<p><b>Class SUBJECT</b></p>
<div dir="ltr" style="text-align: left;">
<pre class="source-php">
<span class="kw2">&lt;?php</span>
 
<span class="kw2">class</span> Subject implements SplSubject <span class="br0">{</span>
 
	<span class="kw2">private</span> <span class="re0">$name_materia</span>;
	<span class="kw2">private</span> <span class="re0">$_observers</span> = <span class="kw3">array</span><span class="br0">(</span><span class="br0">)</span>;
	<span class="kw2">private</span> <span class="re0">$_log</span> = <span class="kw3">array</span><span class="br0">(</span><span class="br0">)</span>;
 
	<span class="kw2">function</span> __construct<span class="br0">(</span><span class="re0">$name</span><span class="br0">)</span>
	<span class="br0">{</span>
		<span class="re0">$this</span>-&gt;<span class="me1">name_materia</span> = <span class="re0">$name</span>;
		<span class="re0">$this</span>-&gt;_log<span class="br0">[</span><span class="br0">]</span>       = <span class="st0">"Subject $name was included"</span>;
	<span class="br0">}</span>
 
	<span class="coMULTI">/* Add an observer */</span>
	<span class="kw2">public</span> <span class="kw2">function</span> attach<span class="br0">(</span>SplObserver <span class="re0">$classes</span><span class="br0">)</span> <span class="br0">{</span>
		<span class="re0">$this</span>-&gt;_classes<span class="br0">[</span><span class="br0">]</span> = <span class="re0">$classes</span>;
		<span class="re0">$this</span>-&gt;_log<span class="br0">[</span><span class="br0">]</span>     = <span class="st0">" The "</span>.<span class="re0">$classes</span>-&gt;<span class="me1">GET_type</span><span class="br0">(</span><span class="br0">)</span>.<span class="st0">" "</span>.<span class="re0">$classes</span>-&gt;<span class="me1">GET_name</span><span class="br0">(</span><span class="br0">)</span>.<span class="st0">" was included"</span>;
	<span class="br0">}</span>
 
	<span class="coMULTI">/* Remove an observer */</span>
	<span class="kw2">public</span> <span class="kw2">function</span> detach<span class="br0">(</span>SplObserver <span class="re0">$classes</span><span class="br0">)</span> <span class="br0">{</span>
		<span class="kw1">foreach</span> <span class="br0">(</span><span class="re0">$this</span>-&gt;_classes <span class="kw1">as</span> <span class="re0">$key</span> =&gt; <span class="re0">$obj</span><span class="br0">)</span> <span class="br0">{</span>
			<span class="kw1">if</span> <span class="br0">(</span><span class="re0">$obj</span> == <span class="re0">$classes</span><span class="br0">)</span> <span class="br0">{</span>
				<span class="kw3">unset</span><span class="br0">(</span><span class="re0">$this</span>-&gt;_classes<span class="br0">[</span><span class="re0">$key</span><span class="br0">]</span><span class="br0">)</span>;
				<span class="re0">$this</span>-&gt;_log<span class="br0">[</span><span class="br0">]</span> = <span class="st0">" The "</span>.<span class="re0">$classes</span>-&gt;<span class="me1">GET_type</span><span class="br0">(</span><span class="br0">)</span>.<span class="st0">" "</span>.<span class="re0">$classes</span>-&gt;<span class="me1">GET_name</span><span class="br0">(</span><span class="br0">)</span>.<span class="st0">" was removed"</span>;
            		<span class="br0">}</span>
		<span class="br0">}</span>
	<span class="br0">}</span>
 
	<span class="coMULTI">/* Notificate an observer */</span>
	<span class="kw2">public</span> <span class="kw2">function</span> notify<span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
		<span class="kw1">foreach</span> <span class="br0">(</span><span class="re0">$this</span>-&gt;_classes <span class="kw1">as</span> <span class="re0">$classes</span><span class="br0">)</span><span class="br0">{</span>
			<span class="re0">$classes</span>-&gt;<span class="me1">update</span><span class="br0">(</span><span class="re0">$this</span><span class="br0">)</span>;
		<span class="br0">}</span>
	<span class="br0">}</span>
 
	<span class="kw2">public</span> <span class="kw2">function</span> GET_materia<span class="br0">(</span><span class="br0">)</span>
	<span class="br0">{</span>
		<span class="kw1">return</span> <span class="re0">$this</span>-&gt;<span class="me1">name_materia</span>;
	<span class="br0">}</span>
 
	<span class="kw2">function</span> SET_log<span class="br0">(</span><span class="re0">$valor</span><span class="br0">)</span>
	<span class="br0">{</span>
		<span class="re0">$this</span>-&gt;_log<span class="br0">[</span><span class="br0">]</span> = <span class="re0">$valor</span> ;
	<span class="br0">}</span>
 
	<span class="kw2">function</span> GET_log<span class="br0">(</span><span class="br0">)</span>
	<span class="br0">{</span>
		<span class="kw1">return</span> <span class="re0">$this</span>-&gt;_log;
	<span class="br0">}</span>
 
 
<span class="br0">}</span>
<span class="kw2">?&gt;</span>
</pre></div>
<p><b>Application</b></p>
<div dir="ltr" style="text-align: left;">
<pre class="source-php">
<span class="kw2">&lt;?php</span>
<span class="kw1">require_once</span><span class="br0">(</span><span class="st0">"teacher.class.php"</span><span class="br0">)</span>;
<span class="kw1">require_once</span><span class="br0">(</span><span class="st0">"student.class.php"</span><span class="br0">)</span>;
<span class="kw1">require_once</span><span class="br0">(</span><span class="st0">"subject.class.php"</span><span class="br0">)</span>;
 
<span class="re0">$subject</span>  = <span class="kw2">new</span> Subject<span class="br0">(</span><span class="st0">"Math"</span><span class="br0">)</span>;
<span class="re0">$marcus</span>   = <span class="kw2">new</span> Teacher<span class="br0">(</span><span class="st0">"Marcus Brasizza"</span><span class="br0">)</span>;
<span class="re0">$rafael</span>   = <span class="kw2">new</span> Student<span class="br0">(</span><span class="st0">"Rafael"</span><span class="br0">)</span>;
<span class="re0">$vinicius</span> = <span class="kw2">new</span> Student<span class="br0">(</span><span class="st0">"Vinicius"</span><span class="br0">)</span>;
 
<span class="co1">// Include observers in the math Subject</span>
<span class="re0">$subject</span>-&gt;<span class="me1">attach</span><span class="br0">(</span><span class="re0">$rafael</span><span class="br0">)</span>;
<span class="re0">$subject</span>-&gt;<span class="me1">attach</span><span class="br0">(</span><span class="re0">$vinicius</span><span class="br0">)</span>;
<span class="re0">$subject</span>-&gt;<span class="me1">attach</span><span class="br0">(</span><span class="re0">$marcus</span><span class="br0">)</span>;
 
<span class="re0">$subject2</span> = <span class="kw2">new</span> Subject<span class="br0">(</span><span class="st0">"English"</span><span class="br0">)</span>;
<span class="re0">$renato</span>   = <span class="kw2">new</span> Teacher<span class="br0">(</span><span class="st0">"Renato"</span><span class="br0">)</span>;
<span class="re0">$fabio</span>    = <span class="kw2">new</span> Student<span class="br0">(</span><span class="st0">"Fabio"</span><span class="br0">)</span>;
<span class="re0">$tiago</span>    = <span class="kw2">new</span> Student<span class="br0">(</span><span class="st0">"Tiago"</span><span class="br0">)</span>;
 
<span class="co1">// Include observers in the english Subject</span>
<span class="re0">$subject2</span>-&gt;<span class="me1">attach</span><span class="br0">(</span><span class="re0">$renato</span><span class="br0">)</span>;
<span class="re0">$subject2</span>-&gt;<span class="me1">attach</span><span class="br0">(</span><span class="re0">$vinicius</span><span class="br0">)</span>;
<span class="re0">$subject2</span>-&gt;<span class="me1">attach</span><span class="br0">(</span><span class="re0">$fabio</span><span class="br0">)</span>;
<span class="re0">$subject2</span>-&gt;<span class="me1">attach</span><span class="br0">(</span><span class="re0">$tiago</span><span class="br0">)</span>;
 
<span class="co1">// Remove the instance "Rafael from subject"</span>
<span class="re0">$subject</span>-&gt;<span class="me1">detach</span><span class="br0">(</span><span class="re0">$rafael</span><span class="br0">)</span>;
 
<span class="co1">// Notify both subjects</span>
<span class="re0">$subject</span>-&gt;<span class="me1">notify</span><span class="br0">(</span><span class="br0">)</span>;
<span class="re0">$subject2</span>-&gt;<span class="me1">notify</span><span class="br0">(</span><span class="br0">)</span>;
 
<span class="kw3">echo</span> <span class="st0">"First Subject &lt;br&gt;"</span>;
<span class="kw3">echo</span> <span class="st0">"&lt;pre&gt;"</span>;
<span class="kw3">print_r</span><span class="br0">(</span><span class="re0">$subject</span>-&gt;<span class="me1">GET_log</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>;
<span class="kw3">echo</span> <span class="st0">"&lt;/pre&gt;"</span>;
<span class="kw3">echo</span> <span class="st0">"&lt;hr&gt;"</span>;
<span class="kw3">echo</span> <span class="st0">"Second Subject &lt;br&gt;"</span>;
<span class="kw3">echo</span> <span class="st0">"&lt;pre&gt;"</span>;
<span class="kw3">print_r</span><span class="br0">(</span><span class="re0">$subject2</span>-&gt;<span class="me1">GET_log</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>;
<span class="kw3">echo</span> <span class="st0">"&lt;/pre&gt;"</span>;
<span class="kw2">?&gt;</span>
</pre></div>
<p><b>OUTPUT</b></p>
<p><i>First Subject</i></p>
<div dir="ltr" style="text-align: left;">
<pre class="source-text">
Array
(
    [0] =&gt;  Subject Math was included
    [1] =&gt;  The Student Rafael was included
    [2] =&gt;  The Student Vinicius was included
    [3] =&gt;  The Teacher Marcus Brasizza was included
    [4] =&gt;  The Student Rafael was removed
    [5] =&gt; Comes from Vinicius: I'm a student of Math
    [6] =&gt; Comes from Marcus Brasizza: I teach in Math
)
</pre></div>
<p><i>Second Subject</i></p>
<div dir="ltr" style="text-align: left;">
<pre class="source-text">
Array
(
    [0] =&gt;  Subject English was included
    [1] =&gt;  The Teacher Renato was included
    [2] =&gt;  The Student Vinicius was included
    [3] =&gt;  The Student Fabio was included
    [4] =&gt;  The Student Tiago was included
    [5] =&gt; Comes from Renato: I teach in English
    [6] =&gt; Comes from Vinicius: I'm a student of English
    [7] =&gt; Comes from Fabio: I'm a student of English
    [8] =&gt; Comes from Tiago: I'm a student of English
)
</pre></div>
<p><a name="Ruby" id="Ruby"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Observer_pattern&amp;action=edit&amp;section=15" title="Edit section: Ruby">edit</a>]</span> <span class="mw-headline">Ruby</span></h3>
<p>In Ruby, use the standard Observable mixin. For documentation and an example, see <a href="http://www.ruby-doc.org/stdlib/libdoc/observer/rdoc/index.html" class="external free" title="http://www.ruby-doc.org/stdlib/libdoc/observer/rdoc/index.html" rel="nofollow">http://www.ruby-doc.org/stdlib/libdoc/observer/rdoc/index.html</a></p>
<p><a name="Implementations" id="Implementations"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Observer_pattern&amp;action=edit&amp;section=16" title="Edit section: Implementations">edit</a>]</span> <span class="mw-headline">Implementations</span></h2>
<p>The observer pattern is implemented in numerous <a href="/wiki/Programming_library" title="Programming library" class="mw-redirect">programming libraries</a> and systems, including almost all <a href="/wiki/GUI" title="GUI" class="mw-redirect">GUI</a> toolkits.</p>
<p>Some of the most notable implementations of this pattern:</p>
<ul>
<li>The <a href="/wiki/Swing_(Java)" title="Swing (Java)">Java Swing</a> library makes extensive use of the observer pattern for event management</li>
<li><a href="http://www.boost.org/doc/html/signals.html" class="external text" title="http://www.boost.org/doc/html/signals.html" rel="nofollow">Boost.Signals</a>, an extension of the C++ STL providing a signal/slot model</li>
<li>The <a href="/wiki/Qt_(toolkit)" title="Qt (toolkit)">Qt</a> C++ framework's <a href="/wiki/Signals_and_slots" title="Signals and slots">signal/slot model</a></li>
<li><a href="http://libsigc.sourceforge.net" class="external text" title="http://libsigc.sourceforge.net" rel="nofollow">libsigc++</a> - the C++ <a href="/wiki/Signal_programming" title="Signal programming">signalling</a> template library.</li>
<li><a href="http://sigslot.sourceforge.net/" class="external text" title="http://sigslot.sourceforge.net/" rel="nofollow">sigslot</a> - C++ Signal/Slot Library</li>
<li><a href="http://xlobject.sourceforge.net/" class="external text" title="http://xlobject.sourceforge.net/" rel="nofollow">XLObject</a> - Template-based C++ signal/slot model patterned after Qt.</li>
<li><a href="http://www.monkey.org/~provos/libevent/" class="external text" title="http://www.monkey.org/~provos/libevent/" rel="nofollow">libevent</a> - Multi-threaded Crossplatform Signal/Slot C++ Library</li>
<li><a href="/wiki/GObject" title="GObject">GObject</a>, in <a href="/wiki/GLib" title="GLib">GLib</a> - an implementation of objects and <a href="/wiki/Signal_programming" title="Signal programming">signals</a>/<a href="/wiki/Callback_(computer_science)" title="Callback (computer science)">callbacks</a> in C. (This library has many bindings to other programming languages.)</li>
<li><a href="http://msdn2.microsoft.com/en-us/library/ms954621.aspx" class="external text" title="http://msdn2.microsoft.com/en-us/library/ms954621.aspx" rel="nofollow">Exploring the Observer Design Pattern</a> - the <a href="/wiki/C_Sharp_(programming_language)" title="C Sharp (programming language)">C#</a> and <a href="/wiki/Visual_Basic_.NET" title="Visual Basic .NET">Visual Basic .NET</a> implementation, using <a href="/wiki/Delegate_(.NET)" title="Delegate (.NET)">delegates</a> and the Event pattern</li>
<li><a href="http://ramblings.aaronballman.com/2005/04/Using_the_Observer_Pattern_in_REALbasic.html" class="external text" title="http://ramblings.aaronballman.com/2005/04/Using_the_Observer_Pattern_in_REALbasic.html" rel="nofollow">Using the Observer Pattern</a>, a discussion and implementation in <a href="/wiki/REALbasic" title="REALbasic">REALbasic</a></li>
<li><a href="http://livedocs.macromedia.com/flex/2/langref/flash/events/package-detail.html" class="external text" title="http://livedocs.macromedia.com/flex/2/langref/flash/events/package-detail.html" rel="nofollow">flash.events</a>, a package in <a href="/wiki/ActionScript" title="ActionScript">ActionScript</a> 3.0 (following from the mx.events package in ActionScript 2.0).</li>
<li><a href="http://ptolemy.eecs.berkeley.edu/presentations/06/FutureOfEmbeddedSoftware_Lee_Graz.ppt" class="external text" title="http://ptolemy.eecs.berkeley.edu/presentations/06/FutureOfEmbeddedSoftware_Lee_Graz.ppt" rel="nofollow">CSP</a> - <i>Observer Pattern</i> using <i><a href="/wiki/Communicating_sequential_processes" title="Communicating sequential processes">CSP</a>-like Rendezvous</i> (each actor is a process, communication is via rendezvous).</li>
<li><a href="http://developer.yahoo.com/yui/event/" class="external text" title="http://developer.yahoo.com/yui/event/" rel="nofollow">YUI Event utility</a> implements custom events through the observer pattern</li>
<li><a href="http://home.gna.org/py-notify/" class="external text" title="http://home.gna.org/py-notify/" rel="nofollow">Py-notify</a>, a <a href="/wiki/Python_(programming_language)" title="Python (programming language)">Python</a> implementation</li>
<li><a href="http://pear.php.net/package/Event_Dispatcher" class="external text" title="http://pear.php.net/package/Event_Dispatcher" rel="nofollow">Event_Dispatcher</a>, a <a href="/wiki/PHP" title="PHP">PHP</a> implementation</li>
<li><a href="http://blogs.teamb.com/joannacarter/articles/690.aspx" class="external text" title="http://blogs.teamb.com/joannacarter/articles/690.aspx" rel="nofollow">Delphi Observer Pattern</a>, a <a href="/wiki/Delphi" title="Delphi">Delphi</a> implementation</li>
<li><a href="http://www.codeproject.com/csharp/c_sharp_remoting.asp" class="external text" title="http://www.codeproject.com/csharp/c_sharp_remoting.asp" rel="nofollow">.NET Remoting</a>, Applying the Observer Pattern in .NET Remoting (using C#)</li>
<li><a href="http://perfectjpattern.sourceforge.net/dp-observer.html" class="external text" title="http://perfectjpattern.sourceforge.net/dp-observer.html" rel="nofollow">PerfectJPattern Open Source Project</a>, Provides a context-free and type-safe implementation of the Observer Pattern in Java.</li>
<li><a href="http://common-lisp.net/project/cells/" class="external text" title="http://common-lisp.net/project/cells/" rel="nofollow">Cells</a>, a dataflow extension to <a href="/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a> that uses meta-programming to hide some of the details of Observer pattern implementation.</li>
<li><a href="http://www.labviewtutorial.eu/viewtopic.php?f=19&amp;t=9" class="external text" title="http://www.labviewtutorial.eu/viewtopic.php?f=19&amp;t=9" rel="nofollow">Publish/Subscribe with LabVIEW</a>, Implementation example of Observer or Publish/Subscribe using G.</li>
<li><a href="http://www.php.net/~helly/php/ext/spl/main.html" class="external text" title="http://www.php.net/~helly/php/ext/spl/main.html" rel="nofollow">SPL</a>, the Standard PHP Library</li>
</ul>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Observer_pattern&amp;action=edit&amp;section=17" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<table class="metadata plainlinks ambox ambox-content" style="">
<tr>
<td class="mbox-image">
<div style="width: 52px;"><a href="/wiki/File:Question_book-new.svg" class="image" title="Question book-new.svg"><img alt="" src="http://upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/50px-Question_book-new.svg.png" width="50" height="39" border="0" /></a></div>
</td>
<td class="mbox-text" style="">This article <b>does not <a href="/wiki/Wikipedia:Citing_sources" title="Wikipedia:Citing sources">cite</a> any <a href="/wiki/Wikipedia:Verifiability" title="Wikipedia:Verifiability">references or sources</a></b>. Please help <a href="http://en.wikipedia.org/w/index.php?title=Observer_pattern&amp;action=edit" class="external text" title="http://en.wikipedia.org/w/index.php?title=Observer_pattern&amp;action=edit" rel="nofollow">improve this article</a> by adding citations to <a href="/wiki/Wikipedia:Reliable_sources" title="Wikipedia:Reliable sources">reliable sources</a> (ideally, using <i><a href="/wiki/Wikipedia:Footnotes" title="Wikipedia:Footnotes">inline citations</a></i>). Unsourced material may be <a href="/wiki/Template:Fact" title="Template:Fact">challenged</a> and <a href="/wiki/Wikipedia:BURDEN" title="Wikipedia:BURDEN" class="mw-redirect">removed</a>. <small><i>(March 2008)</i></small></td>
</tr>
</table>
<ul>
<li><a href="http://www.research.ibm.com/designpatterns/example.htm" class="external free" title="http://www.research.ibm.com/designpatterns/example.htm" rel="nofollow">http://www.research.ibm.com/designpatterns/example.htm</a></li>
<li><a href="http://msdn.microsoft.com/en-us/library/ms954621.aspx" class="external free" title="http://msdn.microsoft.com/en-us/library/ms954621.aspx" rel="nofollow">http://msdn.microsoft.com/en-us/library/ms954621.aspx</a></li>
<li><a href="http://www.javaworld.com/javaworld/javaqa/2001-05/04-qa-0525-observer.html|" class="external text" title="http://www.javaworld.com/javaworld/javaqa/2001-05/04-qa-0525-observer.html|" rel="nofollow">"Speaking on the Observer pattern" - JavaWorld</a></li>
</ul>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Observer_pattern&amp;action=edit&amp;section=18" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<ul>
<li><a href="/wiki/Design_Patterns" title="Design Patterns" class="mw-redirect">Design Patterns</a>, the book which gave rise to the study of design patterns in computer science</li>
<li><a href="/wiki/Design_pattern_(computer_science)" title="Design pattern (computer science)">Design pattern (computer science)</a>, a standard solution to common problems in software design</li>
<li><a href="/wiki/Implicit_invocation" title="Implicit invocation">implicit invocation</a></li>
</ul>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Observer_pattern&amp;action=edit&amp;section=19" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<ul>
<li><a href="http://www.a-scripts.com/object-oriented-php/2009/02/21/the-observer-pattern/" class="external text" title="http://www.a-scripts.com/object-oriented-php/2009/02/21/the-observer-pattern/" rel="nofollow">Observer pattern in PHP</a></li>
<li><a href="http://www.codeproject.com/gen/design/applyingpatterns.asp" class="external text" title="http://www.codeproject.com/gen/design/applyingpatterns.asp" rel="nofollow">A sample implementation in .NET</a></li>
<li><a href="http://www.javaworld.com/javaworld/javaqa/2001-05/04-qa-0525-observer.html" class="external text" title="http://www.javaworld.com/javaworld/javaqa/2001-05/04-qa-0525-observer.html" rel="nofollow">Observer Pattern in Java</a></li>
<li><a href="http://java.sun.com/j2se/1.4.2/docs/api/java/util/Observable.html" class="external text" title="http://java.sun.com/j2se/1.4.2/docs/api/java/util/Observable.html" rel="nofollow">Observer Pattern implementation in JDK 1.4</a></li>
<li><a href="http://www.dofactory.com/Patterns/PatternObserver.aspx" class="external text" title="http://www.dofactory.com/Patterns/PatternObserver.aspx" rel="nofollow">Definition &amp; UML diagram</a></li>
<li><a href="http://www.fsw.com/Jt/Jt.htm" class="external text" title="http://www.fsw.com/Jt/Jt.htm" rel="nofollow">Jt</a> J2EE Pattern Oriented Framework</li>
<li><a href="http://mooph.cz/index.php?less_fun&amp;mvc" class="external text" title="http://mooph.cz/index.php?less_fun&amp;mvc" rel="nofollow">Discussion of multiple observer application.</a></li>
</ul>
<table class="navbox" cellspacing="0" style=";">
<tr>
<td style="padding:2px;">
<table cellspacing="0" class="nowraplinks collapsible autocollapse" style="width:100%;background:transparent;color:inherit;;">
<tr>
<th style=";" colspan="2" class="navbox-title">
<div style="float:left; width:6em;text-align:left;">
<div class="noprint plainlinksneverexpand navbar" style="background:none; padding:0; font-weight:normal;;;border:none;; font-size:xx-small;"><a href="/wiki/Template:Design_Patterns_Patterns" title="Template:Design Patterns Patterns"><span title="View this template" style=";;border:none;">v</span></a>&#160;•&#160;<a href="/w/index.php?title=Template_talk:Design_Patterns_Patterns&amp;action=edit&amp;redlink=1" class="new" title="Template talk:Design Patterns Patterns (page does not exist)"><span title="Discussion about this template" style=";;border:none;">d</span></a>&#160;•&#160;<a href="http://en.wikipedia.org/w/index.php?title=Template:Design_Patterns_Patterns&amp;action=edit" class="external text" title="http://en.wikipedia.org/w/index.php?title=Template:Design_Patterns_Patterns&amp;action=edit" rel="nofollow"><span title="Edit this template" style=";;border:none;;">e</span></a></div>
</div>
<span style="font-size:110%;"><a href="/wiki/Design_pattern_(computer_science)" title="Design pattern (computer science)">Design patterns</a> in the book <i><a href="/wiki/Design_Patterns_(book)" title="Design Patterns (book)">Design Patterns</a></i></span></th>
</tr>
<tr style="height:2px;">
<td></td>
</tr>
<tr>
<td class="navbox-group" style=";;">Creational</td>
<td style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<div style="padding:0em 0.25em"><a href="/wiki/Abstract_factory_pattern" title="Abstract factory pattern">Abstract factory</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Builder_pattern" title="Builder pattern">Builder</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Factory_method_pattern" title="Factory method pattern">Factory</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Prototype_pattern" title="Prototype pattern">Prototype</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Singleton_pattern" title="Singleton pattern">Singleton</a></div>
</td>
</tr>
<tr style="height:2px">
<td></td>
</tr>
<tr>
<td class="navbox-group" style=";;">Structural</td>
<td style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<div style="padding:0em 0.25em"><a href="/wiki/Adapter_pattern" title="Adapter pattern">Adapter</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Bridge_pattern" title="Bridge pattern">Bridge</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Composite_pattern" title="Composite pattern">Composite</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Decorator_pattern" title="Decorator pattern">Decorator</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Facade_pattern" title="Facade pattern">Facade</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Flyweight_pattern" title="Flyweight pattern">Flyweight</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Proxy_pattern" title="Proxy pattern">Proxy</a></div>
</td>
</tr>
<tr style="height:2px">
<td></td>
</tr>
<tr>
<td class="navbox-group" style=";;">Behavioral</td>
<td style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<div style="padding:0em 0.25em"><a href="/wiki/Chain-of-responsibility_pattern" title="Chain-of-responsibility pattern">Chain of responsibility</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Command_pattern" title="Command pattern">Command</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Interpreter_pattern" title="Interpreter pattern">Interpreter</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Iterator_pattern" title="Iterator pattern">Iterator</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Mediator_pattern" title="Mediator pattern">Mediator</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Memento_pattern" title="Memento pattern">Memento</a><span style="font-weight:bold;">&#160;·</span> <strong class="selflink">Observer</strong><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/State_pattern" title="State pattern">State</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Strategy_pattern" title="Strategy pattern">Strategy</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Template_method_pattern" title="Template method pattern">Template method</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Visitor_pattern" title="Visitor pattern">Visitor</a></div>
</td>
</tr>
</table>
</td>
</tr>
</table>


<!-- 
NewPP limit report
Preprocessor node count: 801/1000000
Post-expand include size: 20261/2048000 bytes
Template argument size: 7955/2048000 bytes
Expensive parser function count: 2/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:164863-0!1!0!default!!en!2 and timestamp 20090403062008 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Observer_pattern">http://en.wikipedia.org/wiki/Observer_pattern</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Software_design_patterns" title="Category:Software design patterns">Software design patterns</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_example_C_Sharp_code" title="Category:Articles with example C Sharp code">Articles with example C Sharp code</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_example_Java_code" title="Category:Articles with example Java code">Articles with example Java code</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_example_Python_code" title="Category:Articles with example Python code">Articles with example Python code</a></span></div><div id="mw-hidden-catlinks" class="mw-hidden-cats-hidden">Hidden categories:&#32;<span dir='ltr'><a href="/wiki/Category:Cleanup_from_February_2008" title="Category:Cleanup from February 2008">Cleanup from February 2008</a></span> | <span dir='ltr'><a href="/wiki/Category:All_pages_needing_cleanup" title="Category:All pages needing cleanup">All pages needing cleanup</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_lacking_sources_from_March_2008" title="Category:Articles lacking sources from March 2008">Articles lacking sources from March 2008</a></span> | <span dir='ltr'><a href="/wiki/Category:All_articles_lacking_sources" title="Category:All articles lacking sources">All articles lacking sources</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Observer_pattern" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Observer_pattern" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Observer_pattern&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Observer_pattern&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Observer_pattern" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Observer_pattern" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Observer_pattern" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Observer_pattern&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Observer_pattern&amp;oldid=280974471" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Observer_pattern&amp;id=280974471">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-ca"><a href="http://ca.wikipedia.org/wiki/Patr%C3%B3_observador">Català</a></li>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/Observer_(Entwurfsmuster)">Deutsch</a></li>
				<li class="interwiki-es"><a href="http://es.wikipedia.org/wiki/Observer_(patr%C3%B3n_de_dise%C3%B1o)">Español</a></li>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Observateur_(patron_de_conception)">Français</a></li>
				<li class="interwiki-ko"><a href="http://ko.wikipedia.org/wiki/%EC%98%B5%EC%A0%80%EB%B2%84_%ED%8C%A8%ED%84%B4">한국어</a></li>
				<li class="interwiki-it"><a href="http://it.wikipedia.org/wiki/Observer_pattern">Italiano</a></li>
				<li class="interwiki-nl"><a href="http://nl.wikipedia.org/wiki/Observer">Nederlands</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/Observer_%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3">日本語</a></li>
				<li class="interwiki-pl"><a href="http://pl.wikipedia.org/wiki/Obserwator_(wzorzec_projektowy)">Polski</a></li>
				<li class="interwiki-pt"><a href="http://pt.wikipedia.org/wiki/Observer">Português</a></li>
				<li class="interwiki-ru"><a href="http://ru.wikipedia.org/wiki/%D0%9D%D0%B0%D0%B1%D0%BB%D1%8E%D0%B4%D0%B0%D1%82%D0%B5%D0%BB%D1%8C_(%D1%88%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD_%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)">Русский</a></li>
				<li class="interwiki-th"><a href="http://th.wikipedia.org/wiki/%E0%B8%AD%E0%B9%87%E0%B8%AD%E0%B8%9A%E0%B9%80%E0%B8%8B%E0%B8%B4%E0%B8%A3%E0%B9%8C%E0%B8%9F%E0%B9%80%E0%B8%A7%E0%B8%AD%E0%B8%A3%E0%B9%8C%E0%B9%81%E0%B8%9E%E0%B8%95%E0%B9%80%E0%B8%97%E0%B8%B4%E0%B8%A3%E0%B9%8C%E0%B8%99">ไทย</a></li>
				<li class="interwiki-zh"><a href="http://zh.wikipedia.org/wiki/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F">中文</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 1 April 2009, at 00:09.</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv132 in 0.050 secs. --></body></html>
