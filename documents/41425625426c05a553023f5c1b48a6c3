<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Builder pattern,Design Patterns Patterns,Abstract factory pattern,Adapter pattern,Bridge pattern,Chain-of-responsibility pattern,Command pattern,Composite pattern,Decorator pattern,Design Patterns (book),Design pattern (computer science)" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Builder_pattern&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Builder_pattern&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Builder pattern - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Builder_pattern";
		var wgTitle = "Builder pattern";
		var wgAction = "view";
		var wgArticleId = "164849";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 279908445;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
<style type="text/css">/*<![CDATA[*/
.source-java {line-height: normal;}
.source-java li, .source-java pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for java
 * CSS class: source-java, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-java .de1, .source-java .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-java  {}
.source-java .head {}
.source-java .foot {}
.source-java .imp {font-weight: bold; color: red;}
.source-java .ln-xtra {color: #cc0; background-color: #ffc;}
.source-java li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-java li.li2 {font-weight: bold;}
.source-java .kw1 {color: #b1b100;}
.source-java .kw2 {color: #000000; font-weight: bold;}
.source-java .kw3 {color: #aaaadd; font-weight: bold;}
.source-java .kw4 {color: #993333;}
.source-java .co1 {color: #808080; font-style: italic;}
.source-java .co2 {color: #a1a100;}
.source-java .coMULTI {color: #808080; font-style: italic;}
.source-java .es0 {color: #000099; font-weight: bold;}
.source-java .br0 {color: #66cc66;}
.source-java .st0 {color: #ff0000;}
.source-java .nu0 {color: #cc66cc;}
.source-java .me1 {color: #006600;}
.source-java .me2 {color: #006600;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-csharp {line-height: normal;}
.source-csharp li, .source-csharp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for csharp
 * CSS class: source-csharp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-csharp .de1, .source-csharp .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-csharp  {}
.source-csharp .head {}
.source-csharp .foot {}
.source-csharp .imp {font-weight: bold; color: red;}
.source-csharp .ln-xtra {color: #cc0; background-color: #ffc;}
.source-csharp li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-csharp li.li2 {font-weight: bold;}
.source-csharp .kw1 {color: #0600FF;}
.source-csharp .kw2 {color: #FF8000; font-weight: bold;}
.source-csharp .kw3 {color: #008000;}
.source-csharp .kw4 {color: #FF0000;}
.source-csharp .kw5 {color: #000000;}
.source-csharp .co1 {color: #008080; font-style: italic;}
.source-csharp .co2 {color: #008080;}
.source-csharp .coMULTI {color: #008080; font-style: italic;}
.source-csharp .es0 {color: #008080; font-weight: bold;}
.source-csharp .br0 {color: #008000;}
.source-csharp .st0 {color: #808080;}
.source-csharp .nu0 {color: #FF0000;}
.source-csharp .me1 {color: #0000FF;}
.source-csharp .me2 {color: #0000FF;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-cpp {line-height: normal;}
.source-cpp li, .source-cpp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for cpp
 * CSS class: source-cpp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-cpp .de1, .source-cpp .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-cpp  {}
.source-cpp .head {}
.source-cpp .foot {}
.source-cpp .imp {font-weight: bold; color: red;}
.source-cpp .ln-xtra {color: #cc0; background-color: #ffc;}
.source-cpp li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-cpp li.li2 {font-weight: bold;}
.source-cpp .kw1 {color: #0000ff;}
.source-cpp .kw2 {color: #0000ff;}
.source-cpp .kw3 {color: #0000dd;}
.source-cpp .kw4 {color: #0000ff;}
.source-cpp .co1 {color: #ff0000;}
.source-cpp .co2 {color: #339900;}
.source-cpp .coMULTI {color: #ff0000; font-style: italic;}
.source-cpp .es0 {color: #666666; font-weight: bold;}
.source-cpp .br0 {color: #000000;}
.source-cpp .st0 {color: #666666;}
.source-cpp .nu0 {color: #0000dd;}
.source-cpp .me1 {color: #00eeff;}
.source-cpp .me2 {color: #00eeff;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-perl {line-height: normal;}
.source-perl li, .source-perl pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for perl
 * CSS class: source-perl, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-perl .de1, .source-perl .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-perl  {}
.source-perl .head {}
.source-perl .foot {}
.source-perl .imp {font-weight: bold; color: red;}
.source-perl .ln-xtra {color: #cc0; background-color: #ffc;}
.source-perl li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-perl li.li2 {font-weight: bold;}
.source-perl .kw1 {color: #b1b100;}
.source-perl .kw2 {color: #000000; font-weight: bold;}
.source-perl .kw3 {color: #000066;}
.source-perl .co1 {color: #808080; font-style: italic;}
.source-perl .coMULTI {color: #808080; font-style: italic;}
.source-perl .es0 {color: #000099; font-weight: bold;}
.source-perl .br0 {color: #66cc66;}
.source-perl .st0 {color: #ff0000;}
.source-perl .nu0 {color: #cc66cc;}
.source-perl .me1 {color: #006600;}
.source-perl .me2 {color: #006600;}
.source-perl .re0 {color: #0000ff;}
.source-perl .re4 {color: #009999;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-php {line-height: normal;}
.source-php li, .source-php pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for php
 * CSS class: source-php, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-php .de1, .source-php .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-php  {}
.source-php .head {}
.source-php .foot {}
.source-php .imp {font-weight: bold; color: red;}
.source-php .ln-xtra {color: #cc0; background-color: #ffc;}
.source-php li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-php li.li2 {font-weight: bold;}
.source-php .kw1 {color: #b1b100;}
.source-php .kw2 {color: #000000; font-weight: bold;}
.source-php .kw3 {color: #000066;}
.source-php .co1 {color: #808080; font-style: italic;}
.source-php .co2 {color: #808080; font-style: italic;}
.source-php .coMULTI {color: #808080; font-style: italic;}
.source-php .es0 {color: #000099; font-weight: bold;}
.source-php .br0 {color: #66cc66;}
.source-php .st0 {color: #ff0000;}
.source-php .nu0 {color: #cc66cc;}
.source-php .me1 {color: #006600;}
.source-php .me2 {color: #006600;}
.source-php .sc0 {}
.source-php .sc1 {}
.source-php .sc2 {}
.source-php .sc3 {}
.source-php .re0 {color: #0000ff;}
.source-php .re1 {color: #ff0000}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style>		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Builder_pattern skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Builder pattern</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<p>The <b>Builder Pattern</b> is a software <a href="/wiki/Design_pattern_(computer_science)" title="Design pattern (computer science)">design pattern</a>. The intention is to abstract steps of construction of objects so that different implementations of these steps can construct different representations of objects.</p>
<p>Often, the <b>Builder Pattern</b> is used to build Products in accordance to the <a href="/wiki/Composite_pattern" title="Composite pattern">Composite pattern</a>, a structure pattern.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Class_Diagram"><span class="tocnumber">1</span> <span class="toctext">Class Diagram</span></a>
<ul>
<li class="toclevel-2"><a href="#Builder"><span class="tocnumber">1.1</span> <span class="toctext">Builder</span></a></li>
<li class="toclevel-2"><a href="#Concrete_Builder"><span class="tocnumber">1.2</span> <span class="toctext">Concrete Builder</span></a></li>
<li class="toclevel-2"><a href="#Director"><span class="tocnumber">1.3</span> <span class="toctext">Director</span></a></li>
<li class="toclevel-2"><a href="#Product"><span class="tocnumber">1.4</span> <span class="toctext">Product</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Useful_tips"><span class="tocnumber">2</span> <span class="toctext">Useful tips</span></a></li>
<li class="toclevel-1"><a href="#Examples"><span class="tocnumber">3</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2"><a href="#Java"><span class="tocnumber">3.1</span> <span class="toctext">Java</span></a></li>
<li class="toclevel-2"><a href="#C.23"><span class="tocnumber">3.2</span> <span class="toctext">C#</span></a></li>
<li class="toclevel-2"><a href="#C.2B.2B"><span class="tocnumber">3.3</span> <span class="toctext">C++</span></a></li>
<li class="toclevel-2"><a href="#Visual_Prolog"><span class="tocnumber">3.4</span> <span class="toctext">Visual Prolog</span></a></li>
<li class="toclevel-2"><a href="#perl"><span class="tocnumber">3.5</span> <span class="toctext">perl</span></a></li>
<li class="toclevel-2"><a href="#PHP"><span class="tocnumber">3.6</span> <span class="toctext">PHP</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">4</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Class_Diagram" id="Class_Diagram"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Builder_pattern&amp;action=edit&amp;section=1" title="Edit section: Class Diagram">edit</a>]</span> <span class="mw-headline">Class Diagram</span></h2>
<p><a href="/wiki/File:Builder2.png" class="image" title="Builder Structure"><img alt="Builder Structure" src="http://upload.wikimedia.org/wikipedia/en/6/6e/Builder2.png" width="533" height="240" border="0" /></a></p>
<p><a name="Builder" id="Builder"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Builder_pattern&amp;action=edit&amp;section=2" title="Edit section: Builder">edit</a>]</span> <span class="mw-headline">Builder</span></h3>
<p>Abstract interface for creating objects (product).</p>
<p><a name="Concrete_Builder" id="Concrete_Builder"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Builder_pattern&amp;action=edit&amp;section=3" title="Edit section: Concrete Builder">edit</a>]</span> <span class="mw-headline">Concrete Builder</span></h3>
<p>Provide implementation for Builder. Construct and assemble parts to build the objects.</p>
<p><a name="Director" id="Director"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Builder_pattern&amp;action=edit&amp;section=4" title="Edit section: Director">edit</a>]</span> <span class="mw-headline">Director</span></h3>
<p>The Director class is responsible for managing the correct sequence of object creation. It receives a Concrete Builder as a parameter and executes the necessary operations on it.</p>
<p><a name="Product" id="Product"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Builder_pattern&amp;action=edit&amp;section=5" title="Edit section: Product">edit</a>]</span> <span class="mw-headline">Product</span></h3>
<p>The final object that will be created by the Director using Builder.</p>
<p><a name="Useful_tips" id="Useful_tips"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Builder_pattern&amp;action=edit&amp;section=6" title="Edit section: Useful tips">edit</a>]</span> <span class="mw-headline">Useful tips</span></h2>
<ul>
<li>Builder focuses on constructing a complex object step by step. Abstract Factory emphasizes a family of product objects (either simple or complex). Builder returns the product as a final step, but as far as the Abstract Factory is concerned, the product gets returned immediately.</li>
<li>Builder often builds a <a href="/wiki/Composite_pattern" title="Composite pattern">Composite</a>.</li>
<li>Often, designs start out using <a href="/wiki/Factory_method_pattern" title="Factory method pattern">Factory Method</a> (less complicated, more customizable, subclasses proliferate) and evolve toward Abstract Factory, Prototype, or Builder (more flexible, more complex) as the designer discovers where more flexibility is needed.</li>
<li>Sometimes creational patterns are complementary: Builder can use one of the other patterns to implement which components get built. <a href="/wiki/Abstract_factory_pattern" title="Abstract factory pattern">Abstract Factory</a>, Builder, and <a href="/wiki/Prototype_pattern" title="Prototype pattern">Prototype</a> can use <a href="/wiki/Singleton_pattern" title="Singleton pattern">Singleton</a> in their implementations.</li>
</ul>
<p><a name="Examples" id="Examples"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Builder_pattern&amp;action=edit&amp;section=7" title="Edit section: Examples">edit</a>]</span> <span class="mw-headline">Examples</span></h2>
<p><a name="Java" id="Java"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Builder_pattern&amp;action=edit&amp;section=8" title="Edit section: Java">edit</a>]</span> <span class="mw-headline">Java</span></h3>
<div dir="ltr" style="text-align: left;">
<pre class="source-java">
<span class="coMULTI">/** "Product" */</span>
<span class="kw2">class</span> Pizza <span class="br0">{</span>
	<span class="kw2">private</span> <span class="kw3">String</span> dough = <span class="st0">""</span>;
	<span class="kw2">private</span> <span class="kw3">String</span> sauce = <span class="st0">""</span>;
	<span class="kw2">private</span> <span class="kw3">String</span> topping = <span class="st0">""</span>;
 
	<span class="kw2">public</span> <span class="kw4">void</span> setDough<span class="br0">(</span><span class="kw3">String</span> dough<span class="br0">)</span> <span class="br0">{</span>
		<span class="kw2">this</span>.<span class="me1">dough</span> = dough;
	<span class="br0">}</span>
 
	<span class="kw2">public</span> <span class="kw4">void</span> setSauce<span class="br0">(</span><span class="kw3">String</span> sauce<span class="br0">)</span> <span class="br0">{</span>
		<span class="kw2">this</span>.<span class="me1">sauce</span> = sauce;
	<span class="br0">}</span>
 
	<span class="kw2">public</span> <span class="kw4">void</span> setTopping<span class="br0">(</span><span class="kw3">String</span> topping<span class="br0">)</span> <span class="br0">{</span>
		<span class="kw2">this</span>.<span class="me1">topping</span> = topping;
	<span class="br0">}</span>
<span class="br0">}</span>
 
<span class="coMULTI">/** "Abstract Builder" */</span>
<span class="kw2">abstract</span> <span class="kw2">class</span> PizzaBuilder <span class="br0">{</span>
	<span class="kw2">protected</span> Pizza pizza;
 
	<span class="kw2">public</span> Pizza getPizza<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
		<span class="kw2">return</span> pizza;
	<span class="br0">}</span>
 
	<span class="kw2">public</span> <span class="kw4">void</span> createNewPizzaProduct<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
		pizza = <span class="kw2">new</span> Pizza<span class="br0">(</span><span class="br0">)</span>;
	<span class="br0">}</span>
 
	<span class="kw2">public</span> <span class="kw2">abstract</span> <span class="kw4">void</span> buildDough<span class="br0">(</span><span class="br0">)</span>;
 
	<span class="kw2">public</span> <span class="kw2">abstract</span> <span class="kw4">void</span> buildSauce<span class="br0">(</span><span class="br0">)</span>;
 
	<span class="kw2">public</span> <span class="kw2">abstract</span> <span class="kw4">void</span> buildTopping<span class="br0">(</span><span class="br0">)</span>;
<span class="br0">}</span>
</pre></div>
<div dir="ltr" style="text-align: left;">
<pre class="source-java">
<span class="coMULTI">/** "ConcreteBuilder" */</span>
<span class="kw2">class</span> HawaiianPizzaBuilder <span class="kw2">extends</span> PizzaBuilder <span class="br0">{</span>
	<span class="kw2">public</span> <span class="kw4">void</span> buildDough<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
		pizza.<span class="me1">setDough</span><span class="br0">(</span><span class="st0">"cross"</span><span class="br0">)</span>;
	<span class="br0">}</span>
 
	<span class="kw2">public</span> <span class="kw4">void</span> buildSauce<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
		pizza.<span class="me1">setSauce</span><span class="br0">(</span><span class="st0">"mild"</span><span class="br0">)</span>;
	<span class="br0">}</span>
 
	<span class="kw2">public</span> <span class="kw4">void</span> buildTopping<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
		pizza.<span class="me1">setTopping</span><span class="br0">(</span><span class="st0">"ham+pineapple"</span><span class="br0">)</span>;
	<span class="br0">}</span>
<span class="br0">}</span>
 
<span class="coMULTI">/** "ConcreteBuilder" */</span>
<span class="kw2">class</span> SpicyPizzaBuilder <span class="kw2">extends</span> PizzaBuilder <span class="br0">{</span>
	<span class="kw2">public</span> <span class="kw4">void</span> buildDough<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
		pizza.<span class="me1">setDough</span><span class="br0">(</span><span class="st0">"pan baked"</span><span class="br0">)</span>;
	<span class="br0">}</span>
 
	<span class="kw2">public</span> <span class="kw4">void</span> buildSauce<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
		pizza.<span class="me1">setSauce</span><span class="br0">(</span><span class="st0">"hot"</span><span class="br0">)</span>;
	<span class="br0">}</span>
 
	<span class="kw2">public</span> <span class="kw4">void</span> buildTopping<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
		pizza.<span class="me1">setTopping</span><span class="br0">(</span><span class="st0">"pepperoni+salami"</span><span class="br0">)</span>;
	<span class="br0">}</span>
<span class="br0">}</span>
</pre></div>
<div dir="ltr" style="text-align: left;">
<pre class="source-java">
<span class="coMULTI">/** "Director" */</span>
<span class="kw2">class</span> Cook <span class="br0">{</span>
	<span class="kw2">private</span> PizzaBuilder pizzaBuilder;
 
	<span class="kw2">public</span> <span class="kw4">void</span> setPizzaBuilder<span class="br0">(</span>PizzaBuilder pb<span class="br0">)</span> <span class="br0">{</span>
		pizzaBuilder = pb;
	<span class="br0">}</span>
 
	<span class="kw2">public</span> Pizza getPizza<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
		<span class="kw2">return</span> pizzaBuilder.<span class="me1">getPizza</span><span class="br0">(</span><span class="br0">)</span>;
	<span class="br0">}</span>
 
	<span class="kw2">public</span> <span class="kw4">void</span> constructPizza<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
		pizzaBuilder.<span class="me1">createNewPizzaProduct</span><span class="br0">(</span><span class="br0">)</span>;
		pizzaBuilder.<span class="me1">buildDough</span><span class="br0">(</span><span class="br0">)</span>;
		pizzaBuilder.<span class="me1">buildSauce</span><span class="br0">(</span><span class="br0">)</span>;
		pizzaBuilder.<span class="me1">buildTopping</span><span class="br0">(</span><span class="br0">)</span>;
	<span class="br0">}</span>
<span class="br0">}</span>
 
<span class="coMULTI">/** A given type of pizza being constructed. */</span>
<span class="kw2">public</span> <span class="kw2">class</span> BuilderExample <span class="br0">{</span>
	<span class="kw2">public</span> <span class="kw2">static</span> <span class="kw4">void</span> main<span class="br0">(</span><span class="kw3">String</span><span class="br0">[</span><span class="br0">]</span> args<span class="br0">)</span> <span class="br0">{</span>
		Cook cook = <span class="kw2">new</span> Cook<span class="br0">(</span><span class="br0">)</span>;
		PizzaBuilder hawaiianPizzaBuilder = <span class="kw2">new</span> HawaiianPizzaBuilder<span class="br0">(</span><span class="br0">)</span>;
		PizzaBuilder spicyPizzaBuilder = <span class="kw2">new</span> SpicyPizzaBuilder<span class="br0">(</span><span class="br0">)</span>;
 
		cook.<span class="me1">setPizzaBuilder</span><span class="br0">(</span>hawaiianPizzaBuilder<span class="br0">)</span>;
		cook.<span class="me1">constructPizza</span><span class="br0">(</span><span class="br0">)</span>;
 
		Pizza pizza = cook.<span class="me1">getPizza</span><span class="br0">(</span><span class="br0">)</span>;
	<span class="br0">}</span>
<span class="br0">}</span>
</pre></div>
<p><a name="C.23" id="C.23"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Builder_pattern&amp;action=edit&amp;section=9" title="Edit section: C#">edit</a>]</span> <span class="mw-headline">C#</span></h3>
<div dir="ltr" style="text-align: left;">
<pre class="source-csharp">
<span class="co1">//Implementation in C#.</span>
<span class="kw4">class</span> Pizza
<span class="br0">{</span>
    <span class="kw4">string</span> dough;
    <span class="kw4">string</span> sauce;
    <span class="kw4">string</span> topping;
    <span class="kw1">public</span> <span class="kw4">string</span> Dough   <span class="br0">{</span> get <span class="br0">{</span> <span class="kw1">return</span> dough; <span class="br0">}</span>   set <span class="br0">{</span> dough = value; <span class="br0">}</span> <span class="br0">}</span>
    <span class="kw1">public</span> <span class="kw4">string</span> Sauce   <span class="br0">{</span> get <span class="br0">{</span> <span class="kw1">return</span> sauce; <span class="br0">}</span>   set <span class="br0">{</span> sauce = value; <span class="br0">}</span> <span class="br0">}</span>
    <span class="kw1">public</span> <span class="kw4">string</span> Topping <span class="br0">{</span> get <span class="br0">{</span> <span class="kw1">return</span> topping; <span class="br0">}</span> set <span class="br0">{</span> topping = value; <span class="br0">}</span> <span class="br0">}</span>
    <span class="kw1">public</span> <span class="kw1">override</span> <span class="kw4">string</span> ToString<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
        <span class="kw1">return</span> <span class="kw4">string</span>.<span class="me1">Format</span><span class="br0">(</span>
                <span class="st0">"Pizza with Dough as {0}, Sauce as {1} and Topping as {2}"</span>,
                Dough,
                Sauce,
                Topping<span class="br0">)</span>;
    <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="co1">//Abstract Builder</span>
abstract <span class="kw4">class</span> PizzaBuilder
<span class="br0">{</span>
    <span class="kw1">protected</span> Pizza pizza;
    <span class="kw1">public</span> Pizza Pizza <span class="br0">{</span> get <span class="br0">{</span> <span class="kw1">return</span> pizza; <span class="br0">}</span> <span class="br0">}</span>
    <span class="kw1">public</span> <span class="kw1">void</span> CreateNewPizza<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> pizza = <span class="kw3">new</span> Pizza<span class="br0">(</span><span class="br0">)</span>; <span class="br0">}</span>
 
    <span class="kw1">public</span> abstract <span class="kw1">void</span> BuildDough<span class="br0">(</span><span class="br0">)</span>;
    <span class="kw1">public</span> abstract <span class="kw1">void</span> BuildSauce<span class="br0">(</span><span class="br0">)</span>;
    <span class="kw1">public</span> abstract <span class="kw1">void</span> BuildTopping<span class="br0">(</span><span class="br0">)</span>;
<span class="br0">}</span>
 
<span class="co1">//Concrete Builder</span>
<span class="kw4">class</span> HawaiianPizzaBuilder : PizzaBuilder
<span class="br0">{</span>
    <span class="kw1">public</span> <span class="kw1">override</span> <span class="kw1">void</span> BuildDough<span class="br0">(</span><span class="br0">)</span>   <span class="br0">{</span> pizza.<span class="me1">Dough</span>   = <span class="st0">"cross"</span>; <span class="br0">}</span>
    <span class="kw1">public</span> <span class="kw1">override</span> <span class="kw1">void</span> BuildSauce<span class="br0">(</span><span class="br0">)</span>   <span class="br0">{</span> pizza.<span class="me1">Sauce</span>   = <span class="st0">"mild"</span>; <span class="br0">}</span>
    <span class="kw1">public</span> <span class="kw1">override</span> <span class="kw1">void</span> BuildTopping<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> pizza.<span class="me1">Topping</span> = <span class="st0">"ham+pineapple"</span>; <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="co1">//Concrete Builder</span>
<span class="kw4">class</span> SpicyPizzaBuilder : PizzaBuilder
<span class="br0">{</span>
    <span class="kw1">public</span> <span class="kw1">override</span> <span class="kw1">void</span> BuildDough<span class="br0">(</span><span class="br0">)</span>   <span class="br0">{</span> pizza.<span class="me1">Dough</span>   = <span class="st0">"pan baked"</span>; <span class="br0">}</span>
    <span class="kw1">public</span> <span class="kw1">override</span> <span class="kw1">void</span> BuildSauce<span class="br0">(</span><span class="br0">)</span>   <span class="br0">{</span> pizza.<span class="me1">Sauce</span>   = <span class="st0">"hot"</span>; <span class="br0">}</span>
    <span class="kw1">public</span> <span class="kw1">override</span> <span class="kw1">void</span> BuildTopping<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> pizza.<span class="me1">Topping</span> = <span class="st0">"pepparoni+salami"</span>; <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="coMULTI">/** "Director" */</span>
<span class="kw4">class</span> Waiter <span class="br0">{</span>
    <span class="kw1">private</span> PizzaBuilder pizzaBuilder;
 
    <span class="kw1">public</span> PizzaBuilder PizzaBuilder <span class="br0">{</span> get <span class="br0">{</span> <span class="kw1">return</span> pizzaBuilder; <span class="br0">}</span> set <span class="br0">{</span> pizzaBuilder = value; <span class="br0">}</span> <span class="br0">}</span>
    <span class="kw1">public</span> Pizza Pizza <span class="br0">{</span> get <span class="br0">{</span> <span class="kw1">return</span> pizzaBuilder.<span class="me1">Pizza</span>; <span class="br0">}</span> <span class="br0">}</span>
 
    <span class="kw1">public</span> <span class="kw1">void</span> ConstructPizza<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
        pizzaBuilder.<span class="me1">CreateNewPizza</span><span class="br0">(</span><span class="br0">)</span>;
        pizzaBuilder.<span class="me1">BuildDough</span><span class="br0">(</span><span class="br0">)</span>;
        pizzaBuilder.<span class="me1">BuildSauce</span><span class="br0">(</span><span class="br0">)</span>;
        pizzaBuilder.<span class="me1">BuildTopping</span><span class="br0">(</span><span class="br0">)</span>;
    <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="kw1">public</span> <span class="kw4">class</span> TestPizza <span class="br0">{</span>
    <span class="kw1">private</span> <span class="kw1">static</span> <span class="kw1">void</span> BuildAndDisplayPizza<span class="br0">(</span>Waiter waiter<span class="br0">)</span> <span class="br0">{</span>
        waiter.<span class="me1">ConstructPizza</span><span class="br0">(</span><span class="br0">)</span>;
        <span class="kw5">System</span>.<span class="me1">Console</span>.<span class="me1">WriteLine</span><span class="br0">(</span>waiter.<span class="me1">Pizza</span><span class="br0">)</span>;
    <span class="br0">}</span>
 
    <span class="kw1">public</span> <span class="kw1">static</span> <span class="kw1">void</span> Main<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
        Waiter waiter = <span class="kw3">new</span> Waiter<span class="br0">(</span><span class="br0">)</span>;
 
        waiter.<span class="me1">PizzaBuilder</span> = <span class="kw3">new</span> HawaiianPizzaBuilder<span class="br0">(</span><span class="br0">)</span>;
        BuildAndDisplayPizza<span class="br0">(</span>waiter<span class="br0">)</span>;
 
        waiter.<span class="me1">PizzaBuilder</span> = <span class="kw3">new</span> SpicyPizzaBuilder<span class="br0">(</span><span class="br0">)</span>;
        BuildAndDisplayPizza<span class="br0">(</span>waiter<span class="br0">)</span>;
    <span class="br0">}</span>
<span class="br0">}</span>
</pre></div>
<p><a name="C.2B.2B" id="C.2B.2B"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Builder_pattern&amp;action=edit&amp;section=10" title="Edit section: C++">edit</a>]</span> <span class="mw-headline">C++</span></h3>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
<span class="co1">// Implementation in C++.</span>
 
<span class="co2">#include &lt;iostream&gt;</span>
<span class="co2">#include &lt;memory&gt;</span>
<span class="co2">#include &lt;string&gt;</span>
 
<span class="co1">// Product</span>
<span class="kw2">class</span> Pizza
<span class="br0">{</span>
<span class="kw2">private</span>:
    std::<span class="me2">string</span> dough;
    std::<span class="me2">string</span> sauce;
    std::<span class="me2">string</span> topping;
 
<span class="kw2">public</span>:
    Pizza<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> <span class="br0">}</span>
    ~Pizza<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> <span class="br0">}</span>
 
    <span class="kw4">void</span> SetDough<span class="br0">(</span><span class="kw4">const</span> std::<span class="me2">string</span>&amp; d<span class="br0">)</span> <span class="br0">{</span> dough = d; <span class="br0">}</span>;
    <span class="kw4">void</span> SetSauce<span class="br0">(</span><span class="kw4">const</span> std::<span class="me2">string</span>&amp; s<span class="br0">)</span> <span class="br0">{</span> sauce = s; <span class="br0">}</span>;
    <span class="kw4">void</span> SetTopping<span class="br0">(</span><span class="kw4">const</span> std::<span class="me2">string</span>&amp; t<span class="br0">)</span> <span class="br0">{</span> topping = t; <span class="br0">}</span>
 
    <span class="kw4">void</span> ShowPizza<span class="br0">(</span><span class="br0">)</span>
    <span class="br0">{</span>
        std::<span class="kw3">cout</span> &lt;&lt; <span class="st0">" Yummy !!!"</span> &lt;&lt; std::<span class="me2">endl</span>
        &lt;&lt; <span class="st0">"Pizza with Dough as "</span> &lt;&lt; dough
        &lt;&lt; <span class="st0">", Sauce as "</span> &lt;&lt; sauce
        &lt;&lt; <span class="st0">" and Topping as "</span> &lt;&lt; topping
        &lt;&lt; <span class="st0">" !!! "</span> &lt;&lt; std::<span class="me2">endl</span>;
    <span class="br0">}</span>
<span class="br0">}</span>;
</pre></div>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
<span class="co1">// Abstract Builder</span>
<span class="kw2">class</span> PizzaBuilder
<span class="br0">{</span>
<span class="kw2">protected</span>:
    std::<span class="me2">auto_ptr</span>&lt;Pizza&gt; pizza;
<span class="kw2">public</span>:
    PizzaBuilder<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span><span class="br0">}</span>
    <span class="kw2">virtual</span> ~PizzaBuilder<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span><span class="br0">}</span>
    std::<span class="me2">auto_ptr</span>&lt;Pizza&gt; GetPizza<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> <span class="kw1">return</span> pizza; <span class="br0">}</span>
 
    <span class="kw4">void</span> createNewPizzaProduct<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> pizza.<span class="me1">reset</span> <span class="br0">(</span><span class="kw3">new</span> Pizza<span class="br0">)</span>; <span class="br0">}</span>
 
    <span class="kw2">virtual</span> <span class="kw4">void</span> buildDough<span class="br0">(</span><span class="br0">)</span>=<span class="nu0">0</span>;
    <span class="kw2">virtual</span> <span class="kw4">void</span> buildSauce<span class="br0">(</span><span class="br0">)</span>=<span class="nu0">0</span>;
    <span class="kw2">virtual</span> <span class="kw4">void</span> buildTopping<span class="br0">(</span><span class="br0">)</span>=<span class="nu0">0</span>;
 
<span class="br0">}</span>;
 
<span class="co1">// ConcreteBuilder</span>
<span class="kw2">class</span> HawaiianPizzaBuilder : <span class="kw2">public</span> PizzaBuilder
<span class="br0">{</span>
<span class="kw2">public</span>:
    HawaiianPizzaBuilder<span class="br0">(</span><span class="br0">)</span> : PizzaBuilder<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span><span class="br0">}</span>
    ~HawaiianPizzaBuilder<span class="br0">(</span><span class="br0">)</span><span class="br0">{</span><span class="br0">}</span>
 
    <span class="kw4">void</span> buildDough<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> pizza-&gt;SetDough<span class="br0">(</span><span class="st0">"cross"</span><span class="br0">)</span>; <span class="br0">}</span>
    <span class="kw4">void</span> buildSauce<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> pizza-&gt;SetSauce<span class="br0">(</span><span class="st0">"mild"</span><span class="br0">)</span>; <span class="br0">}</span>
    <span class="kw4">void</span> buildTopping<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> pizza-&gt;SetTopping<span class="br0">(</span><span class="st0">"ham and pineapple"</span><span class="br0">)</span>; <span class="br0">}</span>
<span class="br0">}</span>;
</pre></div>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
<span class="co1">// ConcreteBuilder</span>
<span class="kw2">class</span> SpicyPizzaBuilder : <span class="kw2">public</span> PizzaBuilder
<span class="br0">{</span>
<span class="kw2">public</span>:
    SpicyPizzaBuilder<span class="br0">(</span><span class="br0">)</span> : PizzaBuilder<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span><span class="br0">}</span>
    ~SpicyPizzaBuilder<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span><span class="br0">}</span>
 
    <span class="kw4">void</span> buildDough<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> pizza-&gt;SetDough<span class="br0">(</span><span class="st0">"pan baked"</span><span class="br0">)</span>; <span class="br0">}</span>
    <span class="kw4">void</span> buildSauce<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> pizza-&gt;SetSauce<span class="br0">(</span><span class="st0">"hot"</span><span class="br0">)</span>; <span class="br0">}</span>
    <span class="kw4">void</span> buildTopping<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> pizza-&gt;SetTopping<span class="br0">(</span><span class="st0">"pepperoni and salami"</span><span class="br0">)</span>; <span class="br0">}</span>
<span class="br0">}</span>;
 
<span class="co1">// Director</span>
<span class="kw2">class</span> Waiter
<span class="br0">{</span>
<span class="kw2">private</span>:
    PizzaBuilder* pizzaBuilder;
<span class="kw2">public</span>:
    Waiter<span class="br0">(</span><span class="br0">)</span> : pizzaBuilder<span class="br0">(</span><span class="kw2">NULL</span><span class="br0">)</span> <span class="br0">{</span><span class="br0">}</span>
    ~Waiter<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> <span class="br0">}</span>
 
    <span class="kw4">void</span> SetPizzaBuilder<span class="br0">(</span>PizzaBuilder* b<span class="br0">)</span> <span class="br0">{</span> pizzaBuilder = b; <span class="br0">}</span>
    std::<span class="me2">auto_ptr</span>&lt;Pizza&gt; GetPizza<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> <span class="kw1">return</span> pizzaBuilder-&gt;GetPizza<span class="br0">(</span><span class="br0">)</span>; <span class="br0">}</span>
    <span class="kw4">void</span> ConstructPizza<span class="br0">(</span><span class="br0">)</span>
    <span class="br0">{</span>
        pizzaBuilder-&gt;createNewPizzaProduct<span class="br0">(</span><span class="br0">)</span>;
        pizzaBuilder-&gt;buildDough<span class="br0">(</span><span class="br0">)</span>;
        pizzaBuilder-&gt;buildSauce<span class="br0">(</span><span class="br0">)</span>;
        pizzaBuilder-&gt;buildTopping<span class="br0">(</span><span class="br0">)</span>;
    <span class="br0">}</span>
<span class="br0">}</span>;
</pre></div>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
 
<span class="co1">// A customer ordering two pizza.</span>
<span class="kw4">int</span> main<span class="br0">(</span><span class="br0">)</span>
<span class="br0">{</span> 
    Waiter waiter;
 
    HawaiianPizzaBuilder hawaiianPizzaBuilder;
    waiter.<span class="me1">SetPizzaBuilder</span> <span class="br0">(</span>&amp;hawaiianPizzaBuilder<span class="br0">)</span>;
    waiter.<span class="me1">ConstructPizza</span><span class="br0">(</span><span class="br0">)</span>;
    std::<span class="me2">auto_ptr</span>&lt;Pizza&gt; pizza = waiter.<span class="me1">GetPizza</span><span class="br0">(</span><span class="br0">)</span>;
    pizza-&gt;ShowPizza<span class="br0">(</span><span class="br0">)</span>;
 
    SpicyPizzaBuilder spicyPizzaBuilder;
    waiter.<span class="me1">SetPizzaBuilder</span><span class="br0">(</span>&amp;spicyPizzaBuilder<span class="br0">)</span>;
    waiter.<span class="me1">ConstructPizza</span><span class="br0">(</span><span class="br0">)</span>;
    pizza = waiter.<span class="me1">GetPizza</span><span class="br0">(</span><span class="br0">)</span>;
    pizza-&gt;ShowPizza<span class="br0">(</span><span class="br0">)</span>;
 
    <span class="kw1">return</span> <span class="kw2">EXIT_SUCCESS</span>;
<span class="br0">}</span>
</pre></div>
<p><a name="Visual_Prolog" id="Visual_Prolog"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Builder_pattern&amp;action=edit&amp;section=11" title="Edit section: Visual Prolog">edit</a>]</span> <span class="mw-headline"><a href="/wiki/Visual_Prolog" title="Visual Prolog">Visual Prolog</a></span></h3>
<p>Product</p>
<pre>
<font color="#808000">interface</font> pizza 
   <font color="#808000">predicates</font> 
      setDough : <font color="#993300">(</font>string <font color="#008000">Dough</font><font color="#993300">)</font>. 
      setSauce : <font color="#993300">(</font>string <font color="#008000">Sauce</font><font color="#993300">)</font>. 
      setTopping : <font color="#993300">(</font>string <font color="#008000">Topping</font><font color="#993300">)</font>. 
<font color="#808000">end</font> <font color="#808000">interface</font> pizza 
 
<font color="#808000">class</font> pizza : pizza 
<font color="#808000">end</font> <font color="#808000">class</font> pizza 
 
<font color="#808000">implement</font> pizza 
   <font color="#808000">facts</font> 
      dough : string := <font color="#0000FF">""</font>. 
      sauce : string := <font color="#0000FF">""</font>. 
      topping : string := <font color="#0000FF">""</font>. 
   <font color="#808000">clauses</font> 
      setDough<font color="#993300">(</font><font color="#008000">Dough</font><font color="#993300">)</font> :- dough := <font color="#008000">Dough</font>. 
   <font color="#808000">clauses</font> 
      setSauce<font color="#993300">(</font><font color="#008000">Sauce</font><font color="#993300">)</font> :- sauce := <font color="#008000">Sauce</font>. 
   <font color="#808000">clauses</font> 
      setTopping<font color="#993300">(</font><font color="#008000">Topping</font><font color="#993300">)</font> :- topping := <font color="#008000">Topping</font>. 
<font color="#808000">end</font> <font color="#808000">implement</font> pizza 
  
</pre>
<p>Abstract Builder</p>
<pre>
<font color="#808000">interface</font> pizzaBuilder 
   <font color="#808000">predicates</font> 
      getPizza : <font color="#993300">()</font> -&gt; pizza <font color="#008000">Pizza</font>. 
      createNewPizzaProduct : <font color="#993300">()</font>. 
   <font color="#808000">predicates</font> 
      buildDough : <font color="#993300">()</font>. 
      buildSauce : <font color="#993300">()</font>. 
      buildTopping : <font color="#993300">()</font>. 
<font color="#808000">end</font> <font color="#808000">interface</font> pizzaBuilder 
 
</pre>
<p>Visual Prolog does not support abstract classes, but we can create a support class instead:</p>
<pre>
<font color="#808000">interface</font> pizzaBuilderSupport 
   <font color="#808000">predicates</font> <font color="#333399">from</font> pizzaBuilder 
      getPizza, createNewPizzaProduct 
<font color="#808000">end</font> <font color="#808000">interface</font> pizzaBuilderSupport 
 
<font color="#808000">class</font> pizzaBuilderSupport : pizzaBuilderSupport 
<font color="#808000">end</font> <font color="#808000">class</font> pizzaBuilderSupport 
 
<font color="#808000">implement</font> pizzaBuilderSupport 
   <font color="#808000">facts</font> 
      pizza : pizza := <font color="#333399">erroneous</font>. 
   <font color="#808000">clauses</font> 
      getPizza<font color="#993300">()</font> = pizza. 
   <font color="#808000">clauses</font> 
      createNewPizzaProduct<font color="#993300">()</font> :- pizza := pizza::new<font color="#993300">()</font>. 
<font color="#808000">end</font> <font color="#808000">implement</font> pizzaBuilderSupport 
 
</pre>
<p>ConcreteBuilder #1</p>
<pre>
<font color="#808000">class</font> hawaiianPizzaBuilder :  pizzaBuilder 
<font color="#808000">end</font> <font color="#808000">class</font> hawaiianPizzaBuilder 
 
<font color="#808000">implement</font> hawaiianPizzaBuilder 
   <font color="#808000">inherits</font> pizzaBuilderSupport 
 
   <font color="#808000">clauses</font> 
      buildDough<font color="#993300">()</font> :- getPizza<font color="#993300">()</font>:setDough<font color="#993300">(</font><font color="#0000FF">"cross"</font><font color="#993300">)</font>. 
   <font color="#808000">clauses</font> 
      buildSauce<font color="#993300">()</font> :- getPizza<font color="#993300">()</font>:setSauce<font color="#993300">(</font><font color="#0000FF">"mild"</font><font color="#993300">)</font>. 
   <font color="#808000">clauses</font> 
      buildTopping<font color="#993300">()</font> :- getPizza<font color="#993300">()</font>:setTopping<font color="#993300">(</font><font color="#0000FF">"ham+pineapple"</font><font color="#993300">)</font>. 
<font color="#808000">end</font> <font color="#808000">implement</font> hawaiianPizzaBuilder 
 
</pre>
<p>ConcreteBuilder #2</p>
<pre>
<font color="#808000">class</font> spicyPizzaBuilder :  pizzaBuilder 
<font color="#808000">end</font> <font color="#808000">class</font> spicyPizzaBuilder 
 
<font color="#808000">implement</font> spicyPizzaBuilder 
   <font color="#808000">inherits</font> pizzaBuilderSupport 
 
   <font color="#808000">clauses</font> 
      buildDough<font color="#993300">()</font> :- getPizza<font color="#993300">()</font>:setDough<font color="#993300">(</font><font color="#0000FF">"pan baked"</font><font color="#993300">)</font>. 
   <font color="#808000">clauses</font> 
      buildSauce<font color="#993300">()</font> :- getPizza<font color="#993300">()</font>:setSauce<font color="#993300">(</font><font color="#0000FF">"hot"</font><font color="#993300">)</font>. 
   <font color="#808000">clauses</font> 
      buildTopping<font color="#993300">()</font> :- getPizza<font color="#993300">()</font>:setTopping<font color="#993300">(</font><font color="#0000FF">"pepperoni+salami"</font><font color="#993300">)</font>. 
<font color="#808000">end</font> <font color="#808000">implement</font> spicyPizzaBuilder 
 
</pre>
<p>Director</p>
<pre>
<font color="#808000">interface</font> waiter 
   <font color="#808000">predicates</font> 
      setPizzaBuilder : <font color="#993300">(</font>pizzaBuilder <font color="#008000">PizzaBuilder</font><font color="#993300">)</font>. 
      getPizza : <font color="#993300">()</font> -&gt; pizza <font color="#008000">Pizza</font>. 
   <font color="#808000">predicates</font> 
      constructPizza : <font color="#993300">()</font>. 
<font color="#808000">end</font> <font color="#808000">interface</font> waiter 
 
<font color="#808000">class</font> waiter : waiter 
<font color="#808000">end</font> <font color="#808000">class</font> waiter 
 
<font color="#808000">implement</font> waiter 
   <font color="#808000">facts</font> 
      pizzaBuilder : pizzaBuilder := <font color="#333399">erroneous</font>. 
   <font color="#808000">clauses</font> 
      setPizzaBuilder<font color="#993300">(</font><font color="#008000">PizzaBuilder</font><font color="#993300">)</font> :- pizzaBuilder := <font color="#008000">PizzaBuilder</font>. 
   <font color="#808000">clauses</font> 
      getPizza<font color="#993300">()</font> = pizzaBuilder:getPizza<font color="#993300">()</font>. 
   <font color="#808000">clauses</font> 
      constructPizza<font color="#993300">()</font> :- 
         pizzaBuilder:createNewPizzaProduct<font color="#993300">()</font>, 
         pizzaBuilder:buildDough<font color="#993300">()</font>, 
         pizzaBuilder:buildSauce<font color="#993300">()</font>, 
         pizzaBuilder:buildTopping<font color="#993300">()</font>. 
<font color="#808000">end</font> <font color="#808000">implement</font> waiter 
 
</pre>
<p>A customer ordering a pizza.</p>
<pre>
<font color="#808000">goal</font> 
   <font color="#008000">Hawaiian_pizzabuilder</font> = hawaiianPizzaBuilder::new<font color="#993300">()</font>, 
   <font color="#008000">Waiter</font> = waiter::new<font color="#993300">()</font>, 
   <font color="#008000">Waiter</font>:setPizzaBuilder<font color="#993300">(</font><font color="#008000">Hawaiian_pizzabuilder</font><font color="#993300">)</font>, 
   <font color="#008000">Waiter</font>:constructPizza<font color="#993300">()</font>, 
   <font color="#008000">Pizza</font> = <font color="#008000">Waiter</font>:getPizza<font color="#993300">()</font>.
</pre>
<p><a name="perl" id="perl"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Builder_pattern&amp;action=edit&amp;section=12" title="Edit section: perl">edit</a>]</span> <span class="mw-headline">perl</span></h3>
<div dir="ltr" style="text-align: left;">
<pre class="source-perl">
<span class="co1">## Product</span>
<span class="kw3">package</span> pizza;
 
<span class="kw2">sub</span> <span class="kw2">new</span> <span class="br0">{</span>
    <span class="kw3">return</span> <span class="kw3">bless</span> <span class="br0">{</span>
        dough =&gt; <span class="kw3">undef</span>,
        sauce =&gt; <span class="kw3">undef</span>,
        topping =&gt; <span class="kw3">undef</span>
    <span class="br0">}</span>, <span class="kw3">shift</span>;
<span class="br0">}</span>
 
<span class="kw2">sub</span> set_dough <span class="br0">{</span>
    <span class="kw1">my</span><span class="br0">(</span> <span class="re0">$self</span>, <span class="re0">$dough</span> <span class="br0">)</span> = <span class="re0">@_</span>;
    <span class="re0">$self</span>-&gt;<span class="br0">{</span>dough<span class="br0">}</span> = <span class="re0">$dough</span>;
<span class="br0">}</span>
 
<span class="kw2">sub</span> set_sauce <span class="br0">{</span>
    <span class="kw1">my</span><span class="br0">(</span> <span class="re0">$self</span>, <span class="re0">$sauce</span> <span class="br0">)</span> = <span class="re0">@_</span>;
    <span class="re0">$self</span>-&gt;<span class="br0">{</span>sauce<span class="br0">}</span> = <span class="re0">$sauce</span>;
<span class="br0">}</span>
 
<span class="kw2">sub</span> set_topping <span class="br0">{</span>
    <span class="kw1">my</span><span class="br0">(</span> <span class="re0">$self</span>, <span class="re0">$topping</span> <span class="br0">)</span> = <span class="re0">@_</span>;
    <span class="re0">$self</span>-&gt;<span class="br0">{</span>topping<span class="br0">}</span> = <span class="re0">$topping</span>;
<span class="br0">}</span>
 
<span class="nu0">1</span>;
</pre></div>
<div dir="ltr" style="text-align: left;">
<pre class="source-perl">
<span class="co1">## Abstract builder</span>
<span class="kw3">package</span> pizza_builder;
 
<span class="kw2">sub</span> <span class="kw2">new</span> <span class="br0">{</span>
    <span class="kw3">return</span> <span class="kw3">bless</span> <span class="br0">{</span>
        pizza =&gt; <span class="kw3">undef</span>
    <span class="br0">}</span>, <span class="kw3">shift</span>;
<span class="br0">}</span>
 
<span class="kw2">sub</span> get_pizza <span class="br0">{</span>
    <span class="kw1">my</span><span class="br0">(</span> <span class="re0">$self</span> <span class="br0">)</span> = <span class="re0">@_</span>;
    <span class="kw3">return</span> <span class="re0">$self</span>-&gt;<span class="br0">{</span>pizza<span class="br0">}</span>;
<span class="br0">}</span>
 
<span class="kw2">sub</span> create_new_pizza_product <span class="br0">{</span>
    <span class="kw1">my</span><span class="br0">(</span> <span class="re0">$self</span> <span class="br0">)</span> = <span class="re0">@_</span>;
    <span class="re0">$self</span>-&gt;<span class="br0">{</span>pizza<span class="br0">}</span> = pizza-&gt;<span class="me1">new</span>;
<span class="br0">}</span>
</pre></div>
<div dir="ltr" style="text-align: left;">
<pre class="source-perl">
<span class="co1"># This is what an abstract method could look like in perl...</span>
 
<span class="kw2">sub</span> build_dough <span class="br0">{</span>
    croak<span class="br0">(</span><span class="st0">"This method must be overridden."</span><span class="br0">)</span>;
<span class="br0">}</span>
 
<span class="kw2">sub</span> build_sauce <span class="br0">{</span>
    croak<span class="br0">(</span><span class="st0">"This method must be overridden."</span><span class="br0">)</span>;
<span class="br0">}</span>
 
<span class="kw2">sub</span> build_topping <span class="br0">{</span>
    croak<span class="br0">(</span><span class="st0">"This method must be overridden."</span><span class="br0">)</span>;
<span class="br0">}</span>
 
<span class="nu0">1</span>;
</pre></div>
<div dir="ltr" style="text-align: left;">
<pre class="source-perl">
<span class="co1">## Concrete builder</span>
<span class="kw3">package</span> hawaiian_pizza_builder;
 
<span class="kw2">use</span> base <span class="kw3">qw</span><span class="br0">{</span> pizza_builder <span class="br0">}</span>;
 
<span class="kw2">sub</span> build_dough <span class="br0">{</span>
    <span class="kw1">my</span><span class="br0">(</span> <span class="re0">$self</span> <span class="br0">)</span> = <span class="re0">@_</span>;
    <span class="re0">$self</span>-&gt;<span class="br0">{</span>pizza<span class="br0">}</span>-&gt;<span class="me1">set_dough</span><span class="br0">(</span><span class="st0">"cross"</span><span class="br0">)</span>;
<span class="br0">}</span>
 
<span class="kw2">sub</span> build_sauce <span class="br0">{</span>
    <span class="kw1">my</span><span class="br0">(</span> <span class="re0">$self</span> <span class="br0">)</span> = <span class="re0">@_</span>;
    <span class="re0">$self</span>-&gt;<span class="br0">{</span>pizza<span class="br0">}</span>-&gt;<span class="me1">set_sauce</span><span class="br0">(</span><span class="st0">"mild"</span><span class="br0">)</span>;
<span class="br0">}</span>
 
<span class="kw2">sub</span> build_topping <span class="br0">{</span>
    <span class="kw1">my</span><span class="br0">(</span> <span class="re0">$self</span> <span class="br0">)</span> = <span class="re0">@_</span>;
    <span class="re0">$self</span>-&gt;<span class="br0">{</span>pizza<span class="br0">}</span>-&gt;<span class="me1">set_topping</span><span class="br0">(</span><span class="st0">"ham+pineapple"</span><span class="br0">)</span>;
<span class="br0">}</span>
 
<span class="nu0">1</span>;
</pre></div>
<div dir="ltr" style="text-align: left;">
<pre class="source-perl">
<span class="co1">## Concrete builder</span>
<span class="kw3">package</span> spicy_pizza_builder;
 
<span class="kw2">use</span> base <span class="kw3">qw</span><span class="br0">{</span> pizza_builder <span class="br0">}</span>;
 
<span class="kw2">sub</span> build_dough <span class="br0">{</span>
    <span class="kw1">my</span><span class="br0">(</span> <span class="re0">$self</span> <span class="br0">)</span> = <span class="re0">@_</span>;
    <span class="re0">$self</span>-&gt;<span class="br0">{</span>pizza<span class="br0">}</span>-&gt;<span class="me1">set_dough</span><span class="br0">(</span><span class="st0">"pan baked"</span><span class="br0">)</span>;
<span class="br0">}</span>
 
<span class="kw2">sub</span> build_sauce <span class="br0">{</span>
    <span class="kw1">my</span><span class="br0">(</span> <span class="re0">$self</span> <span class="br0">)</span> = <span class="re0">@_</span>;
    <span class="re0">$self</span>-&gt;<span class="br0">{</span>pizza<span class="br0">}</span>-&gt;<span class="me1">set_sauce</span><span class="br0">(</span><span class="st0">"hot"</span><span class="br0">)</span>;
<span class="br0">}</span>
 
<span class="kw2">sub</span> build_topping <span class="br0">{</span>
    <span class="kw1">my</span><span class="br0">(</span> <span class="re0">$self</span> <span class="br0">)</span> = <span class="re0">@_</span>;
    <span class="re0">$self</span>-&gt;<span class="br0">{</span>pizza<span class="br0">}</span>-&gt;<span class="me1">set_topping</span><span class="br0">(</span><span class="st0">"pepperoni+salami"</span><span class="br0">)</span>;
<span class="br0">}</span>
 
<span class="nu0">1</span>;
</pre></div>
<div dir="ltr" style="text-align: left;">
<pre class="source-perl">
<span class="co1">## Director</span>
<span class="kw3">package</span> waiter;
 
<span class="kw2">sub</span> <span class="kw2">new</span> <span class="br0">{</span>
    <span class="kw3">return</span> <span class="kw3">bless</span> <span class="br0">{</span>
        pizza_builder =&gt; <span class="kw3">undef</span>
    <span class="br0">}</span>, <span class="kw3">shift</span>;
<span class="br0">}</span>
 
<span class="kw2">sub</span> set_pizza_builder <span class="br0">{</span>
    <span class="kw1">my</span><span class="br0">(</span> <span class="re0">$self</span>, <span class="re0">$builder</span> <span class="br0">)</span> = <span class="re0">@_</span>;
    <span class="re0">$self</span>-&gt;<span class="br0">{</span>pizza_builder<span class="br0">}</span> = <span class="re0">$builder</span>;
<span class="br0">}</span>
 
<span class="kw2">sub</span> get_pizza <span class="br0">{</span>
    <span class="kw1">my</span><span class="br0">(</span> <span class="re0">$self</span> <span class="br0">)</span> = <span class="re0">@_</span>;
    <span class="kw3">return</span> <span class="re0">$self</span>-&gt;<span class="br0">{</span>pizza_builder<span class="br0">}</span>-&gt;<span class="me1">get_pizza</span>;
<span class="br0">}</span>
 
<span class="kw2">sub</span> construct_pizza <span class="br0">{</span>
    <span class="kw1">my</span><span class="br0">(</span> <span class="re0">$self</span> <span class="br0">)</span> = <span class="re0">@_</span>;
    <span class="re0">$self</span>-&gt;<span class="br0">{</span>pizza_builder<span class="br0">}</span>-&gt;<span class="me1">create_new_pizza_product</span>;
    <span class="re0">$self</span>-&gt;<span class="br0">{</span>pizza_builder<span class="br0">}</span>-&gt;<span class="me1">build_dough</span>;
    <span class="re0">$self</span>-&gt;<span class="br0">{</span>pizza_builder<span class="br0">}</span>-&gt;<span class="me1">build_sauce</span>;
    <span class="re0">$self</span>-&gt;<span class="br0">{</span>pizza_builder<span class="br0">}</span>-&gt;<span class="me1">build_topping</span>;
<span class="br0">}</span>
 
<span class="nu0">1</span>;
</pre></div>
<div dir="ltr" style="text-align: left;">
<pre class="source-perl">
<span class="co1">## Lets order pizza (client of Director/Builder)</span>
<span class="kw3">package</span> main
 
<span class="kw1">my</span> <span class="re0">$waiter</span> = waiter-&gt;<span class="me1">new</span>;
<span class="kw1">my</span> <span class="re0">$hawaiian_pb</span> = hawaiian_pizza_builder-&gt;<span class="me1">new</span>;
<span class="kw1">my</span> <span class="re0">$spicy_pb</span> = spicy_pizza_builder-&gt;<span class="me1">new</span>;
 
<span class="re0">$waiter</span>-&gt;<span class="me1">set_pizza_builder</span><span class="br0">(</span> <span class="re0">$hawaiian_pb</span> <span class="br0">)</span>;
<span class="re0">$waiter</span>-&gt;<span class="me1">construct_pizza</span>;
 
<span class="kw1">my</span> <span class="re0">$pizza</span> = <span class="re0">$waiter</span>-&gt;<span class="me1">get_pizza</span>;
 
<span class="kw3">print</span> <span class="st0">"Serving a nice pizza with:<span class="es0">\n</span>"</span>;
<span class="kw1">for</span> <span class="br0">(</span><span class="kw3">keys</span> <span class="re0">%$pizza</span><span class="br0">)</span> <span class="br0">{</span>
    <span class="kw3">print</span> <span class="st0">"  $pizza-&gt;{$_} $_<span class="es0">\n</span>"</span>;
<span class="br0">}</span>
 
<span class="nu0">1</span>;
</pre></div>
<p><a name="PHP" id="PHP"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Builder_pattern&amp;action=edit&amp;section=13" title="Edit section: PHP">edit</a>]</span> <span class="mw-headline">PHP</span></h3>
<div dir="ltr" style="text-align: left;">
<pre class="source-php">
<span class="coMULTI">/** Product **/</span>
<span class="kw2">class</span> Pizza<span class="br0">{</span>
  <span class="kw2">private</span> <span class="re0">$dough</span>;
  <span class="kw2">private</span> <span class="re0">$sauce</span>;
  <span class="kw2">private</span> <span class="re0">$topping</span>;
  <span class="kw2">public</span> <span class="kw2">function</span> setDough<span class="br0">(</span><span class="re0">$dough</span><span class="br0">)</span><span class="br0">{</span>
    <span class="re0">$this</span>-&gt;<span class="me1">dough</span> = <span class="re0">$dough</span>;
  <span class="br0">}</span>
  <span class="kw2">public</span> <span class="kw2">function</span> setSauce<span class="br0">(</span><span class="re0">$sauce</span><span class="br0">)</span><span class="br0">{</span>
    <span class="re0">$this</span>-&gt;<span class="me1">sauce</span> = <span class="re0">$sauce</span>;
  <span class="br0">}</span>
  <span class="kw2">public</span> <span class="kw2">function</span> setTopping<span class="br0">(</span><span class="re0">$topping</span><span class="br0">)</span><span class="br0">{</span>
    <span class="re0">$this</span>-&gt;<span class="me1">topping</span> = <span class="re0">$topping</span>;
  <span class="br0">}</span>
<span class="br0">}</span>
</pre></div>
<div dir="ltr" style="text-align: left;">
<pre class="source-php">
<span class="coMULTI">/** Abstract builder **/</span>
abstract <span class="kw2">class</span> PizzaBuilder<span class="br0">{</span>
  protected <span class="re0">$pizza</span>;
  <span class="kw2">public</span> <span class="kw2">function</span> __construct<span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
    <span class="re0">$this</span>-&gt;<span class="me1">pizza</span> = <span class="kw2">new</span> Pizza<span class="br0">(</span><span class="br0">)</span>;
  <span class="br0">}</span>
  <span class="kw2">public</span> <span class="kw2">function</span> getPizza<span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
    <span class="kw1">return</span> <span class="re0">$this</span>-&gt;<span class="me1">pizza</span>;
  <span class="br0">}</span>
  abstract <span class="kw2">function</span> buildDough<span class="br0">(</span><span class="br0">)</span>;
  abstract <span class="kw2">function</span> buildSauce<span class="br0">(</span><span class="br0">)</span>;
  abstract <span class="kw2">function</span> buildTopping<span class="br0">(</span><span class="br0">)</span>;
<span class="br0">}</span>
 
<span class="coMULTI">/** Concrete builder  **/</span>
<span class="kw2">class</span> SpicyPizza <span class="kw2">extends</span> PizzaBuilder<span class="br0">{</span>
  <span class="kw2">public</span> <span class="kw2">function</span> buildDough<span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
    <span class="re0">$this</span>-&gt;<span class="me1">pizza</span>-&gt;<span class="me1">setDough</span><span class="br0">(</span><span class="st0">'thin'</span><span class="br0">)</span>;
  <span class="br0">}</span>
  <span class="kw2">public</span> <span class="kw2">function</span> buildSauce<span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
    <span class="re0">$this</span>-&gt;<span class="me1">pizza</span>-&gt;<span class="me1">setSauce</span><span class="br0">(</span><span class="st0">'hot'</span><span class="br0">)</span>;
  <span class="br0">}</span>
  <span class="kw2">public</span> <span class="kw2">function</span> buildTopping<span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
    <span class="re0">$this</span>-&gt;<span class="me1">pizza</span>-&gt;<span class="me1">setTopping</span><span class="br0">(</span><span class="st0">'pepperoni+salami'</span><span class="br0">)</span>;
  <span class="br0">}</span>
<span class="br0">}</span>
</pre></div>
<div dir="ltr" style="text-align: left;">
<pre class="source-php">
<span class="coMULTI">/** Director **/</span>
<span class="kw2">class</span> Chef<span class="br0">{</span>
  <span class="kw2">private</span> <span class="re0">$pizza_builder</span>;
  <span class="kw2">public</span> <span class="kw2">function</span> setPizzaBuilder<span class="br0">(</span>PizzaBuilder <span class="re0">$pizza_builder</span><span class="br0">)</span><span class="br0">{</span>
    <span class="re0">$this</span>-&gt;<span class="me1">pizza_builder</span> = <span class="re0">$pizza_builder</span>;
  <span class="br0">}</span>
  <span class="kw2">public</span> <span class="kw2">function</span> cookPizza<span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
    <span class="re0">$this</span>-&gt;<span class="me1">pizza_builder</span>-&gt;<span class="me1">buildDough</span><span class="br0">(</span><span class="br0">)</span>;
    <span class="re0">$this</span>-&gt;<span class="me1">pizza_builder</span>-&gt;<span class="me1">buildSauce</span><span class="br0">(</span><span class="br0">)</span>;
    <span class="re0">$this</span>-&gt;<span class="me1">pizza_builder</span>-&gt;<span class="me1">buildTopping</span><span class="br0">(</span><span class="br0">)</span>;
  <span class="br0">}</span>
  <span class="kw2">public</span> <span class="kw2">function</span> getPizza<span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
    <span class="kw1">return</span> <span class="re0">$this</span>-&gt;<span class="me1">pizza_builder</span>-&gt;<span class="me1">getPizza</span><span class="br0">(</span><span class="br0">)</span>;
  <span class="br0">}</span>
<span class="br0">}</span>
</pre></div>
<div dir="ltr" style="text-align: left;">
<pre class="source-php">
<span class="co1">//Customer orders a Pizza.</span>
<span class="re0">$chef</span> = <span class="kw2">new</span> Chef<span class="br0">(</span><span class="br0">)</span>;
 
<span class="re0">$order</span> = <span class="kw2">new</span> SpicyPizza<span class="br0">(</span><span class="br0">)</span>;
<span class="re0">$chef</span>-&gt;<span class="me1">setPizzaBuilder</span><span class="br0">(</span><span class="re0">$order</span><span class="br0">)</span>;
<span class="re0">$chef</span>-&gt;<span class="me1">cookPizza</span><span class="br0">(</span><span class="br0">)</span>;
<span class="re0">$pizza</span> = <span class="re0">$chef</span>-&gt;<span class="me1">getPizza</span><span class="br0">(</span><span class="br0">)</span>;
 
<span class="kw3">print_r</span><span class="br0">(</span><span class="re0">$pizza</span><span class="br0">)</span>;
</pre></div>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Builder_pattern&amp;action=edit&amp;section=14" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<ul>
<li><a href="http://www.fsw.com/Jt/Jt.htm" class="external text" title="http://www.fsw.com/Jt/Jt.htm" rel="nofollow">Jt</a> J2EE Pattern Oriented Framework</li>
<li><a href="http://groups.google.com/group/comp.object/browse_thread/thread/db4b3914ddea5131/25e7e96e2e91983b?lnk=st&amp;q=&amp;rnum=1#25e7e96e2e91983b" class="external text" title="http://groups.google.com/group/comp.object/browse_thread/thread/db4b3914ddea5131/25e7e96e2e91983b?lnk=st&amp;q=&amp;rnum=1#25e7e96e2e91983b" rel="nofollow">What is the difference between Factory pattern and Builder Pattern&#160;?</a></li>
</ul>
<p><br /></p>
<table class="navbox" cellspacing="0" style=";">
<tr>
<td style="padding:2px;">
<table cellspacing="0" class="nowraplinks collapsible autocollapse" style="width:100%;background:transparent;color:inherit;;">
<tr>
<th style=";" colspan="2" class="navbox-title">
<div style="float:left; width:6em;text-align:left;">
<div class="noprint plainlinksneverexpand navbar" style="background:none; padding:0; font-weight:normal;;;border:none;; font-size:xx-small;"><a href="/wiki/Template:Design_Patterns_Patterns" title="Template:Design Patterns Patterns"><span title="View this template" style=";;border:none;">v</span></a>&#160;•&#160;<a href="/w/index.php?title=Template_talk:Design_Patterns_Patterns&amp;action=edit&amp;redlink=1" class="new" title="Template talk:Design Patterns Patterns (page does not exist)"><span title="Discussion about this template" style=";;border:none;">d</span></a>&#160;•&#160;<a href="http://en.wikipedia.org/w/index.php?title=Template:Design_Patterns_Patterns&amp;action=edit" class="external text" title="http://en.wikipedia.org/w/index.php?title=Template:Design_Patterns_Patterns&amp;action=edit" rel="nofollow"><span title="Edit this template" style=";;border:none;;">e</span></a></div>
</div>
<span style="font-size:110%;"><a href="/wiki/Design_pattern_(computer_science)" title="Design pattern (computer science)">Design patterns</a> in the book <i><a href="/wiki/Design_Patterns_(book)" title="Design Patterns (book)">Design Patterns</a></i></span></th>
</tr>
<tr style="height:2px;">
<td></td>
</tr>
<tr>
<td class="navbox-group" style=";;">Creational</td>
<td style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<div style="padding:0em 0.25em"><a href="/wiki/Abstract_factory_pattern" title="Abstract factory pattern">Abstract factory</a><span style="font-weight:bold;">&#160;·</span> <strong class="selflink">Builder</strong><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Factory_method_pattern" title="Factory method pattern">Factory</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Prototype_pattern" title="Prototype pattern">Prototype</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Singleton_pattern" title="Singleton pattern">Singleton</a></div>
</td>
</tr>
<tr style="height:2px">
<td></td>
</tr>
<tr>
<td class="navbox-group" style=";;">Structural</td>
<td style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<div style="padding:0em 0.25em"><a href="/wiki/Adapter_pattern" title="Adapter pattern">Adapter</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Bridge_pattern" title="Bridge pattern">Bridge</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Composite_pattern" title="Composite pattern">Composite</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Decorator_pattern" title="Decorator pattern">Decorator</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Facade_pattern" title="Facade pattern">Facade</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Flyweight_pattern" title="Flyweight pattern">Flyweight</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Proxy_pattern" title="Proxy pattern">Proxy</a></div>
</td>
</tr>
<tr style="height:2px">
<td></td>
</tr>
<tr>
<td class="navbox-group" style=";;">Behavioral</td>
<td style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<div style="padding:0em 0.25em"><a href="/wiki/Chain-of-responsibility_pattern" title="Chain-of-responsibility pattern">Chain of responsibility</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Command_pattern" title="Command pattern">Command</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Interpreter_pattern" title="Interpreter pattern">Interpreter</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Iterator_pattern" title="Iterator pattern">Iterator</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Mediator_pattern" title="Mediator pattern">Mediator</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Memento_pattern" title="Memento pattern">Memento</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Observer_pattern" title="Observer pattern">Observer</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/State_pattern" title="State pattern">State</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Strategy_pattern" title="Strategy pattern">Strategy</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Template_method_pattern" title="Template method pattern">Template method</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Visitor_pattern" title="Visitor pattern">Visitor</a></div>
</td>
</tr>
</table>
</td>
</tr>
</table>


<!-- 
NewPP limit report
Preprocessor node count: 635/1000000
Post-expand include size: 13757/2048000 bytes
Template argument size: 5823/2048000 bytes
Expensive parser function count: 0/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:164849-0!1!0!default!!en!2 and timestamp 20090329102105 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Builder_pattern">http://en.wikipedia.org/wiki/Builder_pattern</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Software_design_patterns" title="Category:Software design patterns">Software design patterns</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_example_Java_code" title="Category:Articles with example Java code">Articles with example Java code</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Builder_pattern" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Builder_pattern" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Builder_pattern&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Builder_pattern&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Builder_pattern" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Builder_pattern" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Builder_pattern" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Builder_pattern&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Builder_pattern&amp;oldid=279908445" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Builder_pattern&amp;id=279908445">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/Builder_(Entwurfsmuster)">Deutsch</a></li>
				<li class="interwiki-es"><a href="http://es.wikipedia.org/wiki/Builder_(patr%C3%B3n_de_dise%C3%B1o)">Español</a></li>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Monteur_(patron_de_conception)">Français</a></li>
				<li class="interwiki-ko"><a href="http://ko.wikipedia.org/wiki/Builder_%ED%8C%A8%ED%84%B4">한국어</a></li>
				<li class="interwiki-it"><a href="http://it.wikipedia.org/wiki/Builder">Italiano</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/Builder_%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3">日本語</a></li>
				<li class="interwiki-pl"><a href="http://pl.wikipedia.org/wiki/Budowniczy_(wzorzec_projektowy)">Polski</a></li>
				<li class="interwiki-pt"><a href="http://pt.wikipedia.org/wiki/Builder">Português</a></li>
				<li class="interwiki-ru"><a href="http://ru.wikipedia.org/wiki/%D0%A1%D1%82%D1%80%D0%BE%D0%B8%D1%82%D0%B5%D0%BB%D1%8C_(%D1%88%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD_%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)">Русский</a></li>
				<li class="interwiki-uk"><a href="http://uk.wikipedia.org/wiki/%D0%91%D1%83%D0%B4%D1%96%D0%B2%D0%BD%D0%B8%D0%BA_(%D1%88%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD_%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D1%83%D0%B2%D0%B0%D0%BD%D0%BD%D1%8F)">Українська</a></li>
				<li class="interwiki-zh"><a href="http://zh.wikipedia.org/wiki/%E7%94%9F%E6%88%90%E5%99%A8_(%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F)">中文</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 27 March 2009, at 00:12.</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv62 in 0.080 secs. --></body></html>
