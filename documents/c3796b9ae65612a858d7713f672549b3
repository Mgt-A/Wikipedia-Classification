<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Divide and conquer algorithm,Akra-Bazzi method,Algorithm,Algorithm design,Algorithmic complexity,Anatolii Alexeevitch Karatsuba,Andrey Kolmogorov,Asymptotic complexity,Binary search,Binary search algorithm,Bisection algorithm" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Divide_and_conquer_algorithm&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Divide_and_conquer_algorithm&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Divide and conquer algorithm - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Divide_and_conquer_algorithm";
		var wgTitle = "Divide and conquer algorithm";
		var wgAction = "view";
		var wgArticleId = "201154";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 276902296;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Divide_and_conquer_algorithm skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Divide and conquer algorithm</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<p>In <a href="/wiki/Computer_science" title="Computer science">computer science</a>, <b>divide and conquer</b> (<b>D&amp;C</b>) is an important <a href="/wiki/Algorithm_design" title="Algorithm design">algorithm design</a> <a href="/wiki/Paradigm" title="Paradigm">paradigm</a> based on multi-branched <a href="/wiki/Recursion" title="Recursion">recursion</a>. A divide and conquer <a href="/wiki/Algorithm" title="Algorithm">algorithm</a> works by recursively breaking down a problem into two or more sub-problems of the same (or related) type, until these become simple enough to be solved directly. The solutions to the sub-problems are then combined to give a solution to the original problem.</p>
<p>This technique is the basis of efficient algorithms for all kinds of problems, such as <a href="/wiki/Sorting_algorithm" title="Sorting algorithm">sorting</a> (e.g., <a href="/wiki/Quicksort" title="Quicksort">quicksort</a>, <a href="/wiki/Merge_sort" title="Merge sort">merge sort</a>), <a href="/wiki/Multiplication_algorithm" title="Multiplication algorithm">multiplying large numbers</a> (e.g. <a href="/wiki/Karatsuba_algorithm" title="Karatsuba algorithm">Karatsuba</a>), <a href="/wiki/Syntactic_analysis" title="Syntactic analysis" class="mw-redirect">syntactic analysis</a> (e.g., <a href="/wiki/Top-down_parser" title="Top-down parser" class="mw-redirect">top-down parsers</a>), and computing the <a href="/wiki/Discrete_Fourier_transform" title="Discrete Fourier transform">discrete Fourier transform</a> (<a href="/wiki/Fast_Fourier_transform" title="Fast Fourier transform">FFTs</a>).</p>
<p>On the other hand, the ability to understand and design D&amp;C algorithms is a skill that takes time to master. As when <a href="/wiki/Proof_(mathematics)" title="Proof (mathematics)" class="mw-redirect">proving</a> a <a href="/wiki/Theorem" title="Theorem">theorem</a> by induction, it is often necessary to replace the original problem by a more general or complicated problem in order to get the recursion going, and there is no systematic method for finding the proper generalization.</p>
<p>The name "divide and conquer" is sometimes applied also to algorithms that reduce each problem to only one subproblem, such as the <a href="/wiki/Binary_search" title="Binary search" class="mw-redirect">binary search</a> algorithm for finding a record in a sorted list (or its analog in <a href="/wiki/Numerical_algorithm" title="Numerical algorithm" class="mw-redirect">numerical computing</a>, the <a href="/wiki/Bisection_algorithm" title="Bisection algorithm" class="mw-redirect">bisection algorithm</a> for <a href="/wiki/Root-finding_algorithm" title="Root-finding algorithm">root finding</a>) <sup id="cite_ref-CLR_0-0" class="reference"><a href="#cite_note-CLR-0" title=""><span>[</span>1<span>]</span></a></sup>. Under this broad definition, however, every algorithm that uses recursion or loops could in some sense be re-expressed as a "divide and conquer algorithm". Therefore, some authors use the name <b>decrease and conquer</b> instead <sup id="cite_ref-1" class="reference"><a href="#cite_note-1" title=""><span>[</span>2<span>]</span></a></sup>. These algorithms can be implemented more efficiently than general divide-and-conquer algorithms. If they use <a href="/wiki/Tail_recursion" title="Tail recursion">tail recursion</a>, for instance, they can be converted into simple <a href="/wiki/Loop_(programming)" title="Loop (programming)" class="mw-redirect">loops</a>.</p>
<p>The correctness of a divide and conquer algorithm is usually proved by <a href="/wiki/Mathematical_induction" title="Mathematical induction">mathematical induction</a>, and its computational cost is often determined by solving <a href="/wiki/Recurrence_relation" title="Recurrence relation">recurrence relations</a>.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Early_historical_examples"><span class="tocnumber">1</span> <span class="toctext">Early historical examples</span></a></li>
<li class="toclevel-1"><a href="#Advantages"><span class="tocnumber">2</span> <span class="toctext">Advantages</span></a>
<ul>
<li class="toclevel-2"><a href="#Solving_difficult_problems"><span class="tocnumber">2.1</span> <span class="toctext">Solving difficult problems</span></a></li>
<li class="toclevel-2"><a href="#Algorithm_efficiency"><span class="tocnumber">2.2</span> <span class="toctext">Algorithm efficiency</span></a></li>
<li class="toclevel-2"><a href="#Parallelism"><span class="tocnumber">2.3</span> <span class="toctext">Parallelism</span></a></li>
<li class="toclevel-2"><a href="#Memory_access"><span class="tocnumber">2.4</span> <span class="toctext">Memory access</span></a></li>
<li class="toclevel-2"><a href="#Roundoff_control"><span class="tocnumber">2.5</span> <span class="toctext">Roundoff control</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Implementation_issues"><span class="tocnumber">3</span> <span class="toctext">Implementation issues</span></a>
<ul>
<li class="toclevel-2"><a href="#Recursion"><span class="tocnumber">3.1</span> <span class="toctext">Recursion</span></a></li>
<li class="toclevel-2"><a href="#Explicit_stack"><span class="tocnumber">3.2</span> <span class="toctext">Explicit stack</span></a></li>
<li class="toclevel-2"><a href="#Stack_size"><span class="tocnumber">3.3</span> <span class="toctext">Stack size</span></a></li>
<li class="toclevel-2"><a href="#Choosing_the_base_cases"><span class="tocnumber">3.4</span> <span class="toctext">Choosing the base cases</span></a></li>
<li class="toclevel-2"><a href="#Sharing_repeated_subproblems"><span class="tocnumber">3.5</span> <span class="toctext">Sharing repeated subproblems</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">4</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">5</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">6</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Early_historical_examples" id="Early_historical_examples"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Divide_and_conquer_algorithm&amp;action=edit&amp;section=1" title="Edit section: Early historical examples">edit</a>]</span> <span class="mw-headline">Early historical examples</span></h2>
<p>Binary search, a divide and conquer algorithm in which the original problem is successively broken down into <i>single</i> subproblems of roughly half the original size, has a long history. The idea of using a sorted list of items to facilitate searching dates back as far as Babylonia in 200BC,<sup id="cite_ref-Knuth3_2-0" class="reference"><a href="#cite_note-Knuth3-2" title=""><span>[</span>3<span>]</span></a></sup> while a clear description of the algorithm on computers appeared in 1946 in an article by John Mauchly.<sup id="cite_ref-Knuth3_2-1" class="reference"><a href="#cite_note-Knuth3-2" title=""><span>[</span>3<span>]</span></a></sup> Another divide and conquer algorithm with a single subproblem is the <a href="/wiki/Euclidean_algorithm" title="Euclidean algorithm">Euclidean algorithm</a> to compute the <a href="/wiki/Greatest_common_divisor" title="Greatest common divisor">greatest common divisor</a> of two numbers (by reducing the numbers to smaller and smaller equivalent subproblems), which dates to several centuries BC.</p>
<p>An early example of a divide-and-conquer algorithm with multiple subproblems is <a href="/wiki/Carl_Friedrich_Gauss" title="Carl Friedrich Gauss">Gauss</a>'s 1805 description of what is now called the <a href="/wiki/Cooley-Tukey_FFT_algorithm" title="Cooley-Tukey FFT algorithm">Cooley-Tukey fast Fourier transform</a> (FFT) algorithm,<sup id="cite_ref-Heideman84_3-0" class="reference"><a href="#cite_note-Heideman84-3" title=""><span>[</span>4<span>]</span></a></sup> although he did not analyze its <a href="/wiki/Algorithmic_complexity" title="Algorithmic complexity" class="mw-redirect">operation count</a> quantitatively and FFTs did not become widespread until they were rediscovered over a century later.</p>
<p>An early two-subproblem D&amp;C algorithm that was specifically developed for computers and properly analyzed is the <a href="/wiki/Merge_sort" title="Merge sort">merge sort</a> algorithm, invented by <a href="/wiki/John_von_Neumann" title="John von Neumann">John von Neumann</a> in 1945.<sup id="cite_ref-4" class="reference"><a href="#cite_note-4" title=""><span>[</span>5<span>]</span></a></sup></p>
<p>Another notable example is the <a href="/wiki/Karatsuba_algorithm" title="Karatsuba algorithm">algorithm</a> invented by <a href="/wiki/Anatolii_Alexeevitch_Karatsuba" title="Anatolii Alexeevitch Karatsuba">A. Karatsuba</a> in 1960 <sup id="cite_ref-5" class="reference"><a href="#cite_note-5" title=""><span>[</span>6<span>]</span></a></sup> that could multiply two <i>n</i>-digit numbers in <img class="tex" alt="O(n^{\log_2 3})" src="http://upload.wikimedia.org/math/a/f/b/afb447a7bcf68d53382a81484f5e5575.png" /> operations. This algorithm disproved <a href="/wiki/Andrey_Kolmogorov" title="Andrey Kolmogorov">Andrey Kolmogorov</a>'s 1956 conjecture that <span class="texhtml">Ω(<i>n</i><sup>2</sup>)</span> operations would be required for that task.</p>
<p>As another example of a divide and conquer algorithm that did not originally involve computers, <a href="/wiki/Donald_Knuth" title="Donald Knuth">Knuth</a> gives the method a <a href="/wiki/Post_office" title="Post office">post office</a> typically uses to route mail: letters are sorted into separate bags for different geographical areas, each of these bags is itself sorted into batches for smaller sub-regions, and so on until they are delivered.<sup id="cite_ref-Knuth3_2-2" class="reference"><a href="#cite_note-Knuth3-2" title=""><span>[</span>3<span>]</span></a></sup> This is related to a <a href="/wiki/Radix_sort" title="Radix sort">radix sort</a>, described for <a href="/wiki/IBM_80_series_Card_Sorters" title="IBM 80 series Card Sorters">punch-card sorting</a> machines as early as 1929.<sup id="cite_ref-Knuth3_2-3" class="reference"><a href="#cite_note-Knuth3-2" title=""><span>[</span>3<span>]</span></a></sup></p>
<p><a name="Advantages" id="Advantages"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Divide_and_conquer_algorithm&amp;action=edit&amp;section=2" title="Edit section: Advantages">edit</a>]</span> <span class="mw-headline">Advantages</span></h2>
<p><a name="Solving_difficult_problems" id="Solving_difficult_problems"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Divide_and_conquer_algorithm&amp;action=edit&amp;section=3" title="Edit section: Solving difficult problems">edit</a>]</span> <span class="mw-headline">Solving difficult problems</span></h3>
<p>Divide and conquer is a powerful tool for solving conceptually difficult problems, such as the classic <a href="/wiki/Tower_of_Hanoi" title="Tower of Hanoi">Tower of Hanoi</a> puzzle: all it requires is a way of breaking the problem into sub-problems, of solving the trivial cases and of combining sub-problems to the original problem.</p>
<p><a name="Algorithm_efficiency" id="Algorithm_efficiency"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Divide_and_conquer_algorithm&amp;action=edit&amp;section=4" title="Edit section: Algorithm efficiency">edit</a>]</span> <span class="mw-headline">Algorithm efficiency</span></h3>
<p>The divide-and-conquer paradigm often helps in the discovery of efficient algorithms. It was the key, for example, to Karatsuba's fast multiplication method, the quicksort and mergesort algorithms, and fast Fourier transforms.</p>
<p>In all these examples, the D&amp;C approach led to an improvement in the <a href="/wiki/Asymptotic_complexity" title="Asymptotic complexity" class="mw-redirect">asymptotic cost</a> of the solution. For example, if the base cases have constant-bounded size, the work of splitting the problem and combining the partial solutions is proportional to the problem's size <i>n</i>, and there are a bounded number <i>p</i> of subproblems of size ~ <i>n</i>/<i>p</i> at each stage, then the cost of the divide-and-conquer algorithm will be O(<i>n</i> log <i>n</i>).</p>
<p><a name="Parallelism" id="Parallelism"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Divide_and_conquer_algorithm&amp;action=edit&amp;section=5" title="Edit section: Parallelism">edit</a>]</span> <span class="mw-headline">Parallelism</span></h3>
<p>Divide and conquer algorithms are naturally adapted for execution in multi-processor machines, especially shared-memory systems where the communication of data between processors does not need to be planned in advance, because distinct sub-problems can be executed on different processors.</p>
<p><a name="Memory_access" id="Memory_access"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Divide_and_conquer_algorithm&amp;action=edit&amp;section=6" title="Edit section: Memory access">edit</a>]</span> <span class="mw-headline">Memory access</span></h3>
<p>Divide-and-conquer algorithms naturally tend to make efficient use of memory <a href="/wiki/Cache" title="Cache">caches</a>. The reason is that once a sub-problem is small enough, it and all its sub-problems can, in principle, be solved within the cache, without accessing the slower main memory. An algorithm designed to exploit the cache in this way is called <i><a href="/wiki/Cache-oblivious_algorithm" title="Cache-oblivious algorithm">cache oblivious</a></i>, because it does not contain the cache size(s) as an explicit parameter.<sup id="cite_ref-cahob_6-0" class="reference"><a href="#cite_note-cahob-6" title=""><span>[</span>7<span>]</span></a></sup>.</p>
<p>Moreover, D&amp;C algorithms can be designed for many important algorithms, such as sorting, FFTs, and matrix multiplication, in such a way as to be <i>optimal cache oblivious</i> algorithms—they use the cache in a provably optimal way, in an asymptotic sense, regardless of the cache size. In contrast, the traditional approach to exploiting the cache is <i>blocking</i>, where the problem is explicitly divided into chunks of the appropriate size—this can also use the cache optimally, but only when the algorithm is tuned for the specific cache size(s) of a particular machine.</p>
<p>The same advantage exists with regards to other hierarchical storage systems, such as <a href="/wiki/Non-Uniform_Memory_Access" title="Non-Uniform Memory Access">NUMA</a> or <a href="/wiki/Virtual_memory" title="Virtual memory">virtual memory</a>, as well as for multiple levels of cache: once a sub-problem is small enough, it can be solved within a given level of the hierarchy, without accessing the higher (slower) levels.</p>
<p><a name="Roundoff_control" id="Roundoff_control"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Divide_and_conquer_algorithm&amp;action=edit&amp;section=7" title="Edit section: Roundoff control">edit</a>]</span> <span class="mw-headline">Roundoff control</span></h3>
<p>In computations with rounded arithmetic, e.g. with <a href="/wiki/Floating_point" title="Floating point">floating point</a> numbers, a divide-and-conquer algorithm may yield more accurate results than a superficially equivalent iterative method. For example, one can add <i>N</i> numbers either by a simple loop that adds each datum to a single variable, or by a D&amp;C algorithm that breaks the data set into two halves, recursively computes the sum of each half, and then adds the two sums. While the second method performs the same number of additions as the first, and pays the overhead of the recursive calls, it is usually more accurate <sup id="cite_ref-7" class="reference"><a href="#cite_note-7" title=""><span>[</span>8<span>]</span></a></sup>.</p>
<p><a name="Implementation_issues" id="Implementation_issues"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Divide_and_conquer_algorithm&amp;action=edit&amp;section=8" title="Edit section: Implementation issues">edit</a>]</span> <span class="mw-headline">Implementation issues</span></h2>
<p><a name="Recursion" id="Recursion"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Divide_and_conquer_algorithm&amp;action=edit&amp;section=9" title="Edit section: Recursion">edit</a>]</span> <span class="mw-headline">Recursion</span></h3>
<p>Divide-and-conquer algorithms are naturally implemented as <a href="/wiki/Subroutine" title="Subroutine">recursive procedures</a>. In that case, the partial sub-problems leading to the one currently being solved are automatically stored in the <a href="/wiki/Call_stack" title="Call stack">procedure call stack</a>.</p>
<p><a name="Explicit_stack" id="Explicit_stack"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Divide_and_conquer_algorithm&amp;action=edit&amp;section=10" title="Edit section: Explicit stack">edit</a>]</span> <span class="mw-headline">Explicit stack</span></h3>
<p>Divide and conquer algorithms can also be implemented by a non-recursive program that stores the partial sub-problems in some explicit data structure, such as a <a href="/wiki/Stack_(data_structure)" title="Stack (data structure)">stack</a>, <a href="/wiki/Queue_(data_structure)" title="Queue (data structure)">queue</a>, or <a href="/wiki/Priority_queue" title="Priority queue">priority queue</a>. This approach allows more freedom in the choice of the sub-problem that is to be solved next, a feature that is important in some applications — e.g. in <a href="/wiki/Breadth_first_recursion" title="Breadth first recursion" class="mw-redirect">breadth-first recursion</a> and the <a href="/wiki/Branch_and_bound" title="Branch and bound">branch and bound</a> method for function optimization. This approach is also the standard solution in programming languages that do not provide support for recursive procedures.</p>
<p><a name="Stack_size" id="Stack_size"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Divide_and_conquer_algorithm&amp;action=edit&amp;section=11" title="Edit section: Stack size">edit</a>]</span> <span class="mw-headline">Stack size</span></h3>
<p>In recursive implementations of D&amp;C algorithms, one must make sure that there is sufficient memory allocated for the recursion stack, otherwise the execution may fail because of <a href="/wiki/Stack_overflow" title="Stack overflow">stack overflow</a>. Fortunately, D&amp;C algorithms that are time-efficient often have relatively small recursion depth. For example, the quicksort algorithm can be implemented so that it never requires more than <span class="texhtml">log<sub>2</sub><i>n</i></span> nested recursive calls to sort <span class="texhtml"><i>n</i></span> items.</p>
<p>Stack overflow may be difficult to avoid when using recursive procedures, since many compilers assume that the recursion stack is a contiguous area of memory, and some allocate a fixed amount of space for it. Compilers may also save more information in the recursion stack than is strictly necessary, such as return address, unchanging parameters, and the internal variables of the procedure. Thus, the risk of stack overflow can be reduced by minimizing the parameters and internal variables of the recursive procedure, and/or by using an explicit stack structure.</p>
<p><a name="Choosing_the_base_cases" id="Choosing_the_base_cases"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Divide_and_conquer_algorithm&amp;action=edit&amp;section=12" title="Edit section: Choosing the base cases">edit</a>]</span> <span class="mw-headline">Choosing the base cases</span></h3>
<p>In any recursive algorithm, there is considerable freedom in the choice of the <i>base cases</i>, the small subproblems that are solved directly in order to terminate the recursion.</p>
<p>Choosing the smallest or simplest possible base cases is more elegant and usually leads to simpler programs, because there are fewer cases to consider and they are easier to solve. For example, an FFT algorithm could stop the recursion when the input is a single sample, and the quicksort list-sorting algorithm could stop when the input is the empty list; in both examples there is only one base case to consider, and it requires no processing.</p>
<p>On the other hand, efficiency often improves if the recursion is stopped at relatively large base cases, and these are solved non-recursively. This strategy avoids the overhead of recursive calls that do little or no work, and may also allow the use of specialized non-recursive algorithms that, for those base cases, are more efficient than explicit recursion. Since a D&amp;C algorithm eventually reduces each problem or sub-problem instance to a large number of base instances, these often dominate the overall cost of the algorithm, especially when the splitting/joining overhead is low. Note that these considerations do not depend on whether recursion is implemented by the compiler or by an explicit stack.</p>
<p>Thus, for example, many library implementations of quicksort will switch to a simple loop-based <a href="/wiki/Insertion_sort" title="Insertion sort">insertion sort</a> (or similar) algorithm once the number of items to be sorted is sufficiently small. Note that, if the empty list were the only base case, sorting a list with <i>n</i> entries would entain <i>n</i>+1 quicksort calls that would do nothing but return immediately. Increasing the base cases to lists of size 2 or less will eliminate most of those do-nothing calls, and more generally a base case larger than 2 is typically used to reduce the fraction of time spent in function-call overhead or stack manipulation.</p>
<p>Alternatively, one can employ large base cases that still use a divide-and-conquer algorithm, but implement the algorithm for predetermined set of fixed sizes where the algorithm can be completely <a href="/wiki/Loop_unwinding" title="Loop unwinding">unrolled</a> into code that has no recursion, loops, or <a href="/wiki/Conditional_(programming)" title="Conditional (programming)">conditionals</a> (related to the technique of <a href="/wiki/Partial_evaluation" title="Partial evaluation">partial evaluation</a>). For example, this approach is used in some efficient FFT implementations, where the base cases are unrolled implementations of divide-and-conquer FFT algorithms for a set of fixed sizes.<sup id="cite_ref-fftw_8-0" class="reference"><a href="#cite_note-fftw-8" title=""><span>[</span>9<span>]</span></a></sup> The large number of separate base cases desirable to implement this strategy efficiently are sometimes produced by <a href="/wiki/Source_code_generation" title="Source code generation" class="mw-redirect">source code generation</a> methods.<sup id="cite_ref-fftw_8-1" class="reference"><a href="#cite_note-fftw-8" title=""><span>[</span>9<span>]</span></a></sup></p>
<p><a name="Sharing_repeated_subproblems" id="Sharing_repeated_subproblems"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Divide_and_conquer_algorithm&amp;action=edit&amp;section=13" title="Edit section: Sharing repeated subproblems">edit</a>]</span> <span class="mw-headline">Sharing repeated subproblems</span></h3>
<p>For some problems, the branched recursion may end up evaluating the same sub-problem many times over. In such cases it may be worth identifying and saving the solutions to these overlapping subproblems, a technique commonly known as <a href="/wiki/Memoization" title="Memoization">memoization</a>. Followed to the limit, it leads to <a href="/wiki/Bottom-up_design" title="Bottom-up design" class="mw-redirect">bottom-up</a> divide-and-conquer algorithms such as <a href="/wiki/Dynamic_programming" title="Dynamic programming">dynamic programming</a> and <a href="/wiki/Chart_parsing" title="Chart parsing" class="mw-redirect">chart parsing</a>.</p>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Divide_and_conquer_algorithm&amp;action=edit&amp;section=14" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<div class="noprint tright portal" style="border:solid #aaa 1px;margin:0.5em 0 0.5em 0.5em;">
<table style="background:#f9f9f9; font-size:85%; line-height:110%;">
<tr>
<td><a href="/wiki/File:Internet_map_1024.jpg" class="image" title="Internet map 1024.jpg"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/d/d2/Internet_map_1024.jpg/28px-Internet_map_1024.jpg" width="28" height="28" border="0" /></a></td>
<td style="padding:0 0.2em;"><i><b><a href="/wiki/Portal:Computer_Science" title="Portal:Computer Science" class="mw-redirect">Computer Science portal</a></b></i></td>
</tr>
</table>
</div>
<ul>
<li><a href="/wiki/Mathematical_induction" title="Mathematical induction">Mathematical induction</a></li>
<li>The <a href="/wiki/Master_theorem" title="Master theorem">Master theorem</a></li>
<li>The <a href="/wiki/Akra-Bazzi_method" title="Akra-Bazzi method">Akra-Bazzi method</a></li>
<li><a href="/wiki/Divide_and_rule" title="Divide and rule">Divide and rule</a> (politics and sociology)</li>
<li><a href="/wiki/Binary_search_algorithm" title="Binary search algorithm">Binary search algorithm</a></li>
</ul>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Divide_and_conquer_algorithm&amp;action=edit&amp;section=15" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<ol class="references">
<li id="cite_note-CLR-0"><b><a href="#cite_ref-CLR_0-0" title="">^</a></b> Thomas H. Cormen, Charles E. Leiserson, and Ronald L. Rivest, <i>Introduction to Algorithms</i> (MIT Press, 2000).</li>
<li id="cite_note-1"><b><a href="#cite_ref-1" title="">^</a></b> Anany V. Levitin, <i>Introduction to the Design and Analysis of Algorithms</i> (Addison Wesley, 2002).</li>
<li id="cite_note-Knuth3-2">^ <a href="#cite_ref-Knuth3_2-0" title=""><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-Knuth3_2-1" title=""><sup><i><b>b</b></i></sup></a> <a href="#cite_ref-Knuth3_2-2" title=""><sup><i><b>c</b></i></sup></a> <a href="#cite_ref-Knuth3_2-3" title=""><sup><i><b>d</b></i></sup></a> Donald E. Knuth, <i>The Art of Computer Programming: Volume 3, Sorting and Searching</i>, second edition (Addison-Wesley, 1998).</li>
<li id="cite_note-Heideman84-3"><b><a href="#cite_ref-Heideman84_3-0" title="">^</a></b> Heideman, M. T., D. H. Johnson, and C. S. Burrus, "Gauss and the history of the fast Fourier transform," IEEE ASSP Magazine, 1, (4), 14–21 (1984)</li>
<li id="cite_note-4"><b><a href="#cite_ref-4" title="">^</a></b> <cite style="font-style:normal" class="book" id="CITEREFKnuth1998"><a href="/wiki/Donald_Knuth" title="Donald Knuth">Knuth, Donald</a> (1998). <i>The Art of Computer Programming: Volume 3 Sorting and Searching</i>. pp.&#160;159. <a href="/wiki/Special:BookSources/0201896850" class="internal">ISBN 0-201-89685-0</a>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=The+Art+of+Computer+Programming%3A+Volume+3+Sorting+and+Searching&amp;rft.aulast=Knuth&amp;rft.aufirst=Donald&amp;rft.au=Knuth%2C+Donald&amp;rft.date=1998&amp;rft.pages=pp.%26nbsp%3B159&amp;rft.isbn=0-201-89685-0&amp;rfr_id=info:sid/en.wikipedia.org:Divide_and_conquer_algorithm"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-5"><b><a href="#cite_ref-5" title="">^</a></b> A. Karatsuba and Yu. Ofman, <i>Multiplication of Many-Digital Numbers by Automatic Computers.</i> Doklady Akad. Nauk SSSR, Vol. 145 (1962), pp. 293–294. Translation in Physics-Doklady, 7 (1963), pp. 595–596.</li>
<li id="cite_note-cahob-6"><b><a href="#cite_ref-cahob_6-0" title="">^</a></b> <cite style="font-style:normal" class="" id="CITEREFM._FrigoC._E._Leiserson.2C_H._Prokop1999">M. Frigo; C. E. Leiserson, H. Prokop (1999). "Cache-oblivious algorithms". <i>Proc. 40th Symp. On the Foundations of Computer Science</i>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=Cache-oblivious+algorithms&amp;rft.jtitle=Proc.+40th+Symp.+On+the+Foundations+of+Computer+Science&amp;rft.aulast=M.+Frigo&amp;rft.au=M.+Frigo&amp;rft.au=C.+E.+Leiserson%2C+H.+Prokop&amp;rft.date=1999&amp;rfr_id=info:sid/en.wikipedia.org:Divide_and_conquer_algorithm"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-7"><b><a href="#cite_ref-7" title="">^</a></b> Nicholas J. Higham, "The accuracy of floating point summation", <i>SIAM J. Scientific Computing</i> <b>14</b> (4), 783–799 (1993).</li>
<li id="cite_note-fftw-8">^ <a href="#cite_ref-fftw_8-0" title=""><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-fftw_8-1" title=""><sup><i><b>b</b></i></sup></a> <cite style="font-style:normal" class="" id="CITEREFFrigo.2C_M.Johnson.2C_S._G.2005">Frigo, M.; Johnson, S. G. (February 2005). "<a href="http://www.fftw.org/fftw-paper-ieee.pdf" class="external text" title="http://www.fftw.org/fftw-paper-ieee.pdf" rel="nofollow">The design and implementation of FFTW3</a>". <i>Proceedings of the IEEE</i> <b>93</b> (2): 216–231. <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<span class="neverexpand"><a href="http://dx.doi.org/10.1109%2FJPROC.2004.840301" class="external text" title="http://dx.doi.org/10.1109%2FJPROC.2004.840301" rel="nofollow">10.1109/JPROC.2004.840301</a></span><span class="printonly">. <a href="http://www.fftw.org/fftw-paper-ieee.pdf" class="external free" title="http://www.fftw.org/fftw-paper-ieee.pdf" rel="nofollow">http://www.fftw.org/fftw-paper-ieee.pdf</a></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=The+design+and+implementation+of+FFTW3&amp;rft.jtitle=Proceedings+of+the+IEEE&amp;rft.aulast=Frigo%2C+M.&amp;rft.au=Frigo%2C+M.&amp;rft.au=Johnson%2C+S.+G.&amp;rft.date=February+2005&amp;rft.volume=93&amp;rft.issue=2&amp;rft.pages=216%E2%80%93231&amp;rft_id=info:doi/10.1109%2FJPROC.2004.840301&amp;rft_id=http%3A%2F%2Fwww.fftw.org%2Ffftw-paper-ieee.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Divide_and_conquer_algorithm"><span style="display: none;">&#160;</span></span></li>
</ol>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Divide_and_conquer_algorithm&amp;action=edit&amp;section=16" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<ul>
<li><a href="http://www.datastructures.info/the-divide-and-conquer-algorithmmethod/" class="external text" title="http://www.datastructures.info/the-divide-and-conquer-algorithmmethod/" rel="nofollow">Code example of Divide and Conquer, fast power calculation, in C++</a></li>
</ul>


<!-- 
NewPP limit report
Preprocessor node count: 1705/1000000
Post-expand include size: 9712/2048000 bytes
Template argument size: 2820/2048000 bytes
Expensive parser function count: 0/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:201154-0!1!0!default!!en!2 and timestamp 20090403233316 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Divide_and_conquer_algorithm">http://en.wikipedia.org/wiki/Divide_and_conquer_algorithm</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Algorithms" title="Category:Algorithms">Algorithms</a></span> | <span dir='ltr'><a href="/wiki/Category:Operations_research" title="Category:Operations research">Operations research</a></span> | <span dir='ltr'><a href="/wiki/Category:Optimization_algorithms" title="Category:Optimization algorithms">Optimization algorithms</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Divide_and_conquer_algorithm" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Divide_and_conquer_algorithm" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Divide_and_conquer_algorithm&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Divide_and_conquer_algorithm&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Divide_and_conquer_algorithm" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Divide_and_conquer_algorithm" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Divide_and_conquer_algorithm" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Divide_and_conquer_algorithm&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Divide_and_conquer_algorithm&amp;oldid=276902296" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Divide_and_conquer_algorithm&amp;id=276902296">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-cs"><a href="http://cs.wikipedia.org/wiki/Rozd%C4%9Bl_a_panuj_(algoritmus)">Česky</a></li>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/Teile_und_herrsche_(Informatik)">Deutsch</a></li>
				<li class="interwiki-el"><a href="http://el.wikipedia.org/wiki/%CE%94%CE%B9%CE%B1%CE%AF%CF%81%CE%B5%CE%B9_%CE%BA%CE%B1%CE%B9_%CE%B2%CE%B1%CF%83%CE%AF%CE%BB%CE%B5%CF%85%CE%B5_(%CF%85%CF%80%CE%BF%CE%BB%CE%BF%CE%B3%CE%B9%CF%83%CF%84%CE%AD%CF%82)">Ελληνικά</a></li>
				<li class="interwiki-es"><a href="http://es.wikipedia.org/wiki/Algoritmo_divide_y_vencer%C3%A1s">Español</a></li>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Diviser_pour_r%C3%A9gner_(informatique)">Français</a></li>
				<li class="interwiki-gl"><a href="http://gl.wikipedia.org/wiki/Agoritmo_divide_e_vencer%C3%A1s">Galego</a></li>
				<li class="interwiki-ko"><a href="http://ko.wikipedia.org/wiki/%EB%B6%84%ED%95%A0_%EC%A0%95%EB%B3%B5_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98">한국어</a></li>
				<li class="interwiki-is"><a href="http://is.wikipedia.org/wiki/Deili-_og_drottnunarreiknirit">Íslenska</a></li>
				<li class="interwiki-it"><a href="http://it.wikipedia.org/wiki/Divide_et_impera_(informatica)">Italiano</a></li>
				<li class="interwiki-he"><a href="http://he.wikipedia.org/wiki/%D7%90%D7%9C%D7%92%D7%95%D7%A8%D7%99%D7%AA%D7%9D_%D7%94%D7%A4%D7%A8%D7%93_%D7%95%D7%9E%D7%A9%D7%95%D7%9C">עברית</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/%E5%88%86%E5%89%B2%E7%B5%B1%E6%B2%BB%E6%B3%95">日本語</a></li>
				<li class="interwiki-pl"><a href="http://pl.wikipedia.org/wiki/Dziel_i_zwyci%C4%99%C5%BCaj">Polski</a></li>
				<li class="interwiki-pt"><a href="http://pt.wikipedia.org/wiki/Divis%C3%A3o_e_conquista">Português</a></li>
				<li class="interwiki-ro"><a href="http://ro.wikipedia.org/wiki/Divide_et_impera_(informatic%C4%83)">Română</a></li>
				<li class="interwiki-ru"><a href="http://ru.wikipedia.org/wiki/%D0%A0%D0%B0%D0%B7%D0%B4%D0%B5%D0%BB%D1%8F%D0%B9_%D0%B8_%D0%B2%D0%BB%D0%B0%D1%81%D1%82%D0%B2%D1%83%D0%B9_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)">Русский</a></li>
				<li class="interwiki-sl"><a href="http://sl.wikipedia.org/wiki/Deli_in_vladaj_(ra%C4%8Dunalni%C5%A1tvo)">Slovenščina</a></li>
				<li class="interwiki-sr"><a href="http://sr.wikipedia.org/wiki/%D0%9F%D0%BE%D0%B4%D0%B5%D0%BB%D0%B8_%D0%BF%D0%B0_%D0%B2%D0%BB%D0%B0%D0%B4%D0%B0%D1%98_(%D0%B8%D0%BD%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%82%D0%B8%D0%BA%D0%B0)">Српски / Srpski</a></li>
				<li class="interwiki-zh"><a href="http://zh.wikipedia.org/wiki/%E5%88%86%E6%B2%BB%E6%B3%95">中文</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 13 March 2009, at 03:39.</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv185 in 0.051 secs. --></body></html>
