<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Evaluation strategy,Wikipedia articles needing clarification from February 2009,Aliasing (computing),Barbara Liskov,Benjamin C. Pierce,Beta normal form,C++,CLU programming language,C (programming language),Church encoding,Comparison of programming languages" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Evaluation_strategy&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Evaluation_strategy&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Evaluation strategy - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Evaluation_strategy";
		var wgTitle = "Evaluation strategy";
		var wgAction = "view";
		var wgArticleId = "2977119";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281653094;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Evaluation_strategy skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Evaluation strategy</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<table class="metadata plainlinks ambox ambox-style" style="">
<tr>
<td class="mbox-image">
<div style="width: 52px;"><a href="/wiki/File:Ambox_style.png" class="image" title="Ambox style.png"><img alt="" src="http://upload.wikimedia.org/wikipedia/en/d/d6/Ambox_style.png" width="40" height="40" border="0" /></a></div>
</td>
<td class="mbox-text" style="">This article's <b>citation style may be unclear</b>. The references used may be clearer with a different or consistent style of <a href="/wiki/Wikipedia:Citing_sources" title="Wikipedia:Citing sources">citation</a>, <a href="/wiki/Wikipedia:Footnote" title="Wikipedia:Footnote" class="mw-redirect">footnoting</a>, or <a href="/wiki/Wikipedia:External_links" title="Wikipedia:External links">external linking</a>.</td>
</tr>
</table>
<table class="infobox" style="text-align: center; font-size: 90%;">
<tr style="background:#CCCCFF;">
<th><a href="/wiki/Computer_programming" title="Computer programming">Programming</a><br />
evaluation</th>
</tr>
<tr style="background:F9F9F9;">
<td>
<p><a href="/wiki/Eager_evaluation" title="Eager evaluation">Eager</a><br />
<a href="/wiki/Lazy_evaluation" title="Lazy evaluation">Lazy</a><br />
<a href="/wiki/Partial_evaluation" title="Partial evaluation">Partial</a><br />
<a href="/wiki/Remote_evaluation" title="Remote evaluation">Remote</a><br />
<a href="/wiki/Short-circuit_evaluation" title="Short-circuit evaluation">Short-circuit</a><br />
<strong class="selflink">Strategy</strong></p>
</td>
</tr>
</table>
<p>In <a href="/wiki/Computer_science" title="Computer science">computer science</a>, an <b>evaluation strategy</b> is a set of (usually deterministic) rules for determining the evaluation of <a href="/wiki/Expression_(programming)" title="Expression (programming)">expressions</a> in a <a href="/wiki/Programming_language" title="Programming language">programming language</a>. Emphasis is typically placed on <a href="/wiki/Subprogram" title="Subprogram" class="mw-redirect">functions</a> or operators — an evaluation strategy defines when and in what order the arguments to a function are evaluated, when they are substituted into the function, and what form that substitution takes. The <a href="/wiki/Lambda_calculus" title="Lambda calculus">lambda calculus</a>, a <a href="/wiki/Formal_system" title="Formal system">formal system</a> for the study of functions, has often been used to model evaluation strategies, where they are usually called <b>reduction strategies</b>. Evaluation strategies divide into two basic groups, strict and non-strict, based on how arguments to a function are handled. A language may combine several evaluation strategies; for example, <a href="/wiki/C%2B%2B" title="C++">C++</a> combines call-by-value with call-by-reference. Most languages that are predominantly <a href="#Strict_evaluation" title="">strict</a> use some form of <a href="#Non-strict_evaluation" title="">non-strict evaluation</a> for boolean expressions and if-statements.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Strict_evaluation"><span class="tocnumber">1</span> <span class="toctext">Strict evaluation</span></a>
<ul>
<li class="toclevel-2"><a href="#Applicative_order"><span class="tocnumber">1.1</span> <span class="toctext">Applicative order</span></a></li>
<li class="toclevel-2"><a href="#Call_by_value"><span class="tocnumber">1.2</span> <span class="toctext">Call by value</span></a></li>
<li class="toclevel-2"><a href="#Call_by_reference"><span class="tocnumber">1.3</span> <span class="toctext">Call by reference</span></a></li>
<li class="toclevel-2"><a href="#Call_by_sharing"><span class="tocnumber">1.4</span> <span class="toctext">Call by sharing</span></a></li>
<li class="toclevel-2"><a href="#Call_by_copy-restore"><span class="tocnumber">1.5</span> <span class="toctext">Call by copy-restore</span></a></li>
<li class="toclevel-2"><a href="#Partial_evaluation"><span class="tocnumber">1.6</span> <span class="toctext">Partial evaluation</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Non-strict_evaluation"><span class="tocnumber">2</span> <span class="toctext">Non-strict evaluation</span></a>
<ul>
<li class="toclevel-2"><a href="#Normal_order"><span class="tocnumber">2.1</span> <span class="toctext">Normal order</span></a></li>
<li class="toclevel-2"><a href="#Call_by_name"><span class="tocnumber">2.2</span> <span class="toctext">Call by name</span></a></li>
<li class="toclevel-2"><a href="#Call_by_need"><span class="tocnumber">2.3</span> <span class="toctext">Call by need</span></a></li>
<li class="toclevel-2"><a href="#Call_by_macro_expansion"><span class="tocnumber">2.4</span> <span class="toctext">Call by macro expansion</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Nondeterministic_strategies"><span class="tocnumber">3</span> <span class="toctext">Nondeterministic strategies</span></a>
<ul>
<li class="toclevel-2"><a href="#Full_.CE.B2-reduction"><span class="tocnumber">3.1</span> <span class="toctext">Full β-reduction</span></a></li>
<li class="toclevel-2"><a href="#Call_by_future"><span class="tocnumber">3.2</span> <span class="toctext">Call by future</span></a></li>
<li class="toclevel-2"><a href="#Optimistic_evaluation"><span class="tocnumber">3.3</span> <span class="toctext">Optimistic evaluation</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">4</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">5</span> <span class="toctext">References</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Strict_evaluation" id="Strict_evaluation"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Evaluation_strategy&amp;action=edit&amp;section=1" title="Edit section: Strict evaluation">edit</a>]</span> <span class="mw-headline">Strict evaluation</span></h2>
<div class="rellink noprint relarticle mainarticle">Main article: <a href="/wiki/Strict_evaluation" title="Strict evaluation" class="mw-redirect">strict evaluation</a></div>
<p>In <i>strict evaluation,</i> the arguments to a <a href="/wiki/Subroutine" title="Subroutine">function</a> are always evaluated completely before the function is applied.</p>
<p>Under <a href="/wiki/Church_encoding" title="Church encoding">Church encoding</a>, <a href="/wiki/Eager_evaluation" title="Eager evaluation">eager evaluation</a> of <a href="/wiki/Operator_(programming)" title="Operator (programming)">operators</a> maps to strict evaluation of functions; for this reason, strict evaluation is sometimes called "eager". Most existing programming languages use strict evaluation for functions.</p>
<p><a name="Applicative_order" id="Applicative_order"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Evaluation_strategy&amp;action=edit&amp;section=2" title="Edit section: Applicative order">edit</a>]</span> <span class="mw-headline">Applicative order</span></h3>
<p><i>Applicative order</i> (or <i>leftmost innermost</i>) evaluation refers to an evaluation strategy in which the arguments of a function are evaluated from left to right in a <a href="/wiki/Post-order_traversal" title="Post-order traversal" class="mw-redirect">post-order traversal</a> of reducible expressions (<a href="http://en.wiktionary.org/wiki/redex" class="extiw" title="wiktionary:redex">redexes</a>). Unlike call-by-value, applicative order evaluation reduces terms within a function body as much as possible before the function is applied.</p>
<p><a name="Call_by_value" id="Call_by_value"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Evaluation_strategy&amp;action=edit&amp;section=3" title="Edit section: Call by value">edit</a>]</span> <span class="mw-headline">Call by value</span></h3>
<p><span id="Call-by-value"></span><span id="Call_by_value"></span></p>
<p><i>Call-by-value</i> evaluation is the most common evaluation strategy, used in languages as different as <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a> and <a href="/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme</a>. In call-by-value, the argument expression is evaluated, and the resulting value is bound to the corresponding variable in the function (frequently by copying the value into a new memory region). If the function or procedure is able to assign values to its parameters, only its local copy is assigned — that is, anything passed into a function call is unchanged in the caller's scope when the function returns.</p>
<p>Call-by-value is not a single evaluation strategy, but rather the family of evaluation strategies in which a function's argument is evaluated before being passed to the function. While many programming languages (such as Eiffel and Java) that use call-by-value evaluate function arguments left-to-right, some evaluate functions and their arguments right-to-left, and others (such as Scheme, OCaml and C) leave the order unspecified (though they generally require implementations to be consistent).</p>
<p>The term "call-by-value" is sometimes problematic, as the value implied is not the value of the variable as understood by the ordinary meaning of value, but an implementation-specific reference to the value. The term "call-by-value where the value is a reference" is common (but should not be understood as being call-by-reference). Thus the behaviour of call-by-value Java or Visual Basic and call-by-value C or Pascal are significantly different: in C or Pascal, calling a function with a large structure as an argument will cause the entire structure to be copied, potentially causing serious performance degradation, and mutations to the structure are invisible to the caller. However, in Java or Visual Basic only the reference to the structure is copied, which is fast, and mutations to the structure are visible to the caller. (See also call-by-sharing....)</p>
<p><a name="Call_by_reference" id="Call_by_reference"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Evaluation_strategy&amp;action=edit&amp;section=4" title="Edit section: Call by reference">edit</a>]</span> <span class="mw-headline">Call by reference</span></h3>
<p><span id="Call-by-reference"></span><span id="Call_by_reference"></span></p>
<p>In <i>call-by-reference</i> evaluation, a function receives an implicit <a href="/wiki/Reference_(computer_science)" title="Reference (computer science)">reference</a> to the argument, rather than a copy of its value. This typically means that the function can modify the argument, what will be seen by its caller. Call-by-reference therefore has the advantage of greater time- and space-efficiency (since arguments do not need to be copied), as well as the potential for greater communication between a function and its caller (since the function can return information using its reference arguments), but the disadvantage that a function must often take special steps to "protect" values it wishes to pass to other functions.</p>
<p>Many languages support call-by-reference in some form or another, but comparatively few use it as a default; <a href="/wiki/Perl" title="Perl">Perl</a> and <a href="/wiki/Visual_Basic" title="Visual Basic">Visual Basic</a> are two that do, though Visual Basic also offers a special syntax for call-by-value parameters. A few languages, such as <a href="/wiki/C%2B%2B" title="C++">C++</a> and <a href="/wiki/REALbasic" title="REALbasic">REALbasic</a>, default to call-by-value, but offer special syntax for call-by-reference parameters. C++ additionally offers call-by-reference-to-<a href="/wiki/Const-correctness" title="Const-correctness">const</a>. In <a href="/wiki/Purely_functional" title="Purely functional">purely functional</a> languages there is typically no semantic difference between the two strategies (since their data structures are immutable, so there is no possibility for a function to modify any of its arguments), so they are typically described as call-by-value even though implementations frequently use call-by-reference internally for the efficiency benefits.</p>
<p>Even among languages that don't exactly support call-by-reference, many, including <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a> and <a href="/wiki/ML_(programming_language)" title="ML (programming language)">ML</a>, support explicit <a href="/wiki/Reference_(computer_science)" title="Reference (computer science)">references</a> (objects that refer to other objects), such as <a href="/wiki/Pointer_(computing)" title="Pointer (computing)">pointers</a> (objects representing the memory addresses of other objects), and these can be used to effect or simulate call-by-reference (but with the complication that a function's caller must explicitly generate the reference to supply as an argument). Some languages straddle both worlds; for example, <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a> is a call-by-value language, but since the results of most Java expressions are references to anonymous objects, it frequently displays call-by-reference semantics without the need for any explicit reference syntax.</p>
<p><a name="Call_by_sharing" id="Call_by_sharing"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Evaluation_strategy&amp;action=edit&amp;section=5" title="Edit section: Call by sharing">edit</a>]</span> <span class="mw-headline">Call by sharing</span></h3>
<p>Also known as "call by object" or "call by object-sharing" is an evaluation strategy first named by <a href="/wiki/Barbara_Liskov" title="Barbara Liskov">Barbara Liskov</a> et al for the language <a href="/wiki/CLU_programming_language" title="CLU programming language" class="mw-redirect">CLU</a> in 1974<sup id="cite_ref-0" class="reference"><a href="#cite_note-0" title=""><span>[</span>1<span>]</span></a></sup>. It is used by languages such as <a href="/wiki/Python_(programming_language)" title="Python (programming language)">Python</a><sup id="cite_ref-1" class="reference"><a href="#cite_note-1" title=""><span>[</span>2<span>]</span></a></sup> and <a href="/wiki/Iota_and_Jot" title="Iota and Jot">Iota</a> and (as argued by some<sup id="cite_ref-2" class="reference"><a href="#cite_note-2" title=""><span>[</span>3<span>]</span></a></sup>) <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a>, although the term is not in common use by the Java community. Call-by-sharing implies that values in the language are based on objects rather than primitive types.</p>
<p>The semantics of call-by-sharing differ from call-by-reference in that assignments to function arguments within the function aren't visible to the caller (unlike by-reference sematics). However since the function has access to the same object as the caller (no copy is made), mutations to those objects within the function are visible to the caller, which differs from call-by-value semantics.</p>
<p>Although this term has widespread usage in the Python community, identical semantics in other languages such as Java and Visual Basic are often described as call-by-value, where the value is implied to be a reference to the object.</p>
<p><a name="Call_by_copy-restore" id="Call_by_copy-restore"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Evaluation_strategy&amp;action=edit&amp;section=6" title="Edit section: Call by copy-restore">edit</a>]</span> <span class="mw-headline">Call by copy-restore</span></h3>
<p><i>Call-by-copy-restore</i>, <i>call-by-value-result</i> or <i>call-by-value-return</i> (as termed in the <a href="/wiki/Fortran" title="Fortran">Fortran</a> community) is a special case of call-by-reference where the provided reference is unique to the caller. If a parameter to a function call is a reference that might be accessible by another thread of execution, its contents are copied to a new reference that is not; when the function call returns, the updated contents of this new reference are copied back to the original reference ("restored").</p>
<p>The semantics of call-by-copy-restore also differ from those of call-by-reference where two or more function arguments <a href="/wiki/Aliasing_(computing)" title="Aliasing (computing)">alias</a> one another; that is, point to the same variable in the caller's environment. Under call-by-reference, writing to one will affect the other; call-by-copy-restore avoids this by giving the function distinct copies, but leaves the result in the caller's environment <a href="/wiki/Undefined_behaviour" title="Undefined behaviour" class="mw-redirect">undefined</a> (depending on which of the aliased arguments is copied back first).</p>
<p>When the reference is passed to the callee uninitialized, this evaluation strategy may be called <i>call-by-result</i>.</p>
<p><a name="Partial_evaluation" id="Partial_evaluation"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Evaluation_strategy&amp;action=edit&amp;section=7" title="Edit section: Partial evaluation">edit</a>]</span> <span class="mw-headline">Partial evaluation</span></h3>
<div class="rellink noprint relarticle mainarticle">Main article: <a href="/wiki/Partial_evaluation" title="Partial evaluation">partial evaluation</a></div>
<p>In <i>partial evaluation</i>, evaluation may continue into the body of a function that has not been applied. Any sub-expressions that do not contain unbound variables are evaluated, and function applications whose argument values are known may be reduced. In the presence of side-effects, complete partial evaluation may produce unintended results; for this reason, systems that support partial evaluation tend to do so only for "pure" expressions (expressions without side-effects) within functions.</p>
<p><a name="Non-strict_evaluation" id="Non-strict_evaluation"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Evaluation_strategy&amp;action=edit&amp;section=8" title="Edit section: Non-strict evaluation">edit</a>]</span> <span class="mw-headline">Non-strict evaluation</span></h2>
<p>In <i>non-strict evaluation,</i> arguments to a function are not evaluated unless they are actually used in the evaluation of the function body.</p>
<p>Under Church encoding, <a href="/wiki/Lazy_evaluation" title="Lazy evaluation">lazy evaluation</a> of operators maps to non-strict evaluation of functions; for this reason, non-strict evaluation is often referred to as "lazy". Boolean expressions in many languages use lazy evaluation; in this context it is often called <a href="/wiki/Short-circuit_evaluation" title="Short-circuit evaluation">short circuiting</a>. Conditional expressions also usually use lazy evaluation, albeit for different reasons.</p>
<p><a name="Normal_order" id="Normal_order"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Evaluation_strategy&amp;action=edit&amp;section=9" title="Edit section: Normal order">edit</a>]</span> <span class="mw-headline">Normal order</span></h3>
<p><i>Normal-order</i> (or <i>leftmost outermost</i>) evaluation is the evaluation strategy where the outermost redex is always reduced, applying functions before evaluating function arguments. It differs from call-by-name in that call-by-name does not evaluate inside the body of an unapplied function<sup class="noprint Inline-Template"><span title="The text in the vicinity of this tag needs clarification or removal of jargon&#160;from February 2009" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Please_clarify" title="Wikipedia:Please clarify">clarification needed</a></i>]</span></sup>.</p>
<p><a name="Call_by_name" id="Call_by_name"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Evaluation_strategy&amp;action=edit&amp;section=10" title="Edit section: Call by name">edit</a>]</span> <span class="mw-headline">Call by name</span></h3>
<p>In <i>call-by-name</i> evaluation, the arguments to functions are not evaluated at all — rather, function arguments are substituted directly into the function body using <a href="/w/index.php?title=Capture-avoiding_substitution&amp;action=edit&amp;redlink=1" class="new" title="Capture-avoiding substitution (page does not exist)">capture-avoiding substitution</a>. If the argument is not used in the evaluation of the function, it is never evaluated; if the argument is used several times, it is re-evaluated each time. (See <a href="/wiki/Jensen%27s_Device" title="Jensen's Device">Jensen's Device</a>.)</p>
<p>Call-by-name evaluation can be preferable over call-by-value evaluation because call-by-name evaluation always yields a value when a value exists, whereas call-by-value may not terminate if the function's argument is a non-terminating computation that is not needed to evaluate the function. Opponents of call-by-name claim that it is significantly slower when the function argument is used, and that in practice this is almost always the case as a mechanism such as a <a href="/wiki/Thunk" title="Thunk">thunk</a> is needed.</p>
<p><a name="Call_by_need" id="Call_by_need"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Evaluation_strategy&amp;action=edit&amp;section=11" title="Edit section: Call by need">edit</a>]</span> <span class="mw-headline">Call by need</span></h3>
<p><i>Call-by-need</i> is a <a href="/wiki/Memoization" title="Memoization">memoized</a> version of call-by-name where, <i>if the function argument is evaluated,</i> that value is stored for subsequent uses. In a "pure" (effect-free) setting, this produces the same results as call-by-name; when the function argument is used two or more times, call-by-need is almost always faster.</p>
<p>Because evaluation of expressions may happen arbitrarily far into a computation, languages using call-by-need generally do not support computational effects (such as <a href="/wiki/Mutable_object" title="Mutable object" class="mw-redirect">mutation</a>) except through the use of <a href="/wiki/Monads_in_functional_programming" title="Monads in functional programming" class="mw-redirect">monads</a> and <a href="/wiki/Uniqueness_type" title="Uniqueness type">uniqueness types</a>. This eliminates any unexpected behavior from variables whose values change prior to their delayed evaluation.</p>
<p>This is a kind of <a href="/wiki/Lazy_evaluation" title="Lazy evaluation">Lazy evaluation</a>.</p>
<p><a href="/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell</a> is the most well-known language that uses call-by-need evaluation.</p>
<p><a href="/wiki/R_(programming_language)" title="R (programming language)">R</a> also uses a form of call-by-need.</p>
<p><a name="Call_by_macro_expansion" id="Call_by_macro_expansion"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Evaluation_strategy&amp;action=edit&amp;section=12" title="Edit section: Call by macro expansion">edit</a>]</span> <span class="mw-headline">Call by macro expansion</span></h3>
<p><i>Call-by-macro-expansion</i> is similar to call-by-name, but uses textual substitution rather than capture-avoiding substitution. With uncautious use, macro substitution may result in <a href="/w/index.php?title=Variable_capture&amp;action=edit&amp;redlink=1" class="new" title="Variable capture (page does not exist)">variable capture</a> and lead to undesired behavior. <a href="/wiki/Hygienic_macros" title="Hygienic macros" class="mw-redirect">Hygienic macros</a> avoid this problem by checking for and replacing shadowed variables that are not parameters.</p>
<p><a name="Nondeterministic_strategies" id="Nondeterministic_strategies"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Evaluation_strategy&amp;action=edit&amp;section=13" title="Edit section: Nondeterministic strategies">edit</a>]</span> <span class="mw-headline">Nondeterministic strategies</span></h2>
<p><a name="Full_.CE.B2-reduction" id="Full_.CE.B2-reduction"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Evaluation_strategy&amp;action=edit&amp;section=14" title="Edit section: Full β-reduction">edit</a>]</span> <span class="mw-headline">Full β-reduction</span></h3>
<p>Under <i>full β-reduction,</i> any function application may be reduced (substituting the function's argument into the function using capture-avoiding substitution) at any time. This may be done even within the body of an unapplied function.</p>
<p><a name="Call_by_future" id="Call_by_future"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Evaluation_strategy&amp;action=edit&amp;section=15" title="Edit section: Call by future">edit</a>]</span> <span class="mw-headline">Call by future</span></h3>
<div class="rellink boilerplate seealso">See also: <a href="/wiki/Futures_and_promises" title="Futures and promises">Futures and promises</a></div>
<p><i>Call-by-future</i> (or <i>parallel call-by-name</i>) is like call-by-need, except that the function's argument may be evaluated in parallel with the function body (rather than only if used). The two threads of execution synchronize when the argument is needed in the evaluation of the function body; if the argument is never used, the argument thread may be killed.</p>
<p><a name="Optimistic_evaluation" id="Optimistic_evaluation"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Evaluation_strategy&amp;action=edit&amp;section=16" title="Edit section: Optimistic evaluation">edit</a>]</span> <span class="mw-headline">Optimistic evaluation</span></h3>
<p><i>Optimistic evaluation</i> is another variant of call-by-need in which the function's argument is partially evaluated for some amount of time (which may be adjusted at runtime), after which evaluation is aborted and the function is applied using call-by-need. This approach avoids some of the runtime expense of call-by-need, while still retaining the desired termination characteristics.</p>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Evaluation_strategy&amp;action=edit&amp;section=17" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<ul>
<li><a href="/wiki/Beta_normal_form" title="Beta normal form">Beta normal form</a></li>
<li><a href="/wiki/Comparison_of_programming_languages" title="Comparison of programming languages">Comparison of programming languages</a></li>
<li><a href="/wiki/Lambda_calculus" title="Lambda calculus">Lambda calculus</a></li>
<li><a href="/wiki/Parameter_(computer_science)" title="Parameter (computer science)">Parameter (computer science)</a></li>
</ul>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Evaluation_strategy&amp;action=edit&amp;section=18" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<div class="references-small">
<ol class="references">
<li id="cite_note-0"><b><a href="#cite_ref-0" title="">^</a></b> <a href="http://www.lcs.mit.edu/publications/pubs/pdf/MIT-LCS-TR-225.pdf" class="external free" title="http://www.lcs.mit.edu/publications/pubs/pdf/MIT-LCS-TR-225.pdf" rel="nofollow">http://www.lcs.mit.edu/publications/pubs/pdf/MIT-LCS-TR-225.pdf</a></li>
<li id="cite_note-1"><b><a href="#cite_ref-1" title="">^</a></b> <a href="http://effbot.org/zone/call-by-object.htm" class="external free" title="http://effbot.org/zone/call-by-object.htm" rel="nofollow">http://effbot.org/zone/call-by-object.htm</a></li>
<li id="cite_note-2"><b><a href="#cite_ref-2" title="">^</a></b> <a href="http://www.cs.cornell.edu/courses/cs412/2001sp/iota/iota.html" class="external free" title="http://www.cs.cornell.edu/courses/cs412/2001sp/iota/iota.html" rel="nofollow">http://www.cs.cornell.edu/courses/cs412/2001sp/iota/iota.html</a></li>
</ol>
</div>
<ul>
<li>Harold Abelson and Gerald Jay Sussman. <i><a href="http://mitpress.mit.edu/sicp/full-text/book/book.html" class="external text" title="http://mitpress.mit.edu/sicp/full-text/book/book.html" rel="nofollow">Structure and Interpretation of Computer Programs</a></i>, Second Edition. MIT Press, 1996. <a href="/wiki/Special:BookSources/0262011530" class="internal">ISBN 0-262-01153-0</a>.</li>
<li><a href="/wiki/Henry_Baker_(computer_scientist)" title="Henry Baker (computer scientist)">Henry G. Baker, Jr</a>. "<a href="http://home.pipeline.com/~hbaker1/Futures.html" class="external text" title="http://home.pipeline.com/~hbaker1/Futures.html" rel="nofollow">The Incremental Garbage Collection of Processes</a>", with Carl Hewitt, ACM Sigplan Notices 12. August 8, 1977. Pages 55-59.</li>
<li>Clem Baker-Finch, Clem, David King, Jon Hall, and Phil Trinder. "<a href="http://cs.anu.edu.au/people/Clem.Baker-Finch/Research/par-cbn-tr/" class="external text" title="http://cs.anu.edu.au/people/Clem.Baker-Finch/Research/par-cbn-tr/" rel="nofollow">An Operational Semantics for Parallel Call-by-Need</a>", Research report 99/1. Faculty of Mathematics &amp; Computing, The Open University, 1999.</li>
<li>Robert Ennals and Simon Peyton Jones. "<a href="http://research.microsoft.com/Users/simonpj/Papers/optimistic/" class="external text" title="http://research.microsoft.com/Users/simonpj/Papers/optimistic/" rel="nofollow">Optimistic Evaluation: a fast evaluation strategy for non-strict programs</a>", in <i>ICFP'03</i>. ACM Press, 2003.</li>
<li>Bertram Ludäscher. <a href="http://users.sdsc.edu/~ludaesch/CSE130/ln5.html" class="external text" title="http://users.sdsc.edu/~ludaesch/CSE130/ln5.html" rel="nofollow">CSE 130 lecture notes</a>. January 24, 2001.</li>
<li><cite style="font-style:normal" class="book" id="CITEREFPierce2002"><a href="/wiki/Benjamin_C._Pierce" title="Benjamin C. Pierce">Pierce, Benjamin C.</a> (2002). <i><a href="/wiki/Types_and_Programming_Languages" title="Types and Programming Languages">Types and Programming Languages</a></i>. <a href="/wiki/MIT_Press" title="MIT Press">MIT Press</a>. <a href="/wiki/Special:BookSources/0262162091" class="internal">ISBN 0-262-16209-1</a>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=%5B%5BTypes+and+Programming+Languages%5D%5D&amp;rft.aulast=Pierce&amp;rft.aufirst=Benjamin+C.&amp;rft.au=Pierce%2C+Benjamin+C.&amp;rft.date=2002&amp;rft.pub=%5B%5BMIT+Press%5D%5D&amp;rft.isbn=0-262-16209-1&amp;rfr_id=info:sid/en.wikipedia.org:Evaluation_strategy"><span style="display: none;">&#160;</span></span></li>
<li>P. Sestoft. "<a href="http://www.dina.kvl.dk/~sestoft/papers/sestoft-lamreduce.pdf" class="external text" title="http://www.dina.kvl.dk/~sestoft/papers/sestoft-lamreduce.pdf" rel="nofollow">Demonstrating Lambda Calculus Reduction</a>", in T. Mogensen, D. Schmidt, I. H. Sudburough (editors): The Essence of Computation: Complexity, Analysis, Transformation. Essays Dedicated to Neil D. Jones. Lecture Notes in Computer Science 2566. Springer-Verlag, 2002. Pages 420-435. <a href="/wiki/Special:BookSources/3540003266" class="internal">ISBN 3-540-00326-6</a></li>
</ul>


<!-- 
NewPP limit report
Preprocessor node count: 913/1000000
Post-expand include size: 7610/2048000 bytes
Template argument size: 2031/2048000 bytes
Expensive parser function count: 1/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:2977119-0!1!0!default!!en!2 and timestamp 20090404064241 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Evaluation_strategy">http://en.wikipedia.org/wiki/Evaluation_strategy</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Programming_language_topics" title="Category:Programming language topics">Programming language topics</a></span> | <span dir='ltr'><a href="/wiki/Category:Programming_evaluation" title="Category:Programming evaluation">Programming evaluation</a></span></div><div id="mw-hidden-catlinks" class="mw-hidden-cats-hidden">Hidden categories:&#32;<span dir='ltr'><a href="/wiki/Category:Wikipedia_references_cleanup" title="Category:Wikipedia references cleanup">Wikipedia references cleanup</a></span> | <span dir='ltr'><a href="/wiki/Category:All_pages_needing_cleanup" title="Category:All pages needing cleanup">All pages needing cleanup</a></span> | <span dir='ltr'><a href="/wiki/Category:Wikipedia_articles_needing_clarification_from_February_2009" title="Category:Wikipedia articles needing clarification from February 2009">Wikipedia articles needing clarification from February 2009</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Evaluation_strategy" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Evaluation_strategy" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Evaluation_strategy&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Evaluation_strategy&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Evaluation_strategy" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Evaluation_strategy" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Evaluation_strategy" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Evaluation_strategy&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Evaluation_strategy&amp;oldid=281653094" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Evaluation_strategy&amp;id=281653094">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/%E8%A9%95%E4%BE%A1%E6%88%A6%E7%95%A5">日本語</a></li>
				<li class="interwiki-pt"><a href="http://pt.wikipedia.org/wiki/Estrat%C3%A9gia_de_avalia%C3%A7%C3%A3o">Português</a></li>
				<li class="interwiki-ru"><a href="http://ru.wikipedia.org/wiki/%D0%9F%D0%B5%D1%80%D0%B5%D0%B4%D0%B0%D1%87%D0%B0_%D0%BF%D0%B0%D1%80%D0%B0%D0%BC%D0%B5%D1%82%D1%80%D0%B0_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)">Русский</a></li>
				<li class="interwiki-sk"><a href="http://sk.wikipedia.org/wiki/Vyhodnocovacia_strat%C3%A9gia">Slovenčina</a></li>
				<li class="interwiki-zh"><a href="http://zh.wikipedia.org/wiki/%E6%B1%82%E5%80%BC%E7%AD%96%E7%95%A5">中文</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 4 April 2009, at 06:42.</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv220 in 0.042 secs. --></body></html>
