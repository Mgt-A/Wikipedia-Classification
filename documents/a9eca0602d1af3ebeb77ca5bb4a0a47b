<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Bloom filter,Articles with unsourced statements since March 2009,Algorithm,Andrei Broder,ArXiv,Arithmetic overflow,Array,Associative array,Bernard Chazelle,BigTable,Bit array" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Bloom_filter&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Bloom_filter&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Bloom filter - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Bloom_filter";
		var wgTitle = "Bloom filter";
		var wgAction = "view";
		var wgArticleId = "602211";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 282194888;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Bloom_filter skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Bloom filter</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<div class="dablink">Not to be confused with <a href="/wiki/Bloom_(shader_effect)" title="Bloom (shader effect)">Bloom shader effect</a>.</div>
<p>The <b>Bloom filter</b>, conceived by Burton H. Bloom in 1970, is a space-efficient <a href="/wiki/Probabilistic" title="Probabilistic" class="mw-redirect">probabilistic</a> <a href="/wiki/Data_structure" title="Data structure">data structure</a> that is used to test whether an <a href="/wiki/Element_(mathematics)" title="Element (mathematics)">element</a> is a member of a <a href="/wiki/Set_(computer_science)" title="Set (computer science)">set</a>. <a href="/wiki/Type_I_and_type_II_errors" title="Type I and type II errors">False positives</a> are possible, but <a href="/wiki/Type_I_and_type_II_errors" title="Type I and type II errors">false negatives</a> are not. Elements can be added to the set, but not removed (though this can be addressed with a counting filter). The more elements that are added to the set, the larger the probability of false positives.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Algorithm_description"><span class="tocnumber">1</span> <span class="toctext">Algorithm description</span></a></li>
<li class="toclevel-1"><a href="#Space_and_time_advantages"><span class="tocnumber">2</span> <span class="toctext">Space and time advantages</span></a></li>
<li class="toclevel-1"><a href="#Probability_of_false_positives"><span class="tocnumber">3</span> <span class="toctext">Probability of false positives</span></a></li>
<li class="toclevel-1"><a href="#Interesting_properties"><span class="tocnumber">4</span> <span class="toctext">Interesting properties</span></a></li>
<li class="toclevel-1"><a href="#Example"><span class="tocnumber">5</span> <span class="toctext">Example</span></a></li>
<li class="toclevel-1"><a href="#Alternatives_to_Bloom_filters"><span class="tocnumber">6</span> <span class="toctext">Alternatives to Bloom filters</span></a></li>
<li class="toclevel-1"><a href="#Extensions_and_applications"><span class="tocnumber">7</span> <span class="toctext">Extensions and applications</span></a>
<ul>
<li class="toclevel-2"><a href="#Counting_filters"><span class="tocnumber">7.1</span> <span class="toctext">Counting filters</span></a></li>
<li class="toclevel-2"><a href="#Data_synchronization"><span class="tocnumber">7.2</span> <span class="toctext">Data synchronization</span></a></li>
<li class="toclevel-2"><a href="#Bloomier_filters"><span class="tocnumber">7.3</span> <span class="toctext">Bloomier filters</span></a></li>
<li class="toclevel-2"><a href="#Compact_approximators"><span class="tocnumber">7.4</span> <span class="toctext">Compact approximators</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">8</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">9</span> <span class="toctext">External links</span></a>
<ul>
<li class="toclevel-2"><a href="#Implementations"><span class="tocnumber">9.1</span> <span class="toctext">Implementations</span></a></li>
</ul>
</li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Algorithm_description" id="Algorithm_description"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Bloom_filter&amp;action=edit&amp;section=1" title="Edit section: Algorithm description">edit</a>]</span> <span class="mw-headline">Algorithm description</span></h2>
<div class="thumb tright">
<div class="thumbinner" style="width:362px;"><a href="/wiki/File:Bloom_filter.svg" class="image" title="An example of a Bloom filter, representing the set {x, y, z}. The colored arrows show the positions in the bit array that each set element is mapped to. The element w is not in the set {x, y, z}, because it hashes to one bit-array position containing 0. For this figure, m=18 and k=3."><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/a/ac/Bloom_filter.svg/360px-Bloom_filter.svg.png" width="360" height="129" border="0" class="thumbimage" /></a>
<div class="thumbcaption">
<div class="magnify"><a href="/wiki/File:Bloom_filter.svg" class="internal" title="Enlarge"><img src="/skins-1.5/common/images/magnify-clip.png" width="15" height="11" alt="" /></a></div>
An example of a Bloom filter, representing the set {<i>x</i>, <i>y</i>, <i>z</i>}. The colored arrows show the positions in the bit array that each set element is mapped to. The element <i>w</i> is not in the set {x, y, z}, because it hashes to one bit-array position containing 0. For this figure, m=18 and k=3.</div>
</div>
</div>
<p>An <b>empty Bloom filter</b> is a <a href="/wiki/Bit_array" title="Bit array">bit array</a> of <i>m</i> bits, all set to 0. There must also be <i>k</i> different <a href="/wiki/Hash_function" title="Hash function">hash functions</a> defined, each of which <a href="/wiki/Map_(mathematics)" title="Map (mathematics)">maps</a> or hashes some set element to one of the <i>m</i> array positions with a uniform random distribution.</p>
<p>To <b>add</b> an element, feed it to each of the <i>k</i> hash functions to get <i>k</i> array positions. Set the bits at all these positions to 1.</p>
<p>To <b>query</b> for an element (test whether it is in the set), feed it to each of the <i>k</i> hash functions to get <i>k</i> array positions. If any of the bits at these positions are 0, the element is not in the set – if it were, then all the bits would have been set to 1 when it was inserted. If all are 1, then either the element is in the set, or the bits have been set to 1 during the insertion of other elements.</p>
<p>The requirement of designing <i>k</i> different independent hash functions can be prohibitive for large <i>k</i>. For a good <a href="/wiki/Hash_function" title="Hash function">hash function</a> with a wide output, there should be little if any correlation between different bit-fields of such a hash, so this type of hash can be used to generate multiple "different" hash functions by slicing its output into multiple bit fields. Alternatively, one can pass <i>k</i> different initial values (such as 0, 1, ..., <i>k</i>-1) to a hash function that takes an initial value; or add (or append) these values to the key. For larger <i>m</i> and/or <i>k</i>, independence among the hash functions can be relaxed with negligible increase in false positive rate (<a href="#CITEREFDillingerManolios2004a" title="">Dillinger &amp; Manolios (2004a)</a>, <a href="#CITEREFKirschMitzenmacher2006" title="">Kirsch &amp; Mitzenmacher (2006)</a>). Specifically, <a href="#CITEREFDillingerManolios2004b" title="">Dillinger &amp; Manolios (2004b)</a> show the effectiveness of using <a href="/w/index.php?title=Enhanced_double_hashing&amp;action=edit&amp;redlink=1" class="new" title="Enhanced double hashing (page does not exist)">enhanced double hashing</a> or <a href="/w/index.php?title=Triple_hashing&amp;action=edit&amp;redlink=1" class="new" title="Triple hashing (page does not exist)">triple hashing</a>, variants of <a href="/wiki/Double_hashing" title="Double hashing">double hashing</a>, to derive the <i>k</i> indices using simple arithmetic on two or three indices computed with independent hash functions.</p>
<p>Unfortunately, removing an element from this simple Bloom filter is impossible. The element maps to <i>k</i> bits, and although setting any one of these <i>k</i> bits to zero suffices to remove it, this has the side effect of removing any other elements that map onto that bit, and we have no way of determining whether any such elements have been added. Such removal would introduce a possibility for false negatives, which are not allowed.</p>
<p>Removal of an element from a Bloom filter can be simulated by having a second Bloom filter that contains items that have been removed. However, false positives in the second filter become false negatives in the composite filter, which are not permitted. This approach also limits the semantics of removal since re-adding a previously removed item is not possible.</p>
<p>However, it is often the case that all the keys are available but are expensive to enumerate (for example, requiring many disk reads). When the false positive rate gets too high, the filter can be regenerated; this should be a relatively rare event.</p>
<p><a name="Space_and_time_advantages" id="Space_and_time_advantages"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Bloom_filter&amp;action=edit&amp;section=2" title="Edit section: Space and time advantages">edit</a>]</span> <span class="mw-headline">Space and time advantages</span></h2>
<p>While risking false positives, Bloom filters have a strong space advantage over other data structures for representing sets, such as <a href="/wiki/Self-balancing_binary_search_tree" title="Self-balancing binary search tree">self-balancing binary search trees</a>, <a href="/wiki/Trie" title="Trie">tries</a>, <a href="/wiki/Hash_table" title="Hash table">hash tables</a>, or simple <a href="/wiki/Array" title="Array">arrays</a> or <a href="/wiki/Linked_list" title="Linked list">linked lists</a> of the entries. Most of these require storing at least the data items themselves, which can require anywhere from a small number of bits, for small integers, to an arbitrary number of bits, such as for strings (tries are an exception, since they can share storage between elements with equal prefixes). Linked structures incur an additional linear space overhead for pointers. A Bloom filter with 1% error and an optimal value of <i>k</i>, on the other hand, requires only about 9.6 bits per element — regardless of the size of the elements. This advantage comes partly from its compactness, inherited from <a href="/wiki/Array" title="Array">arrays</a>, and partly from its probabilistic nature. If a 1% false positive rate seems too high, each time we add about 4.8 bits per element we decrease it by ten times.</p>
<p>However, if the number of potential values is small and many of them can be in the set, then the Bloom filter is easily surpassed by the deterministic <a href="/wiki/Bit_array" title="Bit array">bit array</a>, which requires only one bit for each potential element. Note also that hash tables gain a space and time advantage if they begin ignoring collisions and only store whether each bucket contains an entry; in this case, they have effectively become Bloom filters with <i>k</i> = 1.</p>
<p>Bloom filters also have the unusual property that the time needed to either add items or to check whether an item is in the set is a fixed constant, O(<i>k</i>), completely independent of the number of items already in the set. No other constant-space set data structure has this property, but the average access time of sparse <a href="/wiki/Hash_table" title="Hash table">hash tables</a> can make them faster in practice than some Bloom filters. In a hardware implementation, however, the Bloom filter shines because its <i>k</i> lookups are independent and can be parallelized.</p>
<p>To understand its space efficiency, it is instructive to compare the general Bloom filter with its special case when <i>k</i> = 1. If <i>k</i> = 1, then in order to keep the false positive rate sufficiently low, a small fraction of bits should be set, which means the array must be very large and contain long runs of zeros. The <a href="/wiki/Information_content" title="Information content" class="mw-redirect">information content</a> of the array relative to its size is low. The generalized Bloom filter (<i>k</i> greater than 1) allows many more bits to be set while still maintaining a low false positive rate; if the parameters (<i>k</i> and <i>m</i>) are chosen well, about half of the bits will be set, and these will be apparently random, minimizing redundancy and maximizing information content.</p>
<p><a name="Probability_of_false_positives" id="Probability_of_false_positives"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Bloom_filter&amp;action=edit&amp;section=3" title="Edit section: Probability of false positives">edit</a>]</span> <span class="mw-headline">Probability of false positives</span></h2>
<div class="thumb tright">
<div class="thumbinner" style="width:362px;"><a href="/wiki/File:Bloom_filter_fp_probability.svg" class="image" title="The false positive probability p as a function of number of elements n in the filter and the filter size m. An optimal number of hash functions k = (m / n)ln2 has been assumed."><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/e/ef/Bloom_filter_fp_probability.svg/360px-Bloom_filter_fp_probability.svg.png" width="360" height="288" border="0" class="thumbimage" /></a>
<div class="thumbcaption">
<div class="magnify"><a href="/wiki/File:Bloom_filter_fp_probability.svg" class="internal" title="Enlarge"><img src="/skins-1.5/common/images/magnify-clip.png" width="15" height="11" alt="" /></a></div>
The false positive probability <span class="texhtml"><i>p</i></span> as a function of number of elements <span class="texhtml"><i>n</i></span> in the filter and the filter size <span class="texhtml"><i>m</i></span>. An optimal number of hash functions <span class="texhtml"><i>k</i> = (<i>m</i> / <i>n</i>)ln2</span> has been assumed.</div>
</div>
</div>
<p>Assume that a <a href="/wiki/Hash_function" title="Hash function">hash function</a> selects each array position with equal probability. If <i>m</i> is the number of bits in the array, the probability that a certain bit is not set to one by a certain hash function during the insertion of an element is then</p>
<dl>
<dd><img class="tex" alt="1-\frac{1}{m}." src="http://upload.wikimedia.org/math/9/1/c/91c29dea519d84eef92293370529e668.png" /></dd>
</dl>
<p>The probability that it is not set by any of the hash functions is</p>
<dl>
<dd><img class="tex" alt="\left(1-\frac{1}{m}\right)^k." src="http://upload.wikimedia.org/math/9/3/c/93c1c6a16fb6a043288abe3b38e50bc4.png" /></dd>
</dl>
<p>If we have inserted <i>n</i> elements, the probability that a certain bit is still 0 is</p>
<dl>
<dd><img class="tex" alt="\left(1-\frac{1}{m}\right)^{kn};" src="http://upload.wikimedia.org/math/4/c/d/4cd626814ca58918e431b8b2485536f8.png" /></dd>
</dl>
<p>the probability that it is 1 is therefore</p>
<dl>
<dd><img class="tex" alt="1-\left(1-\frac{1}{m}\right)^{kn}." src="http://upload.wikimedia.org/math/8/5/1/851ec340757b925dc058d263254f14e1.png" /></dd>
</dl>
<p>Now test membership of an element that is not in the set. Each of the <i>k</i> array positions computed by the hash functions is 1 with a probability as above. The probability of all of them being 1, which would cause the <a href="/wiki/Algorithm" title="Algorithm">algorithm</a> to erroneously claim that the element is in the set, is then</p>
<dl>
<dd><img class="tex" alt="\left(1-\left(1-\frac{1}{m}\right)^{kn}\right)^k \approx \left( 1-e^{-kn/m} \right)^k." src="http://upload.wikimedia.org/math/d/9/d/d9d8c68c519849a713be18dcc479fd41.png" /></dd>
</dl>
<p>Obviously, the probability of false positives decreases as <i>m</i> (the number of bits in the array) increases, and increases as <i>n</i> (the number of inserted elements) increases. For a given <i>m</i> and <i>n</i>, the value of <i>k</i> (the number of hash functions) that minimizes the probability is</p>
<dl>
<dd><img class="tex" alt="\frac{m}{n}\ln 2 \approx \frac{9m}{13n} \approx 0.7\frac{m}{n}," src="http://upload.wikimedia.org/math/b/0/f/b0f40d1a75913391ffe91c2f11285495.png" /></dd>
</dl>
<p>which gives the false positive probability of</p>
<dl>
<dd><img class="tex" alt="\left(\frac{1}{2}\right)^{k} \approx {0.6185}^{m/n}." src="http://upload.wikimedia.org/math/a/4/8/a48a3b05f936d7a73f00cc8ed62b8549.png" /></dd>
</dl>
<p>Taking the optimal number of hashes, the false positive probability (when &lt;=0.5) can be rewritten and bounded (<a href="#CITEREFStarobinskiTrachtenbergAgarwal2003" title="">Starobinski, Trachtenberg &amp; Agarwal (2003)</a>)</p>
<dl>
<dd><img class="tex" alt="\frac{m}{n} \geq \frac{1}{\ln 2}." src="http://upload.wikimedia.org/math/2/9/e/29e36a45e2ef339226ece4dbb4206fcd.png" /></dd>
</dl>
<p>This means that in order to maintain a fixed false positive probability, the length of a Bloom filter must grow linearly with the number of elements being filtered.</p>
<p><a name="Interesting_properties" id="Interesting_properties"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Bloom_filter&amp;action=edit&amp;section=4" title="Edit section: Interesting properties">edit</a>]</span> <span class="mw-headline">Interesting properties</span></h2>
<ul>
<li>Unlike sets based on <a href="/wiki/Hash_table" title="Hash table">hash tables</a>, any Bloom filter can represent the entire <a href="/wiki/Universe_(mathematics)" title="Universe (mathematics)">universe</a> of elements. In this case, all bits are 1. Another consequence of this property is that <b>add</b> never fails due to the data structure "filling up," although the false positive rate increases steadily as elements are added.</li>
</ul>
<ul>
<li><a href="/wiki/Union_(set_theory)" title="Union (set theory)">Union</a> and <a href="/wiki/Intersection_(set_theory)" title="Intersection (set theory)">intersection</a> of Bloom filters with the same size and set of hash functions can be implemented with <a href="/wiki/Bitwise_operation" title="Bitwise operation">bitwise</a> OR and AND operations, respectively.</li>
</ul>
<p><a name="Example" id="Example"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Bloom_filter&amp;action=edit&amp;section=5" title="Edit section: Example">edit</a>]</span> <span class="mw-headline">Example</span></h2>
<p>Google <a href="/wiki/BigTable" title="BigTable">BigTable</a> uses Bloom filters to reduce the disk lookups for non-existent rows or columns. Avoiding costly disk lookups considerably increases the performance of a database query operation. (<a href="#CITEREFChangDeanGhemawatHsiehWallach" title="">Chang et al. (Wallach)</a>)</p>
<p>The <a href="/wiki/Squid_(software)" title="Squid (software)">Squid</a> <a href="/wiki/World_Wide_Web" title="World Wide Web">Web</a> Proxy <a href="/wiki/Cache" title="Cache">Cache</a> uses Bloom filters for so-called <a href="http://wiki.squid-cache.org/SquidFaq/CacheDigests" class="external text" title="http://wiki.squid-cache.org/SquidFaq/CacheDigests" rel="nofollow">cache digests</a>.<sup class="noprint Template-Fact"><span title="This claim needs references to reliable sources&#160;since March 2009" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</span></sup></p>
<p>The <a href="/wiki/Venti" title="Venti">Venti</a> archival storage system uses Bloom filters to detect previously-stored data.<sup class="noprint Template-Fact"><span title="This claim needs references to reliable sources&#160;since March 2009" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</span></sup></p>
<p><a name="Alternatives_to_Bloom_filters" id="Alternatives_to_Bloom_filters"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Bloom_filter&amp;action=edit&amp;section=6" title="Edit section: Alternatives to Bloom filters">edit</a>]</span> <span class="mw-headline">Alternatives to Bloom filters</span></h2>
<p>Classic Bloom filters use <span class="texhtml">1.44log2(1 / ε)</span> bits of space per inserted key, where <span class="texhtml">ε</span> is the false positive rate of the Bloom filter. However the space that is strictly necessary for any data structure playing the same role as a Bloom filter is only <span class="texhtml">log2(1 / ε)</span> per key <cite class="inline">(<a href="#CITEREFPaghPaghRao2005" title="">Pagh, Pagh &amp; Rao 2005</a>)</cite>. Hence Bloom filters use 44% more space than a hypothetical equivalent optimal data structure. The number of hash functions used to achieve a given false positive rate <span class="texhtml">ε</span> is proportional to <span class="texhtml">1 / ε</span> which is not optimal as it has been proved that an optimal data structure would need only a constant number of hash functions independent of the false positive rate.</p>
<p><a href="#CITEREFSternDill1996" title="">Stern &amp; Dill (1996)</a> describe a probabilistic structure based on <a href="/wiki/Hash_table" title="Hash table">hash tables</a>, <a href="/w/index.php?title=Hash_compaction&amp;action=edit&amp;redlink=1" class="new" title="Hash compaction (page does not exist)">hash compaction</a>, which <a href="#CITEREFDillingerManolios2004b" title="">Dillinger &amp; Manolios (2004b)</a> identify as significantly more accurate than a Bloom filter when each is configured optimally. Dillinger and Manolios, however, point out that the reasonable accuracy of any given Bloom filter over a wide range of numbers of additions makes it attractive for probabilistic enumeration of state spaces of unknown size. Hash compaction is, therefore, attractive when the number of additions can be predicted accurately; however, despite being very fast in software, hash compaction is poorly-suited for hardware because of worst-case linear access time.</p>
<p><a href="#CITEREFPutzeSandersSingler2007" title="">Putze, Sanders &amp; Singler (2007)</a> have studied some variants of Bloom filters that are either faster or use less space than classic Bloom filters. The basic idea of the fast variant is to locate the k hash values associated with each key into one or two blocks having the same size as processor's memory cache blocks (usually 64 bytes). This will presumably improve performance by reducing the number of potential memory <a href="/wiki/Cache_misses" title="Cache misses" class="mw-redirect">cache misses</a>. The proposed variants have however the drawback of using about 32% more space than classic Bloom filters.</p>
<p>The space efficient variant relies on using a single hash function that generates for each key a value in the range <img class="tex" alt="\left[0,n/\varepsilon\right]" src="http://upload.wikimedia.org/math/8/7/1/8719561052ee96a6f1c88ae38a05dbe2.png" /> where <span class="texhtml">ε</span> is the requested false positive rate. The sequence of values is then sorted and compressed using <a href="/wiki/Golomb_coding" title="Golomb coding">golomb coding</a> (or some other compression technique) to occupy a space close to <span class="texhtml"><i>n</i>log2(1 / ε)</span> bits. To query the Bloom filter for a given key, it will suffice to check if its corresponding value is stored in the Bloom filter. Decompressing the whole Bloom filter for each query would make this variant totally unusable. To overcome this problem the sequence of values is divided into small blocks of equal size that are compressed separately. At query time only half a block will need to be decompressed on average. Because of decompression overhead, this variant may be slower than classic Bloom filters but this may be compensated by the fact that a single hash function need to be computed.</p>
<p>Another alternative to classic Bloom filter is the one based on space efficient variants of <a href="/wiki/Cuckoo_hashing" title="Cuckoo hashing">cuckoo hashing</a>. In this case once the hash table is constructed, the keys stored in the hash table are replaced with short signatures of the keys. Those signatures are strings of bits computed using a hash function applied on the keys.</p>
<p><a name="Extensions_and_applications" id="Extensions_and_applications"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Bloom_filter&amp;action=edit&amp;section=7" title="Edit section: Extensions and applications">edit</a>]</span> <span class="mw-headline">Extensions and applications</span></h2>
<p><a name="Counting_filters" id="Counting_filters"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Bloom_filter&amp;action=edit&amp;section=8" title="Edit section: Counting filters">edit</a>]</span> <span class="mw-headline">Counting filters</span></h3>
<p>Counting filters provide a way to implement a <i>delete</i> operation on a Bloom filter without recreating the filter afresh. In a counting filter the array positions (buckets) are extended from being a single bit, to being an n-bit counter. In fact, regular Bloom filters can be considered as counting filters with a bucket size of one bit. Counting filters were introduced by <a href="#CITEREFFanCaoAlmeidaBroder1998" title="">Fan et al. (1998)</a>.</p>
<p>The insert operation is extended to <i>increment</i> the value of the buckets and the lookup operation checks that each of the required buckets is non-zero. The delete operation, obviously, then consists of decrementing the value of each of the respective buckets.</p>
<p><a href="/wiki/Arithmetic_overflow" title="Arithmetic overflow">Arithmetic overflow</a> of the buckets is a problem and the buckets should be sufficiently large to make this case rare. If it does occur then the increment and decrement operations must leave the bucket set to the maximum possible value in order to retain the properties of a Bloom filter.</p>
<p>The size of counters is usually 3 or 4 bits. Hence counting Bloom filters use 3 to 4 times more space than static Bloom filters. In theory, an optimal data structure equivalent to a counting Bloom filter should not use more space than a static Bloom filter.</p>
<p>Another issue with counting filters is in their scalability. Because the counting Bloom filter table can not be resized, the maximal number of keys to be stored simultaneously in the filter must be known in advance. Once the designed capacity of the table is exceeded the false positive rate will grow rapidly as more keys are inserted.</p>
<p><a href="#CITEREFBonomiMitzenmacherPanigrahySinghand2006" title="">Bonomi et al. (2006)</a> introduced a data structure based on d-left hashing that is functionally equivalent but uses approximately half as much space as counting Bloom filters. The scalability issue does not occur in this data structure. Once the designed capacity is exceeded, the keys could be reinserted in a new hash table of double size.</p>
<p>The space efficient variant by <a href="#CITEREFPutzeSandersSingler2007" title="">Putze, Sanders &amp; Singler (2007)</a> could also be used to implement counting filters by supporting insertions and deletions.</p>
<p><a name="Data_synchronization" id="Data_synchronization"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Bloom_filter&amp;action=edit&amp;section=9" title="Edit section: Data synchronization">edit</a>]</span> <span class="mw-headline">Data synchronization</span></h3>
<p>Bloom filters can be used for approximate <a href="/wiki/Data_synchronization" title="Data synchronization">data synchronization</a> as in <a href="#CITEREFByersConsidineMitzenmacherRost2004" title="">Byers et al. (2004)</a>. Counting Bloom filters can be used to approximate the number of differences between two sets and this approach is described in <a href="#CITEREFAgarwalTrachtenberg2006" title="">Agarwal &amp; Trachtenberg (2006)</a>.</p>
<p><a name="Bloomier_filters" id="Bloomier_filters"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Bloom_filter&amp;action=edit&amp;section=10" title="Edit section: Bloomier filters">edit</a>]</span> <span class="mw-headline">Bloomier filters</span></h3>
<p><a href="#CITEREFChazelleKilianRubinfeldTal2004" title="">Chazelle et al. (2004)</a> designed a generalization of Bloom filters that could associate a value with each element that had been inserted, implementing an <a href="/wiki/Associative_array" title="Associative array">associative array</a>. Like Bloom filters, these structures achieve a small space overhead by accepting a small probability of false positives. In the case of "Bloomier filters", a <i>false positive</i> is defined as returning a result when the key is not in the map. The map will never return the wrong value for a key that <i>is</i> in the map.</p>
<p>The simplest Bloomier filter is near-optimal and fairly simple to describe. Suppose initially that the only possible values are 0 and 1. We create a pair of Bloom filters <i>A</i><sub>0</sub> and <i>B</i><sub>0</sub> which contain, respectively, all values mapping to 0 and all values mapping to 1. Then, to determine which value a given key maps to, we look it up in both filters. If it is in neither, then the key is not in the map. If the key is in <i>A</i><sub>0</sub> but not <i>B</i><sub>0</sub>, then it does not map to 1, and has a high probability of mapping to 0. Conversely, if the key is in <i>B</i><sub>0</sub> but not <i>A</i><sub>0</sub>, then it does not map to 0 and has a high probability of mapping to 1.</p>
<p>A problem arises, however, when <i>both</i> filters claim to contain the item. We never insert an item into both, so one or both of the filters is lying (producing a false positive), but we don't know which. To determine this, we have another, smaller pair of filters <i>A</i><sub>1</sub> and <i>B</i><sub>1</sub>. <i>A</i><sub>1</sub> contains values that map to 0 and which are false positives in <i>B</i><sub>0</sub>; <i>B</i><sub>1</sub> contains values that map to 1 and which are false positives in <i>A</i><sub>0</sub>. But whenever <i>A</i><sub>0</sub> and <i>B</i><sub>0</sub> both produce positives, at most one of these cases must occur, and so we simply have to determine which if any of the two filters <i>A</i><sub>1</sub> and <i>B</i><sub>1</sub> contains the key, another instance of our original problem.</p>
<p>It may so happen again that both filters produce a positive; we apply the same idea recursively to solve this problem. Because each pair of filters only contains keys that are in the map <i>and</i> produced false positives on all previous filter pairs, the number of keys is extremely likely to quickly drop to a very small quantity that can be easily stored in an ordinary deterministic map, such as a pair of small arrays with linear search. Moreover, the average total search time is a constant, because almost all queries will be resolved by the first pair, almost all remaining queries by the second pair, and so on. The total space required is independent of <i>n</i>, and is almost entirely occupied by the first filter pair.</p>
<p>Now that we have the structure and a search algorithm, we also need to know how to insert new key/value pairs. The program must not attempt to insert the same key with both values. If the value is 0, insert the key into <i>A</i><sub>0</sub> and then test if the key is in <i>B</i><sub>0</sub>. If so, this is a false positive for <i>B</i><sub>0</sub>, and the key must also be inserted into <i>A</i><sub>1</sub> recursively in the same manner. If we reach the last level, we simply insert it. When the value is 1, the operation is similar but with <i>A</i> and <i>B</i> reversed.</p>
<p>Now that we can map a key to the value 0 or 1, how does this help us map to general values? This is simple. We create a single such Bloomier filter for each bit of the result. If the values are large, we can instead map keys to hash values that can be used to retrieve the actual values. The space required for a Bloomier filter with <i>n</i>-bit values is typically slightly more than the space for 2<i>n</i> Bloom filters.</p>
<p>A very simple way to implement Bloomier filters is by means of minimal <a href="/wiki/Perfect_hashing" title="Perfect hashing" class="mw-redirect">perfect hashing</a>. A minimal perfect hash function h is first generated for the set of n keys. Then an array is filled with n pairs (signature,value) associated with each key at the positions given by function h when applied on each key. The signature of a key is a string of r bits computed by applying a hash function g of range <span class="texhtml">2<sup><i>r</i></sup></span> on the key. The value of r is chosen such that <span class="texhtml">2<sup><i>r</i></sup> &gt; = 1 / ε</span>, where <span class="texhtml">ε</span> is the requested false positive rate. To query for a given key, hash function h is first applied on the key. This will give a position into the array from which we retrieve a pair (signature,value). Then we compute the signature of the key using function g. If the computed signature is the same as retrieved signature we return the retrieved value. The probabaility of false positive is <span class="texhtml">1 / 2<sup><i>r</i></sup></span>.</p>
<p>Another alternative to implement static bloomier and bloom filters based on matrix solving has been simultaneously proposed in <a href="#CITEREFPorat2008" title="">Porat (2008)</a> , <a href="#CITEREFDietzfelbingerPagh2008" title="">Dietzfelbinger &amp; Pagh (2008)</a> and <a href="#CITEREFCharlesChellapilla2008" title="">Charles &amp; Chellapilla (2008)</a>. The space usage of this method is optimal as it needs only <span class="texhtml">log<sub>2</sub>(ε)</span> bits per key for a bloom filter. However time to generate the bloom or bloomier filter can be very high. The generation time can be reduced to a reasonable value at the price of a small increase in space usage.</p>
<p>Dynamic Bloomier filters have been studied by <a href="#CITEREFMortensenPaghP.C4.83tra.C5.9Fcu2005" title="">Mortensen, Pagh &amp; Pătraşcu (2005)</a>. They proved that any dynamic Bloomier filter needs at least around <span class="texhtml">log(<i>l</i>)</span> bits per key where l is the length of the key. A simple dynamic version of Bloomier filters can be implemented using two dynamic data structures. Let the two data structures be noted S1 and S2. S1 will store keys with their associated data while S2 will only store signatures of keys with their associated data. Those signatures are simply hash values of keys in the range <img class="tex" alt="[0,n/\varepsilon]" src="http://upload.wikimedia.org/math/d/1/a/d1a01f1a6ceceb0621291cf33889d743.png" /> where n is the maximal number of keys to be stored in the Bloomier filter and <span class="texhtml">ε</span> is the requested false positive rate. To insert a key in the Bloomier filter, its hash value is first computed. Then the algorithm checks if a key with the same hash value already exists in S2. If this is not the case, the hash value is inserted in S2 along with data associated with the key. If the same hash value already exists in S2 then the key is inserted into S1 along with its associated data. The deletion is symmetric&#160;: if the key already exists in S1 it will be deleted from there, otherwise the hash value associated with the key is deleted from S2. An issue with this algorithm is on how to store efficiently S1 and S2. For S1 any hash algorithm can be used. To store S2 <a href="/wiki/Golomb_coding" title="Golomb coding">golomb coding</a> could be applied to compress signatures to use a space close to <span class="texhtml">log2(1 / ε)</span> per key.</p>
<p><a name="Compact_approximators" id="Compact_approximators"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Bloom_filter&amp;action=edit&amp;section=11" title="Edit section: Compact approximators">edit</a>]</span> <span class="mw-headline">Compact approximators</span></h3>
<p><a href="#CITEREFBoldiVigna2005" title="">Boldi &amp; Vigna (2005)</a> proposed a <a href="/wiki/Lattice_(order)" title="Lattice (order)">lattice</a>-based generalization of Bloom filters. A <b>compact approximator</b> associates to each key an element of a lattice (the standard Bloom filters being the case of the Boolean two-element lattice). Instead of a bit array, they have an array of lattice elements. When adding a new association between a key and an element of the lattice, they maximize the current content of the <var>k</var> array locations associated to the key with the lattice element. When reading the value associated to a key, they minimize the values found in the <var>k</var> locations associated to the key. The resulting value approximates from above the original value.</p>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Bloom_filter&amp;action=edit&amp;section=12" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<div class="references-small" style="margin-left:1.5em;-moz-column-count:2; -webkit-column-count:2; column-count:2;">
<ul>
<li><cite style="font-style:normal" class="" id="CITEREFAgarwalTrachtenberg2006">Agarwal, Sachin; Trachtenberg, Ari (2006), "Approximating the number of differences between remote sets", <i>IEEE Information Theory Workshop</i> (Punta del Este, Uruguay)</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=Approximating+the+number+of+differences+between+remote+sets&amp;rft.jtitle=IEEE+Information+Theory+Workshop&amp;rft.aulast=Agarwal&amp;rft.aufirst=Sachin&amp;rft.au=Agarwal%2C+Sachin&amp;rft.au=Trachtenberg%2C+Ari&amp;rft.date=2006&amp;rft.place=Punta+del+Este%2C+Uruguay&amp;rfr_id=info:sid/en.wikipedia.org:Bloom_filter"><span style="display: none;">&#160;</span></span></li>
</ul>
<ul>
<li><cite style="font-style:normal" class="" id="CITEREFAhmadiWong2007">Ahmadi, Mahmood; Wong, Stephan (2007), <a href="http://www.ieeexplore.ieee.org/xpls/abs_all.jsp?isnumber=4444031&amp;arnumber=4444089&amp;count=113&amp;index=57" class="external text" title="http://www.ieeexplore.ieee.org/xpls/abs_all.jsp?isnumber=4444031&amp;arnumber=4444089&amp;count=113&amp;index=57" rel="nofollow">"A Cache Architecture for Counting Bloom Filters"</a>, <i>15th international Conference on Netwroks (ICON-2007)</i><span class="printonly">, <a href="http://www.ieeexplore.ieee.org/xpls/abs_all.jsp?isnumber=4444031&amp;arnumber=4444089&amp;count=113&amp;index=57" class="external free" title="http://www.ieeexplore.ieee.org/xpls/abs_all.jsp?isnumber=4444031&amp;arnumber=4444089&amp;count=113&amp;index=57" rel="nofollow">http://www.ieeexplore.ieee.org/xpls/abs_all.jsp?isnumber=4444031&amp;arnumber=4444089&amp;count=113&amp;index=57</a></span></cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=A+Cache+Architecture+for+Counting+Bloom+Filters&amp;rft.atitle=15th+international+Conference+on+Netwroks+%28ICON-2007%29&amp;rft.aulast=Ahmadi&amp;rft.aufirst=Mahmood&amp;rft.au=Ahmadi%2C+Mahmood&amp;rft.au=Wong%2C+Stephan&amp;rft.date=2007&amp;rft_id=http%3A%2F%2Fwww.ieeexplore.ieee.org%2Fxpls%2Fabs_all.jsp%3Fisnumber%3D4444031%26arnumber%3D4444089%26count%3D113%26index%3D57&amp;rfr_id=info:sid/en.wikipedia.org:Bloom_filter"><span style="display: none;">&#160;</span></span></li>
</ul>
<ul>
<li><cite style="font-style:normal" class="" id="CITEREFByersConsidineMitzenmacherRost2004">Byers, John W.; Considine, Jeffrey; Mitzenmacher, Michael; Rost, Stanislav (2004), "Informed content delivery across adaptive overlay networks", <i><a href="/w/index.php?title=IEEE/ACM_Transactions_on_Networking&amp;action=edit&amp;redlink=1" class="new" title="IEEE/ACM Transactions on Networking (page does not exist)">IEEE/ACM Transactions on Networking</a></i> <b>12</b> (5)</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=Informed+content+delivery+across+adaptive+overlay+networks&amp;rft.jtitle=%5B%5BIEEE%2FACM+Transactions+on+Networking%5D%5D&amp;rft.aulast=Byers&amp;rft.aufirst=John+W.&amp;rft.au=Byers%2C+John+W.&amp;rft.au=Considine%2C+Jeffrey&amp;rft.au=Mitzenmacher%2C+Michael&amp;rft.au=Rost%2C+Stanislav&amp;rft.date=2004&amp;rft.volume=12&amp;rft.issue=5&amp;rfr_id=info:sid/en.wikipedia.org:Bloom_filter"><span style="display: none;">&#160;</span></span></li>
</ul>
<ul>
<li><cite style="font-style:normal" class="" id="CITEREFBloom1970">Bloom, Burton H. (1970), "Space/time trade-offs in hash coding with allowable errors", <i><a href="/wiki/Communications_of_the_ACM" title="Communications of the ACM">Communications of the ACM</a></i> <b>13</b> (7): 422–426, <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<span class="neverexpand"><a href="http://dx.doi.org/10.1145%2F362686.362692" class="external text" title="http://dx.doi.org/10.1145%2F362686.362692" rel="nofollow">10.1145/362686.362692</a></span></cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=Space%2Ftime+trade-offs+in+hash+coding+with+allowable+errors&amp;rft.jtitle=%5B%5BCommunications+of+the+ACM%5D%5D&amp;rft.aulast=Bloom&amp;rft.aufirst=Burton+H.&amp;rft.au=Bloom%2C+Burton+H.&amp;rft.date=1970&amp;rft.volume=13&amp;rft.issue=7&amp;rft.pages=422%E2%80%93426&amp;rft_id=info:doi/10.1145%2F362686.362692&amp;rfr_id=info:sid/en.wikipedia.org:Bloom_filter"><span style="display: none;">&#160;</span></span></li>
</ul>
<ul>
<li><cite style="font-style:normal" class="" id="CITEREFBoldiVigna2005">Boldi, Paolo; Vigna, Sebastiano (2005), "Mutable strings in Java: design, implementation and lightweight text-search algorithms", <i>Science of Computer Programming</i> <b>54</b> (1): 3–23, <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<span class="neverexpand"><a href="http://dx.doi.org/10.1016%2Fj.scico.2004.05.003" class="external text" title="http://dx.doi.org/10.1016%2Fj.scico.2004.05.003" rel="nofollow">10.1016/j.scico.2004.05.003</a></span></cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=Mutable+strings+in+Java%3A+design%2C+implementation+and+lightweight+text-search+algorithms&amp;rft.jtitle=Science+of+Computer+Programming&amp;rft.aulast=Boldi&amp;rft.aufirst=Paolo&amp;rft.au=Boldi%2C+Paolo&amp;rft.au=Vigna%2C+Sebastiano&amp;rft.date=2005&amp;rft.volume=54&amp;rft.issue=1&amp;rft.pages=3%E2%80%9323&amp;rft_id=info:doi/10.1016%2Fj.scico.2004.05.003&amp;rfr_id=info:sid/en.wikipedia.org:Bloom_filter"><span style="display: none;">&#160;</span></span></li>
</ul>
<ul>
<li><cite style="font-style:normal" class="" id="CITEREFBonomiMitzenmacherPanigrahySingh2006">Bonomi, Flavio; Mitzenmacher, Michael; Panigrahy, Rina; Singh, Sushil; Varghese, George (2006), "An Improved Construction for Counting Bloom Filters", <i>Algorithms – ESA 2006, 14th Annual European Symposium</i>, pp.&#160;684–695, <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<span class="neverexpand"><a href="http://dx.doi.org/10.1007%2F11841036_61" class="external text" title="http://dx.doi.org/10.1007%2F11841036_61" rel="nofollow">10.1007/11841036_61</a></span></cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=An+Improved+Construction+for+Counting+Bloom+Filters&amp;rft.atitle=Algorithms+%E2%80%93+ESA+2006%2C+14th+Annual+European+Symposium&amp;rft.aulast=Bonomi&amp;rft.aufirst=Flavio&amp;rft.au=Bonomi%2C+Flavio&amp;rft.au=Mitzenmacher%2C+Michael&amp;rft.au=Panigrahy%2C+Rina&amp;rft.au=Singh%2C+Sushil&amp;rft.au=Varghese%2C+George&amp;rft.date=2006&amp;rft.pages=pp.%26nbsp%3B684%E2%80%93695&amp;rft_id=info:doi/10.1007%2F11841036_61&amp;rfr_id=info:sid/en.wikipedia.org:Bloom_filter"><span style="display: none;">&#160;</span></span></li>
</ul>
<ul>
<li><cite style="font-style:normal" class="" id="CITEREFBroderMitzenmacher2005"><a href="/wiki/Andrei_Broder" title="Andrei Broder">Broder, Andrei</a>; Mitzenmacher, Michael (2005), "<a href="http://www.eecs.harvard.edu/~michaelm/postscripts/im2005b.pdf" class="external text" title="http://www.eecs.harvard.edu/~michaelm/postscripts/im2005b.pdf" rel="nofollow">Network Applications of Bloom Filters: A Survey</a>", <i>Internet Mathematics</i> <b>1</b> (4): 485–509<span class="printonly">, <a href="http://www.eecs.harvard.edu/~michaelm/postscripts/im2005b.pdf" class="external free" title="http://www.eecs.harvard.edu/~michaelm/postscripts/im2005b.pdf" rel="nofollow">http://www.eecs.harvard.edu/~michaelm/postscripts/im2005b.pdf</a></span></cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=Network+Applications+of+Bloom+Filters%3A+A+Survey&amp;rft.jtitle=Internet+Mathematics&amp;rft.aulast=Broder&amp;rft.aufirst=Andrei&amp;rft.au=Broder%2C+Andrei&amp;rft.au=Mitzenmacher%2C+Michael&amp;rft.date=2005&amp;rft.volume=1&amp;rft.issue=4&amp;rft.pages=485%E2%80%93509&amp;rft_id=http%3A%2F%2Fwww.eecs.harvard.edu%2F%7Emichaelm%2Fpostscripts%2Fim2005b.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Bloom_filter"><span style="display: none;">&#160;</span></span></li>
</ul>
<ul>
<li><cite style="font-style:normal" class="" id="CITEREFChangDeanGhemawatHsieh2006">Chang, Fay; Dean, Jeffrey; Ghemawat, Sanjay; Hsieh, Wilson; Wallach, Deborah; Burrows, Mike; Chandra, Tushar; Fikes, Andrew;  <i>et al</i>. (2006), <a href="http://labs.google.com/papers/bigtable.html" class="external text" title="http://labs.google.com/papers/bigtable.html" rel="nofollow">"Bigtable: A Distributed Storage System for Structured Data"</a>, <i>Seventh Symposium on Operating System Design and Implementation</i><span class="printonly">, <a href="http://labs.google.com/papers/bigtable.html" class="external free" title="http://labs.google.com/papers/bigtable.html" rel="nofollow">http://labs.google.com/papers/bigtable.html</a></span></cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Bigtable%3A+A+Distributed+Storage+System+for+Structured+Data&amp;rft.atitle=Seventh+Symposium+on+Operating+System+Design+and+Implementation&amp;rft.aulast=Chang&amp;rft.aufirst=Fay&amp;rft.au=Chang%2C+Fay&amp;rft.au=Dean%2C+Jeffrey&amp;rft.au=Ghemawat%2C+Sanjay&amp;rft.au=Hsieh%2C+Wilson&amp;rft.au=Wallach%2C+Deborah&amp;rft.au=Burrows%2C+Mike&amp;rft.au=Chandra%2C+Tushar&amp;rft.au=Fikes%2C+Andrew&amp;rft.au=Gruber%2C+Robert&amp;rft.date=2006&amp;rft_id=http%3A%2F%2Flabs.google.com%2Fpapers%2Fbigtable.html&amp;rfr_id=info:sid/en.wikipedia.org:Bloom_filter"><span style="display: none;">&#160;</span></span></li>
</ul>
<ul>
<li><cite style="font-style:normal" class="" id="CITEREFCharlesChellapilla2008">Charles, Denis; Chellapilla, Kumar (2008), <a href="http://arxiv.org/pdf/0807.0928v1" class="external text" title="http://arxiv.org/pdf/0807.0928v1" rel="nofollow">"Bloomier Filters: A second look"</a>, <i>The Computing Research Repository (CoRR)</i><span class="printonly">, <a href="http://arxiv.org/pdf/0807.0928v1" class="external free" title="http://arxiv.org/pdf/0807.0928v1" rel="nofollow">http://arxiv.org/pdf/0807.0928v1</a></span></cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Bloomier+Filters%3A+A+second+look&amp;rft.atitle=The+Computing+Research+Repository+%28CoRR%29&amp;rft.aulast=Charles&amp;rft.aufirst=Denis&amp;rft.au=Charles%2C+Denis&amp;rft.au=Chellapilla%2C+Kumar&amp;rft.date=2008&amp;rft_id=http%3A%2F%2Farxiv.org%2Fpdf%2F0807.0928v1&amp;rfr_id=info:sid/en.wikipedia.org:Bloom_filter"><span style="display: none;">&#160;</span></span></li>
</ul>
<ul>
<li><cite style="font-style:normal" class="" id="CITEREFChazelleKilianRubinfeldTal2004"><a href="/wiki/Bernard_Chazelle" title="Bernard Chazelle">Chazelle, Bernard</a>; Kilian, Joe; Rubinfeld, Ronitt; Tal, Ayellet (2004), <a href="http://www.ee.technion.ac.il/~ayellet/Ps/nelson.pdf" class="external text" title="http://www.ee.technion.ac.il/~ayellet/Ps/nelson.pdf" rel="nofollow">"The Bloomier filter: an efficient data structure for static support lookup tables"</a>, <i>Proceedings of the Fifteenth Annual ACM-SIAM Symposium on Discrete Algorithms</i>, pp.&#160;30–39<span class="printonly">, <a href="http://www.ee.technion.ac.il/~ayellet/Ps/nelson.pdf" class="external free" title="http://www.ee.technion.ac.il/~ayellet/Ps/nelson.pdf" rel="nofollow">http://www.ee.technion.ac.il/~ayellet/Ps/nelson.pdf</a></span></cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=The+Bloomier+filter%3A+an+efficient+data+structure+for+static+support+lookup+tables&amp;rft.atitle=Proceedings+of+the+Fifteenth+Annual+ACM-SIAM+Symposium+on+Discrete+Algorithms&amp;rft.aulast=Chazelle&amp;rft.aufirst=Bernard&amp;rft.au=Chazelle%2C+Bernard&amp;rft.au=Kilian%2C+Joe&amp;rft.au=Rubinfeld%2C+Ronitt&amp;rft.au=Tal%2C+Ayellet&amp;rft.date=2004&amp;rft.pages=pp.%26nbsp%3B30%E2%80%9339&amp;rft_id=http%3A%2F%2Fwww.ee.technion.ac.il%2F%7Eayellet%2FPs%2Fnelson.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Bloom_filter"><span style="display: none;">&#160;</span></span></li>
</ul>
<ul>
<li><cite style="font-style:normal" class="" id="CITEREFCohenMatias2003">Cohen, Saar; Matias, Yossi (2003), <a href="http://www.sigmod.org/sigmod03/eproceedings/papers/r09p02.pdf" class="external text" title="http://www.sigmod.org/sigmod03/eproceedings/papers/r09p02.pdf" rel="nofollow">"Spectral Bloom Filters"</a>, <i>Proceedings of the 2003 ACM SIGMOD International Conference on Management of Data</i>, pp.&#160;241–252, <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<span class="neverexpand"><a href="http://dx.doi.org/10.1145%2F872757.872787" class="external text" title="http://dx.doi.org/10.1145%2F872757.872787" rel="nofollow">10.1145/872757.872787</a></span><span class="printonly">, <a href="http://www.sigmod.org/sigmod03/eproceedings/papers/r09p02.pdf" class="external free" title="http://www.sigmod.org/sigmod03/eproceedings/papers/r09p02.pdf" rel="nofollow">http://www.sigmod.org/sigmod03/eproceedings/papers/r09p02.pdf</a></span></cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Spectral+Bloom+Filters&amp;rft.atitle=Proceedings+of+the+2003+ACM+SIGMOD+International+Conference+on+Management+of+Data&amp;rft.aulast=Cohen&amp;rft.aufirst=Saar&amp;rft.au=Cohen%2C+Saar&amp;rft.au=Matias%2C+Yossi&amp;rft.date=2003&amp;rft.pages=pp.%26nbsp%3B241%E2%80%93252&amp;rft_id=info:doi/10.1145%2F872757.872787&amp;rft_id=http%3A%2F%2Fwww.sigmod.org%2Fsigmod03%2Feproceedings%2Fpapers%2Fr09p02.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Bloom_filter"><span style="display: none;">&#160;</span></span></li>
</ul>
<ul>
<li><cite style="font-style:normal" class="" id="CITEREFDharmapurikarSongTurnerLockwood2006">Dharmapurikar, Sarang; Song, Haoyu; Turner, Jonathan; Lockwood, John (2006), <a href="http://www.arl.wustl.edu/~sarang/ancs6819-dharmapurikar.pdf" class="external text" title="http://www.arl.wustl.edu/~sarang/ancs6819-dharmapurikar.pdf" rel="nofollow">"Fast packet classification using Bloom filters"</a>, <i>Proceedings of the 2006 ACM/IEEE Symposium on Architecture for Networking and Communications Systems</i>, pp.&#160;61–70, <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<span class="neverexpand"><a href="http://dx.doi.org/10.1145%2F1185347.1185356" class="external text" title="http://dx.doi.org/10.1145%2F1185347.1185356" rel="nofollow">10.1145/1185347.1185356</a></span><span class="printonly">, <a href="http://www.arl.wustl.edu/~sarang/ancs6819-dharmapurikar.pdf" class="external free" title="http://www.arl.wustl.edu/~sarang/ancs6819-dharmapurikar.pdf" rel="nofollow">http://www.arl.wustl.edu/~sarang/ancs6819-dharmapurikar.pdf</a></span></cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Fast+packet+classification+using+Bloom+filters&amp;rft.atitle=Proceedings+of+the+2006+ACM%2FIEEE+Symposium+on+Architecture+for+Networking+and+Communications+Systems&amp;rft.aulast=Dharmapurikar&amp;rft.aufirst=Sarang&amp;rft.au=Dharmapurikar%2C+Sarang&amp;rft.au=Song%2C+Haoyu&amp;rft.au=Turner%2C+Jonathan&amp;rft.au=Lockwood%2C+John&amp;rft.date=2006&amp;rft.pages=pp.%26nbsp%3B61%E2%80%9370&amp;rft_id=info:doi/10.1145%2F1185347.1185356&amp;rft_id=http%3A%2F%2Fwww.arl.wustl.edu%2F%7Esarang%2Fancs6819-dharmapurikar.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Bloom_filter"><span style="display: none;">&#160;</span></span></li>
</ul>
<ul>
<li><cite style="font-style:normal" class="" id="CITEREFDietzfelbingerPagh2008">Dietzfelbinger, Martin; Pagh, Rasmus (2008), <a href="http://arxiv.org/pdf/0803.3693v1" class="external text" title="http://arxiv.org/pdf/0803.3693v1" rel="nofollow">"Succinct Data Structures for Retrieval and Approximate Membership"</a>, <i>The Computing Research Repository (CoRR)</i><span class="printonly">, <a href="http://arxiv.org/pdf/0803.3693v1" class="external free" title="http://arxiv.org/pdf/0803.3693v1" rel="nofollow">http://arxiv.org/pdf/0803.3693v1</a></span></cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Succinct+Data+Structures+for+Retrieval+and+Approximate+Membership&amp;rft.atitle=The+Computing+Research+Repository+%28CoRR%29&amp;rft.aulast=Dietzfelbinger&amp;rft.aufirst=Martin&amp;rft.au=Dietzfelbinger%2C+Martin&amp;rft.au=Pagh%2C+Rasmus&amp;rft.date=2008&amp;rft_id=http%3A%2F%2Farxiv.org%2Fpdf%2F0803.3693v1&amp;rfr_id=info:sid/en.wikipedia.org:Bloom_filter"><span style="display: none;">&#160;</span></span></li>
</ul>
<ul>
<li><cite style="font-style:normal" class="" id="CITEREFDillingerManolios2004a">Dillinger, Peter C.; Manolios, Panagiotis (2004a), <a href="http://www.cc.gatech.edu/fac/Pete.Manolios/research/spin-3spin.html" class="external text" title="http://www.cc.gatech.edu/fac/Pete.Manolios/research/spin-3spin.html" rel="nofollow">"Fast and Accurate Bitstate Verification for SPIN"</a>, <i>Proceedings of the 11th Internation Spin Workshop on Model Checking Software</i>, Springer-Verlag, Lecture Notes in Computer Science 2989<span class="printonly">, <a href="http://www.cc.gatech.edu/fac/Pete.Manolios/research/spin-3spin.html" class="external free" title="http://www.cc.gatech.edu/fac/Pete.Manolios/research/spin-3spin.html" rel="nofollow">http://www.cc.gatech.edu/fac/Pete.Manolios/research/spin-3spin.html</a></span></cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Fast+and+Accurate+Bitstate+Verification+for+SPIN&amp;rft.atitle=Proceedings+of+the+11th+Internation+Spin+Workshop+on+Model+Checking+Software&amp;rft.aulast=Dillinger&amp;rft.aufirst=Peter+C.&amp;rft.au=Dillinger%2C+Peter+C.&amp;rft.au=Manolios%2C+Panagiotis&amp;rft.date=2004a&amp;rft.pub=Springer-Verlag%2C+Lecture+Notes+in+Computer+Science+2989&amp;rft_id=http%3A%2F%2Fwww.cc.gatech.edu%2Ffac%2FPete.Manolios%2Fresearch%2Fspin-3spin.html&amp;rfr_id=info:sid/en.wikipedia.org:Bloom_filter"><span style="display: none;">&#160;</span></span></li>
</ul>
<ul>
<li><cite style="font-style:normal" class="" id="CITEREFDillingerManolios2004b">Dillinger, Peter C.; Manolios, Panagiotis (2004b), <a href="http://www.cc.gatech.edu/fac/Pete.Manolios/research/bloom-filters-verification.html" class="external text" title="http://www.cc.gatech.edu/fac/Pete.Manolios/research/bloom-filters-verification.html" rel="nofollow">"Bloom Filters in Probabilistic Verification"</a>, <i>Proceedings of the 5th Internation Conference on Formal Methods in Computer-Aided Design</i>, Springer-Verlag, Lecture Notes in Computer Science 3312<span class="printonly">, <a href="http://www.cc.gatech.edu/fac/Pete.Manolios/research/bloom-filters-verification.html" class="external free" title="http://www.cc.gatech.edu/fac/Pete.Manolios/research/bloom-filters-verification.html" rel="nofollow">http://www.cc.gatech.edu/fac/Pete.Manolios/research/bloom-filters-verification.html</a></span></cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Bloom+Filters+in+Probabilistic+Verification&amp;rft.atitle=Proceedings+of+the+5th+Internation+Conference+on+Formal+Methods+in+Computer-Aided+Design&amp;rft.aulast=Dillinger&amp;rft.aufirst=Peter+C.&amp;rft.au=Dillinger%2C+Peter+C.&amp;rft.au=Manolios%2C+Panagiotis&amp;rft.date=2004b&amp;rft.pub=Springer-Verlag%2C+Lecture+Notes+in+Computer+Science+3312&amp;rft_id=http%3A%2F%2Fwww.cc.gatech.edu%2Ffac%2FPete.Manolios%2Fresearch%2Fbloom-filters-verification.html&amp;rfr_id=info:sid/en.wikipedia.org:Bloom_filter"><span style="display: none;">&#160;</span></span></li>
</ul>
<ul>
<li><cite style="font-style:normal" class="" id="CITEREFDonnetBaynatFriedman2006">Donnet, Benoit; Baynat, Bruno; Friedman, Timur (2006), <a href="http://adetti.iscte.pt/events/CONEXT06/Conext06_Proceedings/papers/13.html" class="external text" title="http://adetti.iscte.pt/events/CONEXT06/Conext06_Proceedings/papers/13.html" rel="nofollow">"Retouched Bloom Filters: Allowing Networked Applications to Flexibly Trade Off False Positives Against False Negatives"</a>, <i>CoNEXT 06 – 2nd Conference on Future Networking Technologies</i><span class="printonly">, <a href="http://adetti.iscte.pt/events/CONEXT06/Conext06_Proceedings/papers/13.html" class="external free" title="http://adetti.iscte.pt/events/CONEXT06/Conext06_Proceedings/papers/13.html" rel="nofollow">http://adetti.iscte.pt/events/CONEXT06/Conext06_Proceedings/papers/13.html</a></span></cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Retouched+Bloom+Filters%3A+Allowing+Networked+Applications+to+Flexibly+Trade+Off+False+Positives+Against+False+Negatives&amp;rft.atitle=CoNEXT+06+%E2%80%93+2nd+Conference+on+Future+Networking+Technologies&amp;rft.aulast=Donnet&amp;rft.aufirst=Benoit&amp;rft.au=Donnet%2C+Benoit&amp;rft.au=Baynat%2C+Bruno&amp;rft.au=Friedman%2C+Timur&amp;rft.date=2006&amp;rft_id=http%3A%2F%2Fadetti.iscte.pt%2Fevents%2FCONEXT06%2FConext06_Proceedings%2Fpapers%2F13.html&amp;rfr_id=info:sid/en.wikipedia.org:Bloom_filter"><span style="display: none;">&#160;</span></span></li>
</ul>
<ul>
<li><cite style="font-style:normal" class="" id="CITEREFEppsteinGoodrich2007"><a href="/wiki/David_Eppstein" title="David Eppstein">Eppstein, David</a>; Goodrich, Michael T. (2007), "Space-efficient straggler identification in round-trip data streams via Newton's identities and invertible Bloom filters", <i><a href="/wiki/Workshop_on_Algorithms_and_Data_Structures" title="Workshop on Algorithms and Data Structures" class="mw-redirect">Algorithms and Data Structures, 10th International Workshop, WADS 2007</a></i>, Springer-Verlag, Lecture Notes in Computer Science 4619, pp.&#160;637–648</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Space-efficient+straggler+identification+in+round-trip+data+streams+via+Newton%27s+identities+and+invertible+Bloom+filters&amp;rft.atitle=%5B%5BWorkshop+on+Algorithms+and+Data+Structures%7CAlgorithms+and+Data+Structures%2C+10th+International+Workshop%2C+WADS+2007%5D%5D&amp;rft.aulast=Eppstein&amp;rft.aufirst=David&amp;rft.au=Eppstein%2C+David&amp;rft.au=Goodrich%2C+Michael+T.&amp;rft.date=2007&amp;rft.pages=pp.%26nbsp%3B637%E2%80%93648&amp;rft.pub=Springer-Verlag%2C+Lecture+Notes+in+Computer+Science+4619&amp;rfr_id=info:sid/en.wikipedia.org:Bloom_filter"><span style="display: none;">&#160;</span></span>, <a href="/wiki/ArXiv" title="ArXiv">arΧiv</a>:<a href="http://arxiv.org/abs/0704.3313" class="extiw" title="arxiv:0704.3313">0704.3313</a></li>
</ul>
<ul>
<li><cite style="font-style:normal" class="" id="CITEREFFanCaoAlmeidaBroder2000">Fan, Li; Cao, Pei; Almeida, Jussara; <a href="/wiki/Andrei_Broder" title="Andrei Broder">Broder, Andrei</a> (2000), "Summary Cache: A Scalable Wide-Area Web Cache Sharing Protocol", <i>IEEE/ACM Transactions on Networking</i> <b>8</b> (3): 281–293, <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<span class="neverexpand"><a href="http://dx.doi.org/10.1109%2F90.851975" class="external text" title="http://dx.doi.org/10.1109%2F90.851975" rel="nofollow">10.1109/90.851975</a></span></cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=Summary+Cache%3A+A+Scalable+Wide-Area+Web+Cache+Sharing+Protocol&amp;rft.jtitle=IEEE%2FACM+Transactions+on+Networking&amp;rft.aulast=Fan&amp;rft.aufirst=Li&amp;rft.au=Fan%2C+Li&amp;rft.au=Cao%2C+Pei&amp;rft.au=Almeida%2C+Jussara&amp;rft.au=Broder%2C+Andrei&amp;rft.date=2000&amp;rft.volume=8&amp;rft.issue=3&amp;rft.pages=281%E2%80%93293&amp;rft_id=info:doi/10.1109%2F90.851975&amp;rfr_id=info:sid/en.wikipedia.org:Bloom_filter"><span style="display: none;">&#160;</span></span>. A preliminary version appeared at SIGCOMM '98.</li>
</ul>
<ul>
<li><cite style="font-style:normal" class="" id="CITEREFKirschMitzenmacher2006">Kirsch, Adam; Mitzenmacher, Michael (2006), <a href="http://www.eecs.harvard.edu/~kirsch/pubs/bbbf/esa06.pdf" class="external text" title="http://www.eecs.harvard.edu/~kirsch/pubs/bbbf/esa06.pdf" rel="nofollow">"Less Hashing, Same Performance: Building a Better Bloom Filter"</a>, <i>Algorithms – ESA 2006, 14th Annual European Symposium</i>, Springer-Verlag, Lecture Notes in Computer Science 4168, pp.&#160;456–467, <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<span class="neverexpand"><a href="http://dx.doi.org/10.1007%2F11841036" class="external text" title="http://dx.doi.org/10.1007%2F11841036" rel="nofollow">10.1007/11841036</a></span><span class="printonly">, <a href="http://www.eecs.harvard.edu/~kirsch/pubs/bbbf/esa06.pdf" class="external free" title="http://www.eecs.harvard.edu/~kirsch/pubs/bbbf/esa06.pdf" rel="nofollow">http://www.eecs.harvard.edu/~kirsch/pubs/bbbf/esa06.pdf</a></span></cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Less+Hashing%2C+Same+Performance%3A+Building+a+Better+Bloom+Filter&amp;rft.atitle=Algorithms+%E2%80%93+ESA+2006%2C+14th+Annual+European+Symposium&amp;rft.aulast=Kirsch&amp;rft.aufirst=Adam&amp;rft.au=Kirsch%2C+Adam&amp;rft.au=Mitzenmacher%2C+Michael&amp;rft.date=2006&amp;rft.pages=pp.%26nbsp%3B456%E2%80%93467&amp;rft.pub=Springer-Verlag%2C+Lecture+Notes+in+Computer+Science+4168&amp;rft_id=info:doi/10.1007%2F11841036&amp;rft_id=http%3A%2F%2Fwww.eecs.harvard.edu%2F%7Ekirsch%2Fpubs%2Fbbbf%2Fesa06.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Bloom_filter"><span style="display: none;">&#160;</span></span></li>
</ul>
<ul>
<li><cite style="font-style:normal" class="" id="CITEREFMortensenPaghP.C4.83tra.C5.9Fcu2005">Mortensen, Christian Worm; Pagh, Rasmus; Pătraşcu, Mihai (2005), "On dynamic range reporting in one dimension", <i>Proceedings of the Thirty-seventh Annual ACM Symposium on Theory of Computing</i>, pp.&#160;104–111, <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<span class="neverexpand"><a href="http://dx.doi.org/10.1145%2F1060590.1060606" class="external text" title="http://dx.doi.org/10.1145%2F1060590.1060606" rel="nofollow">10.1145/1060590.1060606</a></span></cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=On+dynamic+range+reporting+in+one+dimension&amp;rft.atitle=Proceedings+of+the+Thirty-seventh+Annual+ACM+Symposium+on+Theory+of+Computing&amp;rft.aulast=Mortensen&amp;rft.aufirst=Christian+Worm&amp;rft.au=Mortensen%2C+Christian+Worm&amp;rft.au=Pagh%2C+Rasmus&amp;rft.au=P%C4%83tra%C5%9Fcu%2C+Mihai&amp;rft.date=2005&amp;rft.pages=pp.%26nbsp%3B104%E2%80%93111&amp;rft_id=info:doi/10.1145%2F1060590.1060606&amp;rfr_id=info:sid/en.wikipedia.org:Bloom_filter"><span style="display: none;">&#160;</span></span></li>
</ul>
<ul>
<li><cite style="font-style:normal" class="" id="CITEREFPaghPaghRao2005">Pagh, Anna; Pagh, Rasmus; Rao, S. Srinivasa (2005), <a href="http://www.it-c.dk/people/pagh/papers/bloom.pdf" class="external text" title="http://www.it-c.dk/people/pagh/papers/bloom.pdf" rel="nofollow">"An optimal Bloom filter replacement"</a>, <i>Proceedings of the Sixteenth Annual ACM-SIAM Symposium on Discrete Algorithms</i>, pp.&#160;823–829<span class="printonly">, <a href="http://www.it-c.dk/people/pagh/papers/bloom.pdf" class="external free" title="http://www.it-c.dk/people/pagh/papers/bloom.pdf" rel="nofollow">http://www.it-c.dk/people/pagh/papers/bloom.pdf</a></span></cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=An+optimal+Bloom+filter+replacement&amp;rft.atitle=Proceedings+of+the+Sixteenth+Annual+ACM-SIAM+Symposium+on+Discrete+Algorithms&amp;rft.aulast=Pagh&amp;rft.aufirst=Anna&amp;rft.au=Pagh%2C+Anna&amp;rft.au=Pagh%2C+Rasmus&amp;rft.au=Rao%2C+S.+Srinivasa&amp;rft.date=2005&amp;rft.pages=pp.%26nbsp%3B823%E2%80%93829&amp;rft_id=http%3A%2F%2Fwww.it-c.dk%2Fpeople%2Fpagh%2Fpapers%2Fbloom.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Bloom_filter"><span style="display: none;">&#160;</span></span></li>
</ul>
<ul>
<li><cite style="font-style:normal" class="" id="CITEREFPorat2008">Porat, Ely (2008), <a href="http://arxiv.org/pdf/0804.1845v1" class="external text" title="http://arxiv.org/pdf/0804.1845v1" rel="nofollow">"An Optimal Bloom Filter Replacement Based on Matrix Solving"</a>, <i>The Computing Research Repository (CoRR)</i><span class="printonly">, <a href="http://arxiv.org/pdf/0804.1845v1" class="external free" title="http://arxiv.org/pdf/0804.1845v1" rel="nofollow">http://arxiv.org/pdf/0804.1845v1</a></span></cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=An+Optimal+Bloom+Filter+Replacement+Based+on+Matrix+Solving&amp;rft.atitle=The+Computing+Research+Repository+%28CoRR%29&amp;rft.aulast=Porat&amp;rft.aufirst=Ely&amp;rft.au=Porat%2C+Ely&amp;rft.date=2008&amp;rft_id=http%3A%2F%2Farxiv.org%2Fpdf%2F0804.1845v1&amp;rfr_id=info:sid/en.wikipedia.org:Bloom_filter"><span style="display: none;">&#160;</span></span></li>
</ul>
<ul>
<li><cite style="font-style:normal" class="" id="CITEREFPutzeSandersSingler2007">Putze, F.; Sanders, P.; Singler, J. (2007), <a href="http://algo2.iti.uni-karlsruhe.de/singler/publications/cacheefficientbloomfilters-wea2007.pdf" class="external text" title="http://algo2.iti.uni-karlsruhe.de/singler/publications/cacheefficientbloomfilters-wea2007.pdf" rel="nofollow">"Cache-, Hash- and Space-Efficient Bloom Filters"</a>, <i>Experimental Algorithms, 6th International Workshop, WEA 2007</i>, Springer-Verlag, Lecture Notes in Computer Science 4525, pp.&#160;108–121, <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<span class="neverexpand"><a href="http://dx.doi.org/10.1007%2F978-3-540-72845-0" class="external text" title="http://dx.doi.org/10.1007%2F978-3-540-72845-0" rel="nofollow">10.1007/978-3-540-72845-0</a></span><span class="printonly">, <a href="http://algo2.iti.uni-karlsruhe.de/singler/publications/cacheefficientbloomfilters-wea2007.pdf" class="external free" title="http://algo2.iti.uni-karlsruhe.de/singler/publications/cacheefficientbloomfilters-wea2007.pdf" rel="nofollow">http://algo2.iti.uni-karlsruhe.de/singler/publications/cacheefficientbloomfilters-wea2007.pdf</a></span></cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Cache-%2C+Hash-+and+Space-Efficient+Bloom+Filters&amp;rft.atitle=Experimental+Algorithms%2C+6th+International+Workshop%2C+WEA+2007&amp;rft.aulast=Putze&amp;rft.aufirst=F.&amp;rft.au=Putze%2C+F.&amp;rft.au=Sanders%2C+P.&amp;rft.au=Singler%2C+J.&amp;rft.date=2007&amp;rft.pages=pp.%26nbsp%3B108%E2%80%93121&amp;rft.pub=Springer-Verlag%2C+Lecture+Notes+in+Computer+Science+4525&amp;rft_id=info:doi/10.1007%2F978-3-540-72845-0&amp;rft_id=http%3A%2F%2Falgo2.iti.uni-karlsruhe.de%2Fsingler%2Fpublications%2Fcacheefficientbloomfilters-wea2007.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Bloom_filter"><span style="display: none;">&#160;</span></span></li>
</ul>
<ul>
<li><cite style="font-style:normal" class="" id="CITEREFSethumadhavanDesikanBurgerMoore2003">Sethumadhavan, Simha; Desikan, Rajagopalan; Burger, Doug; Moore, Charles R.; Keckler, Stephen W. (2003), <a href="http://www.cs.utexas.edu/users/simha/publications/lsq.pdf" class="external text" title="http://www.cs.utexas.edu/users/simha/publications/lsq.pdf" rel="nofollow">"Scalable hardware memory disambiguation for high ILP processors"</a>, <i>36th Annual IEEE/ACM International Symposium on Microarchitecture, 2003, MICRO-36</i>, pp.&#160;399–410, <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<span class="neverexpand"><a href="http://dx.doi.org/10.1109%2FMICRO.2003.1253244" class="external text" title="http://dx.doi.org/10.1109%2FMICRO.2003.1253244" rel="nofollow">10.1109/MICRO.2003.1253244</a></span><span class="printonly">, <a href="http://www.cs.utexas.edu/users/simha/publications/lsq.pdf" class="external free" title="http://www.cs.utexas.edu/users/simha/publications/lsq.pdf" rel="nofollow">http://www.cs.utexas.edu/users/simha/publications/lsq.pdf</a></span></cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Scalable+hardware+memory+disambiguation+for+high+ILP+processors&amp;rft.atitle=36th+Annual+IEEE%2FACM+International+Symposium+on+Microarchitecture%2C+2003%2C+MICRO-36&amp;rft.aulast=Sethumadhavan&amp;rft.aufirst=Simha&amp;rft.au=Sethumadhavan%2C+Simha&amp;rft.au=Desikan%2C+Rajagopalan&amp;rft.au=Burger%2C+Doug&amp;rft.au=Moore%2C+Charles+R.&amp;rft.au=Keckler%2C+Stephen+W.&amp;rft.date=2003&amp;rft.pages=pp.%26nbsp%3B399%E2%80%93410&amp;rft_id=info:doi/10.1109%2FMICRO.2003.1253244&amp;rft_id=http%3A%2F%2Fwww.cs.utexas.edu%2Fusers%2Fsimha%2Fpublications%2Flsq.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Bloom_filter"><span style="display: none;">&#160;</span></span></li>
</ul>
<ul>
<li><cite style="font-style:normal" class="" id="CITEREFShanmugasundaramBr.C3.B6nnimannMemon2004">Shanmugasundaram, Kulesh; Brönnimann, Hervé; Memon, Nasir (2004), "Payload attribution via hierarchical Bloom filters", <i>Proceedings of the 11th ACM Conference on Computer and Communications Security</i>, pp.&#160;31–41, <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<span class="neverexpand"><a href="http://dx.doi.org/10.1145%2F1030083.1030089" class="external text" title="http://dx.doi.org/10.1145%2F1030083.1030089" rel="nofollow">10.1145/1030083.1030089</a></span></cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Payload+attribution+via+hierarchical+Bloom+filters&amp;rft.atitle=Proceedings+of+the+11th+ACM+Conference+on+Computer+and+Communications+Security&amp;rft.aulast=Shanmugasundaram&amp;rft.aufirst=Kulesh&amp;rft.au=Shanmugasundaram%2C+Kulesh&amp;rft.au=Br%C3%B6nnimann%2C+Herv%C3%A9&amp;rft.au=Memon%2C+Nasir&amp;rft.date=2004&amp;rft.pages=pp.%26nbsp%3B31%E2%80%9341&amp;rft_id=info:doi/10.1145%2F1030083.1030089&amp;rfr_id=info:sid/en.wikipedia.org:Bloom_filter"><span style="display: none;">&#160;</span></span></li>
</ul>
<ul>
<li><cite style="font-style:normal" class="" id="CITEREFStarobinskiTrachtenbergAgarwal2003">Starobinski, David; Trachtenberg, Ari; Agarwal, Sachin (2003), "Efficient PDA Synchronization", <i>IEEE Transactions on Mobile Computing</i> <b>2</b> (1)</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=Efficient+PDA+Synchronization&amp;rft.jtitle=IEEE+Transactions+on+Mobile+Computing&amp;rft.aulast=Starobinski&amp;rft.aufirst=David&amp;rft.au=Starobinski%2C+David&amp;rft.au=Trachtenberg%2C+Ari&amp;rft.au=Agarwal%2C+Sachin&amp;rft.date=2003&amp;rft.volume=2&amp;rft.issue=1&amp;rfr_id=info:sid/en.wikipedia.org:Bloom_filter"><span style="display: none;">&#160;</span></span></li>
</ul>
<ul>
<li><cite style="font-style:normal" class="" id="CITEREFSternDill1996">Stern, Ulrich; Dill, David L. (1996), <a href="http://sprout.stanford.edu/dill/PAPERS/verification/SD96A.ps" class="external text" title="http://sprout.stanford.edu/dill/PAPERS/verification/SD96A.ps" rel="nofollow">"A New Scheme for Memory-Efficient Probabilistic Verification"</a>, <i>Proceedings of Formal Description Techniques for Distributed Systems and Communication Protocols, and Protocol Specification, Testing, and Verification: IFIP TC6/WG6.1 Joint International Conference</i>, Chapman &amp; Hall, IFIP Conference Proceedings, pp.&#160;333-348<span class="printonly">, <a href="http://sprout.stanford.edu/dill/PAPERS/verification/SD96A.ps" class="external free" title="http://sprout.stanford.edu/dill/PAPERS/verification/SD96A.ps" rel="nofollow">http://sprout.stanford.edu/dill/PAPERS/verification/SD96A.ps</a></span></cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=A+New+Scheme+for+Memory-Efficient+Probabilistic+Verification&amp;rft.atitle=Proceedings+of+Formal+Description+Techniques+for+Distributed+Systems+and+Communication+Protocols%2C+and+Protocol+Specification%2C+Testing%2C+and+Verification%3A+IFIP+TC6%2FWG6.1+Joint+International+Conference&amp;rft.aulast=Stern&amp;rft.aufirst=Ulrich&amp;rft.au=Stern%2C+Ulrich&amp;rft.au=Dill%2C+David+L.&amp;rft.date=1996&amp;rft.pages=pp.%26nbsp%3B333-348&amp;rft.pub=Chapman+%26+Hall%2C+IFIP+Conference+Proceedings&amp;rft_id=http%3A%2F%2Fsprout.stanford.edu%2Fdill%2FPAPERS%2Fverification%2FSD96A.ps&amp;rfr_id=info:sid/en.wikipedia.org:Bloom_filter"><span style="display: none;">&#160;</span></span></li>
</ul>
</div>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Bloom_filter&amp;action=edit&amp;section=13" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<ul>
<li><a href="http://www.cs.wisc.edu/~cao/papers/summary-cache/node8.html" class="external text" title="http://www.cs.wisc.edu/~cao/papers/summary-cache/node8.html" rel="nofollow">Table of false-positive rates for different configurations</a></li>
<li><a href="http://blogs.sun.com/bblfish/entry/my_bloomin_friends" class="external text" title="http://blogs.sun.com/bblfish/entry/my_bloomin_friends" rel="nofollow">Bloom Filters and Social Networks with Java applet demo</a></li>
<li><a href="http://tr.ashcan.org/2008/12/bloomers.html" class="external text" title="http://tr.ashcan.org/2008/12/bloomers.html" rel="nofollow">Interactive Processing demonstration</a></li>
</ul>
<p><a name="Implementations" id="Implementations"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Bloom_filter&amp;action=edit&amp;section=14" title="Edit section: Implementations">edit</a>]</span> <span class="mw-headline">Implementations</span></h3>
<ul>
<li><a href="http://www.partow.net/programming/hashfunctions/index.html" class="external text" title="http://www.partow.net/programming/hashfunctions/index.html" rel="nofollow">Implementation in C++ and Object Pascal</a></li>
<li><a href="http://code.google.com/p/bloomerl/" class="external text" title="http://code.google.com/p/bloomerl/" rel="nofollow">Implementation in Erlang</a></li>
<li><a href="http://hackage.haskell.org/cgi-bin/hackage-scripts/package/bloomfilter" class="external text" title="http://hackage.haskell.org/cgi-bin/hackage-scripts/package/bloomfilter" rel="nofollow">Implementation in Haskell</a></li>
<li><a href="http://wwwse.inf.tu-dresden.de/xsiena/bloom_filter" class="external text" title="http://wwwse.inf.tu-dresden.de/xsiena/bloom_filter" rel="nofollow">Implementation in Java</a></li>
<li><a href="http://la.ma.la/misc/js/bloomfilter/" class="external text" title="http://la.ma.la/misc/js/bloomfilter/" rel="nofollow">Implementation in Javascript</a></li>
<li><a href="http://lemonodor.com/archives/000881.html" class="external text" title="http://lemonodor.com/archives/000881.html" rel="nofollow">Implementation in Lisp</a></li>
<li><a href="http://search.cpan.org/dist/Bloom-Filter/" class="external text" title="http://search.cpan.org/dist/Bloom-Filter/" rel="nofollow">Implementation in Perl</a></li>
<li><a href="http://www.imperialviolet.org/pybloom.html" class="external text" title="http://www.imperialviolet.org/pybloom.html" rel="nofollow">Implementation in Python</a></li>
<li><a href="http://www.rubyinside.com/bloom-filters-a-powerful-tool-599.html" class="external text" title="http://www.rubyinside.com/bloom-filters-a-powerful-tool-599.html" rel="nofollow">Implementation in Ruby</a></li>
</ul>


<!-- 
NewPP limit report
Preprocessor node count: 17244/1000000
Post-expand include size: 175356/2048000 bytes
Template argument size: 47137/2048000 bytes
Expensive parser function count: 2/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:602211-0!1!0!default!!en!2 and timestamp 20090406210654 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Bloom_filter">http://en.wikipedia.org/wiki/Bloom_filter</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Hashing" title="Category:Hashing">Hashing</a></span></div><div id="mw-hidden-catlinks" class="mw-hidden-cats-hidden">Hidden categories:&#32;<span dir='ltr'><a href="/wiki/Category:All_articles_with_unsourced_statements" title="Category:All articles with unsourced statements">All articles with unsourced statements</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_unsourced_statements_since_March_2009" title="Category:Articles with unsourced statements since March 2009">Articles with unsourced statements since March 2009</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Bloom_filter" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Bloom_filter" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Bloom_filter&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Bloom_filter&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Bloom_filter" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Bloom_filter" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Bloom_filter" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Bloom_filter&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Bloom_filter&amp;oldid=282194888" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Bloom_filter&amp;id=282194888">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/Bloomfilter">Deutsch</a></li>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Filtre_de_Bloom">Français</a></li>
				<li class="interwiki-ko"><a href="http://ko.wikipedia.org/wiki/%EB%B8%94%EB%A3%B8_%ED%95%84%ED%84%B0">한국어</a></li>
				<li class="interwiki-he"><a href="http://he.wikipedia.org/wiki/%D7%A4%D7%99%D7%9C%D7%98%D7%A8_%D7%91%D7%9C%D7%95%D7%9D">עברית</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/%E3%83%96%E3%83%AB%E3%83%BC%E3%83%A0%E3%83%95%E3%82%A3%E3%83%AB%E3%82%BF">日本語</a></li>
				<li class="interwiki-zh"><a href="http://zh.wikipedia.org/wiki/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8">中文</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 6 April 2009, at 21:06 (UTC).</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv191 in 0.058 secs. --></body></html>
