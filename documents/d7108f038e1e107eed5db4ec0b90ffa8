<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Obfuscated code,Articles with unsourced statements since March 2009,.NET Framework,AARD code,Active Server Pages,Application programming interface,Big O notation,Binary code,Brain teaser,C++,C (programming language)" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Obfuscated_code&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Obfuscated_code&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Obfuscated code - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Obfuscated_code";
		var wgTitle = "Obfuscated code";
		var wgAction = "view";
		var wgArticleId = "22739";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 283102823;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
<style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-c .de1, .source-c .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-c  {}
.source-c .head {}
.source-c .foot {}
.source-c .imp {font-weight: bold; color: red;}
.source-c .ln-xtra {color: #cc0; background-color: #ffc;}
.source-c li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-c li.li2 {font-weight: bold;}
.source-c .kw1 {color: #b1b100;}
.source-c .kw2 {color: #000000; font-weight: bold;}
.source-c .kw3 {color: #000066;}
.source-c .kw4 {color: #993333;}
.source-c .co1 {color: #808080; font-style: italic;}
.source-c .co2 {color: #339933;}
.source-c .coMULTI {color: #808080; font-style: italic;}
.source-c .es0 {color: #000099; font-weight: bold;}
.source-c .br0 {color: #66cc66;}
.source-c .st0 {color: #ff0000;}
.source-c .nu0 {color: #cc66cc;}
.source-c .me1 {color: #202020;}
.source-c .me2 {color: #202020;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-perl {line-height: normal;}
.source-perl li, .source-perl pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for perl
 * CSS class: source-perl, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-perl .de1, .source-perl .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-perl  {}
.source-perl .head {}
.source-perl .foot {}
.source-perl .imp {font-weight: bold; color: red;}
.source-perl .ln-xtra {color: #cc0; background-color: #ffc;}
.source-perl li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-perl li.li2 {font-weight: bold;}
.source-perl .kw1 {color: #b1b100;}
.source-perl .kw2 {color: #000000; font-weight: bold;}
.source-perl .kw3 {color: #000066;}
.source-perl .co1 {color: #808080; font-style: italic;}
.source-perl .coMULTI {color: #808080; font-style: italic;}
.source-perl .es0 {color: #000099; font-weight: bold;}
.source-perl .br0 {color: #66cc66;}
.source-perl .st0 {color: #ff0000;}
.source-perl .nu0 {color: #cc66cc;}
.source-perl .me1 {color: #006600;}
.source-perl .me2 {color: #006600;}
.source-perl .re0 {color: #0000ff;}
.source-perl .re4 {color: #009999;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style>		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Obfuscated_code skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Obfuscated code</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<p><b>Obfuscated code</b> is <a href="/wiki/Source_code" title="Source code">source code</a> in a <a href="/wiki/Computer_programming_language" title="Computer programming language" class="mw-redirect">computer programming language</a> that has been made difficult to understand. Programmers may deliberately obfuscate code to conceal its purpose, to deter <a href="/wiki/Reverse_engineering" title="Reverse engineering">reverse engineering</a>, or as a <a href="/wiki/Puzzle" title="Puzzle">puzzle</a> or recreational challenge for readers. Programs known as <i>obfuscators</i> transform human-readable code into obfuscated code using various techniques.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Explanation"><span class="tocnumber">1</span> <span class="toctext">Explanation</span></a></li>
<li class="toclevel-1"><a href="#Application_hardening"><span class="tocnumber">2</span> <span class="toctext">Application hardening</span></a></li>
<li class="toclevel-1"><a href="#Recreational_obfuscation"><span class="tocnumber">3</span> <span class="toctext">Recreational obfuscation</span></a>
<ul>
<li class="toclevel-2"><a href="#Examples"><span class="tocnumber">3.1</span> <span class="toctext">Examples</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Step_by_step"><span class="tocnumber">4</span> <span class="toctext">Step by step</span></a>
<ul>
<li class="toclevel-2"><a href="#Rewrite_for_as_while._Use_special_values."><span class="tocnumber">4.1</span> <span class="toctext">Rewrite for as while. Use special values.</span></a></li>
<li class="toclevel-2"><a href="#Change_iteration_into_recursion"><span class="tocnumber">4.2</span> <span class="toctext">Change iteration into recursion</span></a></li>
<li class="toclevel-2"><a href="#Obfuscate_constructs_and_meaningless_variable_names"><span class="tocnumber">4.3</span> <span class="toctext">Obfuscate constructs and meaningless variable names</span></a></li>
<li class="toclevel-2"><a href="#Remove_intermediate_variables_and_literals"><span class="tocnumber">4.4</span> <span class="toctext">Remove intermediate variables and literals</span></a></li>
<li class="toclevel-2"><a href="#Obfuscate_names_again"><span class="tocnumber">4.5</span> <span class="toctext">Obfuscate names again</span></a></li>
<li class="toclevel-2"><a href="#Remove_literals"><span class="tocnumber">4.6</span> <span class="toctext">Remove literals</span></a></li>
<li class="toclevel-2"><a href="#Remove_redundant_text"><span class="tocnumber">4.7</span> <span class="toctext">Remove redundant text</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Unintentional_obfuscation"><span class="tocnumber">5</span> <span class="toctext">Unintentional obfuscation</span></a></li>
<li class="toclevel-1"><a href="#Typography"><span class="tocnumber">6</span> <span class="toctext">Typography</span></a></li>
<li class="toclevel-1"><a href="#Obfuscation_by_code_morphing"><span class="tocnumber">7</span> <span class="toctext">Obfuscation by code morphing</span></a></li>
<li class="toclevel-1"><a href="#Obfuscation_in_malicious_software"><span class="tocnumber">8</span> <span class="toctext">Obfuscation in malicious software</span></a></li>
<li class="toclevel-1"><a href="#Obfuscation_for_VM_migration"><span class="tocnumber">9</span> <span class="toctext">Obfuscation for VM migration</span></a></li>
<li class="toclevel-1"><a href="#Advantages_of_obfuscation"><span class="tocnumber">10</span> <span class="toctext">Advantages of obfuscation</span></a>
<ul>
<li class="toclevel-2"><a href="#Intellectual_property_protection"><span class="tocnumber">10.1</span> <span class="toctext">Intellectual property protection</span></a></li>
<li class="toclevel-2"><a href="#Reduced_security_exposure"><span class="tocnumber">10.2</span> <span class="toctext">Reduced security exposure</span></a></li>
<li class="toclevel-2"><a href="#Size_reduction"><span class="tocnumber">10.3</span> <span class="toctext">Size reduction</span></a></li>
<li class="toclevel-2"><a href="#Library_linking"><span class="tocnumber">10.4</span> <span class="toctext">Library linking</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Disadvantages_of_obfuscation"><span class="tocnumber">11</span> <span class="toctext">Disadvantages of obfuscation</span></a>
<ul>
<li class="toclevel-2"><a href="#When_used_alone"><span class="tocnumber">11.1</span> <span class="toctext">When used alone</span></a></li>
<li class="toclevel-2"><a href="#Debugging"><span class="tocnumber">11.2</span> <span class="toctext">Debugging</span></a></li>
<li class="toclevel-2"><a href="#Portability"><span class="tocnumber">11.3</span> <span class="toctext">Portability</span></a></li>
<li class="toclevel-2"><a href="#Conflicts_with_Reflection_APIs"><span class="tocnumber">11.4</span> <span class="toctext">Conflicts with Reflection APIs</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Obfuscating_software"><span class="tocnumber">12</span> <span class="toctext">Obfuscating software</span></a></li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">13</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#Notes"><span class="tocnumber">14</span> <span class="toctext">Notes</span></a></li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">15</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">16</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Explanation" id="Explanation"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Obfuscated_code&amp;action=edit&amp;section=1" title="Edit section: Explanation">edit</a>]</span> <span class="mw-headline">Explanation</span></h3>
<table class="metadata plainlinks ambox ambox-content" style="">
<tr>
<td class="mbox-image">
<div style="width: 52px;"><a href="/wiki/File:Ambox_content.png" class="image" title="Ambox content.png"><img alt="" src="http://upload.wikimedia.org/wikipedia/en/f/f4/Ambox_content.png" width="40" height="40" border="0" /></a></div>
</td>
<td class="mbox-text" style="">This article <b>may contain <a href="/wiki/Wikipedia:No_original_research" title="Wikipedia:No original research">original research</a> or <a href="/wiki/Wikipedia:Verifiability" title="Wikipedia:Verifiability">unverified claims</a></b>. Please <a href="http://en.wikipedia.org/w/index.php?title=Obfuscated_code&amp;action=edit" class="external text" title="http://en.wikipedia.org/w/index.php?title=Obfuscated_code&amp;action=edit" rel="nofollow">improve the article</a> by adding <a href="/wiki/Wikipedia:References" title="Wikipedia:References" class="mw-redirect">references</a>. See the <a href="/wiki/Talk:Obfuscated_code" title="Talk:Obfuscated code">talk page</a> for details. <small><i>(April 2008)</i></small></td>
</tr>
</table>
<p>Some languages may be more prone to obfuscation than others.<sup id="cite_ref-0" class="reference"><a href="#cite_note-0" title=""><span>[</span>1<span>]</span></a></sup><sup id="cite_ref-1" class="reference"><a href="#cite_note-1" title=""><span>[</span>2<span>]</span></a></sup> <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a>,<sup id="cite_ref-2" class="reference"><a href="#cite_note-2" title=""><span>[</span>3<span>]</span></a></sup> <a href="/wiki/C%2B%2B" title="C++">C++</a>,<sup id="cite_ref-3" class="reference"><a href="#cite_note-3" title=""><span>[</span>4<span>]</span></a></sup> and <a href="/wiki/Perl" title="Perl">Perl</a><sup id="cite_ref-4" class="reference"><a href="#cite_note-4" title=""><span>[</span>5<span>]</span></a></sup> are most often cited as easy to obfuscate. Macro preprocessors are often used to create hard-to-read code by masking the standard language syntax and grammar from the main body of code. The term <i><b>shrouded code</b></i> has also been used.</p>
<p>Obfuscating code to prevent <a href="/wiki/Reverse_engineering" title="Reverse engineering">reverse engineering</a> is typically done to manage risks that stem from unauthorized access to source code. These risks include loss of intellectual property, ease of probing for application vulnerabilities and loss of revenue that can result when applications are reverse engineered, modified to circumvent metering or usage control and then recompiled. Obfuscating code is, therefore, also a compensating control to manage these risks. The risk is greater in computing environments such as Java and Microsoft's .NET which take advantage of <a href="/wiki/Just-in-time_compilation" title="Just-in-time compilation">just-in-time compilation</a> technology that allow developers to deploy an application as <a href="/wiki/Intermediate_code" title="Intermediate code" class="mw-redirect">intermediate code</a> rather than code which has been compiled into machine language before being deployed.</p>
<p>Obfuscators may be used to compact <a href="/wiki/Object_code" title="Object code" class="mw-redirect">object code</a> or interpreted code without affecting its behaviour when size is important. Common cases include <a href="/wiki/MIDlet" title="MIDlet">MIDlets</a> – in which the meaningful identifiers embedded in the Java class files are replaced with shorter ones – and <a href="/wiki/Javascript" title="Javascript" class="mw-redirect">Javascript</a> code on the web.</p>
<p>Programs written in languages such as <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a> or <a href="/wiki/Pascal_(programming_language)" title="Pascal (programming language)">Pascal</a> are <a href="/wiki/Compiled" title="Compiled" class="mw-redirect">compiled</a> into the <a href="/wiki/Machine_language" title="Machine language" class="mw-redirect">machine language</a> of a given computer before they are run on it. This conversion is necessary because programmers write <a href="/wiki/Source_code" title="Source code">source code</a> while computers run <a href="/wiki/Machine_code" title="Machine code">machine code</a>. Generally, there is a one way transform from source code to machine code. Machine code is not encrypted and is easy for anyone to see, but the format is so tedious for humans that reverse engineering is slow and difficult. That being said, compilers tend to map source code to machine code in a predictable way, and although <a href="/wiki/Optimization_(computer_science)" title="Optimization (computer science)">optimization</a> obfuscates this, it is often possible to reconstruct a fair copy of the original source code.</p>
<p><a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a> and <a href="/wiki/.NET_Framework" title=".NET Framework">.NET</a> languages (e.g., <a href="/wiki/Oxygene_(programming_language)" title="Oxygene (programming language)">Oxygene</a>, <a href="/wiki/C_Sharp_(programming_language)" title="C Sharp (programming language)">C#</a>, <a href="/wiki/Visual_Basic" title="Visual Basic">Visual Basic</a>) take a different approach to compilation. They are far easier to reverse engineer because they do not compile to machine code, they compile into <a href="/wiki/Intermediate_code" title="Intermediate code" class="mw-redirect">intermediate code</a>.</p>
<p><a href="/wiki/Microsoft" title="Microsoft">Microsoft</a> recommends using the Script Encoder to obfuscate the <a href="/wiki/Active_Server_Pages" title="Active Server Pages">ASP</a> files, so in case the <a href="/wiki/Web_server" title="Web server">web server</a> is compromised, the <a href="/wiki/Software_cracking" title="Software cracking">cracker</a> would be unable to find out how your ASP applications work. The Script Encoder works also on <a href="/wiki/JScript" title="JScript">JScript</a> and <a href="/wiki/VBScript" title="VBScript">VBScript</a> files. Note that the encoded JScript is only functional in <a href="/wiki/Internet_Explorer" title="Internet Explorer">Internet Explorer</a>. However, the documentation states, "Note that this encoding only prevents casual viewing of your code; it will not prevent the determined hacker from seeing what you've done and how."</p>
<p><a name="Application_hardening" id="Application_hardening"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Obfuscated_code&amp;action=edit&amp;section=2" title="Edit section: Application hardening">edit</a>]</span> <span class="mw-headline">Application hardening</span></h3>
<p>Obfuscation is one technique used in a process called "application hardening", which also includes such techniques as tamper detection and response, application encryption, and custom <a href="/wiki/Virtual_machine" title="Virtual machine">virtual machines</a>.</p>
<p><a name="Recreational_obfuscation" id="Recreational_obfuscation"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Obfuscated_code&amp;action=edit&amp;section=3" title="Edit section: Recreational obfuscation">edit</a>]</span> <span class="mw-headline">Recreational obfuscation</span></h2>
<p>Writing and reading obfuscated code can be a <a href="/wiki/Brain_teaser" title="Brain teaser">brain teaser</a> for programmers. A number of programming contests reward the most creatively obfuscated code: the <a href="/wiki/International_Obfuscated_C_Code_Contest" title="International Obfuscated C Code Contest">International Obfuscated C Code Contest</a>, <a href="/wiki/Obfuscated_Perl_Contest" title="Obfuscated Perl Contest">Obfuscated Perl Contest</a>, <a href="http://iorcc.blogspot.com/" class="external text" title="http://iorcc.blogspot.com/" rel="nofollow">International Obfuscated Ruby Code Contest</a>, and Obfuscated PostScript Contest.</p>
<p>Types of obfuscations include simple keyword substitution, use or non-use of whitespace to create artistic effects, clever self-generating or heavily compressed programs, and programs that are valid and operate similarly in multiple programming languages.</p>
<p>Short obfuscated <a href="/wiki/Perl" title="Perl">Perl</a> programs printing "<a href="/wiki/Just_another_Perl_hacker" title="Just another Perl hacker">Just another Perl hacker</a>" or something similar are often found in <a href="/wiki/Signature_block" title="Signature block">signatures</a> of Perl programmers. These are informally known as JAPHs, and the origin of this practice is generally credited to <a href="/wiki/Randal_Schwartz" title="Randal Schwartz" class="mw-redirect">Randal Schwartz</a>.</p>
<p><a name="Examples" id="Examples"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Obfuscated_code&amp;action=edit&amp;section=4" title="Edit section: Examples">edit</a>]</span> <span class="mw-headline">Examples</span></h3>
<p>This is an example of a winning entry from the International Obfuscated C Code competition written by Ian Phillipps in 1988<sup id="cite_ref-5" class="reference"><a href="#cite_note-5" title=""><span>[</span>6<span>]</span></a></sup> and subsequently reverse engineered by Thomas Ball<sup id="cite_ref-6" class="reference"><a href="#cite_note-6" title=""><span>[</span>7<span>]</span></a></sup>.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="co2">#include &lt;stdio.h&gt;</span>
main<span class="br0">(</span>t,_,a<span class="br0">)</span><span class="kw4">char</span> *a;<span class="br0">{</span><span class="kw1">return</span>!<span class="nu0">0</span>&lt;t?t&lt;<span class="nu0">3</span>?main<span class="br0">(</span><span class="nu0">-79</span>,<span class="nu0">-13</span>,a+main<span class="br0">(</span><span class="nu0">-87</span>,<span class="nu0">1</span>-_,
main<span class="br0">(</span><span class="nu0">-86</span>,<span class="nu0">0</span>,a<span class="nu0">+1</span><span class="br0">)</span>+a<span class="br0">)</span><span class="br0">)</span>:<span class="nu0">1</span>,t&lt;_?main<span class="br0">(</span>t<span class="nu0">+1</span>,_,a<span class="br0">)</span>:<span class="nu0">3</span>,main<span class="br0">(</span><span class="nu0">-94</span>,<span class="nu0">-27</span>+t,a<span class="br0">)</span>&amp;&amp;t==<span class="nu0">2</span>?_&lt;<span class="nu0">13</span>?
main<span class="br0">(</span><span class="nu0">2</span>,_<span class="nu0">+1</span>,<span class="st0">"%s %d %d<span class="es0">\n</span>"</span><span class="br0">)</span>:<span class="nu0">9</span>:<span class="nu0">16</span>:t&lt;<span class="nu0">0</span>?t&lt;<span class="nu0">-72</span>?main<span class="br0">(</span>_,t,
<span class="st0">"@n'+,#'/*{}w+/w#cdnr/+,{}r/*de}+,/*{*+,/w{%+,/w#q#n+,/#{l,+,/n{n+,/+#n+,/#<span class="es0">\</span>
;#q#n+,/+k#;*+,/'r :'d*'3,}{w+K w'K:'+}e#';dq#'l <span class="es0">\</span>
q#'+d'K#!/+k#;q#'r}eKK#}w'r}eKK{nl]'/#;#q#n'){)#}w'){){nl]'/+#n';d}rw' i;# <span class="es0">\</span>
){nl]!/n{n#'; r{#w'r nc{nl]'/#{l,+'K {rw' iK{;[{nl]'/w#q#n'wk nw' <span class="es0">\</span>
iwk{KK{nl]!/w{%'l##w#' i; :{nl]'/*{q#'ld;r'}{nlwb!/*de}'c <span class="es0">\</span>
;;{nl'-{}rw]'/+,}##'*}#nc,',#nw]'/+kd'+e}+;#'rdq#w! nr'/ ') }+}{rl#'{n' ')# <span class="es0">\</span>
}'+}##(!!/"</span><span class="br0">)</span>
:t&lt;<span class="nu0">-50</span>?_==*a?putchar<span class="br0">(</span><span class="nu0">31</span><span class="br0">[</span>a<span class="br0">]</span><span class="br0">)</span>:main<span class="br0">(</span><span class="nu0">-65</span>,_,a<span class="nu0">+1</span><span class="br0">)</span>:main<span class="br0">(</span><span class="br0">(</span>*a==<span class="st0">'/'</span><span class="br0">)</span>+t,_,a<span class="nu0">+1</span><span class="br0">)</span>
  :<span class="nu0">0</span>&lt;t?main<span class="br0">(</span><span class="nu0">2</span>,<span class="nu0">2</span>,<span class="st0">"%s"</span><span class="br0">)</span>:*a==<span class="st0">'/'</span>||main<span class="br0">(</span><span class="nu0">0</span>,main<span class="br0">(</span><span class="nu0">-61</span>,*a,
<span class="st0">"!ek;dc i@bK'(q)-[w]*%n+r3#l,{}:<span class="es0">\n</span>uwloca-O;m .vpbks,fxntdCeghiry"</span><span class="br0">)</span>,a<span class="nu0">+1</span><span class="br0">)</span>;<span class="br0">}</span>
</pre></div>
<p>Although unintelligible at first glance, it is a legal <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a> program that when compiled and run will generate the 12 verses of <i><a href="/wiki/The_Twelve_Days_of_Christmas_(song)" title="The Twelve Days of Christmas (song)">The 12 Days of Christmas</a></i>. It contains all the strings required for the poem in an encoded form inlined in the code. The code iterates through the 12 days displaying what it needs to.</p>
<p>Another example is this short program that generates mazes of arbitrary length:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">char</span>*M,A,Z,E=<span class="nu0">40</span>,J<span class="br0">[</span><span class="nu0">40</span><span class="br0">]</span>,T<span class="br0">[</span><span class="nu0">40</span><span class="br0">]</span>;main<span class="br0">(</span>C<span class="br0">)</span><span class="br0">{</span><span class="kw1">for</span><span class="br0">(</span>*J=A=scanf<span class="br0">(</span>M=<span class="st0">"%d"</span>,&amp;C<span class="br0">)</span>;
--            E;             J<span class="br0">[</span>              E<span class="br0">]</span>             =T
<span class="br0">[</span>E   <span class="br0">]</span>=  E<span class="br0">)</span>   <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"._"</span><span class="br0">)</span>;  <span class="kw1">for</span><span class="br0">(</span>;<span class="br0">(</span>A-=Z=!Z<span class="br0">)</span>  ||  <span class="br0">(</span><span class="kw3">printf</span><span class="br0">(</span><span class="st0">"<span class="es0">\n</span>|"</span>
<span class="br0">)</span>    ,   A    =              <span class="nu0">39</span>              ,C             --
<span class="br0">)</span>    ;   Z    ||    <span class="kw3">printf</span>   <span class="br0">(</span>M   <span class="br0">)</span><span class="br0">)</span>M<span class="br0">[</span>Z<span class="br0">]</span>=Z<span class="br0">[</span>A-<span class="br0">(</span>E   =A<span class="br0">[</span>J-Z<span class="br0">]</span><span class="br0">)</span>&amp;&amp;!C
&amp;    A   ==             T<span class="br0">[</span>                                  A<span class="br0">]</span>
|<span class="nu0">6</span>&lt;&lt;<span class="nu0">27</span>&lt;rand<span class="br0">(</span><span class="br0">)</span>||!C&amp;!Z?J<span class="br0">[</span>T<span class="br0">[</span>E<span class="br0">]</span>=T<span class="br0">[</span>A<span class="br0">]</span><span class="br0">]</span>=E,J<span class="br0">[</span>T<span class="br0">[</span>A<span class="br0">]</span>=A-Z<span class="br0">]</span>=A,<span class="st0">"_."</span>:<span class="st0">" |"</span><span class="br0">]</span>;<span class="br0">}</span>
</pre></div>
<p>Modern C compilers don't allow constant strings to be overwritten, which can be avoided by changing the first line to</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">char</span> M<span class="br0">[</span><span class="nu0">2</span><span class="br0">]</span>,A,Z,E=<span class="nu0">40</span>,J<span class="br0">[</span><span class="nu0">40</span><span class="br0">]</span>,T<span class="br0">[</span><span class="nu0">40</span><span class="br0">]</span>;main<span class="br0">(</span>C<span class="br0">)</span><span class="br0">{</span><span class="kw1">for</span><span class="br0">(</span>*J=A=scanf<span class="br0">(</span><span class="st0">"%d"</span>,&amp;C<span class="br0">)</span>;
</pre></div>
<p>Versions of <a href="/wiki/GNU_Compiler_Collection" title="GNU Compiler Collection">gcc</a> (the GNU Compiler for C) prior to 4.0 can compile the program in its original form if the <code>-fwritable-strings</code> flag is used.</p>
<p>This example program in Java computes the days left in a year based on the day:</p>
<pre>
           return (int) ((((x - 2) * (x - 3) * (x - 4) * (x - 5) * (x - 6) *
                           (x - 7) * (x - 8) * (x - 9) * (x - 10) * (x - 11) *
                           (x - 12) * 31) /
                          ((x - 2) * (x - 3) * (x - 4) * (x - 5) * (x - 6) *
                           (x - 7) * (x - 8) * (x - 9) * (x - 10) * (x - 11) *
                           (x - 12) + .00001)) +
                         (((x - 3) * (x - 4) * (x - 5) * (x - 6) * (x - 7) *
                           (x - 8) * (x - 9) * (x - 10) * (x - 11) * (x - 12) *
                           (28 + z)) /
                          ((x - 3) * (x - 4) * (x - 5) * (x - 6) * (x - 7) *
                           (x - 8) * (x - 9) * (x - 10) * (x - 11) * (x - 12) +
                           .00001)) +
                         (((x - 4) * (x - 5) * (x - 6) * (x - 7) * (x - 8) *
                           (x - 9) * (x - 10) * (x - 11) * (x - 12) * 31) /
                          ((x - 4) * (x - 5) * (x - 6) * (x - 7) * (x - 8) *
                           (x - 9) * (x - 10) * (x - 11) * (x - 12) + .00001)) +
                         (((x - 5) * (x - 6) * (x - 7) * (x - 8) * (x - 9) *
                           (x - 10) * (x - 11) * (x - 12) * 30) /
                          ((x - 5) * (x - 6) * (x - 7) * (x - 8) * (x - 9) *
                           (x - 10) * (x - 11) * (x - 12) + .00001)) +
                         (((x - 6) * (x - 7) * (x - 8) * (x - 9) * (x - 10) *
                           (x - 11) * (x - 12) * 31) /
                          ((x - 6) * (x - 7) * (x - 8) * (x - 9) * (x - 10) *
                           (x - 11) * (x - 12
                           ) + .00001)) +
                         (((x - 7) * (x - 8) * (x - 9) * (x - 10) * (x - 11) *
                           (x - 12) * 30) /
                          ((x - 7) * (x - 8) * (x - 9) * (x - 10) * (x - 11) *
                           (x - 12) + .00001)) +
                         (((x - 8) * (x - 9) * (x - 10) * (x - 11) * (x - 12) *
                           31) /
                          ((x - 8) * (x - 9) * (x - 10) * (x - 11) * (x - 12) +
                           .00001)) +
                         (((x - 9) * (x - 10) * (x - 11) * (x - 12) * 31) /
                          ((x - 9) * (x - 10) * (x - 11) * (x - 12) + .00001)) +
                         (((x - 10) * (x - 11) * (x - 12) * 30) /
                          ((x - 10) * (x - 11) * (x - 12) + .00001)) +
                         (((x - 11) * (x - 12) * 31) /
                          ((x - 11) * (x - 12) + .00001)) +
                         (((x - 12) * 30) / ((x - 12) + .00001)) + 31 + .1) -
                   y;
      
</pre>
<p>An example of a JAPH:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-perl">
<span class="re0">@P</span>=<span class="kw3">split</span>//,<span class="st0">".URRUU<span class="es0">\c</span>8R"</span>;<span class="re0">@d</span>=<span class="kw3">split</span>//,<span class="st0">"<span class="es0">\n</span>rekcah xinU / lreP rehtona tsuJ"</span>;sub p<span class="br0">{</span>
<span class="re0">@p</span><span class="br0">{</span><span class="st0">"r$p"</span>,<span class="st0">"u$p"</span><span class="br0">}</span>=<span class="br0">(</span>P,P<span class="br0">)</span>;pipe<span class="st0">"r$p"</span>,<span class="st0">"u$p"</span>;++<span class="re0">$p</span>;<span class="br0">(</span><span class="re0">$q</span>*=<span class="nu0">2</span><span class="br0">)</span>+=<span class="re0">$f</span>=!<span class="kw3">fork</span>;map<span class="br0">{</span><span class="re0">$P</span>=<span class="re0">$P</span><span class="br0">[</span><span class="re0">$f</span>^ord
<span class="br0">(</span><span class="re0">$p</span><span class="br0">{</span><span class="re0">$_</span><span class="br0">}</span><span class="br0">)</span>&amp;<span class="nu0">6</span><span class="br0">]</span>;<span class="re0">$p</span><span class="br0">{</span><span class="re0">$_</span><span class="br0">}</span>=/ ^<span class="re0">$P</span>/ix?<span class="re0">$P</span>:close<span class="re0">$_</span><span class="br0">}</span>keys<span class="re0">%p</span><span class="br0">}</span>p;p;p;p;p;map<span class="br0">{</span><span class="re0">$p</span><span class="br0">{</span><span class="re0">$_</span><span class="br0">}</span>=~/^<span class="br0">[</span>P.<span class="br0">]</span>/&amp;&amp;
close<span class="re0">$_</span><span class="br0">}</span><span class="re0">%p</span>;wait <span class="kw1">until</span>$?;map<span class="br0">{</span>/^r/&amp;&amp;&lt;<span class="re0">$_</span>&gt;<span class="br0">}</span><span class="re0">%p</span>;<span class="re0">$_</span>=<span class="re0">$d</span><span class="br0">[</span><span class="re0">$q</span><span class="br0">]</span>;sleep <span class="kw3">rand</span><span class="br0">(</span><span class="nu0">2</span><span class="br0">)</span><span class="kw1">if</span>/\S/;print
</pre></div>
<p>This slowly displays the text "Just another Perl / Unix hacker", multiple characters at a time, with delays. An explanation can be found <a href="http://perl.plover.com/obfuscated/" class="external text" title="http://perl.plover.com/obfuscated/" rel="nofollow">here</a>.</p>
<p>Some <a href="/wiki/Python_(programming_language)" title="Python (programming language)">Python</a> examples can be found in the <a href="http://www.python.org/doc/faq/programming/#is-it-possible-to-write-obfuscated-one-liners-in-python" class="external text" title="http://www.python.org/doc/faq/programming/#is-it-possible-to-write-obfuscated-one-liners-in-python" rel="nofollow">official Python programming FAQ</a>.</p>
<p><a name="Step_by_step" id="Step_by_step"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Obfuscated_code&amp;action=edit&amp;section=5" title="Edit section: Step by step">edit</a>]</span> <span class="mw-headline">Step by step</span></h2>
<p>The following section gives an example of a developer's attempt to obfuscate a simple program. It is an example, not a set of rules.</p>
<p>This simple <a href="/wiki/C_programming_language" title="C programming language" class="mw-redirect">C</a> program prints out the prime numbers less than 100, using the <a href="/wiki/Sieve_of_eratosthenes" title="Sieve of eratosthenes" class="mw-redirect">sieve of eratosthenes</a>:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">void</span> primes<span class="br0">(</span><span class="kw4">int</span> cap<span class="br0">)</span> <span class="br0">{</span>
  <span class="kw4">int</span> i, j, composite;
  <span class="kw1">for</span><span class="br0">(</span>i = <span class="nu0">2</span>; i &lt; cap; ++i<span class="br0">)</span> <span class="br0">{</span>
    composite = <span class="nu0">0</span>;
    <span class="kw1">for</span><span class="br0">(</span>j = <span class="nu0">2</span>; j * j &lt; i; ++j<span class="br0">)</span> 
      composite += !<span class="br0">(</span>i % j<span class="br0">)</span>;
    <span class="kw1">if</span><span class="br0">(</span>!composite<span class="br0">)</span>
      <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"%d<span class="es0">\t</span>"</span>, i<span class="br0">)</span>;
  <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="kw4">int</span> main<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> 
  primes<span class="br0">(</span><span class="nu0">100</span><span class="br0">)</span>;
<span class="br0">}</span>
</pre></div>
<p>The following sequence of transformations reduces the <code>primes</code> program into a single, obfuscated line of code.</p>
<p><a name="Rewrite_for_as_while._Use_special_values." id="Rewrite_for_as_while._Use_special_values."></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Obfuscated_code&amp;action=edit&amp;section=6" title="Edit section: Rewrite for as while. Use special values.">edit</a>]</span> <span class="mw-headline">Rewrite <code>for</code> as <code>while</code>. Use special values.</span></h4>
<p>A <code>for</code> loop can be transformed into a <code>while</code> loop followed by a series of cascading <code>if-else</code> statements (in fact in C, a <code>for</code> loop is a thin disguise for a <code>while</code> loop anyway—the differences are mainly in lexical scope.)</p>
<p>Also we can take advantage of prior knowledge. If we know that <code>j</code> is 0 we can use it instead of the literal 0— thus not revealing that we are using zero, but a variable that could take any value (but happens to be zero). 0 is a common enough constant, but no programmer ever adds zero or multiplies or divides or subtracts it, so it is an easy place to start for the reverse engineer. So, rewrite the <code>primes</code> function like this:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">void</span> primes<span class="br0">(</span><span class="kw4">int</span> cap<span class="br0">)</span> <span class="br0">{</span> 
  <span class="kw4">int</span> i, j, composite, t = <span class="nu0">0</span>;
  <span class="kw1">while</span><span class="br0">(</span>t &lt; cap * cap<span class="br0">)</span> <span class="br0">{</span>
    i = t / cap;
    j = t++ % cap;
    <span class="kw1">if</span><span class="br0">(</span>i &lt;= <span class="nu0">1</span><span class="br0">)</span>;
    <span class="kw1">else</span> <span class="kw1">if</span><span class="br0">(</span>!j<span class="br0">)</span>
      composite = j;
    <span class="kw1">else</span> <span class="kw1">if</span><span class="br0">(</span>j == i &amp;&amp; !composite<span class="br0">)</span>
      <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"%d<span class="es0">\t</span>"</span>,i<span class="br0">)</span>;
    <span class="kw1">else</span> <span class="kw1">if</span><span class="br0">(</span>j &gt; <span class="nu0">1</span> &amp;&amp; j &lt; i<span class="br0">)</span>
      composite += !<span class="br0">(</span>i % j<span class="br0">)</span>;  
  <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="kw4">int</span> main<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
  primes<span class="br0">(</span><span class="nu0">100</span><span class="br0">)</span>;
<span class="br0">}</span>
</pre></div>
<p><a name="Change_iteration_into_recursion" id="Change_iteration_into_recursion"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Obfuscated_code&amp;action=edit&amp;section=7" title="Edit section: Change iteration into recursion">edit</a>]</span> <span class="mw-headline">Change iteration into recursion</span></h4>
<p>Any loop can be replaced by recursion. Generally one strives to eliminate recursion because of the <a href="/wiki/Computational_overhead" title="Computational overhead">computational overhead</a>, but it may be deliberately introduced for obfuscation. So, replace the <code>while</code> loop with recursion. Two new parameters are needed by the <code>primes</code> function. Let's also conjoin two statements with the comma operator in the third <code>if</code> block. An additional <code>if-else</code> block must be added to capture the situation in the iterative version where program flow fails all of the <code>if</code>-conditions and the <code>while</code> loop would continue with <code>t</code> incremented by 1:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">void</span> primes<span class="br0">(</span><span class="kw4">int</span> cap, <span class="kw4">int</span> t, <span class="kw4">int</span> composite<span class="br0">)</span> <span class="br0">{</span>
  <span class="kw4">int</span> i,j;
  i = t / cap;
  j = t % cap;
  <span class="kw1">if</span><span class="br0">(</span>i &lt;= <span class="nu0">1</span><span class="br0">)</span>
    primes<span class="br0">(</span>cap,t<span class="nu0">+1</span>,composite<span class="br0">)</span>;
  <span class="kw1">else</span> <span class="kw1">if</span><span class="br0">(</span>!j<span class="br0">)</span>
    primes<span class="br0">(</span>cap,t<span class="nu0">+1</span>,j<span class="br0">)</span>;
  <span class="kw1">else</span> <span class="kw1">if</span><span class="br0">(</span>j == i &amp;&amp; !composite<span class="br0">)</span>
    <span class="br0">(</span><span class="kw3">printf</span><span class="br0">(</span><span class="st0">"%d<span class="es0">\t</span>"</span>,i<span class="br0">)</span>, primes<span class="br0">(</span>cap,t<span class="nu0">+1</span>,composite<span class="br0">)</span><span class="br0">)</span>;
  <span class="kw1">else</span> <span class="kw1">if</span><span class="br0">(</span>j &gt; <span class="nu0">1</span> &amp;&amp; j &lt; i<span class="br0">)</span>
    primes<span class="br0">(</span>cap,t<span class="nu0">+1</span>, composite + !<span class="br0">(</span>i % j<span class="br0">)</span><span class="br0">)</span>;
  <span class="kw1">else</span> <span class="kw1">if</span><span class="br0">(</span>t &lt; cap * cap<span class="br0">)</span>
    primes<span class="br0">(</span>cap,t<span class="nu0">+1</span>,composite<span class="br0">)</span>;
<span class="br0">}</span>
 
<span class="kw4">int</span> main<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
  primes<span class="br0">(</span><span class="nu0">100</span>,<span class="nu0">0</span>,<span class="nu0">0</span><span class="br0">)</span>;
<span class="br0">}</span>
</pre></div>
<p><a name="Obfuscate_constructs_and_meaningless_variable_names" id="Obfuscate_constructs_and_meaningless_variable_names"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Obfuscated_code&amp;action=edit&amp;section=8" title="Edit section: Obfuscate constructs and meaningless variable names">edit</a>]</span> <span class="mw-headline">Obfuscate constructs and meaningless variable names</span></h4>
<p>No construct or name is of itself obfuscating, but context—or rather the lack of it—can make it so. Change the variable names to single letters and replace the <code>if-else</code> structure with the ternary <code>?</code> conditional operator (e.g. <code>if(A) B else if(C) D else E</code> becomes <code>A&#160;? B&#160;: C&#160;? D&#160;: E</code>). Reorder expressions to the most counterintuitive that the language will allow:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">void</span> primes<span class="br0">(</span><span class="kw4">int</span> m, <span class="kw4">int</span> t, <span class="kw4">int</span> c<span class="br0">)</span> <span class="br0">{</span>
  <span class="kw4">int</span> i,j;
  i = t / m;
  j = t % m;
  <span class="br0">(</span>i &lt;= <span class="nu0">1</span><span class="br0">)</span> ? primes<span class="br0">(</span>m,t<span class="nu0">+1</span>,c<span class="br0">)</span> : <span class="br0">(</span>!j<span class="br0">)</span> ? primes<span class="br0">(</span>m,t<span class="nu0">+1</span>,j<span class="br0">)</span> : <span class="br0">(</span>j == i &amp;&amp; !c<span class="br0">)</span> ? 
  <span class="br0">(</span><span class="kw3">printf</span><span class="br0">(</span><span class="st0">"%d<span class="es0">\t</span>"</span>,i<span class="br0">)</span>, primes<span class="br0">(</span>m,t<span class="nu0">+1</span>,c<span class="br0">)</span><span class="br0">)</span> : <span class="br0">(</span>j &gt; <span class="nu0">1</span> &amp;&amp; j &lt; i<span class="br0">)</span> ? 
  primes<span class="br0">(</span>m,t<span class="nu0">+1</span>,c + !<span class="br0">(</span>i % j<span class="br0">)</span><span class="br0">)</span> : <span class="br0">(</span>t &lt; m * m<span class="br0">)</span> ? primes<span class="br0">(</span>m,t<span class="nu0">+1</span>,c<span class="br0">)</span> : <span class="nu0">0</span>;
<span class="br0">}</span>
 
<span class="kw4">int</span> main<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
  primes<span class="br0">(</span><span class="nu0">100</span>,<span class="nu0">0</span>,<span class="nu0">0</span><span class="br0">)</span>;
<span class="br0">}</span>
</pre></div>
<p><a name="Remove_intermediate_variables_and_literals" id="Remove_intermediate_variables_and_literals"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Obfuscated_code&amp;action=edit&amp;section=9" title="Edit section: Remove intermediate variables and literals">edit</a>]</span> <span class="mw-headline">Remove intermediate variables and literals</span></h4>
<p>Remove the intermediate variables <code>i</code> and <code>j</code> and replace them with the expressions they stood for, <code>(t / m)</code> and <code>(t&#160;% m)</code>:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">void</span> primes<span class="br0">(</span><span class="kw4">int</span> m, <span class="kw4">int</span> t, <span class="kw4">int</span> c<span class="br0">)</span> <span class="br0">{</span>
  <span class="br0">(</span><span class="br0">(</span>t / m<span class="br0">)</span> &lt;= <span class="nu0">1</span><span class="br0">)</span> ? primes<span class="br0">(</span>m,t<span class="nu0">+1</span>,c<span class="br0">)</span> : !<span class="br0">(</span>t % m<span class="br0">)</span> ? primes<span class="br0">(</span>m,t<span class="nu0">+1</span>, t % m<span class="br0">)</span> : 
  <span class="br0">(</span><span class="br0">(</span>t % m<span class="br0">)</span>==<span class="br0">(</span>t / m<span class="br0">)</span> &amp;&amp; !c<span class="br0">)</span> ? <span class="br0">(</span><span class="kw3">printf</span><span class="br0">(</span><span class="st0">"%d<span class="es0">\t</span>"</span>,<span class="br0">(</span>t / m<span class="br0">)</span><span class="br0">)</span>, primes<span class="br0">(</span>m,t<span class="nu0">+1</span>,c<span class="br0">)</span><span class="br0">)</span> : 
  <span class="br0">(</span><span class="br0">(</span>t % m<span class="br0">)</span>&gt; <span class="nu0">1</span> &amp;&amp; <span class="br0">(</span>t % m<span class="br0">)</span> &lt; <span class="br0">(</span>t / m<span class="br0">)</span><span class="br0">)</span> ? primes<span class="br0">(</span>m,t<span class="nu0">+1</span>,c + !<span class="br0">(</span><span class="br0">(</span>t / m<span class="br0">)</span> % <span class="br0">(</span>t % m<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span> : 
  <span class="br0">(</span>t &lt; m * m<span class="br0">)</span> ? primes<span class="br0">(</span>m,t<span class="nu0">+1</span>,c<span class="br0">)</span> : <span class="nu0">0</span>;
<span class="br0">}</span>
 
<span class="kw4">int</span> main<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
  primes<span class="br0">(</span><span class="nu0">100</span>,<span class="nu0">0</span>,<span class="nu0">0</span><span class="br0">)</span>; 
<span class="br0">}</span>
</pre></div>
<p><a name="Obfuscate_names_again" id="Obfuscate_names_again"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Obfuscated_code&amp;action=edit&amp;section=10" title="Edit section: Obfuscate names again">edit</a>]</span> <span class="mw-headline">Obfuscate names again</span></h4>
<p>Rename the function <code>primes</code> and the variables <code>m</code>, <code>t</code>, and <code>c</code> to <code>_</code>, <code>__</code>, <code>___</code>, and <code>____</code>, respectively:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">void</span> _<span class="br0">(</span><span class="kw4">int</span> __, <span class="kw4">int</span> ___, <span class="kw4">int</span> ____<span class="br0">)</span> <span class="br0">{</span>
  <span class="br0">(</span><span class="br0">(</span>___ / __<span class="br0">)</span> &lt;= <span class="nu0">1</span><span class="br0">)</span> ? _<span class="br0">(</span>__,___<span class="nu0">+1</span>,____<span class="br0">)</span> : !<span class="br0">(</span>___ % __<span class="br0">)</span> ? _<span class="br0">(</span>__,___<span class="nu0">+1</span>,___ % __<span class="br0">)</span> : 
  <span class="br0">(</span><span class="br0">(</span>___ % __<span class="br0">)</span>==<span class="br0">(</span>___ / __<span class="br0">)</span> &amp;&amp; !____<span class="br0">)</span> ? <span class="br0">(</span><span class="kw3">printf</span><span class="br0">(</span><span class="st0">"%d<span class="es0">\t</span>"</span>,<span class="br0">(</span>___ / __<span class="br0">)</span><span class="br0">)</span>, 
  _<span class="br0">(</span>__,___<span class="nu0">+1</span>,____<span class="br0">)</span><span class="br0">)</span> : <span class="br0">(</span><span class="br0">(</span>___ % __<span class="br0">)</span> &gt; <span class="nu0">1</span> &amp;&amp; <span class="br0">(</span>___ % __<span class="br0">)</span> &lt; <span class="br0">(</span>___ / __<span class="br0">)</span><span class="br0">)</span> ? 
  _<span class="br0">(</span>__,___<span class="nu0">+1</span>,____ + !<span class="br0">(</span><span class="br0">(</span>___ / __<span class="br0">)</span> % <span class="br0">(</span>___ % __<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span> : <span class="br0">(</span>___ &lt; __ * __<span class="br0">)</span> ? 
  _<span class="br0">(</span>__,___<span class="nu0">+1</span>,____<span class="br0">)</span> : <span class="nu0">0</span>;
<span class="br0">}</span> 
 
<span class="kw4">int</span> main<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
  _<span class="br0">(</span><span class="nu0">100</span>,<span class="nu0">0</span>,<span class="nu0">0</span><span class="br0">)</span>; 
<span class="br0">}</span>
</pre></div>
<p><a name="Remove_literals" id="Remove_literals"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Obfuscated_code&amp;action=edit&amp;section=11" title="Edit section: Remove literals">edit</a>]</span> <span class="mw-headline">Remove literals</span></h4>
<p>There are quite a few references to the literal 1. One could replace them by dividing a variable by itself each time, knowing it is nonzero, but for the sake of example instead we pass 1 as a (totally unnecessary) parameter from <code>main</code> (and, of course, call it _____). Let's leave the only remaining 0 as a teaser:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">void</span> _<span class="br0">(</span><span class="kw4">int</span> __, <span class="kw4">int</span> ___, <span class="kw4">int</span> ____, <span class="kw4">int</span> _____<span class="br0">)</span> <span class="br0">{</span>
  <span class="br0">(</span><span class="br0">(</span>___ / __<span class="br0">)</span> &lt;= _____<span class="br0">)</span> ? _<span class="br0">(</span>__,___+_____,____,_____<span class="br0">)</span> : !<span class="br0">(</span>___ % __<span class="br0">)</span> ? _<span class="br0">(</span>__,___+_____,___ % __, _____<span class="br0">)</span> : 
  <span class="br0">(</span><span class="br0">(</span>___ % __<span class="br0">)</span>==<span class="br0">(</span>___ / __<span class="br0">)</span> &amp;&amp; !____<span class="br0">)</span> ? <span class="br0">(</span><span class="kw3">printf</span><span class="br0">(</span><span class="st0">"%d<span class="es0">\t</span>"</span>,<span class="br0">(</span>___ / __<span class="br0">)</span><span class="br0">)</span>, 
  _<span class="br0">(</span>__,___+_____,____,_____<span class="br0">)</span><span class="br0">)</span> : <span class="br0">(</span><span class="br0">(</span>___ % __<span class="br0">)</span> &gt; _____ &amp;&amp; <span class="br0">(</span>___ % __<span class="br0">)</span> &lt; <span class="br0">(</span>___ / __<span class="br0">)</span><span class="br0">)</span> ? 
  _<span class="br0">(</span>__,___+_____,____,_____ + !<span class="br0">(</span><span class="br0">(</span>___ / __<span class="br0">)</span> % <span class="br0">(</span>___ % __<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span> : <span class="br0">(</span>___ &lt; __ * __<span class="br0">)</span> ? 
  _<span class="br0">(</span>__,___+_____,____,_____<span class="br0">)</span> : <span class="nu0">0</span>;
<span class="br0">}</span> 
 
<span class="kw4">int</span> main<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
  _<span class="br0">(</span><span class="nu0">100</span>,<span class="nu0">0</span>,<span class="nu0">0</span>,<span class="nu0">1</span><span class="br0">)</span>; 
<span class="br0">}</span>
</pre></div>
<p><a name="Remove_redundant_text" id="Remove_redundant_text"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Obfuscated_code&amp;action=edit&amp;section=12" title="Edit section: Remove redundant text">edit</a>]</span> <span class="mw-headline">Remove redundant text</span></h4>
<p>Remove white space, type declarations, optional elements like the <code>void</code> and <code>int</code> on function return types, and unambiguous parentheses:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
_<span class="br0">(</span>__,___,____,_____<span class="br0">)</span><span class="br0">{</span>___/__&lt;=_____?_<span class="br0">(</span>__,___+_____,____,_____<span class="br0">)</span>:!<span class="br0">(</span>___%__<span class="br0">)</span>?_<span class="br0">(</span>__,___+_____,___%__,_____<span class="br0">)</span>:___%__==___/
__&amp;&amp;!____?<span class="br0">(</span><span class="kw3">printf</span><span class="br0">(</span><span class="st0">"%d<span class="es0">\t</span>"</span>,___/__<span class="br0">)</span>,_<span class="br0">(</span>__,___+_____,____,_____<span class="br0">)</span><span class="br0">)</span>:___%__&gt;<span class="nu0">1</span>&amp;&amp;___%__&lt;___/__?_<span class="br0">(</span>__,_____+
___,____+!<span class="br0">(</span>___/__%<span class="br0">(</span>___%__<span class="br0">)</span>,_____<span class="br0">)</span><span class="br0">)</span>:___&lt;__*__?_<span class="br0">(</span>__,___+_____,____,_____<span class="br0">)</span>:<span class="nu0">0</span>;<span class="br0">}</span>main<span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>_<span class="br0">(</span><span class="nu0">100</span>,<span class="nu0">0</span>,<span class="nu0">0</span>,<span class="nu0">1</span><span class="br0">)</span>;<span class="br0">}</span>
</pre></div>
<p>It can be seen from this example that the steps are largely intuitive, not fixed rules, and often are applied more than once.</p>
<p>This program will run on most systems. The limiting factor generally will be time. This sort of obfuscation by program transformation is relatively easy to apply and can be performed on many simple programs.</p>
<p>In the example above, it can be deduced that the obfuscated version is likely to be far less efficient than the original, mainly because of the replacement of an iterative function with a recursive one which will incur much more <a href="/wiki/Computational_overhead" title="Computational overhead">computational overhead</a> (though both are of order O((<i>n</i> log <i>n</i>)(loglog <i>n</i>)): see <a href="/wiki/Big_O_notation" title="Big O notation">Big O notation</a>). Intermediate results are also computed more often than necessary, though an optimizer may use <a href="/wiki/Loop-invariant_code_motion" title="Loop-invariant code motion">loop-invariant code motion</a> to avoid that. But the recursion is likely to defeat the optimizer.</p>
<p><a name="Unintentional_obfuscation" id="Unintentional_obfuscation"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Obfuscated_code&amp;action=edit&amp;section=13" title="Edit section: Unintentional obfuscation">edit</a>]</span> <span class="mw-headline">Unintentional obfuscation</span></h2>
<p>Obfuscation and optimization are not necessarily opposed, but sometimes unintentional obfuscation occurs when programmers attempt to optimize prematurely (i.e. second-guess the compiler). In fact, with modern optimizing compilers, attempts to do clever tricks are generally self-defeating because they may confuse the optimizer and prevent optimal code being produced. The simplest code is usually the best. Of course, the example above is deliberately contrived just to show the method.<sup class="noprint Template-Fact"><span title="This claim needs references to reliable sources&#160;since March 2009" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</span></sup></p>
<p><a name="Typography" id="Typography"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Obfuscated_code&amp;action=edit&amp;section=14" title="Edit section: Typography">edit</a>]</span> <span class="mw-headline">Typography</span></h2>
<p>In some common typefaces such as Courier New and Lucida Console, some letterforms (glyphs) at typical sizes on a computer screen appear identical: particularly <code>l</code> and <code>1</code>, and <code>O</code> and <code>0</code>. Even if not identical, they are close enough that if hidden in the middle of an identifier they are hard to spot. A very simple obfuscation is just to change these letters: while nobody is fooled for long, it wastes time (see below).</p>
<p><a name="Obfuscation_by_code_morphing" id="Obfuscation_by_code_morphing"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Obfuscated_code&amp;action=edit&amp;section=15" title="Edit section: Obfuscation by code morphing">edit</a>]</span> <span class="mw-headline">Obfuscation by code morphing</span></h2>
<table class="metadata plainlinks ambox ambox-move" style="">
<tr>
<td class="mbox-image">
<div style="width: 52px;"><a href="/wiki/File:Mergefrom.svg" class="image" title="Mergefrom.svg"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/0/0f/Mergefrom.svg/50px-Mergefrom.svg.png" width="50" height="20" border="0" /></a></div>
</td>
<td class="mbox-text" style="">It has been suggested that <i><a href="/wiki/Code_morphing" title="Code morphing">Code morphing</a></i> be <a href="/wiki/Wikipedia:Merging_and_moving_pages" title="Wikipedia:Merging and moving pages" class="mw-redirect">merged</a> into this article or section. (<a href="/wiki/Talk:Obfuscated_code" title="Talk:Obfuscated code">Discuss</a>)</td>
</tr>
</table>
<p>Obfuscation by <a href="/wiki/Code_morphing" title="Code morphing">code morphing</a> refers to obfuscating <a href="/wiki/Machine_language" title="Machine language" class="mw-redirect">machine language</a> or <a href="/wiki/Object_code" title="Object code" class="mw-redirect">object code</a> rather than obfuscating the source code.</p>
<p>This is achieved by completely replacing a section of the compiled code with an entirely new block that expects the same machine state when it begins execution as the previous section, and will leave with the same machine state after execution as the original. However, a number of additional operations will be completed as well as some operations with an equivalent effect.</p>
<p>Code morphing makes <a href="/wiki/Disassembly" title="Disassembly" class="mw-redirect">disassembly</a> of a distributed program more difficult. However, by adding unnecessarily complicated operations and hindering <a href="/wiki/Compiler" title="Compiler">compiler</a>-made optimizations, the execution time of the program is increased. For that reason, code morphing should be limited to critical portions of a program and not be used on an entire application.</p>
<p>Code morphing is often used in obfuscating the <a href="/wiki/Copy_protection" title="Copy protection">copy protection</a> or other checks that a program makes to determine whether it is a valid, authentic installation, or a <a href="/wiki/Copyright_infringement_of_software" title="Copyright infringement of software">pirated copy</a>, in order to make the removal of the copy-protection code more difficult than would otherwise be the case.</p>
<p><a href="/wiki/Code_morphing" title="Code morphing">Code morphing</a> is multilevel technology containing hundreds of unique code transformation patterns, as well as a special layer that transforms some commands into virtual machine commands. Code morphing turns <a href="/wiki/Binary_code" title="Binary code">binary code</a> into an undecipherable mess that is not similar to normal compiled code.</p>
<p><a name="Obfuscation_in_malicious_software" id="Obfuscation_in_malicious_software"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Obfuscated_code&amp;action=edit&amp;section=16" title="Edit section: Obfuscation in malicious software">edit</a>]</span> <span class="mw-headline">Obfuscation in malicious software</span></h2>
<p><a href="/wiki/Spamming" title="Spamming" class="mw-redirect">Spammers</a> frequently use obfuscated <a href="/wiki/JavaScript" title="JavaScript">JavaScript</a> or <a href="/wiki/HTML" title="HTML">HTML</a> code in spam messages. The obfuscated message, when displayed by an HTML-capable <a href="/wiki/E-mail" title="E-mail">e-mail</a> client, appears as a reasonably normal message—albeit with obnoxious JavaScript behaviors such as spawning pop-up windows. However, when the source is viewed, the obfuscations make it far more difficult for investigators to discern where the links go, or what the JavaScript code does. For this same reason, JavaScript obfuscation is also often used by <a href="/wiki/Malware" title="Malware">malware</a> authors to conceal parts of code that run <a href="/wiki/Web_browser" title="Web browser">browser</a> <a href="/wiki/Exploit_(computer_security)" title="Exploit (computer security)">exploits</a>, or that redirect to pages containing exploits.</p>
<p>Automated JavaScript obfuscators are currently available on the market. Although the effectiveness of these tools may vary, and the channels through which they are exchanged range from the legal to the manifestly malicious, they are all created for the purpose of confounding casual viewers or inexperienced investigators.</p>
<p>The techniques use JavaScript's dynamic nature—a piece of code is stored as an encrypted string, which is decrypted and evaluated. This may be done several times. Other techniques include insertion of dummy code, as well as dummy HTML links to legitimate pages.</p>
<p><a name="Obfuscation_for_VM_migration" id="Obfuscation_for_VM_migration"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Obfuscated_code&amp;action=edit&amp;section=17" title="Edit section: Obfuscation for VM migration">edit</a>]</span> <span class="mw-headline">Obfuscation for VM migration</span></h2>
<p>Third-party obfuscators are used to recompile old classes to meet new <a href="/wiki/Java_Development_Kit" title="Java Development Kit">Java Development Kit</a> definitions avoiding <code>ClassFormatError</code> while migrating from <a href="/wiki/Microsoft_Virtual_Machine" title="Microsoft Virtual Machine" class="mw-redirect">Microsoft Virtual Machine</a> to <a href="/wiki/Java_Virtual_Machine" title="Java Virtual Machine">Java Virtual Machine</a>.</p>
<p><a name="Advantages_of_obfuscation" id="Advantages_of_obfuscation"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Obfuscated_code&amp;action=edit&amp;section=18" title="Edit section: Advantages of obfuscation">edit</a>]</span> <span class="mw-headline">Advantages of obfuscation</span></h2>
<p><a name="Intellectual_property_protection" id="Intellectual_property_protection"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Obfuscated_code&amp;action=edit&amp;section=19" title="Edit section: Intellectual property protection">edit</a>]</span> <span class="mw-headline">Intellectual property protection</span></h3>
<p>Obfuscation is typically used to protect the <a href="/wiki/Intellectual_property" title="Intellectual property">intellectual property</a> that is present in a software. This includes protecting any trade secrets that may be present in the code as well as protecting licensing implementations to prevent unauthorized use.</p>
<p><a name="Reduced_security_exposure" id="Reduced_security_exposure"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Obfuscated_code&amp;action=edit&amp;section=20" title="Edit section: Reduced security exposure">edit</a>]</span> <span class="mw-headline">Reduced security exposure</span></h3>
<p>If an application has private information in the code – such as SQL, usernames, and passwords<sup id="cite_ref-7" class="reference"><a href="#cite_note-7" title=""><span>[</span>8<span>]</span></a></sup> – then obfuscating code with options such as string encryption can make this information harder to obtain.</p>
<p><a name="Size_reduction" id="Size_reduction"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Obfuscated_code&amp;action=edit&amp;section=21" title="Edit section: Size reduction">edit</a>]</span> <span class="mw-headline">Size reduction</span></h3>
<div class="rellink boilerplate seealso">See also: <a href="/wiki/Minification_(programming)" title="Minification (programming)">Minification (programming)</a></div>
<p>As one of the core techniques of obfuscation is identifier renaming, size reductions are often gained by changing long, descriptive <a href="/wiki/Identifiers" title="Identifiers" class="mw-redirect">identifiers</a> into, typically, one character identifiers. This can lead to substantial savings in program size, albeit with a resulting loss of maintainability of the code. Many obfuscators also have the ability to remove unused code, leading to further reductions in size.</p>
<p><a name="Library_linking" id="Library_linking"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Obfuscated_code&amp;action=edit&amp;section=22" title="Edit section: Library linking">edit</a>]</span> <span class="mw-headline">Library linking</span></h3>
<p>To fully hide the intent of an obfuscated program, it is common for standard library routines to be statically linked into the obfuscated program and those routines themselves are then obfuscated. This can be useful for avoiding problems like <a href="/wiki/DLL_hell" title="DLL hell">DLL hell</a>.</p>
<p><a name="Disadvantages_of_obfuscation" id="Disadvantages_of_obfuscation"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Obfuscated_code&amp;action=edit&amp;section=23" title="Edit section: Disadvantages of obfuscation">edit</a>]</span> <span class="mw-headline">Disadvantages of obfuscation</span></h2>
<p><a name="When_used_alone" id="When_used_alone"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Obfuscated_code&amp;action=edit&amp;section=24" title="Edit section: When used alone">edit</a>]</span> <span class="mw-headline">When used alone</span></h3>
<p>At best, obfuscation merely makes it time-consuming, but not impossible, to reverse engineer a program. When security is important, measures other than obfuscation should be used. The same trade-offs are made in branches of <a href="/wiki/Cryptography" title="Cryptography">cryptography</a>: an algorithm may be known to be fast but weak, but if the information is very short-lived there is little incentive, except as an intellectual exercise, for anyone to break it: the information becomes useless before it is broken.</p>
<p>No-one can guarantee that obfuscation will present any particular level of difficulty to a reverse engineer.<sup id="cite_ref-8" class="reference"><a href="#cite_note-8" title=""><span>[</span>9<span>]</span></a></sup></p>
<p>Obfuscators do not provide security of a level similar to modern <a href="/wiki/Encryption" title="Encryption">encryption schemes</a>. Even obfuscation with encryption can have flaws. Any program or data that is encrypted must be decrypted before it can be used by the computer. So it must exist, unencrypted, somewhere in memory; a reverse engineer can take a <a href="/wiki/Snapshot_(computer_storage)" title="Snapshot (computer storage)">snapshot</a> of that memory. Also, any strong encryption requires a key for decryption. For the program to be executable the key must be provided, leaving another avenue open for reverse engineering.<sup id="cite_ref-9" class="reference"><a href="#cite_note-9" title=""><span>[</span>10<span>]</span></a></sup></p>
<p><a href="/wiki/Debugger" title="Debugger">Debuggers</a> also provide powerful tools to look at the operation of a running program, and <a href="/wiki/Decompiler" title="Decompiler">decompilers</a> exist to help make bytecode and machine code human-readable. Reverse engineers can use these tools to crack systems with security dependant on obfuscation, including <a href="/wiki/Digital_rights_management" title="Digital rights management">digital rights management</a> systems.</p>
<p>Reverse engineering is partly a study in <a href="/wiki/Pattern_recognition" title="Pattern recognition">pattern recognition</a>, and the good engineer quickly learns the quirks of a particular compiler, processor, or even programmer, and can make educated guesses about the original code.</p>
<p><a name="Debugging" id="Debugging"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Obfuscated_code&amp;action=edit&amp;section=25" title="Edit section: Debugging">edit</a>]</span> <span class="mw-headline">Debugging</span></h3>
<p>Obfuscated code is extremely difficult to debug. Variable names will no longer make sense, and the structure of the code itself will likely be modified beyond recognition. This fact generally forces developers to maintain two builds: One with the original, unobfuscated source code that can be easily debugged, and another for release. While both builds should be tested to make sure they perform identically, the second build is generally reliably constructed from the first by an obfuscator.</p>
<p>This limitation does not apply to intermediate language obfuscators (e.g. for .NET and Java), which generally work on compiled assemblies rather than on source code.</p>
<p><a name="Portability" id="Portability"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Obfuscated_code&amp;action=edit&amp;section=26" title="Edit section: Portability">edit</a>]</span> <span class="mw-headline">Portability</span></h3>
<p>Obfuscated code often depends on the particular characteristics of the platform and compiler, making it difficult to manage if either change. This only applies to <a href="/wiki/Source_code" title="Source code">source code</a> obfuscation. Obfuscation against <a href="/wiki/Intermediate_languages" title="Intermediate languages" class="mw-redirect">intermediate languages</a> does not have this limitation, though obfuscation can make it harder or impossible to <a href="/wiki/Decompile" title="Decompile" class="mw-redirect">decompile</a> to a higher level language such as <a href="/wiki/C_Sharp_(programming_language)" title="C Sharp (programming language)">C#</a> or <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a>.</p>
<p><a name="Conflicts_with_Reflection_APIs" id="Conflicts_with_Reflection_APIs"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Obfuscated_code&amp;action=edit&amp;section=27" title="Edit section: Conflicts with Reflection APIs">edit</a>]</span> <span class="mw-headline">Conflicts with Reflection APIs</span></h3>
<p><a href="/wiki/Reflection_API" title="Reflection API" class="mw-redirect">Reflection</a> is a set of <a href="/wiki/Application_programming_interface" title="Application programming interface">APIs</a> in various languages that allow an <a href="/wiki/Object-oriented" title="Object-oriented" class="mw-redirect">object</a> to be examined or created just by knowing its classname at run-time. Many obfuscators allow specified classes to be exempt from renaming; and it is also possible to let a class be renamed and call it by its new name. However, the former option places limits on the dynamism of code, while the latter adds a great deal of complexity and inconvenience to the system.</p>
<p><a name="Obfuscating_software" id="Obfuscating_software"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Obfuscated_code&amp;action=edit&amp;section=28" title="Edit section: Obfuscating software">edit</a>]</span> <span class="mw-headline">Obfuscating software</span></h2>
<p>A vast variety of tools exists to perform or assist with code obfuscation. These include experimental research tools created by academics, hobbyist tools, commercial products written by professionals, and <a href="/wiki/Open-source_software" title="Open-source software" class="mw-redirect">Open-source software</a>. Deobfuscators do the reverse.</p>
<p>Software obfuscation tools include specialized obfuscators to demonstrate a relatively limited technique, more general obfuscators which attempt a more thorough obfuscation, and combined-function tools which obfuscate code as part of a larger goal such as software licensing enforcement.</p>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Obfuscated_code&amp;action=edit&amp;section=29" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<ul>
<li><a href="/wiki/AARD_code" title="AARD code">AARD code</a></li>
<li><a href="/wiki/Decompilation" title="Decompilation" class="mw-redirect">Decompilation</a></li>
<li><a href="/wiki/Quine_(computing)" title="Quine (computing)">Quine</a></li>
</ul>
<p><a name="Notes" id="Notes"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Obfuscated_code&amp;action=edit&amp;section=30" title="Edit section: Notes">edit</a>]</span> <span class="mw-headline">Notes</span></h2>
<div class="references-small">
<ol class="references">
<li id="cite_note-0"><b><a href="#cite_ref-0" title="">^</a></b> <a href="http://www.devx.com/MicrosoftISV/Article/11351" class="external text" title="http://www.devx.com/MicrosoftISV/Article/11351" rel="nofollow">Obfuscation: Cloaking your Code from Prying Eyes</a></li>
<li id="cite_note-1"><b><a href="#cite_ref-1" title="">^</a></b> <a href="http://www.codinghorror.com/blog/archives/000291.html" class="external text" title="http://www.codinghorror.com/blog/archives/000291.html" rel="nofollow">Jeff Atwood, May 15 2005</a></li>
<li id="cite_note-2"><b><a href="#cite_ref-2" title="">^</a></b> <a href="http://www.kenter.demon.nl/obfuscate.html" class="external text" title="http://www.kenter.demon.nl/obfuscate.html" rel="nofollow">Obfuscation</a></li>
<li id="cite_note-3"><b><a href="#cite_ref-3" title="">^</a></b> <a href="http://www.dreamincode.net/forums/index.php?showtopic=38102" class="external text" title="http://www.dreamincode.net/forums/index.php?showtopic=38102" rel="nofollow">C++ Tutorials - Obfuscated Code - A Simple Introduction | DreamInCode.net</a></li>
<li id="cite_note-4"><b><a href="#cite_ref-4" title="">^</a></b> <a href="http://www.perlmonks.org/index.pl?node_id=291267" class="external text" title="http://www.perlmonks.org/index.pl?node_id=291267" rel="nofollow">Pe(a)rls in line noise</a></li>
<li id="cite_note-5"><b><a href="#cite_ref-5" title="">^</a></b> <a href="http://www.ioccc.org/years.html#1988_phillipps" class="external text" title="http://www.ioccc.org/years.html#1988_phillipps" rel="nofollow">"International Obfuscated C Code Winners 1988 - Least likely to compile successfully"</a></li>
<li id="cite_note-6"><b><a href="#cite_ref-6" title="">^</a></b> <a href="http://research.microsoft.com/~tball/papers/XmasGift/" class="external text" title="http://research.microsoft.com/~tball/papers/XmasGift/" rel="nofollow">"Reverse Engineering the Twelve Days of Christmas" by Thomas Ball</a></li>
<li id="cite_note-7"><b><a href="#cite_ref-7" title="">^</a></b> <a href="http://53prime.com/?p=62" class="external text" title="http://53prime.com/?p=62" rel="nofollow">Finding Hardcoded Passwords with Koders.com</a></li>
<li id="cite_note-8"><b><a href="#cite_ref-8" title="">^</a></b> <a href="http://www.math.ias.edu/~boaz/Papers/obf_informal.html" class="external text" title="http://www.math.ias.edu/~boaz/Papers/obf_informal.html" rel="nofollow">"Can We Obfuscate Programs?" by Boaz Barak</a></li>
<li id="cite_note-9"><b><a href="#cite_ref-9" title="">^</a></b> <a href="http://news.zdnet.com/2100-9595_22-995962.html" class="external text" title="http://news.zdnet.com/2100-9595_22-995962.html" rel="nofollow">Encryption, hashing, and obfuscation | Tech News on ZDNet</a></li>
</ol>
</div>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Obfuscated_code&amp;action=edit&amp;section=31" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<ul>
<li>B. Barak, O. Goldreich, R. Impagliazzo, S. Rudich, A. Sahai, S. Vadhan and K. Yang. <a href="http://www.math.ias.edu/~boaz/Papers/obfuscate.ps" class="external text" title="http://www.math.ias.edu/~boaz/Papers/obfuscate.ps" rel="nofollow">"On the (Im)possibility of Obfuscating Programs"</a>. <i>21st Annual International Cryptology Conference</i>, Santa Barbara, California, USA. Springer Verlag LNCS Volume 2139, 2001.</li>
<li><cite style="font-style:normal">Mateas, Michael; Nick Montfort. "<a href="http://nickm.com/cis/a_box_darkly.pdf" class="external text" title="http://nickm.com/cis/a_box_darkly.pdf" rel="nofollow">A Box, Darkly: Obfuscation, Weird Languages, and Code Aesthetics</a>". <i>Proceedings of the 6th Digital Arts and Culture Conference, IT University of Copenhagen, 1-3 Dec 2005</i>: 144–153.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=proceeding&amp;rft.btitle=Proceedings+of+the+6th+Digital+Arts+and+Culture+Conference%2C+IT+University+of+Copenhagen%2C+1-3+Dec+2005&amp;rft.atitle=A+Box%2C+Darkly%3A+Obfuscation%2C+Weird+Languages%2C+and+Code+Aesthetics&amp;rft.aulast=Mateas&amp;rft.aufirst=Michael&amp;rft.pages=144%E2%80%93153&amp;rft_id=http%3A%2F%2Fnickm.com%2Fcis%2Fa_box_darkly.pdf"><span style="display: none;">&#160;</span></span></li>
</ul>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Obfuscated_code&amp;action=edit&amp;section=32" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<ul>
<li><a href="http://www.ioccc.org/" class="external text" title="http://www.ioccc.org/" rel="nofollow">The International Obfuscated C Code Contest</a></li>
<li><a href="http://www.cs.arizona.edu/~collberg/Research/Students/DouglasLow/obfuscation.html" class="external text" title="http://www.cs.arizona.edu/~collberg/Research/Students/DouglasLow/obfuscation.html" rel="nofollow">Protecting Java Code Via Code Obfuscation</a></li>
<li><a href="http://msdn2.microsoft.com/en-us/library/ms227240.aspx" class="external text" title="http://msdn2.microsoft.com/en-us/library/ms227240.aspx" rel="nofollow">Dotfuscator in Visual Studio on MSDN resource page</a> — Visual Studio 2008 documentation for built-in .NET obfuscation</li>
<li><a href="http://msdn2.microsoft.com/en-us/vcsharp/aa336818.aspx#obfuscators" class="external text" title="http://msdn2.microsoft.com/en-us/vcsharp/aa336818.aspx#obfuscators" rel="nofollow">Obfuscation tools for .NET, on MSDN</a> — Obfuscation resources for .NET, on the Microsoft Developer Center.</li>
<li><a href="http://www.cs.princeton.edu/~boaz/Papers/obf_informal.html" class="external text" title="http://www.cs.princeton.edu/~boaz/Papers/obf_informal.html" rel="nofollow">Can we obfuscate programs?</a></li>
<li><a href="http://yury.name/obfuscation.html" class="external text" title="http://yury.name/obfuscation.html" rel="nofollow">Yury Lifshits. Lecture Notes on Program Obfuscation (Spring'2005)</a></li>
<li><a href="http://www.rustemsoft.com/obfuscate_names.asp" class="external text" title="http://www.rustemsoft.com/obfuscate_names.asp" rel="nofollow">Obfuscate member names in .NET code</a></li>
<li><a href="http://www.dmoz.org/Computers/Programming/Languages/Java/Development_Tools/Obfuscators/" class="external text" title="http://www.dmoz.org/Computers/Programming/Languages/Java/Development_Tools/Obfuscators/" rel="nofollow">Java obfuscators</a> at the <a href="/wiki/Open_Directory_Project" title="Open Directory Project">Open Directory Project</a></li>
<li><a href="http://research.microsoft.com/~tball/papers/XmasGift/" class="external text" title="http://research.microsoft.com/~tball/papers/XmasGift/" rel="nofollow">Analysis of the 12 days program</a></li>
<li><a href="http://www.cwi.nl/~tromp/maze.html" class="external text" title="http://www.cwi.nl/~tromp/maze.html" rel="nofollow">Analysis of the obfuscated maze generating program</a></li>
<li><a href="http://perl.plover.com/obfuscated/" class="external text" title="http://perl.plover.com/obfuscated/" rel="nofollow">Obfuscated Perl program with explanation</a></li>
<li><a href="http://c2.com/cgi/wiki?BlackBoxComputation" class="extiw" title="wiki:BlackBoxComputation">wiki:BlackBoxComputation</a></li>
</ul>


<!-- 
NewPP limit report
Preprocessor node count: 819/1000000
Post-expand include size: 9020/2048000 bytes
Template argument size: 2937/2048000 bytes
Expensive parser function count: 1/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:22739-0!1!0!default!!en!2 and timestamp 20090411023644 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Obfuscated_code">http://en.wikipedia.org/wiki/Obfuscated_code</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Anti-patterns" title="Category:Anti-patterns">Anti-patterns</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_example_C_code" title="Category:Articles with example C code">Articles with example C code</a></span> | <span dir='ltr'><a href="/wiki/Category:Obfuscation" title="Category:Obfuscation">Obfuscation</a></span> | <span dir='ltr'><a href="/wiki/Category:Source_code" title="Category:Source code">Source code</a></span></div><div id="mw-hidden-catlinks" class="mw-hidden-cats-hidden">Hidden categories:&#32;<span dir='ltr'><a href="/wiki/Category:Articles_that_may_contain_original_research_since_April_2008" title="Category:Articles that may contain original research since April 2008">Articles that may contain original research since April 2008</a></span> | <span dir='ltr'><a href="/wiki/Category:All_articles_that_may_contain_original_research" title="Category:All articles that may contain original research">All articles that may contain original research</a></span> | <span dir='ltr'><a href="/wiki/Category:All_articles_with_unsourced_statements" title="Category:All articles with unsourced statements">All articles with unsourced statements</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_unsourced_statements_since_March_2009" title="Category:Articles with unsourced statements since March 2009">Articles with unsourced statements since March 2009</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_to_be_merged_since_February_2008" title="Category:Articles to be merged since February 2008">Articles to be merged since February 2008</a></span> | <span dir='ltr'><a href="/wiki/Category:All_articles_to_be_merged" title="Category:All articles to be merged">All articles to be merged</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Obfuscated_code" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Obfuscated_code" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Obfuscated_code&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Obfuscated_code&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Obfuscated_code" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Obfuscated_code" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Obfuscated_code" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Obfuscated_code&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Obfuscated_code&amp;oldid=283102823" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Obfuscated_code&amp;id=283102823">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-cs"><a href="http://cs.wikipedia.org/wiki/Obfuscator">Česky</a></li>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/Obfuscator">Deutsch</a></li>
				<li class="interwiki-es"><a href="http://es.wikipedia.org/wiki/C%C3%B3digo_ofuscado">Español</a></li>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Code_imp%C3%A9n%C3%A9trable">Français</a></li>
				<li class="interwiki-it"><a href="http://it.wikipedia.org/wiki/Offuscatore">Italiano</a></li>
				<li class="interwiki-pl"><a href="http://pl.wikipedia.org/wiki/Zaciemnianie_kodu">Polski</a></li>
				<li class="interwiki-ru"><a href="http://ru.wikipedia.org/wiki/%D0%9E%D0%B1%D1%84%D1%83%D1%81%D0%BA%D0%B0%D1%86%D0%B8%D1%8F">Русский</a></li>
				<li class="interwiki-sr"><a href="http://sr.wikipedia.org/wiki/%D0%9C%D0%B0%D1%81%D0%BA%D0%B8%D1%80%D0%B0%D1%9A%D0%B5_%D0%BA%D0%BE%D0%B4%D0%B0">Српски / Srpski</a></li>
				<li class="interwiki-sv"><a href="http://sv.wikipedia.org/wiki/Obfuscator">Svenska</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 11 April 2009, at 02:36 (UTC).</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv104 in 0.071 secs. --></body></html>
