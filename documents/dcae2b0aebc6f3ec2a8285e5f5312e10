<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Logic programming,Protection policy,Programming paradigms,Programming language,ALF (programming language),Abductive Logic Programming,Abductive logic programming,Abductive reasoning,Actor model,Advice taker,Air traffic control" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Logic programming - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Logic_programming";
		var wgTitle = "Logic programming";
		var wgAction = "view";
		var wgArticleId = "17927";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 269995394;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = ["autoconfirmed"];
		var wgRestrictionMove = ["autoconfirmed"];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Logic_programming skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Logic programming</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<div class="metadata plainlinks topicon" id="protected-icon" style="position:absolute; z-index:100; right:55px; top:10px;">
<div><a href="/wiki/Wikipedia:Protection_policy#semi" title="This article is semi-protected."><img alt="Semi-protected" src="http://upload.wikimedia.org/wikipedia/commons/thumb/f/fa/Padlock-silver-medium.svg/20px-Padlock-silver-medium.svg.png" width="20" height="20" border="0" /></a></div>
</div>
<table class="navbox" style="float:right; background-color:rgb(248,248,255); clear:right; margin: 1ex 0 0.5em 1em; width: 20em">
<tr>
<th><a href="/wiki/Programming_paradigm" title="Programming paradigm">Programming paradigms</a></th>
</tr>
<tr>
<td style="text-align:left">
<ul>
<li><a href="/wiki/Software_agent" title="Software agent">Agent-oriented</a></li>
<li><a href="/wiki/Component-based_software_engineering" title="Component-based software engineering">Component-based</a>
<ul>
<li><a href="/wiki/Flow-based_programming" title="Flow-based programming">Flow-based</a></li>
<li><a href="/wiki/Pipeline_programming" title="Pipeline programming">Pipeline</a></li>
</ul>
</li>
<li><a href="/wiki/Concatenative_programming_language" title="Concatenative programming language">Concatenative</a></li>
<li><a href="/wiki/Concurrent_computing" title="Concurrent computing">Concurrent computing</a></li>
<li><a href="/w/index.php?title=Context-oriented_programming&amp;action=edit&amp;redlink=1" class="new" title="Context-oriented programming (page does not exist)">Context-oriented</a></li>
<li><a href="/wiki/Declarative_programming" title="Declarative programming">Declarative</a> (Contrast: <a href="/wiki/Imperative_programming" title="Imperative programming">Imperative</a>)
<ul>
<li><a href="/wiki/Functional_programming" title="Functional programming">Functional</a>
<ul>
<li><a href="/wiki/Dataflow" title="Dataflow">Dataflow</a>
<ul>
<li><a href="/wiki/Spreadsheet" title="Spreadsheet">Cell-oriented (spreadsheets)</a></li>
<li><a href="/wiki/Reactive_programming" title="Reactive programming">Reactive</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="/w/index.php?title=Goal-directed_programming&amp;action=edit&amp;redlink=1" class="new" title="Goal-directed programming (page does not exist)">Goal-directed</a>
<ul>
<li><a href="/wiki/Constraint_programming" title="Constraint programming">Constraint</a></li>
<li><a href="/wiki/Constraint_logic_programming" title="Constraint logic programming">Constraint logic</a></li>
<li><strong class="selflink">Logic</strong>
<ul>
<li><a href="/wiki/Abductive_logic_programming" title="Abductive logic programming">Abductive logic</a></li>
<li><a href="/wiki/Inductive_logic_programming" title="Inductive logic programming">Inductive logic</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><a href="/wiki/Event-driven_programming" title="Event-driven programming">Event-driven</a></li>
<li><a href="/wiki/Feature_Oriented_Programming" title="Feature Oriented Programming">Feature-oriented</a></li>
<li><a href="/wiki/Function-level_programming" title="Function-level programming">Function-level</a> (Contrast: <a href="/wiki/Value-level_programming" title="Value-level programming">Value-level</a>)</li>
<li><a href="/wiki/Imperative_programming" title="Imperative programming">Imperative</a> (Contrast: <a href="/wiki/Declarative_programming" title="Declarative programming">Declarative</a>)
<ul>
<li>Advanced separation of concerns
<ul>
<li><a href="/wiki/Aspect-oriented_programming" title="Aspect-oriented programming">Aspect-oriented</a></li>
<li><a href="/wiki/Subject-oriented_programming" title="Subject-oriented programming">Subject-oriented</a></li>
</ul>
</li>
<li><a href="/wiki/Array_programming" title="Array programming">Array</a> (Contrast: <a href="/wiki/Scalar_programming" title="Scalar programming">Scalar</a>)</li>
<li><a href="/wiki/Automata-based_programming" title="Automata-based programming">Automata-based</a></li>
<li><a href="/wiki/Object-oriented_programming" title="Object-oriented programming">Object-oriented</a>
<ul>
<li><a href="/wiki/Class-based_programming" title="Class-based programming">Class-based</a></li>
<li><a href="/wiki/Prototype-based_programming" title="Prototype-based programming">Prototype-based</a></li>
</ul>
</li>
<li><a href="/wiki/Procedural_programming" title="Procedural programming">Procedural</a>
<ul>
<li><a href="/wiki/Structured_programming" title="Structured programming">Structured</a></li>
</ul>
</li>
<li><a href="/wiki/Role-oriented_programming" title="Role-oriented programming">Role-oriented</a></li>
<li><a href="/wiki/Scalar_programming" title="Scalar programming">Scalar</a> (Contrast: <a href="/wiki/Array_programming" title="Array programming">Array</a>)</li>
</ul>
</li>
<li><a href="/wiki/Iteration" title="Iteration">Iterative</a> (Contrast: <a href="/wiki/Recursion_(computer_science)" title="Recursion (computer science)">Recursive</a>)</li>
<li><a href="/wiki/Metaprogramming" title="Metaprogramming">Metaprogramming</a>
<ul>
<li><a href="/wiki/Attribute-Oriented_Programming" title="Attribute-Oriented Programming">Attribute-oriented</a></li>
<li><a href="/wiki/Automatic_programming" title="Automatic programming">Automatic</a>
<ul>
<li><a href="/wiki/Generic_programming" title="Generic programming">Generic</a>
<ul>
<li><a href="/wiki/Template_metaprogramming" title="Template metaprogramming">Template</a>
<ul>
<li><a href="/wiki/Policy-based_design" title="Policy-based design">Policy-based</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="/wiki/Language-oriented_programming" title="Language-oriented programming">Language-oriented</a>
<ul>
<li><a href="/wiki/Grammar-oriented_programming" title="Grammar-oriented programming">Grammar-oriented</a>
<ul>
<li><a href="/wiki/Dialecting" title="Dialecting">Dialecting</a></li>
</ul>
</li>
<li><a href="/wiki/Intentional_programming" title="Intentional programming">Intentional</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="/wiki/Reflection_(computer_science)" title="Reflection (computer science)">Reflective</a></li>
</ul>
</li>
<li><a href="/wiki/Modular_programming" title="Modular programming">Modular</a></li>
<li><a href="/wiki/Nondeterministic_programming" title="Nondeterministic programming">Nondeterministic</a></li>
<li><a href="/wiki/Parallel_computing" title="Parallel computing">Parallel computing</a>
<ul>
<li><a href="/wiki/Process-oriented_programming" title="Process-oriented programming">Process-oriented</a></li>
</ul>
</li>
<li><a href="/wiki/Programming_in_the_large_and_programming_in_the_small" title="Programming in the large and programming in the small">Programming in the large and programming in the small</a></li>
<li><a href="/wiki/Recursion_(computer_science)" title="Recursion (computer science)">Recursive</a> (Contrast: <a href="/wiki/Iteration" title="Iteration">Iterative</a>)</li>
<li><a href="/wiki/Tree_programming" title="Tree programming">Tree</a></li>
<li><a href="/wiki/Value-level_programming" title="Value-level programming">Value-level</a> (Contrast: <a href="/wiki/Function-level_programming" title="Function-level programming">Function-level</a>)</li>
</ul>
<hr />
<div class="noprint plainlinksneverexpand navbar" style="background:none; padding:0; font-weight:normal;; font-size:xx-small; text-align:center;">This box: <a href="/wiki/Template:Programming_paradigms" title="Template:Programming paradigms"><span title="View this template" style="">view</span></a>&#160;•&#160;<a href="/wiki/Template_talk:Programming_paradigms" title="Template talk:Programming paradigms"><span title="Discussion about this template" style="">talk</span></a>&#160;•&#160;<a href="http://en.wikipedia.org/w/index.php?title=Template:Programming_paradigms&amp;action=edit" class="external text" title="http://en.wikipedia.org/w/index.php?title=Template:Programming_paradigms&amp;action=edit" rel="nofollow"><span title="Edit this template" style=";">edit</span></a></div>
</td>
</tr>
</table>
<p><b>Logic programming</b> is, in its broadest sense, the use of <a href="/wiki/Mathematical_logic" title="Mathematical logic">mathematical logic</a> for computer programming. In this view of logic programming, which can be traced at least as far back as <a href="/wiki/John_McCarthy_(computer_scientist)" title="John McCarthy (computer scientist)">John McCarthy</a>'s [1958] <a href="/wiki/Advice_taker" title="Advice taker">advice-taker</a> proposal, logic is used as a purely <a href="/wiki/Declarative_programming_language" title="Declarative programming language" class="mw-redirect">declarative</a> representation language, and a <a href="/wiki/Automated_theorem_proving" title="Automated theorem proving">theorem-prover</a> or model-generator is used as the problem-solver. The problem-solving task is split between the programmer, who is responsible only for ensuring the truth of programs expressed in logical form, and the theorem-prover or model-generator, which is responsible for solving problems efficiently.</p>
<p>However, logic programming, in the narrower sense in which it is more commonly understood, is the use of logic as both a <a href="/wiki/Declarative_programming_language" title="Declarative programming language" class="mw-redirect">declarative</a> and procedural representation language. It is based upon the fact that a <a href="/wiki/Backwards_reasoning" title="Backwards reasoning" class="mw-redirect">backwards reasoning</a> theorem-prover applied to declarative sentences in the form of implications:</p>
<dl>
<dd>
<dl>
<dd>
<dl>
<dd>
<dl>
<dd>If <tt>B<sub>1</sub> and … and B<sub>n</sub> then H</tt></dd>
</dl>
</dd>
</dl>
</dd>
</dl>
</dd>
</dl>
<p>treats the implications as goal-reduction procedures:</p>
<dl>
<dd>
<dl>
<dd>
<dl>
<dd>
<dl>
<dd>to show/solve <tt>H</tt>, show/solve <tt>B<sub>1</sub></tt> and … and <tt>B<sub>n</sub></tt>.</dd>
</dl>
</dd>
</dl>
</dd>
</dl>
</dd>
</dl>
<p>For example, it treats the implication:</p>
<dl>
<dd>
<dl>
<dd>
<dl>
<dd>
<dl>
<dd>If you press the alarm signal button,</dd>
<dd>then you alert the driver of the train of a possible emergency</dd>
</dl>
</dd>
</dl>
</dd>
</dl>
</dd>
</dl>
<p>as the procedure:</p>
<dl>
<dd>
<dl>
<dd>
<dl>
<dd>
<dl>
<dd>To alert the driver of the train of a possible emergency,</dd>
<dd>press the alarm signal button.</dd>
</dl>
</dd>
</dl>
</dd>
</dl>
</dd>
</dl>
<p>Note that this is consistent with the <a href="/wiki/BHK_interpretation" title="BHK interpretation" class="mw-redirect">BHK interpretation</a> of constructivist logic, where implication would be interpreted as a solution of problem <tt>H</tt> given solutions of <tt>B<sub>1</sub></tt> … <tt>B<sub>n</sub></tt>. However, the defining feature of logic programming is that sets of formulas can be regarded as programs and <i>proof search</i> can be given a computational meaning. This is achieved by restricting the underlying logic to a "well-behaved" fragment such as <a href="/wiki/Horn_clause" title="Horn clause">Horn clauses</a> or <a href="/w/index.php?title=Hereditary_Harrop_formula&amp;action=edit&amp;redlink=1" class="new" title="Hereditary Harrop formula (page does not exist)">Hereditary Harrop formulas</a>. See D. Miller et al., 1991.</p>
<p>As in the purely declarative case, the programmer is responsible for ensuring the truth of programs. But since automated proof search is generally infeasible, logic programming as commonly understood <i>also</i> relies on the programmer to ensure that inferences are generated efficiently (see <a href="#Problem_solving" title="">#Problem solving</a>). In many cases, to achieve efficiency, one needs to be aware of and to exploit the problem-solving behavior of the theorem-prover. In this respect, logic programming is comparable to conventional <a href="/wiki/Imperative_programming" title="Imperative programming">imperative programming</a>; using programs to control the behaviour of a program executor. However, unlike conventional imperative programs, which have only a procedural interpretation, logic programs also have a declarative, logical interpretation, which helps to ensure their correctness. Moreover, such programs, being declarative, are at a higher conceptual level than purely imperative programs; and their program executors, being theorem-provers, operate at a higher conceptual level than conventional <a href="/wiki/Compiler" title="Compiler">compilers</a> and <a href="/wiki/Interpreter_(computing)" title="Interpreter (computing)">interpreters</a>.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#History"><span class="tocnumber">1</span> <span class="toctext">History</span></a></li>
<li class="toclevel-1"><a href="#Prolog"><span class="tocnumber">2</span> <span class="toctext">Prolog</span></a></li>
<li class="toclevel-1"><a href="#Negation_as_failure"><span class="tocnumber">3</span> <span class="toctext">Negation as failure</span></a></li>
<li class="toclevel-1"><a href="#Problem_solving"><span class="tocnumber">4</span> <span class="toctext">Problem solving</span></a></li>
<li class="toclevel-1"><a href="#Knowledge_representation"><span class="tocnumber">5</span> <span class="toctext">Knowledge representation</span></a></li>
<li class="toclevel-1"><a href="#Abductive_logic_programming"><span class="tocnumber">6</span> <span class="toctext">Abductive logic programming</span></a></li>
<li class="toclevel-1"><a href="#Metalogic_programming"><span class="tocnumber">7</span> <span class="toctext">Metalogic programming</span></a></li>
<li class="toclevel-1"><a href="#Constraint_logic_programming"><span class="tocnumber">8</span> <span class="toctext">Constraint logic programming</span></a></li>
<li class="toclevel-1"><a href="#Concurrent_logic_programming"><span class="tocnumber">9</span> <span class="toctext">Concurrent logic programming</span></a></li>
<li class="toclevel-1"><a href="#Inductive_logic_programming"><span class="tocnumber">10</span> <span class="toctext">Inductive logic programming</span></a></li>
<li class="toclevel-1"><a href="#Higher-order_logic_programming"><span class="tocnumber">11</span> <span class="toctext">Higher-order logic programming</span></a></li>
<li class="toclevel-1"><a href="#Linear_logic_programming"><span class="tocnumber">12</span> <span class="toctext">Linear logic programming</span></a></li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">13</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">14</span> <span class="toctext">References</span></a>
<ul>
<li class="toclevel-2"><a href="#General_introductions"><span class="tocnumber">14.1</span> <span class="toctext">General introductions</span></a></li>
<li class="toclevel-2"><a href="#Other_sources"><span class="tocnumber">14.2</span> <span class="toctext">Other sources</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Further_reading"><span class="tocnumber">15</span> <span class="toctext">Further reading</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">16</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="History" id="History"></a></p>
<h2><span class="mw-headline">History</span></h2>
<p>Logic programming in the first and wider sense gave rise to a number of implementations, such as those by <a href="/wiki/Fischer_Black" title="Fischer Black">Fischer Black</a> (1964), James Slagle (1965) and Cordell Green (1969), which were question-answering systems in the spirit of McCarthy's advice-taker. Foster and Elcock's <a href="/w/index.php?title=Absys&amp;action=edit&amp;redlink=1" class="new" title="Absys (page does not exist)">Absys</a> (1969), on the other hand, was probably the first language to be explicitly developed as an assertional programming language.</p>
<p>Logic programming in the narrower sense can be traced back to debates in the late 1960s and early 1970s about declarative versus procedural representations of knowledge in Artificial Intelligence. Advocates of declarative representations were notably working at <a href="/wiki/Stanford_University" title="Stanford University">Stanford</a>, associated with <a href="/wiki/John_McCarthy_(computer_scientist)" title="John McCarthy (computer scientist)">John McCarthy</a>, Bertram Raphael and Cordell Green, and in <a href="/wiki/University_of_Edinburgh" title="University of Edinburgh">Edinburgh</a>, with <a href="/wiki/J._Alan_Robinson" title="J. Alan Robinson" class="mw-redirect">J. Alan Robinson</a> (an academic visitor from <a href="/wiki/Syracuse_University" title="Syracuse University">Syracuse University</a>), <a href="/wiki/Patrick_J._Hayes" title="Patrick J. Hayes">Pat Hayes</a>, and <a href="/wiki/Robert_Kowalski" title="Robert Kowalski">Bob Kowalski</a>. Advocates of procedural representations were mainly centered at <a href="/wiki/MIT" title="MIT" class="mw-redirect">MIT</a>, under the leadership of <a href="/wiki/Marvin_Minsky" title="Marvin Minsky">Marvin Minsky</a> and <a href="/wiki/Seymour_Papert" title="Seymour Papert">Seymour Papert</a>.</p>
<p>Although it was based on logic, <a href="/wiki/Planner_(programming_language)" title="Planner (programming language)">Planner</a>, developed at MIT, was the first language to emerge within this proceduralist paradigm [Hewitt, 1969]. Planner featured pattern directed invocation of procedural plans from goals (i.e. <a href="/wiki/Forward_chaining" title="Forward chaining">forward chaining</a>) and from assertions (i.e. <a href="/wiki/Backward_chaining" title="Backward chaining">backward chaining</a>). The most influential implementation of Planner was the subset of Planner, called Micro-Planner, implemented by <a href="/wiki/Gerald_Jay_Sussman" title="Gerald Jay Sussman">Gerry Sussman</a>, <a href="/wiki/Eugene_Charniak" title="Eugene Charniak">Eugene Charniak</a> and <a href="/wiki/Terry_Winograd" title="Terry Winograd">Terry Winograd</a>. It was used to implement Winograd's natural-language understanding program <a href="/wiki/SHRDLU" title="SHRDLU">SHRDLU</a>, which was a landmark at that time. In order to cope with the very limited memory systems that were available when it was developed, Planner used backtracking control structure so that only one possible computation path had to be stored at a time. From Planner there developed the programming languages QA-4, Popler, Conniver, QLISP, and the concurrent language Ether.</p>
<p>Hayes and Kowalski in Edinburgh tried to reconcile the logic-based declarative approach to knowledge representation with Planner's procedural approach. Hayes (1973) developed an equational language, Golux, in which different procedures could be obtained by altering the behavior of the theorem prover. Kowalski, on the other hand, showed how SL-resolution treats implications as goal-reduction procedures. Kowalski collaborated with Colmerauer in Marseille, who developed these ideas in the design and implementation of the programming language Prolog. From Prolog there developed, among others, the programming languages <a href="/wiki/ALF_(programming_language)" title="ALF (programming language)" class="mw-redirect">ALF</a>, <a href="/wiki/Fril" title="Fril">Fril</a>, <a href="/wiki/G%C3%B6del_(programming_language)" title="Gödel (programming language)">Gödel</a>, <a href="/wiki/Mercury_programming_language" title="Mercury programming language" class="mw-redirect">Mercury</a>, <a href="/wiki/Oz_(programming_language)" title="Oz (programming language)">Oz</a>, Ciao, <a href="/wiki/Visual_Prolog" title="Visual Prolog">Visual Prolog</a>, <a href="/wiki/XSB" title="XSB">XSB</a>, and <a href="/wiki/%CE%9BProlog" title="ΛProlog">λProlog</a>, as well as a variety of <a href="/w/index.php?title=Concurrent_logic_programming_languages&amp;action=edit&amp;redlink=1" class="new" title="Concurrent logic programming languages (page does not exist)">concurrent logic programming languages</a>, (see Shapiro (1989) for a survey), <a href="/wiki/Constraint_logic_programming" title="Constraint logic programming">constraint logic programming</a> languages and <a href="/wiki/Datalog" title="Datalog">datalog</a>.</p>
<p>In 1997, the Association of Logic Programming bestowed to fifteen recognized researchers in logic programming the title <i>Founders of Logic Programming</i> to recognize them as pioneers in the field. The individuals receiving this honor were: <a href="/w/index.php?title=Maurice_Bruynooghe&amp;action=edit&amp;redlink=1" class="new" title="Maurice Bruynooghe (page does not exist)">Maurice Bruynooghe</a> (Belgium), <a href="/w/index.php?title=Jacques_Cohen&amp;action=edit&amp;redlink=1" class="new" title="Jacques Cohen (page does not exist)">Jacques Cohen</a> (USA), <a href="/wiki/Alain_Colmerauer" title="Alain Colmerauer">Alain Colmerauer</a> (France), <a href="/wiki/Keith_Clark" title="Keith Clark">Keith Clark</a> (UK), <a href="/w/index.php?title=Veronica_Dahl&amp;action=edit&amp;redlink=1" class="new" title="Veronica Dahl (page does not exist)">Veronica Dahl</a> (Canada/Argentina), <a href="/w/index.php?title=Maarten_van_Emden&amp;action=edit&amp;redlink=1" class="new" title="Maarten van Emden (page does not exist)">Maarten van Emden</a> (Canada), <a href="/w/index.php?title=Herve_Gallaire&amp;action=edit&amp;redlink=1" class="new" title="Herve Gallaire (page does not exist)">Herve Gallaire</a> (France), <a href="/wiki/Robert_Kowalski" title="Robert Kowalski">Robert Kowalski</a> (UK), <a href="/wiki/Jack_Minker" title="Jack Minker">Jack Minker</a> (USA), <a href="/wiki/Fernando_Pereira" title="Fernando Pereira">Fernando Pereira</a> (USA), <a href="/wiki/Luis_Moniz_Pereira" title="Luis Moniz Pereira">Luis Moniz Pereira</a> (Portugal), <a href="/wiki/Ray_Reiter" title="Ray Reiter" class="mw-redirect">Ray Reiter</a> (Canada), <a href="/wiki/J._Alan_Robinson" title="J. Alan Robinson" class="mw-redirect">Alan Robinson</a> (USA), <a href="/w/index.php?title=Peter_Szeredi&amp;action=edit&amp;redlink=1" class="new" title="Peter Szeredi (page does not exist)">Peter Szeredi</a> (Hungary), and <a href="/wiki/David_H.D._Warren" title="David H.D. Warren" class="mw-redirect">David H.D. Warren</a> (UK).</p>
<p><a name="Prolog" id="Prolog"></a></p>
<h2><span class="mw-headline">Prolog</span></h2>
<div class="rellink noprint relarticle mainarticle">Main article: <a href="/wiki/Prolog" title="Prolog">Prolog</a></div>
<p>The programming language <a href="/wiki/Prolog" title="Prolog">Prolog</a> was developed in 1972 by <a href="/wiki/Alain_Colmerauer" title="Alain Colmerauer">Alain Colmerauer</a>. It emerged from a collaboration between Colmerauer in <a href="/wiki/Marseille" title="Marseille">Marseille</a> and <a href="/wiki/Robert_Kowalski" title="Robert Kowalski">Robert Kowalski</a> in Edinburgh. Colmerauer was working on natural language understanding, using logic to represent semantics and using resolution for question-answering. During the summer of 1971, Colmerauer and Kowalski discovered that the clausal form of logic could be used to represent formal grammars and that resolution theorem provers could be used for parsing. They observed that some theorem provers, like hyper-resolution, behave as bottom-up parsers and others, like <a href="/wiki/SLD_resolution" title="SLD resolution">SL-resolution</a> (1971), behave as top-down parsers.</p>
<p>It was in the following summer of 1972, that Kowalski, again working with Colmerauer, developed the procedural interpretation of implications. This dual declarative/procedural interpretation later became formalised in the Prolog notation</p>
<dl>
<dd><tt>H&#160;:- B<sub>1</sub>, …, B<sub>n</sub>.</tt></dd>
</dl>
<p>which can be read (and used) both declaratively and procedurally. It also became clear that such clauses could be restricted to definite clauses or <a href="/wiki/Horn_clause" title="Horn clause">Horn clauses</a>, where <tt>H</tt>, <tt>B<sub>1</sub></tt>, …, <tt>B<sub>n</sub></tt> are all atomic predicate logic formulae, and that SL-resolution could be restricted (and generalised) to LUSH or <a href="/wiki/SLD_resolution" title="SLD resolution">SLD-resolution</a>. Kowalski's procedural interpretation and LUSH were described in a 1973 memo, published in 1974.</p>
<p>Colmerauer, with Philippe Roussel, used this dual interpretation of clauses as the basis of Prolog, which was implemented in the summer and autumn of 1972. The first Prolog program, also written in 1972 and implemented in Marseille, was a French question-answering system. The use of Prolog as a practical programming language was given great momentum by the development of a compiler by David Warren in Edinburgh in 1977. Experiments demonstrated that Edinburgh Prolog could compete with the processing speed of other symbolic programming languages such as <a href="/wiki/Lisp_(programming_language)" title="Lisp (programming language)">Lisp</a>. Edinburgh Prolog became the <i>de facto</i> standard and strongly influenced the definition of <a href="/wiki/International_Organization_for_Standardization" title="International Organization for Standardization">ISO</a> standard Prolog.</p>
<p><a name="Negation_as_failure" id="Negation_as_failure"></a></p>
<h2><span class="mw-headline">Negation as failure</span></h2>
<div class="rellink noprint relarticle mainarticle">Main article: <a href="/wiki/Negation_as_failure" title="Negation as failure">Negation as failure</a></div>
<p>Micro-Planner had a construct, called "thnot", which when applied to an expression returns the value true if (and only if) the evaluation of the expression fails. An equivalent operator is normally built-in in modern <a href="/wiki/Prolog" title="Prolog">Prolog</a>'s implementations and has been called "<a href="/wiki/Negation_as_failure" title="Negation as failure">negation as failure</a>". It is normally written as not(p), where p is an atom whose variables normally have been instantiated by the time not(p) is invoked. A more cryptic (but standard) syntax is \+ p . Negation as failure literals can occur as conditions not(B<sub>i</sub>) in the body of program clauses.</p>
<p>The logical status of negation as failure was unresolved until Keith Clark [1978] showed that, under certain natural conditions, it is a correct (and sometimes complete) implementation of classical negation with respect to the completion of the program. Completion amounts roughly to regarding the set of all the program clauses with the same predicate on the left hand side, say</p>
<dl>
<dd><tt>H&#160;:- Body<sub>1</sub>.</tt></dd>
<dd><tt>…</tt></dd>
<dd><tt>H&#160;:- Body<sub>k</sub>.</tt></dd>
</dl>
<p>as a definition of the predicate</p>
<dl>
<dd><tt>H iff (Body<sub>1</sub> or … or Body<sub>k</sub>)</tt></dd>
</dl>
<p>where "iff" means "if and only if". Writing the completion also requires explicit use of the equality predicate and the inclusion of a set of appropriate axioms for equality. However, the implementation of negation by failure needs only the if-halves of the definitions without the axioms of equality.</p>
<p>The notion of completion is closely related to McCarthy's <a href="/wiki/Circumscription_(logic)" title="Circumscription (logic)">circumscription</a> semantics for default reasoning, and to the <a href="/wiki/Closed_world_assumption" title="Closed world assumption">closed world assumption</a>.</p>
<p>As an alternative to the completion semantics, negation as failure can also be interpreted epistemically, as in the <a href="/wiki/Stable_model_semantics" title="Stable model semantics">stable model semantics</a> of <a href="/wiki/Answer_set_programming" title="Answer set programming">answer set programming</a>. In this interpretation not(B<sub>i</sub>) means literally that B<sub>i</sub> is not known or not believed. The epistemic interpretation has the advantage that it can be combined very simply with classical negation, as in "extended logic programming", to formalise such phrases as "the contrary can not be shown", where "contrary" is classical negation and "can not be shown" is the epistemic interpretation of negation as failure.</p>
<p><a name="Problem_solving" id="Problem_solving"></a></p>
<h2><span class="mw-headline">Problem solving</span></h2>
<p>In the simplified, propositional case in which a logic program and a top-level atomic goal contain no variables, backward reasoning determines an <a href="/wiki/And-or_tree" title="And-or tree" class="mw-redirect">and-or tree</a>, which constitutes the search space for solving the goal. The top-level goal is the root of the tree. Given any node in the tree and any clause whose head matches the node, there exists a set of child nodes corresponding to the sub-goals in the body of the clause. These child nodes are grouped together by an "and". The alternative sets of children corresponding to alternative ways of solving the node are grouped together by an "or".</p>
<p>Any search strategy can be used to search this space. Prolog uses a sequential, last-in-first-out, backtracking strategy, in which only one alternative and one sub-goal is considered at a time. Other search strategies, such as parallel search, intelligent backtracking, or best-first search to find an optimal solution, are also possible.</p>
<p>In the more general case, where sub-goals share variables, other strategies can be used, such as choosing the subgoal that is most highly instantiated or that is sufficiently instantiated so that only one procedure applies. Such strategies are used, for example, in <a href="/w/index.php?title=Concurrent_logic_programming&amp;action=edit&amp;redlink=1" class="new" title="Concurrent logic programming (page does not exist)">concurrent logic programming</a>.</p>
<p>The fact that there are alternative ways of executing a logic program has been characterised by the equation:</p>
<p>Algorithm = Logic + Control</p>
<p>where "Logic" represents a logic program and "Control" represents different theorem-proving strategies.</p>
<p><a name="Knowledge_representation" id="Knowledge_representation"></a></p>
<h2><span class="mw-headline">Knowledge representation</span></h2>
<p>The fact that Horn clauses can be given a procedural interpretation and, vice versa, that goal-reduction procedures can be understood as Horn clauses + backward reasoning means that logic programs combine declarative and procedural representations of <a href="/wiki/Knowledge_representation" title="Knowledge representation">knowledge</a>. The inclusion of <a href="/wiki/Negation_as_failure" title="Negation as failure">negation as failure</a> means that logic programming is a kind of <a href="/wiki/Non-monotonic_logic" title="Non-monotonic logic">non-monotonic logic</a>.</p>
<p>Despite its simplicity compared with classical logic, this combination of Horn clauses and negation as failure has proved to be surprisingly expressive. For example, it has been shown to correspond, with some further extensions, quite naturally to the semi-formal language of legislation. It is also a natural language for expressing common-sense laws of cause and effect, as in the <a href="/wiki/Situation_calculus" title="Situation calculus">situation calculus</a> and <a href="/wiki/Event_calculus" title="Event calculus">event calculus</a>.</p>
<p><a name="Abductive_logic_programming" id="Abductive_logic_programming"></a></p>
<h2><span class="mw-headline">Abductive logic programming</span></h2>
<p><a href="/wiki/Abductive_Logic_Programming" title="Abductive Logic Programming" class="mw-redirect">Abductive Logic Programming</a> is an extension of normal Logic Programming that allows some predicates, declared as abducible predicates, to be incompletely defined. Problem solving is achieved by deriving hypotheses expressed in terms of the abducible predicates as solutions of problems to be solved. These problems can be either observations that need to be explained (as in classical <a href="/wiki/Abductive_reasoning" title="Abductive reasoning">abductive reasoning</a>) or goals to be achieved (as in normal logic programming). It has been used to solve problems in Diagnosis, Planning, Natural Language and Machine Learning. It has also been used to interpret Negation as Failure as a form of abductive reasoning.</p>
<p><a name="Metalogic_programming" id="Metalogic_programming"></a></p>
<h2><span class="mw-headline">Metalogic programming</span></h2>
<p>Because mathematical logic has a long tradition of distinguishing between object language and metalanguage, logic programming also allows metalevel programming. The simplest metalogic progam is the so-called "vanilla" meta-interpreter:</p>
<pre>
   solve(true).
   solve((A,B)):- solve(A),solve(B).
   solve(A):- clause(A,B),solve(B).
</pre>
<p>where true represents an empty conjunction, and clause(A,B) means there is an object-level clause of the form	A&#160;:- B.</p>
<p>Metalogic programming allows object-level and metalevel representations to be combined, as in natural language. It can also be used to implement any logic that is specified by means of inference rules.</p>
<p><a name="Constraint_logic_programming" id="Constraint_logic_programming"></a></p>
<h2><span class="mw-headline">Constraint logic programming</span></h2>
<p><a href="/wiki/Constraint_logic_programming" title="Constraint logic programming">Constraint logic programming</a> is an extension of normal Logic Programming that allows some predicates, declared as constraint predicates, to occur as literals in the body of clauses. These literals are not solved by goal-reduction using program clauses, but are added to a store of constraints, which is required to be consistent with some built-in semantics of the constraint predicates.</p>
<p>Problem solving is achieved by reducing the initial problem to a satisfiable set of constraints. Constraint logic programming has been used to solve problems in such fields as <a href="/wiki/Civil_engineering" title="Civil engineering">civil engineering</a>, <a href="/wiki/Mechanical_engineering" title="Mechanical engineering">mechanical engineering</a>, <a href="/wiki/Digital_circuit" title="Digital circuit" class="mw-redirect">digital circuit</a> verification, <a href="/w/index.php?title=Automated_timetabling&amp;action=edit&amp;redlink=1" class="new" title="Automated timetabling (page does not exist)">automated timetabling</a>, <a href="/wiki/Air_traffic_control" title="Air traffic control">air traffic control</a>, and finance. It is closely related to <a href="/wiki/Abductive_logic_programming" title="Abductive logic programming">abductive logic programming</a>.</p>
<p><a name="Concurrent_logic_programming" id="Concurrent_logic_programming"></a></p>
<h2><span class="mw-headline">Concurrent logic programming</span></h2>
<p><a href="/wiki/Keith_Clark" title="Keith Clark">Keith Clark</a>, Steve Gregory, Vijay Saraswat, Udi Shapiro, Kazunori Ueda, etc. developed a family of <a href="/wiki/Prolog" title="Prolog">Prolog</a>-like concurrent message passing systems using unification of shared variables and data structure streams for messages. Efforts were made to base these systems on mathematical logic, and they were used as the basis of the <a href="/wiki/Fifth_generation_computer" title="Fifth generation computer">Japanese Fifth Generation Project (ICOT)</a>. However, the Prolog-like concurrent systems were based on message passing and consequently were subject to the same indeterminacy as other concurrent message-passing systems, such as <a href="/wiki/Actor_model" title="Actor model">Actors</a> (see <a href="/wiki/Indeterminacy_in_concurrent_computation" title="Indeterminacy in concurrent computation">Indeterminacy in concurrent computation</a>). Consequently, the ICOT languages were not based on logic in the sense that computational steps could not be logically deduced [Hewitt and Agha, 1988].</p>
<p><a href="/wiki/Concurrent_constraint_logic_programming" title="Concurrent constraint logic programming">Concurrent constraint logic programming</a> combines concurrent logic programming and <a href="/wiki/Constraint_logic_programming" title="Constraint logic programming">constraint logic programming</a>, using constraints to control concurrency. A clause can contain a guard, which is a set of constraints that may block the applicability of the clause. When the guards of several clauses are satisfied, concurrent constraint logic programming makes a committed choice to the use of only one.</p>
<p><a name="Inductive_logic_programming" id="Inductive_logic_programming"></a></p>
<h2><span class="mw-headline">Inductive logic programming</span></h2>
<p><a href="/wiki/Inductive_logic_programming" title="Inductive logic programming">Inductive logic programming</a> is concerned with generalizing positive and negative examples in the context of background knowledge. Generalizations, as well as the examples and background knowledge, are expressed in logic programming syntax. Recent work in this area, combining logic programming, learning and probability, has given rise to the new field of statistical relational learning and probabilistic inductive logic programming.</p>
<p><a name="Higher-order_logic_programming" id="Higher-order_logic_programming"></a></p>
<h2><span class="mw-headline">Higher-order logic programming</span></h2>
<p>Several researchers have extended logic programming with <a href="/wiki/Higher-order_programming" title="Higher-order programming" class="mw-redirect">higher-order programming</a> features derived from <a href="/wiki/Higher-order_logic" title="Higher-order logic">higher-order logic</a>, such as predicate variables. Such languages include the Prolog extensions <a href="/w/index.php?title=HiLog&amp;action=edit&amp;redlink=1" class="new" title="HiLog (page does not exist)">HiLog</a> and <a href="/wiki/%CE%9BProlog" title="ΛProlog">λProlog</a>.</p>
<p><a name="Linear_logic_programming" id="Linear_logic_programming"></a></p>
<h2><span class="mw-headline">Linear logic programming</span></h2>
<p>Basing logic programming within <a href="/wiki/Linear_logic" title="Linear logic">linear logic</a> has resulted in the design of logic programming languages that are considerably more expressive than those based on classical logic. Horn clause programs can only represent state change by the change in arguments to predicates. In linear logic programming, one can use the ambient linear logic to support state change. Some early designs of logic programming languages based on linear logic include LO [Andreoli &amp; Pareschi, 1991], Lolli [Hodas &amp; Miller, 1994], ACL [Kobayashi &amp; Yonezawa, 1994], and Forum [Miller, 1996]. Forum provides a goal-direct interpretation of all of linear logic.</p>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="mw-headline">See also</span></h2>
<ul>
<li><a href="/wiki/Constraint_logic_programming" title="Constraint logic programming">Constraint logic programming</a></li>
<li><a href="/wiki/Datalog" title="Datalog">Datalog</a></li>
<li><a href="/wiki/Functional_programming" title="Functional programming">Functional programming</a></li>
<li><a href="/wiki/Inductive_logic_programming" title="Inductive logic programming">Inductive logic programming</a></li>
<li><a href="/wiki/Logic_in_computer_science" title="Logic in computer science">Logic in computer science</a> (includes <a href="/wiki/Formal_methods" title="Formal methods">Formal methods</a>)</li>
<li><a href="/wiki/Category:Logic_programming_languages" title="Category:Logic programming languages">Logic programming languages</a></li>
<li><a href="/wiki/Programming_paradigm" title="Programming paradigm">Programming paradigm</a></li>
</ul>
<p><a name="References" id="References"></a></p>
<h2><span class="mw-headline">References</span></h2>
<p><a name="General_introductions" id="General_introductions"></a></p>
<h3><span class="mw-headline">General introductions</span></h3>
<ul>
<li>Chitta Baral and Michael Gelfond. <a href="http://www.cs.ttu.edu/~mgelfond/papers/survey.pdf" class="external text" title="http://www.cs.ttu.edu/~mgelfond/papers/survey.pdf" rel="nofollow"><b>Logic programming and knowledge representation</b></a> Journal of Logic Programming. 1994, Vol. 19, 73-148.</li>
<li>Robert Kowalski. <a href="http://www.doc.ic.ac.uk/~rak/papers/the%20early%20years.pdf" class="external text" title="http://www.doc.ic.ac.uk/~rak/papers/the%20early%20years.pdf" rel="nofollow"><b>The Early Years of Logic Programming</b></a> CACM. January 1988.</li>
<li>J. W. Lloyd. <b>Foundations of Logic Programming</b> (2nd edition). Springer-Verlag 1987.</li>
</ul>
<p><a name="Other_sources" id="Other_sources"></a></p>
<h3><span class="mw-headline">Other sources</span></h3>
<ul>
<li>Fisher Black. <b>A deductive question answering system</b> Harvard University. Thesis. 1964.</li>
<li>J.M. Foster and E.W. Elcock. ABSYS 1: An Incremental Compiler for Assertions: an Introduction, , Machine Intelligence 4, Edinburgh U Press, 1969, pp. 423-429</li>
<li>Cordell Green. <b>Application of Theorem Proving to Problem Solving</b> IJCAI 1969.</li>
<li>Pat Hayes. Computation and Deduction. In Proceedings of the 2nd MFCS Symposium. Czechoslovak Academy of Sciences, 1973, pp. 105-118.</li>
<li>Carl Hewitt. <b>Planner: A Language for Proving Theorems in Robots</b> IJCAI 1969.</li>
<li>Joshua Hodas and Dale Miller. <b>Logic Programming in a Fragment of Intuitionistic Linear Logic</b>, Information and Computation, 1994, 110(2), 327-365.</li>
<li>Naoki Kobayashi and <a href="/wiki/Akinori_Yonezawa" title="Akinori Yonezawa">Akinori Yonezawa</a>. <b>Asynchronous communication model based on linear logic</b>, Formal Aspects of Computing, 1994, 279-294.</li>
<li>Robert Kowalski and Donald and Kuehner, <a href="http://www.doc.ic.ac.uk/~rak/papers/sl.pdf" class="external text" title="http://www.doc.ic.ac.uk/~rak/papers/sl.pdf" rel="nofollow"><b>Linear Resolution with Selection Function</b></a> Artificial Intelligence, Vol. 2, 1971, pp. 227-60.</li>
<li>Robert Kowalski <a href="http://www.doc.ic.ac.uk/~rak/papers/IFIP%2074.pdf" class="external text" title="http://www.doc.ic.ac.uk/~rak/papers/IFIP%2074.pdf" rel="nofollow"><b>Predicate Logic as a Programming Language</b></a> Memo 70, Department of Artificial Intelligence, Edinburgh University. 1973. Also in Proceedings IFIP Congress, Stockholm, North Holland Publishing Co., 1974, pp. 569-574.</li>
<li>John McCarthy. <b>Programs with <a href="/wiki/Common_sense" title="Common sense">common sense</a></b> Symposium on Mechanization of Thought Processes. National Physical Laboratory. Teddington, England. 1958.</li>
<li>D. Miller, G. Nadathur, F. Pfenning, A. Scedrov. <b>Uniform proofs as a foundation for logic programming</b>, Annals of Pure and Applied Logic, vol. 51, pp 125-157, 1991.</li>
<li>Ehud Shapiro (Editor). <b>Concurrent Prolog</b> MIT Press. 1987.</li>
<li>Ehud Shapiro. <b>The family of concurrent logic programming languages</b> ACM Computing Surveys. September 1989.</li>
<li>James Slagle. <b>Experiments with a Deductive Question-Answering Program</b> CACM. December, 1965.</li>
<li>Shunichi Uchida and Kazuhiro Fuchi <b>Proceedings of the FGCS Project Evaluation Workshop</b> Institute for New Generation Computer Technology (ICOT). 1992.</li>
</ul>
<p><a name="Further_reading" id="Further_reading"></a></p>
<h2><span class="mw-headline">Further reading</span></h2>
<ul>
<li>Carl Hewitt. <b>Procedural Embedding of Knowledge In Planner</b> IJCAI 1971.</li>
<li>Carl Hewitt. <b>The repeated demise of logic programming and why it will be reincarnated</b> What Went Wrong and Why: Lessons from AI Research and Applications. Technical Report SS-06-08. AAAI Press. March 2006. Revised version in <a href="http://knol.google.com/k/carl-hewitt-httpcarlhewittinfo/middle-history-of-logic-programming/pcxtp4rx7g1t/3#" class="external text" title="http://knol.google.com/k/carl-hewitt-httpcarlhewittinfo/middle-history-of-logic-programming/pcxtp4rx7g1t/3#" rel="nofollow"><b>Middle History of Logic Programming: Resolution, Planner, Prolog and the Japanese Fifth Generation Project</b></a>.</li>
<li>Evgeny Dantsin, Thomas Eiter, Georg Gottlob, Andrei Voronkov: Complexity and expressive power of logic programming. ACM Comput. Surv. 33(3): 374-425 (2001)</li>
<li>Ulf Nilsson and Jan Maluszynski, <a href="http://www.ida.liu.se/~ulfni/lpp/" class="external text" title="http://www.ida.liu.se/~ulfni/lpp/" rel="nofollow">Logic, Programming and Prolog</a></li>
</ul>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="mw-headline">External links</span></h2>
<ul>
<li><a href="http://vl.fmnet.info/logic-prog/" class="external text" title="http://vl.fmnet.info/logic-prog/" rel="nofollow"><i>Logic Programming</i> Virtual Library entry</a></li>
<li><a href="http://liinwww.ira.uka.de/bibliography/LogicProgramming/" class="external text" title="http://liinwww.ira.uka.de/bibliography/LogicProgramming/" rel="nofollow">Bibliographies on Logic Programming</a></li>
<li><a href="http://www.cs.kuleuven.be/~dtai/projects/ALP/" class="external text" title="http://www.cs.kuleuven.be/~dtai/projects/ALP/" rel="nofollow">Association for Logic Programming (ALP)</a></li>
<li><a href="http://www.cs.kuleuven.be/~dtai/projects/ALP/TPLP/" class="external text" title="http://www.cs.kuleuven.be/~dtai/projects/ALP/TPLP/" rel="nofollow">Theory and Practice of Logic Programming</a> journal</li>
<li><a href="http://www.mpprogramming.com/Cpp/" class="external text" title="http://www.mpprogramming.com/Cpp/" rel="nofollow">Logic programming in C++ with Castor</a></li>
<li><a href="http://www.mozart-oz.org/documentation/tutorial/node12.html" class="external text" title="http://www.mozart-oz.org/documentation/tutorial/node12.html" rel="nofollow">Logic programming in</a> <a href="/wiki/Oz_programming_language" title="Oz programming language" class="mw-redirect">Oz</a></li>
<li><a href="http://www.pdc.dk/" class="external text" title="http://www.pdc.dk/" rel="nofollow">Prolog Development Center</a></li>
</ul>
<table class="navbox" cellspacing="0" style=";">
<tr>
<td style="padding:2px;">
<table cellspacing="0" class="nowraplinks collapsible autocollapse" style="width:100%;background:transparent;color:inherit;;">
<tr>
<th style=";" colspan="2" class="navbox-title">
<div style="float:left; width:6em;text-align:left;">
<div class="noprint plainlinksneverexpand navbar" style="background:none; padding:0; font-weight:normal;;;border:none;; font-size:xx-small;"><a href="/wiki/Template:Programming_language" title="Template:Programming language"><span title="View this template" style=";;border:none;">v</span></a>&#160;•&#160;<a href="/wiki/Template_talk:Programming_language" title="Template talk:Programming language"><span title="Discussion about this template" style=";;border:none;">d</span></a>&#160;•&#160;<a href="http://en.wikipedia.org/w/index.php?title=Template:Programming_language&amp;action=edit" class="external text" title="http://en.wikipedia.org/w/index.php?title=Template:Programming_language&amp;action=edit" rel="nofollow"><span title="Edit this template" style=";;border:none;;">e</span></a></div>
</div>
<span style="font-size:110%;"><a href="/wiki/Programming_paradigm" title="Programming paradigm">Types of programming languages</a></span></th>
</tr>
<tr style="height:2px;">
<td></td>
</tr>
<tr>
<td colspan="2" style="width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<div style="padding:0em 0.25em"><a href="/wiki/Array_programming" title="Array programming">Array</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Aspect-oriented_programming" title="Aspect-oriented programming">Aspect-oriented</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Assembly_language" title="Assembly language">Assembly</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Class-based_programming" title="Class-based programming">Class-based</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Compiled_language" title="Compiled language">Compiled</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Concurrent_computing" title="Concurrent computing">Concurrent</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Curly_bracket_programming_language" title="Curly bracket programming language">Curly bracket</a><span style="font-weight:bold;">&#160;·</span> <a href="/w/index.php?title=Data-oriented_language&amp;action=edit&amp;redlink=1" class="new" title="Data-oriented language (page does not exist)">Data-oriented</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Data-structured_language" title="Data-structured language">Data-structured</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Dataflow_programming" title="Dataflow programming">Dataflow</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Declarative_programming" title="Declarative programming">Declarative</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Domain-specific_programming_language" title="Domain-specific programming language" class="mw-redirect">Domain-specific</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Dynamic_programming_language" title="Dynamic programming language">Dynamic</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Esoteric_programming_language" title="Esoteric programming language">Esoteric</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Event-driven_programming" title="Event-driven programming">Event-driven</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Extensible_programming" title="Extensible programming">Extensible</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Functional_programming" title="Functional programming">Functional</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/High-level_programming_language" title="High-level programming language">High-level</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Imperative_programming" title="Imperative programming">Imperative</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Interpreted_language" title="Interpreted language">Interpreted</a><span style="font-weight:bold;">&#160;·</span> <strong class="selflink">Logic</strong><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Low-level_programming_language" title="Low-level programming language">Low-level</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Machine_code" title="Machine code">Machine</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Macro_(computer_science)" title="Macro (computer science)">Macro</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Metaprogramming" title="Metaprogramming">Metaprogramming</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Multi-paradigm_programming_language" title="Multi-paradigm programming language">Multi-paradigm</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Non-English-based_programming_languages" title="Non-English-based programming languages">Non-English-based</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Object-oriented_programming_language" title="Object-oriented programming language">Object-oriented</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Off-side_rule" title="Off-side rule">Off-side rule</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Pipeline_programming" title="Pipeline programming">Pipeline</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Procedural_programming" title="Procedural programming">Procedural</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Prototype-based_programming" title="Prototype-based programming">Prototype-based</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Reflection_(computer_science)" title="Reflection (computer science)">Reflective</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Rule-based_language" title="Rule-based language" class="mw-redirect">Rule-based</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Scripting_language" title="Scripting language">Scripting</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Synchronous_programming_language" title="Synchronous programming language">Synchronous</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Visual_programming_language" title="Visual programming language">Visual</a></div>
</td>
</tr>
</table>
</td>
</tr>
</table>


<!-- 
NewPP limit report
Preprocessor node count: 784/1000000
Post-expand include size: 23304/2048000 bytes
Template argument size: 7856/2048000 bytes
Expensive parser function count: 0/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:17927-0!1!0!default!!en!2!edit=0 and timestamp 20090331074448 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Logic_programming">http://en.wikipedia.org/wiki/Logic_programming</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:1972_introductions" title="Category:1972 introductions">1972 introductions</a></span> | <span dir='ltr'><a href="/wiki/Category:Logic_programming" title="Category:Logic programming">Logic programming</a></span> | <span dir='ltr'><a href="/wiki/Category:Programming_paradigms" title="Category:Programming paradigms">Programming paradigms</a></span></div><div id="mw-hidden-catlinks" class="mw-hidden-cats-hidden">Hidden categories:&#32;<span dir='ltr'><a href="/wiki/Category:Wikipedia_semi-protected_pages" title="Category:Wikipedia semi-protected pages">Wikipedia semi-protected pages</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Logic_programming" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Logic_programming" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-viewsource"><a href="/w/index.php?title=Logic_programming&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e">View source</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Logic_programming&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Logic_programming" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Logic_programming" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Logic_programming" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Logic_programming&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Logic_programming&amp;oldid=269995394" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Logic_programming&amp;id=269995394">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-bn"><a href="http://bn.wikipedia.org/wiki/%E0%A6%AF%E0%A7%81%E0%A6%95%E0%A7%8D%E0%A6%A4%E0%A6%BF%E0%A6%AD%E0%A6%BF%E0%A6%A4%E0%A7%8D%E0%A6%A4%E0%A6%BF%E0%A6%95_%E0%A6%AA%E0%A7%8D%E0%A6%B0%E0%A7%8B%E0%A6%97%E0%A7%8D%E0%A6%B0%E0%A6%BE%E0%A6%AE%E0%A6%BF%E0%A6%82">বাংলা</a></li>
				<li class="interwiki-bs"><a href="http://bs.wikipedia.org/wiki/Logi%C4%8Dko_programiranje">Bosanski</a></li>
				<li class="interwiki-cs"><a href="http://cs.wikipedia.org/wiki/Logick%C3%A9_programov%C3%A1n%C3%AD">Česky</a></li>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/Logische_Programmierung">Deutsch</a></li>
				<li class="interwiki-es"><a href="http://es.wikipedia.org/wiki/Programaci%C3%B3n_l%C3%B3gica">Español</a></li>
				<li class="interwiki-fa"><a href="http://fa.wikipedia.org/wiki/%D8%A8%D8%B1%D9%86%D8%A7%D9%85%D9%87%E2%80%8C%D9%86%D9%88%DB%8C%D8%B3%DB%8C_%D9%85%D9%86%D8%B7%D9%82%DB%8C">فارسی</a></li>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Programmation_logique">Français</a></li>
				<li class="interwiki-gl"><a href="http://gl.wikipedia.org/wiki/Programaci%C3%B3n_l%C3%B3xica">Galego</a></li>
				<li class="interwiki-io"><a href="http://io.wikipedia.org/wiki/Logika_programeso">Ido</a></li>
				<li class="interwiki-ms"><a href="http://ms.wikipedia.org/wiki/Pengaturcaraan_logik">Bahasa Melayu</a></li>
				<li class="interwiki-nl"><a href="http://nl.wikipedia.org/wiki/Logisch_programmeren">Nederlands</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/%E8%AB%96%E7%90%86%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0">日本語</a></li>
				<li class="interwiki-pl"><a href="http://pl.wikipedia.org/wiki/Programowanie_logiczne">Polski</a></li>
				<li class="interwiki-pt"><a href="http://pt.wikipedia.org/wiki/Programa%C3%A7%C3%A3o_l%C3%B3gica">Português</a></li>
				<li class="interwiki-ru"><a href="http://ru.wikipedia.org/wiki/%D0%9B%D0%BE%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5">Русский</a></li>
				<li class="interwiki-fi"><a href="http://fi.wikipedia.org/wiki/Logiikkapohjainen_ohjelmointikieli">Suomi</a></li>
				<li class="interwiki-sv"><a href="http://sv.wikipedia.org/wiki/Logikprogrammering">Svenska</a></li>
				<li class="interwiki-th"><a href="http://th.wikipedia.org/wiki/%E0%B8%81%E0%B8%B2%E0%B8%A3%E0%B9%80%E0%B8%82%E0%B8%B5%E0%B8%A2%E0%B8%99%E0%B9%82%E0%B8%9B%E0%B8%A3%E0%B9%81%E0%B8%81%E0%B8%A3%E0%B8%A1%E0%B9%80%E0%B8%8A%E0%B8%B4%E0%B8%87%E0%B8%95%E0%B8%A3%E0%B8%A3%E0%B8%81%E0%B8%B0">ไทย</a></li>
				<li class="interwiki-uk"><a href="http://uk.wikipedia.org/wiki/%D0%9B%D0%BE%D0%B3%D1%96%D1%87%D0%BD%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D1%83%D0%B2%D0%B0%D0%BD%D0%BD%D1%8F">Українська</a></li>
				<li class="interwiki-zh"><a href="http://zh.wikipedia.org/wiki/%E9%82%8F%E8%BC%AF%E7%B7%A8%E7%A8%8B">中文</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 11 February 2009, at 13:35.</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv205 in 0.164 secs. --></body></html>
