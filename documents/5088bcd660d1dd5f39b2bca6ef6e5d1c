<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Automata-based programming,Programming paradigms,Abductive logic programming,Array programming,Aspect-oriented programming,Attribute-Oriented Programming,Automata-based programming (Shalyto&#039;s approach),Automata theory,Automatic programming,C (programming language),Call/cc" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Automata-based_programming&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Automata-based_programming&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Automata-based programming - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Automata-based_programming";
		var wgTitle = "Automata-based programming";
		var wgAction = "view";
		var wgArticleId = "3377755";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 283602676;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
<style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-c .de1, .source-c .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-c  {}
.source-c .head {}
.source-c .foot {}
.source-c .imp {font-weight: bold; color: red;}
.source-c .ln-xtra {color: #cc0; background-color: #ffc;}
.source-c li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-c li.li2 {font-weight: bold;}
.source-c .kw1 {color: #b1b100;}
.source-c .kw2 {color: #000000; font-weight: bold;}
.source-c .kw3 {color: #000066;}
.source-c .kw4 {color: #993333;}
.source-c .co1 {color: #808080; font-style: italic;}
.source-c .co2 {color: #339933;}
.source-c .coMULTI {color: #808080; font-style: italic;}
.source-c .es0 {color: #000099; font-weight: bold;}
.source-c .br0 {color: #66cc66;}
.source-c .st0 {color: #ff0000;}
.source-c .nu0 {color: #cc66cc;}
.source-c .me1 {color: #202020;}
.source-c .me2 {color: #202020;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-cpp {line-height: normal;}
.source-cpp li, .source-cpp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for cpp
 * CSS class: source-cpp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-cpp .de1, .source-cpp .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-cpp  {}
.source-cpp .head {}
.source-cpp .foot {}
.source-cpp .imp {font-weight: bold; color: red;}
.source-cpp .ln-xtra {color: #cc0; background-color: #ffc;}
.source-cpp li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-cpp li.li2 {font-weight: bold;}
.source-cpp .kw1 {color: #0000ff;}
.source-cpp .kw2 {color: #0000ff;}
.source-cpp .kw3 {color: #0000dd;}
.source-cpp .kw4 {color: #0000ff;}
.source-cpp .co1 {color: #ff0000;}
.source-cpp .co2 {color: #339900;}
.source-cpp .coMULTI {color: #ff0000; font-style: italic;}
.source-cpp .es0 {color: #666666; font-weight: bold;}
.source-cpp .br0 {color: #000000;}
.source-cpp .st0 {color: #666666;}
.source-cpp .nu0 {color: #0000dd;}
.source-cpp .me1 {color: #00eeff;}
.source-cpp .me2 {color: #00eeff;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style>		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Automata-based_programming skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Automata-based programming</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<div class="dablink">For other uses, see <a href="/wiki/Automata-based_programming_(Shalyto%27s_approach)" title="Automata-based programming (Shalyto's approach)">Automata-based programming (Shalyto's approach)</a>.</div>
<table class="navbox" style="float:right; background-color:rgb(248,248,255); clear:right; margin: 1ex 0 0.5em 1em; width: 20em">
<tr>
<th><a href="/wiki/Programming_paradigm" title="Programming paradigm">Programming paradigms</a></th>
</tr>
<tr>
<td style="text-align:left">
<ul>
<li><a href="/wiki/Software_agent" title="Software agent">Agent-oriented</a></li>
<li><a href="/wiki/Component-based_software_engineering" title="Component-based software engineering">Component-based</a>
<ul>
<li><a href="/wiki/Flow-based_programming" title="Flow-based programming">Flow-based</a></li>
<li><a href="/wiki/Pipeline_programming" title="Pipeline programming">Pipeline</a></li>
</ul>
</li>
<li><a href="/wiki/Concatenative_programming_language" title="Concatenative programming language">Concatenative</a></li>
<li><a href="/wiki/Concurrent_computing" title="Concurrent computing">Concurrent computing</a></li>
<li><a href="/w/index.php?title=Context-oriented_programming&amp;action=edit&amp;redlink=1" class="new" title="Context-oriented programming (page does not exist)">Context-oriented</a></li>
<li><a href="/wiki/Declarative_programming" title="Declarative programming">Declarative</a> (Contrast: <a href="/wiki/Imperative_programming" title="Imperative programming">Imperative</a>)
<ul>
<li><a href="/wiki/Functional_programming" title="Functional programming">Functional</a>
<ul>
<li><a href="/wiki/Dataflow" title="Dataflow">Dataflow</a>
<ul>
<li><a href="/wiki/Spreadsheet" title="Spreadsheet">Cell-oriented (spreadsheets)</a></li>
<li><a href="/wiki/Reactive_programming" title="Reactive programming">Reactive</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="/w/index.php?title=Goal-directed_programming&amp;action=edit&amp;redlink=1" class="new" title="Goal-directed programming (page does not exist)">Goal-directed</a>
<ul>
<li><a href="/wiki/Constraint_programming" title="Constraint programming">Constraint</a></li>
<li><a href="/wiki/Constraint_logic_programming" title="Constraint logic programming">Constraint logic</a></li>
<li><a href="/wiki/Logic_programming" title="Logic programming">Logic</a>
<ul>
<li><a href="/wiki/Abductive_logic_programming" title="Abductive logic programming">Abductive logic</a></li>
<li><a href="/wiki/Inductive_logic_programming" title="Inductive logic programming">Inductive logic</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><a href="/wiki/Event-driven_programming" title="Event-driven programming">Event-driven</a></li>
<li><a href="/wiki/Feature_Oriented_Programming" title="Feature Oriented Programming">Feature-oriented</a></li>
<li><a href="/wiki/Function-level_programming" title="Function-level programming">Function-level</a> (Contrast: <a href="/wiki/Value-level_programming" title="Value-level programming">Value-level</a>)</li>
<li><a href="/wiki/Imperative_programming" title="Imperative programming">Imperative</a> (Contrast: <a href="/wiki/Declarative_programming" title="Declarative programming">Declarative</a>)
<ul>
<li>Advanced separation of concerns
<ul>
<li><a href="/wiki/Aspect-oriented_programming" title="Aspect-oriented programming">Aspect-oriented</a></li>
<li><a href="/wiki/Subject-oriented_programming" title="Subject-oriented programming">Subject-oriented</a></li>
</ul>
</li>
<li><a href="/wiki/Array_programming" title="Array programming">Array</a> (Contrast: <a href="/wiki/Scalar_programming" title="Scalar programming">Scalar</a>)</li>
<li><strong class="selflink">Automata-based</strong></li>
<li><a href="/wiki/Object-oriented_programming" title="Object-oriented programming">Object-oriented</a>
<ul>
<li><a href="/wiki/Class-based_programming" title="Class-based programming">Class-based</a></li>
<li><a href="/wiki/Prototype-based_programming" title="Prototype-based programming">Prototype-based</a></li>
</ul>
</li>
<li><a href="/wiki/Procedural_programming" title="Procedural programming">Procedural</a>
<ul>
<li><a href="/wiki/Structured_programming" title="Structured programming">Structured</a></li>
</ul>
</li>
<li><a href="/wiki/Role-oriented_programming" title="Role-oriented programming">Role-oriented</a></li>
<li><a href="/wiki/Scalar_programming" title="Scalar programming">Scalar</a> (Contrast: <a href="/wiki/Array_programming" title="Array programming">Array</a>)</li>
</ul>
</li>
<li><a href="/wiki/Iteration" title="Iteration">Iterative</a> (Contrast: <a href="/wiki/Recursion_(computer_science)" title="Recursion (computer science)">Recursive</a>)</li>
<li><a href="/wiki/Metaprogramming" title="Metaprogramming">Metaprogramming</a>
<ul>
<li><a href="/wiki/Attribute-Oriented_Programming" title="Attribute-Oriented Programming">Attribute-oriented</a></li>
<li><a href="/wiki/Automatic_programming" title="Automatic programming">Automatic</a>
<ul>
<li><a href="/wiki/Generic_programming" title="Generic programming">Generic</a>
<ul>
<li><a href="/wiki/Template_metaprogramming" title="Template metaprogramming">Template</a>
<ul>
<li><a href="/wiki/Policy-based_design" title="Policy-based design">Policy-based</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="/wiki/Language-oriented_programming" title="Language-oriented programming">Language-oriented</a>
<ul>
<li><a href="/wiki/Grammar-oriented_programming" title="Grammar-oriented programming">Grammar-oriented</a>
<ul>
<li><a href="/wiki/Dialecting" title="Dialecting">Dialecting</a></li>
</ul>
</li>
<li><a href="/wiki/Intentional_programming" title="Intentional programming">Intentional</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="/wiki/Reflection_(computer_science)" title="Reflection (computer science)">Reflective</a></li>
</ul>
</li>
<li><a href="/wiki/Modular_programming" title="Modular programming">Modular</a></li>
<li><a href="/wiki/Nondeterministic_programming" title="Nondeterministic programming">Nondeterministic</a></li>
<li><a href="/wiki/Parallel_computing" title="Parallel computing">Parallel computing</a>
<ul>
<li><a href="/wiki/Process-oriented_programming" title="Process-oriented programming">Process-oriented</a></li>
</ul>
</li>
<li><a href="/wiki/Programming_in_the_large_and_programming_in_the_small" title="Programming in the large and programming in the small">Programming in the large and programming in the small</a></li>
<li><a href="/wiki/Recursion_(computer_science)" title="Recursion (computer science)">Recursive</a> (Contrast: <a href="/wiki/Iteration" title="Iteration">Iterative</a>)</li>
<li><a href="/wiki/Tree_programming" title="Tree programming">Tree</a></li>
<li><a href="/wiki/Value-level_programming" title="Value-level programming">Value-level</a> (Contrast: <a href="/wiki/Function-level_programming" title="Function-level programming">Function-level</a>)</li>
</ul>
<hr />
<div class="noprint plainlinksneverexpand navbar" style="background:none; padding:0; font-weight:normal;; font-size:xx-small; text-align:center;">This box: <a href="/wiki/Template:Programming_paradigms" title="Template:Programming paradigms"><span title="View this template" style="">view</span></a>&#160;<span style="font-size:80%;">•</span>&#160;<a href="/wiki/Template_talk:Programming_paradigms" title="Template talk:Programming paradigms"><span title="Discussion about this template" style="">talk</span></a>&#160;<span style="font-size:80%;">•</span>&#160;<a href="http://en.wikipedia.org/w/index.php?title=Template:Programming_paradigms&amp;action=edit" class="external text" title="http://en.wikipedia.org/w/index.php?title=Template:Programming_paradigms&amp;action=edit" rel="nofollow"><span title="Edit this template" style=";">edit</span></a></div>
</td>
</tr>
</table>
<p><b>Automata-based programming</b> is a <a href="/wiki/Programming_paradigm" title="Programming paradigm">programming paradigm</a> in which the program or its part is thought of as a model of a <a href="/wiki/Finite_state_machine" title="Finite state machine" class="mw-redirect">finite state machine</a> or any other (often more complicated) formal automata (see <a href="/wiki/Automata_theory" title="Automata theory">automata theory</a>). Sometimes a potentially-infinite set of possible states is introduced, and such a set can have a complicated structure, not just an enumeration.</p>
<p><b>FSM-based programming</b> is generally the same, but, formally speaking, doesn't cover all possible variants as FSM stands for <a href="/wiki/Finite_state_machine" title="Finite state machine" class="mw-redirect">finite state machine</a> and <b>automata-based programming</b> doesn't necessarily employ FSMs in the strict sense.</p>
<p>The following properties are key indicators for automata-based programming:</p>
<ol>
<li>The time period of the program's execution is clearly separated down to the <i>steps of the automaton</i>. Each of the <i>steps</i> is effectively an execution of a code section (same for all the steps), which has a single entry point. Such a section can be a function or other routine, or just a cycle body. The step section might be divided down to subsection to be executed depending on different states, although this is not necessary.</li>
<li>Any communication between the steps is only possible via the explicitly noted set of variables named <i>the state</i>. Between any two steps, the program (or its part created using the automata-based technique) can <b>not</b> have implicit components of its state, such as local (stack) variables' values, return addresses, the current instruction pointer etc. That is, the state of the whole program, taken at any two moments of entering the step of the automaton, can only differ in the values of the variables being considered as the state of the automaton.</li>
</ol>
<p>The whole execution of the automata-based code is a (possibly explicit) cycle of the automaton's steps.</p>
<p>Another reason to use the notion of <b>automata-based programming</b> is that the programmer's style of thinking about the program in this technique is very similar to the style of thinking used to solve maths-related tasks using <a href="/wiki/Turing_machine" title="Turing machine">Turing machine</a>, <a href="/wiki/Markov_algorithm" title="Markov algorithm">Markov algorithm</a> etc.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Example"><span class="tocnumber">1</span> <span class="toctext">Example</span></a>
<ul>
<li class="toclevel-2"><a href="#Traditional_.28imperative.29_program"><span class="tocnumber">1.1</span> <span class="toctext">Traditional (imperative) program</span></a></li>
<li class="toclevel-2"><a href="#Automata-based_style_program"><span class="tocnumber">1.2</span> <span class="toctext">Automata-based style program</span></a></li>
<li class="toclevel-2"><a href="#A_separate_function_for_the_automaton_step"><span class="tocnumber">1.3</span> <span class="toctext">A separate function for the automaton step</span></a></li>
<li class="toclevel-2"><a href="#Explicit_state_transition_table"><span class="tocnumber">1.4</span> <span class="toctext">Explicit state transition table</span></a></li>
<li class="toclevel-2"><a href="#Using_object-oriented_capabilities"><span class="tocnumber">1.5</span> <span class="toctext">Using object-oriented capabilities</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Applications"><span class="tocnumber">2</span> <span class="toctext">Applications</span></a></li>
<li class="toclevel-1"><a href="#History"><span class="tocnumber">3</span> <span class="toctext">History</span></a></li>
<li class="toclevel-1"><a href="#Compared_against_imperative_and_procedural_programming"><span class="tocnumber">4</span> <span class="toctext">Compared against imperative and procedural programming</span></a></li>
<li class="toclevel-1"><a href="#Object-oriented_programming_relationship"><span class="tocnumber">5</span> <span class="toctext">Object-oriented programming relationship</span></a></li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">6</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">7</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1"><a href="#See_also_2"><span class="tocnumber">8</span> <span class="toctext">See also</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Example" id="Example"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Automata-based_programming&amp;action=edit&amp;section=1" title="Edit section: Example">edit</a>]</span> <span class="mw-headline">Example</span></h2>
<p>Consider we need a program in <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a> that reads a text from <i>standard input stream</i>, line by line, and prints the first word of each line. It is clear we need first to read and skip the leading spaces, if any, then read characters of the first word and print them until the word ends, and then read and skip all the remaining characters until the end-of-line character is encountered. Upon the end of line character (regardless of the stage) we restart the algorithm from the beginning, and in case the <i>end of file</i> condition (regardless of the stage) we terminate the program.</p>
<p><a name="Traditional_.28imperative.29_program" id="Traditional_.28imperative.29_program"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Automata-based_programming&amp;action=edit&amp;section=2" title="Edit section: Traditional (imperative) program">edit</a>]</span> <span class="mw-headline">Traditional (imperative) program</span></h3>
<p>The program which solves the example task in traditional (imperative) style can look something like this:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="co2">#include &lt;stdio.h&gt;</span>
<span class="kw4">int</span> main<span class="br0">(</span><span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw4">int</span> c;
    <span class="kw1">do</span> <span class="br0">{</span>
        c = getchar<span class="br0">(</span><span class="br0">)</span>;
        <span class="kw1">while</span><span class="br0">(</span>c == <span class="st0">' '</span><span class="br0">)</span>
            c = getchar<span class="br0">(</span><span class="br0">)</span>;
        <span class="kw1">while</span><span class="br0">(</span>c != EOF &amp;&amp; c != <span class="st0">' '</span> &amp;&amp; c != <span class="st0">'<span class="es0">\n</span>'</span><span class="br0">)</span> <span class="br0">{</span>
            putchar<span class="br0">(</span>c<span class="br0">)</span>;
            c = getchar<span class="br0">(</span><span class="br0">)</span>;
        <span class="br0">}</span>
        putchar<span class="br0">(</span><span class="st0">'<span class="es0">\n</span>'</span><span class="br0">)</span>;
        <span class="kw1">while</span><span class="br0">(</span>c != EOF &amp;&amp; c != <span class="st0">'<span class="es0">\n</span>'</span><span class="br0">)</span>
            c = getchar<span class="br0">(</span><span class="br0">)</span>;
    <span class="br0">}</span> <span class="kw1">while</span><span class="br0">(</span>c != EOF<span class="br0">)</span>;
    <span class="kw1">return</span> <span class="nu0">0</span>;
<span class="br0">}</span>
</pre></div>
<p><a name="Automata-based_style_program" id="Automata-based_style_program"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Automata-based_programming&amp;action=edit&amp;section=3" title="Edit section: Automata-based style program">edit</a>]</span> <span class="mw-headline">Automata-based style program</span></h3>
<p>The same task can be solved thinking in terms of finite state machines. Please note that line parsing has three stages: skipping the leading spaces, printing the word and skipping the trailing characters. Let's call them <b>states</b> <code>before</code>, <code>inside</code> and <code>after</code>. The program may now look like this:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="co2">#include &lt;stdio.h&gt;</span>
<span class="kw4">int</span> main<span class="br0">(</span><span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw2">enum</span> states <span class="br0">{</span>
        before, inside, after
    <span class="br0">}</span> state;
    <span class="kw4">int</span> c;
    state = before;
    <span class="kw1">while</span><span class="br0">(</span><span class="br0">(</span>c = getchar<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span> != EOF<span class="br0">)</span> <span class="br0">{</span>
        <span class="kw1">switch</span><span class="br0">(</span>state<span class="br0">)</span> <span class="br0">{</span>
            <span class="kw1">case</span> before:
                <span class="kw1">if</span><span class="br0">(</span>c == <span class="st0">'<span class="es0">\n</span>'</span><span class="br0">)</span> <span class="br0">{</span>
                    putchar<span class="br0">(</span><span class="st0">'<span class="es0">\n</span>'</span><span class="br0">)</span>;
                <span class="br0">}</span> <span class="kw1">else</span>
                <span class="kw1">if</span><span class="br0">(</span>c != <span class="st0">' '</span><span class="br0">)</span> <span class="br0">{</span>
                    putchar<span class="br0">(</span>c<span class="br0">)</span>;
                    state = inside;
                <span class="br0">}</span>
                <span class="kw2">break</span>;
            <span class="kw1">case</span> inside:
                <span class="kw1">switch</span><span class="br0">(</span>c<span class="br0">)</span> <span class="br0">{</span>
                    <span class="kw1">case</span> <span class="st0">' '</span>:  state = after; <span class="kw2">break</span>;
                    <span class="kw1">case</span> <span class="st0">'<span class="es0">\n</span>'</span>:
                        putchar<span class="br0">(</span><span class="st0">'<span class="es0">\n</span>'</span><span class="br0">)</span>;
                        state = before;
                        <span class="kw2">break</span>;
                    <span class="kw1">default</span>:   putchar<span class="br0">(</span>c<span class="br0">)</span>;
                <span class="br0">}</span>
                <span class="kw2">break</span>;
            <span class="kw1">case</span> after:
                <span class="kw1">if</span><span class="br0">(</span>c == <span class="st0">'<span class="es0">\n</span>'</span><span class="br0">)</span> <span class="br0">{</span>
                    putchar<span class="br0">(</span><span class="st0">'<span class="es0">\n</span>'</span><span class="br0">)</span>;
                    state = before;
                <span class="br0">}</span>
        <span class="br0">}</span>
    <span class="br0">}</span>
    <span class="kw1">return</span> <span class="nu0">0</span>;
<span class="br0">}</span>
</pre></div>
<p>Although the code now looks longer, it has at least one significant advantage: there's only one <i>reading</i> (that is, call to the <code>getchar()</code> function) instruction in the program. Besides that, there's only one <code>while</code> loop instead of the four the previous version had.</p>
<p>In this program, the body of the <code>while</code> loop is the <b>automaton step</b>, and the loop itself is the <i>cycle of the automaton's work</i>.</p>
<div class="floatright"><a href="/wiki/File:Automata_that_prints_the_first_word_of_each_line.png" class="image" title="Automaton's diagram"><img alt="Automaton's diagram" src="http://upload.wikimedia.org/wikipedia/en/3/30/Automata_that_prints_the_first_word_of_each_line.png" width="448" height="180" border="0" /></a></div>
<p>The program implements (models) the work of a <i>finite state machine</i> shown on the picture. The <b>N</b> denotes the end of line character, the <b>S</b> denotes spaces, and the <b>A</b> stands for all the other characters. The automaton follows exactly one <i>arrow</i> on each step depending on the current state and the encountered character. Some state switches are accompanied with printing the character; such arrows are marked with asterisks.</p>
<p>It is not absolutely necessary to divide the code down to separate handlers for each unique state. Furthermore, in some cases the very notion of the <i>state</i> can be composed of several variables' values, so that it could be impossible to handle each possible state explicitly. In the discussed program it is possible to reduce the code length noticing that the actions taken in response to the end of line character are the same for all the possible states. The following program is equal to the previous one but is a bit shorter:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="co2">#include &lt;stdio.h&gt;</span>
<span class="kw4">int</span> main<span class="br0">(</span><span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw2">enum</span> states <span class="br0">{</span>
        before, inside, after
    <span class="br0">}</span> state;
    <span class="kw4">int</span> c;
    state = before;
    <span class="kw1">while</span><span class="br0">(</span><span class="br0">(</span>c = getchar<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span> != EOF<span class="br0">)</span> <span class="br0">{</span>
        <span class="kw1">if</span><span class="br0">(</span>c == <span class="st0">'<span class="es0">\n</span>'</span><span class="br0">)</span> <span class="br0">{</span>
            putchar<span class="br0">(</span><span class="st0">'<span class="es0">\n</span>'</span><span class="br0">)</span>;
            state = before;
        <span class="br0">}</span> <span class="kw1">else</span>
        <span class="kw1">switch</span><span class="br0">(</span>state<span class="br0">)</span> <span class="br0">{</span>
            <span class="kw1">case</span> before:
                <span class="kw1">if</span><span class="br0">(</span>c != <span class="st0">' '</span><span class="br0">)</span> <span class="br0">{</span>
                    putchar<span class="br0">(</span>c<span class="br0">)</span>;
                    state = inside;
                <span class="br0">}</span>
                <span class="kw2">break</span>;
            <span class="kw1">case</span> inside:
                <span class="kw1">if</span><span class="br0">(</span>c == <span class="st0">' '</span><span class="br0">)</span> <span class="br0">{</span>
                    state = after;
                <span class="br0">}</span> <span class="kw1">else</span> <span class="br0">{</span>
                    putchar<span class="br0">(</span>c<span class="br0">)</span>;
                <span class="br0">}</span>
                <span class="kw2">break</span>;
            <span class="kw1">case</span> after:
                <span class="kw2">break</span>;
        <span class="br0">}</span>
    <span class="br0">}</span>
    <span class="kw1">return</span> <span class="nu0">0</span>;
<span class="br0">}</span>
</pre></div>
<p><a name="A_separate_function_for_the_automaton_step" id="A_separate_function_for_the_automaton_step"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Automata-based_programming&amp;action=edit&amp;section=4" title="Edit section: A separate function for the automaton step">edit</a>]</span> <span class="mw-headline">A separate function for the automaton step</span></h3>
<p>The most important property of the previous program is that the automaton step code section is clearly localized. It is possible to demonstrate this property even better if we provide a separate function for it:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="co2">#include &lt;stdio.h&gt;</span>
<span class="kw2">enum</span> states <span class="br0">{</span> before, inside, after <span class="br0">}</span>;
<span class="kw4">void</span> step<span class="br0">(</span><span class="kw2">enum</span> states *state, <span class="kw4">int</span> c<span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw1">if</span><span class="br0">(</span>c == <span class="st0">'<span class="es0">\n</span>'</span><span class="br0">)</span> <span class="br0">{</span>
        putchar<span class="br0">(</span><span class="st0">'<span class="es0">\n</span>'</span><span class="br0">)</span>;
        *state = before;
    <span class="br0">}</span> <span class="kw1">else</span>
    <span class="kw1">switch</span><span class="br0">(</span>*state<span class="br0">)</span> <span class="br0">{</span>
        <span class="kw1">case</span> before:
            <span class="kw1">if</span><span class="br0">(</span>c != <span class="st0">' '</span><span class="br0">)</span> <span class="br0">{</span>
                putchar<span class="br0">(</span>c<span class="br0">)</span>;
                *state = inside;
            <span class="br0">}</span>
            <span class="kw2">break</span>;
        <span class="kw1">case</span> inside:
            <span class="kw1">if</span><span class="br0">(</span>c == <span class="st0">' '</span><span class="br0">)</span> <span class="br0">{</span>
                *state = after;
            <span class="br0">}</span> <span class="kw1">else</span> <span class="br0">{</span>
                putchar<span class="br0">(</span>c<span class="br0">)</span>;
            <span class="br0">}</span>
            <span class="kw2">break</span>;
        <span class="kw1">case</span> after:
            <span class="kw2">break</span>;
    <span class="br0">}</span>
<span class="br0">}</span> 
<span class="kw4">int</span> main<span class="br0">(</span><span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw4">int</span> c;
    <span class="kw2">enum</span> states state = before;
    <span class="kw1">while</span><span class="br0">(</span><span class="br0">(</span>c = getchar<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span> != EOF<span class="br0">)</span> <span class="br0">{</span>
        step<span class="br0">(</span>&amp;state, c<span class="br0">)</span>;
    <span class="br0">}</span>
    <span class="kw1">return</span> <span class="nu0">0</span>;
<span class="br0">}</span>
</pre></div>
<p>This example clearly demonstrates the basic properties of automata-based code:</p>
<ol>
<li>time periods of automaton step executions may not overlap</li>
<li>the only information passed from the previous step to the next is the explicitly specified <i>automaton state</i></li>
</ol>
<p><a name="Explicit_state_transition_table" id="Explicit_state_transition_table"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Automata-based_programming&amp;action=edit&amp;section=5" title="Edit section: Explicit state transition table">edit</a>]</span> <span class="mw-headline">Explicit <a href="/wiki/State_transition_table" title="State transition table">state transition table</a></span></h3>
<p>A finite automaton can be defined by an explicit <a href="/wiki/State_transition_table" title="State transition table">state transition table</a>. Generally speaking, an automata-based program code can naturally reflect this approach. In the program below there's an array named <code>the_table</code>, which defines the table. The rows of the table stand for three <i>states</i>, while columns reflect the input characters (first for spaces, second for the end of line character, and the last is for all the other characters).</p>
<p>For every possible combination, the table contains the new state number and the flag, which determines whether the automaton must print the symbol. In a real life task, this could be more complicated; e.g., the table could contain pointers to functions to be called on every possible combination of conditions.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="co2">#include &lt;stdio.h&gt;</span>
<span class="kw2">enum</span> states <span class="br0">{</span> before = <span class="nu0">0</span>, inside = <span class="nu0">1</span>, after = <span class="nu0">2</span> <span class="br0">}</span>;
<span class="kw4">struct</span> branch <span class="br0">{</span>
    <span class="kw2">enum</span> states new_state:<span class="nu0">2</span>;
    <span class="kw4">int</span> should_putchar:<span class="nu0">1</span>;
<span class="br0">}</span>;
<span class="kw4">struct</span> branch the_table<span class="br0">[</span><span class="nu0">3</span><span class="br0">]</span><span class="br0">[</span><span class="nu0">3</span><span class="br0">]</span> = <span class="br0">{</span>
                 <span class="coMULTI">/* ' '         '\n'        others */</span>
    <span class="coMULTI">/* before */</span> <span class="br0">{</span> <span class="br0">{</span>before,<span class="nu0">0</span><span class="br0">}</span>, <span class="br0">{</span>before,<span class="nu0">1</span><span class="br0">}</span>, <span class="br0">{</span>inside,<span class="nu0">1</span><span class="br0">}</span> <span class="br0">}</span>,
    <span class="coMULTI">/* inside */</span> <span class="br0">{</span> <span class="br0">{</span>after, <span class="nu0">0</span><span class="br0">}</span>, <span class="br0">{</span>before,<span class="nu0">1</span><span class="br0">}</span>, <span class="br0">{</span>inside,<span class="nu0">1</span><span class="br0">}</span> <span class="br0">}</span>,
    <span class="coMULTI">/* after  */</span> <span class="br0">{</span> <span class="br0">{</span>after, <span class="nu0">0</span><span class="br0">}</span>, <span class="br0">{</span>before,<span class="nu0">1</span><span class="br0">}</span>, <span class="br0">{</span>after, <span class="nu0">0</span><span class="br0">}</span> <span class="br0">}</span>
<span class="br0">}</span>;
<span class="kw4">void</span> step<span class="br0">(</span><span class="kw2">enum</span> states *state, <span class="kw4">int</span> c<span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw4">int</span> idx2 = <span class="br0">(</span>c == <span class="st0">' '</span><span class="br0">)</span> ? <span class="nu0">0</span> : <span class="br0">(</span>c == <span class="st0">'<span class="es0">\n</span>'</span><span class="br0">)</span> ? <span class="nu0">1</span> : <span class="nu0">2</span>;
    <span class="kw4">struct</span> branch *b = &amp; the_table<span class="br0">[</span>*state<span class="br0">]</span><span class="br0">[</span>idx2<span class="br0">]</span>;
    *state = b-&gt;new_state;
    <span class="kw1">if</span><span class="br0">(</span>b-&gt;should_putchar<span class="br0">)</span> putchar<span class="br0">(</span>c<span class="br0">)</span>;
<span class="br0">}</span>
<span class="kw4">int</span> main<span class="br0">(</span><span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw4">int</span> c;
    <span class="kw2">enum</span> states state = before;
    <span class="kw1">while</span><span class="br0">(</span><span class="br0">(</span>c = getchar<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span> != EOF<span class="br0">)</span>
        step<span class="br0">(</span>&amp;state, c<span class="br0">)</span>;
    <span class="kw1">return</span> <span class="nu0">0</span>;
<span class="br0">}</span>
</pre></div>
<p><a name="Using_object-oriented_capabilities" id="Using_object-oriented_capabilities"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Automata-based_programming&amp;action=edit&amp;section=6" title="Edit section: Using object-oriented capabilities">edit</a>]</span> <span class="mw-headline">Using <a href="/wiki/Object-oriented_programming" title="Object-oriented programming">object-oriented</a> capabilities</span></h3>
<p>If the implementation language supports <a href="/wiki/Object-oriented_programming" title="Object-oriented programming">object-oriented programming</a>, it is reasonable to <a href="/wiki/Encapsulation" title="Encapsulation">encapsulate</a> the automaton into an object, thus hiding implementation details from the outer program. for example, the same program in C++ can look like this:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
<span class="co2">#include &lt;stdio.h&gt;</span>
<span class="kw2">class</span> StateMachine <span class="br0">{</span>
    <span class="kw2">enum</span> states <span class="br0">{</span> before = <span class="nu0">0</span>, inside = <span class="nu0">1</span>, after = <span class="nu0">2</span> <span class="br0">}</span> state;
    <span class="kw4">struct</span> branch <span class="br0">{</span>
        <span class="kw2">enum</span> states new_state:<span class="nu0">2</span>;
        <span class="kw4">int</span> should_putchar:<span class="nu0">1</span>;
    <span class="br0">}</span>;
    <span class="kw4">static</span> <span class="kw4">struct</span> branch the_table<span class="br0">[</span><span class="nu0">3</span><span class="br0">]</span><span class="br0">[</span><span class="nu0">3</span><span class="br0">]</span>;
<span class="kw2">public</span>:
    StateMachine<span class="br0">(</span><span class="br0">)</span> : state<span class="br0">(</span>before<span class="br0">)</span> <span class="br0">{</span><span class="br0">}</span>
    <span class="kw4">void</span> FeedChar<span class="br0">(</span><span class="kw4">int</span> c<span class="br0">)</span> <span class="br0">{</span>
        <span class="kw4">int</span> idx2 = <span class="br0">(</span>c == <span class="st0">' '</span><span class="br0">)</span> ? <span class="nu0">0</span> : <span class="br0">(</span>c == <span class="st0">'<span class="es0">\n</span>'</span><span class="br0">)</span> ? <span class="nu0">1</span> : <span class="nu0">2</span>;
        <span class="kw4">struct</span> branch *b = &amp; the_table<span class="br0">[</span>state<span class="br0">]</span><span class="br0">[</span>idx2<span class="br0">]</span>;
        state = b-&gt;new_state;
        <span class="kw1">if</span><span class="br0">(</span>b-&gt;should_putchar<span class="br0">)</span> <span class="kw3">putchar</span><span class="br0">(</span>c<span class="br0">)</span>;
    <span class="br0">}</span>
<span class="br0">}</span>;
<span class="kw4">struct</span> StateMachine::<span class="me2">branch</span> StateMachine::<span class="me2">the_table</span><span class="br0">[</span><span class="nu0">3</span><span class="br0">]</span><span class="br0">[</span><span class="nu0">3</span><span class="br0">]</span> = <span class="br0">{</span>
                 <span class="coMULTI">/* ' '         '\n'        others */</span>
    <span class="coMULTI">/* before */</span> <span class="br0">{</span> <span class="br0">{</span>before,<span class="nu0">0</span><span class="br0">}</span>, <span class="br0">{</span>before,<span class="nu0">1</span><span class="br0">}</span>, <span class="br0">{</span>inside,<span class="nu0">1</span><span class="br0">}</span> <span class="br0">}</span>,
    <span class="coMULTI">/* inside */</span> <span class="br0">{</span> <span class="br0">{</span>after, <span class="nu0">0</span><span class="br0">}</span>, <span class="br0">{</span>before,<span class="nu0">1</span><span class="br0">}</span>, <span class="br0">{</span>inside,<span class="nu0">1</span><span class="br0">}</span> <span class="br0">}</span>,
    <span class="coMULTI">/* after  */</span> <span class="br0">{</span> <span class="br0">{</span>after, <span class="nu0">0</span><span class="br0">}</span>, <span class="br0">{</span>before,<span class="nu0">1</span><span class="br0">}</span>, <span class="br0">{</span>after, <span class="nu0">0</span><span class="br0">}</span> <span class="br0">}</span>
<span class="br0">}</span>;
<span class="kw4">int</span> main<span class="br0">(</span><span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw4">int</span> c;
    StateMachine machine;
    <span class="kw1">while</span><span class="br0">(</span><span class="br0">(</span>c = <span class="kw3">getchar</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span> != <span class="kw2">EOF</span><span class="br0">)</span>
        machine.<span class="me1">FeedChar</span><span class="br0">(</span>c<span class="br0">)</span>;
    <span class="kw1">return</span> <span class="nu0">0</span>;
<span class="br0">}</span>
</pre></div>
<p>Note: To minimize changes not directly related to the subject of the article, the input/output functions from the standard library of <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a> are being used.</p>
<p><a name="Applications" id="Applications"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Automata-based_programming&amp;action=edit&amp;section=7" title="Edit section: Applications">edit</a>]</span> <span class="mw-headline">Applications</span></h2>
<p>Automata-based programming is widely used in <a href="/wiki/Lexical_analysis" title="Lexical analysis">lexical</a> and <a href="/wiki/Syntactic_analysis" title="Syntactic analysis" class="mw-redirect">syntactic analyses</a>.<sup id="cite_ref-gram_0-0" class="reference"><a href="#cite_note-gram-0" title=""><span>[</span>1<span>]</span></a></sup></p>
<p>Besides that, thinking in terms of automata (that is, breaking the execution process down to <i>automaton steps</i> and passing information from step to step through the explicit <i>state</i>) is necessary for <a href="/wiki/Event-driven_programming" title="Event-driven programming">event-driven programming</a> as the only alternative to using parallel processes or threads.</p>
<p>The notions of states and state machines are often used in the field of <a href="/wiki/Formal_specification" title="Formal specification">formal specification</a>. For instance, <a href="/wiki/Unified_Modeling_Language" title="Unified Modeling Language">UML</a>-based software architecture development uses <a href="/wiki/State_diagram#UML_state_diagram" title="State diagram">state diagrams</a> to specify the behaviour of the program. Also various <a href="/wiki/Communication_protocol" title="Communication protocol" class="mw-redirect">communication protocols</a> are often specified using the explicit notion of <i>state</i> (see, e.g., <a href="http://tools.ietf.org/html/rfc793" class="external" title="http://tools.ietf.org/html/rfc793">RFC 793</a><sup id="cite_ref-1" class="reference"><a href="#cite_note-1" title=""><span>[</span>2<span>]</span></a></sup>).</p>
<p>Thinking in terms of automata (steps and states) can also be used to describe semantics of some <a href="/wiki/Programming_language" title="Programming language">programming languages</a>. For example, the execution of a programm written in the <a href="/wiki/Refal" title="Refal">Refal</a> language is described as a sequence of <i>steps</i> of a so-called abstract Refal machine; the state of the machine is a <i>view</i> (an arbitrary Refal expression without variables).</p>
<p><a href="/wiki/Continuations" title="Continuations" class="mw-redirect">Continuations</a> in the <a href="/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme</a> language require thinking in terms of steps and states, although Scheme itself is in no way automata-related (it is recursive). To make it possible the <a href="/wiki/Call/cc" title="Call/cc" class="mw-redirect">call/cc</a> feature to work, implementation needs to be able to catch a whole state of the executing program, which is only possible when there's no implicit part in the state. Such a <i>caught state</i> is the very thing called <i>continuation</i>, and it can be considered as the <i>state</i> of a (relatively complicated) automaton. The step of the automaton is deducing the next continuation from the previous one, and the execution process is the cycle of such steps.</p>
<p>Alexander Ollongren in his book<sup id="cite_ref-2" class="reference"><a href="#cite_note-2" title=""><span>[</span>3<span>]</span></a></sup> explains the so-called <i>Vienna method</i> of programming languages semantics description which is fully based on formal automata.</p>
<p>The STAT system <a href="http://www.cs.ucsb.edu/~seclab/projects/stat/index.html" class="external autonumber" title="http://www.cs.ucsb.edu/~seclab/projects/stat/index.html" rel="nofollow">[1]</a> is a good example of using the automata-based approach; this system, besides other features, includes an embedded language called <i>STATL</i> which is purely automata-oriented.</p>
<p><a name="History" id="History"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Automata-based_programming&amp;action=edit&amp;section=8" title="Edit section: History">edit</a>]</span> <span class="mw-headline">History</span></h2>
<p>Automata-based techniques were used widely in the domains where there are algorithms based on automata theory, such as formal language analyses.<sup id="cite_ref-gram_0-1" class="reference"><a href="#cite_note-gram-0" title=""><span>[</span>1<span>]</span></a></sup></p>
<p>One of the early papers on this is by Johnson et al, 1968.<sup id="cite_ref-3" class="reference"><a href="#cite_note-3" title=""><span>[</span>4<span>]</span></a></sup></p>
<p>One of the earliest mentions of automata-based programming as a general technique is found in the paper by <a href="/wiki/Peter_Naur" title="Peter Naur">Peter Naur</a>, 1963.<sup id="cite_ref-4" class="reference"><a href="#cite_note-4" title=""><span>[</span>5<span>]</span></a></sup> The author calls the technique <i>Turing machine approach</i>, however no real <a href="/wiki/Turing_machine" title="Turing machine">Turing machine</a> is given in the paper; instead, the technique based on states and steps is described.</p>
<p><a name="Compared_against_imperative_and_procedural_programming" id="Compared_against_imperative_and_procedural_programming"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Automata-based_programming&amp;action=edit&amp;section=9" title="Edit section: Compared against imperative and procedural programming">edit</a>]</span> <span class="mw-headline">Compared against imperative and procedural programming</span></h2>
<p>The notion of <a href="/wiki/State_(computer_science)" title="State (computer science)">state</a> is not exclusive property of automata-based programming.<sup id="cite_ref-5" class="reference"><a href="#cite_note-5" title=""><span>[</span>6<span>]</span></a></sup> . Generally speaking, <i>state</i> (or <a href="/wiki/Program_state" title="Program state">program state</a>) appears during execution of any <a href="/wiki/Computer_program" title="Computer program">computer program</a>, as a combination of all information that can change during the execution. For instance, a <i>state</i> of a traditional <a href="/wiki/Imperative_programming" title="Imperative programming">imperative</a> program consists of</p>
<ol>
<li>values of all variables and the information stored within dynamic memory</li>
<li>values stored in registers</li>
<li>stack contents (including local variables' values and return addresses)</li>
<li>current value of the instruction pointer</li>
</ol>
<p>These can be divided to the <b>explicit</b> part (such as values stored in variables) and the <b>implicit</b> part (return addresses and the instruction pointer).</p>
<p>Having said this, an automata-based program can be considered as a special case of an imperative program, in which implicit part of the state is minimized. The state of the whole program taken at the two distinct moments of entering the <i>step</i> code section can differ in the automaton state only. This simplifies the analysis of the program.</p>
<p><a name="Object-oriented_programming_relationship" id="Object-oriented_programming_relationship"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Automata-based_programming&amp;action=edit&amp;section=10" title="Edit section: Object-oriented programming relationship">edit</a>]</span> <span class="mw-headline">Object-oriented programming relationship</span></h2>
<p>In the theory of <a href="/wiki/Object-oriented_programming" title="Object-oriented programming">object-oriented programming</a> an <b>object</b> is said to have an internal <i>state</i> and is capable of <i>receiving messages</i>, <i>responding</i> to them, <i>sending</i> messages to other objects and changing the internal state during message handling. In more practical terminology, <i>to call an object's method</i> is considered the same as <i>to send a message to the object</i>.</p>
<p>Thus, from one hand, objects from object-oriented programming can be considered as automata (or models of automata) whose <i>state</i> is the combination of internal fields, and one or more methods are considered to be the <i>step</i>. Such methods must not call each other nor themselves, neither directly nor indirectly, otherwise the object can not be considered to be implemented on the automata-based manner.</p>
<p>From the other hand, it is obvious that <i>object</i> is good for implementing a model of an automaton. When the automata-based approach is used within an object-oriented language, an automaton model is usually implemented by a class, the <i>state</i> is represented with internal (private) fields of the class, and the <i>step</i> is implemented as a method; such a method is usually the only non-constant public method of the class (besides constructors and destructors). Other public methods could query the state but don't change it. All the secondary methods (such as particular state handlers) are usually hidden within the private part of the class.</p>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Automata-based_programming&amp;action=edit&amp;section=11" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<ul>
<li><a href="/wiki/Nondeterministic_programming" title="Nondeterministic programming">Nondeterministic programming</a></li>
</ul>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Automata-based_programming&amp;action=edit&amp;section=12" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<ol class="references">
<li id="cite_note-gram-0">^ <a href="#cite_ref-gram_0-0" title=""><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-gram_0-1" title=""><sup><i><b>b</b></i></sup></a> <cite style="font-style:normal" class="book" id="CITEREFAhoUllman.2C_Jeffrey_D.1973">Aho, Alfred V.; Ullman, Jeffrey D. (1973). <i>The theory of parsing, translation and compiling</i>. <b>1</b>. Englewood Cliffs, N. J.: Prentice-Hall.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=The+theory+of+parsing%2C+translation+and+compiling&amp;rft.aulast=Aho&amp;rft.aufirst=Alfred+V.&amp;rft.au=Aho%2C+Alfred+V.&amp;rft.au=Ullman%2C+Jeffrey+D.&amp;rft.date=1973&amp;rft.volume=1&amp;rft.place=Englewood+Cliffs%2C+N.+J.&amp;rft.pub=Prentice-Hall&amp;rfr_id=info:sid/en.wikipedia.org:Automata-based_programming"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-1"><b><a href="#cite_ref-1" title="">^</a></b> <a href="http://tools.ietf.org/html/rfc793" class="external" title="http://tools.ietf.org/html/rfc793">RFC 793</a></li>
<li id="cite_note-2"><b><a href="#cite_ref-2" title="">^</a></b> <cite style="font-style:normal" class="book" id="CITEREFOllongren1974">Ollongren, Alexander (1974). <i>Definition of programming languages by interpreting automata</i>. London: Academic Press.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Definition+of+programming+languages+by+interpreting+automata&amp;rft.aulast=Ollongren&amp;rft.aufirst=Alexander&amp;rft.au=Ollongren%2C+Alexander&amp;rft.date=1974&amp;rft.place=London&amp;rft.pub=Academic+Press&amp;rfr_id=info:sid/en.wikipedia.org:Automata-based_programming"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-3"><b><a href="#cite_ref-3" title="">^</a></b> <cite style="font-style:normal" class="" id="CITEREFJohnsonPorterAckleyRoss1968">Johnson, W. L.; Porter, J. H.; Ackley, S. I.; Ross, D. T. (1968), "Automatic generation of efficient lexical processors using finite state techniques", <i>Comm ACM</i> <b>11</b> (12): 805–813, <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<span class="neverexpand"><a href="http://dx.doi.org/10.1145%2F364175.364185" class="external text" title="http://dx.doi.org/10.1145%2F364175.364185" rel="nofollow">10.1145/364175.364185</a></span></cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=Automatic+generation+of+efficient+lexical+processors+using+finite+state+techniques&amp;rft.jtitle=Comm+ACM&amp;rft.aulast=Johnson&amp;rft.aufirst=W.+L.&amp;rft.au=Johnson%2C+W.+L.&amp;rft.au=Porter%2C+J.+H.&amp;rft.au=Ackley%2C+S.+I.&amp;rft.au=Ross%2C+D.+T.&amp;rft.date=1968&amp;rft.volume=11&amp;rft.issue=12&amp;rft.pages=805%E2%80%93813&amp;rft_id=info:doi/10.1145%2F364175.364185&amp;rfr_id=info:sid/en.wikipedia.org:Automata-based_programming"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-4"><b><a href="#cite_ref-4" title="">^</a></b> <cite style="font-style:normal" class="" id="CITEREFNaur1963">Naur, Peter (September 1963). "The design of the GIER ALGOL compiler Part II" (in English). <i>BIT Numerical Mathematics</i> <b>3</b> (3): 145–166. <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<span class="neverexpand"><a href="http://dx.doi.org/10.1007%2FBF01939983" class="external text" title="http://dx.doi.org/10.1007%2FBF01939983" rel="nofollow">10.1007/BF01939983</a></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=The+design+of+the+GIER+ALGOL+compiler+Part+II&amp;rft.jtitle=BIT+Numerical+Mathematics&amp;rft.aulast=Naur&amp;rft.aufirst=Peter&amp;rft.au=Naur%2C+Peter&amp;rft.date=September+1963&amp;rft.volume=3&amp;rft.issue=3&amp;rft.pages=145%E2%80%93166&amp;rft_id=info:doi/10.1007%2FBF01939983&amp;rfr_id=info:sid/en.wikipedia.org:Automata-based_programming"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-5"><b><a href="#cite_ref-5" title="">^</a></b> <cite style="font-style:normal" class="">"Automata-based programming", <i>Bulletin of St Petersburg State University of Information Technologies, Mechanics and Optics</i> <b>53</b>, 2008. <a href="http://books.ifmo.ru/NTV/NTV_53.pdf" class="external free" title="http://books.ifmo.ru/NTV/NTV_53.pdf" rel="nofollow">http://books.ifmo.ru/NTV/NTV_53.pdf</a> (rus)</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=Automata-based+programming&amp;rft.jtitle=Bulletin+of+St+Petersburg+State+University+of+Information+Technologies%2C+Mechanics+and+Optics&amp;rft.date=2008.+http%3A%2F%2Fbooks.ifmo.ru%2FNTV%2FNTV_53.pdf+%28rus%29&amp;rft.volume=53&amp;rfr_id=info:sid/en.wikipedia.org:Automata-based_programming"><span style="display: none;">&#160;</span></span></li>
</ol>
<p><a name="See_also_2" id="See_also_2"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Automata-based_programming&amp;action=edit&amp;section=13" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<ul>
<li><a href="http://erlang.org/doc/design_principles/fsm.html" class="external text" title="http://erlang.org/doc/design_principles/fsm.html" rel="nofollow">Erlang: Gen_Fsm Behaviour</a> FSM support in <a href="/wiki/Erlang_(programming_language)" title="Erlang (programming language)">Erlang</a></li>
<li><a href="/wiki/Esterel" title="Esterel">Esterel</a>, an automata-based language</li>
<li><a href="http://dec.bournemouth.ac.uk/forth/jfar/vol7/paper1/paper.html" class="external text" title="http://dec.bournemouth.ac.uk/forth/jfar/vol7/paper1/paper.html" rel="nofollow">J. V. Noble. «Finite State Machines in Forth»</a> — automata-based programming in <a href="/wiki/Forth_(programming_language)" title="Forth (programming language)">Forth</a></li>
<li><cite style="font-style:normal" class="" id="CITEREFHarell1987">Harell, David (1987). "<a href="http://www.wisdom.weizmann.ac.il/~dharel/SCANNED.PAPERS/Statecharts.pdf" class="external text" title="http://www.wisdom.weizmann.ac.il/~dharel/SCANNED.PAPERS/Statecharts.pdf" rel="nofollow">Statecharts: A Visual Formalism for Complex Systems</a>". <i>Sci. Comput. Programming</i> <b>8</b> (8): 231–274. <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<span class="neverexpand"><a href="http://dx.doi.org/10.1016%2F0167-6423%2887%2990035-9" class="external text" title="http://dx.doi.org/10.1016%2F0167-6423%2887%2990035-9" rel="nofollow">10.1016/0167-6423(87)90035-9</a></span><span class="printonly">. <a href="http://www.wisdom.weizmann.ac.il/~dharel/SCANNED.PAPERS/Statecharts.pdf" class="external free" title="http://www.wisdom.weizmann.ac.il/~dharel/SCANNED.PAPERS/Statecharts.pdf" rel="nofollow">http://www.wisdom.weizmann.ac.il/~dharel/SCANNED.PAPERS/Statecharts.pdf</a></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=Statecharts%3A+A+Visual+Formalism+for+Complex+Systems&amp;rft.jtitle=Sci.+Comput.+Programming&amp;rft.aulast=Harell&amp;rft.aufirst=David&amp;rft.au=Harell%2C+David&amp;rft.date=1987&amp;rft.volume=8&amp;rft.issue=8&amp;rft.pages=231%E2%80%93274&amp;rft_id=info:doi/10.1016%2F0167-6423%2887%2990035-9&amp;rft_id=http%3A%2F%2Fwww.wisdom.weizmann.ac.il%2F%7Edharel%2FSCANNED.PAPERS%2FStatecharts.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Automata-based_programming"><span style="display: none;">&#160;</span></span></li>
<li><cite style="font-style:normal" class="" id="CITEREFHarellDrusinsky.2C_D.1989">Harell, David; Drusinsky, D. (1989). "Using Statecharts for Hardware Description and Synthesis". <i>IEEE Trans. Computer Aided Design of Integrated Circuits and Systems</i> (8): 798–807.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=Using+Statecharts+for+Hardware+Description+and+Synthesis&amp;rft.jtitle=IEEE+Trans.+Computer+Aided+Design+of+Integrated+Circuits+and+Systems&amp;rft.aulast=Harell&amp;rft.aufirst=David&amp;rft.au=Harell%2C+David&amp;rft.au=Drusinsky%2C+D.&amp;rft.date=1989&amp;rft.issue=8&amp;rft.pages=798%E2%80%93807&amp;rfr_id=info:sid/en.wikipedia.org:Automata-based_programming"><span style="display: none;">&#160;</span></span></li>
<li><a href="http://legacy.imatix.com/html/libero/index.htm" class="external text" title="http://legacy.imatix.com/html/libero/index.htm" rel="nofollow">Libero home page</a> Libero — automata-based code generator (exists since 1982)</li>
<li><a href="http://www.gnu.org/software/autogen/autofsm.html" class="external text" title="http://www.gnu.org/software/autogen/autofsm.html" rel="nofollow">GNU AutoFSM</a> FSM-based code generator</li>
</ul>
<ul>
<li><cite id="CITEREFPolikarpova2009">Polikarpova N. I., Shalyto A. A. <a href="http://is.ifmo.ru/books/_book.pdf" class="external text" title="http://is.ifmo.ru/books/_book.pdf" rel="nofollow">Automata-based programming</a> SPb.: Piter. 2009 (rus)</cite></li>
</ul>


<!-- 
NewPP limit report
Preprocessor node count: 3790/1000000
Post-expand include size: 30865/2048000 bytes
Template argument size: 7697/2048000 bytes
Expensive parser function count: 0/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:3377755-0!1!0!default!!en!2 and timestamp 20090421150956 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Automata-based_programming">http://en.wikipedia.org/wiki/Automata-based_programming</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Programming_paradigms" title="Category:Programming paradigms">Programming paradigms</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Automata-based_programming" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Automata-based_programming" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Automata-based_programming&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Automata-based_programming&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Automata-based_programming" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Automata-based_programming" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Automata-based_programming" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Automata-based_programming&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Automata-based_programming&amp;oldid=283602676" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Automata-based_programming&amp;id=283602676">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-ru"><a href="http://ru.wikipedia.org/wiki/%D0%90%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5">Русский</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 13 April 2009, at 17:37 (UTC).</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv40 in 0.059 secs. --></body></html>
