<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="MIPS architecture,Articles with unsourced statements since February 2007,Articles with specifically-marked weasel-worded phrases since March 2009,Special:Search/MIPS architecture,32-bit,64-bit,68k,AMD,AMD 29000,ARM architecture,ATI" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=MIPS_architecture&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=MIPS_architecture&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>MIPS architecture - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "MIPS_architecture";
		var wgTitle = "MIPS architecture";
		var wgAction = "view";
		var wgArticleId = "20170";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281763516;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-MIPS_architecture skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">MIPS architecture</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<div class="thumb tright">
<div class="thumbinner" style="width:182px;"><a href="/wiki/File:Toshiba_TC86R4400MC-200_9636YJA_top.jpg" class="image" title="A MIPS R4400 microprocessor made by Toshiba."><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/6/6e/Toshiba_TC86R4400MC-200_9636YJA_top.jpg/180px-Toshiba_TC86R4400MC-200_9636YJA_top.jpg" width="180" height="180" border="0" class="thumbimage" /></a>
<div class="thumbcaption">
<div class="magnify"><a href="/wiki/File:Toshiba_TC86R4400MC-200_9636YJA_top.jpg" class="internal" title="Enlarge"><img src="/skins-1.5/common/images/magnify-clip.png" width="15" height="11" alt="" /></a></div>
A MIPS R4400 microprocessor made by <a href="/wiki/Toshiba" title="Toshiba">Toshiba</a>.</div>
</div>
</div>
<p><b>MIPS</b> (originally an acronym for <b>Microprocessor without Interlocked Pipeline Stages</b>) is a <a href="/wiki/RISC" title="RISC" class="mw-redirect">reduced Instruction set computing</a> (RISC) <a href="/wiki/Instruction_set_architecture" title="Instruction set architecture" class="mw-redirect">instruction set architecture</a> (ISA) developed by <a href="/wiki/MIPS_Technologies" title="MIPS Technologies">MIPS Computer Systems</a> (now MIPS Technologies). In the mid to late 1990s, it was estimated that one in three RISC microprocessors produced were MIPS implementations.<sup class="noprint Template-Fact"><span title="This claim needs references to reliable sources&#160;since February 2007" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</span></sup></p>
<p>MIPS implementations are currently primarily used in many <a href="/wiki/Embedded_system" title="Embedded system">embedded systems</a> such as the Series2 <a href="/wiki/TiVo" title="TiVo">TiVo</a>, <a href="/wiki/Windows_CE" title="Windows CE">Windows CE</a> devices, <a href="/wiki/Cisco_Systems" title="Cisco Systems">Cisco</a> <a href="/wiki/Router" title="Router">routers</a>, <a href="/wiki/Residential_gateway" title="Residential gateway">residential gateways</a>, <a href="/wiki/FON" title="FON">Foneras</a>, <a href="/wiki/Avaya" title="Avaya">Avaya</a>, and <a href="/wiki/Video_game_console" title="Video game console">video game consoles</a> like the <a href="/wiki/Nintendo_64" title="Nintendo 64">Nintendo 64</a> and <a href="/wiki/Sony" title="Sony">Sony</a> <a href="/wiki/PlayStation" title="PlayStation">PlayStation</a>, <a href="/wiki/PlayStation_2" title="PlayStation 2">PlayStation 2</a>, and <a href="/wiki/PlayStation_Portable" title="PlayStation Portable">PlayStation Portable</a> handheld system. Until late 2006 they were also used in many of <a href="/wiki/Silicon_Graphics" title="Silicon Graphics">SGI</a>'s computer products. MIPS implementations were also used by <a href="/wiki/Digital_Equipment_Corporation" title="Digital Equipment Corporation">Digital Equipment Corporation</a>, <a href="/wiki/NEC" title="NEC">NEC</a>, <a href="/wiki/Siemens_Nixdorf" title="Siemens Nixdorf" class="mw-redirect">Siemens Nixdorf</a>, <a href="/wiki/Tandem" title="Tandem">Tandem</a> and others during the late 1980s and 1990s.</p>
<p>The early MIPS architectures were 32-bit (generally 32-bit wide registers and data paths), while later versions were 64-bit. Multiple revisions of the MIPS <a href="/wiki/Instruction_set" title="Instruction set">instruction set</a> exist, including MIPS I, MIPS II, MIPS III, MIPS IV, MIPS V, MIPS32, and MIPS64. The current revisions are MIPS32 (for 32-bit implementations) and MIPS64 (for 64-bit implementations). MIPS32 and MIPS64 define a control register set as well as the instruction set. Several "add-on" extensions are also available, including MIPS-3D which is a simple set of floating-point <a href="/wiki/SIMD" title="SIMD">SIMD</a> instructions dedicated to common 3D tasks, <a href="/wiki/MDMX" title="MDMX">MDMX</a> (MaDMaX) which is a more extensive integer <a href="/wiki/SIMD" title="SIMD">SIMD</a> instruction set using the 64-bit floating-point registers, MIPS16e which adds compression to the instruction stream to make programs take up less room (allegedly a response to the <a href="/wiki/ARM_architecture#Thumb" title="ARM architecture">Thumb</a> encoding in the <a href="/wiki/ARM_architecture" title="ARM architecture">ARM architecture</a>), and the recent addition of MIPS MT, new <a href="/wiki/Multithreading" title="Multithreading" class="mw-redirect">multithreading</a> additions to the system similar to <a href="/wiki/HyperThreading" title="HyperThreading" class="mw-redirect">HyperThreading</a> in the <a href="/wiki/Intel" title="Intel" class="mw-redirect">Intel</a>'s Pentium 4 processors.</p>
<p><a href="/wiki/Computer_architecture" title="Computer architecture">Computer architecture</a> courses in universities and technical schools often study the MIPS architecture. The architecture greatly influenced later RISC architectures such as <a href="/wiki/DEC_Alpha" title="DEC Alpha">Alpha</a> (previously Alpha AXP).</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#History"><span class="tocnumber">1</span> <span class="toctext">History</span></a>
<ul>
<li class="toclevel-2"><a href="#RISC_Pioneer"><span class="tocnumber">1.1</span> <span class="toctext">RISC Pioneer</span></a></li>
<li class="toclevel-2"><a href="#Licensable_Architecture"><span class="tocnumber">1.2</span> <span class="toctext">Licensable Architecture</span></a></li>
<li class="toclevel-2"><a href="#Losing_the_Desktop"><span class="tocnumber">1.3</span> <span class="toctext">Losing the Desktop</span></a></li>
<li class="toclevel-2"><a href="#Embedded_markets"><span class="tocnumber">1.4</span> <span class="toctext">Embedded markets</span></a></li>
<li class="toclevel-2"><a href="#Synthesizeable_Cores_for_Embedded_Markets"><span class="tocnumber">1.5</span> <span class="toctext">Synthesizeable Cores for Embedded Markets</span></a></li>
<li class="toclevel-2"><a href="#MIPS_based_Supercomputers"><span class="tocnumber">1.6</span> <span class="toctext">MIPS based Supercomputers</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#CPU_family"><span class="tocnumber">2</span> <span class="toctext">CPU family</span></a></li>
<li class="toclevel-1"><a href="#Summary_of_R3000_instruction_set_Opcodes"><span class="tocnumber">3</span> <span class="toctext">Summary of R3000 instruction set Opcodes</span></a></li>
<li class="toclevel-1"><a href="#MIPS_Assembly_Language"><span class="tocnumber">4</span> <span class="toctext">MIPS Assembly Language</span></a>
<ul>
<li class="toclevel-2"><a href="#Integer"><span class="tocnumber">4.1</span> <span class="toctext">Integer</span></a></li>
<li class="toclevel-2"><a href="#Floating_point"><span class="tocnumber">4.2</span> <span class="toctext">Floating point</span></a></li>
<li class="toclevel-2"><a href="#Pseudo_instructions"><span class="tocnumber">4.3</span> <span class="toctext">Pseudo instructions</span></a></li>
<li class="toclevel-2"><a href="#Some_other_important_instructions"><span class="tocnumber">4.4</span> <span class="toctext">Some other important instructions</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Compiler_Register_Usage"><span class="tocnumber">5</span> <span class="toctext">Compiler Register Usage</span></a></li>
<li class="toclevel-1"><a href="#Simulators"><span class="tocnumber">6</span> <span class="toctext">Simulators</span></a></li>
<li class="toclevel-1"><a href="#Trivia"><span class="tocnumber">7</span> <span class="toctext">Trivia</span></a></li>
<li class="toclevel-1"><a href="#Notes"><span class="tocnumber">8</span> <span class="toctext">Notes</span></a></li>
<li class="toclevel-1"><a href="#Further_reading"><span class="tocnumber">9</span> <span class="toctext">Further reading</span></a></li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">10</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">11</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="History" id="History"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=MIPS_architecture&amp;action=edit&amp;section=1" title="Edit section: History">edit</a>]</span> <span class="mw-headline">History</span></h2>
<p><a name="RISC_Pioneer" id="RISC_Pioneer"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=MIPS_architecture&amp;action=edit&amp;section=2" title="Edit section: RISC Pioneer">edit</a>]</span> <span class="mw-headline">RISC Pioneer</span></h3>
<div class="thumb tright">
<div class="thumbinner" style="width:182px;"><a href="/wiki/File:KL_Orion_R4600.jpg" class="image" title="A MIPS microprocessor Orion R4600 made by IDT."><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/7/76/KL_Orion_R4600.jpg/180px-KL_Orion_R4600.jpg" width="180" height="180" border="0" class="thumbimage" /></a>
<div class="thumbcaption">
<div class="magnify"><a href="/wiki/File:KL_Orion_R4600.jpg" class="internal" title="Enlarge"><img src="/skins-1.5/common/images/magnify-clip.png" width="15" height="11" alt="" /></a></div>
A MIPS microprocessor Orion R4600 made by <a href="/wiki/Integrated_Device_Technology" title="Integrated Device Technology">IDT</a>.</div>
</div>
</div>
<p>In 1981, a team led by <a href="/wiki/John_L._Hennessy" title="John L. Hennessy">John L. Hennessy</a> at <a href="/wiki/Stanford_University" title="Stanford University">Stanford University</a> started work on what would become the first MIPS processor. The basic concept was to increase performance through the use of deep <a href="/wiki/Instruction_pipeline" title="Instruction pipeline">instruction pipelines</a>. Pipelining as a basic technique was well known before (see <a href="/wiki/IBM_801" title="IBM 801">IBM 801</a> for instance), but not developed into its full potential. CPUs are built up from a number of dedicated sub-units such as instruction decoders, ALUs (integer arithmetics and logic), load/store units (handling memory), and so on. In a traditional non-optimized design, a particular instruction in a program sequence must be (almost) completed before the next can start to "flow" from one unit to another; in a pipelined architecture, successive instructions instead overlaps in execution. For instance, at the same time a math instruction is fed into the floating point unit, the load/store unit can fetch the next instruction.</p>
<p>One major barrier to pipelining was that some instructions, like division, take longer to complete and the CPU therefore has to wait before passing the next instruction into the pipeline. One solution to this problem is to use a series of interlocks that allows stages to indicate that they are busy, pausing the other stages upstream. Hennessy's team viewed these interlocks as a major performance barrier since they had to communicate to all the modules in the CPU which takes time, and appeared to limit the clock speed. A major aspect of the MIPS design was to fit every sub-phase, including cache-access, of all instructions into one cycle, thereby removing any needs for interlocking, and permitting a single cycle throughput.</p>
<p>Although this design eliminated a number of useful instructions such as multiply and divide it was felt that the overall performance of the system would be dramatically improved because the chips could run at much higher clock rates. This ramping of the speed would be difficult with interlocking involved, as the time needed to set up locks is as much a function of die size as clock rate. The elimination of these instructions became a contentious point.</p>
<p>The other difference between the MIPS design and the competing Berkeley RISC involved the handling of <a href="/wiki/Subroutine" title="Subroutine">subroutine</a> calls. RISC used a technique called <a href="/wiki/Register_window" title="Register window">register windows</a> to improve performance of these very common tasks, but this limited the maximum depth of multi-level calls. Each subroutine call required its own set of registers, which in turn required more real estate on the CPU and more complexity in its design. Hennessy felt that a careful compiler could find free registers without resorting to a hardware implementation, and that simply increasing the number of registers would not only make this simple, but increase the performance of all tasks.</p>
<p>In other ways the MIPS design was very much a typical RISC design. To save bits in the instruction word, RISC designs reduce the number of instructions to encode. The MIPS design uses 6 bits of the 32-bit word for the basic opcode;<sup id="cite_ref-0" class="reference"><a href="#cite_note-0" title=""><span>[</span>1<span>]</span></a></sup> the rest may contain a single 26-bit jump address or it may have up to four 5-bit fields specifying up to three registers plus a shift value combined with another 6-bits of opcode; another format, among several, specifies two registers combined with a 16-bit immediate value, etc. This allowed this CPU to load up the instruction and the data it needed in a single cycle, whereas an (older) non-RISC design, such as the <a href="/wiki/MOS_Technology_6502" title="MOS Technology 6502">MOS Technology 6502</a> for instance, required separate cycles to load the opcode and the data. This was one of the major performance improvements that RISC offered. However, modern non-RISC designs achieves this speed by other means (such as queues in the CPU).</p>
<p>In 1984 Hennessy was convinced of the future commercial potential of the design, and left Stanford to form MIPS Computer Systems. They released their first design, the <b>R2000</b>, in 1985, improving the design as the <b>R3000</b> in 1988. These 32-bit CPUs formed the basis of their company through the 1980s, used primarily in <a href="/wiki/Silicon_Graphics" title="Silicon Graphics">SGI</a>'s series of <a href="/wiki/Workstation" title="Workstation">workstations</a>. These commercial designs deviated from the Stanford academic research by implementing most of the interlocks in hardware, supplying full multiply and divide instructions (among others).</p>
<p>In 1991 MIPS released the first 64-bit microprocessor, the <b>R4000</b>. <b>R4000</b> has advanced <a href="/wiki/Translation_lookaside_buffer" title="Translation lookaside buffer">TLB</a> where the entry contains not just virtual address but also the virtual address space id. Such buffer eliminates the major performance problems from <a href="/wiki/Microkernel" title="Microkernel">microkernels</a><sup id="cite_ref-1" class="reference"><a href="#cite_note-1" title=""><span>[</span>2<span>]</span></a></sup> that are slow on competing architectures (Pentium, PowerPC, Alpha) because of the need to flush the TLB on the frequent context switches. However, MIPS had financial difficulties while bringing it to market. The design was so important to SGI, at the time one of MIPS' few major customers, that SGI bought the company outright in 1992 in order to guarantee the design would not be lost. As a subsidiary of SGI, the company became known as <a href="/wiki/MIPS_Technologies" title="MIPS Technologies">MIPS Technologies</a></p>
<p><a name="Licensable_Architecture" id="Licensable_Architecture"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=MIPS_architecture&amp;action=edit&amp;section=3" title="Edit section: Licensable Architecture">edit</a>]</span> <span class="mw-headline">Licensable Architecture</span></h3>
<p>In the early 1990s MIPS started licensing their designs to third-party vendors. This proved fairly successful due to the simplicity of the core, which allowed it to be used in a number of applications that would have formerly used much less capable <a href="/wiki/Complex_instruction_set_computer" title="Complex instruction set computer">CISC</a> designs of similar <a href="/wiki/Gate_count" title="Gate count">gate count</a> and price -- the two are strongly related; the price of a CPU is generally related to the number of gates and the number of external pins. <a href="/wiki/Sun_Microsystems" title="Sun Microsystems">Sun Microsystems</a> attempted to enjoy similar success by licensing their <a href="/wiki/SPARC" title="SPARC">SPARC</a> core but was not nearly as successful. By the late 1990s MIPS was a powerhouse in the <a href="/wiki/Embedded_processor" title="Embedded processor" class="mw-redirect">embedded processor</a> field, and in 1997 the 48-millionth MIPS-based CPU shipped, making it the first RISC CPU to outship the famous <a href="/wiki/68k" title="68k" class="mw-redirect">68k</a> family. MIPS was so successful that SGI spun-off MIPS Technologies in 1998. Fully half of MIPS' income today comes from licensing their designs, while much of the rest comes from contract design work on cores that will then be produced by third parties.</p>
<p>In 1999 MIPS formalized their licensing system around two basic designs, the 32-bit <b>MIPS32</b> (based on MIPS II with some additional features from MIPS III, MIPS IV, and MIPS V) and the 64-bit <b>MIPS64</b> (based on MIPS V). <a href="/wiki/Nippon_Electric_Corporation" title="Nippon Electric Corporation" class="mw-redirect">NEC</a>, <a href="/wiki/Toshiba" title="Toshiba">Toshiba</a> and <a href="/wiki/SiByte" title="SiByte" class="mw-redirect">SiByte</a> (later acquired by <a href="/wiki/Broadcom" title="Broadcom">Broadcom</a>) each obtained licenses for the MIPS64 as soon as it was announced. <a href="/wiki/Philips" title="Philips">Philips</a>, <a href="/w/index.php?title=SiliconValley:LSI_Logic&amp;action=edit&amp;redlink=1" class="new" title="SiliconValley:LSI Logic (page does not exist)">LSI Logic</a> and <a href="/wiki/Integrated_Device_Technology" title="Integrated Device Technology">IDT</a> have since joined them. Success followed success, and today the MIPS cores are one of the most-used "heavyweight" cores in the marketplace for computer-like devices (<a href="/wiki/Hand-held_computer" title="Hand-held computer" class="mw-redirect">hand-held computers</a>, <a href="/wiki/Set-top_box" title="Set-top box">set-top boxes</a>, etc.), with other designers fighting it out for other niches. Some indication of their success is the fact that <a href="/wiki/Freescale" title="Freescale" class="mw-redirect">Freescale</a> (spun-off by <a href="/wiki/Motorola" title="Motorola">Motorola</a>) uses MIPS cores in their set-top box designs, instead of their own <a href="/wiki/PowerPC" title="PowerPC">PowerPC</a>-based cores.</p>
<p>Since the MIPS architecture is licensable, it has attracted several processor <a href="/wiki/Startup_company" title="Startup company">start-up</a> companies over the years. One of the first start-ups to design MIPS processors was <a href="/wiki/Quantum_Effect_Devices" title="Quantum Effect Devices">Quantum Effect Devices</a> (see next section). The MIPS design team that designed the <b>R4300</b> started the company <a href="/w/index.php?title=SandCraft&amp;action=edit&amp;redlink=1" class="new" title="SandCraft (page does not exist)">SandCraft</a>, which designed the <b>R5432</b> for NEC and later produced the <b>SR71000</b>, one of the first <a href="/wiki/Out-of-order_execution" title="Out-of-order execution">out-of-order execution</a> processors for the embedded market. The original <a href="/wiki/Digital_Equipment_Corporation" title="Digital Equipment Corporation">DEC</a> <a href="/wiki/StrongARM" title="StrongARM">StrongARM</a> team eventually split into two MIPS-based start-ups: SiByte which produced the <b>SB-1250</b>, one of the first high-performance MIPS-based <a href="/wiki/System-on-a-chip" title="System-on-a-chip">systems-on-a-chip</a> (SOC); while <a href="/w/index.php?title=Alchemy_Semiconductor&amp;action=edit&amp;redlink=1" class="new" title="Alchemy Semiconductor (page does not exist)">Alchemy Semiconductor</a> (later acquired by <a href="/wiki/AMD" title="AMD" class="mw-redirect">AMD</a>) produced the <b>Au-1000</b> <a href="/wiki/System-on-a-chip" title="System-on-a-chip">SoC</a> for low-power applications. <a href="/wiki/Lexra" title="Lexra">Lexra</a> used a MIPS-<i>like</i> architecture and added DSP extensions for the audio chip market and <a href="/wiki/Multithreading" title="Multithreading" class="mw-redirect">multithreading</a> support for the networking market. Due to Lexra not licensing the architecture, two lawsuits were started between the two companies. The first was quickly resolved when Lexra promised not to advertise their processors as MIPS-compatible. The second (about MIPS patent 4814976 for handling unaligned memory access) was protracted, hurt both companies' business, and culminated in MIPS Technologies giving Lexra a free license and a large cash payment.</p>
<p>Two companies have emerged that specialize in building <a href="/wiki/Multi-core_(computing)" title="Multi-core (computing)" class="mw-redirect">multi-core</a> devices using the MIPS architecture. <a href="/wiki/RMI_Corporation" title="RMI Corporation">Raza Microelectronics, Inc.</a> purchased the product line from failing SandCraft and later produced devices that contained eight cores that were targeted at the telecommunications and networking markets. <a href="/wiki/Cavium_Networks" title="Cavium Networks">Cavium Networks</a>, originally a security processor vendor also produced devices with eight CPU cores for the same markets. Both of these companies designed their cores in-house, just licensing the architecture instead of purchasing cores from MIPS.</p>
<p><a name="Losing_the_Desktop" id="Losing_the_Desktop"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=MIPS_architecture&amp;action=edit&amp;section=4" title="Edit section: Losing the Desktop">edit</a>]</span> <span class="mw-headline">Losing the Desktop</span></h3>
<p>Among the manufacturers which have made computer <a href="/wiki/Workstation" title="Workstation">workstation</a> systems using MIPS processors are <a href="/wiki/Silicon_Graphics" title="Silicon Graphics">SGI</a>, <a href="/wiki/MIPS_Computer_Systems,_Inc." title="MIPS Computer Systems, Inc." class="mw-redirect">MIPS Computer Systems, Inc.</a>, <a href="/wiki/Whitechapel_Workstations" title="Whitechapel Workstations" class="mw-redirect">Whitechapel Workstations</a>, <a href="/wiki/Olivetti" title="Olivetti">Olivetti</a>, <a href="/wiki/Siemens_Nixdorf_Informationssysteme" title="Siemens Nixdorf Informationssysteme">Siemens-Nixdorf</a>, <a href="/wiki/Acer_(company)" title="Acer (company)" class="mw-redirect">Acer</a>, <a href="/wiki/Digital_Equipment_Corporation" title="Digital Equipment Corporation">Digital Equipment Corporation</a>, <a href="/wiki/NEC_Corporation" title="NEC Corporation" class="mw-redirect">NEC</a>, and <a href="/wiki/DeskStation" title="DeskStation" class="mw-redirect">DeskStation</a>. <a href="/wiki/Operating_system" title="Operating system">Operating systems</a> ported to the architecture include SGI's <a href="/wiki/IRIX" title="IRIX">IRIX</a>, <a href="/wiki/Microsoft" title="Microsoft">Microsoft</a>'s <a href="/wiki/Windows_NT" title="Windows NT">Windows NT</a> (until v4.0), <a href="/wiki/Windows_CE" title="Windows CE">Windows CE</a>, <a href="/wiki/Linux" title="Linux">Linux</a>, <a href="/wiki/BSD" title="BSD" class="mw-redirect">BSD</a>, <a href="/wiki/Unix" title="Unix">UNIX</a> <a href="/wiki/System_V" title="System V" class="mw-redirect">System V</a>, <a href="/wiki/SINIX" title="SINIX">SINIX</a> and MIPS Computer Systems' own <a href="/wiki/RISC/os" title="RISC/os" class="mw-redirect">RISC/os</a>.</p>
<p>There was speculation in the early 1990s that MIPS and other powerful <a href="/wiki/RISC" title="RISC" class="mw-redirect">RISC</a> processors would overtake the Intel <a href="/wiki/IA32" title="IA32" class="mw-redirect">IA32</a> architecture. This was encouraged by the support of the first two versions of <a href="/wiki/Microsoft" title="Microsoft">Microsoft</a>'s <a href="/wiki/Windows_NT" title="Windows NT">Windows NT</a> for <a href="/wiki/DEC_Alpha" title="DEC Alpha">DEC Alpha</a>, MIPS and <a href="/wiki/PowerPC" title="PowerPC">PowerPC</a> - and to a lesser extent the <a href="/wiki/Clipper_architecture" title="Clipper architecture">Clipper architecture</a> and <a href="/wiki/SPARC" title="SPARC">SPARC</a>. However, as Intel quickly released faster versions of their <a href="/wiki/Pentium" title="Pentium">Pentium</a> class CPUs, Microsoft <a href="/wiki/Windows_NT" title="Windows NT">Windows NT</a> v4.0 dropped support for anything but Intel and Alpha. With SGI's decision to transition to the <a href="/wiki/Itanium" title="Itanium">Itanium</a> and <a href="/wiki/IA32" title="IA32" class="mw-redirect">IA32</a> architectures, use of MIPS processors on the desktop has now disappeared almost completely<sup id="cite_ref-2" class="reference"><a href="#cite_note-2" title=""><span>[</span>3<span>]</span></a></sup>.</p>
<p><i>See main article <a href="/wiki/Advanced_Computing_Environment" title="Advanced Computing Environment">Advanced Computing Environment</a></i>.</p>
<p><a name="Embedded_markets" id="Embedded_markets"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=MIPS_architecture&amp;action=edit&amp;section=5" title="Edit section: Embedded markets">edit</a>]</span> <span class="mw-headline">Embedded markets</span></h3>
<p>Through the 1990s, the MIPS architecture was widely adopted by the embedded market, including for use in <a href="/wiki/Computer_network" title="Computer network">computer networking</a>/<a href="/wiki/Telecommunications" title="Telecommunications" class="mw-redirect">telecommunications</a>, <a href="/wiki/Video_arcade_game" title="Video arcade game" class="mw-redirect">video arcade games</a>, home <a href="/wiki/Video_game_console" title="Video game console">video game consoles</a>, <a href="/wiki/Computer_printer" title="Computer printer" class="mw-redirect">computer printers</a>, digital <a href="/wiki/Set-top_box" title="Set-top box">set-top boxes</a>, <a href="/wiki/Digital_television" title="Digital television">digital televisions</a>, <a href="/wiki/DSL_modem" title="DSL modem">DSL</a> and <a href="/wiki/Cable_modem" title="Cable modem">cable modems</a>, and <a href="/wiki/Personal_digital_assistant" title="Personal digital assistant">personal digital assistants</a>.</p>
<p>The low power-consumption and heat characteristics of embedded MIPS implementations, the wide availability of embedded development tools, and knowledge about the architecture means use of MIPS microprocessors in embedded roles is likely to remain common.</p>
<p><a name="Synthesizeable_Cores_for_Embedded_Markets" id="Synthesizeable_Cores_for_Embedded_Markets"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=MIPS_architecture&amp;action=edit&amp;section=6" title="Edit section: Synthesizeable Cores for Embedded Markets">edit</a>]</span> <span class="mw-headline">Synthesizeable Cores for Embedded Markets</span></h3>
<p>In recent years most of the technology used in the various MIPS generations has been offered as <a href="/wiki/Semiconductor_intellectual_property_core" title="Semiconductor intellectual property core">IP-cores</a> (building-blocks) for <a href="/wiki/Embedded_processor" title="Embedded processor" class="mw-redirect">embedded processor</a> designs. Both <a href="/wiki/32-bit" title="32-bit">32-bit</a> and <a href="/wiki/64-bit" title="64-bit">64-bit</a> basic cores are offered, known as the <b>4K</b> and <b>5K</b> respectively, and the design itself can be licensed as <b>MIPS32</b> and <b>MIPS64</b>. These cores can be mixed with add-in units such as <a href="/wiki/FPU" title="FPU">FPUs</a>, <a href="/wiki/SIMD" title="SIMD">SIMD</a> systems, various input/output devices, etc.</p>
<p>MIPS cores have been commercially successful, now being used in many consumer and industrial applications. MIPS cores can be found in newer <a href="/wiki/Cisco" title="Cisco" class="mw-redirect">Cisco</a>, <a href="/wiki/Linksys" title="Linksys">Linksys</a> and <a href="/wiki/Mikrotik" title="Mikrotik" class="mw-redirect">Mikrotik's routerboard</a> routers, <a href="/wiki/Cable_modem" title="Cable modem">cable modems</a> and <a href="/wiki/Asymmetric_Digital_Subscriber_Line" title="Asymmetric Digital Subscriber Line">ADSL</a> modems, <a href="/wiki/Smartcard" title="Smartcard" class="mw-redirect">smartcards</a>, <a href="/wiki/Laser_printer" title="Laser printer">laser printer</a> engines, <a href="/wiki/Set-top_box" title="Set-top box">set-top boxes</a>, <a href="/wiki/Robot" title="Robot">robots</a>, handheld computers, Sony <a href="/wiki/PlayStation_2" title="PlayStation 2">PlayStation 2</a> and Sony <a href="/wiki/PlayStation_Portable" title="PlayStation Portable">PlayStation Portable</a>. In cellphone/PDA applications, the MIPS core has been unable to displace the incumbent, competing <a href="/wiki/ARM_architecture" title="ARM architecture">ARM</a> core.</p>
<p>MIPS architecture processors include: IDT RC32438; <a href="/wiki/ATI" title="ATI" class="mw-redirect">ATI</a> Xilleon; Alchemy Au1000, 1100, 1200; Broadcom Sentry5; <a href="/wiki/RMI_Corporation" title="RMI Corporation">RMI</a> XLR7xx, <a href="/wiki/Cavium_Networks" title="Cavium Networks">Cavium</a> Octeon CN30xx, CN31xx, CN36xx, CN38xx and CN5xxx; <a href="/wiki/Infineon_Technologies" title="Infineon Technologies">Infineon Technologies</a> EasyPort, Amazon, Danube, ADM5120, WildPass, INCA-IP, INCA-IP2; <a href="/wiki/NEC" title="NEC">NEC</a> EMMA and EMMA2, NEC VR4181A, VR4121, VR4122, VR4181A, VR5432, VR5500; <a href="/wiki/Oak_Technologies" title="Oak Technologies" class="mw-redirect">Oak Technologies</a> Generation; <a href="/wiki/PMC-Sierra" title="PMC-Sierra">PMC-Sierra</a> RM11200; <a href="/wiki/QuickLogic" title="QuickLogic">QuickLogic</a> QuickMIPS ESP; Toshiba "Donau", <a href="/wiki/Toshiba" title="Toshiba">Toshiba</a> TMPR492x, TX4925, TX9956, TX7901.</p>
<p><a name="MIPS_based_Supercomputers" id="MIPS_based_Supercomputers"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=MIPS_architecture&amp;action=edit&amp;section=7" title="Edit section: MIPS based Supercomputers">edit</a>]</span> <span class="mw-headline">MIPS based Supercomputers</span></h3>
<p>One of the more interesting applications of the MIPS architecture is its use in massive processor count supercomputers. <a href="/wiki/Silicon_Graphics" title="Silicon Graphics">Silicon Graphics</a> (SGI) refocused its business from desktop graphics workstations to the high performance computing (<a href="/wiki/HPC" title="HPC">HPC</a>) market in the early 1990s. The success of the company's first foray into server systems, the <a href="/wiki/SGI_Challenge" title="SGI Challenge">Challenge</a> series based on the R4400 and <a href="/wiki/R8000" title="R8000">R8000</a>, and later <a href="/wiki/R10000" title="R10000">R10000</a>, motivated SGI to create a vastly more powerful system. The introduction of the integrated R10000 allowed SGI to produce a system, the <a href="/wiki/Origin_2000" title="Origin 2000" class="mw-redirect">Origin 2000</a>, eventually scalable to 1024 CPUs using its <a href="/wiki/NUMAlink" title="NUMAlink">NUMAlink</a> cc-NUMA interconnect. The Origin 2000 begat the <a href="/wiki/Origin_3000" title="Origin 3000" class="mw-redirect">Origin 3000</a> series which topped out with the same 1024 maximum CPU count but using the R14000 and R16000 chips up to 700 MHz. Its MIPS based supercomputers were withdrawn in 2005 when SGI made the strategic decision to move to Intel's IA-64 architecture.</p>
<p>An HPC startup introduced a radical MIPS based supercomputer in 2007. <a href="/wiki/SiCortex" title="SiCortex">SiCortex</a>, Inc. has created a tightly integrated <a href="/wiki/Linux" title="Linux">Linux</a> cluster supercomputer based on the MIPS64 architecture and a high performance interconnect based on the Kautz digraph topology. The system is very power efficient and computationally powerful. The most unique aspect of the system is its multicore processing node which integrates six MIPS64 cores, a <a href="/wiki/Crossbar" title="Crossbar">crossbar</a> <a href="/wiki/Memory_controller" title="Memory controller">memory controller</a>, interconnect DMA engine, Gigabit Ethernet and PCI Express controllers all on a single chip which consumes only 10 watts of power, yet has a peak floating point performance of 6 GFLOPs. The most powerful configuration, the SC5832, is a single cabinet supercomputer consisting of 972 such node chips for a total of 5832 MIPS64 processor cores and 8.2 teraFLOPS of peak performance.</p>
<p><a name="CPU_family" id="CPU_family"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=MIPS_architecture&amp;action=edit&amp;section=8" title="Edit section: CPU family">edit</a>]</span> <span class="mw-headline">CPU family</span></h2>
<div class="thumb tright">
<div class="thumbinner" style="width:302px;"><a href="/wiki/File:MIPS_Architecture_(Pipelined).svg" class="image" title="Pipelined MIPS, showing the five stages (instruction fetch, instruction decode, execute, memory access and write back)"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/e/ea/MIPS_Architecture_%28Pipelined%29.svg/300px-MIPS_Architecture_%28Pipelined%29.svg.png" width="300" height="188" border="0" class="thumbimage" /></a>
<div class="thumbcaption">
<div class="magnify"><a href="/wiki/File:MIPS_Architecture_(Pipelined).svg" class="internal" title="Enlarge"><img src="/skins-1.5/common/images/magnify-clip.png" width="15" height="11" alt="" /></a></div>
Pipelined MIPS, showing the five stages (instruction fetch, instruction decode, execute, memory access and write back)</div>
</div>
</div>
<p>The first commercial MIPS CPU model, the <b>R2000</b>, was announced in 1985. It added multiple-cycle multiply and divide instructions in a somewhat independent on-chip unit. New instructions were added to retrieve the results from this unit back to the execution core; these result-retrieving instructions were interlocked.</p>
<p>The R2000 could be booted either <a href="/wiki/Big-endian" title="Big-endian">big-endian</a> or <a href="/wiki/Little-endian" title="Little-endian">little-endian</a>. It had thirty-two 32-bit general purpose registers, but no <a href="/wiki/Condition_Code_Register" title="Condition Code Register" class="mw-redirect">condition code register</a> (the designers considered it a potential bottleneck), a feature it shares with the <a href="/wiki/AMD_29000" title="AMD 29000" class="mw-redirect">AMD 29000</a> and the <a href="/wiki/DEC_Alpha" title="DEC Alpha">Alpha</a>. Unlike other registers, the <a href="/wiki/Program_counter" title="Program counter">program counter</a> is not directly accessible.</p>
<p>The R2000 also had support for up to four co-processors, one of which was built into the main CPU and handled exceptions, traps and memory management, while the other three were left for other uses. One of these could be filled by the optional <b>R2010</b> <a href="/wiki/Floating_point_unit" title="Floating point unit" class="mw-redirect">FPU</a>, which had thirty-two 32-bit registers that could be used as sixteen 64-bit registers for double-precision.</p>
<p>The <b>R3000</b> succeeded the R2000 in 1988, adding 32 KB (soon increased to 64 KB) caches for instructions and data, along with <a href="/wiki/Cache_coherency" title="Cache coherency" class="mw-redirect">cache coherency</a> support for multiprocessor use. While there were flaws in the R3000's multiprocessor support, it still managed to be a part of several successful multiprocessor designs. The R3000 also included a built-in <a href="/wiki/Memory_management_unit" title="Memory management unit">MMU</a>, a common feature on CPUs of the era. The R3000, like the R2000, could be paired with a <b>R3010</b> FPU. The R3000 was the first successful MIPS design in the marketplace, and eventually over one million were made. A speed-bumped version of the R3000 running up to 40 MHz, the <b>R3000A</b> delivered a performance of 32 <a href="/wiki/Instructions_per_second#Million_instructions_per_second" title="Instructions per second">VUPs (VAX Unit of Performance)</a>. The R3000A was the processor used in the extremely successful <a href="/wiki/Sony" title="Sony">Sony</a> <a href="/wiki/PlayStation" title="PlayStation">PlayStation</a>. Third-party designs include Performance Semiconductor's <b>R3400</b> and IDT's <b>R3500</b>, both of them were R3000As with an integrated R3010 FPU. <a href="/wiki/Toshiba" title="Toshiba">Toshiba</a>'s <b>R3900</b> was a virtually first <a href="/wiki/System-on-a-chip" title="System-on-a-chip">SoC</a> for the early <a href="/wiki/Handheld_PC" title="Handheld PC">handheld PCs</a> based on the <a href="/wiki/Windows_CE" title="Windows CE">Windows CE</a>. A <a href="/wiki/Radiation-hardened" title="Radiation-hardened" class="mw-redirect">radiation-hardened</a> variant for space applications, the <a href="/wiki/Mongoose-V" title="Mongoose-V">Mongoose-V</a>, is a R3000 with an integrated R3010 FPU.</p>
<p>The <b>R4000</b> series, released in 1991, extended the MIPS instruction set to a full 64-bit architecture, moved the FPU onto the main die to create a single-chip microprocessor, and operated at a radically high internal clock speed (it was introduced at 100&#160;MHz). However, in order to achieve the clock speed the caches were reduced to 8 KB each and they took three cycles to access. The high operating frequencies were achieved through the technique of <a href="/wiki/Deep_pipelining" title="Deep pipelining" class="mw-redirect">deep pipelining</a> (called super-pipelining at the time). With the introduction of the R4000 a number of improved versions soon followed, including the <b>R4400</b> (1993) which included 16 KB caches, largely bug-free 64-bit operation, and support for a larger external level 2 cache.</p>
<p>MIPS, now a division of SGI called MTI, designed the lower-cost <b>R4200</b>, and later the even lower cost <b>R4300</b>, which was the R4200 with a 32-bit external bus. The <a href="/wiki/Nintendo_64" title="Nintendo 64">Nintendo 64</a> used a <a href="/wiki/NEC_Corporation" title="NEC Corporation" class="mw-redirect">NEC</a> VR4300 CPU that was based upon the low-cost MIPS <b>R4300i</b>.<sup id="cite_ref-3" class="reference"><a href="#cite_note-3" title=""><span>[</span>4<span>]</span></a></sup></p>
<div class="thumb tright">
<div class="thumbinner" style="width:182px;"><a href="/wiki/File:IDT_R4700_diephoto2.jpg" class="image" title="bottom-side view of package of R4700 Orion with the exposed silicon chip, fabricated by IDT, designed by Quantum Effect Devices"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/6/6c/IDT_R4700_diephoto2.jpg/180px-IDT_R4700_diephoto2.jpg" width="180" height="176" border="0" class="thumbimage" /></a>
<div class="thumbcaption">
<div class="magnify"><a href="/wiki/File:IDT_R4700_diephoto2.jpg" class="internal" title="Enlarge"><img src="/skins-1.5/common/images/magnify-clip.png" width="15" height="11" alt="" /></a></div>
bottom-side view of package of R4700 Orion with the exposed silicon chip, fabricated by <a href="/wiki/Integrated_Device_Technology" title="Integrated Device Technology">IDT</a>, designed by <a href="/wiki/Quantum_Effect_Devices" title="Quantum Effect Devices">Quantum Effect Devices</a></div>
</div>
</div>
<div class="thumb tright">
<div class="thumbinner" style="width:182px;"><a href="/wiki/File:IDT_Orion_4700_chip.jpg" class="image" title="topside view of package for R4700 Orion"><img alt="" src="http://upload.wikimedia.org/wikipedia/en/thumb/8/85/IDT_Orion_4700_chip.jpg/180px-IDT_Orion_4700_chip.jpg" width="180" height="172" border="0" class="thumbimage" /></a>
<div class="thumbcaption">
<div class="magnify"><a href="/wiki/File:IDT_Orion_4700_chip.jpg" class="internal" title="Enlarge"><img src="/skins-1.5/common/images/magnify-clip.png" width="15" height="11" alt="" /></a></div>
topside view of package for R4700 Orion</div>
</div>
</div>
<p><a href="/wiki/Quantum_Effect_Devices" title="Quantum Effect Devices">Quantum Effect Devices</a> (QED), a separate company started by former MIPS employees, designed the <b>R4600</b> "Orion", the <b>R4700</b> "Orion", the <b>R4650</b> and the <b>R5000</b>. Where the R4000 had pushed clock frequency and sacrificed cache capacity, the QED designs emphasized large caches which could be accessed in just two cycles and efficient use of silicon area. The R4600 and R4700 were used in low-cost versions of the <a href="/wiki/SGI_Indy" title="SGI Indy">SGI Indy</a> workstation as well as the first MIPS based Cisco routers, such as the 36x0 and 7x00-series routers. The R4650 was used in the original <a href="/wiki/WebTV" title="WebTV" class="mw-redirect">WebTV</a> set-top boxes (now Microsoft TV). The R5000 FPU had more flexible single precision floating-point scheduling than the R4000, and as a result, R5000-based SGI Indys had much better graphics performance than similarly clocked R4400 Indys with the same graphics hardware. SGI gave the old graphics board a new name when it was combined with R5000 in order to emphasize the improvement. QED later designed the <b>RM7000</b> and <b>RM9000</b> family of devices for embedded markets like networking and laser printers. QED was acquired by the semiconductor manufacturer <a href="/wiki/PMC-Sierra" title="PMC-Sierra">PMC-Sierra</a> in August 2000, the latter company continuing to invest in the MIPS architecture. The <b>RM7000</b> included an on-board 256 kB level 2 cache and a controller for optional level three cache. The <b>RM9xx0</b> were a family of <a href="/wiki/System-on-a-chip" title="System-on-a-chip">SOC</a> devices which included <a href="/wiki/Northbridge_(computing)" title="Northbridge (computing)">northbridge</a> peripherals such as <a href="/wiki/Memory_controller" title="Memory controller">memory controller</a>, <a href="/wiki/Peripheral_Component_Interconnect" title="Peripheral Component Interconnect" class="mw-redirect">PCI</a> controller, <a href="/wiki/Gigabit_ethernet" title="Gigabit ethernet" class="mw-redirect">gigabit ethernet</a> controller and fast IO such as a <a href="/wiki/Hypertransport" title="Hypertransport" class="mw-redirect">hypertransport</a> port.</p>
<p>The <b><a href="/wiki/R8000" title="R8000">R8000</a></b> (1994) was the first <a href="/wiki/Superscalar" title="Superscalar">superscalar</a> MIPS design, able to execute two integer or floating point and two memory instructions per cycle. The design was spread over six chips: an integer unit (with 16 KB instruction and 16 KB data caches), a floating-point unit, three full-custom secondary cache tag RAMs (two for secondary cache accesses, one for bus snooping), and a cache controller ASIC. The design had two fully pipelined double precision multiply-add units, which could stream data from the 4 MB off-chip secondary cache. The R8000 powered SGI's <a href="/wiki/SGI_Challenge" title="SGI Challenge">POWER Challenge</a> servers in the mid 1990s and later became available in the POWER Indigo2 workstation. Although its FPU performance fit scientific users quite well, its limited integer performance and high cost dampened appeal for most users, and the R8000 was in the marketplace for only a year and remains fairly rare.</p>
<p>In 1995, the <b><a href="/wiki/R10000" title="R10000">R10000</a></b> was released. This processor was a single-chip design, ran at a faster clock speed than the R8000, and had larger 32 KB primary instruction and data caches. It was also superscalar, but its major innovation was out-of-order execution. Even with a single memory pipeline and simpler FPU, the vastly improved integer performance, lower price, and higher density made the R10000 preferable for most customers.</p>
<p>Recent designs have all been based upon R10000 core. The <b><a href="/wiki/R10000#R12000" title="R10000">R12000</a></b> used a 0.25 micrometre process to shrink the chip and achieve higher clock rates. The revised <b><a href="/wiki/R10000#R14000" title="R10000">R14000</a></b> allowed higher clock rates with additional support for <a href="/wiki/DDR_SDRAM" title="DDR SDRAM">DDR</a> <a href="/wiki/Static_random_access_memory" title="Static random access memory">SRAM</a> in the off-chip <a href="/wiki/CPU_cache" title="CPU cache">cache</a>, and a faster system bus clocked to 200&#160;MHz for better throughput. Later iterations are named the <b><a href="/wiki/R10000#R16000" title="R10000">R16000</a></b> and the <b>R16000A</b> and feature increased clock speed, additional L1 cache, and smaller die manufacturing compared with before.</p>
<p>Other members of the MIPS family include the <b>R6000</b>, an <a href="/wiki/Emitter-coupled_logic" title="Emitter-coupled logic">ECL</a> implementation of the MIPS architecture which was produced by <a href="/wiki/Bipolar_Integrated_Technology" title="Bipolar Integrated Technology">Bipolar Integrated Technology</a>. The R6000 microprocessor introduced the MIPS II instruction set. Its <a href="/wiki/Translation_Lookaside_Buffer" title="Translation Lookaside Buffer" class="mw-redirect">TLB</a> and cache architecture are different from all other members of the MIPS family. The R6000 did not deliver the promised performance benefits, and although it saw some use in <a href="/wiki/Control_Data" title="Control Data" class="mw-redirect">Control Data</a> machines, it quickly disappeared from the mainstream market.</p>
<table class="wikitable" summary="This table contains some specifications for common MIPS microprocessors. Each microprocessor is given the frequency in megahertz, the release year, the fabrication process in micrometers, the number of transistors (in millions), the size of the die in square millimeters, the pin count, the power dissapation in watts, its voltage, and the sizes of the data, instruction, L2 and L3 caches.">
<caption><b>MIPS Microprocessors</b></caption>
<tr style="vertical-align: top;">
<th>Model</th>
<th abbr="Frequency">Frequency (MHz)</th>
<th>Year</th>
<th abbr="Process">Process (µm)</th>
<th abbr="Transistors">Transistors (Millions)</th>
<th abbr="Size">Die Size (mm²)</th>
<th>Pin Count</th>
<th abbr="Power">Power (W)</th>
<th>Voltage</th>
<th abbr="Data Cache">Dcache (KB)</th>
<th abbr="Instruction Cache">Icache (KB)</th>
<th>L2 Cache</th>
<th>L3 Cache</th>
</tr>
<tr>
<th>R2000</th>
<td>8-16.67</td>
<td>1985</td>
<td>2.0</td>
<td>0.11</td>
<td>?</td>
<td>?</td>
<td>?</td>
<td>?</td>
<td>32</td>
<td>64</td>
<td>None</td>
<td>None</td>
</tr>
<tr>
<th>R3000</th>
<td>12-40</td>
<td>1988</td>
<td>1.2</td>
<td>0.11</td>
<td>66.12</td>
<td>145</td>
<td>4</td>
<td>?</td>
<td>64</td>
<td>64</td>
<td>0-256 KB External</td>
<td>None</td>
</tr>
<tr>
<th>R4000</th>
<td>100</td>
<td>1991</td>
<td>0.8</td>
<td>1.35</td>
<td>213</td>
<td>179</td>
<td>15</td>
<td>5</td>
<td>8</td>
<td>8</td>
<td>1 MB External</td>
<td>None</td>
</tr>
<tr>
<th>R4400</th>
<td>100-250</td>
<td>1992</td>
<td>0.6</td>
<td>2.3</td>
<td>186</td>
<td>179</td>
<td>15</td>
<td>5</td>
<td>16</td>
<td>16</td>
<td>1-4 MB External</td>
<td>None</td>
</tr>
<tr>
<th>R4600</th>
<td>100-133</td>
<td>1994</td>
<td>0.64</td>
<td>2.2</td>
<td>77</td>
<td>179</td>
<td>4.6</td>
<td>5</td>
<td>16</td>
<td>16</td>
<td>512 KB External</td>
<td>None</td>
</tr>
<tr>
<th>R5000</th>
<td>150-200</td>
<td>1996</td>
<td>0.35</td>
<td>3.7</td>
<td>84</td>
<td>223</td>
<td>10</td>
<td>3.3</td>
<td>32</td>
<td>32</td>
<td>1 MB External</td>
<td>None</td>
</tr>
<tr>
<th><a href="/wiki/R8000" title="R8000">R8000</a></th>
<td>75-90</td>
<td>1994</td>
<td>0.7</td>
<td>2.6</td>
<td>299</td>
<td>591+591</td>
<td>30</td>
<td>3.3</td>
<td>16</td>
<td>16</td>
<td>4 MB External</td>
<td>None</td>
</tr>
<tr>
<th><a href="/wiki/R10000" title="R10000">R10000</a></th>
<td>150-250</td>
<td>1996</td>
<td>0.35, 0.25</td>
<td>6.7</td>
<td>299</td>
<td>599</td>
<td>30</td>
<td>3.3</td>
<td>32</td>
<td>32</td>
<td>1-4 MB External</td>
<td>None</td>
</tr>
<tr>
<th><a href="/wiki/R10000#R12000" title="R10000">R12000</a></th>
<td>270-400</td>
<td>1998</td>
<td>0.25, 0.18</td>
<td>6.9</td>
<td>204</td>
<td>600</td>
<td>20</td>
<td>4</td>
<td>32</td>
<td>32</td>
<td>2-8 MB External</td>
<td>None</td>
</tr>
<tr>
<th>RM7000</th>
<td>250-600</td>
<td>1998</td>
<td>0.25, 0.18, 0.13</td>
<td>18</td>
<td>91</td>
<td>304</td>
<td>10, 6, 3</td>
<td>3.3, 2.5, 1.5</td>
<td>16</td>
<td>16</td>
<td>256 KB Internal</td>
<td>1 MB External</td>
</tr>
<tr>
<th><a href="/wiki/R10000#R14000" title="R10000">R14000</a></th>
<td>500-600</td>
<td>2001</td>
<td>0.13</td>
<td>7.2</td>
<td>204</td>
<td>527</td>
<td>17</td>
<td>?</td>
<td>32</td>
<td>32</td>
<td>2-4 MB External</td>
<td>None</td>
</tr>
<tr>
<th><a href="/wiki/R10000#R16000" title="R10000">R16000</a></th>
<td>700-1000</td>
<td>2002</td>
<td>0.11</td>
<td>?</td>
<td>?</td>
<td>?</td>
<td>20</td>
<td>?</td>
<td>64</td>
<td>64</td>
<td>4-16 MB External</td>
<td>None</td>
</tr>
</table>
<p>Note: These specifications are for common processor models. Variations exist, especially in Level 2 cache.</p>
<p>Note: The R8000 has a unique cache hierarchy named 'Data Streaming Cache' where there is 16 KB of L1 data cache for the integer chip with an external 4 MB L2 cache that served as the secondary unified cache for the integer chip but as the L1 data cache for the floating point chip.</p>
<p><a name="Summary_of_R3000_instruction_set_Opcodes" id="Summary_of_R3000_instruction_set_Opcodes"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=MIPS_architecture&amp;action=edit&amp;section=9" title="Edit section: Summary of R3000 instruction set Opcodes">edit</a>]</span> <span class="mw-headline">Summary of R3000 instruction set Opcodes</span></h2>
<p>Instructions are divided into three types: R, I and J. Every instruction starts with a 6-bit opcode. In addition to the opcode, R-type instructions specify three registers, a shift amount field, and a function field; I-type instructions specify two registers and a 16-bit immediate value; J-type instructions follow the opcode with a 26-bit jump target.<sup id="cite_ref-uidaho_4-0" class="reference"><a href="#cite_note-uidaho-4" title=""><span>[</span>5<span>]</span></a></sup><sup id="cite_ref-5" class="reference"><a href="#cite_note-5" title=""><span>[</span>6<span>]</span></a></sup></p>
<p>The following are the three formats used for the core instruction set:</p>
<table class="wikitable">
<tr>
<th>Type</th>
<th colspan="6">-31- &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; format (bits) &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; -0-</th>
</tr>
<tr align="center">
<td><b>R</b></td>
<td>opcode (6)</td>
<td>rs (5)</td>
<td>rt (5)</td>
<td>rd (5)</td>
<td>shamt (5)</td>
<td>funct (6)</td>
</tr>
<tr align="center">
<td><b>I</b></td>
<td>opcode (6)</td>
<td>rs (5)</td>
<td>rt (5)</td>
<td colspan="3">immediate (16)</td>
</tr>
<tr align="center">
<td><b>J</b></td>
<td>opcode (6)</td>
<td colspan="5">address (26)</td>
</tr>
</table>
<p><a name="MIPS_Assembly_Language" id="MIPS_Assembly_Language"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=MIPS_architecture&amp;action=edit&amp;section=10" title="Edit section: MIPS Assembly Language">edit</a>]</span> <span class="mw-headline">MIPS Assembly Language</span></h2>
<p>These are assembly language instructions that have direct hardware implementation, as opposed to <i>pseudoinstructions</i> which are translated into multiple real instructions before being assembled.</p>
<ul>
<li>In the following, the register letters <i>d</i>, <i>t</i>, and <i>s</i> are placeholders for (register) numbers or register names.</li>
<li>"C" denotes a constant ("immediate").</li>
<li>All the following instructions are native instructions.</li>
<li>Opcodes and funct codes are in hexadecimal.</li>
<li>The MIPS32 Instruction Set states that the word <i>unsigned</i> as part of Add and Subtract instructions, is a <i>misnomer</i>. The difference between <i>signed</i> and <i>unsigned</i> versions of commands is not a sign extension (or lack thereof) of the operands, but controls whether a trap is executed on overflow <i>(e.g. Add)</i> or an overflow is ignored <i>(Add unsigned)</i>. An immediate operand CONST to these instructions is always sign-extended.</li>
</ul>
<p><a name="Integer" id="Integer"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=MIPS_architecture&amp;action=edit&amp;section=11" title="Edit section: Integer">edit</a>]</span> <span class="mw-headline">Integer</span></h3>
<p>MIPS has 32 integer ("fast") registers. Data must be in registers to perform arithmetic. Register $0 always holds 0 and register $1 is normally reserved for the assembler (for handling pseudo instructions and large constants).</p>
<p>The encoding shows which bits correspond to which parts of the instruction. A hyphen (-) is used to indicate <a href="/wiki/Don%27t_cares" title="Don't cares" class="mw-redirect">don't cares</a>.</p>
<table class="wikitable">
<tr>
<th>Category</th>
<th>Name</th>
<th>Instruction syntax</th>
<th>Meaning</th>
<th colspan="3">Format/opcode/funct</th>
<th>Notes/Encoding</th>
</tr>
<tr>
<td rowspan="9">Arithmetic</td>
<td>Add</td>
<td>add $d,$s,$t</td>
<td>$d = $s + $t</td>
<td>R</td>
<td>0</td>
<td><span class="texhtml">20<sub>16</sub></span></td>
<td>adds two registers, executes a trap on overflow<br />
000000ss sssttttt ddddd--- --100000</td>
</tr>
<tr>
<td>Add unsigned</td>
<td>addu $d,$s,$t</td>
<td>$d = $s + $t</td>
<td>R</td>
<td>0</td>
<td><span class="texhtml">21<sub>16</sub></span></td>
<td>as above but ignores an overflow<br />
000000ss sssttttt ddddd--- --100001</td>
</tr>
<tr>
<td>Subtract</td>
<td>sub $d,$s,$t</td>
<td>$d = $s - $t</td>
<td>R</td>
<td>0</td>
<td><span class="texhtml">22<sub>16</sub></span></td>
<td>subtracts two registers, executes a trap on overflow<br />
000000ss sssttttt ddddd--- --100010</td>
</tr>
<tr>
<td>Subtract unsigned</td>
<td>subu $d,$s,$t</td>
<td>$d = $s - $t</td>
<td>R</td>
<td>0</td>
<td><span class="texhtml">23<sub>16</sub></span></td>
<td>as above but ignores an overflow<br />
000000ss sssttttt ddddd000 00100011</td>
</tr>
<tr>
<td>Add immediate</td>
<td>addi $t,$s,C</td>
<td>$t = $s + C (signed)</td>
<td>I</td>
<td><span class="texhtml">8<sub>16</sub></span></td>
<td>-</td>
<td>Used to add sign-extended constants (and also to copy one register to another "addi $1, $2, 0"), executes a trap on overflow<br />
001000ss sssttttt CCCCCCCC CCCCCCCC</td>
</tr>
<tr>
<td>Add immediate unsigned</td>
<td>addiu $t,$s,C</td>
<td>$t = $s + C (unsigned)</td>
<td>I</td>
<td><span class="texhtml">9<sub>16</sub></span></td>
<td>-</td>
<td>as above but ignores an overflow, C still sign-extended<br />
001001ss sssttttt CCCCCCCC CCCCCCCC</td>
</tr>
<tr>
<td>Multiply</td>
<td>mult $x,$y</td>
<td>LO = (($x * $y) &lt;&lt; 32) &gt;&gt; 32;<br />
HI = ($x * $y) &gt;&gt; 32;</td>
<td>R</td>
<td>0</td>
<td><span class="texhtml">18<sub>16</sub></span></td>
<td>Multiplies two registers and puts the 64-bit result in two special memory spots - LO and HI. Alternatively, one could say the result of this operation is: (int HI,int LO) = (64-bit) $x * $y . See mfhi and mflo for accessing LO and HI regs.</td>
</tr>
<tr>
<td>Divide</td>
<td>div $x, $y</td>
<td>LO = $x / $y &#160;&#160;&#160; HI = $x&#160;% $y</td>
<td>R</td>
<td>0</td>
<td>1A<span class="texhtml"><sub>16</sub></span></td>
<td>Divides two registers and puts the 32-bit integer result in LO and the remainder in HI.<sup id="cite_ref-uidaho_4-1" class="reference"><a href="#cite_note-uidaho-4" title=""><span>[</span>5<span>]</span></a></sup></td>
</tr>
<tr>
<td>Divide unsigned</td>
<td>divu $x, $y</td>
<td>LO = $x / $y &#160;&#160;&#160; HI = $x&#160;% $y</td>
<td>R</td>
<td>0</td>
<td>1B<span class="texhtml"><sub>16</sub></span></td>
<td>Divides two registers and puts the 32-bit integer result in LO and the remainder in HI.</td>
</tr>
<tr>
<td rowspan="15">Data Transfer</td>
<td>Load double word</td>
<td>ld $x,C($y)</td>
<td>$x = Memory[$y + C]</td>
<td>I</td>
<td><span class="texhtml">23<sub>16</sub></span></td>
<td>-</td>
<td>loads the word stored from: MEM[$y+C] and the following 7 bytes to $x and the next register.</td>
</tr>
<tr>
<td>Load word</td>
<td>lw $x,C($y)</td>
<td>$x = Memory[$y + C]</td>
<td>I</td>
<td><span class="texhtml">23<sub>16</sub></span></td>
<td>-</td>
<td>loads the word stored from: MEM[$y+C] and the following 3 bytes.</td>
</tr>
<tr>
<td>Load halfword</td>
<td>lh $x,C($y)</td>
<td>$x = Memory[$y + C] (signed)</td>
<td>I</td>
<td><span class="texhtml">21<sub>16</sub></span></td>
<td>-</td>
<td>loads the halfword stored from: MEM[$y+C] and the following byte. Sign is extended to width of register.</td>
</tr>
<tr>
<td>Load halfword unsigned</td>
<td>lhu $x,C($y)</td>
<td>$x = Memory[$y + C] (unsigned)</td>
<td>I</td>
<td><span class="texhtml">25<sub>16</sub></span></td>
<td>-</td>
<td>As above without sign extension.</td>
</tr>
<tr>
<td>Load byte</td>
<td>lb $x,C($y)</td>
<td>$x = Memory[$y + C] (signed)</td>
<td>I</td>
<td><span class="texhtml">20<sub>16</sub></span></td>
<td>-</td>
<td>loads the byte stored from: MEM[$y+C].</td>
</tr>
<tr>
<td>Load byte unsigned</td>
<td>lbu $x,C($y)</td>
<td>$x = Memory[$y + C] (unsigned)</td>
<td>I</td>
<td><span class="texhtml">24<sub>16</sub></span></td>
<td>-</td>
<td>As above without sign extension.</td>
</tr>
<tr>
<td>Store double word</td>
<td>sd $x,C($y)</td>
<td>Memory[$y + C] = $x</td>
<td>I</td>
<td></td>
<td>-</td>
<td>stores two words from $x and the next register into: MEM[$y+C] and the following 7 bytes. The order of the operands is a large source of confusion.</td>
</tr>
<tr>
<td>Store word</td>
<td>sw $x,C($y)</td>
<td>Memory[$y + C] = $x</td>
<td>I</td>
<td><span class="texhtml">2<i>B</i><sub>16</sub></span></td>
<td>-</td>
<td>stores a word into: MEM[$y+C] and the following 3 bytes. The order of the operands is a large source of confusion.</td>
</tr>
<tr>
<td>Store half</td>
<td>sh $x,C($y)</td>
<td>Memory[$y + C] = $x</td>
<td>I</td>
<td><span class="texhtml">29<sub>16</sub></span></td>
<td>-</td>
<td>stores the first half of a register (a halfword) into: MEM[$y+C] and the following byte.</td>
</tr>
<tr>
<td>Store byte</td>
<td>sb $x,C($y)</td>
<td>Memory[$y + C] = $x</td>
<td>I</td>
<td><span class="texhtml">28<sub>16</sub></span></td>
<td>-</td>
<td>stores the first fourth of a register (a byte) into: MEM[$y+C].</td>
</tr>
<tr>
<td>Load upper immediate</td>
<td>lui $x,C</td>
<td>$x = C &lt;&lt; 16</td>
<td>I</td>
<td><span class="texhtml"><i>F</i><sub>16</sub></span></td>
<td>-</td>
<td>loads a 16-bit immediate operand into the upper 16-bits of the register specified. Maximum value of constant is 2<sup>16</sup>-1</td>
</tr>
<tr>
<td>Move from high</td>
<td>mfhi $x</td>
<td>$x = HI</td>
<td>R</td>
<td>0</td>
<td><span class="texhtml">10<sub>16</sub></span></td>
<td>Moves a value from HI to a register. Do not use a multiply or a divide instruction within two instructions of mfhi (that action is undefined because of the MIPS pipeline).</td>
</tr>
<tr>
<td>Move from low</td>
<td>mflo $x</td>
<td>$x = LO</td>
<td>R</td>
<td>0</td>
<td><span class="texhtml">12<sub>16</sub></span></td>
<td>Moves a value from LO to a register. Do not use a multiply or a divide instruction within two instructions of mflo (that action is undefined because of the MIPS pipeline).</td>
</tr>
<tr>
<td>Move from Control Register</td>
<td>mfcZ $x, $y</td>
<td>$x = Coprocessor[Z].ControlRegister[$y]</td>
<td>R</td>
<td>0</td>
<td></td>
<td>Moves a 4 byte value from Coprocessor Z Control register to a general purpose register. Sign extension.</td>
</tr>
<tr>
<td>Move to Control Register</td>
<td>mtcZ $x, $y</td>
<td>Coprocessor[Z].ControlRegister[$y] = $x</td>
<td>R</td>
<td>0</td>
<td></td>
<td>Moves a 4 byte value from a general purpose register to a Coprocessor Z Control register. Sign extension.</td>
</tr>
<tr>
<td rowspan="8">Logical</td>
<td>And</td>
<td>and $d,$s,$t</td>
<td>$d = $s &amp; $t</td>
<td>R</td>
<td>0</td>
<td><span class="texhtml">24<sub>16</sub></span></td>
<td><a href="/wiki/Bitwise" title="Bitwise">Bitwise</a> and<br />
000000ss sssttttt ddddd--- --100100</td>
</tr>
<tr>
<td>And immediate</td>
<td>andi $t,$s,C</td>
<td>$t = $s &amp; C</td>
<td>I</td>
<td><span class="texhtml">8<sub>16</sub></span></td>
<td>-</td>
<td>001100ss sssttttt CCCCCCCC CCCCCCCC</td>
</tr>
<tr>
<td>Or</td>
<td>or $x,$y,$z</td>
<td>$x = $y | $z</td>
<td>R</td>
<td>0</td>
<td><span class="texhtml">25<sub>16</sub></span></td>
<td><a href="/wiki/Bitwise" title="Bitwise">Bitwise</a> or</td>
</tr>
<tr>
<td>Or immediate</td>
<td>ori $x,$y,C</td>
<td>$x = $y | C</td>
<td>I</td>
<td><span class="texhtml"><i>D</i><sub>16</sub></span></td>
<td>-</td>
<td></td>
</tr>
<tr>
<td>Exclusive or</td>
<td>xor $x,$y,$z</td>
<td>$x = $y ^ $z</td>
<td>R</td>
<td>0</td>
<td><span class="texhtml">26<sub>16</sub></span></td>
<td></td>
</tr>
<tr>
<td>Nor</td>
<td>nor $x,$y,$z</td>
<td>$x = ~ ($y | $z)</td>
<td>R</td>
<td>0</td>
<td><span class="texhtml">27<sub>16</sub></span></td>
<td><a href="/wiki/Bitwise" title="Bitwise">Bitwise</a> nor</td>
</tr>
<tr>
<td>Set on less than</td>
<td>slt $x,$y,$z</td>
<td>$x = ($y &lt; $z)</td>
<td>R</td>
<td>0</td>
<td><span class="texhtml">2<i>A</i><sub>16</sub></span></td>
<td>Tests if one register is less than another.</td>
</tr>
<tr>
<td>Set on less than immediate</td>
<td>slti $x,$y,C</td>
<td>$x = ($y &lt; C)</td>
<td>I</td>
<td><span class="texhtml"><i>A</i><sub>16</sub></span></td>
<td>-</td>
<td>Tests if one register is less than a constant.</td>
</tr>
<tr>
<td rowspan="3">Bitwise Shift</td>
<td>Shift left logical</td>
<td>sll $x,$y,C</td>
<td>$x = $y &lt;&lt; C</td>
<td>R</td>
<td>0</td>
<td>0</td>
<td>shifts C number of bits to the left (multiplies by <span class="texhtml">2<sup><i>C</i><i>O</i><i>N</i><i>S</i><i>T</i></sup></span>)</td>
</tr>
<tr>
<td>Shift right logical</td>
<td>srl $x,$y,C</td>
<td>$x = $y &gt;&gt; C</td>
<td>R</td>
<td>0</td>
<td><span class="texhtml">2<sub>16</sub></span></td>
<td>shifts CONST number of bits to the right - zeros are shifted in (divides by <span class="texhtml">2<sup><i>C</i></sup></span>). Note that this instruction only works as division of a two's complement number if the value is positive.</td>
</tr>
<tr>
<td>Shift right arithmetic</td>
<td>sra $x,$y,C</td>
<td><img class="tex" alt=" $x = $y &gt;&gt; C + \ " src="http://upload.wikimedia.org/math/3/a/1/3a1fdb443ef8cbbbb2221f3edf652ba8.png" /><br />
<img class="tex" alt=" \bigg(\bigg(\sum_{n=1}^{\text{CONST}}2^{31-n}\bigg)\cdot $2 &gt;&gt; 31 \bigg) " src="http://upload.wikimedia.org/math/d/e/f/def6827f7ba3ac1e0e9fe29a72edf3a7.png" /></td>
<td>R</td>
<td>0</td>
<td><span class="texhtml">3<sub>16</sub></span></td>
<td>shifts C number of bits - the sign bit is shifted in (divides <a href="/wiki/Two%27s_compliment" title="Two's compliment" class="mw-redirect">2's complement number</a> by <span class="texhtml">2<sup><i>C</i></sup></span>)</td>
</tr>
<tr>
<td rowspan="2">Conditional branch</td>
<td>Branch on equal</td>
<td>beq $s,$t,C</td>
<td>if ($s == $t) go to PC+4+4*C</td>
<td>I</td>
<td><span class="texhtml">4<sub>16</sub></span></td>
<td>-</td>
<td>Goes to the instruction at the specified address if two registers are equal.<br />
000100ss sssttttt CCCCCCCC CCCCCCCC</td>
</tr>
<tr>
<td>Branch on not equal</td>
<td>bne $x,$y,C</td>
<td>if ($x&#160;!= $y) go to PC+4+4*C</td>
<td>I</td>
<td><span class="texhtml">5<sub>16</sub></span></td>
<td>-</td>
<td>Goes to the instruction at the specified address if two registers are <i>not</i> equal.</td>
</tr>
<tr>
<td rowspan="3">Unconditional jump</td>
<td>Jump</td>
<td>j C</td>
<td>PC = PC+4[31:28] . C*4</td>
<td>J</td>
<td><span class="texhtml">2<sub>16</sub></span></td>
<td>-</td>
<td>Unconditionally jumps to the instruction at the specified address.</td>
</tr>
<tr>
<td>Jump register</td>
<td>jr $x</td>
<td>goto address $x</td>
<td>R</td>
<td>0</td>
<td><span class="texhtml">8<sub>16</sub></span></td>
<td>Jumps to the address contained in the specified register</td>
</tr>
<tr>
<td>Jump and link</td>
<td>jal C</td>
<td>$31 = PC + 8; PC = PC+4[31:28] . C*4</td>
<td>J</td>
<td><span class="texhtml">3<sub>16</sub></span></td>
<td>-</td>
<td>For procedure call - used to call a subroutine, $31 holds the return address; returning from a subroutine is done by: jr $31. Return address is PC + 8, not PC + 4 due to the use of a branch delay slot which forces the instruction after the jump to be executed</td>
</tr>
</table>
<p>NOTE: In MIPS assembler code, the offset for branching instructions can be represented by a label elsewhere in the code.</p>
<p>NOTE: that there is no corresponding "load lower immediate" instruction; this can be done by using addi (add immediate, see below) or ori (or immediate) with the register $0 (whose value is always zero). For example, both <code>addi $1, $0, 100</code> and <code>ori $1, $0, 100</code> load the decimal value 100 into register $1.</p>
<p>NOTE: Subtracting an immediate can be done with adding the negation of that value as the immediate.</p>
<p><a name="Floating_point" id="Floating_point"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=MIPS_architecture&amp;action=edit&amp;section=12" title="Edit section: Floating point">edit</a>]</span> <span class="mw-headline">Floating point</span></h3>
<p>MIPS has 32 floating-point registers. Two registers are paired for double precision numbers. Odd numbered registers cannot be used for arithemetic or branch, just for data transfer of the right "half" of double precision register pairs.</p>
<table class="wikitable">
<tr>
<th>Category</th>
<th>Name</th>
<th>Instruction syntax</th>
<th>Meaning</th>
<th colspan="3">Format/opcode/funct</th>
<th>Notes/Encoding</th>
</tr>
<tr>
<td rowspan="8">Arithmetic</td>
<td>FP add single</td>
<td>add.s $x,$y,$z</td>
<td>$x = $y + $z</td>
<td></td>
<td></td>
<td></td>
<td>Floating-Point add (single precision)</td>
</tr>
<tr>
<td>FP subtract single</td>
<td>sub.s $x,$y,$z</td>
<td>$x = $y - $z</td>
<td></td>
<td></td>
<td></td>
<td>Floating-Point subtract (single precision)</td>
</tr>
<tr>
<td>FP multiply single</td>
<td>mul.s $x,$y,$z</td>
<td>$x = $y * $z</td>
<td></td>
<td></td>
<td></td>
<td>Floating-Point multiply (single precision)</td>
</tr>
<tr>
<td>FP divide single</td>
<td>div.s $x,$y,$z</td>
<td>$x = $y / $z</td>
<td></td>
<td></td>
<td></td>
<td>Floating-Point divide (single precision)</td>
</tr>
<tr>
<td>FP add double</td>
<td>add.d $x,$y,$z</td>
<td>$x = $y + $z</td>
<td></td>
<td></td>
<td></td>
<td>Floating-Point add (double precision)</td>
</tr>
<tr>
<td>FP subtract double</td>
<td>sub.d $x,$y,$z</td>
<td>$x = $y - $z</td>
<td></td>
<td></td>
<td></td>
<td>Floating-Point subtract (double precision)</td>
</tr>
<tr>
<td>FP multiply double</td>
<td>mul.d $x,$y,$z</td>
<td>$x = $y * $z</td>
<td></td>
<td></td>
<td></td>
<td>Floating-Point multiply (double precision)</td>
</tr>
<tr>
<td>FP divide double</td>
<td>div.d $x,$y,$z</td>
<td>$x = $y / $z</td>
<td></td>
<td></td>
<td></td>
<td>Floating-Point divide (double precision)</td>
</tr>
<tr>
<td rowspan="2">Data Transfer</td>
<td>Load word coprocessor</td>
<td>lwcZ $x,CONST ($y)</td>
<td>Coprocessor[Z].DataRegister[$x] = Memory[$y + CONST]</td>
<td>I</td>
<td></td>
<td></td>
<td>Loads the 4 byte word stored from: MEM[$2+CONST] into a Coprocessor data register. Sign extension.</td>
</tr>
<tr>
<td>Store word coprocessor</td>
<td>swcZ&#160;$x,CONST&#160;($y)</td>
<td>Memory[$y + CONST] = Coprocessor[Z].DataRegister[$x]</td>
<td>I</td>
<td></td>
<td></td>
<td>Stores the 4 byte word held by a Coprocessor data register into: MEM[$2+CONST]. Sign extension.</td>
</tr>
<tr>
<td rowspan="2">Logical</td>
<td>FP compare single (eq,ne,lt,le,gt,ge)</td>
<td>c.lt.s $f2,$f4</td>
<td>if ($f2 &lt; $f4) cond=1; else cond=0</td>
<td></td>
<td></td>
<td></td>
<td>Floating-point compare less than single precision</td>
</tr>
<tr>
<td>FP compare double (eq,ne,lt,le,gt,ge)</td>
<td>c.lt.d $f2,$f4</td>
<td>if ($f2 &lt; $f4) cond=1; else cond=0</td>
<td></td>
<td></td>
<td></td>
<td>Floating-point compare less than double precision</td>
</tr>
<tr>
<td rowspan="2">Branch</td>
<td>branch on FP true</td>
<td>bc1t 100</td>
<td>if (cond == 1) go to PC+4+100</td>
<td></td>
<td></td>
<td></td>
<td>PC relative branch if FP condition</td>
</tr>
<tr>
<td>branch on FP false</td>
<td>bc1f 100</td>
<td>if (cond == 0) go to PC+4+100</td>
<td></td>
<td></td>
<td></td>
<td>PC relative branch if not condition</td>
</tr>
</table>
<p><a name="Pseudo_instructions" id="Pseudo_instructions"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=MIPS_architecture&amp;action=edit&amp;section=13" title="Edit section: Pseudo instructions">edit</a>]</span> <span class="mw-headline">Pseudo instructions</span></h3>
<p>These instructions are accepted by the MIPS assembler, however they are not real instructions within the MIPS instruction set. Instead, the assembler translates them into sequences of real instructions.</p>
<table class="wikitable">
<tr>
<th>Name</th>
<th>instruction syntax</th>
<th>Real instruction translation</th>
<th>meaning</th>
</tr>
<tr>
<td>Load Address</td>
<td>la $1, LabelAddr</td>
<td>lui $1, LabelAddr[31:16]; ori $1,$1, LabelAddr[15:0]</td>
<td>$1 = Label Address</td>
</tr>
<tr>
<td>Load Immediate</td>
<td>li $1, IMMED[31:0]</td>
<td>lui $1, IMMED[31:16]; ori $1,$1, IMMED[15:0]</td>
<td>$1 = 32 bit Immediate value</td>
</tr>
<tr>
<td>Branch if greater than</td>
<td>bgt $rs,$rt,Label</td>
<td>slt $at,$rt,$rs; bne $at,$zero,Label</td>
<td>if(R[rs]&gt;R[rt]) PC=Label</td>
</tr>
<tr>
<td>Branch if less than</td>
<td>blt $rs,$rt,Label</td>
<td>slt $at,$rs,$rt; bne $at,$zero,Label</td>
<td>if(R[rs]&lt;R[rt]) PC=Label</td>
</tr>
<tr>
<td>Branch if greater than or equal</td>
<td>bge</td>
<td>etc</td>
<td>if(R[rs]&gt;=R[rt]) PC=Label</td>
</tr>
<tr>
<td>branch if less than or equal</td>
<td>ble</td>
<td></td>
<td>if(R[rs]&lt;=R[rt]) PC=Label</td>
</tr>
<tr>
<td>branch if greater than unsigned</td>
<td>bgtu</td>
<td></td>
<td>if(R[rs]=&gt;R[rt]) PC=Label</td>
</tr>
<tr>
<td>branch if greater than zero</td>
<td>bgtz</td>
<td></td>
<td>if(R[rs]&gt;0) PC=Label</td>
</tr>
</table>
<p><a name="Some_other_important_instructions" id="Some_other_important_instructions"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=MIPS_architecture&amp;action=edit&amp;section=14" title="Edit section: Some other important instructions">edit</a>]</span> <span class="mw-headline">Some other important instructions</span></h3>
<ul>
<li><a href="/wiki/NOP" title="NOP">NOP</a> (no operation) (machine code 0x00000000, interpreted by CPU as sll $0,$0,0)</li>
<li>break (breaks the program, used by debuggers)</li>
<li>syscall (used for system calls to the operating system)</li>
<li><b>a full set of Floating point instructions for both single precision and double precision operands</b></li>
</ul>
<p><a name="Compiler_Register_Usage" id="Compiler_Register_Usage"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=MIPS_architecture&amp;action=edit&amp;section=15" title="Edit section: Compiler Register Usage">edit</a>]</span> <span class="mw-headline">Compiler Register Usage</span></h2>
<div class="rellink noprint relarticle mainarticle">Main article: <a href="/wiki/Calling_convention#MIPS" title="Calling convention">calling convention#MIPS</a></div>
<p>The hardware architecture specifies that:</p>
<ul>
<li>General purpose register $0 always returns a value of 0 .</li>
<li>General purpose register $31 is used as the link register for jump and link instructions.</li>
<li>HI and LO are used to access the multiplier/divider results, accessed by the mfhi (move from high) and mflo commands.</li>
</ul>
<p>These are the only hardware restrictions on the usage of the general purpose registers.</p>
<p>The various MIPS tool-chains implement specific calling conventions that further restrict how the registers are used. These <a href="/wiki/Calling_convention" title="Calling convention">calling conventions</a> are totally maintained by the tool-chain software and are not required by the hardware.</p>
<table class="wikitable">
<caption><b>Registers</b></caption>
<tr>
<th>Name</th>
<th>Number</th>
<th>Use</th>
<th>Callee must preserve?</th>
</tr>
<tr>
<th>$zero</th>
<td>$0</td>
<td>constant 0</td>
<td>N/A</td>
</tr>
<tr>
<th>$at</th>
<td>$1</td>
<td>assembler temporary</td>
<td>no</td>
</tr>
<tr>
<th>$v0–$v1</th>
<td>$2–$3</td>
<td>Values for function returns and expression evaluation</td>
<td>no</td>
</tr>
<tr>
<th>$a0–$a3</th>
<td>$4–$7</td>
<td>function arguments</td>
<td>no</td>
</tr>
<tr>
<th>$t0–$t7</th>
<td>$8–$15</td>
<td>temporaries</td>
<td>no</td>
</tr>
<tr>
<th>$s0–$s7</th>
<td>$16–$23</td>
<td>saved temporaries</td>
<td><b>yes</b></td>
</tr>
<tr>
<th>$t8–$t9</th>
<td>$24–$25</td>
<td>temporaries</td>
<td>no</td>
</tr>
<tr>
<th>$k0–$k1</th>
<td>$26–$27</td>
<td>reserved for OS kernel</td>
<td>no</td>
</tr>
<tr>
<th>$gp</th>
<td>$28</td>
<td>global pointer</td>
<td><b>yes</b></td>
</tr>
<tr>
<th>$sp</th>
<td>$29</td>
<td><a href="/wiki/Stack-based_memory_allocation" title="Stack-based memory allocation">stack pointer</a></td>
<td><b>yes</b></td>
</tr>
<tr>
<th>$fp</th>
<td>$30</td>
<td><a href="/wiki/Frame_pointer" title="Frame pointer" class="mw-redirect">frame pointer</a></td>
<td><b>yes</b></td>
</tr>
<tr>
<th>$ra</th>
<td>$31</td>
<td><a href="/wiki/Return_statement" title="Return statement">return address</a></td>
<td>N/A</td>
</tr>
</table>
<p>Registers that are preserved across a call are registers that (by convention) will not be changed by a system call or procedure (function) call. For example, $s-registers must be saved to the stack by a procedure that needs to use them, and $sp and $fp are always incremented by constants, and decremented back after the procedure is done with them (and the memory they point to). By contrast, $ra is changed automatically by any normal function call (ones that use jal), and $t-registers must be saved by the program before any procedure call (if the program needs the values inside them after the call).</p>
<p><a name="Simulators" id="Simulators"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=MIPS_architecture&amp;action=edit&amp;section=16" title="Edit section: Simulators">edit</a>]</span> <span class="mw-headline">Simulators</span></h2>
<p>Open Virtual Platforms (OVP) <a href="http://www.OVPworld.org" class="external autonumber" title="http://www.OVPworld.org" rel="nofollow">[1]</a> includes the freely available simulator <a href="/wiki/OVPsim" title="OVPsim">OVPsim</a>, a library of models of processors, peripherals and platforms, and APIs which enable users to develop their own models. The models in the library are open source, written in C, and include the MIPS 4K, 24K and 34K cores. These models are created and maintained by Imperas <a href="http://www.imperas.com" class="external autonumber" title="http://www.imperas.com" rel="nofollow">[2]</a> and in partnership with MIPS Technologies have been tested and assigned the MIPS-Verified(tm) mark. The OVP site also includes models of ARM, Tensilica and OpenCores/openRisc processors. Sample MIPS-based platforms include both bare metal environments and platforms for booting unmodified Linux binary images. These platforms/emulators are available as source or binaries and are fast, free, and easy to use. <a href="/wiki/OVPsim" title="OVPsim">OVPsim</a> is developed and maintained by Imperas and is very fast (100s of million instructions per second), and built to handle multicore architectures. To download the MIPS <a href="/wiki/OVPsim" title="OVPsim">OVPsim</a> simulators/emulators visit <a href="http://www.OVPworld.org/mips" class="external autonumber" title="http://www.OVPworld.org/mips" rel="nofollow">[3]</a>.</p>
<p>There is a freely available "MIPS32 Simulator" (earlier versions simulated only the R2000/R3000) called <a href="/wiki/SPIM" title="SPIM">SPIM</a> for several operating systems (specifically Unix or GNU/Linux; Mac OS X; MS Windows 95, 98, NT, 2000, XP; and DOS) which is good for learning MIPS assembly language programming and the general concepts of RISC-assembly language programming: <a href="http://www.cs.wisc.edu/~larus/spim.html" class="external free" title="http://www.cs.wisc.edu/~larus/spim.html" rel="nofollow">http://www.cs.wisc.edu/~larus/spim.html</a></p>
<p>EduMIPS64 is a GPL graphical cross-platform MIPS64 CPU simulator, written in Java/Swing. It supports a wide subset of the MIPS64 ISA and allows the user to graphically see what happens in the pipeline when an assembly program is run by the CPU. It has educational purposes and is used in some<sup class="noprint Inline-Template"><span title="The material in the vicinity of this tag may use weasel words or too-vague attribution.&#160;since March 2009" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Avoid_weasel_words" title="Wikipedia:Avoid weasel words">who?</a></i>]</span></sup> Computer Architecture courses in Universities around the world. More info at <a href="http://www.edumips.org" class="external free" title="http://www.edumips.org" rel="nofollow">http://www.edumips.org</a></p>
<p>MARS is another GUI based MIPS emulator designed for use in education, specifically for use with Hennessy's Computer Organization and Design. More information is available at <a href="http://courses.missouristate.edu/KenVollmar/MARS/" class="external free" title="http://courses.missouristate.edu/KenVollmar/MARS/" rel="nofollow">http://courses.missouristate.edu/KenVollmar/MARS/</a></p>
<p>More advanced free MIPS emulators are available from the <a href="/wiki/GXemul" title="GXemul">GXemul</a> (formerly known as the mips64emul project) and <a href="/wiki/QEMU" title="QEMU">QEMU</a> projects, which emulate not only the various MIPS III and higher microprocessors (from the R4000 through the R10000), but also entire computer systems which use the microprocessors. For example, GXemul can emulate both a <a href="/wiki/DECstation" title="DECstation">DECstation</a> with a MIPS R4400 CPU (and boot to <a href="/wiki/Ultrix" title="Ultrix">Ultrix</a>), and an <a href="/wiki/SGI_O2" title="SGI O2">SGI O2</a> with a MIPS R10000 CPU (although the ability to boot <a href="/wiki/Irix" title="Irix" class="mw-redirect">Irix</a> is limited), among others, as well as the various <a href="/wiki/Framebuffer" title="Framebuffer">framebuffers</a>, <a href="/wiki/SCSI" title="SCSI">SCSI</a> controllers, and the like which comprise those systems.</p>
<p>Commercial simulators are available especially for the embedded use of MIPS processors, for example Virtutech <a href="/wiki/Simics" title="Simics">Simics</a> (MIPS 4Kc and 5Kc, PMC RM9000, QED RM7000), VaST Systems (R3000, R4000), and <a href="/wiki/CoWare" title="CoWare" class="mw-redirect">CoWare</a> (the MIPS4KE, MIPS24K, MIPS25Kf and MIPS34K).</p>
<p><a name="Trivia" id="Trivia"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=MIPS_architecture&amp;action=edit&amp;section=17" title="Edit section: Trivia">edit</a>]</span> <span class="mw-headline">Trivia</span></h2>
<ul>
<li>"Mips" the rabbit in <a href="/wiki/Super_Mario_64" title="Super Mario 64">Super Mario 64</a> is named after the technology, which was used by the <a href="/wiki/Nintendo_64" title="Nintendo 64">Nintendo 64</a>.</li>
</ul>
<p><a name="Notes" id="Notes"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=MIPS_architecture&amp;action=edit&amp;section=18" title="Edit section: Notes">edit</a>]</span> <span class="mw-headline">Notes</span></h2>
<div class="references-small">
<ol class="references">
<li id="cite_note-0"><b><a href="#cite_ref-0" title="">^</a></b> <a href="/wiki/Morgan_Kaufmann_Publishers" title="Morgan Kaufmann Publishers">Morgan Kaufmann Publishers</a>, <i>Computer Organization and Design</i>, <a href="/wiki/David_A._Patterson" title="David A. Patterson" class="mw-redirect">David A. Patterson</a> &amp; <a href="/wiki/John_L._Hennessy" title="John L. Hennessy">John L. Hennessy</a>, Edition 3, <a href="/wiki/Special:BookSources/1558606041" class="internal">ISBN 1-55860-604-1</a>, page 63</li>
<li id="cite_note-1"><b><a href="#cite_ref-1" title="">^</a></b> Jochen Liedtke(1995). On micro kernel construction. 15th Symposium on Operating Systems Principles, Copper Mountain Resort, Colorado.</li>
<li id="cite_note-2"><b><a href="#cite_ref-2" title="">^</a></b> <a href="http://www.sgi.com/support/mips_irix.html" class="external text" title="http://www.sgi.com/support/mips_irix.html" rel="nofollow">SGI announcing the end of MIPS</a></li>
<li id="cite_note-3"><b><a href="#cite_ref-3" title="">^</a></b> <a href="http://www.nec.co.jp/press/en/9801/2002.html" class="external text" title="http://www.nec.co.jp/press/en/9801/2002.html" rel="nofollow">NEC Offers Two High Cost Performance 64-bit RISC Microprocessors</a></li>
<li id="cite_note-uidaho-4">^ <a href="#cite_ref-uidaho_4-0" title=""><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-uidaho_4-1" title=""><sup><i><b>b</b></i></sup></a> <a href="http://www.mrc.uidaho.edu/mrc/people/jff/digital/MIPSir.html" class="external text" title="http://www.mrc.uidaho.edu/mrc/people/jff/digital/MIPSir.html" rel="nofollow">MIPS R3000 Instruction Set Summary</a></li>
<li id="cite_note-5"><b><a href="#cite_ref-5" title="">^</a></b> <a href="http://www.xs4all.nl/~vhouten/mipsel/r3000-isa.html" class="external text" title="http://www.xs4all.nl/~vhouten/mipsel/r3000-isa.html" rel="nofollow">MIPS Instruction Reference</a></li>
</ol>
</div>
<p><a name="Further_reading" id="Further_reading"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=MIPS_architecture&amp;action=edit&amp;section=19" title="Edit section: Further reading">edit</a>]</span> <span class="mw-headline">Further reading</span></h2>
<ul>
<li><cite style="font-style:normal" class="book" id="CITEREFPatterson.5B.5BJohn_L._Hennessy.5D.5D"><a href="/wiki/David_A._Patterson_(scientist)" title="David A. Patterson (scientist)" class="mw-redirect">Patterson, David A</a>; <a href="/wiki/John_L._Hennessy" title="John L. Hennessy">John L. Hennessy</a>. <i>Computer Organization and Design: The Hardware/Software Interface</i>. <a href="/wiki/Morgan_Kaufmann_Publishers" title="Morgan Kaufmann Publishers">Morgan Kaufmann Publishers</a>. <a href="/wiki/Special:BookSources/1558606041" class="internal">ISBN 1-55860-604-1</a>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Computer+Organization+and+Design%3A+The+Hardware%2FSoftware+Interface&amp;rft.aulast=Patterson&amp;rft.aufirst=David+A&amp;rft.au=Patterson%2C+David+A&amp;rft.au=%5B%5BJohn+L.+Hennessy%5D%5D&amp;rft.pub=%5B%5BMorgan+Kaufmann+Publishers%5D%5D&amp;rft.isbn=1-55860-604-1&amp;rfr_id=info:sid/en.wikipedia.org:MIPS_architecture"><span style="display: none;">&#160;</span></span></li>
<li><cite style="font-style:normal" class="book" id="CITEREFSweetman">Sweetman, Dominic. <i>See MIPS Run, 2nd edition</i>. Morgan Kaufmann Publishers. <a href="/wiki/Special:BookSources/0120884216" class="internal">ISBN 0-12088-421-6</a>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=See+MIPS+Run%2C+2nd+edition&amp;rft.aulast=Sweetman&amp;rft.aufirst=Dominic&amp;rft.au=Sweetman%2C+Dominic&amp;rft.pub=Morgan+Kaufmann+Publishers&amp;rft.isbn=0-12088-421-6&amp;rfr_id=info:sid/en.wikipedia.org:MIPS_architecture"><span style="display: none;">&#160;</span></span></li>
<li><cite style="font-style:normal" class="book" id="CITEREFSweetman">Sweetman, Dominic. <i>See MIPS Run</i>. Morgan Kaufmann Publishers. <a href="/wiki/Special:BookSources/1558604103" class="internal">ISBN 1-55860-410-3</a>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=See+MIPS+Run&amp;rft.aulast=Sweetman&amp;rft.aufirst=Dominic&amp;rft.au=Sweetman%2C+Dominic&amp;rft.pub=Morgan+Kaufmann+Publishers&amp;rft.isbn=1-55860-410-3&amp;rfr_id=info:sid/en.wikipedia.org:MIPS_architecture"><span style="display: none;">&#160;</span></span></li>
<li><cite style="font-style:normal" class="book" id="CITEREFFarquharPhilip_Bunce">Farquhar, Erin; Philip Bunce. <i>MIPS Programmer's Handbook</i>. Morgan Kaufmann Publishers. <a href="/wiki/Special:BookSources/1558602976" class="internal">ISBN 1-55860-297-6</a>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=MIPS+Programmer%27s+Handbook&amp;rft.aulast=Farquhar&amp;rft.aufirst=Erin&amp;rft.au=Farquhar%2C+Erin&amp;rft.au=Philip+Bunce&amp;rft.pub=Morgan+Kaufmann+Publishers&amp;rft.isbn=1-55860-297-6&amp;rfr_id=info:sid/en.wikipedia.org:MIPS_architecture"><span style="display: none;">&#160;</span></span></li>
</ul>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=MIPS_architecture&amp;action=edit&amp;section=20" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<ul>
<li><a href="/wiki/DLX" title="DLX">DLX</a>, a very similar architecture designed by <a href="/wiki/John_L._Hennessy" title="John L. Hennessy">John L. Hennessy</a> (creator of MIPS) for teaching purposes</li>
<li><a href="/wiki/Loongson" title="Loongson">Loongson</a>, a MIPS-like processor architecture developed at Chinese Academy of Sciences</li>
<li><a href="/wiki/MIPS-X" title="MIPS-X">MIPS-X</a>, developed as a follow-on project to the MIPS architecture</li>
<li><a href="/wiki/Mongoose-V" title="Mongoose-V">Mongoose-V</a>, a radiation hardened version of the MIPS R3000 used in spacecrafts</li>
<li><a href="/wiki/SPIM" title="SPIM">SPIM</a>. is a MIPS processor simulator.</li>
</ul>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=MIPS_architecture&amp;action=edit&amp;section=21" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<table class="metadata plainlinks mbox-small" style="border:1px solid #aaa; background-color:#f9f9f9;">
<tr>
<td class="mbox-image"><a href="http://en.wikibooks.org/wiki/Special:Search/MIPS_architecture" title="b:Special:Search/MIPS architecture"><img alt="Sister project" src="http://upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/40px-Wikibooks-logo-en-noslogan.svg.png" width="40" height="40" border="0" /></a></td>
<td class="mbox-text" style=""><a href="/wiki/Wikibooks" title="Wikibooks">Wikibooks</a> has a book on the topic of
<div style="margin-left:10px;"><i><b><a href="http://en.wikibooks.org/wiki/MIPS_Assembly" class="extiw" title="wikibooks:MIPS Assembly">MIPS Assembly</a></b></i></div>
</td>
</tr>
</table>
<ul>
<li><a href="http://www.langens.eu/tim/ea/mips_en.php" class="external text" title="http://www.langens.eu/tim/ea/mips_en.php" rel="nofollow">Full overview of MIPS architecture.</a></li>
<li><a href="http://www.cs.wisc.edu/~larus/HP_AppA.pdf" class="external text" title="http://www.cs.wisc.edu/~larus/HP_AppA.pdf" rel="nofollow">Patterson &amp; Hennessy - Appendix A (PDF)</a></li>
<li><a href="http://logos.cs.uic.edu/366/notes/MIPS%20Quick%20Tutorial.htm" class="external text" title="http://logos.cs.uic.edu/366/notes/MIPS%20Quick%20Tutorial.htm" rel="nofollow">Summary of MIPS assembly language</a></li>
<li><a href="http://www.mrc.uidaho.edu/mrc/people/jff/digital/MIPSir.html" class="external text" title="http://www.mrc.uidaho.edu/mrc/people/jff/digital/MIPSir.html" rel="nofollow">MIPS Instruction reference</a></li>
<li><a href="http://www.cpu-collection.de/?tn=1&amp;l0=cl&amp;l1=MIPS%20Rx000" class="external text" title="http://www.cpu-collection.de/?tn=1&amp;l0=cl&amp;l1=MIPS%20Rx000" rel="nofollow">MIPS processor images and descriptions at cpu-collection.de</a></li>
<li><a href="http://chortle.ccsu.edu/AssemblyTutorial/TutorialContents.html" class="external text" title="http://chortle.ccsu.edu/AssemblyTutorial/TutorialContents.html" rel="nofollow">A programmed introduction to MIPS assembly</a></li>
<li><a href="http://www.cs.umd.edu/class/spring2003/cmsc311/Notes/Mips/bitshift.html" class="external text" title="http://www.cs.umd.edu/class/spring2003/cmsc311/Notes/Mips/bitshift.html" rel="nofollow">mips bitshift operators</a></li>
<li><a href="http://www.it.uu.se/edu/course/homepage/datsystDV/ht04/Project/tools/machinedata/4KcProgMan.pdf" class="external text" title="http://www.it.uu.se/edu/course/homepage/datsystDV/ht04/Project/tools/machinedata/4KcProgMan.pdf" rel="nofollow">MIPS software user's manual</a></li>
</ul>
<table class="navbox" cellspacing="0" style=";">
<tr>
<td style="padding:2px;">
<table cellspacing="0" class="nowraplinks collapsible autocollapse" style="width:100%;background:transparent;color:inherit;;">
<tr>
<th style=";" colspan="2" class="navbox-title">
<div style="float:left; width:6em;text-align:left;">
<div class="noprint plainlinksneverexpand navbar" style="background:none; padding:0; font-weight:normal;;;border:none;; font-size:xx-small;"><a href="/wiki/Template:RISC-based_processor_architectures" title="Template:RISC-based processor architectures"><span title="View this template" style=";;border:none;">v</span></a>&#160;<span style="font-size:80%;">•</span>&#160;<a href="/wiki/Template_talk:RISC-based_processor_architectures" title="Template talk:RISC-based processor architectures"><span title="Discussion about this template" style=";;border:none;">d</span></a>&#160;<span style="font-size:80%;">•</span>&#160;<a href="http://en.wikipedia.org/w/index.php?title=Template:RISC-based_processor_architectures&amp;action=edit" class="external text" title="http://en.wikipedia.org/w/index.php?title=Template:RISC-based_processor_architectures&amp;action=edit" rel="nofollow"><span title="Edit this template" style=";;border:none;;">e</span></a></div>
</div>
<span style="font-size:110%;"><a href="/wiki/Reduced_instruction_set_computer" title="Reduced instruction set computer">RISC</a>-based processor architectures</span></th>
</tr>
<tr style="height:2px;">
<td></td>
</tr>
<tr>
<td colspan="2" style="width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<div style="padding:0em 0.25em"><a href="/wiki/Nios_II" title="Nios II">Altera Nios II</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/AMD_29000" title="AMD 29000" class="mw-redirect">AMD 29000</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Apollo_PRISM" title="Apollo PRISM">Apollo PRISM</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Blackfin" title="Blackfin">Analog Devices Blackfin</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/ARM_architecture" title="ARM architecture">ARM</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Atmel_AVR" title="Atmel AVR">Atmel AVR</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/AVR32" title="AVR32">Atmel AVR32</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/XAP_processor" title="XAP processor">Cambridge Consultants XAP</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/DEC_Alpha" title="DEC Alpha">DEC Alpha</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/DLX" title="DLX">DLX</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Clipper_architecture" title="Clipper architecture">Fairchild Clipper</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/PA-RISC_family" title="PA-RISC family" class="mw-redirect">HP PA-RISC</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Intel_i960" title="Intel i960">Intel i960</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/M32R" title="M32R">M32R</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/LatticeMico32" title="LatticeMico32">LatticeMico32</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/PIC_micro" title="PIC micro" class="mw-redirect">Microchip PIC</a><span style="font-weight:bold;">&#160;·</span> <strong class="selflink">MIPS</strong><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Motorola_88000" title="Motorola 88000">Motorola 88000</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Power_Architecture" title="Power Architecture">Power</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/SPARC" title="SPARC">SPARC</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/SuperH" title="SuperH">Renesas SuperH</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/MicroBlaze" title="MicroBlaze">Xilinx MicroBlaze</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/PicoBlaze" title="PicoBlaze">Xilinx Picoblaze</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/XCore" title="XCore" class="mw-redirect">XMOS XCore</a></div>
</td>
</tr>
</table>
</td>
</tr>
</table>


<!-- 
NewPP limit report
Preprocessor node count: 2765/1000000
Post-expand include size: 25728/2048000 bytes
Template argument size: 8043/2048000 bytes
Expensive parser function count: 2/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:20170-0!1!0!default!!en!2 and timestamp 20090404202559 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/MIPS_architecture">http://en.wikipedia.org/wiki/MIPS_architecture</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Instruction_processing" title="Category:Instruction processing">Instruction processing</a></span> | <span dir='ltr'><a href="/wiki/Category:Computer_architecture" title="Category:Computer architecture">Computer architecture</a></span> | <span dir='ltr'><a href="/wiki/Category:Microprocessors" title="Category:Microprocessors">Microprocessors</a></span> | <span dir='ltr'><a href="/wiki/Category:Embedded_microprocessors" title="Category:Embedded microprocessors">Embedded microprocessors</a></span> | <span dir='ltr'><a href="/wiki/Category:MIPS_Technologies" title="Category:MIPS Technologies">MIPS Technologies</a></span></div><div id="mw-hidden-catlinks" class="mw-hidden-cats-hidden">Hidden categories:&#32;<span dir='ltr'><a href="/wiki/Category:All_articles_with_unsourced_statements" title="Category:All articles with unsourced statements">All articles with unsourced statements</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_unsourced_statements_since_February_2007" title="Category:Articles with unsourced statements since February 2007">Articles with unsourced statements since February 2007</a></span> | <span dir='ltr'><a href="/wiki/Category:All_pages_needing_cleanup" title="Category:All pages needing cleanup">All pages needing cleanup</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_specifically-marked_weasel-worded_phrases_since_March_2009" title="Category:Articles with specifically-marked weasel-worded phrases since March 2009">Articles with specifically-marked weasel-worded phrases since March 2009</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/MIPS_architecture" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:MIPS_architecture" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=MIPS_architecture&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=MIPS_architecture&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=MIPS_architecture" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/MIPS_architecture" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/MIPS_architecture" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=MIPS_architecture&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=MIPS_architecture&amp;oldid=281763516" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=MIPS_architecture&amp;id=281763516">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-cs"><a href="http://cs.wikipedia.org/wiki/Architektura_MIPS">Česky</a></li>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/MIPS-Architektur">Deutsch</a></li>
				<li class="interwiki-es"><a href="http://es.wikipedia.org/wiki/MIPS_(procesador)">Español</a></li>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Architecture_MIPS">Français</a></li>
				<li class="interwiki-ko"><a href="http://ko.wikipedia.org/wiki/MIPS_%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98">한국어</a></li>
				<li class="interwiki-it"><a href="http://it.wikipedia.org/wiki/Architettura_MIPS">Italiano</a></li>
				<li class="interwiki-lv"><a href="http://lv.wikipedia.org/wiki/MIPS_arhitekt%C5%ABra">Latviešu</a></li>
				<li class="interwiki-nl"><a href="http://nl.wikipedia.org/wiki/MIPS_(CPU)">Nederlands</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/MIPS%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3">日本語</a></li>
				<li class="interwiki-pl"><a href="http://pl.wikipedia.org/wiki/Architektura_MIPS">Polski</a></li>
				<li class="interwiki-pt"><a href="http://pt.wikipedia.org/wiki/Arquitetura_MIPS">Português</a></li>
				<li class="interwiki-ru"><a href="http://ru.wikipedia.org/wiki/MIPS_(%D0%B0%D1%80%D1%85%D0%B8%D1%82%D0%B5%D0%BA%D1%82%D1%83%D1%80%D0%B0)">Русский</a></li>
				<li class="interwiki-fi"><a href="http://fi.wikipedia.org/wiki/MIPS-arkkitehtuuri">Suomi</a></li>
				<li class="interwiki-sv"><a href="http://sv.wikipedia.org/wiki/MIPS_(processorarkitektur)">Svenska</a></li>
				<li class="interwiki-tr"><a href="http://tr.wikipedia.org/wiki/MIPS_mimarisi">Türkçe</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 4 April 2009, at 20:25.</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv158 in 0.325 secs. --></body></html>
