<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Berkeley sockets,Articles with unsourced statements since February 2009,AT&amp;T,Abstraction (computer science),Application programming interface,BSD,Berkeley Software Distribution,C (programming language),Computer network,Connectionless,DCCP" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Berkeley_sockets&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Berkeley_sockets&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Berkeley sockets - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Berkeley_sockets";
		var wgTitle = "Berkeley sockets";
		var wgAction = "view";
		var wgArticleId = "85068";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 279230214;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
<style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-c .de1, .source-c .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-c  {}
.source-c .head {}
.source-c .foot {}
.source-c .imp {font-weight: bold; color: red;}
.source-c .ln-xtra {color: #cc0; background-color: #ffc;}
.source-c li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-c li.li2 {font-weight: bold;}
.source-c .kw1 {color: #b1b100;}
.source-c .kw2 {color: #000000; font-weight: bold;}
.source-c .kw3 {color: #000066;}
.source-c .kw4 {color: #993333;}
.source-c .co1 {color: #808080; font-style: italic;}
.source-c .co2 {color: #339933;}
.source-c .coMULTI {color: #808080; font-style: italic;}
.source-c .es0 {color: #000099; font-weight: bold;}
.source-c .br0 {color: #66cc66;}
.source-c .st0 {color: #ff0000;}
.source-c .nu0 {color: #cc66cc;}
.source-c .me1 {color: #202020;}
.source-c .me2 {color: #202020;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style>		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Berkeley_sockets skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Berkeley sockets</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<p>The <b>Berkeley sockets</b> <a href="/wiki/Application_programming_interface" title="Application programming interface">application programming interface</a> (API) comprises a <a href="/wiki/Library_(computing)" title="Library (computing)">library</a> for developing applications in the <a href="/wiki/C_(programming_language)" title="C (programming language)">C programming language</a> that perform <a href="/wiki/Inter-process_communication" title="Inter-process communication">inter-process communication</a>, most commonly across a <a href="/wiki/Computer_network" title="Computer network">computer network</a>.</p>
<p>Berkeley sockets (also known as the <a href="/wiki/Berkeley_Software_Distribution" title="Berkeley Software Distribution">BSD</a> socket API) originated with the 4.2BSD <a href="/wiki/Unix" title="Unix">Unix</a> <a href="/wiki/Operating_system" title="Operating system">operating system</a> (released in 1983) as an API. Only in 1989, however, could <a href="/wiki/University_of_California,_Berkeley" title="University of California, Berkeley">UC Berkeley</a> release versions of its operating system and networking library free from the licensing constraints of <a href="/wiki/AT%26T" title="AT&amp;T">AT&amp;T</a>'s copyright-protected Unix.</p>
<p>The Berkeley socket API forms the <i><a href="/wiki/De_facto" title="De facto">de facto</a></i> standard <a href="/wiki/Abstraction_(computer_science)" title="Abstraction (computer science)">abstraction</a> for <a href="/wiki/Network_socket" title="Network socket" class="mw-redirect">network sockets</a><sup class="noprint Template-Fact"><span title="This claim needs references to reliable sources&#160;since February 2009" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</span></sup>. Most other programming languages use an interface similar to the C API<sup class="noprint Template-Fact"><span title="This claim needs references to reliable sources&#160;since February 2009" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</span></sup>.</p>
<p>The <a href="/wiki/Streams_(networking_API)" title="Streams (networking API)" class="mw-redirect">STREAMS</a>-based <a href="/wiki/Transport_Layer_Interface" title="Transport Layer Interface">Transport Layer Interface</a> (TLI) API offers an alternative to the socket API. However, the Berkeley socket API predominates convincingly in popularity and in the number of implementations.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Berkeley_socket_interface"><span class="tocnumber">1</span> <span class="toctext">Berkeley socket interface</span></a></li>
<li class="toclevel-1"><a href="#Socket_API_functions"><span class="tocnumber">2</span> <span class="toctext">Socket API functions</span></a>
<ul>
<li class="toclevel-2"><a href="#socket.28.29"><span class="tocnumber">2.1</span> <span class="toctext">socket()</span></a></li>
<li class="toclevel-2"><a href="#bind.28.29"><span class="tocnumber">2.2</span> <span class="toctext">bind()</span></a></li>
<li class="toclevel-2"><a href="#listen.28.29"><span class="tocnumber">2.3</span> <span class="toctext">listen()</span></a></li>
<li class="toclevel-2"><a href="#accept.28.29"><span class="tocnumber">2.4</span> <span class="toctext">accept()</span></a></li>
<li class="toclevel-2"><a href="#connect.28.29"><span class="tocnumber">2.5</span> <span class="toctext">connect()</span></a></li>
<li class="toclevel-2"><a href="#gethostbyname.28.29_and_gethostbyaddr.28.29"><span class="tocnumber">2.6</span> <span class="toctext">gethostbyname() and gethostbyaddr()</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Protocol_and_address_families"><span class="tocnumber">3</span> <span class="toctext">Protocol and address families</span></a></li>
<li class="toclevel-1"><a href="#Options_for_sockets"><span class="tocnumber">4</span> <span class="toctext">Options for sockets</span></a></li>
<li class="toclevel-1"><a href="#Blocking_vs._non-blocking_mode"><span class="tocnumber">5</span> <span class="toctext">Blocking vs. non-blocking mode</span></a></li>
<li class="toclevel-1"><a href="#Cleaning_up"><span class="tocnumber">6</span> <span class="toctext">Cleaning up</span></a></li>
<li class="toclevel-1"><a href="#Header_files"><span class="tocnumber">7</span> <span class="toctext">Header files</span></a></li>
<li class="toclevel-1"><a href="#Client-server_example_using_TCP"><span class="tocnumber">8</span> <span class="toctext">Client-server example using TCP</span></a>
<ul>
<li class="toclevel-2"><a href="#Server"><span class="tocnumber">8.1</span> <span class="toctext">Server</span></a></li>
<li class="toclevel-2"><a href="#Client"><span class="tocnumber">8.2</span> <span class="toctext">Client</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Client-server_example_using_UDP"><span class="tocnumber">9</span> <span class="toctext">Client-server example using UDP</span></a>
<ul>
<li class="toclevel-2"><a href="#Server_2"><span class="tocnumber">9.1</span> <span class="toctext">Server</span></a></li>
<li class="toclevel-2"><a href="#Client_2"><span class="tocnumber">9.2</span> <span class="toctext">Client</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">10</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">11</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">12</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Berkeley_socket_interface" id="Berkeley_socket_interface"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Berkeley_sockets&amp;action=edit&amp;section=1" title="Edit section: Berkeley socket interface">edit</a>]</span> <span class="mw-headline">Berkeley socket interface</span></h2>
<p>The <b>Berkeley socket interface</b>, an <a href="/wiki/Application_programming_interface" title="Application programming interface">API</a>, allows communications between <a href="/wiki/Server_(computing)" title="Server (computing)">hosts</a> or between processes on one computer, using the concept of an <i><a href="/wiki/Internet_socket" title="Internet socket">Internet socket</a></i>. It can work with many different <a href="/wiki/Input/output" title="Input/output">I/O</a> devices and <a href="/wiki/Device_driver" title="Device driver">drivers</a>, although support for these depends on the <a href="/wiki/Operating_system" title="Operating system">operating-system</a> implementation. This interface implementation is implicit for <a href="/wiki/Internet_protocol_suite" title="Internet protocol suite" class="mw-redirect">TCP/IP</a>, and it is therefore one of the fundamental technologies underlying the <a href="/wiki/Internet" title="Internet">Internet</a>. It was first developed at the <a href="/wiki/University_of_California,_Berkeley" title="University of California, Berkeley">University of California, Berkeley</a> for use on Unix systems. All modern operating systems now have some implementation of the Berkeley socket interface, as it became the standard interface for connecting to the Internet.</p>
<p>Socket interfaces are accessible at three different levels, most powerfully and fundamentally at the <a href="/wiki/Raw_socket" title="Raw socket">raw socket</a> level. Very few applications need the degree of control over outgoing communications that this provides, so raw sockets support was intended to be available only on computers used for developing Internet-related technologies. In recent years, most operating systems have implemented support for it anyway, including <a href="/wiki/Microsoft_Windows" title="Microsoft Windows">Windows XP</a>.</p>
<p><a name="Socket_API_functions" id="Socket_API_functions"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Berkeley_sockets&amp;action=edit&amp;section=2" title="Edit section: Socket API functions">edit</a>]</span> <span class="mw-headline">Socket API functions</span></h2>
<p>This list is a summary of functions or methods provided by the Berkeley sockets API library:</p>
<ul>
<li><code>socket()</code> creates a new socket of a certain socket type, identified by an integer number, and allocates system resources to it.</li>
<li><code>bind()</code> is typically used on the server side, and associates a socket with a socket address structure, i.e. a specified local port number and IP address.</li>
<li><code>listen()</code> is used on the server side, and causes a bound TCP socket to enter listening state.</li>
<li><code>connect()</code> is used on the client side, and assigns a free local port number to a socket. In case of a TCP socket, it causes an attempt to establish a new TCP connection.</li>
<li><code>accept()</code> is used on the server side. It accepts a received incoming attempt to create a new TCP connection from the remote client, and creates a new socket associated with the socket address pair of this connection.</li>
<li><code>send()</code> and <code>recv()</code>, or <code>write()</code> and <code>read()</code>, or <code>recvfrom()</code> and <code>sendto()</code>, are used for sending and receiving data to/from a remote socket.</li>
<li><code>close()</code> causes the system to release resources allocated to a socket. In case of TCP, the connection is terminated.</li>
<li><code>gethostbyname()</code> and <code>gethostbyaddr()</code> are used to resolve host names and addresses.</li>
</ul>
<p>Further details are given below.</p>
<p><a name="socket.28.29" id="socket.28.29"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Berkeley_sockets&amp;action=edit&amp;section=3" title="Edit section: socket()">edit</a>]</span> <span class="mw-headline">socket()</span></h3>
<p><code>socket()</code> creates an endpoint for communication and returns a <a href="/wiki/File_descriptor" title="File descriptor">file descriptor</a> for the socket. <code>socket()</code> takes three arguments:</p>
<ul>
<li><var>domain</var>, which specifies the protocol family of the created socket. For example:
<ul>
<li><code>PF_INET</code> for network protocol <a href="/wiki/IPv4" title="IPv4">IPv4</a> or</li>
<li><code>PF_INET6</code> for <a href="/wiki/IPv6" title="IPv6">IPv6</a>.</li>
<li><code>PF_UNIX</code> for local socket (using a file).</li>
</ul>
</li>
<li><var>type</var>, one of:
<ul>
<li><code>SOCK_STREAM</code> (reliable stream-oriented service or <a href="/wiki/Stream_Sockets" title="Stream Sockets" class="mw-redirect">Stream Sockets</a>)</li>
<li><code>SOCK_DGRAM</code> (datagram service or <a href="/wiki/Datagram_Sockets" title="Datagram Sockets" class="mw-redirect">Datagram Sockets</a>)</li>
<li><code>SOCK_SEQPACKET</code> (reliable sequenced packet service), or</li>
<li><code>SOCK_RAW</code> (raw protocols atop the network layer).</li>
</ul>
</li>
<li><var>protocol</var> specifying the actual transport protocol to use. The most common are <code><a href="/wiki/Transmission_Control_Protocol" title="Transmission Control Protocol">IPPROTO_TCP</a></code>, <code><a href="/wiki/SCTP" title="SCTP" class="mw-redirect">IPPROTO_SCTP</a></code>, <code><a href="/wiki/User_Datagram_Protocol" title="User Datagram Protocol">IPPROTO_UDP</a></code>, <code><a href="/wiki/DCCP" title="DCCP" class="mw-redirect">IPPROTO_DCCP</a></code>. These protocols are specified in &lt;netinet/in.h&gt;. The value “<code>0</code>” may be used to select a default protocol from the selected <code>domain</code> and <code>type</code>.</li>
</ul>
<p>The function returns -1 if an error occurred. Otherwise, it returns an integer representing the newly-assigned descriptor.</p>
<dl>
<dt>Prototype</dt>
</dl>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="co2">#include &lt;sys/types.h&gt;</span>
<span class="co2">#include &lt;sys/socket.h&gt;</span>
<span class="kw4">int</span> socket<span class="br0">(</span><span class="kw4">int</span> domain, <span class="kw4">int</span> type, <span class="kw4">int</span> protocol<span class="br0">)</span>;
</pre></div>
<p><a name="bind.28.29" id="bind.28.29"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Berkeley_sockets&amp;action=edit&amp;section=4" title="Edit section: bind()">edit</a>]</span> <span class="mw-headline">bind()</span></h3>
<p><code>bind()</code> assigns a socket an address. When a socket is created using <code>socket()</code>, it is only given a protocol family, but not assigned an address. This association with an address must be performed with the bind() system call before the socket can accept connections to other hosts. <code>bind()</code> takes three arguments:</p>
<ul>
<li><code>sockfd</code>, a descriptor representing the socket to perform the bind on</li>
<li><code>serv_addr</code>, a pointer to a <code>sockaddr</code> structure representing the address to bind to.</li>
<li><code>addrlen</code>, a <code>socklen_t</code> field specifying the size of the <code>sockaddr</code> structure.</li>
</ul>
<p>Bind() returns 0 on success and -1 if an error occurs.</p>
<dl>
<dt>Prototype</dt>
</dl>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="co2">#include &lt;sys/types.h&gt;</span>
<span class="co2">#include &lt;sys/socket.h&gt;</span>
<span class="kw4">int</span> bind<span class="br0">(</span><span class="kw4">int</span> sockfd, <span class="kw4">const</span> <span class="kw4">struct</span> sockaddr *my_addr, socklen_t addrlen<span class="br0">)</span>;
</pre></div>
<p><a name="listen.28.29" id="listen.28.29"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Berkeley_sockets&amp;action=edit&amp;section=5" title="Edit section: listen()">edit</a>]</span> <span class="mw-headline">listen()</span></h3>
<p>After a socket has been associated with an address, <code>listen()</code> prepares it for incoming connections. However, this is only necessary for the stream-oriented (connection-oriented) data modes, i.e., for socket types (<code>SOCK_STREAM</code>, <code>SOCK_SEQPACKET</code>). listen() requires two arguments:</p>
<ul>
<li><code>sockfd</code>, a valid socket descriptor.</li>
<li><code>backlog</code>, an integer representing the number of pending connections that can be queued up at any one time. The operating system usually places a cap on this value.</li>
</ul>
<p>Once a connection is accepted, it is dequeued. On success, 0 is returned. If an error occurs, -1 is returned.</p>
<dl>
<dt>Prototype</dt>
</dl>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="co2">#include &lt;sys/socket.h&gt;</span>
<span class="kw4">int</span> listen<span class="br0">(</span><span class="kw4">int</span> sockfd, <span class="kw4">int</span> backlog<span class="br0">)</span>;
</pre></div>
<p><a name="accept.28.29" id="accept.28.29"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Berkeley_sockets&amp;action=edit&amp;section=6" title="Edit section: accept()">edit</a>]</span> <span class="mw-headline">accept()</span></h3>
<p>When an application is listening for stream-oriented connections from other hosts, it is notified of such events (cf. <a href="/wiki/Select_(Unix)" title="Select (Unix)">select()</a> function) and must initialize the connection using the <code>accept()</code> function. Accept() creates a new socket for each connection and removes the connection from the listen queue. It takes the following arguments:</p>
<ul>
<li><code>sockfd</code>, the descriptor of the listening socket that has the connection queued.</li>
<li><code>cliaddr</code>, a pointer to a sockaddr structure to receive the client's address information.</li>
<li><code>addrlen</code>, a pointer to a <code>socklen_t</code> location that specifies the size of the client address structure passed to accept(). When <code>accept()</code> returns, this location indicates how many bytes of the structure were actually used.</li>
</ul>
<p>The accept() function returns the new socket descriptor for the accepted connection, or -1 if an error occurs. All further communication with the remote host now occurs via this new socket.</p>
<p>Datagram sockets do not require processing by accept() since the receiver may immediately respond to the request using the listening socket.</p>
<dl>
<dt>Prototype</dt>
</dl>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="co2">#include &lt;sys/types.h&gt;</span>
<span class="co2">#include &lt;sys/socket.h&gt;</span>
<span class="kw4">int</span> accept<span class="br0">(</span><span class="kw4">int</span> sockfd, <span class="kw4">struct</span> sockaddr *cliaddr, socklen_t *addrlen<span class="br0">)</span>;
</pre></div>
<p><a name="connect.28.29" id="connect.28.29"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Berkeley_sockets&amp;action=edit&amp;section=7" title="Edit section: connect()">edit</a>]</span> <span class="mw-headline">connect()</span></h3>
<p>The <code>connect()</code> system call <i>connects</i> a socket, identified by its file descriptor, to a remote host specified by that host's address in the argument list.</p>
<p>Certain types of sockets are <i>connectionless</i>, most commonly <a href="/wiki/User_datagram_protocol" title="User datagram protocol" class="mw-redirect">user datagram protocol</a> sockets. For these sockets, connect takes on a special meaning: the default target for sending and receiving data gets set to the given address, allowing the use of functions such as send() and recv() on connectionless sockets.</p>
<p><tt>connect()</tt> returns an integer representing the error code: 0 represents success, while -1 represents an error.</p>
<dl>
<dt>Prototype</dt>
</dl>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="co2">#include &lt;sys/types.h&gt;</span>
<span class="co2">#include &lt;sys/socket.h&gt;</span>
<span class="kw4">int</span> connect<span class="br0">(</span><span class="kw4">int</span> sockfd, <span class="kw4">const</span> <span class="kw4">struct</span> sockaddr *serv_addr, socklen_t addrlen<span class="br0">)</span>;
</pre></div>
<p><a name="gethostbyname.28.29_and_gethostbyaddr.28.29" id="gethostbyname.28.29_and_gethostbyaddr.28.29"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Berkeley_sockets&amp;action=edit&amp;section=8" title="Edit section: gethostbyname() and gethostbyaddr()">edit</a>]</span> <span class="mw-headline">gethostbyname() and gethostbyaddr()</span></h3>
<p>The <code>gethostbyname()</code> and <code>gethostbyaddr()</code> functions are used to resolve host names and addresses in the <a href="/wiki/Domain_name_system" title="Domain name system" class="mw-redirect">domain name system</a> or the local hosts other resolver mechanisms (e.g., /etc/hosts lookup). They return a pointer to an object of type <var>struct hostent</var>, which describes an <a href="/wiki/Internet_Protocol" title="Internet Protocol">Internet Protocol</a> host. The functions take the following arguments:</p>
<ul>
<li><var>name</var> specifies the name of the host. For example: www.wikipedia.org</li>
<li><var>addr</var> specifies a pointer to a <var>struct in_addr</var> containing the address of the host.</li>
<li><var>len</var> specifies the length, in bytes, of <var>addr</var>.</li>
<li><var>type</var> specifies the address family type (e.g., AF_INET) of the host address.</li>
</ul>
<p>The functions return a NULL pointer in case of error, in which case the external integer <var>h_errno</var> may be checked so see whether this is a temporary failure or an invalid or unknown host. Otherwise a valid <var>struct hostent *</var> is returned.</p>
<p>These functions are not strictly a component of the BSD socket API, but are often used in conjunction with the API functions. Furthermore, these functions are now considered legacy interfaces for querying the domain name system. New functions that are completely protocol-agnostic have been defined. These new function are <a href="/wiki/Getaddrinfo" title="Getaddrinfo">getaddrinfo() and getnameinfo()</a>, and are based on a new <a href="/wiki/Getaddrinfo#struct_addrinfo" title="Getaddrinfo"><i>addrinfo</i></a> data structure.</p>
<dl>
<dt>Prototypes</dt>
</dl>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">struct</span> hostent *gethostbyname<span class="br0">(</span><span class="kw4">const</span> <span class="kw4">char</span> *name<span class="br0">)</span>;
<span class="kw4">struct</span> hostent *gethostbyaddr<span class="br0">(</span><span class="kw4">const</span> <span class="kw4">void</span> *addr, <span class="kw4">int</span> len, <span class="kw4">int</span> type<span class="br0">)</span>;
</pre></div>
<p><a name="Protocol_and_address_families" id="Protocol_and_address_families"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Berkeley_sockets&amp;action=edit&amp;section=9" title="Edit section: Protocol and address families">edit</a>]</span> <span class="mw-headline">Protocol and address families</span></h2>
<p>The socket API is a general interface for Unix networking and allows the use of various network protocols and addressing architectures.</p>
<p>The following lists a sampling of protocol families (preceded by the standard symbolic identifier) defined in a modern <a href="/wiki/Linux" title="Linux">Linux</a> or <a href="/wiki/BSD" title="BSD" class="mw-redirect">BSD</a> implementation:</p>
<pre>
PF_LOCAL, PF_UNIX, PF_FILE
                Local to host (pipes and file-domain)
PF_INET         IP protocol family
PF_AX25         Amateur Radio AX.25
PF_IPX          Novell Internet Protocol
PF_APPLETALK    Appletalk DDP
PF_NETROM       Amateur radio NetROM
PF_BRIDGE       Multiprotocol bridge
PF_ATMPVC       ATM PVCs
PF_X25          Reserved for X.25 project
PF_INET6        IP version 6
PF_ROSE         Amateur Radio X.25 PLP
PF_DECnet       Reserved for DECnet project
PF_NETBEUI      Reserved for 802.2LLC project
PF_SECURITY     Security callback pseudo AF
PF_KEY          PF_KEY key management API
PF_NETLINK, PF_ROUTE
                routing API
PF_PACKET       Packet family
PF_ASH          Ash
PF_ECONET       Acorn Econet
PF_ATMSVC       ATM SVCs
PF_SNA          Linux SNA Project
PF_IRDA         IRDA sockets
PF_PPPOX        PPPoX sockets
PF_WANPIPE      Wanpipe API sockets
PF_BLUETOOTH    Bluetooth sockets
</pre>
<p>A socket for communications using any family is created with the <tt>socket()</tt> function (see above), by specifying the desired protocol family (<i><tt>PF_</tt></i>-identifier) as an argument.</p>
<p>The original design concept of the socket interface distinguished between protocol types (families) and the specific address types that each may use. It was envisioned that a protocol family may have several address types. Address types were defined by additional symbolic constants, using the prefix <i><tt>AF_</tt></i> instead of <i><tt>PF_</tt></i>. The <i><tt>AF_</tt></i>-identifiers are intended for all data structures that specifically deal with the address type and not the protocol family. However, this concept of separation of protocol and address type has not found implementation support and the <i><tt>AF_</tt></i>-constants were simply defined by the corresponding protocol identifier, rendering the distinction between <i><tt>AF_</tt></i> versus <i><tt>PF_</tt></i> constants a technical argument of no significant practical consequence. Indeed, much confusion exists in the proper usage of both forms.<sup id="cite_ref-0" class="reference"><a href="#cite_note-0" title=""><span>[</span>1<span>]</span></a></sup></p>
<p><a name="Options_for_sockets" id="Options_for_sockets"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Berkeley_sockets&amp;action=edit&amp;section=10" title="Edit section: Options for sockets">edit</a>]</span> <span class="mw-headline">Options for sockets</span></h2>
<p>After creating a socket, it is possible to set options on it. Some of the more common options are:</p>
<ul>
<li><code>TCP_NODELAY</code> disables the <a href="/wiki/Nagle_algorithm" title="Nagle algorithm" class="mw-redirect">Nagle algorithm</a>.</li>
<li><code>SO_KEEPALIVE</code> enables periodic 'liveness' pings, if supported by the OS.</li>
</ul>
<p><a name="Blocking_vs._non-blocking_mode" id="Blocking_vs._non-blocking_mode"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Berkeley_sockets&amp;action=edit&amp;section=11" title="Edit section: Blocking vs. non-blocking mode">edit</a>]</span> <span class="mw-headline">Blocking <i>vs.</i> non-blocking mode</span></h2>
<p>Berkeley sockets can operate in one of two modes: blocking or non-blocking. A <i>blocking</i> socket will not return control until it has sent (or received) all data specified for the operation. This is true only in Linux systems. In other systems, such as FreeBSD, it is normal for a blocking socket not to send all data. The application must check the return value to determine how many bytes have been sent or received and it must resend any data not already processed <a href="http://beej.us/guide/bgnet/" class="external autonumber" title="http://beej.us/guide/bgnet/" rel="nofollow">[1]</a>. It also may cause problems if a socket continues to listen: a program may hang as the socket waits for data that may never arrive.</p>
<p>A socket is typically set to blocking or nonblocking mode using the <code>fcntl()</code> or <code><a href="/wiki/Ioctl" title="Ioctl">ioctl</a>()</code> functions.</p>
<p><a name="Cleaning_up" id="Cleaning_up"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Berkeley_sockets&amp;action=edit&amp;section=12" title="Edit section: Cleaning up">edit</a>]</span> <span class="mw-headline">Cleaning up</span></h2>
<p>The operating system will not release the resources allocated to the socket until a <code>close()</code> call occurs on the socket descriptor. This is especially important if the <code>connect()</code> call fails and may be retried. Each successful call to <code>socket()</code> must have a matching call to <code>close()</code> in all possible execution paths. Include &lt;unistd.h&gt; for the close function.</p>
<p>When the <code>close()</code> system call is executed in an application, only the interface to the socket is destroyed, not the socket itself. It is the kernel's responsibility to destroy the socket internally. Sometimes, a socket may enter a <code>TIME_WAIT</code> state, on the server side, for up to 4 minutes.<a href="http://www.softlab.ntua.gr/facilities/documentation/unix/unix-socket-faq/unix-socket-faq-4.html#ss4.2" class="external autonumber" title="http://www.softlab.ntua.gr/facilities/documentation/unix/unix-socket-faq/unix-socket-faq-4.html#ss4.2" rel="nofollow">[2]</a></p>
<p><a name="Header_files" id="Header_files"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Berkeley_sockets&amp;action=edit&amp;section=13" title="Edit section: Header files">edit</a>]</span> <span class="mw-headline">Header files</span></h2>
<p>The Berkeley socket development library has many associated header files. These files and their content differ slightly between implementations. In general, they include:</p>
<dl>
<dd>
<dl>
<dt><code>&lt;sys/socket.h&gt;</code></dt>
<dd>Core BSD socket functions and data structures.</dd>
<dd>AF_INET and AF_INET6 address families and their corresponding protocol families PF_INET and PF_INET6. Widely used on the Internet, these include IP addresses and TCP and UDP port numbers.</dd>
<dt><code>&lt;netinet/in.h&gt;</code></dt>
<dt><code>&lt;sys/un.h&gt;</code></dt>
<dd>PF_UNIX/PF_LOCAL address family. Used for local communication between programs running on the same computer. Not used on networks.</dd>
<dt><code>&lt;arpa/inet.h&gt;</code></dt>
<dd>Functions for manipulating numeric IP addresses.</dd>
<dt><code>&lt;netdb.h&gt;</code></dt>
<dd>Functions for translating protocol names and host names into numeric addresses. Searches local data as well as DNS.</dd>
</dl>
</dd>
</dl>
<p><a name="Client-server_example_using_TCP" id="Client-server_example_using_TCP"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Berkeley_sockets&amp;action=edit&amp;section=14" title="Edit section: Client-server example using TCP">edit</a>]</span> <span class="mw-headline">Client-server example using TCP</span></h2>
<p>The <a href="/wiki/Transmission_Control_Protocol" title="Transmission Control Protocol">Transmission Control Protocol</a> (TCP) provides the concept of a <i>connection</i>, which is a stateful network association between two hosts with a variety of error correction and performance features. A process creates a TCP socket by calling the <code>socket()</code> function with the parameters for the protocol family (<code><a href="/wiki/PF_INET" title="PF INET">PF_INET</a></code>, <code>PF_INET6</code>), <code>SOCK_STREAM</code> (<a href="/wiki/Stream_Sockets" title="Stream Sockets" class="mw-redirect">Stream Sockets</a>) and the IP protocol identifier <code>IPPROTO_TCP</code>.</p>
<p><a name="Server" id="Server"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Berkeley_sockets&amp;action=edit&amp;section=15" title="Edit section: Server">edit</a>]</span> <span class="mw-headline">Server</span></h3>
<p>Setting up a simple TCP server involves the following steps:</p>
<ul>
<li>Creating a TCP socket, with a call to <code>socket()</code>.</li>
<li>Binding the socket to the listen port, with a call to <code>bind()</code>. Before calling <code>bind()</code>, a programmer must declare a <code>sockaddr_in</code> structure, clear it (with <code>memset()</code>), and the <code>sin_family</code> (<code>AF_INET</code>), and fill its <code>sin_port</code> (the listening port, in <a href="/wiki/Network_byte_order" title="Network byte order" class="mw-redirect">network byte order</a>) fields. Converting a <code>short int</code> to network byte order can be done by calling the function <code>htons()</code> (host to network short).</li>
<li>Preparing the socket to listen for connections (making it a listening socket), with a call to <code>listen()</code>.</li>
<li>Accepting incoming connections, via a call to <code>accept()</code>. This blocks until an incoming connection is received, and then returns a socket descriptor for the accepted connection. The initial descriptor remains a listening descriptor, and <code>accept()</code> can be called again at any time with this socket, until it is closed.</li>
<li>Communicating with the remote host, which can be done through <code>send()</code> and <code>recv()</code> or <code>write()</code> and <code>read()</code>.</li>
<li>Eventually closing each socket that was opened, once it is no longer needed, using <code>close()</code>. Note that if there were any calls to <code>fork()</code>, each process must close the sockets it knew about (the kernel keeps track of how many processes have a descriptor open), and two processes should not use the same socket at once.</li>
</ul>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
  <span class="coMULTI">/* Server code in C */</span>
 
  <span class="co2">#include &lt;sys/types.h&gt;</span>
  <span class="co2">#include &lt;sys/socket.h&gt;</span>
  <span class="co2">#include &lt;netinet/in.h&gt;</span>
  <span class="co2">#include &lt;arpa/inet.h&gt;</span>
  <span class="co2">#include &lt;stdio.h&gt;</span>
  <span class="co2">#include &lt;stdlib.h&gt;</span>
  <span class="co2">#include &lt;string.h&gt;</span>
  <span class="co2">#include &lt;unistd.h&gt;</span>
 
  <span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>
  <span class="br0">{</span>
    <span class="kw4">struct</span> sockaddr_in stSockAddr;
    <span class="kw4">int</span> SocketFD = socket<span class="br0">(</span>PF_INET, SOCK_STREAM, IPPROTO_TCP<span class="br0">)</span>;
 
    <span class="kw1">if</span><span class="br0">(</span><span class="nu0">-1</span> == SocketFD<span class="br0">)</span>
    <span class="br0">{</span>
      perror<span class="br0">(</span><span class="st0">"can not create socket"</span><span class="br0">)</span>;
      exit<span class="br0">(</span>EXIT_FAILURE<span class="br0">)</span>;
    <span class="br0">}</span>
 
    memset<span class="br0">(</span>&amp;stSockAddr, <span class="nu0">0</span>, <span class="kw4">sizeof</span><span class="br0">(</span>stSockAddr<span class="br0">)</span><span class="br0">)</span>;
 
    stSockAddr.<span class="me1">sin_family</span> = AF_INET;
    stSockAddr.<span class="me1">sin_port</span> = htons<span class="br0">(</span><span class="nu0">1100</span><span class="br0">)</span>;
    stSockAddr.<span class="me1">sin_addr</span>.<span class="me1">s_addr</span> = INADDR_ANY;
 
    <span class="kw1">if</span><span class="br0">(</span><span class="nu0">-1</span> == bind<span class="br0">(</span>SocketFD,<span class="br0">(</span><span class="kw4">const</span> <span class="kw4">void</span> *<span class="br0">)</span>&amp;stSockAddr, <span class="kw4">sizeof</span><span class="br0">(</span>stSockAddr<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>
    <span class="br0">{</span>
      perror<span class="br0">(</span><span class="st0">"error bind failed"</span><span class="br0">)</span>;
      close<span class="br0">(</span>SocketFD<span class="br0">)</span>;
      exit<span class="br0">(</span>EXIT_FAILURE<span class="br0">)</span>;
    <span class="br0">}</span>
 
    <span class="kw1">if</span><span class="br0">(</span><span class="nu0">-1</span> == listen<span class="br0">(</span>SocketFD, <span class="nu0">10</span><span class="br0">)</span><span class="br0">)</span>
    <span class="br0">{</span>
      perror<span class="br0">(</span><span class="st0">"error listen failed"</span><span class="br0">)</span>;
      close<span class="br0">(</span>SocketFD<span class="br0">)</span>;
      exit<span class="br0">(</span>EXIT_FAILURE<span class="br0">)</span>;
    <span class="br0">}</span>
 
    <span class="kw1">for</span><span class="br0">(</span>;;<span class="br0">)</span>
    <span class="br0">{</span>
      <span class="kw4">int</span> ConnectFD = accept<span class="br0">(</span>SocketFD, <span class="kw2">NULL</span>, <span class="kw2">NULL</span><span class="br0">)</span>;
 
      <span class="kw1">if</span><span class="br0">(</span><span class="nu0">0</span> &gt; ConnectFD<span class="br0">)</span>
      <span class="br0">{</span>
        perror<span class="br0">(</span><span class="st0">"error accept failed"</span><span class="br0">)</span>;
        close<span class="br0">(</span>SocketFD<span class="br0">)</span>;
        exit<span class="br0">(</span>EXIT_FAILURE<span class="br0">)</span>;
      <span class="br0">}</span>
 
     <span class="coMULTI">/* perform read write operations ... */</span>
 
      shutdown<span class="br0">(</span>ConnectFD, SHUT_RDWR<span class="br0">)</span>;
 
      close<span class="br0">(</span>ConnectFD<span class="br0">)</span>;
    <span class="br0">}</span>
    <span class="kw1">return</span> <span class="nu0">0</span>;
  <span class="br0">}</span>
</pre></div>
<p><a name="Client" id="Client"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Berkeley_sockets&amp;action=edit&amp;section=16" title="Edit section: Client">edit</a>]</span> <span class="mw-headline">Client</span></h3>
<p>Setting up a TCP client involves the following steps:</p>
<ul>
<li>Creating a TCP socket, with a call to <code>socket()</code>.</li>
<li>Connecting to the server with the use of <code>connect()</code>, passing a <code>sockaddr_in</code> structure with the <code>sin_family</code> set to <code>AF_INET</code>, <code>sin_port</code> set to the port the endpoint is listening (in network byte order), and <code>sin_addr</code> set to the IP address of the listening server (also in network byte order.)</li>
<li>Communicating with the server by using <code>send()</code> and <code>recv()</code> or <code>write()</code> and <code>read()</code>.</li>
<li>Terminating the connection and cleaning up with a call to <code>close()</code>. Again, if there were any calls to <code>fork()</code>, each process must <code>close()</code> the socket.</li>
</ul>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
  <span class="coMULTI">/* Client code in C */</span>
 
  <span class="co2">#include &lt;sys/types.h&gt;</span>
  <span class="co2">#include &lt;sys/socket.h&gt;</span>
  <span class="co2">#include &lt;netinet/in.h&gt;</span>
  <span class="co2">#include &lt;arpa/inet.h&gt;</span>
  <span class="co2">#include &lt;stdio.h&gt;</span>
  <span class="co2">#include &lt;stdlib.h&gt;</span>
  <span class="co2">#include &lt;string.h&gt;</span>
  <span class="co2">#include &lt;unistd.h&gt;</span>
 
  <span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>
  <span class="br0">{</span>
    <span class="kw4">struct</span> sockaddr_in stSockAddr;
    <span class="kw4">int</span> Res;
    <span class="kw4">int</span> SocketFD = socket<span class="br0">(</span>PF_INET, SOCK_STREAM, IPPROTO_TCP<span class="br0">)</span>;
 
    <span class="kw1">if</span> <span class="br0">(</span><span class="nu0">-1</span> == SocketFD<span class="br0">)</span>
    <span class="br0">{</span>
      perror<span class="br0">(</span><span class="st0">"cannot create socket"</span><span class="br0">)</span>;
      exit<span class="br0">(</span>EXIT_FAILURE<span class="br0">)</span>;
    <span class="br0">}</span>
 
    memset<span class="br0">(</span>&amp;stSockAddr, <span class="nu0">0</span>, <span class="kw4">sizeof</span><span class="br0">(</span>stSockAddr<span class="br0">)</span><span class="br0">)</span>;
 
    stSockAddr.<span class="me1">sin_family</span> = AF_INET;
    stSockAddr.<span class="me1">sin_port</span> = htons<span class="br0">(</span><span class="nu0">1100</span><span class="br0">)</span>;
    Res = inet_pton<span class="br0">(</span>AF_INET, <span class="st0">"192.168.1.3"</span>, &amp;stSockAddr.<span class="me1">sin_addr</span><span class="br0">)</span>;
 
    <span class="kw1">if</span> <span class="br0">(</span><span class="nu0">0</span> &gt; Res<span class="br0">)</span>
    <span class="br0">{</span>
      perror<span class="br0">(</span><span class="st0">"error: first parameter is not a valid address family"</span><span class="br0">)</span>;
      close<span class="br0">(</span>SocketFD<span class="br0">)</span>;
      exit<span class="br0">(</span>EXIT_FAILURE<span class="br0">)</span>;
    <span class="br0">}</span>
    <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">(</span><span class="nu0">0</span> == Res<span class="br0">)</span>
    <span class="br0">{</span>
      perror<span class="br0">(</span><span class="st0">"char string (second parameter does not contain valid ipaddress"</span><span class="br0">)</span>;
      close<span class="br0">(</span>SocketFD<span class="br0">)</span>;
      exit<span class="br0">(</span>EXIT_FAILURE<span class="br0">)</span>;
    <span class="br0">}</span>
 
    <span class="kw1">if</span> <span class="br0">(</span><span class="nu0">-1</span> == connect<span class="br0">(</span>SocketFD, <span class="br0">(</span><span class="kw4">const</span> <span class="kw4">void</span> *<span class="br0">)</span>&amp;stSockAddr, <span class="kw4">sizeof</span><span class="br0">(</span>stSockAddr<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>
    <span class="br0">{</span>
      perror<span class="br0">(</span><span class="st0">"connect failed"</span><span class="br0">)</span>;
      close<span class="br0">(</span>SocketFD<span class="br0">)</span>;
      exit<span class="br0">(</span>EXIT_FAILURE<span class="br0">)</span>;
    <span class="br0">}</span>
 
    <span class="coMULTI">/* perform read write operations ... */</span>
 
    shutdown<span class="br0">(</span>SocketFD, SHUT_RDWR<span class="br0">)</span>;
 
    close<span class="br0">(</span>SocketFD<span class="br0">)</span>;
    <span class="kw1">return</span> <span class="nu0">0</span>;
  <span class="br0">}</span>
</pre></div>
<p><a name="Client-server_example_using_UDP" id="Client-server_example_using_UDP"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Berkeley_sockets&amp;action=edit&amp;section=17" title="Edit section: Client-server example using UDP">edit</a>]</span> <span class="mw-headline">Client-server example using UDP</span></h2>
<p>The <a href="/wiki/User_Datagram_Protocol" title="User Datagram Protocol">User Datagram Protocol</a> (UDP) is a <a href="/wiki/Connectionless" title="Connectionless" class="mw-redirect">connectionless</a> protocol with no guarantee of delivery. UDP packets may arrive out of order, multiple times, or not at all. Because of this minimal design, UDP has considerably less overhead than TCP. Being connectionless means that there is no concept of a stream or permanent connection between two hosts. Such data are referred to as datagrams (<a href="/wiki/Datagram_Sockets" title="Datagram Sockets" class="mw-redirect">Datagram Sockets</a>).</p>
<p>UDP address space, the space of UDP port numbers (in ISO terminology, the <a href="/wiki/TSAP" title="TSAP" class="mw-redirect">TSAPs</a>), is completely disjoint from that of TCP ports.</p>
<p><a name="Server_2" id="Server_2"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Berkeley_sockets&amp;action=edit&amp;section=18" title="Edit section: Server">edit</a>]</span> <span class="mw-headline">Server</span></h3>
<p>Code may set up a UDP server on port 7654 as follows:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="co2">#include &lt;stdio.h&gt;</span>
<span class="co2">#include &lt;errno.h&gt;</span>
<span class="co2">#include &lt;string.h&gt;</span>
<span class="co2">#include &lt;sys/socket.h&gt;</span>
<span class="co2">#include &lt;sys/types.h&gt;</span>
<span class="co2">#include &lt;netinet/in.h&gt;</span>
<span class="co2">#include &lt;unistd.h&gt; /* for close() for socket */ </span>
<span class="co2">#include &lt;stdlib.h&gt;</span>
 
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>
<span class="br0">{</span>
  <span class="kw4">int</span> sock = socket<span class="br0">(</span>PF_INET, SOCK_DGRAM, IPPROTO_UDP<span class="br0">)</span>;
  <span class="kw4">struct</span> sockaddr_in sa; 
  <span class="kw4">char</span> buffer<span class="br0">[</span><span class="nu0">1024</span><span class="br0">]</span>;
  size_t fromlen, recsize;
 
  memset<span class="br0">(</span>&amp;sa, <span class="nu0">0</span>, <span class="kw4">sizeof</span><span class="br0">(</span>sa<span class="br0">)</span><span class="br0">)</span>;
  sa.<span class="me1">sin_family</span> = AF_INET;
  sa.<span class="me1">sin_addr</span>.<span class="me1">s_addr</span> = INADDR_ANY;
  sa.<span class="me1">sin_port</span> = htons<span class="br0">(</span><span class="nu0">7654</span><span class="br0">)</span>;
 
  <span class="kw1">if</span> <span class="br0">(</span><span class="nu0">-1</span> == bind<span class="br0">(</span>sock,<span class="br0">(</span><span class="kw4">struct</span> sockaddr *<span class="br0">)</span>&amp;sa, <span class="kw4">sizeof</span><span class="br0">(</span><span class="kw4">struct</span> sockaddr<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>
  <span class="br0">{</span>
    perror<span class="br0">(</span><span class="st0">"error bind failed"</span><span class="br0">)</span>;
    close<span class="br0">(</span>sock<span class="br0">)</span>;
    exit<span class="br0">(</span>EXIT_FAILURE<span class="br0">)</span>;
  <span class="br0">}</span> 
 
  <span class="kw1">for</span> <span class="br0">(</span>;;<span class="br0">)</span> 
  <span class="br0">{</span>
    <span class="kw3">printf</span> <span class="br0">(</span><span class="st0">"recv test....<span class="es0">\n</span>"</span><span class="br0">)</span>;
    recsize = recvfrom<span class="br0">(</span>sock, <span class="br0">(</span><span class="kw4">void</span> *<span class="br0">)</span>buffer, <span class="nu0">1024</span>, <span class="nu0">0</span>, <span class="br0">(</span><span class="kw4">struct</span> sockaddr *<span class="br0">)</span>&amp;sa, &amp;fromlen<span class="br0">)</span>;
    <span class="kw1">if</span> <span class="br0">(</span>recsize &lt; <span class="nu0">0</span><span class="br0">)</span>
      fprintf<span class="br0">(</span>stderr, <span class="st0">"%s<span class="es0">\n</span>"</span>, strerror<span class="br0">(</span>errno<span class="br0">)</span><span class="br0">)</span>;
    <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"recsize: %d<span class="es0">\n</span> "</span>,recsize<span class="br0">)</span>;
    sleep<span class="br0">(</span><span class="nu0">1</span><span class="br0">)</span>;
    <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"datagram: %s<span class="es0">\n</span>"</span>,buffer<span class="br0">)</span>;
  <span class="br0">}</span>
<span class="br0">}</span>
</pre></div>
<p>This infinite loop receives any UDP datagrams to port 7654 using <tt>recvfrom()</tt>. It uses the parameters:</p>
<ul>
<li>socket</li>
<li>pointer to buffer for data</li>
<li>size of buffer</li>
<li>flags (same as in read or other receive socket function)</li>
<li>address struct of sending peer</li>
<li>length of address struct of sending peer.</li>
</ul>
<p><a name="Client_2" id="Client_2"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Berkeley_sockets&amp;action=edit&amp;section=19" title="Edit section: Client">edit</a>]</span> <span class="mw-headline">Client</span></h3>
<p>A simple demo to send a UDP packet containing "Hello World!" to address 127.0.0.1, port 7654 might look like this:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="co2">#include &lt;stdlib.h&gt;</span>
<span class="co2">#include &lt;stdio.h&gt;</span>
<span class="co2">#include &lt;errno.h&gt;</span>
<span class="co2">#include &lt;string.h&gt;</span>
<span class="co2">#include &lt;sys/socket.h&gt;</span>
<span class="co2">#include &lt;sys/types.h&gt;</span>
<span class="co2">#include &lt;netinet/in.h&gt;</span>
<span class="co2">#include &lt;unistd.h&gt; /* for close() for socket */</span>
 
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">int</span> argc, <span class="kw4">char</span> *argv<span class="br0">[</span><span class="br0">]</span><span class="br0">)</span>
<span class="br0">{</span>
  <span class="kw4">int</span> sock;
  <span class="kw4">struct</span> sockaddr_in sa;
  <span class="kw4">int</span> bytes_sent, buffer_length;
  <span class="kw4">char</span> buffer<span class="br0">[</span><span class="nu0">200</span><span class="br0">]</span>;
 
  buffer_length = snprintf<span class="br0">(</span>buffer, <span class="kw4">sizeof</span> buffer, <span class="st0">"Hello World!"</span><span class="br0">)</span>;
 
  sock = socket<span class="br0">(</span>PF_INET, SOCK_DGRAM, IPPROTO_UDP<span class="br0">)</span>;
  <span class="kw1">if</span> <span class="br0">(</span><span class="nu0">-1</span> == sock<span class="br0">)</span> <span class="coMULTI">/* if socket failed to initialize, exit */</span>
    <span class="br0">{</span>
      <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"Error Creating Socket"</span><span class="br0">)</span>;
      exit<span class="br0">(</span>EXIT_FAILURE<span class="br0">)</span>;
    <span class="br0">}</span>
 
  memset<span class="br0">(</span>&amp;sa, <span class="nu0">0</span>, <span class="kw4">sizeof</span><span class="br0">(</span>sa<span class="br0">)</span><span class="br0">)</span>;
  sa.<span class="me1">sin_family</span> = AF_INET;
  sa.<span class="me1">sin_addr</span>.<span class="me1">s_addr</span> = htonl<span class="br0">(</span>0x7F000001<span class="br0">)</span>;
  sa.<span class="me1">sin_port</span> = htons<span class="br0">(</span><span class="nu0">7654</span><span class="br0">)</span>;
 
  bytes_sent = sendto<span class="br0">(</span>sock, buffer, buffer_length, <span class="nu0">0</span>,<span class="br0">(</span><span class="kw4">struct</span> sockaddr*<span class="br0">)</span>&amp;sa, <span class="kw4">sizeof</span> <span class="br0">(</span><span class="kw4">struct</span> sockaddr_in<span class="br0">)</span><span class="br0">)</span>;
  <span class="kw1">if</span> <span class="br0">(</span>bytes_sent &lt; <span class="nu0">0</span><span class="br0">)</span>
    <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"Error sending packet: %s<span class="es0">\n</span>"</span>, strerror<span class="br0">(</span>errno<span class="br0">)</span><span class="br0">)</span>;
 
  close<span class="br0">(</span>sock<span class="br0">)</span>; <span class="coMULTI">/* close the socket */</span>
  <span class="kw1">return</span> <span class="nu0">0</span>;
<span class="br0">}</span>
</pre></div>
<p>In this code, <code>buffer</code> provides a pointer to the data to send, and <code>buffer_length</code> specifies the size of the buffer contents.</p>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Berkeley_sockets&amp;action=edit&amp;section=20" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<ul>
<li><a href="/wiki/Computer_network" title="Computer network">Computer network</a></li>
<li><a href="/wiki/Internet_socket" title="Internet socket">Internet socket</a></li>
<li><a href="/wiki/Unix_domain_socket" title="Unix domain socket">Unix domain socket</a></li>
<li><a href="/wiki/Winsock" title="Winsock">Winsock</a>, the Berkeley sockets-based <a href="/wiki/Application_programming_interface" title="Application programming interface">application programming interface</a> for networking on <a href="/wiki/Microsoft_Windows" title="Microsoft Windows">Microsoft Windows</a></li>
</ul>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Berkeley_sockets&amp;action=edit&amp;section=21" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<ol class="references">
<li id="cite_note-0"><b><a href="#cite_ref-0" title="">^</a></b> <i>UNIX Network Programming</i> Volume 1, Third Edition: The Sockets Networking API, W. Richard Stevens, Bill Fenner, Andrew M. Rudoff, Addison Wesley, 2003.</li>
</ol>
<p>The "de jure" standard definition of the Sockets interface is contained in the POSIX standard, known as:</p>
<ul>
<li>IEEE Std. 1003.1-2001 Standard for Information Technology -- Portable Operating System Interface (POSIX).</li>
<li>Open Group Technical Standard: Base Specifications, Issue 6, December 2001.</li>
<li>ISO/IEC 9945:2002</li>
</ul>
<p>Information about this standard and ongoing work on it is available from <a href="http://www.opengroup.org/austin/" class="external text" title="http://www.opengroup.org/austin/" rel="nofollow">the Austin website</a>.</p>
<p>The IPv6 extensions to the base socket API are documented in <a href="http://tools.ietf.org/html/rfc3493" class="external" title="http://tools.ietf.org/html/rfc3493">RFC 3493</a> and <a href="http://tools.ietf.org/html/rfc3542" class="external" title="http://tools.ietf.org/html/rfc3542">RFC 3542</a>.</p>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Berkeley_sockets&amp;action=edit&amp;section=22" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<ul>
<li><a href="/wiki/Manual_page_(Unix)" title="Manual page (Unix)">Unix Manual Pages</a>
<ul>
<li><a href="http://www.die.net/doc/linux/man/man2/accept.2.html" class="external text" title="http://www.die.net/doc/linux/man/man2/accept.2.html" rel="nofollow">accept(2)</a></li>
<li><a href="http://www.die.net/doc/linux/man/man2/connect.2.html" class="external text" title="http://www.die.net/doc/linux/man/man2/connect.2.html" rel="nofollow">connect(2)</a></li>
</ul>
</li>
<li><a href="http://beej.us/guide/bgnet/" class="external text" title="http://beej.us/guide/bgnet/" rel="nofollow">Beej's Guide to Network Programming</a> - 2007</li>
<li><a href="http://www.developerweb.net/forum/forumdisplay.php?f=70" class="external text" title="http://www.developerweb.net/forum/forumdisplay.php?f=70" rel="nofollow">UnixSocket FAQ</a></li>
<li><a href="http://xzdev.com/random_ip_cpp.html" class="external text" title="http://xzdev.com/random_ip_cpp.html" rel="nofollow">Get system IP list - C++ Example</a></li>
<li><a href="http://heather.cs.ucdavis.edu/~matloff/Networks/Intro/NetIntro.pdf" class="external text" title="http://heather.cs.ucdavis.edu/~matloff/Networks/Intro/NetIntro.pdf" rel="nofollow">quick TCP-IP NetIntro with C examples</a></li>
<li><a href="http://msdn2.microsoft.com/en-us/library/ms740096.aspx" class="external text" title="http://msdn2.microsoft.com/en-us/library/ms740096.aspx" rel="nofollow">Porting Berkeley Socket programs to Winsock</a> - Microsoft's documentation.</li>
<li><a href="http://www.softlab.ntua.gr/facilities/documentation/unix/unix-socket-faq/unix-socket-faq.html" class="external text" title="http://www.softlab.ntua.gr/facilities/documentation/unix/unix-socket-faq/unix-socket-faq.html" rel="nofollow">Programming UNIX Sockets in C - Frequently Asked Questions</a> - 1996</li>
<li><a href="http://www.linuxjournal.com/article/2333" class="external text" title="http://www.linuxjournal.com/article/2333" rel="nofollow">Linux network programming</a> - <i><a href="/wiki/Linux_Journal" title="Linux Journal">Linux Journal</a></i>, 1998</li>
</ul>
<p><span class="boilerplate" id="foldoc"><i>This article was originally based on material from the <a href="/wiki/Free_On-line_Dictionary_of_Computing" title="Free On-line Dictionary of Computing">Free On-line Dictionary of Computing</a>, which is <a href="/wiki/Wikipedia:Foldoc_license" title="Wikipedia:Foldoc license">licensed</a> under the <a href="/wiki/GNU_Free_Documentation_License" title="GNU Free Documentation License">GFDL</a>.</i></span></p>


<!-- 
NewPP limit report
Preprocessor node count: 205/1000000
Post-expand include size: 2654/2048000 bytes
Template argument size: 788/2048000 bytes
Expensive parser function count: 2/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:85068-0!1!0!default!!en!2 and timestamp 20090413140710 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Berkeley_sockets">http://en.wikipedia.org/wiki/Berkeley_sockets</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Network-related_software" title="Category:Network-related software">Network-related software</a></span> | <span dir='ltr'><a href="/wiki/Category:Application_programming_interfaces" title="Category:Application programming interfaces">Application programming interfaces</a></span> | <span dir='ltr'><a href="/wiki/Category:Inter-process_communication" title="Category:Inter-process communication">Inter-process communication</a></span></div><div id="mw-hidden-catlinks" class="mw-hidden-cats-hidden">Hidden categories:&#32;<span dir='ltr'><a href="/wiki/Category:All_articles_with_unsourced_statements" title="Category:All articles with unsourced statements">All articles with unsourced statements</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_unsourced_statements_since_February_2009" title="Category:Articles with unsourced statements since February 2009">Articles with unsourced statements since February 2009</a></span> | <span dir='ltr'><a href="/wiki/Category:Wikipedia_articles_incorporating_text_from_FOLDOC" title="Category:Wikipedia articles incorporating text from FOLDOC">Wikipedia articles incorporating text from FOLDOC</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Berkeley_sockets" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Berkeley_sockets" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Berkeley_sockets&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Berkeley_sockets&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Berkeley_sockets" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Berkeley_sockets" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Berkeley_sockets" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Berkeley_sockets&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Berkeley_sockets&amp;oldid=279230214" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Berkeley_sockets&amp;id=279230214">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Berkeley_sockets">Français</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/%E3%82%BD%E3%82%B1%E3%83%83%E3%83%88_(BSD)">日本語</a></li>
				<li class="interwiki-ru"><a href="http://ru.wikipedia.org/wiki/%D0%A1%D0%BE%D0%BA%D0%B5%D1%82%D1%8B_%D0%91%D0%B5%D1%80%D0%BA%D0%BB%D0%B8">Русский</a></li>
				<li class="interwiki-sv"><a href="http://sv.wikipedia.org/wiki/Berkeley_sockets">Svenska</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 23 March 2009, at 21:08 (UTC).</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv55 in 0.125 secs. --></body></html>
