<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Monitor (synchronization),.NET Framework,Ada (programming language),Apache Portable Runtime,Assertion (computing),Busy waiting,Butler W. Lampson,C.A.R. Hoare,C. A. R. Hoare,C Sharp (programming language),C sharp" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="http://en.wikipedia.org/w/index.php?title=Monitor_(synchronization)&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="http://en.wikipedia.org/w/index.php?title=Monitor_(synchronization)&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="http://en.wikipedia.org/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="http://en.wikipedia.org/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Monitor (synchronization) - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?206xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?206xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?206xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?206xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?206xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?206xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?206xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?206xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?206xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Monitor_(synchronization)";
		var wgTitle = "Monitor (synchronization)";
		var wgAction = "view";
		var wgArticleId = "1367789";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = "279489136";
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?206xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?206xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?206xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?206xx"></script>
		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Monitor_synchronization skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Monitor (synchronization)</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<p>In concurrent programming, a <b>monitor</b> is an <a href="/wiki/Object_(computer_science)" title="Object (computer science)">object</a> intended to be used safely by more than one <a href="/wiki/Thread_(computer_science)" title="Thread (computer science)">thread</a>. The defining characteristic of a monitor is that its methods are executed with <a href="/wiki/Mutual_exclusion" title="Mutual exclusion">mutual exclusion</a>. That is, at each point in time, at most one <a href="/wiki/Thread_(computer_science)" title="Thread (computer science)">thread</a> may be executing any of its <a href="/wiki/Method_(computer_science)" title="Method (computer science)">methods</a>. This mutual exclusion greatly simplifies reasoning about the implementation of monitors compared with code that may be executed in parallel.</p>
<p>Monitors also provide a mechanism for <a href="/wiki/Thread_(computer_science)" title="Thread (computer science)">threads</a> to temporarily give up exclusive access, in order to wait for some condition to be met, before regaining exclusive access and resuming their task. Monitors also have a mechanism for signaling other threads that such conditions have been met.</p>
<p>Monitors were invented by <a href="/wiki/C.A.R._Hoare" title="C.A.R. Hoare" class="mw-redirect">C.A.R. Hoare</a> <sup id="cite_ref-0" class="reference"><a href="#cite_note-0" title=""><span>[</span>1<span>]</span></a></sup> and <a href="/wiki/Per_Brinch_Hansen" title="Per Brinch Hansen">Per Brinch Hansen</a>, <sup id="cite_ref-1" class="reference"><a href="#cite_note-1" title=""><span>[</span>2<span>]</span></a></sup> and were first implemented in <a href="/wiki/Per_Brinch_Hansen" title="Per Brinch Hansen">Brinch Hansen's</a> <a href="/wiki/Concurrent_Pascal" title="Concurrent Pascal">Concurrent Pascal</a> language.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Mutual_exclusion"><span class="tocnumber">1</span> <span class="toctext">Mutual exclusion</span></a></li>
<li class="toclevel-1"><a href="#Waiting_and_signaling"><span class="tocnumber">2</span> <span class="toctext">Waiting and signaling</span></a>
<ul>
<li class="toclevel-2"><a href="#Blocking_condition_variables"><span class="tocnumber">2.1</span> <span class="toctext">Blocking condition variables</span></a></li>
<li class="toclevel-2"><a href="#Nonblocking_condition_variables"><span class="tocnumber">2.2</span> <span class="toctext">Nonblocking condition variables</span></a></li>
<li class="toclevel-2"><a href="#Implicit_condition_monitors"><span class="tocnumber">2.3</span> <span class="toctext">Implicit condition monitors</span></a></li>
<li class="toclevel-2"><a href="#Implicit_signaling"><span class="tocnumber">2.4</span> <span class="toctext">Implicit signaling</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#History"><span class="tocnumber">3</span> <span class="toctext">History</span></a></li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">4</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#Bibliography"><span class="tocnumber">5</span> <span class="toctext">Bibliography</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">6</span> <span class="toctext">External links</span></a></li>
<li class="toclevel-1"><a href="#Notes"><span class="tocnumber">7</span> <span class="toctext">Notes</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Mutual_exclusion" id="Mutual_exclusion"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Monitor_(synchronization)&amp;action=edit&amp;section=1" title="Edit section: Mutual exclusion">edit</a>]</span> <span class="mw-headline">Mutual exclusion</span></h2>
<p>As a simple example, consider a monitor for performing transactions on a bank account.</p>
<pre>
<b>monitor class</b> <i>Account</i> {
  <b>private</b> <i>int</i> balance := 0
  <b>invariant</b> balance &gt;= 0 
  
  <b>public method</b> <i>boolean</i> withdraw(<i>int</i> amount)
  {
    <b>if</b> amount &lt; 0 <b>then</b> <b>error</b> "Amount may not be negative"
    <b>else if</b> balance &lt; amount <b>then</b> <b>return false</b>
    <b>else</b> { balance := balance - amount ; <b>return true</b> }
  }
  
  <b>public method</b> deposit(<i>int</i> amount) {
    <b>if</b> amount &lt; 0 <b>then</b> <b>error</b> "Amount may not be negative"
    <b>else</b> balance := balance + amount
  }
}
</pre>
<p>While a thread is executing a method of a monitor, it is said to <i>occupy</i> the monitor. Monitors are implemented to enforce that <i>at each point in time, at most one thread may occupy the monitor</i>. This is the monitor's <a href="/wiki/Mutual_exclusion" title="Mutual exclusion">mutual exclusion</a> property.</p>
<p>Upon calling one of the methods, a thread must wait until no thread is executing any of the monitor's methods before starting execution of its method. Note that without this mutual exclusion, in the present example, two threads could cause money to be lost or gained for no reason; for example two threads withdrawing 1000 from the account could both return without error while causing the balance to drop by only 1000.</p>
<p>In a simple implementation, mutual exclusion can be implemented by the compiler equipping each monitor object with a private lock, often in the form of a <a href="/wiki/Semaphore_(programming)" title="Semaphore (programming)">semaphore</a>. This lock is initially unlocked, is locked at the start of each public method, and is unlocked at each return from each public method.</p>
<p><a name="Waiting_and_signaling" id="Waiting_and_signaling"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Monitor_(synchronization)&amp;action=edit&amp;section=2" title="Edit section: Waiting and signaling">edit</a>]</span> <span class="mw-headline">Waiting and signaling</span></h2>
<p>For many applications, mutual exclusion is not enough. Threads attempting an operation may need to wait until some <a href="/wiki/Assertion_(computing)" title="Assertion (computing)">assertion</a> <span class="texhtml"><i>P</i></span> holds true. A <a href="/wiki/Busy_waiting" title="Busy waiting">busy waiting</a> loop</p>
<pre>
   <b>while</b> <b>not</b>( <span class="texhtml"><i>P</i></span> ) <b>do</b> <b>skip</b>
</pre>
<p>will not work, as mutual exclusion will prevent any other thread from entering the monitor to make the condition true.</p>
<p>The solution is <b>condition variables</b>. Conceptually a condition variable is a queue of threads, associated with a monitor, upon which a thread may wait for some assertion to become true. Thus each condition variable <span class="texhtml"><i>c</i></span> is associated with some assertion <span class="texhtml"><i>P</i><sub><i>c</i></sub></span>. While a thread is waiting upon a condition variable, that thread is not considered to occupy the monitor, and so other threads may enter the monitor to changes the monitor's state. In most types of monitors, these other threads may signal the condition variable <span class="texhtml"><i>c</i></span> to indicate that assertion <span class="texhtml"><i>P</i><sub><i>c</i></sub></span> is true.</p>
<p>Thus there are two main operations on conditions variables:</p>
<ul>
<li><code><b>wait</b> c</code> is called by a thread that needs to wait until the assertion <span class="texhtml"><i>P</i><sub><i>c</i></sub></span> to be true before proceeding.</li>
<li><code><b>signal</b> c</code> (sometimes written as <code><b>notify</b> c</code>) is called by a thread to indicate that the assertion <span class="texhtml"><i>P</i><sub><i>c</i></sub></span> is true.</li>
</ul>
<p>As an example, consider a monitor that implements a <a href="/wiki/Semaphore_(programming)" title="Semaphore (programming)">semaphore</a>. There are methods to increment (V) and to decrement (P) a private integer <code>s</code>. However, the integer must never be decremented below 0; thus a thread that tries to decrement must wait until the integer is positive. We use a condition variable <code>sIsPositive</code> with an associated assertion of <span class="texhtml"><i>P</i><sub><i>s</i><i>I</i><i>s</i><i>P</i><i>o</i><i>s</i><i>i</i><i>t</i><i>i</i><i>v</i><i>e</i></sub> = (<i>s</i> &gt; 0)</span>.</p>
<pre>
<b>monitor class</b> <i>Semaphore</i> {
  <b>private</b> <i>int</i> s := 0
  <b>invariant</b> s &gt;= 0 
  <b>private</b> <i>Condition</i> sIsPositive /* <b>associated with</b> s &gt; 0 */
  
  <b>public method</b> P()
  {
    <b>if</b> s = 0 <b>then</b> <b>wait</b> sIsPositive 
    <b>assert</b> s &gt; 0
    s := s - 1
  }
  
  <b>public method</b> V() {
    s := s + 1
    <b>assert</b> s &gt; 0
    <b>signal</b> sIsPositive 
  }
}
</pre>
<p>When a <b>signal</b> happens on a condition that at least one other thread is waiting on, there are at least two threads that could then occupy the monitor: the thread that signals and any one of the threads that is waiting. In order that at most one thread occupies the monitor at each time, a choice must be made. Two schools of thought exist on how best to resolve this choice. This leads to two kinds of condition variables which will be examined next:</p>
<ul>
<li><i>Blocking condition variables</i> give priority to a signaled thread.</li>
<li><i>Nonblocking condition variables</i> give priority to the signaling thread.</li>
</ul>
<p><a name="Blocking_condition_variables" id="Blocking_condition_variables"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Monitor_(synchronization)&amp;action=edit&amp;section=3" title="Edit section: Blocking condition variables">edit</a>]</span> <span class="mw-headline">Blocking condition variables</span></h3>
<p>The original proposals by <a href="/wiki/C.A.R._Hoare" title="C.A.R. Hoare" class="mw-redirect">C.A.R. Hoare</a> and <a href="/wiki/Per_Brinch_Hansen" title="Per Brinch Hansen">Per Brinch Hansen</a> were for <i>blocking condition variables</i>. Monitors using blocking condition variables are often called <i>Hoare style</i> monitors. With a blocking condition variable, the signaling thread must wait outside the monitor (at least) until the signaled thread relinquishes occupancy of the monitor by either returning or by again waiting on a condition.</p>
<div class="thumb tright">
<div class="thumbinner" style="width:202px;"><a href="/wiki/File:Monitor_(synchronization)-SU.png" class="image" title="A Hoare style monitor with two condition variables a and b. After Buhr et al."><img alt="" src="http://upload.wikimedia.org/wikipedia/en/thumb/d/db/Monitor_%28synchronization%29-SU.png/200px-Monitor_%28synchronization%29-SU.png" width="200" height="212" border="0" class="thumbimage" /></a>
<div class="thumbcaption">
<div class="magnify"><a href="/wiki/File:Monitor_(synchronization)-SU.png" class="internal" title="Enlarge"><img src="/skins-1.5/common/images/magnify-clip.png" width="15" height="11" alt="" /></a></div>
A Hoare style monitor with two condition variables <code>a</code> and <code>b</code>. After Buhr <i>et al.</i></div>
</div>
</div>
<p>We assume there are two queues of threads associated with each monitor object</p>
<ul>
<li><code>e</code> is the entrance queue</li>
<li><code>s</code> is a queue of threads that have signaled.</li>
</ul>
<p>In addition we assume that for each condition <span class="texhtml"><i>c</i></span>, there is a queue</p>
<ul>
<li><span class="texhtml"><i>c</i></span><code>.q</code>, which is a queue for threads waiting on condition <span class="texhtml"><i>c</i></span></li>
</ul>
<p>All queues are typically guaranteed to be fair (i.e. each thread that enters the queue will not be not chosen an infinite number of times) and, in some implementations, may be guaranteed to be <a href="/wiki/First_in_first_out" title="First in first out" class="mw-redirect">first in first out</a>.</p>
<p>The implementation of each operation is as follows. (We assume that each operation runs in mutual exclusion to the others; thus restarted threads do not begin executing until the operation is complete.)</p>
<pre>
 enter the monitor:
    enter the method
    if the monitor is locked 
        add this thread to e
        block this thread
    else
        lock the monitor
</pre>
<pre>
 leave the monitor:
    schedule
    return from the method
</pre>
<pre>
 <b>wait</b> <span class="texhtml"><i>c</i></span> :
    add this thread to <span class="texhtml"><i>c</i></span>.q
    schedule
    block this thread
</pre>
<pre>
 <b>signal</b> <span class="texhtml"><i>c</i></span> :
    if there is a thread waiting on <span class="texhtml"><i>c</i></span>.q 
        select and remove one such thread t from <span class="texhtml"><i>c</i></span>.q
        (t is called "the signaled thread")
        add this thread to s
        restart t
        (so t will occupy the monitor next)
        block this thread
</pre>
<pre>
  schedule :
    if there is a thread on s 
      select and remove one thread from s and restart it
      (this thread will occupy the monitor next)
    else if there is a thread on e 
      select and remove one thread from e and restart it
      (this thread will occupy the monitor next)
    else
      unlock the monitor
      (the monitor will become unoccupied)
</pre>
<p>The <code>schedule</code> routine selects the next thread to occupy the monitor or, in the absence of any candidate threads, unlocks the monitor.</p>
<p>The resulting signaling discipline is known a <i>"signal and urgent wait,"</i> as the signaler must wait, but is given priority over threads on the entrance queue. An alternative is <i>"signal and wait,"</i> in which there is no <code>s</code> queue and signaler waits on the <code>e</code> queue instead.</p>
<p>Some implementations provide a <b>signal and return</b> operation that combines signaling with returning from a procedure.</p>
<pre>
 <b>signal</b> <span class="texhtml"><i>c</i></span> <b>and return</b> :
    if there is a thread waiting on <span class="texhtml"><i>c</i></span>.q 
        select and remove one such thread t from <span class="texhtml"><i>c</i></span>.q
        (t is called "the signaled thread")
        restart t
        (so t will occupy the monitor next)
    else
        schedule
    return from the method
</pre>
<p>In either case ("signal and urgent wait" or "signal and wait"), when a condition is signaled and there is at least one thread on waiting on the condition, the signaling thread hands occupancy over to the signaled thread seamlessly, so that no other thread can gain occupancy in between. If <span class="texhtml"><i>P</i><sub><i>c</i></sub></span> is true at the start of each <b>signal</b> <span class="texhtml"><i>c</i></span> operation, it will be true at the end of each <b>wait</b> <span class="texhtml"><i>c</i></span> operation. This is summarized by the following <a href="/wiki/Design_by_contract" title="Design by contract">contracts</a>. In these contracts, <span class="texhtml"><i>I</i></span> is the monitor's <a href="/wiki/Invariant_(computer_science)" title="Invariant (computer science)">invariant</a>.</p>
<pre>
 enter the monitor:
    <b>postcondition</b> <span class="texhtml"><i>I</i></span>
</pre>
<pre>
 leave the monitor:
    <b>precondition</b> <span class="texhtml"><i>I</i></span>
</pre>
<pre>
 <b>wait</b> <span class="texhtml"><i>c</i></span> :
    <b>precondition</b> <span class="texhtml"><i>I</i></span>
    <b>modifies</b> the state of the monitor
    <b>postcondition</b> <span class="texhtml"><i>P</i><sub><i>c</i></sub></span> and <span class="texhtml"><i>I</i></span>
</pre>
<pre>
 <b>signal</b> <span class="texhtml"><i>c</i></span> :
    <b>precondition</b> <span class="texhtml"><i>P</i><sub><i>c</i></sub></span> and <span class="texhtml"><i>I</i></span>
    <b>modifies</b> the state of the monitor
    <b>postcondition</b> <span class="texhtml"><i>I</i></span>
</pre>
<pre>
 <b>signal</b> <span class="texhtml"><i>c</i></span> <b>and return</b> :
    <b>precondition</b> <span class="texhtml"><i>P</i><sub><i>c</i></sub></span> and <span class="texhtml"><i>I</i></span>
</pre>
<p>In these contracts, it is assumed that <span class="texhtml"><i>I</i></span> and <span class="texhtml"><i>P</i><sub><i>c</i></sub></span> do not depend on the contents or lengths of any queues.</p>
<p>(When the condition variable can be queried as to the number of threads waiting on its queue, more sophisticated contracts can be given. For example, a useful pair of contracts, allowing occupancy to be passed without establishing the invariant, is</p>
<pre>
 <b>wait</b> <span class="texhtml"><i>c</i></span> :
    <b>precondition</b> <span class="texhtml"><i>I</i></span>
    <b>modifies</b> the state of the monitor
    <b>postcondition</b> <span class="texhtml"><i>P</i><sub><i>c</i></sub></span>
</pre>
<pre>
 <b>signal</b> <span class="texhtml"><i>c</i></span>
    <b>precondition</b> (<b>not</b> empty(<span class="texhtml"><i>c</i></span>) <b>and</b> <span class="texhtml"><i>P</i><sub><i>c</i></sub></span>) <b>or</b> (empty(<span class="texhtml"><i>c</i></span>) <b>and</b> <span class="texhtml"><i>I</i></span>)
    <b>modifies</b> the state of the monitor
    <b>postcondition</b> <span class="texhtml"><i>I</i></span>
</pre>
<p>See Howard<sup id="cite_ref-2" class="reference"><a href="#cite_note-2" title=""><span>[</span>3<span>]</span></a></sup> and Buhr <i>et al,</i><sup id="cite_ref-3" class="reference"><a href="#cite_note-3" title=""><span>[</span>4<span>]</span></a></sup> for more).</p>
<p>It is important to note here that the assertion <span class="texhtml"><i>P</i><sub><i>c</i></sub></span> is entirely up to the programmer; he or she simply needs to be consistent about what it is.</p>
<p>We conclude this section with an example of a blocking monitor that implements a bounded, <a href="/wiki/Thread_safe" title="Thread safe" class="mw-redirect">thread-safe</a> <a href="/wiki/Stack_(data_structure)" title="Stack (data structure)">stack</a>.</p>
<pre>
<b>monitor class</b> <i>SharedStack</i> {
  <b>private const</b> capacity := 10
  <b>private</b> <i>int</i>[capacity] A
  <b>private</b> <i>int</i> size := 0
  <b>invariant</b> 0 &lt;= size <b>and</b> size &lt;= capacity
  <b>private</b> <i>BlockingCondition</i> theStackIsNotEmpty /* <b>associated with</b> 0 &lt; size <b>and</b> size &lt;= capacity */
  <b>private</b> <i>BlockingCondition</i> theStackIsNotFull /* <b>associated with</b> 0 &lt;= size <b>and</b> size &lt; capacity */
  
  <b>public method</b> push(<i>int</i> value)
  {
    <b>if</b> size = capacity <b>then</b> <b>wait</b> theStackIsNotFull 
    <b>assert</b> 0 &lt;= size <b>and</b> size &lt; capacity
    A[size] := value ; size := size + 1
    <b>assert</b> 0 &lt; size <b>and</b> size &lt;= capacity
    <b>signal</b> theStackIsNotEmpty <b>and return</b>
  }
  
  <b>public method</b> <i>int</i> pop()
  {
    <b>if</b> size = 0 <b>then</b> <b>wait</b> theStackIsNotEmpty 
    <b>assert</b> 0 &lt; size <b>and</b> size &lt;= capacity
    size := size - 1 ;
    <b>assert</b> 0 &lt;= size <b>and</b> size &lt; capacity
    <b>signal</b> theStackIsNotFull  <b>and return</b> A[size]
  }
}
</pre>
<p><a name="Nonblocking_condition_variables" id="Nonblocking_condition_variables"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Monitor_(synchronization)&amp;action=edit&amp;section=4" title="Edit section: Nonblocking condition variables">edit</a>]</span> <span class="mw-headline">Nonblocking condition variables</span></h3>
<p>With <i>nonblocking condition variables</i> (also called <i>"Mesa style"</i> condition variables or <i>"signal and continue"</i> condition variables), signaling does not cause the signaling thread to lose occupancy of the monitor. Instead the signaled threads are moved to the <code>e</code> queue. There is no need for the <code>s</code> queue.</p>
<div class="thumb tright">
<div class="thumbinner" style="width:202px;"><a href="/wiki/File:Monitor_(synchronization)-Mesa.png" class="image" title="A Mesa style monitor with two condition variables a and b"><img alt="" src="http://upload.wikimedia.org/wikipedia/en/thumb/1/15/Monitor_%28synchronization%29-Mesa.png/200px-Monitor_%28synchronization%29-Mesa.png" width="200" height="273" border="0" class="thumbimage" /></a>
<div class="thumbcaption">
<div class="magnify"><a href="/wiki/File:Monitor_(synchronization)-Mesa.png" class="internal" title="Enlarge"><img src="/skins-1.5/common/images/magnify-clip.png" width="15" height="11" alt="" /></a></div>
A Mesa style monitor with two condition variables <code>a</code> and <code>b</code></div>
</div>
</div>
<p>With nonblocking condition variables, the <b>signal</b> operation is often called <b>notify</b> — a terminology we will follow here. It is also common to provide a <b>notify all</b> operation that moves all threads waiting on a condition to the <code>e</code> queue.</p>
<p>The meaning of various operations are given here. (We assume that each operation runs in mutual exclusion to the others; thus restarted threads do not begin executing until the operation is complete.)</p>
<pre>
 enter the monitor:
    enter the method
    if the monitor is locked 
      add this thread to e
      block this thread
    else
      lock the monitor
    
 leave the monitor:
    schedule
    return from the method
</pre>
<pre>
 <b>wait</b> <span class="texhtml"><i>c</i></span> :
    add this thread to <span class="texhtml"><i>c</i></span>.q
    schedule
    block this thread
</pre>
<pre>
 <b>notify</b> <span class="texhtml"><i>c</i></span> :
    if there is a thread waiting on <span class="texhtml"><i>c</i></span>.q 
        select and remove one thread t from <span class="texhtml"><i>c</i></span>.q
        (t is called "the notified thread")
        move t to e
</pre>
<pre>
 <b>notify all</b> <span class="texhtml"><i>c</i></span> :
    move all threads waiting on <span class="texhtml"><i>c</i></span>.q to e
</pre>
<pre>
  schedule :
    if there is a thread on e 
      select and remove one thread from e and restart it
    else
      unlock the monitor
</pre>
<p>As a variation on this scheme, the notified thread may by moved to a queue called <code>w</code>, which has priority over <code>e</code>. See Howard<sup id="cite_ref-4" class="reference"><a href="#cite_note-4" title=""><span>[</span>5<span>]</span></a></sup> and Buhr <i>et al.</i><sup id="cite_ref-5" class="reference"><a href="#cite_note-5" title=""><span>[</span>6<span>]</span></a></sup> for further discussion.</p>
<p>It is possible to associate an assertion <span class="texhtml"><i>P</i><sub><i>c</i></sub></span> with each condition variable <span class="texhtml"><i>c</i></span> such that <span class="texhtml"><i>P</i><sub><i>c</i></sub></span> is sure to be true upon return from <code><b>wait</b> <span class="texhtml"><i>c</i></span></code>. However, one must ensure that <span class="texhtml"><i>P</i><sub><i>c</i></sub></span> is preserved from the time the <b>notify</b>ing thread gives up occupancy until the notified thread is selected to re-enter the monitor. Between these times there could be activity by other occupants. Thus is is common for <span class="texhtml"><i>P</i><sub><i>c</i></sub></span> to simply be <i>true</i>.</p>
<p>For this reason, it is usually necessary to enclose each <b>wait</b> operation in a loop like this</p>
<pre>
  <b>while</b> <b>not</b>( <span class="texhtml"><i>P</i></span> ) <b>do</b> <b>wait</b> c
</pre>
<p>where <span class="texhtml"><i>P</i></span> is some assertion stronger than <span class="texhtml"><i>P</i><sub><i>c</i></sub></span>. The operations <code><b>notify</b> <span class="texhtml"><i>c</i></span></code> and <code><b>notify all</b> <span class="texhtml"><i>c</i></span></code> operations are treated as "hints" that <span class="texhtml"><i>P</i></span> may be true for some waiting thread. Every iteration of such a loop past the first represents a lost notification; thus with nonblocking monitors, one must be careful to ensure that too many notifications can not be lost.</p>
<p>As an example of "hinting" consider a bank account in which a withdrawing thread will wait until the account has sufficient funds before proceeding</p>
<pre>
<b>monitor class</b> <i>Account</i> {
  <b>private</b> <i>int</i> balance := 0
  <b>invariant</b> balance &gt;= 0 
  <b>private</b> <i>NonblockingCondition</i> balanceMayBeBigEnough
  
  <b>public method</b> withdraw(<i>int</i> amount)
  {
    <b>if</b> amount &lt; 0 <b>then</b> <b>error</b> "Amount may not be negative"
    <b>else</b> {
       <b>while</b> balance &lt; amount <b>do</b> wait balanceMayBeBigEnough
       <b>assert</b> balance &gt;= amount
       balance := balance - amount }
  }
  
  <b>public method</b> deposit(<i>int</i> amount) {
    <b>if</b> amount &lt; 0 <b>then</b> <b>error</b> "Amount may not be negative"
    <b>else</b> {
        balance := balance + amount
        <b>notify all</b> balanceMayBeBigEnough }
  }
}
</pre>
<p>In this example, the assertion being waited for is a function of the amount to be withdrawn, so it is impossible for a depositing thread to be sure that it has established the assertion. It makes sense in this case to allow each waiting thread into the monitor (one at a time) to check if its assertion is true.</p>
<p><a name="Implicit_condition_monitors" id="Implicit_condition_monitors"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Monitor_(synchronization)&amp;action=edit&amp;section=5" title="Edit section: Implicit condition monitors">edit</a>]</span> <span class="mw-headline">Implicit condition monitors</span></h3>
<div class="thumb tright">
<div class="thumbinner" style="width:202px;"><a href="/wiki/File:Monitor_(synchronization)-Java.png" class="image" title="A Java style monitor"><img alt="" src="http://upload.wikimedia.org/wikipedia/en/thumb/f/f5/Monitor_%28synchronization%29-Java.png/200px-Monitor_%28synchronization%29-Java.png" width="200" height="318" border="0" class="thumbimage" /></a>
<div class="thumbcaption">
<div class="magnify"><a href="/wiki/File:Monitor_(synchronization)-Java.png" class="internal" title="Enlarge"><img src="/skins-1.5/common/images/magnify-clip.png" width="15" height="11" alt="" /></a></div>
A Java style monitor</div>
</div>
</div>
<p>In the <a href="/wiki/Java_programming_language" title="Java programming language" class="mw-redirect">Java programming language</a> each object may be used as a monitor. (However, methods that require mutual exclusion must be explicitly marked as <a href="/wiki/Java_keyword" title="Java keyword" class="mw-redirect"><b>synchronized</b></a>). Rather than having explicit condition variables, each monitor (i.e. object) is equipped with a single wait queue, in addition to its entrance queue. All waiting is done on this single wait queue and all <b>notify</b> and <b>notify all</b> operations apply to this queue.</p>
<p>This approach has also been adopted in other languages such as <a href="/wiki/C_sharp" title="C sharp" class="mw-redirect">C#</a>.</p>
<p><a name="Implicit_signaling" id="Implicit_signaling"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Monitor_(synchronization)&amp;action=edit&amp;section=6" title="Edit section: Implicit signaling">edit</a>]</span> <span class="mw-headline">Implicit signaling</span></h3>
<p>Another approach to signaling is to omit the <b>signal</b> operation. Whenever a thread leaves the monitor (by returning or waiting) the assertions of all waiting threads are evaluated until one is found to be true. In such a system, condition variables are not needed, but the assertions must be explicitly coded. The contract for wait is</p>
<pre>
 <b>wait</b> <span class="texhtml"><i>P</i></span>:
    <b>precondition</b> <span class="texhtml"><i>I</i></span>
    <b>modifies</b> the state of the monitor
    <b>postcondition</b> <span class="texhtml"><i>P</i></span> and <span class="texhtml"><i>I</i></span>
</pre>
<p><br /></p>
<p><a name="History" id="History"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Monitor_(synchronization)&amp;action=edit&amp;section=7" title="Edit section: History">edit</a>]</span> <span class="mw-headline">History</span></h2>
<p><a href="/wiki/C._A._R._Hoare" title="C. A. R. Hoare">C.&#160;A.&#160;R. Hoare</a> and <a href="/wiki/Per_Brinch_Hansen" title="Per Brinch Hansen">Per Brinch Hansen</a> developed the idea of monitors around 1972, based on earlier ideas of their own and of <a href="/wiki/E._W._Dijkstra" title="E. W. Dijkstra" class="mw-redirect">E. W. Dijkstra</a>. <sup id="cite_ref-6" class="reference"><a href="#cite_note-6" title=""><span>[</span>7<span>]</span></a></sup> Brinch Hansen was the first to implement monitors. Hoare developed the theoretical framework and demonstrated their equivalence to <a href="/wiki/Semaphore_(programming)" title="Semaphore (programming)">semaphores</a>.</p>
<p>Monitors were soon used to structure <a href="/wiki/Inter-process_communication" title="Inter-process communication">inter-process communication</a> in the <a href="/w/index.php?title=Solo_Operating_System&amp;action=edit&amp;redlink=1" class="new" title="Solo Operating System (page does not exist)">Solo Operating System</a>.</p>
<p>Programming languages that have supported monitors include</p>
<ul>
<li><a href="/wiki/Ada_(programming_language)" title="Ada (programming language)">Ada</a> 2005 (as protected objects)</li>
<li><a href="/wiki/C_Sharp_(programming_language)" title="C Sharp (programming language)">C#</a> (and other languages that use the <a href="/wiki/.NET_Framework" title=".NET Framework">.NET Framework</a>)</li>
<li><a href="/wiki/Concurrent_Euclid_(programming_language)" title="Concurrent Euclid (programming language)">Concurrent Euclid</a></li>
<li><a href="/wiki/Concurrent_Pascal" title="Concurrent Pascal">Concurrent Pascal</a></li>
<li><a href="/wiki/D_programming" title="D programming" class="mw-redirect">D programming language</a></li>
<li><a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a> (via the synchronized keyword)</li>
<li><a href="/wiki/Mesa_programming_language" title="Mesa programming language" class="mw-redirect">Mesa</a></li>
<li><a href="/wiki/Modula-3" title="Modula-3">Modula-3</a></li>
<li><a href="/wiki/Ruby_(programming_language)" title="Ruby (programming language)">Ruby</a></li>
<li><a href="/wiki/Squeak" title="Squeak">Squeak Smalltalk</a></li>
<li><a href="/wiki/Turing_(programming_language)" title="Turing (programming language)">Turing</a>, <a href="/wiki/Turing_Plus_(programming_language)" title="Turing Plus (programming language)">Turing+</a>, and <a href="/wiki/Object-Oriented_Turing" title="Object-Oriented Turing">Object-Oriented Turing</a></li>
<li><a href="/wiki/%CE%9CC%2B%2B" title="ΜC++">μC++</a></li>
</ul>
<p>A number of libraries have been written that allow monitors to be constructed in languages that do not support them natively. When library calls are used, it is up to the programmer to explicitly mark the start and end of code executed with mutual exclusion. <a href="/wiki/POSIX_Threads" title="POSIX Threads">PThreads</a> is one such library.</p>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Monitor_(synchronization)&amp;action=edit&amp;section=8" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<ul>
<li><a href="/wiki/Mutual_exclusion" title="Mutual exclusion">Mutual exclusion</a></li>
<li><a href="/wiki/Communicating_sequential_processes" title="Communicating sequential processes">Communicating sequential processes</a> - a later development of monitors by <a href="/wiki/C._A._R._Hoare" title="C. A. R. Hoare">C. A. R. Hoare</a></li>
<li><a href="/wiki/Semaphore_(programming)" title="Semaphore (programming)">Semaphore (programming)</a></li>
</ul>
<p><a name="Bibliography" id="Bibliography"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Monitor_(synchronization)&amp;action=edit&amp;section=9" title="Edit section: Bibliography">edit</a>]</span> <span class="mw-headline">Bibliography</span></h2>
<ul>
<li>Monitors: an operating system structuring concept, C. A. R. Hoare - Communications of the ACM, v.17 n.10, p.549-557, Oct. 1974 <a href="http://doi.acm.org/10.1145/355620.361161" class="external autonumber" title="http://doi.acm.org/10.1145/355620.361161" rel="nofollow">[5]</a></li>
<li>Monitor classification P.A. Buhr, M. Fortier, M.H. Coffin - ACM Computing Surveys (CSUR), 1995 <a href="http://doi.acm.org/10.1145/214037.214100" class="external autonumber" title="http://doi.acm.org/10.1145/214037.214100" rel="nofollow">[6]</a></li>
</ul>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Monitor_(synchronization)&amp;action=edit&amp;section=10" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<ul>
<li>"<a href="http://www.acm.org/classics/feb96/" class="external text" title="http://www.acm.org/classics/feb96/" rel="nofollow">Monitors: An Operating System Structuring Concept</a>" by <a href="/wiki/Charles_Antony_Richard_Hoare" title="Charles Antony Richard Hoare" class="mw-redirect">Charles Antony Richard Hoare</a></li>
<li>"<a href="http://portal.acm.org/citation.cfm?id=807647" class="external text" title="http://portal.acm.org/citation.cfm?id=807647" rel="nofollow">Signalling in Monitors</a>" by <a href="/w/index.php?title=John_H._Howard_(Computer_Scientist)&amp;action=edit&amp;redlink=1" class="new" title="John H. Howard (Computer Scientist) (page does not exist)">John H. Howard (Computer Scientist)</a></li>
<li>"<a href="http://doi.acm.org/10.1145/360051.360079" class="external text" title="http://doi.acm.org/10.1145/360051.360079" rel="nofollow">Proving Monitors</a>" by <a href="/w/index.php?title=John_H._Howard_(Computer_Scientist)&amp;action=edit&amp;redlink=1" class="new" title="John H. Howard (Computer Scientist) (page does not exist)">John H. Howard (Computer Scientist)</a></li>
<li>"<a href="http://portal.acm.org/citation.cfm?id=358824" class="external text" title="http://portal.acm.org/citation.cfm?id=358824" rel="nofollow">Experience with Processes and Monitors in Mesa</a>" by <a href="/wiki/Butler_W._Lampson" title="Butler W. Lampson" class="mw-redirect">Butler W. Lampson</a> and <a href="/w/index.php?title=David_D._Redell&amp;action=edit&amp;redlink=1" class="new" title="David D. Redell (page does not exist)">David D. Redell</a></li>
<li><a href="http://www.opengroup.org/onlinepubs/009695399/functions/pthread_cond_wait.html" class="external text" title="http://www.opengroup.org/onlinepubs/009695399/functions/pthread_cond_wait.html" rel="nofollow">pthread_cond_wait</a> - description from the Open Group Base Specifications Issue 6, IEEE Std 1003.1</li>
<li>"<a href="http://gd.tuwien.ac.at/languages/c/programming-dmarshall/node31.html#SECTION003125000000000000000" class="external text" title="http://gd.tuwien.ac.at/languages/c/programming-dmarshall/node31.html#SECTION003125000000000000000" rel="nofollow">Block on a Condition Variable</a>" by <a href="/w/index.php?title=Dave_Marshall_(Computer_Scientist)&amp;action=edit&amp;redlink=1" class="new" title="Dave Marshall (Computer Scientist) (page does not exist)">Dave Marshall (Computer Scientist)</a></li>
<li>"<a href="http://www.cs.wustl.edu/~schmidt/win32-cv-1.html" class="external text" title="http://www.cs.wustl.edu/~schmidt/win32-cv-1.html" rel="nofollow">Strategies for Implementing POSIX Condition Variables on Win32</a>" by <a href="/w/index.php?title=Douglas_C._Schmidt&amp;action=edit&amp;redlink=1" class="new" title="Douglas C. Schmidt (page does not exist)">Douglas C. Schmidt</a> and <a href="/w/index.php?title=Irfan_Pyarali&amp;action=edit&amp;redlink=1" class="new" title="Irfan Pyarali (page does not exist)">Irfan Pyarali</a></li>
<li><a href="http://apr.apache.org/docs/apr/group__apr__thread__cond.html" class="external text" title="http://apr.apache.org/docs/apr/group__apr__thread__cond.html" rel="nofollow">Condition Variable Routines</a> from the <a href="/wiki/Apache_Portable_Runtime" title="Apache Portable Runtime">Apache Portable Runtime</a> Library</li>
<li><a href="http://wxwidgets.org/manuals/2.6.3/wx_wxcondition.html" class="external text" title="http://wxwidgets.org/manuals/2.6.3/wx_wxcondition.html" rel="nofollow">wxCondition description</a></li>
<li><a href="http://www.boost.org/doc/html/thread/synchronization.html#thread.synchronization.condvar_ref" class="external text" title="http://www.boost.org/doc/html/thread/synchronization.html#thread.synchronization.condvar_ref" rel="nofollow">Boost Condition Variables Reference</a></li>
<li><a href="http://zthread.sourceforge.net/html/classZThread_1_1Condition.html" class="external text" title="http://zthread.sourceforge.net/html/classZThread_1_1Condition.html" rel="nofollow">ZThread Condition Class Reference</a></li>
<li><a href="http://wefts.sourceforge.net/wefts-apidoc-0.99c/classWefts_1_1Condition.html" class="external text" title="http://wefts.sourceforge.net/wefts-apidoc-0.99c/classWefts_1_1Condition.html" rel="nofollow">Wefts::Condition Class Reference</a></li>
<li><a href="http://www.dre.vanderbilt.edu/Doxygen/Stable/ace/classACE__Condition.html" class="external text" title="http://www.dre.vanderbilt.edu/Doxygen/Stable/ace/classACE__Condition.html" rel="nofollow">ACE_Condition Class Template Reference</a></li>
<li><a href="http://doc.trolltech.com/latest/qwaitcondition.html" class="external text" title="http://doc.trolltech.com/latest/qwaitcondition.html" rel="nofollow">QWaitCondition Class Reference</a></li>
<li><a href="http://www.gnu.org/software/commoncpp/docs/refman/html/class_conditional.html" class="external text" title="http://www.gnu.org/software/commoncpp/docs/refman/html/class_conditional.html" rel="nofollow">Common C++ Conditional Class Reference</a></li>
<li><a href="http://austria.sourceforge.net/dox/html/classat_1_1ConditionalMutex.html" class="external text" title="http://austria.sourceforge.net/dox/html/classat_1_1ConditionalMutex.html" rel="nofollow">at::ConditionalMutex Class Reference</a></li>
<li><a href="http://perldoc.perl.org/threads/shared.html" class="external text" title="http://perldoc.perl.org/threads/shared.html" rel="nofollow">threads::shared</a> - Perl extension for sharing data structures between threads</li>
<li><a href="http://www.asyncop.net/MTnPDirEnum.aspx?treeviewPath=%5bd%5d+Tutorial%5c%5ba%5d+Multiprocessing+Traps+%26+Pitfalls%5c%5bb%5d+Synchronization+API%5c%5bg%5d+Condition+Variables" class="external text" title="http://www.asyncop.net/MTnPDirEnum.aspx?treeviewPath=%5bd%5d+Tutorial%5c%5ba%5d+Multiprocessing+Traps+%26+Pitfalls%5c%5bb%5d+Synchronization+API%5c%5bg%5d+Condition+Variables" rel="nofollow">Tutorial multiprocessing traps</a></li>
<li><a href="http://msdn.microsoft.com/en-us/library/ms682052(VS.85).aspx" class="external free" title="http://msdn.microsoft.com/en-us/library/ms682052(VS.85).aspx" rel="nofollow">http://msdn.microsoft.com/en-us/library/ms682052(VS.85).aspx</a></li>
</ul>
<p><a name="Notes" id="Notes"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Monitor_(synchronization)&amp;action=edit&amp;section=11" title="Edit section: Notes">edit</a>]</span> <span class="mw-headline">Notes</span></h2>
<div class="references-small">
<ol class="references">
<li id="cite_note-0"><b><a href="#cite_ref-0" title="">^</a></b> Hoare, C. A. R. (1974), "Monitors: an operating system structuring concept". Comm. A.C.M. <b>17(10)</b>, 549–57. <a href="http://doi.acm.org/10.1145/355620.361161" class="external autonumber" title="http://doi.acm.org/10.1145/355620.361161" rel="nofollow">[1]</a></li>
<li id="cite_note-1"><b><a href="#cite_ref-1" title="">^</a></b> Brinch Hansen, P. (1975). "The programming language Concurrent Pascal". IEEE Trans. Softw. Eng. <b>2</b> (June), 199–206.</li>
<li id="cite_note-2"><b><a href="#cite_ref-2" title="">^</a></b> John Howard (1976), "Signaling in monitors". <i>Proceedings of the 2nd International Conference on Software Engineering</i>, 47–52</li>
<li id="cite_note-3"><b><a href="#cite_ref-3" title="">^</a></b> Buhr, P.H; Fortier, M., Coffin, M.H. (1995). "Monitor classification". ACM Computing Surveys (CSUR) <b>27(1)</b>. 63–107. <a href="http://doi.acm.org/10.1145/214037.214100" class="external autonumber" title="http://doi.acm.org/10.1145/214037.214100" rel="nofollow">[2]</a></li>
<li id="cite_note-4"><b><a href="#cite_ref-4" title="">^</a></b> John Howard (1976), "Signaling in monitors". <i>Proceedings of the 2nd International Conference on Software Engineering</i>, 47–52</li>
<li id="cite_note-5"><b><a href="#cite_ref-5" title="">^</a></b> Buhr, P.H; Fortier, M., Coffin, M.H. (1995). "Monitor classification". ACM Computing Surveys (CSUR) <b>27(1)</b>. 63–107. <a href="http://doi.acm.org/10.1145/214037.214100" class="external autonumber" title="http://doi.acm.org/10.1145/214037.214100" rel="nofollow">[3]</a></li>
<li id="cite_note-6"><b><a href="#cite_ref-6" title="">^</a></b> Brinch Hansen, P. (1993). "Monitors and concurrent Pascal: a personal history", <i>The second ACM SIGPLAN conference on History of programming languages</i> 1–35. Also published in <i>ACM SIGPLAN Notices</i> <b>28(3)</b>, March 1993. <a href="http://doi.acm.org/10.1145/154766.155361" class="external autonumber" title="http://doi.acm.org/10.1145/154766.155361" rel="nofollow">[4]</a></li>
</ol>
</div>


<!-- 
NewPP limit report
Preprocessor node count: 423/1000000
Post-expand include size: 133/2048000 bytes
Template argument size: 0/2048000 bytes
Expensive parser function count: 0/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:1367789-0!1!0!default!!en!2 and timestamp 20090325010728 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Monitor_(synchronization)">http://en.wikipedia.org/wiki/Monitor_(synchronization)</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Programming_constructs" title="Category:Programming constructs">Programming constructs</a></span> | <span dir='ltr'><a href="/wiki/Category:Concurrency_control" title="Category:Concurrency control">Concurrency control</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Monitor_(synchronization)" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Monitor_(synchronization)" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Monitor_(synchronization)&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Monitor_(synchronization)&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Monitor_(synchronization)" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/wiki/Special:Search" id="searchform"><div>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Monitor_(synchronization)" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Monitor_(synchronization)" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Monitor_(synchronization)&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Monitor_(synchronization)&amp;oldid=279489136" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Monitor_(synchronization)&amp;id=279489136">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-cs"><a href="http://cs.wikipedia.org/wiki/Monitor_(synchronizace)">Česky</a></li>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/Monitor_(Informatik)">Deutsch</a></li>
				<li class="interwiki-es"><a href="http://es.wikipedia.org/wiki/Monitor_(concurrencia)">Español</a></li>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Moniteur_(informatique)">Français</a></li>
				<li class="interwiki-ko"><a href="http://ko.wikipedia.org/wiki/%EB%AA%A8%EB%8B%88%ED%84%B0_(%EB%8F%99%EA%B8%B0%ED%99%94)">한국어</a></li>
				<li class="interwiki-it"><a href="http://it.wikipedia.org/wiki/Monitor_(sincronizzazione)">Italiano</a></li>
				<li class="interwiki-nl"><a href="http://nl.wikipedia.org/wiki/Monitor_(multiprogrammeren)">Nederlands</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/%E3%83%A2%E3%83%8B%E3%82%BF_(%E5%90%8C%E6%9C%9F)">日本語</a></li>
				<li class="interwiki-pl"><a href="http://pl.wikipedia.org/wiki/Monitor_(programowanie_wsp%C3%B3%C5%82bie%C5%BCne)">Polski</a></li>
				<li class="interwiki-ro"><a href="http://ro.wikipedia.org/wiki/Monitor_(sincronizare)">Română</a></li>
				<li class="interwiki-ru"><a href="http://ru.wikipedia.org/wiki/%D0%9C%D0%BE%D0%BD%D0%B8%D1%82%D0%BE%D1%80_(%D1%81%D0%B8%D0%BD%D1%85%D1%80%D0%BE%D0%BD%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F)">Русский</a></li>
				<li class="interwiki-zh"><a href="http://zh.wikipedia.org/wiki/%E7%9B%A3%E8%A6%96%E5%99%A8_(%E7%A8%8B%E5%BA%8F%E5%90%8C%E6%AD%A5%E5%8C%96)">中文</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 25 March 2009, at 01:07.</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv210 in 0.043 secs. --></body></html>
