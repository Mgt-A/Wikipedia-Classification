<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Actor model,Articles lacking sources from December 2006,Articles with unsourced statements since January 2009,Actor model,2008,64-bit,ActorFoundry,Actor model and process calculi,Actor model and process calculi history,Actor model early history,Actor model implementation" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Actor_model&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Actor_model&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Actor model - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Actor_model";
		var wgTitle = "Actor model";
		var wgAction = "view";
		var wgArticleId = "1637868";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 280195445;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Actor_model skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Actor model</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<table class="metadata plainlinks ambox ambox-style" style="">
<tr>
<td class="mbox-image">
<div style="width: 52px;"><a href="/wiki/File:Ambox_style.png" class="image" title="Ambox style.png"><img alt="" src="http://upload.wikimedia.org/wikipedia/en/d/d6/Ambox_style.png" width="40" height="40" border="0" /></a></div>
</td>
<td class="mbox-text" style="">This article's <b>citation style may be unclear</b>. The references used may be clearer with a different or consistent style of <a href="/wiki/Wikipedia:Citing_sources" title="Wikipedia:Citing sources">citation</a>, <a href="/wiki/Wikipedia:Footnote" title="Wikipedia:Footnote" class="mw-redirect">footnoting</a>, or <a href="/wiki/Wikipedia:External_links" title="Wikipedia:External links">external linking</a>.</td>
</tr>
</table>
<p>In <a href="/wiki/Computer_science" title="Computer science">computer science</a>, the <b>Actor model</b> is a mathematical model of <a href="/wiki/Concurrent_computation" title="Concurrent computation" class="mw-redirect">concurrent computation</a> that treats "actors" as the universal primitives of concurrent digital computation: in response to a message that it receives, an actor can make local decisions, create more actors, send more messages, and determine how to respond to the next message received. The Actor model originates in a 1973 paper by <a href="/wiki/Carl_Hewitt" title="Carl Hewitt">Carl Hewitt</a>, Peter Bishop, and <a href="/w/index.php?title=Richard_Steiger&amp;action=edit&amp;redlink=1" class="new" title="Richard Steiger (page does not exist)">Richard Steiger</a>.<sup id="cite_ref-hewitt1973_0-0" class="reference"><a href="#cite_note-hewitt1973-0" title=""><span>[</span>1<span>]</span></a></sup> It has been used both as a framework for a <a href="/wiki/Actor_model_theory" title="Actor model theory">theoretical understanding</a> of <a href="/wiki/Concurrency_(computer_science)" title="Concurrency (computer science)">concurrency</a>, and as the theoretical basis for several <a href="/wiki/Actor_model_implementation" title="Actor model implementation">practical implementations</a> of <a href="/wiki/Concurrent_systems" title="Concurrent systems" class="mw-redirect">concurrent systems</a>. The relationship of the model to other work is discussed in <a href="/wiki/Indeterminacy_in_concurrent_computation" title="Indeterminacy in concurrent computation">Indeterminacy in concurrent computation</a> and <a href="/wiki/Actor_model_and_process_calculi" title="Actor model and process calculi">Actor model and process calculi</a>.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#History"><span class="tocnumber">1</span> <span class="toctext">History</span></a></li>
<li class="toclevel-1"><a href="#Fundamental_concepts"><span class="tocnumber">2</span> <span class="toctext">Fundamental concepts</span></a></li>
<li class="toclevel-1"><a href="#Formal_systems"><span class="tocnumber">3</span> <span class="toctext">Formal systems</span></a></li>
<li class="toclevel-1"><a href="#Applications"><span class="tocnumber">4</span> <span class="toctext">Applications</span></a></li>
<li class="toclevel-1"><a href="#Models_prior_to_the_Actor_model"><span class="tocnumber">5</span> <span class="toctext">Models prior to the Actor model</span></a>
<ul>
<li class="toclevel-2"><a href="#Lambda_calculus"><span class="tocnumber">5.1</span> <span class="toctext">Lambda calculus</span></a></li>
<li class="toclevel-2"><a href="#Simula"><span class="tocnumber">5.2</span> <span class="toctext">Simula</span></a></li>
<li class="toclevel-2"><a href="#Smalltalk"><span class="tocnumber">5.3</span> <span class="toctext">Smalltalk</span></a></li>
<li class="toclevel-2"><a href="#Petri_nets"><span class="tocnumber">5.4</span> <span class="toctext">Petri nets</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Message-passing_semantics"><span class="tocnumber">6</span> <span class="toctext">Message-passing semantics</span></a>
<ul>
<li class="toclevel-2"><a href="#Unbounded_nondeterminism_controversy"><span class="tocnumber">6.1</span> <span class="toctext">Unbounded nondeterminism controversy</span></a></li>
<li class="toclevel-2"><a href="#Direct_communication_and_asynchrony"><span class="tocnumber">6.2</span> <span class="toctext">Direct communication and asynchrony</span></a></li>
<li class="toclevel-2"><a href="#Actor_creation_plus_addresses_in_messages_means_variable_topology"><span class="tocnumber">6.3</span> <span class="toctext">Actor creation plus addresses in messages means variable topology</span></a></li>
<li class="toclevel-2"><a href="#Inherently_concurrent"><span class="tocnumber">6.4</span> <span class="toctext">Inherently concurrent</span></a></li>
<li class="toclevel-2"><a href="#No_requirement_on_order_of_message_arrival"><span class="tocnumber">6.5</span> <span class="toctext">No requirement on order of message arrival</span></a></li>
<li class="toclevel-2"><a href="#Locality"><span class="tocnumber">6.6</span> <span class="toctext">Locality</span></a></li>
<li class="toclevel-2"><a href="#Composing_actors"><span class="tocnumber">6.7</span> <span class="toctext">Composing actors</span></a></li>
<li class="toclevel-2"><a href="#Behaviors"><span class="tocnumber">6.8</span> <span class="toctext">Behaviors</span></a></li>
<li class="toclevel-2"><a href="#Modeling_other_concurrency_systems"><span class="tocnumber">6.9</span> <span class="toctext">Modeling other concurrency systems</span></a></li>
<li class="toclevel-2"><a href="#Concurrency_Representation_Theorem"><span class="tocnumber">6.10</span> <span class="toctext">Concurrency Representation Theorem</span></a></li>
<li class="toclevel-2"><a href="#Relationship_to_mathematical_logic"><span class="tocnumber">6.11</span> <span class="toctext">Relationship to mathematical logic</span></a></li>
<li class="toclevel-2"><a href="#Migration"><span class="tocnumber">6.12</span> <span class="toctext">Migration</span></a></li>
<li class="toclevel-2"><a href="#Security"><span class="tocnumber">6.13</span> <span class="toctext">Security</span></a></li>
<li class="toclevel-2"><a href="#Synthesizing_addresses_of_actors"><span class="tocnumber">6.14</span> <span class="toctext">Synthesizing addresses of actors</span></a></li>
<li class="toclevel-2"><a href="#Contrast_with_other_models_of_message-passing_concurrency"><span class="tocnumber">6.15</span> <span class="toctext">Contrast with other models of message-passing concurrency</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Current_importance"><span class="tocnumber">7</span> <span class="toctext">Current importance</span></a></li>
<li class="toclevel-1"><a href="#Actor_researchers"><span class="tocnumber">8</span> <span class="toctext">Actor researchers</span></a>
<ul>
<li class="toclevel-2"><a href="#Programming_with_Actors"><span class="tocnumber">8.1</span> <span class="toctext">Programming with Actors</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">9</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">10</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1"><a href="#Further_reading"><span class="tocnumber">11</span> <span class="toctext">Further reading</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">12</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="History" id="History"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Actor_model&amp;action=edit&amp;section=1" title="Edit section: History">edit</a>]</span> <span class="mw-headline">History</span></h2>
<div class="rellink noprint relarticle mainarticle">Main article: <a href="/wiki/History_of_the_Actor_model" title="History of the Actor model">History of the Actor model</a></div>
<p>Unlike previous models of computation, the Actor model was inspired by <a href="/wiki/Physical_law" title="Physical law">physical laws</a>. It was also influenced by the programming languages <a href="/wiki/Lisp_programming_language" title="Lisp programming language" class="mw-redirect">Lisp</a>, <a href="/wiki/Simula" title="Simula">Simula</a> and early versions of <a href="/wiki/Smalltalk" title="Smalltalk">Smalltalk</a>, as well as <a href="/wiki/Capability_(computers)" title="Capability (computers)" class="mw-redirect">capability-based systems</a> and <a href="/wiki/Packet_switching" title="Packet switching">packet switching</a>. Its development was "motivated by the prospect of highly parallel computing machines consisting of dozens, hundreds or even thousands of independent microprocessors, each with its own local memory and communications processor, communicating via a high-performance communications network."<sup id="cite_ref-clinger1981_1-0" class="reference"><a href="#cite_note-clinger1981-1" title=""><span>[</span>2<span>]</span></a></sup> Since that time, the advent of massive concurrency through <a href="/wiki/Multi-core_(computing)" title="Multi-core (computing)" class="mw-redirect">multi-core</a> computer architectures has rekindled interest in the Actor model.</p>
<p>Following Hewitt, Bishop, and Steiger's 1973 publication, Irene Greif developed an <a href="/wiki/Operational_semantics" title="Operational semantics">operational semantics</a> for the Actors model as part of her doctoral research.<sup id="cite_ref-greif1975_2-0" class="reference"><a href="#cite_note-greif1975-2" title=""><span>[</span>3<span>]</span></a></sup> Two years later, <a href="/wiki/Henry_Baker_(computer_scientist)" title="Henry Baker (computer scientist)">Henry Baker</a> and Hewitt published a set of axiomatic laws for Actor systems.<sup id="cite_ref-baker1977_3-0" class="reference"><a href="#cite_note-baker1977-3" title=""><span>[</span>4<span>]</span></a></sup> Other major milestones include <a href="/wiki/William_Clinger_(computer_scientist)" title="William Clinger (computer scientist)">William Clinger's</a> dissertation, in 1981, introducing a <a href="/wiki/Denotational_semantics_of_the_Actor_model" title="Denotational semantics of the Actor model">denotational semantics</a> based on power domains,<sup id="cite_ref-clinger1981_1-1" class="reference"><a href="#cite_note-clinger1981-1" title=""><span>[</span>2<span>]</span></a></sup> and <a href="/wiki/Gul_Agha_(computer_scientist)" title="Gul Agha (computer scientist)">Gul Agha</a>'s 1985 dissertation which further developed a transition-based semantic model complementary to Clinger's.<sup id="cite_ref-agha1986_4-0" class="reference"><a href="#cite_note-agha1986-4" title=""><span>[</span>5<span>]</span></a></sup> This resulted in the full development of <a href="/wiki/Actor_model_theory" title="Actor model theory">actor model theory</a>.</p>
<p>Major software implementation work was done by Russ Atkinson, Beppe Attardi, Henry Baker, Gerry Barber, Peter Bishop, Peter de Jong, Ken Kahn, Henry Lieberman, Carl Manning, Tom Reinhardt, Richard Steiger, and Dan Theriault, in the Message Passing Semantics Group at <a href="/wiki/Massachusetts_Institute_of_Technology" title="Massachusetts Institute of Technology">Massachusetts Institute of Technology</a> (MIT). Research groups led by Chuck Seitz at <a href="/wiki/California_Institute_of_Technology" title="California Institute of Technology">California Institute of Technology</a> (Caltech) and Bill Dally at MIT constructed computer architectures that further developed the message passing in the model. See <a href="/wiki/Actor_model_implementation" title="Actor model implementation">Actor model implementation</a>.</p>
<p>Research on the Actor model has been carried out at Caltech Computer Science, <a href="/wiki/Kyoto_University" title="Kyoto University">Kyoto University</a> Tokoro Laboratory, <a href="/wiki/Microelectronics_and_Computer_Technology_Corporation" title="Microelectronics and Computer Technology Corporation">MCC</a>, <a href="/wiki/MIT_Artificial_Intelligence_Laboratory" title="MIT Artificial Intelligence Laboratory" class="mw-redirect">MIT Artificial Intelligence Laboratory</a>, <a href="/wiki/SRI_International" title="SRI International">SRI</a>, <a href="/wiki/Stanford_University" title="Stanford University">Stanford University</a>, <a href="/wiki/University_of_Illinois_at_Urbana-Champaign" title="University of Illinois at Urbana-Champaign">University of Illinois at Urbana-Champaign</a> <a href="http://osl.cs.uiuc.edu" class="external text" title="http://osl.cs.uiuc.edu" rel="nofollow">Open Systems Laboratory</a>, <a href="/wiki/University_of_Paris" title="University of Paris">University of Paris</a> 6, <a href="/wiki/University_of_Pisa" title="University of Pisa">University of Pisa</a>, <a href="/wiki/University_of_Tokyo" title="University of Tokyo">University of Tokyo</a> Yonezawa Laboratory and elsewhere.</p>
<p><a name="Fundamental_concepts" id="Fundamental_concepts"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Actor_model&amp;action=edit&amp;section=2" title="Edit section: Fundamental concepts">edit</a>]</span> <span class="mw-headline">Fundamental concepts</span></h2>
<p>The Actor model adopts the philosophy that <i>everything is an actor</i>. This is similar to the <i>everything is an object</i> philosophy used by some <a href="/wiki/Object-oriented_programming" title="Object-oriented programming">object-oriented programming languages</a>, but differs in that object-oriented software is typically executed sequentially, while the Actor model is inherently concurrent.</p>
<p>An actor is a computational entity that, in response to a message it receives, can concurrently:</p>
<ul>
<li>send a finite number of messages to other actors;</li>
<li>create a finite number of new actors;</li>
<li>designate the behavior to be used for the next message it receives.</li>
</ul>
<p>There is no assumed sequence to the above actions and they could be carried out in parallel.</p>
<p>Communications among actors occur asynchronously: that is, the sending actor does not wait until the message is received before proceeding with computation.</p>
<p>Recipients of messages are identified by address, sometimes called "mailing address". Thus an actor can only communicate with actors whose addresses it has. It can obtain those from a message it receives, or if the address is for an actor it just created.</p>
<p>The Actor model is characterized by inherent concurrency of computation within and among actors, dynamic creation of actors, inclusion of actor addresses in messages, and interaction only through direct asynchronous <a href="/wiki/Message_passing" title="Message passing">message passing</a> with no restriction on message arrival order.</p>
<p><a name="Formal_systems" id="Formal_systems"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Actor_model&amp;action=edit&amp;section=3" title="Edit section: Formal systems">edit</a>]</span> <span class="mw-headline">Formal systems</span></h2>
<p>Over the years, several different formal systems have been developed which permit reasoning about systems in the Actor model. These include:</p>
<ul>
<li><a href="/wiki/Operational_semantics" title="Operational semantics">Operational semantics</a><sup id="cite_ref-greif1975_2-1" class="reference"><a href="#cite_note-greif1975-2" title=""><span>[</span>3<span>]</span></a></sup><sup id="cite_ref-agha1993_5-0" class="reference"><a href="#cite_note-agha1993-5" title=""><span>[</span>6<span>]</span></a></sup></li>
<li>Laws for Actor systems<sup id="cite_ref-baker1977_3-1" class="reference"><a href="#cite_note-baker1977-3" title=""><span>[</span>4<span>]</span></a></sup></li>
<li><a href="/wiki/Denotational_semantics" title="Denotational semantics">Denotational semantics</a><sup id="cite_ref-clinger1981_1-2" class="reference"><a href="#cite_note-clinger1981-1" title=""><span>[</span>2<span>]</span></a></sup><sup id="cite_ref-hewitt2006_6-0" class="reference"><a href="#cite_note-hewitt2006-6" title=""><span>[</span>7<span>]</span></a></sup></li>
<li>Transition semantics<sup id="cite_ref-agha1986_4-1" class="reference"><a href="#cite_note-agha1986-4" title=""><span>[</span>5<span>]</span></a></sup></li>
</ul>
<p>There are also formalisms that are not fully faithful to the Actor model in that they do not formalize the guaranteed delivery of messages including the following (See <a href="/wiki/Actor_model_later_history#Attempts_to_relate_Actor_semantics_to_algebra_and_linear_logic" title="Actor model later history">Attempts to relate Actor semantics to algebra and linear logic</a>):</p>
<ul>
<li>Several different Actor algebras<sup id="cite_ref-gaspari1997_7-0" class="reference"><a href="#cite_note-gaspari1997-7" title=""><span>[</span>8<span>]</span></a></sup><sup id="cite_ref-gaspari1999_8-0" class="reference"><a href="#cite_note-gaspari1999-8" title=""><span>[</span>9<span>]</span></a></sup><sup id="cite_ref-agha2004_9-0" class="reference"><a href="#cite_note-agha2004-9" title=""><span>[</span>10<span>]</span></a></sup></li>
<li>Linear logic<sup id="cite_ref-darlington1994_10-0" class="reference"><a href="#cite_note-darlington1994-10" title=""><span>[</span>11<span>]</span></a></sup></li>
</ul>
<p><a name="Applications" id="Applications"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Actor_model&amp;action=edit&amp;section=4" title="Edit section: Applications">edit</a>]</span> <span class="mw-headline">Applications</span></h2>
<table class="metadata plainlinks ambox ambox-content" style="">
<tr>
<td class="mbox-image">
<div style="width: 52px;"><a href="/wiki/File:Question_book-new.svg" class="image" title="Question book-new.svg"><img alt="" src="http://upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/50px-Question_book-new.svg.png" width="50" height="39" border="0" /></a></div>
</td>
<td class="mbox-text" style="">This article <b>does not <a href="/wiki/Wikipedia:Citing_sources" title="Wikipedia:Citing sources">cite</a> any <a href="/wiki/Wikipedia:Verifiability" title="Wikipedia:Verifiability">references or sources</a></b>. Please help <a href="http://en.wikipedia.org/w/index.php?title=Actor_model&amp;action=edit" class="external text" title="http://en.wikipedia.org/w/index.php?title=Actor_model&amp;action=edit" rel="nofollow">improve this article</a> by adding citations to <a href="/wiki/Wikipedia:Reliable_sources" title="Wikipedia:Reliable sources">reliable sources</a> (ideally, using <i><a href="/wiki/Wikipedia:Footnotes" title="Wikipedia:Footnotes">inline citations</a></i>). Unsourced material may be <a href="/wiki/Template:Fact" title="Template:Fact">challenged</a> and <a href="/wiki/Wikipedia:BURDEN" title="Wikipedia:BURDEN" class="mw-redirect">removed</a>. <small><i>(December 2006)</i></small></td>
</tr>
</table>
<p>The Actors model can be used as a framework for modelling, understanding, and reasoning about, a wide range of <a href="/wiki/Concurrent_systems" title="Concurrent systems" class="mw-redirect">concurrent systems</a>. For example:</p>
<ul>
<li><a href="/wiki/Electronic_mail" title="Electronic mail" class="mw-redirect">Electronic mail</a> (e-mail) can be modeled as an Actor system. Accounts are modeled as Actors and <a href="/wiki/E-mail_address" title="E-mail address">email addresses</a> as Actor addresses.</li>
<li><a href="/wiki/Web_Services" title="Web Services" class="mw-redirect">Web Services</a> can be modeled with <a href="/wiki/SOAP" title="SOAP">SOAP</a> endpoints modeled as Actor addresses.</li>
<li>Objects with <a href="/wiki/Lock_(computer_science)" title="Lock (computer science)">locks</a> (<i>e.g.</i> as in <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a> and <a href="/wiki/C_Sharp_(programming_language)" title="C Sharp (programming language)">C#</a>) can be modeled as a <b>Serializer</b>, provided that their implementations are such that messages can continually arrive (perhaps by being stored in an internal queue). A serializer is an important kind of Actor defined by the property that it is continually available to the arrival of new messages; every message sent to a serializer is guaranteed to arrive.</li>
<li>Testing and Test Control Notation (<a href="/wiki/TTCN" title="TTCN">TTCN</a>), both TTCN-2 and <a href="/wiki/TTCN-3" title="TTCN-3">TTCN-3</a>, follows Actor model rather closely. In TTCN, Actor is a test component: either parallel test component (PTC) or main test component (MTC). Test components can send and receive messages to and from remote partners (peer test components or test system interface), the latter being identified by its address. Each test component has a behaviour tree bound to it; test components run in parallel and can be dynamically created by parent test components. Builtin language constructs allow to define actions to be taken when an expected message is received from the internal message queue, like sending a message to another peer entity or creating new test components.</li>
</ul>
<p><a name="Models_prior_to_the_Actor_model" id="Models_prior_to_the_Actor_model"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Actor_model&amp;action=edit&amp;section=5" title="Edit section: Models prior to the Actor model">edit</a>]</span> <span class="mw-headline">Models prior to the Actor model</span></h2>
<p>The Actor model builds on previous models of computation.</p>
<p><a name="Lambda_calculus" id="Lambda_calculus"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Actor_model&amp;action=edit&amp;section=6" title="Edit section: Lambda calculus">edit</a>]</span> <span class="mw-headline">Lambda calculus</span></h3>
<p>The <a href="/wiki/Lambda_calculus" title="Lambda calculus">lambda calculus</a> of <a href="/wiki/Alonzo_Church" title="Alonzo Church">Alonzo Church</a> can be viewed as the earliest <a href="/wiki/Message_passing" title="Message passing">message passing</a> <a href="/wiki/Programming_language" title="Programming language">programming language</a> (see Hewitt, Bishop, and Steiger 1973; <a href="/wiki/Structure_and_Interpretation_of_Computer_Programs" title="Structure and Interpretation of Computer Programs">Abelson and Sussman 1985</a>). For example the lambda expression below implements a tree data structure when supplied with parameters for a <tt>leftSubTree</tt> and <tt>rightSubTree</tt>. When such a tree is given a parameter message <tt>"getLeft"</tt>, it returns <tt>leftSubTree</tt> and likewise when given the message <tt>"getRight"</tt> it returns <tt>rightSubTree</tt>.</p>
<pre>
 λ(leftSubTree,rightSubTree)
   λ(message)
     <i>if</i> (message == "getLeft") <i>then</i> leftSubTree
     <i>else if</i> (message == "getRight") <i>then</i> rightSubTree
</pre>
<p>However, the semantics of the lambda calculus were expressed using <a href="/wiki/Mathematical_logic" title="Mathematical logic">variable substitution</a> in which the values of parameters were substituted into the body of an invoked lambda expression. The substitution model is unsuitable for concurrency because it does not allow the capability of <a href="/wiki/Sharing" title="Sharing">sharing</a> of changing resources. Inspired by the lambda calculus, the <a href="/wiki/Interpreter_(computing)" title="Interpreter (computing)">interpreter</a> for the programming language <a href="/wiki/Lisp_programming_language" title="Lisp programming language" class="mw-redirect">Lisp</a> made use of a data structure called an environment so that the values of parameters did not have to be substituted into the body of an invoked lambda expression. This allowed for sharing of the <a href="/wiki/Side-effect_(computer_science)" title="Side-effect (computer science)" class="mw-redirect">effects</a> of updating shared data structures but did not provide for concurrency.</p>
<p><a name="Simula" id="Simula"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Actor_model&amp;action=edit&amp;section=7" title="Edit section: Simula">edit</a>]</span> <span class="mw-headline">Simula</span></h3>
<p><a href="/wiki/SIMULA" title="SIMULA" class="mw-redirect">Simula 67</a> pioneered using message passing for computation, motivated by discrete event simulation applications. These applications had become large and unmodular in previous simulation languages. At each time step, a large central program would have to go through and update the state of each simulation object that changed depending on the state of which ever simulation objects that it interacted with on that step. <a href="/wiki/Kristen_Nygaard" title="Kristen Nygaard">Kristen Nygaard</a> and <a href="/wiki/Ole-Johan_Dahl" title="Ole-Johan Dahl">Ole-Johan Dahl</a> developed the idea (first described in an IFIP workshop in 1967) of having <a href="/wiki/Method_(computer_science)" title="Method (computer science)">methods</a> on each <a href="/wiki/Object_(computer_science)" title="Object (computer science)">object</a> that would update its own local state based on messages from other objects. In addition they introduced a <a href="/wiki/Class_(computer_science)" title="Class (computer science)">class structure</a> for objects with <a href="/wiki/Inheritance_(object-oriented_programming)" title="Inheritance (object-oriented programming)" class="mw-redirect">inheritance</a>. Their innovations considerably improved the modularity of programs.</p>
<p>However, Simula used <a href="/wiki/Coroutine" title="Coroutine">coroutine</a> control structure instead of true concurrency.</p>
<p><a name="Smalltalk" id="Smalltalk"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Actor_model&amp;action=edit&amp;section=8" title="Edit section: Smalltalk">edit</a>]</span> <span class="mw-headline">Smalltalk</span></h3>
<p><a href="/wiki/Alan_Kay" title="Alan Kay">Alan Kay</a> was influenced by message passing in the pattern-directed invocation of <a href="/wiki/Planner_programming_language" title="Planner programming language" class="mw-redirect">Planner</a> in developing <a href="/wiki/Smalltalk" title="Smalltalk">Smalltalk</a>-71. Hewitt was intrigued by Smalltalk-71 but was put off by the complexity of communication that included invocations with many fields including <i>global</i>, <i>sender</i>, <i>receiver</i>, <i>reply-style</i>, <i>status</i>, <i>reply</i>, <i>operator selector</i>, <i>etc.</i></p>
<p>In 1972 Kay visited MIT and discussed some of his ideas for Smalltalk-72 building on the <a href="/wiki/Logo_programming_language" title="Logo programming language" class="mw-redirect">Logo</a> work of <a href="/wiki/Seymour_Papert" title="Seymour Papert">Seymour Papert</a> and the "little person" model of computation used for teaching children to program. However, the message passing of Smalltalk-72 was quite complex. Code in the language was viewed by the interpreter as simply a stream of tokens. As <a href="/wiki/Dan_Ingalls" title="Dan Ingalls" class="mw-redirect">Dan Ingalls</a> later described it:</p>
<dl>
<dd><i>The first (token) encountered (in a program) was looked up in the dynamic context, to determine the receiver of the subsequent message. The name lookup began with the class dictionary of the current activation. Failing there, it moved to the sender of that activation and so on up the sender chain. When a binding was finally found for the token, its value became the receiver of a new message, and the interpreter activated the code for that object's class.</i></dd>
</dl>
<p>This led some to believe that a new mathematical model of concurrent computation based on message passing should be simpler than Smalltalk-72.</p>
<p>Subsequent versions of the Smalltalk language largely followed the path of using the virtual <a href="/wiki/Method_(computer_science)" title="Method (computer science)">methods</a> of Simula in the message passing structure of programs. However Smalltalk-72 made primitives such as integers, floating point numbers, <i>etc.</i> into <a href="/wiki/Object_(computer_science)" title="Object (computer science)">objects</a>. The authors of Simula had considered making such primitives into objects but refrained largely for efficiency reasons. <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a> at first used the expedient of having both primitive and object versions of integers, floating point numbers, <i>etc.</i> The <a href="/wiki/C_Sharp_(programming_language)" title="C Sharp (programming language)">C#</a> programming language (and later versions of Java, starting with Java 1.5) adopted the less elegant solution of using <i><a href="/wiki/Boxing_(computer_science)" title="Boxing (computer science)" class="mw-redirect">boxing</a></i> and <i>unboxing</i>, a variant of which had been used earlier in some <a href="/wiki/Lisp_programming_language" title="Lisp programming language" class="mw-redirect">Lisp</a> implementations.</p>
<p>The Smalltalk system went on to become very influential, innovating in bitmap displays, personal computing, the class browser interface, and many other ways. For details see Kay's <i>The Early History of Smalltalk</i><sup id="cite_ref-kay1996_11-0" class="reference"><a href="#cite_note-kay1996-11" title=""><span>[</span>12<span>]</span></a></sup>. Meanwhile the Actor efforts at MIT remained focused on developing the science and engineering of higher level concurrency. (See the paper by Jean-Pierre Briot for ideas that were developed later on how to incorporate some kinds of Actor concurrency into later versions of Smalltalk.)</p>
<p><a name="Petri_nets" id="Petri_nets"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Actor_model&amp;action=edit&amp;section=9" title="Edit section: Petri nets">edit</a>]</span> <span class="mw-headline">Petri nets</span></h3>
<p>Prior to the development of the Actor model, <a href="/wiki/Petri_net" title="Petri net">Petri nets</a> were widely used to model nondeterministic computation. However, they were widely acknowledged to have an important limitation: they modeled control flow but not data flow. Consequently they were not readily composable thereby limiting their modularity. Hewitt pointed out another difficulty with Petri nets: simultaneous action. <i>I.e.</i>, the atomic step of computation in Petri nets is a transition in which tokens <i>simultaneously</i> disappear from the input places of a transition and appear in the output places. The physical basis of using a primitive with this kind of simultaneity seemed questionable to him. Despite these apparent difficulties, Petri nets continue to be a popular approach to modelling concurrency, and are still the subject of active research.</p>
<p><a name="Message-passing_semantics" id="Message-passing_semantics"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Actor_model&amp;action=edit&amp;section=10" title="Edit section: Message-passing semantics">edit</a>]</span> <span class="mw-headline">Message-passing semantics</span></h2>
<p>The Actor model is about the semantics of message passing.</p>
<p><a name="Unbounded_nondeterminism_controversy" id="Unbounded_nondeterminism_controversy"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Actor_model&amp;action=edit&amp;section=11" title="Edit section: Unbounded nondeterminism controversy">edit</a>]</span> <span class="mw-headline">Unbounded nondeterminism controversy</span></h3>
<p>Arguably, the first concurrent programs were <a href="/wiki/Interrupt_handler" title="Interrupt handler">interrupt handlers</a>. During the course of its normal operation, a computer needed to be able to receive information from outside (characters from a keyboard, packets from a network, <i>etc</i>.). So when the information arrived, execution of the computer was "interrupted" and special code called an interrupt handler was called to <i>put</i> the information in a <a href="/wiki/Buffer_(computer_science)" title="Buffer (computer science)" class="mw-redirect">buffer</a> where it could be subsequently retrieved.</p>
<p>In the early 1960s, interrupts began to be used to simulate the concurrent execution of several programs on a single processor.<sup id="cite_ref-12" class="reference"><a href="#cite_note-12" title=""><span>[</span>13<span>]</span></a></sup> Having concurrency with <a href="/wiki/Shared_memory" title="Shared memory">shared memory</a> gave rise to the problem of <a href="/wiki/Concurrency_control" title="Concurrency control">concurrency control</a>. Originally, this problem was conceived as being one of <a href="/wiki/Mutual_exclusion" title="Mutual exclusion">mutual exclusion</a> on a single computer. <a href="/wiki/Edsger_Dijkstra" title="Edsger Dijkstra" class="mw-redirect">Edsger Dijkstra</a> developed <a href="/wiki/Semaphore_(programming)" title="Semaphore (programming)">semaphores</a> and later, between 1971 and 1973<sup id="cite_ref-13" class="reference"><a href="#cite_note-13" title=""><span>[</span>14<span>]</span></a></sup>, <a href="/wiki/Tony_Hoare" title="Tony Hoare" class="mw-redirect">Tony Hoare</a><sup id="cite_ref-14" class="reference"><a href="#cite_note-14" title=""><span>[</span>15<span>]</span></a></sup> and <a href="/wiki/Per_Brinch_Hansen" title="Per Brinch Hansen">Per Brinch Hansen</a><sup id="cite_ref-15" class="reference"><a href="#cite_note-15" title=""><span>[</span>16<span>]</span></a></sup> developed <a href="/wiki/Monitor_(synchronization)" title="Monitor (synchronization)">monitors</a> to solve the mutual exclusion problem. However, neither of these solutions provided a programming language construct that encapsulated access to shared resources. This encapsulation was later accomplished by the <a href="/w/index.php?title=Serializer_construct&amp;action=edit&amp;redlink=1" class="new" title="Serializer construct (page does not exist)">serializer construct</a> ([Hewitt and Atkinson 1977, 1979] and [Atkinson 1980]).</p>
<p>The first models of computation (<i>e.g.</i> <a href="/wiki/Turing_machines" title="Turing machines" class="mw-redirect">Turing machines</a>, Post productions, the <a href="/wiki/Lambda_calculus" title="Lambda calculus">lambda calculus</a>, <i>etc.</i>) were based on mathematics and made use of a global state to represent a computational <i>step</i> (later generalized in [McCarthy and Hayes 1969] and [Dijkstra 1976] see <a href="/wiki/Actor_model_early_history#Event_orderings_versus_global_state" title="Actor model early history" class="mw-redirect">Event orderings versus global state</a>). Each computational step was from one global state of the computation to the next global state. The global state approach was continued in <a href="/wiki/Automata_theory" title="Automata theory">automata theory</a> for <a href="/wiki/Finite_state_machine" title="Finite state machine" class="mw-redirect">finite state</a> machines and <a href="/wiki/Stack_machine" title="Stack machine">push down stack</a> machines, including their <a href="/wiki/Nondeterministic" title="Nondeterministic" class="mw-redirect">nondeterministic</a> versions. Such nondeterministic automata have the property of <a href="/wiki/Unbounded_nondeterminism" title="Unbounded nondeterminism">bounded nondeterminism</a>; that is, if a machine always halts when started in its initial state, then there is a bound on the number of states in which it halts.</p>
<p><a href="/wiki/Edsger_Dijkstra" title="Edsger Dijkstra" class="mw-redirect">Edsger Dijkstra</a> further developed the nondeterministic global state approach. Dijkstra's model gave rise to a controversy concerning <i>unbounded nondeterminism.</i> <a href="/wiki/Unbounded_nondeterminism" title="Unbounded nondeterminism">Unbounded nondeterminism</a> (also called <i>unbounded indeterminacy</i>), is a property of <a href="/wiki/Concurrency_(computer_science)" title="Concurrency (computer science)">concurrency</a> by which the amount of delay in servicing a request can become unbounded as a result of arbitration of contention for shared resources <i>while still guaranteeing that the request will eventually be serviced</i>. Hewitt argued that the Actor model should provide the guarantee of service. In Dijkstra's model, although there could be an unbounded amount of time between the execution of sequential instructions on a computer, a (parallel) program that started out in a well defined state could terminate in only a bounded number of states [Dijkstra 1976]. Consequently, his model could not provide the guarantee of service. Dijkstra argued that it was impossible to implement unbounded nondeterminism.</p>
<p>Hewitt argued otherwise: there is no bound that can be placed on how long it takes a computational circuit called an <a href="/wiki/Arbiter_(electronics)" title="Arbiter (electronics)"><i>arbiter</i></a> to settle (see <a href="/wiki/Metastability_in_electronics" title="Metastability in electronics">metastability in electronics</a>). Arbiters are used in computers to deal with the circumstance that computer clocks operate asynchronously with input from outside, <i>e.g.</i> keyboard input, disk access, network input, <i>etc.</i> So it could take an unbounded time for a message sent to a computer to be received and in the meantime the computer could traverse an unbounded number of states.</p>
<p>The Actor Model features unbounded nondeterminism which was captured in a mathematical model by Will Clinger using <a href="/wiki/Domain_theory" title="Domain theory">domain theory</a>.<sup id="cite_ref-clinger1981_1-3" class="reference"><a href="#cite_note-clinger1981-1" title=""><span>[</span>2<span>]</span></a></sup> There is no global state in the Actor model.</p>
<p><a name="Direct_communication_and_asynchrony" id="Direct_communication_and_asynchrony"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Actor_model&amp;action=edit&amp;section=12" title="Edit section: Direct communication and asynchrony">edit</a>]</span> <span class="mw-headline">Direct communication and asynchrony</span></h3>
<p>Messages in the Actor model are not necessarily buffered. This was a sharp break with previous approaches to models of concurrent computation. The lack of buffering caused a great deal of misunderstanding at the time of the development of the Actor model and is still a controversial issue. Some researchers argued that the messages are buffered in the "ether" or the "environment". Also, messages in the Actor model are simply sent (like <a href="/wiki/Packet_(information_technology)" title="Packet (information technology)">packets</a> in <a href="/wiki/Internet_Protocol" title="Internet Protocol">IP</a>); there is no requirement for a synchronous handshake with the recipient.</p>
<p><a name="Actor_creation_plus_addresses_in_messages_means_variable_topology" id="Actor_creation_plus_addresses_in_messages_means_variable_topology"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Actor_model&amp;action=edit&amp;section=13" title="Edit section: Actor creation plus addresses in messages means variable topology">edit</a>]</span> <span class="mw-headline">Actor creation plus addresses in messages means variable topology</span></h3>
<p>A natural development of the Actor model was to allow addresses in messages. Influenced by <a href="/wiki/Packet_switching" title="Packet switching">packet switched networks</a> [1961 and 1964], Hewitt proposed the development of a new model of concurrent computation in which communications would not have any required fields at all: they could be empty. Of course, if the sender of a communication desired a recipient to have access to addresses which the recipient did not already have, the address would have to be sent in the communication.</p>
<p>A computation might need to send a message to a recipient from which it would later receive a response. The way to do this is to send a communication which has the message along with the address of another actor called the <i>resumption</i> (sometimes also called <a href="/wiki/Continuation" title="Continuation">continuation</a> or <a href="/wiki/Stack_frame" title="Stack frame" class="mw-redirect">stack frame</a>) along with the message. The recipient could then cause a response message to be sent to the resumption.</p>
<p>Actor creation plus the inclusion of the addresses of actors in messages means that Actors have a potentially variable topology in their relationship to one another much as the objects in Simula also had a variable topology in their relationship to one another.</p>
<p><a name="Inherently_concurrent" id="Inherently_concurrent"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Actor_model&amp;action=edit&amp;section=14" title="Edit section: Inherently concurrent">edit</a>]</span> <span class="mw-headline">Inherently concurrent</span></h3>
<p>As opposed to the previous approach based on composing sequential processes, the Actor model was developed as an inherently concurrent model. In the Actor model sequentiality was a special case that derived from concurrent computation as explained in <a href="/wiki/Actor_model_theory" title="Actor model theory">Actor model theory</a>.</p>
<p><a name="No_requirement_on_order_of_message_arrival" id="No_requirement_on_order_of_message_arrival"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Actor_model&amp;action=edit&amp;section=15" title="Edit section: No requirement on order of message arrival">edit</a>]</span> <span class="mw-headline">No requirement on order of message arrival</span></h3>
<p>Hewitt argued against adding the requirement that messages must arrive in the order in which they are sent to the Actor model. If output message ordering is desired then it can be modeled by a queue Actor that provides this functionality. Such a queue Actor would queue the messages that arrived so that they could be retrieved in <a href="/wiki/FIFO" title="FIFO" class="mw-redirect">FIFO</a> order. So if an Actor <tt>X</tt> sent a message <tt>M1</tt> to an Actor <tt>Y</tt> and in response to a subsequent message that <tt>X</tt> received, it sent another message <tt>M2</tt> to <tt>Y</tt>, there is no requirement that <tt>M1</tt> arrives at <tt>Y</tt> before <tt>M2</tt>.</p>
<p>In this respect the Actor model mirrors <a href="/wiki/Packet_switching" title="Packet switching">packet switching</a> systems which do not guarantee that packets must be received in the order sent. Not providing the order of delivery guarantee allows packet switching to buffer packets, use multiple paths to send packets, resend damaged packets, and to provide other optimizations.</p>
<p>For example, Actors are allowed to pipeline the processing of messages. What this means is that in the course of processing a message <tt>M1</tt>, an Actor can designate the behavior to be used to process the next message, and then in fact begin processing another message <tt>M2</tt> before it has finished processing <tt>M1</tt>. Just because an Actor is allowed to pipeline the processing of messages does not mean that it <i>must</i> pipeline the processing. Whether a message is pipelined is an engineering tradeoff. How would an external observer know whether the processing of a message by an Actor has been pipelined? There is no ambiguity in the definition of an Actor created by the possibility of pipelining. Of course, it is possible to perform the pipeline optimization incorrectly in some implementations, in which case unexpected behavior may occur.</p>
<p><a name="Locality" id="Locality"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Actor_model&amp;action=edit&amp;section=16" title="Edit section: Locality">edit</a>]</span> <span class="mw-headline">Locality</span></h3>
<p>Another important characteristic of the Actor model is locality.</p>
<p>Locality means that in processing a message: an Actor can send messages only to addresses that it receives in the message, addresses that it already had before it received the message and addresses for Actors that it creates while processing the message. (But see <a href="/wiki/Actor_model#Synthesizing_addresses_of_actors" title="Actor model">Synthesizing Addresses of Actors</a>.)</p>
<p>Also locality means that there is no simultaneous change in multiple locations. In this way it differs from some other models of concurrency, <i>e.g.</i>, the <a href="/wiki/Petri_net" title="Petri net">Petri net</a> model in which tokens are simultaneously removed from multiple locations and placed in other locations.</p>
<p><a name="Composing_actors" id="Composing_actors"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Actor_model&amp;action=edit&amp;section=17" title="Edit section: Composing actors">edit</a>]</span> <span class="mw-headline">Composing actors</span></h3>
<p>The idea of composing Actor systems into larger ones is an important aspect of <a href="/wiki/Modularity_(programming)" title="Modularity (programming)" class="mw-redirect">modularity</a> that was developed in Gul Agha's doctoral dissertation,<sup id="cite_ref-agha1986_4-2" class="reference"><a href="#cite_note-agha1986-4" title=""><span>[</span>5<span>]</span></a></sup>, developed later by Gul Agha, Ian Mason, Scott Smith, and Carolyn Talcott.<sup id="cite_ref-agha1993_5-1" class="reference"><a href="#cite_note-agha1993-5" title=""><span>[</span>6<span>]</span></a></sup></p>
<p><a name="Behaviors" id="Behaviors"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Actor_model&amp;action=edit&amp;section=18" title="Edit section: Behaviors">edit</a>]</span> <span class="mw-headline">Behaviors</span></h3>
<p>A key innovation was the introduction of <i>behavior</i> specified as a mathematical function to express what an Actor does when it processes a message including specifying a new behavior to process the next message that arrives. Behaviors provided a mechanism to mathematically model the sharing in concurrency.</p>
<p>Behaviors also freed the Actor model from implementation details, <i>e.g.</i>, the Smalltalk-72 token stream interpreter. However, it is critical to understand that the efficient implementation of systems described by the Actor model require <i>extensive</i> optimization. See <a href="/wiki/Actor_model_implementation" title="Actor model implementation">Actor model implementation</a> for details.</p>
<p><a name="Modeling_other_concurrency_systems" id="Modeling_other_concurrency_systems"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Actor_model&amp;action=edit&amp;section=19" title="Edit section: Modeling other concurrency systems">edit</a>]</span> <span class="mw-headline">Modeling other concurrency systems</span></h3>
<p>Other concurrency systems (<i>e.g.</i> <a href="/wiki/Process_calculi" title="Process calculi" class="mw-redirect">process calculi</a>) can be modeled in the Actor model using a two-phase commit protocol.<sup id="cite_ref-16" class="reference"><a href="#cite_note-16" title=""><span>[</span>17<span>]</span></a></sup></p>
<p><a name="Concurrency_Representation_Theorem" id="Concurrency_Representation_Theorem"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Actor_model&amp;action=edit&amp;section=20" title="Edit section: Concurrency Representation Theorem">edit</a>]</span> <span class="mw-headline">Concurrency Representation Theorem</span></h3>
<p>There is a <i>Concurrency Representation Theorem</i> in the Actor model for systems which are closed in the sense that they do not receive communications from outside. The mathematical denotation denoted by a closed system <tt>S</tt>. is constructed increasingly better approximations from an initial behavior called <tt>⊥<sub>S</sub></tt> using a behavior approximating function <tt><b>progression</b><sub>S</sub></tt> to construct a denotation (meaning ) for <tt>S</tt> as follows [Hewitt 2008; Clinger 1981]:</p>
<dl>
<dd>
<dl>
<dd><tt><b>Denote</b><sub>S</sub> ≡ ⊔<sub>i∈ω</sub> <b>progression</b><sub>S</sub><sup>i</sup>(⊥<sub>S</sub>)</tt></dd>
</dl>
</dd>
</dl>
<p>In this way, <tt>S</tt> can be mathematically characterized in terms of all its possible behaviors (including those involving unbounded nondeterminism). Although <tt>Denote<sub>S</sub></tt> is not an implementation of <tt>S</tt>, it can be used to prove a generalization of the Church-Turing-Rosser-Kleene thesis [Kleene 1943]:</p>
<dl>
<dd><i>Enumeration Theorem</i>: If the primitive Actors of a closed Actor system are effective, then its possible outputs are recursively enumerable.
<dl>
<dd>Proof: Follows immediately from the Representation Theorem.</dd>
</dl>
</dd>
</dl>
<p><a name="Relationship_to_mathematical_logic" id="Relationship_to_mathematical_logic"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Actor_model&amp;action=edit&amp;section=21" title="Edit section: Relationship to mathematical logic">edit</a>]</span> <span class="mw-headline">Relationship to mathematical logic</span></h3>
<p>The development of the Actor model has an interesting relationship to mathematical logic. One of the key motivations for its development was to understand and deal with the control structure issues that arose in development of the <a href="/wiki/Planner_programming_language" title="Planner programming language" class="mw-redirect">Planner programming language</a>. Once the Actor model was initially defined, an important challenge was to understand the power of the model relative to Kowalski's thesis that "computation can be subsumed by deduction". Kowalski's thesis turned out to be false for the concurrent computation in the Actor model (see <a href="/wiki/Indeterminacy_in_concurrent_computation" title="Indeterminacy in concurrent computation">Indeterminacy in concurrent computation</a>). This result is still somewhat controversial and it reversed previous expectations because Kowalski's thesis is true for sequential computation and even some kinds of parallel computation, <i>e.g.</i> the lambda calculus.</p>
<p>Nevertheless attempts were made to extend <a href="/wiki/Logic_programming" title="Logic programming">logic programming</a> to concurrent computation. However, Hewitt and Agha [1991] claimed that the resulting systems were not deductive in the following sense: computational steps of the concurrent logic programming systems do not follow deductively from previous steps (see <a href="/wiki/Indeterminacy_in_concurrent_computation" title="Indeterminacy in concurrent computation">Indeterminacy in concurrent computation</a>).</p>
<p><a name="Migration" id="Migration"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Actor_model&amp;action=edit&amp;section=22" title="Edit section: Migration">edit</a>]</span> <span class="mw-headline">Migration</span></h3>
<p>Migration in the Actor model is the ability of Actors to change locations. <i>E.g.</i>, in his dissertation, Aki Yonezawa modeled a post office that customer Actors could enter, change locations within while operating, and exit. An Actor that can migrate can be modeled by having a location Actor that changes when the Actor migrates. However the faithfulness of this modeling is controversial and the subject of research.</p>
<p><a name="Security" id="Security"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Actor_model&amp;action=edit&amp;section=23" title="Edit section: Security">edit</a>]</span> <span class="mw-headline">Security</span></h3>
<p>The security of Actors can be protected in the following ways:</p>
<ul>
<li><a href="/wiki/Hardwired_control" title="Hardwired control">hardwiring</a> in which Actors are physically connected</li>
<li><a href="/wiki/Hardware" title="Hardware">hardware</a> as in Burroughs B5000, <a href="/wiki/Lisp_machine" title="Lisp machine">Lisp machine</a>, <i>etc.</i></li>
<li><a href="/wiki/Virtual_machines" title="Virtual machines" class="mw-redirect">virtual machines</a> as in <a href="/wiki/Java_virtual_machine" title="Java virtual machine" class="mw-redirect">Java virtual machine</a>, <a href="/wiki/Common_Language_Runtime" title="Common Language Runtime">Common Language Runtime</a>, <i>etc.</i></li>
<li><a href="/wiki/Operating_systems" title="Operating systems" class="mw-redirect">operating systems</a> as in <a href="/wiki/Capability_(computers)" title="Capability (computers)" class="mw-redirect">capability-based systems</a></li>
<li><a href="/wiki/Digital_signature" title="Digital signature">signing</a> and/or <a href="/wiki/Encryption" title="Encryption">encryption</a> of Actors and their addresses</li>
</ul>
<p><a name="Synthesizing_addresses_of_actors" id="Synthesizing_addresses_of_actors"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Actor_model&amp;action=edit&amp;section=24" title="Edit section: Synthesizing addresses of actors">edit</a>]</span> <span class="mw-headline">Synthesizing addresses of actors</span></h3>
<p>A delicate point in the Actor model is the ability to synthesize the address of an Actor. In some cases security can be used to prevent the synthesis of addresses (see <a href="/wiki/Actor_model#Security" title="Actor model">Security</a>). However, if an Actor address is simply a bit string then clearly it can be synthesized although it may be difficult or even infeasible to guess the address of an Actor if the bit strings are long enough. <a href="/wiki/SOAP" title="SOAP">SOAP</a> uses a <a href="/wiki/Uniform_Resource_Locator" title="Uniform Resource Locator">URL</a> for the address of an endpoint where an Actor can be reached. Since a <a href="/wiki/Uniform_Resource_Locator" title="Uniform Resource Locator">URL</a> is a character string, it can clearly be synthesized although encryption can make it impossible to guess.</p>
<p>Synthesizing the addresses of Actors is usually modeled using mapping. The idea is to use an Actor system to perform the mapping to the actual Actor addresses. For example, on a computer the memory structure of the computer can be modeled as an Actor system that does the mapping. In the case of <a href="/wiki/SOAP" title="SOAP">SOAP</a> addresses, it's modeling the <a href="/wiki/Domain_Name_System" title="Domain Name System">DNS</a> and rest of the <a href="/wiki/Uniform_Resource_Locator" title="Uniform Resource Locator">URL</a> mapping.</p>
<p><a name="Contrast_with_other_models_of_message-passing_concurrency" id="Contrast_with_other_models_of_message-passing_concurrency"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Actor_model&amp;action=edit&amp;section=25" title="Edit section: Contrast with other models of message-passing concurrency">edit</a>]</span> <span class="mw-headline">Contrast with other models of message-passing concurrency</span></h3>
<p><a href="/wiki/Robin_Milner" title="Robin Milner">Robin Milner</a>'s initial published work on concurrency<sup id="cite_ref-17" class="reference"><a href="#cite_note-17" title=""><span>[</span>18<span>]</span></a></sup> was also notable in that it was not based on composing sequential processes. His work differed from the Actor model because it was based on a fixed number of processes of fixed topology communicating numbers and strings using synchronous communication. The original <a href="/wiki/Communicating_Sequential_Processes" title="Communicating Sequential Processes" class="mw-redirect">Communicating Sequential Processes</a> model<sup id="cite_ref-18" class="reference"><a href="#cite_note-18" title=""><span>[</span>19<span>]</span></a></sup> published by <a href="/wiki/Tony_Hoare" title="Tony Hoare" class="mw-redirect">Tony Hoare</a> differed from the Actor model because it was based on the parallel composition of a fixed number of sequential processes connected in a fixed topology, and communicating using synchronous message-passing based on process names (see <a href="/wiki/Actor_model_and_process_calculi_history#Early_work" title="Actor model and process calculi history">Actor model and process calculi history</a>). Later versions of CSP abandoned communication based on process names in favor of anonymous communication via channels, an approach also used in Milner's work on the <a href="/wiki/Calculus_of_Communicating_Systems" title="Calculus of Communicating Systems" class="mw-redirect">Calculus of Communicating Systems</a> and the <a href="/wiki/Pi-calculus" title="Pi-calculus">π-calculus</a>.</p>
<p>These early models by Milner and Hoare both had the property of bounded nondeterminism. Modern, theoretical <a href="/wiki/Communicating_sequential_processes" title="Communicating sequential processes">CSP</a> ([Hoare 1985] and [Roscoe 2005]) explicitly provides unbounded nondeterminism.</p>
<p><a name="Current_importance" id="Current_importance"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Actor_model&amp;action=edit&amp;section=26" title="Edit section: Current importance">edit</a>]</span> <span class="mw-headline">Current importance</span></h2>
<p>Forty years after the publication of <a href="/wiki/Moore%27s_Law" title="Moore's Law" class="mw-redirect">Moore's Law</a>, hardware development is furthering local and nonlocal massive concurrency. Local concurrency is enabled by new hardware for <a href="/wiki/64-bit" title="64-bit">64-bit</a> <a href="/wiki/Multicore" title="Multicore">multi-core</a> (<a href="http://www.intel.com/technology/techresearch/idf/platform-2015-keynote.htm" class="external text" title="http://www.intel.com/technology/techresearch/idf/platform-2015-keynote.htm" rel="nofollow">Platform 2015 Unveiled at IDF Spring 2005</a>) microprocessors, multi-chip modules, and high performance <a href="/wiki/Electrical_connection" title="Electrical connection">interconnect</a>. Nonlocal concurrency is being enabled by new hardware for wired and <a href="/wiki/Wireless" title="Wireless">wireless</a> <a href="/wiki/Broadband" title="Broadband">broadband</a> <a href="/wiki/Packet_switched" title="Packet switched" class="mw-redirect">packet switched</a> communications (see <a href="/wiki/Wi-Fi" title="Wi-Fi">Wi-Fi</a> and <a href="/wiki/Ultra_wideband" title="Ultra wideband" class="mw-redirect">Ultra wideband</a>). Both local and nonlocal storage capacities are growing exponentially.</p>
<p>According to Hewitt [2006], the Actor model faces issues in computer and communications architecture, <a href="/wiki/Concurrent_programming_language" title="Concurrent programming language" class="mw-redirect">concurrent programming languages</a>, and <a href="/wiki/Web_Services" title="Web Services" class="mw-redirect">Web Services</a> including the following:</p>
<ul>
<li><b><a href="/wiki/Scalability" title="Scalability">scalability</a>:</b> the challenge of scaling up concurrency both locally and nonlocally.</li>
<li><b><a href="/wiki/Transparency_(computing)" title="Transparency (computing)">transparency</a>:</b> bridging the chasm between local and nonlocal concurrency. Transparency is currently a controversial issue. Some researchers have advocated a strict separation between local concurrency using concurrent programming languages (e.g. <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a> and <a href="/wiki/C_Sharp_(programming_language)" title="C Sharp (programming language)">C#</a>) from nonlocal concurrency using <a href="/wiki/SOAP" title="SOAP">SOAP</a> for <a href="/wiki/Web_services" title="Web services" class="mw-redirect">Web services</a>. Strict separation produces a lack of transparency that causes problems when it is desirable/necessary to change between local and nonlocal access to Web Services (see <a href="/wiki/Distributed_computing" title="Distributed computing">distributed computing</a>).</li>
<li><b><a href="/wiki/Inconsistency" title="Inconsistency" class="mw-redirect">inconsistency</a>:</b> Inconsistency is the norm because all very large knowledge systems about human information system interactions are inconsistent. This inconsistency extends to the documentation and specifications of very large systems (e.g. Microsoft Windows software, etc.), which are internally inconsistent.</li>
</ul>
<p>Many of the ideas introduced in the Actor model are now also finding application in <a href="/wiki/Multi-agent_systems" title="Multi-agent systems" class="mw-redirect">multi-agent systems</a> for these same reasons [Hewitt 2006b 2007b]. The key difference is that agent systems (in most definitions) impose extra constraints upon the Actors, typically requiring that they make use of commitments and goals.</p>
<p>The Actor model is also being applied to client <a href="/wiki/Cloud_computing" title="Cloud computing">cloud computing</a> <sup id="cite_ref-19" class="reference"><a href="#cite_note-19" title=""><span>[</span>20<span>]</span></a></sup>.</p>
<p><a name="Actor_researchers" id="Actor_researchers"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Actor_model&amp;action=edit&amp;section=27" title="Edit section: Actor researchers">edit</a>]</span> <span class="mw-headline">Actor researchers</span></h2>
<p>Important contributions to the semantics of Actors have been made by: <a href="/wiki/Gul_Agha_(computer_scientist)" title="Gul Agha (computer scientist)">Gul Agha</a>, Beppe Attardi, <a href="/wiki/Henry_Baker_(computer_scientist)" title="Henry Baker (computer scientist)">Henry Baker</a>, Will Clinger, Irene Greif, <a href="/wiki/Carl_Hewitt" title="Carl Hewitt">Carl Hewitt</a>, Carl Manning, Ian Mason, Ugo Montanari, Maria Simi, Scott Smith, Carolyn Talcott, Prasanna Thati, and Aki Yonezawa.</p>
<p>Important contributions to the implementation of Actors have been made by: Bill Athas, Russ Atkinson, Beppe Attardi, <a href="/wiki/Henry_Baker_(computer_scientist)" title="Henry Baker (computer scientist)">Henry Baker</a>, Gerry Barber, Peter Bishop, Nanette Boden, Jean-Pierre Briot, Bill Dally, Peter de Jong, Jessie Dedecker, Ken Kahn, <a href="/wiki/Carl_Hewitt" title="Carl Hewitt">Carl Hewitt</a>, Henry Lieberman, Carl Manning, Tom Reinhardt, Chuck Seitz, Richard Steiger, Dan Theriault, Mario Tokoro, Darrell Woelk, and Carlos Varela.</p>
<p><a name="Programming_with_Actors" id="Programming_with_Actors"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Actor_model&amp;action=edit&amp;section=28" title="Edit section: Programming with Actors">edit</a>]</span> <span class="mw-headline">Programming with Actors</span></h3>
<p>A number of different programming languages employ the Actor model or some variation of it. These languages include:</p>
<ul>
<li>Act 1, 2 and 3 <sup id="cite_ref-20" class="reference"><a href="#cite_note-20" title=""><span>[</span>21<span>]</span></a></sup><sup id="cite_ref-21" class="reference"><a href="#cite_note-21" title=""><span>[</span>22<span>]</span></a></sup></li>
<li><a href="/w/index.php?title=ActorScript&amp;action=edit&amp;redlink=1" class="new" title="ActorScript (page does not exist)">ActorScript</a> <sup id="cite_ref-22" class="reference"><a href="#cite_note-22" title=""><span>[</span>23<span>]</span></a></sup></li>
<li><a href="/wiki/AmbientTalk" title="AmbientTalk">AmbientTalk</a> <sup id="cite_ref-23" class="reference"><a href="#cite_note-23" title=""><span>[</span>24<span>]</span></a></sup></li>
<li><a href="/wiki/E_programming_language" title="E programming language" class="mw-redirect">E programming language</a></li>
<li><a href="/wiki/Erlang_(programming_language)" title="Erlang (programming language)">Erlang</a></li>
<li><a href="/wiki/Gambit_(Scheme_implementation)" title="Gambit (Scheme implementation)">Gambit-C</a> (with Termite)</li>
<li><a href="/wiki/Io_language" title="Io language" class="mw-redirect">Io language</a></li>
<li><a href="/wiki/Ptolemy_Project" title="Ptolemy Project" class="mw-redirect">Ptolemy Project</a></li>
<li><a href="/wiki/Rebeca_Modeling_Language" title="Rebeca Modeling Language">Rebeca Modeling Language</a></li>
<li><a href="/wiki/Reia_(programming_language)" title="Reia (programming language)">Reia</a></li>
<li><a href="/wiki/SALSA_programming_language" title="SALSA programming language" class="mw-redirect">SALSA</a> <sup id="cite_ref-24" class="reference"><a href="#cite_note-24" title=""><span>[</span>25<span>]</span></a></sup></li>
<li><a href="/wiki/Scala_(programming_language)" title="Scala (programming language)">Scala</a> <sup id="cite_ref-25" class="reference"><a href="#cite_note-25" title=""><span>[</span>26<span>]</span></a></sup><sup id="cite_ref-26" class="reference"><a href="#cite_note-26" title=""><span>[</span>27<span>]</span></a></sup></li>
</ul>
<p>Actor libraries or frameworks have also been implemented to permit actor-style programming in languages that don't have actors built-in. Among these frameworks are:</p>
<ul>
<li><a href="/wiki/Kilim" title="Kilim">Kilim</a> - a message-passing framework for <a href="/wiki/Java_programming_language" title="Java programming language" class="mw-redirect">Java</a><sup id="cite_ref-27" class="reference"><a href="#cite_note-27" title=""><span>[</span>28<span>]</span></a></sup></li>
<li><a href="/wiki/ActorFoundry" title="ActorFoundry">ActorFoundry</a> - a <a href="/wiki/Java_programming_language" title="Java programming language" class="mw-redirect">Java</a> library for Actor programming</li>
<li><a href="/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell</a> (with Haskell-Actor<sup class="noprint Template-Fact"><span title="This claim needs references to reliable sources&#160;since January 2009" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</span></sup>)</li>
</ul>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Actor_model&amp;action=edit&amp;section=29" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<ul>
<li><a href="/wiki/Data_flow" title="Data flow" class="mw-redirect">Data flow</a></li>
<li><a href="/wiki/Special_relativity" title="Special relativity">Special relativity</a> (specifically, <a href="/wiki/Relativity_of_simultaneity" title="Relativity of simultaneity">Relativity of simultaneity</a>) and <a href="/wiki/Quantum_physics" title="Quantum physics" class="mw-redirect">Quantum physics</a>, for some physical motivation for the <a href="/wiki/Actor_model_theory" title="Actor model theory">Actor model theory</a></li>
<li><a href="/wiki/Multi-agent_system" title="Multi-agent system">Multi-agent system</a></li>
<li><a href="/wiki/Neural_networks" title="Neural networks" class="mw-redirect">Neural networks</a></li>
<li><a href="/wiki/Scientific_Community_Metaphor" title="Scientific Community Metaphor" class="mw-redirect">Scientific Community Metaphor</a></li>
</ul>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Actor_model&amp;action=edit&amp;section=30" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<div class="references-small references-column-count references-column-count-2" style="-moz-column-count:2; column-count:2;">
<ol class="references">
<li id="cite_note-hewitt1973-0"><b><a href="#cite_ref-hewitt1973_0-0" title="">^</a></b> <cite style="font-style:normal" class="" id="CITEREFCarl_HewittPeter_Bishop_and_Richard_Steiger1973">Carl Hewitt; Peter Bishop and Richard Steiger (1973) (PDF). <i><a href="http://dli.iiit.ac.in/ijcai/IJCAI-73/PDF/027B.pdf" class="external text" title="http://dli.iiit.ac.in/ijcai/IJCAI-73/PDF/027B.pdf" rel="nofollow">A Universal Modular Actor Formalism for Artificial Intelligence</a></i>. IJCAI<span class="printonly">. <a href="http://dli.iiit.ac.in/ijcai/IJCAI-73/PDF/027B.pdf" class="external free" title="http://dli.iiit.ac.in/ijcai/IJCAI-73/PDF/027B.pdf" rel="nofollow">http://dli.iiit.ac.in/ijcai/IJCAI-73/PDF/027B.pdf</a></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=A+Universal+Modular+Actor+Formalism+for+Artificial+Intelligence&amp;rft.aulast=Carl+Hewitt&amp;rft.au=Carl+Hewitt&amp;rft.au=Peter+Bishop+and+Richard+Steiger&amp;rft.date=1973&amp;rft.pub=IJCAI&amp;rft_id=http%3A%2F%2Fdli.iiit.ac.in%2Fijcai%2FIJCAI-73%2FPDF%2F027B.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Actor_model"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-clinger1981-1">^ <a href="#cite_ref-clinger1981_1-0" title=""><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-clinger1981_1-1" title=""><sup><i><b>b</b></i></sup></a> <a href="#cite_ref-clinger1981_1-2" title=""><sup><i><b>c</b></i></sup></a> <a href="#cite_ref-clinger1981_1-3" title=""><sup><i><b>d</b></i></sup></a> <cite style="font-style:normal" class="" id="CITEREFWilliam_Clinger1981"><a href="/wiki/William_Clinger_(computer_scientist)" title="William Clinger (computer scientist)">William Clinger</a> (June 1981). <i><a href="https://dspace.mit.edu/handle/1721.1/6935" class="external text" title="https://dspace.mit.edu/handle/1721.1/6935" rel="nofollow">Foundations of Actor Semantics</a></i>. Mathematics Doctoral Dissertation. MIT<span class="printonly">. <a href="https://dspace.mit.edu/handle/1721.1/6935" class="external free" title="https://dspace.mit.edu/handle/1721.1/6935" rel="nofollow">https://dspace.mit.edu/handle/1721.1/6935</a></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Foundations+of+Actor+Semantics&amp;rft.aulast=William+Clinger&amp;rft.au=William+Clinger&amp;rft.date=June+1981&amp;rft.series=Mathematics+Doctoral+Dissertation&amp;rft.pub=MIT&amp;rft_id=https%3A%2F%2Fdspace.mit.edu%2Fhandle%2F1721.1%2F6935&amp;rfr_id=info:sid/en.wikipedia.org:Actor_model"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-greif1975-2">^ <a href="#cite_ref-greif1975_2-0" title=""><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-greif1975_2-1" title=""><sup><i><b>b</b></i></sup></a> <cite style="font-style:normal" class="" id="CITEREFIrene_Greif1975"><a href="/w/index.php?title=Irene_Greif&amp;action=edit&amp;redlink=1" class="new" title="Irene Greif (page does not exist)">Irene Greif</a> (August 1975). <i>Semantics of Communicating Parallel Processes</i>. EECS Doctoral Dissertation. MIT.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Semantics+of+Communicating+Parallel+Processes&amp;rft.aulast=Irene+Greif&amp;rft.au=Irene+Greif&amp;rft.date=August+1975&amp;rft.series=EECS+Doctoral+Dissertation&amp;rft.pub=MIT&amp;rfr_id=info:sid/en.wikipedia.org:Actor_model"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-baker1977-3">^ <a href="#cite_ref-baker1977_3-0" title=""><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-baker1977_3-1" title=""><sup><i><b>b</b></i></sup></a> <cite style="font-style:normal" class="" id="CITEREFHenry_Baker.5B.5BCarl_Hewitt.5D.5D1977"><a href="/wiki/Henry_Baker" title="Henry Baker">Henry Baker</a>; <a href="/wiki/Carl_Hewitt" title="Carl Hewitt">Carl Hewitt</a> (August 1977). <i>Laws for Communicating Parallel Processes</i>. IFIP.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Laws+for+Communicating+Parallel+Processes&amp;rft.aulast=Henry+Baker&amp;rft.au=Henry+Baker&amp;rft.au=%5B%5BCarl+Hewitt%5D%5D&amp;rft.date=August+1977&amp;rft.pub=IFIP&amp;rfr_id=info:sid/en.wikipedia.org:Actor_model"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-agha1986-4">^ <a href="#cite_ref-agha1986_4-0" title=""><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-agha1986_4-1" title=""><sup><i><b>b</b></i></sup></a> <a href="#cite_ref-agha1986_4-2" title=""><sup><i><b>c</b></i></sup></a> <cite style="font-style:normal" class="" id="CITEREFGul_Agha1986">Gul Agha (1986). <i><a href="https://dspace.mit.edu/handle/1721.1/6952" class="external text" title="https://dspace.mit.edu/handle/1721.1/6952" rel="nofollow">Actors: A Model of Concurrent Computation in Distributed Systems</a></i>. Doctoral Dissertation. MIT Press<span class="printonly">. <a href="https://dspace.mit.edu/handle/1721.1/6952" class="external free" title="https://dspace.mit.edu/handle/1721.1/6952" rel="nofollow">https://dspace.mit.edu/handle/1721.1/6952</a></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Actors%3A+A+Model+of+Concurrent+Computation+in+Distributed+Systems&amp;rft.aulast=Gul+Agha&amp;rft.au=Gul+Agha&amp;rft.date=1986&amp;rft.series=Doctoral+Dissertation&amp;rft.pub=MIT+Press&amp;rft_id=https%3A%2F%2Fdspace.mit.edu%2Fhandle%2F1721.1%2F6952&amp;rfr_id=info:sid/en.wikipedia.org:Actor_model"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-agha1993-5">^ <a href="#cite_ref-agha1993_5-0" title=""><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-agha1993_5-1" title=""><sup><i><b>b</b></i></sup></a> <cite style="font-style:normal" class="" id="CITEREFGul_AghaIan_Mason.2C_Scott_Smith.2C_and_Carolyn_Talcott1993">Gul Agha; Ian Mason, Scott Smith, and Carolyn Talcott (January 1993). "A Foundation for Actor Computation". <i>Journal of Functional Programming</i>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=A+Foundation+for+Actor+Computation&amp;rft.jtitle=Journal+of+Functional+Programming&amp;rft.aulast=Gul+Agha&amp;rft.au=Gul+Agha&amp;rft.au=Ian+Mason%2C+Scott+Smith%2C+and+Carolyn+Talcott&amp;rft.date=January+1993&amp;rfr_id=info:sid/en.wikipedia.org:Actor_model"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-hewitt2006-6"><b><a href="#cite_ref-hewitt2006_6-0" title="">^</a></b> <cite style="font-style:normal" class="" id="CITEREFCarl_Hewitt2006"><a href="/wiki/Carl_Hewitt" title="Carl Hewitt">Carl Hewitt</a> (2006-04-27) (PDF). <i><a href="http://www.pcs.usp.br/~coin-aamas06/10_commitment-43_16pages.pdf" class="external text" title="http://www.pcs.usp.br/~coin-aamas06/10_commitment-43_16pages.pdf" rel="nofollow">What is Commitment? Physical, Organizational, and Social</a></i>. COIN@AAMAS<span class="printonly">. <a href="http://www.pcs.usp.br/~coin-aamas06/10_commitment-43_16pages.pdf" class="external free" title="http://www.pcs.usp.br/~coin-aamas06/10_commitment-43_16pages.pdf" rel="nofollow">http://www.pcs.usp.br/~coin-aamas06/10_commitment-43_16pages.pdf</a></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=What+is+Commitment%3F+Physical%2C+Organizational%2C+and+Social&amp;rft.aulast=Carl+Hewitt&amp;rft.au=Carl+Hewitt&amp;rft.date=2006-04-27&amp;rft.pub=COIN%40AAMAS&amp;rft_id=http%3A%2F%2Fwww.pcs.usp.br%2F%7Ecoin-aamas06%2F10_commitment-43_16pages.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Actor_model"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-gaspari1997-7"><b><a href="#cite_ref-gaspari1997_7-0" title="">^</a></b> <cite style="font-style:normal" class="" id="CITEREFMauro_GaspariGianluigi_Zavattaro1997">Mauro Gaspari; Gianluigi Zavattaro (May 1997). <i>An Algebra of Actors</i>. Technical Report UBLCS-97-4. University of Bologna.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=An+Algebra+of+Actors&amp;rft.aulast=Mauro+Gaspari&amp;rft.au=Mauro+Gaspari&amp;rft.au=Gianluigi+Zavattaro&amp;rft.date=May+1997&amp;rft.series=Technical+Report+UBLCS-97-4&amp;rft.pub=University+of+Bologna&amp;rfr_id=info:sid/en.wikipedia.org:Actor_model"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-gaspari1999-8"><b><a href="#cite_ref-gaspari1999_8-0" title="">^</a></b> <cite style="font-style:normal" class="" id="CITEREFM._GaspariG._Zavattaro1999">M. Gaspari; G. Zavattaro (1999). <i>An Algebra of Actors</i>. Formal Methods for Open Object Based Systems.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=An+Algebra+of+Actors&amp;rft.aulast=M.+Gaspari&amp;rft.au=M.+Gaspari&amp;rft.au=G.+Zavattaro&amp;rft.date=1999&amp;rft.pub=Formal+Methods+for+Open+Object+Based+Systems&amp;rfr_id=info:sid/en.wikipedia.org:Actor_model"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-agha2004-9"><b><a href="#cite_ref-agha2004_9-0" title="">^</a></b> <cite style="font-style:normal" class="" id="CITEREFGul_AghaPrasanna_Thati2004"><a href="/wiki/Gul_Agha" title="Gul Agha">Gul Agha</a>; Prasanna Thati (2004) (PDF). <i><a href="http://formal.cs.uiuc.edu/papers/ATactors_festschrift.pdf" class="external text" title="http://formal.cs.uiuc.edu/papers/ATactors_festschrift.pdf" rel="nofollow">An Algebraic Theory of Actors and Its Application to a Simple Object-Based Language</a></i>. From OO to FM (Dahl Festschrift) LNCS 2635<span class="printonly">. <a href="http://formal.cs.uiuc.edu/papers/ATactors_festschrift.pdf" class="external free" title="http://formal.cs.uiuc.edu/papers/ATactors_festschrift.pdf" rel="nofollow">http://formal.cs.uiuc.edu/papers/ATactors_festschrift.pdf</a></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=An+Algebraic+Theory+of+Actors+and+Its+Application+to+a+Simple+Object-Based+Language&amp;rft.aulast=Gul+Agha&amp;rft.au=Gul+Agha&amp;rft.au=Prasanna+Thati&amp;rft.date=2004&amp;rft.pub=From+OO+to+FM+%28Dahl+Festschrift%29+LNCS+2635&amp;rft_id=http%3A%2F%2Fformal.cs.uiuc.edu%2Fpapers%2FATactors_festschrift.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Actor_model"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-darlington1994-10"><b><a href="#cite_ref-darlington1994_10-0" title="">^</a></b> <cite style="font-style:normal" class="" id="CITEREFJohn_DarlingtonY._K._Guo1994">John Darlington; Y. K. Guo (1994). <i>Formalizing Actors in Linear Logic</i>. International Conference on Object-Oriented Information Systems.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Formalizing+Actors+in+Linear+Logic&amp;rft.aulast=John+Darlington&amp;rft.au=John+Darlington&amp;rft.au=Y.+K.+Guo&amp;rft.date=1994&amp;rft.pub=International+Conference+on+Object-Oriented+Information+Systems&amp;rfr_id=info:sid/en.wikipedia.org:Actor_model"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-kay1996-11"><b><a href="#cite_ref-kay1996_11-0" title="">^</a></b> <cite style="font-style:normal" class="" id="CITEREFKay1993"><a href="/wiki/Alan_Kay" title="Alan Kay">Kay, Alan</a> (March 1993). "<a href="http://www.smalltalk.org/downloads/papers/SmalltalkHistoryHOPL.pdf" class="external text" title="http://www.smalltalk.org/downloads/papers/SmalltalkHistoryHOPL.pdf" rel="nofollow">The Early History of Smalltalk</a>" (PDF). <i>ACM SIGPLAN</i> <b>28</b> (3): 69–75. <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<span class="neverexpand"><a href="http://dx.doi.org/10.1145%2F155360.155364" class="external text" title="http://dx.doi.org/10.1145%2F155360.155364" rel="nofollow">10.1145/155360.155364</a></span><span class="printonly">. <a href="http://www.smalltalk.org/downloads/papers/SmalltalkHistoryHOPL.pdf" class="external free" title="http://www.smalltalk.org/downloads/papers/SmalltalkHistoryHOPL.pdf" rel="nofollow">http://www.smalltalk.org/downloads/papers/SmalltalkHistoryHOPL.pdf</a></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=The+Early+History+of+Smalltalk&amp;rft.jtitle=ACM+SIGPLAN&amp;rft.aulast=Kay&amp;rft.aufirst=Alan&amp;rft.au=Kay%2C+Alan&amp;rft.date=March+1993&amp;rft.volume=28&amp;rft.issue=3&amp;rft.pages=69%E2%80%9375&amp;rft_id=info:doi/10.1145%2F155360.155364&amp;rft_id=http%3A%2F%2Fwww.smalltalk.org%2Fdownloads%2Fpapers%2FSmalltalkHistoryHOPL.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Actor_model"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-12"><b><a href="#cite_ref-12" title="">^</a></b> <cite style="font-style:normal" class="book" id="CITEREFBrinch-Hansen2002">Brinch-Hansen, Per (2002). <i>The Origins of Concurrent Programming: From Semaphores to Remote Procedure Calls</i>. Springer. <a href="/wiki/Special:BookSources/9780387954011" class="internal">ISBN 978-0387954011</a>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=The+Origins+of+Concurrent+Programming%3A+From+Semaphores+to+Remote+Procedure+Calls&amp;rft.aulast=Brinch-Hansen&amp;rft.aufirst=Per&amp;rft.au=Brinch-Hansen%2C+Per&amp;rft.date=2002&amp;rft.pub=Springer&amp;rft.isbn=978-0387954011&amp;rfr_id=info:sid/en.wikipedia.org:Actor_model"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-13"><b><a href="#cite_ref-13" title="">^</a></b> Per Brinch Hansen, <i>Monitors and Concurrent Pascal: A Personal History</i>, Comm. ACM 1996, pp 121-172</li>
<li id="cite_note-14"><b><a href="#cite_ref-14" title="">^</a></b> <a href="/wiki/C.A.R._Hoare" title="C.A.R. Hoare" class="mw-redirect">C.A.R. Hoare</a>, <i>Monitors: An Operating System Structuring Concept</i>, Comm. ACM Vol. 17, No. 10. October 1974, pp. 549-557</li>
<li id="cite_note-15"><b><a href="#cite_ref-15" title="">^</a></b> Brinch Hansen, P., <i>Operating System Principles</i>, Prentice-Hall, July 1973.</li>
<li id="cite_note-16"><b><a href="#cite_ref-16" title="">^</a></b> Frederick Knabe. A Distributed Protocol for Channel-Based Communication with Choice PARLE 1992.</li>
<li id="cite_note-17"><b><a href="#cite_ref-17" title="">^</a></b> Robin Milner. Processes: A Mathematical Model of Computing Agents in Logic Colloquium 1973.</li>
<li id="cite_note-18"><b><a href="#cite_ref-18" title="">^</a></b> C.A.R. Hoare. <a href="http://portal.acm.org/citation.cfm?id=359585&amp;dl=GUIDE&amp;coll=GUIDE&amp;CFID=19884966&amp;CFTOKEN=55490895" class="external text" title="http://portal.acm.org/citation.cfm?id=359585&amp;dl=GUIDE&amp;coll=GUIDE&amp;CFID=19884966&amp;CFTOKEN=55490895" rel="nofollow">Communicating sequential processes</a> CACM. August 1978.</li>
<li id="cite_note-19"><b><a href="#cite_ref-19" title="">^</a></b> <cite style="font-style:normal" class="" id="CITEREFCarl_Hewitt">Carl Hewitt (September/October 2008). "ORGs for Scalable, Robust, Privacy-Friendly Client Cloud Computing". <i>IEEE Internet Computing</i> <b>12</b> (5).</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=ORGs+for+Scalable%2C+Robust%2C+Privacy-Friendly+Client+Cloud+Computing&amp;rft.jtitle=IEEE+Internet+Computing&amp;rft.aulast=Carl+Hewitt&amp;rft.au=Carl+Hewitt&amp;rft.date=September%2FOctober+2008&amp;rft.volume=12&amp;rft.issue=5&amp;rfr_id=info:sid/en.wikipedia.org:Actor_model"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-20"><b><a href="#cite_ref-20" title="">^</a></b> <cite style="font-style:normal" class="" id="CITEREFHenry_Lieberman1981">Henry Lieberman (June 1981). <i>A Preview of Act 1</i>. MIT AI memo 625.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=A+Preview+of+Act+1&amp;rft.aulast=Henry+Lieberman&amp;rft.au=Henry+Lieberman&amp;rft.date=June+1981&amp;rft.pub=MIT+AI+memo+625&amp;rfr_id=info:sid/en.wikipedia.org:Actor_model"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-21"><b><a href="#cite_ref-21" title="">^</a></b> <cite style="font-style:normal" class="" id="CITEREFHenry_Lieberman1981">Henry Lieberman (June 1981). <i>Thinking About Lots of Things at Once without Getting Confused: Parallelism in Act 1</i>. MIT AI memo 626.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Thinking+About+Lots+of+Things+at+Once+without+Getting+Confused%3A+Parallelism+in+Act+1&amp;rft.aulast=Henry+Lieberman&amp;rft.au=Henry+Lieberman&amp;rft.date=June+1981&amp;rft.pub=MIT+AI+memo+626&amp;rfr_id=info:sid/en.wikipedia.org:Actor_model"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-22"><b><a href="#cite_ref-22" title="">^</a></b> <cite style="font-style:normal" class="" id="CITEREFCarl_Hewitt">Carl Hewitt. <i><a href="http://knol.google.com/k/carl-hewitt-httpcarlhewittinfo/actorscripttm/pcxtp4rx7g1t/18#" class="external text" title="http://knol.google.com/k/carl-hewitt-httpcarlhewittinfo/actorscripttm/pcxtp4rx7g1t/18#" rel="nofollow">ActorScript<sup>TM</sup>: Implementing massive local and nonlocal concurrency</a></i><span class="printonly">. <a href="http://knol.google.com/k/carl-hewitt-httpcarlhewittinfo/actorscripttm/pcxtp4rx7g1t/18#" class="external free" title="http://knol.google.com/k/carl-hewitt-httpcarlhewittinfo/actorscripttm/pcxtp4rx7g1t/18#" rel="nofollow">http://knol.google.com/k/carl-hewitt-httpcarlhewittinfo/actorscripttm/pcxtp4rx7g1t/18#</a></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=ActorScript%3Csup%3ETM%3C%2Fsup%3E%3A+Implementing+massive+local+and+nonlocal+concurrency&amp;rft.aulast=Carl+Hewitt&amp;rft.au=Carl+Hewitt&amp;rft_id=http%3A%2F%2Fknol.google.com%2Fk%2Fcarl-hewitt-httpcarlhewittinfo%2Factorscripttm%2Fpcxtp4rx7g1t%2F18%23&amp;rfr_id=info:sid/en.wikipedia.org:Actor_model"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-23"><b><a href="#cite_ref-23" title="">^</a></b> Dedecker J., Van Cutsem T., Mostinckx S., D'Hondt T., De Meuter W. Ambient-oriented Programming in AmbientTalk. In “Proceedings of the 20th European Conference on Object-Oriented Programming (ECOOP), Dave Thomas (Ed.), Lecture Notes in Computer Science Vol. 4067, pp. 230-254, Springer-Verlag.”, 2006</li>
<li id="cite_note-24"><b><a href="#cite_ref-24" title="">^</a></b> <cite style="font-style:normal" class="" id="CITEREFCarlos_Varela_and_Gul_Agha2001">Carlos Varela and Gul Agha (2001). "Programming Dynamically Reconfigurable Open Systems with SALSA". <i>ACM SIGPLAN Notices. OOPSLA’2001 Intriguing Technology Track Proceedings</i> <b>36</b>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=Programming+Dynamically+Reconfigurable+Open+Systems+with+SALSA&amp;rft.jtitle=ACM+SIGPLAN+Notices.+OOPSLA%E2%80%992001+Intriguing+Technology+Track+Proceedings&amp;rft.aulast=Carlos+Varela+and+Gul+Agha&amp;rft.au=Carlos+Varela+and+Gul+Agha&amp;rft.date=2001&amp;rft.volume=36&amp;rfr_id=info:sid/en.wikipedia.org:Actor_model"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-25"><b><a href="#cite_ref-25" title="">^</a></b> <cite style="font-style:normal" class="" id="CITEREFPhilipp_Haller_and_Martin_Odersky2006">Philipp Haller and Martin Odersky (September 2006) (PDF). <i><a href="http://lampwww.epfl.ch/~odersky/papers/jmlc06.pdf" class="external text" title="http://lampwww.epfl.ch/~odersky/papers/jmlc06.pdf" rel="nofollow">Event-Based Programming without Inversion of Control</a></i>. Proc. JMLC 2006<span class="printonly">. <a href="http://lampwww.epfl.ch/~odersky/papers/jmlc06.pdf" class="external free" title="http://lampwww.epfl.ch/~odersky/papers/jmlc06.pdf" rel="nofollow">http://lampwww.epfl.ch/~odersky/papers/jmlc06.pdf</a></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Event-Based+Programming+without+Inversion+of+Control&amp;rft.aulast=Philipp+Haller+and+Martin+Odersky&amp;rft.au=Philipp+Haller+and+Martin+Odersky&amp;rft.date=September+2006&amp;rft.pub=Proc.+JMLC+2006&amp;rft_id=http%3A%2F%2Flampwww.epfl.ch%2F%7Eodersky%2Fpapers%2Fjmlc06.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Actor_model"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-26"><b><a href="#cite_ref-26" title="">^</a></b> <cite style="font-style:normal" class="" id="CITEREFPhilipp_Haller_and_Martin_Odersky2007">Philipp Haller and Martin Odersky (January 2007) (PDF). <i><a href="http://lamp.epfl.ch/~phaller/doc/haller07coord.pdf" class="external text" title="http://lamp.epfl.ch/~phaller/doc/haller07coord.pdf" rel="nofollow">Actors that Unify Threads and Events</a></i>. Technical report LAMP 2007<span class="printonly">. <a href="http://lamp.epfl.ch/~phaller/doc/haller07coord.pdf" class="external free" title="http://lamp.epfl.ch/~phaller/doc/haller07coord.pdf" rel="nofollow">http://lamp.epfl.ch/~phaller/doc/haller07coord.pdf</a></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Actors+that+Unify+Threads+and+Events&amp;rft.aulast=Philipp+Haller+and+Martin+Odersky&amp;rft.au=Philipp+Haller+and+Martin+Odersky&amp;rft.date=January+2007&amp;rft.pub=Technical+report+LAMP+2007&amp;rft_id=http%3A%2F%2Flamp.epfl.ch%2F%7Ephaller%2Fdoc%2Fhaller07coord.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Actor_model"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-27"><b><a href="#cite_ref-27" title="">^</a></b> <cite style="font-style:normal">Srinivasan, Sriram; Alan Mycroft (2008). "<a href="http://www.malhar.net/sriram/kilim/kilim_ecoop08.pdf" class="external text" title="http://www.malhar.net/sriram/kilim/kilim_ecoop08.pdf" rel="nofollow">Kilim: Isolation-Typed Actors for Java</a>" (PDF). <i>European Conference on Object Oriented Programming ECOOP 2008</i>. <span class="reference-accessdate">Retrieved on <span class="mw-formatted-date" title="2008-07-24"><a href="/wiki/2008" title="2008">2008</a>-<a href="/wiki/July_24" title="July 24">07-24</a></span></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=proceeding&amp;rft.btitle=European+Conference+on+Object+Oriented+Programming+ECOOP+2008&amp;rft.atitle=Kilim%3A+Isolation-Typed+Actors+for+Java&amp;rft.aulast=Srinivasan&amp;rft.aufirst=Sriram&amp;rft.date=2008&amp;rft.place=Cyprus&amp;rft_id=http%3A%2F%2Fwww.malhar.net%2Fsriram%2Fkilim%2Fkilim_ecoop08.pdf"><span style="display: none;">&#160;</span></span>.</li>
</ol>
</div>
<p><a name="Further_reading" id="Further_reading"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Actor_model&amp;action=edit&amp;section=31" title="Edit section: Further reading">edit</a>]</span> <span class="mw-headline">Further reading</span></h2>
<div class="references-small" style="margin-left:1.5em;-moz-column-count:2; -webkit-column-count:2; column-count:2;">
<ul>
<li>Stephen Kleene <b>Recursive Predicates and Quantifiers</b> American Mathematical Society Transactions. 1943.</li>
<li>Paul Baran. <b>On Distributed Communications Networks</b> <a href="/w/index.php?title=IEEE_Transactions_on_Communications_Systems&amp;action=edit&amp;redlink=1" class="new" title="IEEE Transactions on Communications Systems (page does not exist)">IEEE Transactions on Communications Systems</a>. March 1964.</li>
<li><a href="/wiki/Peter_Landin" title="Peter Landin" class="mw-redirect">Peter Landin</a>. <b>A Generalization of Jumps and Labels</b> Report. UNIVAC Systems Programming Research. August 1965. Reprinted in Higher Order and Symbolic Computation. 1998.</li>
<li><a href="/wiki/Edsger_Dijkstra" title="Edsger Dijkstra" class="mw-redirect">Edsger Dijkstra</a> <b>Solution of a Problem in Concurrent Programming Control</b> <a href="/wiki/Communications_of_the_ACM" title="Communications of the ACM">CACM</a>. 1965.</li>
<li><a href="/wiki/Jack_Dennis" title="Jack Dennis">Jack Dennis</a> and <a href="/w/index.php?title=Earl_Van_Horn&amp;action=edit&amp;redlink=1" class="new" title="Earl Van Horn (page does not exist)">Earl Van Horn</a>. <b>Programming Semantics for Multiprogrammed Computations</b> CACM. March 1966.</li>
<li><a href="/wiki/Ole-Johan_Dahl" title="Ole-Johan Dahl">Ole-Johan Dahl</a> and <a href="/wiki/Kristen_Nygaard" title="Kristen Nygaard">Kristen Nygaard</a>. <b>Class and subclass declarations</b> IFIP TC2 Conference on Simulation Programming Languages. May 1967.</li>
<li><a href="/wiki/Carl_Hewitt" title="Carl Hewitt">Carl Hewitt</a>. <b>PLANNER: A Language for Proving Theorems in Robots</b> IJCAI 1969</li>
<li>William A. Woods. <b>Transition network grammars for natural language analysis</b> CACM. 1970.</li>
<li>Terry Winograd. <b>Procedures as a Representation for Data in a Computer Program for Understanding Natural Language</b> MIT AI TR-235. January 1971.</li>
<li>Carl Hewitt. <b>Procedural Embedding of Knowledge In Planner</b> IJCAI 1971.</li>
<li>G.M. Birtwistle, Ole-Johan Dahl, B. Myhrhaug and Kristen Nygaard. <b>SIMULA Begin</b> Auerbach Publishers Inc, 1973.</li>
<li>Daniel Bobrow: <b>A Model for Control Structures for Artificial Intelligence Programming Languages</b> IJCAI 1973.</li>
<li>Carl Hewitt, <i>et al.</i> <b>Actor Induction and Meta-evaluation</b> Conference Record of ACM Symposium on Principles of Programming Languages, January 1974.</li>
<li>Carl Hewitt, <i>et al.</i> <b>Behavioral Semantics of Nonrecursive Control Structure</b> Proceedings of Colloque sur la Programmation, April 1974.</li>
<li>Irene Greif and Carl Hewitt. <b>Actor Semantics of PLANNER-73</b> Conference Record of ACM Symposium on Principles of Programming Languages. January 1975.</li>
<li>Carl Hewitt. <b>How to Use What You Know</b> IJCAI. September, 1975.</li>
<li>Alan Kay and Adele Goldberg. <b>Smalltalk-72 Instruction Manual</b> Xerox PARC Memo SSL-76-6. May 1976.</li>
<li><a href="/wiki/Edsger_Dijkstra" title="Edsger Dijkstra" class="mw-redirect">Edsger Dijkstra</a>. <b>A discipline of programming</b> Prentice Hall. 1976.</li>
<li>Carl Hewitt and Henry Baker <b><a href="http://www.lcs.mit.edu/publications/pubs/pdf/MIT-LCS-TR-194.pdf" class="external text" title="http://www.lcs.mit.edu/publications/pubs/pdf/MIT-LCS-TR-194.pdf" rel="nofollow">Actors and Continuous Functionals</a></b> Proceeding of IFIP Working Conference on Formal Description of Programming Concepts. August 1-5, 1977.</li>
<li>Henry Baker and Carl Hewitt <b>The Incremental Garbage Collection of Processes</b> Proceeding of the Symposium on Artificial Intelligence Programming Languages. SIGPLAN Notices 12, August 1977.</li>
<li>Gilles Kahn and David MacQueen. <b>Coroutines and networks of parallel processes</b> IFIP. 1977</li>
<li>Aki Yonezawa <b>Specification and Verification Techniques for Parallel Programs Based on Message Passing Semantics</b> MIT EECS Doctoral Dissertation. December 1977.</li>
<li>Carl Hewitt. <b>Viewing Control Structures as Patterns of Passing Messages</b> Journal of Artificial Intelligence. June 1977.</li>
<li>Henry Baker. <b>Actor Systems for Real-Time Computation</b> MIT EECS Doctoral Dissertation. January 1978.</li>
<li>Carl Hewitt and Russ Atkinson. <b><a href="http://portal.acm.org/citation.cfm?id=512975&amp;coll=portal&amp;dl=ACM" class="external text" title="http://portal.acm.org/citation.cfm?id=512975&amp;coll=portal&amp;dl=ACM" rel="nofollow">Synchronization in Actor Systems</a></b> Proceedings of the 4th ACM SIGACT-SIGPLAN symposium on Principles of programming languages. 1977</li>
<li>Carl Hewitt and Russ Atkinson. <b>Specification and Proof Techniques for Serializers</b> IEEE Journal on Software Engineering. January 1979.</li>
<li>Ken Kahn. <b>A Computational Theory of Animation</b> MIT EECS Doctoral Dissertation. August 1979.</li>
<li>Carl Hewitt, Beppe Attardi, and Henry Lieberman. <b>Delegation in Message Passing</b> Proceedings of First International Conference on Distributed Systems Huntsville, AL. October 1979.</li>
<li>Nissim Francez, C.A.R. Hoare, Daniel Lehmann, and <a href="/w/index.php?title=Willem-Paul_de_Roever&amp;action=edit&amp;redlink=1" class="new" title="Willem-Paul de Roever (page does not exist)">Willem-Paul de Roever</a>. <b>Semantics of nondetermiism, concurrency, and communication</b> Journal of Computer and System Sciences. December 1979.</li>
<li><a href="/wiki/George_Milne" title="George Milne" class="mw-redirect">George Milne</a> and <a href="/wiki/Robin_Milner" title="Robin Milner">Robin Milner</a>. <b>Concurrent processes and their syntax</b> JACM. April 1979.</li>
<li>Russ Atkinson. <b>Automatic Verification of Serializers</b> MIT Doctoral Dissertation. June, 1980.</li>
<li>Bill Kornfeld and Carl Hewitt. <b>The Scientific Community Metaphor</b> IEEE Transactions on Systems, Man, and Cybernetics. January 1981.</li>
<li>Bill Kornfeld. <b>Parallelism in Problem Solving</b> MIT EECS Doctoral Dissertation. August 1981.</li>
<li>Daniel Theriault. <b>A Primer for the Act-1 Language</b> MIT AI memo 672. April 1982.</li>
<li>Daniel Theriault. <b>Issues in the Design and Implementation of Act 2</b> MIT AI technical report 728. June 1983.</li>
<li>Henry Lieberman. <b>An Object-Oriented Simulator for the Apiary</b> Conference of the American Association for Artificial Intelligence, Washington, D. C., August 1983</li>
<li>Carl Hewitt and Peter de Jong. <b>Analyzing the Roles of Descriptions and Actions in Open Systems</b> Proceedings of the National Conference on Artificial Intelligence. August 1983.</li>
<li>Carl Hewitt and Henry Lieberman. <b>Design Issues in Parallel Architecture for Artificial Intelligence</b> MIT AI memo 750. Nov. 1983.</li>
<li><a href="/wiki/Dan_Ingalls" title="Dan Ingalls" class="mw-redirect">Daniel Ingalls</a>. <b>The Evolution of the Smalltalk Virtual Machine</b> in Smalltalk-80: Bits of History, Words of Advice. Addison Wesley. 1983.</li>
<li><a href="/wiki/Hal_Abelson" title="Hal Abelson">Hal Abelson</a>, <a href="/wiki/Gerald_Jay_Sussman" title="Gerald Jay Sussman">Gerald Jay Sussman</a> and Julie Sussman, <b>Structure and Interpretation of Computer Programs</b> MIT Press and McGraw-Hill, 1985.</li>
<li><a href="/wiki/C.A.R._Hoare" title="C.A.R. Hoare" class="mw-redirect">C.A.R. Hoare</a>. <b><a href="http://www.usingcsp.com/" class="external text" title="http://www.usingcsp.com/" rel="nofollow">Communicating Sequential Processes</a></b> Prentice Hall. 1985.</li>
<li>Carl Hewitt. <b>The Challenge of Open Systems</b> Byte Magazine. April 1985. Reprinted in <i>The foundation of artificial intelligence---a sourcebook</i> Cambridge University Press. 1990.</li>
<li>Carl Manning. <b>Traveler: the actor observatory</b> ECOOP 1987. Also appears in <a href="/wiki/Lecture_Notes_in_Computer_Science" title="Lecture Notes in Computer Science">Lecture Notes in Computer Science</a>, vol. 276.</li>
<li>William Athas and Charles Seitz <b>Multicomputers: message-passing concurrent computers</b> IEEE Computer August 1988.</li>
<li>William Athas and Nanette Boden <b>Cantor: An Actor Programming System for Scientific Computing</b> in Proceedings of the NSF Workshop on Object-Based Concurrent Programming. 1988. Special Issue of SIGPLAN Notices.</li>
<li>Jean-Pierre Briot. <b>From objects to actors: Study of a limited symbiosis in Smalltalk-80</b> Rapport de Recherche 88-58, RXF-LITP, Paris, France, September 1988</li>
<li>William Dally and Wills, D. <b>Universal mechanisms for concurrency</b> PARLE 1989.</li>
<li>W. Horwat, A. Chien, and W. Dally. <b>Experience with CST: Programming and Implementation</b> PLDI. 1989.</li>
<li>Carl Hewitt. <b>Towards Open Information Systems Semantics</b> Proceedings of 10th International Workshop on Distributed Artificial Intelligence. October 23-27, 1990. Bandera, Texas.</li>
<li>Akinori Yonezawa, Ed. <b>ABCL: An Object-Oriented Concurrent System</b> MIT Press. 1990.</li>
<li>K. Kahn and Vijay A. Saraswat, "<a href="http://doi.acm.org/10.1145/97946.97955" class="external text" title="http://doi.acm.org/10.1145/97946.97955" rel="nofollow">Actors as a special case of concurrent constraint (logic) programming</a>", in SIGPLAN <i>Notices</i>, October 1990. Describes <a href="/wiki/Janus_computer_programming_language" title="Janus computer programming language" class="mw-redirect">Janus</a>.</li>
<li>Carl Hewitt. <b>Open Information Systems Semantics</b> Journal of Artificial Intelligence. January 1991.</li>
<li>Carl Hewitt and Jeff Inman. <b>DAI Betwixt and Between: From "Intelligent Agents" to Open Systems Science</b> IEEE Transactions on Systems, Man, and Cybernetics. Nov./Dec. 1991.</li>
<li>Carl Hewitt and Gul Agha. <b>Guarded Horn clause languages: are they deductive and Logical?</b> International Conference on Fifth Generation Computer Systems, Ohmsha 1988. Tokyo. Also in <i>Artificial Intelligence at MIT</i>, Vol. 2. MIT Press 1991.</li>
<li>William Dally, <i>et al.</i> <b>The Message-Driven Processor: A Multicomputer Processing Node with Efficient Mechanisms</b> <a href="/wiki/IEEE_Micro" title="IEEE Micro">IEEE Micro</a>. April 1992.</li>
<li>S. Miriyala, G. Agha, and Y.Sami. <b>Visulatizing actor programs using predicate transition nets</b> Journal of Visual Programming. 1992.</li>
<li>Alan Kay. <b><a href="http://www.smalltalk.org/smalltalk/TheEarlyHistoryOfSmalltalk_Abstract.html" class="external text" title="http://www.smalltalk.org/smalltalk/TheEarlyHistoryOfSmalltalk_Abstract.html" rel="nofollow">The Early History of Smalltalk</a></b> The second ACM conference on history of programming languages. 1993.</li>
<li>Carl Hewitt and Carl Manning. <b>Negotiation Architecture for Large-Scale Crisis Management</b> AAAI-94 Workshop on Models of Conflict Management in Cooperative Problem Solving. Seattle, WA. Aug. 4, 1994.</li>
<li>Darrell Woelk. <b>Developing InfoSleuth Agents Using Rosette: An Actor Based Language</b> Proceedings of the CIKM '95 Workshop on Intelligent Information Agents. 1995.</li>
<li>Carl Hewitt and Carl Manning. <b>Synthetic Infrastructures for Multi-Agency Systems</b> Proceedings of ICMAS '96. Kyoto, Japan. December 8–13, 1996.</li>
<li>S. Frolund. <b>Coordinating Distributed Objects: An Actor-Based Approach for Synchronization</b> MIT Press. November 1996.</li>
<li>W. Kim. <b>ThAL: An Actor System for Efficient and Scalable Concurrent Computing</b> PhD thesis. University of Illinois at Urbana Champaign. 1997.</li>
<li>Jean-Pierre Briot. <b>Acttalk: A framework for object-oriented concurrent programming-design and experience</b> 2nd France-Japan workshop. 1999.</li>
<li>N. Jamali, P. Thati, and G. Agha. <b>An actor based architecture for customizing and controlling agent ensembles</b> IEEE Intelligent Systems. 14(2). 1999.</li>
<li>Don Box, David Ehnebuske, Gopal Kakivaya, Andrew Layman, Noah Mendelsohn, Henrik Nielsen, Satish Thatte, Dave Winer. <b>Simple Object Access Protocol (SOAP) 1.1</b> <a href="/wiki/W3C" title="W3C" class="mw-redirect">W3C</a> Note. May 2000.</li>
<li>M. Astley, D. Sturman, and G. Agha. <b>Customizable middleware for modular distributed software</b> CACM. 44(5) 2001.</li>
<li>Carlos Varela. <b>Worldwide Computing with Universal Actors: Linguistic Abstractions for Naming, Migration, and Coordination</b> PhD thesis. U. of Illinois at Urbana-Champaign. 2001.</li>
<li>N. Venkatasubramanian, C. Talcott, and G. Agha. <b>A formal model for reasoning about adaptive QoS-enabled middleware</b> Formal Methods Europe (FME). 2001.</li>
<li>Edward Lee, S. Neuendorffer, and M. Wirthlin. <a href="http://ptolemy.eecs.berkeley.edu/papers/02/actorOrientedDesign/newFinal.pdf" class="external text" title="http://ptolemy.eecs.berkeley.edu/papers/02/actorOrientedDesign/newFinal.pdf" rel="nofollow"><b>Actor-oriented design of embedded hardware and software systems</b></a> Journal of circuits, systems, and computers. 2002.</li>
<li>P. Thati, R. Ziaei, and G. Agha. <b>A Theory of May Testing for Actors</b> Formal Methods for Open Object-based Distributed Systems. March 2002.</li>
<li>P. Thati, R. Ziaei, and G. Agha. <b>A theory of may testing for asynchronous calculi with locality and no name matching</b> Algebraic Methodology and Software Technology. Springer Verlag. September 2002. LNCS 2422.</li>
<li>Gul Agha and Carlos Varela. <b>Worldwide Computing Middleware</b> Practical Handbook on Internet Computing. CRC Press, 2004.</li>
<li>Stephen Neuendorffer. <a href="http://www.eecs.berkeley.edu/Pubs/TechRpts/2005/ERL-05-1.pdf" class="external text" title="http://www.eecs.berkeley.edu/Pubs/TechRpts/2005/ERL-05-1.pdf" rel="nofollow"><b>Actor-Oriented Metaprogramming</b></a> PhD Thesis. University of California, Berkeley. December, 2004</li>
<li>Carl Hewitt (2006a) <b>The repeated demise of logic programming and why it will be reincarnated</b> What Went Wrong and Why: Lessons from AI Research and Applications. Technical Report SS-06-08. AAAI Press. March 2006.</li>
<li>Carl Hewitt (2006b) <a href="http://www.pcs.usp.br/~coin-aamas06/10_commitment-43_16pages.pdf" class="external text" title="http://www.pcs.usp.br/~coin-aamas06/10_commitment-43_16pages.pdf" rel="nofollow"><i>What is Commitment? Physical, Organizational, and Social</i></a> COIN@AAMAS. April 27, 2006b.</li>
<li>Carl Hewitt (2007a) <b>What is Commitment? Physical, Organizational, and Social (Revised)</b> Pablo Noriega .et al. editors. LNAI 4386. Springer-Verlag. 2007.</li>
<li>Carl Hewitt (2007b) <b>Large-scale Organizational Computing requires Unstratified Paraconsistency and Reflection</b> COIN@AAMAS'07.</li>
<li>Carl Hewitt (2009) <b><a href="http://knol.google.com/k/carl-hewitt-httpcarlhewittinfo/a-historical-perspective-on-developing/pcxtp4rx7g1t/7#" class="external text" title="http://knol.google.com/k/carl-hewitt-httpcarlhewittinfo/a-historical-perspective-on-developing/pcxtp4rx7g1t/7#" rel="nofollow">A historical perspective on developing foundations for client cloud computing: The paradigm shift from “inconsistency denial” to “semantic integration”</a></b> ArXiv January 30, 2009.</li>
</ul>
</div>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Actor_model&amp;action=edit&amp;section=32" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<ul>
<li>A now dated set of speculations by Paul Mackay can be found at <a href="http://www.doc.ic.ac.uk/~nd/surprise_97/journal/vol2/pjm2/" class="external text" title="http://www.doc.ic.ac.uk/~nd/surprise_97/journal/vol2/pjm2/" rel="nofollow"><i>Why has the actor model not succeeded?</i></a></li>
<li><a href="http://www.irit.fr/PERSONNEL/SMAC/arcangeli/JavAct.html" class="external text" title="http://www.irit.fr/PERSONNEL/SMAC/arcangeli/JavAct.html" rel="nofollow">JavAct</a> - a Java library for programming concurrent, distributed, and mobile applications using the actor model (and open implementation principles).</li>
<li><a href="http://functionaljava.org/" class="external text" title="http://functionaljava.org/" rel="nofollow">Functional Java</a> - a Java library of that includes an implementation of concurrent actors with code examples in standard Java and Java 7 BGGA style.</li>
<li><a href="http://osl.cs.uiuc.edu/af" class="external text" title="http://osl.cs.uiuc.edu/af" rel="nofollow">ActorFoundry</a> - a Java-based library for Actor programming. The familiar Java syntax, an ant build file and a bunch of example make the entry barrier very low.</li>
<li><a href="http://tristan.aubrey-jones.com/code/?project=third_year_project&amp;dir=/" class="external text" title="http://tristan.aubrey-jones.com/code/?project=third_year_project&amp;dir=/" rel="nofollow">ActiveJava</a> - a prototype Java language extension for Actor programming.</li>
</ul>


<!-- 
NewPP limit report
Preprocessor node count: 10847/1000000
Post-expand include size: 67118/2048000 bytes
Template argument size: 22368/2048000 bytes
Expensive parser function count: 2/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:1637868-0!1!0!default!!en!2 and timestamp 20090415034508 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Actor_model">http://en.wikipedia.org/wiki/Actor_model</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Actor_model" title="Category:Actor model">Actor model</a></span></div><div id="mw-hidden-catlinks" class="mw-hidden-cats-hidden">Hidden categories:&#32;<span dir='ltr'><a href="/wiki/Category:Wikipedia_references_cleanup" title="Category:Wikipedia references cleanup">Wikipedia references cleanup</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_lacking_sources_from_December_2006" title="Category:Articles lacking sources from December 2006">Articles lacking sources from December 2006</a></span> | <span dir='ltr'><a href="/wiki/Category:All_articles_lacking_sources" title="Category:All articles lacking sources">All articles lacking sources</a></span> | <span dir='ltr'><a href="/wiki/Category:All_articles_with_unsourced_statements" title="Category:All articles with unsourced statements">All articles with unsourced statements</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_unsourced_statements_since_January_2009" title="Category:Articles with unsourced statements since January 2009">Articles with unsourced statements since January 2009</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Actor_model" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Actor_model" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Actor_model&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Actor_model&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Actor_model" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Actor_model" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Actor_model" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Actor_model&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Actor_model&amp;oldid=280195445" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Actor_model&amp;id=280195445">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-cs"><a href="http://cs.wikipedia.org/wiki/Aktor">Česky</a></li>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Mod%C3%A8le_d%27acteur">Français</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/%E3%82%A2%E3%82%AF%E3%82%BF%E3%83%BC%E3%83%A2%E3%83%87%E3%83%AB">日本語</a></li>
				<li class="interwiki-zh"><a href="http://zh.wikipedia.org/wiki/%E5%8F%83%E8%88%87%E8%80%85%E6%A8%A1%E5%BC%8F">中文</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 28 March 2009, at 11:33 (UTC).</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv133 in 0.078 secs. --></body></html>
