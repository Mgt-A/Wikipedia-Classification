<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Template metaprogramming,Articles with unsourced statements since February 2008,Programming paradigms,Abductive logic programming,Andrei Alexandrescu,Array programming,Aspect-oriented programming,Attribute-Oriented Programming,Automata-based programming,Automatic programming,Barton-Nackman trick" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Template_metaprogramming&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Template_metaprogramming&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Template metaprogramming - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Template_metaprogramming";
		var wgTitle = "Template metaprogramming";
		var wgAction = "view";
		var wgArticleId = "198000";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 278349824;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
<style type="text/css">/*<![CDATA[*/
.source-cpp {line-height: normal;}
.source-cpp li, .source-cpp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for cpp
 * CSS class: source-cpp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-cpp .de1, .source-cpp .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-cpp  {}
.source-cpp .head {}
.source-cpp .foot {}
.source-cpp .imp {font-weight: bold; color: red;}
.source-cpp .ln-xtra {color: #cc0; background-color: #ffc;}
.source-cpp li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-cpp li.li2 {font-weight: bold;}
.source-cpp .kw1 {color: #0000ff;}
.source-cpp .kw2 {color: #0000ff;}
.source-cpp .kw3 {color: #0000dd;}
.source-cpp .kw4 {color: #0000ff;}
.source-cpp .co1 {color: #ff0000;}
.source-cpp .co2 {color: #339900;}
.source-cpp .coMULTI {color: #ff0000; font-style: italic;}
.source-cpp .es0 {color: #666666; font-weight: bold;}
.source-cpp .br0 {color: #000000;}
.source-cpp .st0 {color: #666666;}
.source-cpp .nu0 {color: #0000dd;}
.source-cpp .me1 {color: #00eeff;}
.source-cpp .me2 {color: #00eeff;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style>		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Template_metaprogramming skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Template metaprogramming</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<table class="navbox" style="float:right; background-color:rgb(248,248,255); clear:right; margin: 1ex 0 0.5em 1em; width: 20em">
<tr>
<th><a href="/wiki/Programming_paradigm" title="Programming paradigm">Programming paradigms</a></th>
</tr>
<tr>
<td style="text-align:left">
<ul>
<li><a href="/wiki/Software_agent" title="Software agent">Agent-oriented</a></li>
<li><a href="/wiki/Component-based_software_engineering" title="Component-based software engineering">Component-based</a>
<ul>
<li><a href="/wiki/Flow-based_programming" title="Flow-based programming">Flow-based</a></li>
<li><a href="/wiki/Pipeline_programming" title="Pipeline programming">Pipeline</a></li>
</ul>
</li>
<li><a href="/wiki/Concatenative_programming_language" title="Concatenative programming language">Concatenative</a></li>
<li><a href="/wiki/Concurrent_computing" title="Concurrent computing">Concurrent computing</a></li>
<li><a href="/w/index.php?title=Context-oriented_programming&amp;action=edit&amp;redlink=1" class="new" title="Context-oriented programming (page does not exist)">Context-oriented</a></li>
<li><a href="/wiki/Declarative_programming" title="Declarative programming">Declarative</a> (Contrast: <a href="/wiki/Imperative_programming" title="Imperative programming">Imperative</a>)
<ul>
<li><a href="/wiki/Functional_programming" title="Functional programming">Functional</a>
<ul>
<li><a href="/wiki/Dataflow" title="Dataflow">Dataflow</a>
<ul>
<li><a href="/wiki/Spreadsheet" title="Spreadsheet">Cell-oriented (spreadsheets)</a></li>
<li><a href="/wiki/Reactive_programming" title="Reactive programming">Reactive</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="/w/index.php?title=Goal-directed_programming&amp;action=edit&amp;redlink=1" class="new" title="Goal-directed programming (page does not exist)">Goal-directed</a>
<ul>
<li><a href="/wiki/Constraint_programming" title="Constraint programming">Constraint</a></li>
<li><a href="/wiki/Constraint_logic_programming" title="Constraint logic programming">Constraint logic</a></li>
<li><a href="/wiki/Logic_programming" title="Logic programming">Logic</a>
<ul>
<li><a href="/wiki/Abductive_logic_programming" title="Abductive logic programming">Abductive logic</a></li>
<li><a href="/wiki/Inductive_logic_programming" title="Inductive logic programming">Inductive logic</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><a href="/wiki/Event-driven_programming" title="Event-driven programming">Event-driven</a></li>
<li><a href="/wiki/Feature_Oriented_Programming" title="Feature Oriented Programming">Feature-oriented</a></li>
<li><a href="/wiki/Function-level_programming" title="Function-level programming">Function-level</a> (Contrast: <a href="/wiki/Value-level_programming" title="Value-level programming">Value-level</a>)</li>
<li><a href="/wiki/Imperative_programming" title="Imperative programming">Imperative</a> (Contrast: <a href="/wiki/Declarative_programming" title="Declarative programming">Declarative</a>)
<ul>
<li>Advanced separation of concerns
<ul>
<li><a href="/wiki/Aspect-oriented_programming" title="Aspect-oriented programming">Aspect-oriented</a></li>
<li><a href="/wiki/Subject-oriented_programming" title="Subject-oriented programming">Subject-oriented</a></li>
</ul>
</li>
<li><a href="/wiki/Array_programming" title="Array programming">Array</a> (Contrast: <a href="/wiki/Scalar_programming" title="Scalar programming">Scalar</a>)</li>
<li><a href="/wiki/Automata-based_programming" title="Automata-based programming">Automata-based</a></li>
<li><a href="/wiki/Object-oriented_programming" title="Object-oriented programming">Object-oriented</a>
<ul>
<li><a href="/wiki/Class-based_programming" title="Class-based programming">Class-based</a></li>
<li><a href="/wiki/Prototype-based_programming" title="Prototype-based programming">Prototype-based</a></li>
</ul>
</li>
<li><a href="/wiki/Procedural_programming" title="Procedural programming">Procedural</a>
<ul>
<li><a href="/wiki/Structured_programming" title="Structured programming">Structured</a></li>
</ul>
</li>
<li><a href="/wiki/Role-oriented_programming" title="Role-oriented programming">Role-oriented</a></li>
<li><a href="/wiki/Scalar_programming" title="Scalar programming">Scalar</a> (Contrast: <a href="/wiki/Array_programming" title="Array programming">Array</a>)</li>
</ul>
</li>
<li><a href="/wiki/Iteration" title="Iteration">Iterative</a> (Contrast: <a href="/wiki/Recursion_(computer_science)" title="Recursion (computer science)">Recursive</a>)</li>
<li><a href="/wiki/Metaprogramming" title="Metaprogramming">Metaprogramming</a>
<ul>
<li><a href="/wiki/Attribute-Oriented_Programming" title="Attribute-Oriented Programming">Attribute-oriented</a></li>
<li><a href="/wiki/Automatic_programming" title="Automatic programming">Automatic</a>
<ul>
<li><a href="/wiki/Generic_programming" title="Generic programming">Generic</a>
<ul>
<li><strong class="selflink">Template</strong>
<ul>
<li><a href="/wiki/Policy-based_design" title="Policy-based design">Policy-based</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="/wiki/Language-oriented_programming" title="Language-oriented programming">Language-oriented</a>
<ul>
<li><a href="/wiki/Grammar-oriented_programming" title="Grammar-oriented programming">Grammar-oriented</a>
<ul>
<li><a href="/wiki/Dialecting" title="Dialecting">Dialecting</a></li>
</ul>
</li>
<li><a href="/wiki/Intentional_programming" title="Intentional programming">Intentional</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="/wiki/Reflection_(computer_science)" title="Reflection (computer science)">Reflective</a></li>
</ul>
</li>
<li><a href="/wiki/Modular_programming" title="Modular programming">Modular</a></li>
<li><a href="/wiki/Nondeterministic_programming" title="Nondeterministic programming">Nondeterministic</a></li>
<li><a href="/wiki/Parallel_computing" title="Parallel computing">Parallel computing</a>
<ul>
<li><a href="/wiki/Process-oriented_programming" title="Process-oriented programming">Process-oriented</a></li>
</ul>
</li>
<li><a href="/wiki/Programming_in_the_large_and_programming_in_the_small" title="Programming in the large and programming in the small">Programming in the large and programming in the small</a></li>
<li><a href="/wiki/Recursion_(computer_science)" title="Recursion (computer science)">Recursive</a> (Contrast: <a href="/wiki/Iteration" title="Iteration">Iterative</a>)</li>
<li><a href="/wiki/Tree_programming" title="Tree programming">Tree</a></li>
<li><a href="/wiki/Value-level_programming" title="Value-level programming">Value-level</a> (Contrast: <a href="/wiki/Function-level_programming" title="Function-level programming">Function-level</a>)</li>
</ul>
<hr />
<div class="noprint plainlinksneverexpand navbar" style="background:none; padding:0; font-weight:normal;; font-size:xx-small; text-align:center;">This box: <a href="/wiki/Template:Programming_paradigms" title="Template:Programming paradigms"><span title="View this template" style="">view</span></a>&#160;•&#160;<a href="/wiki/Template_talk:Programming_paradigms" title="Template talk:Programming paradigms"><span title="Discussion about this template" style="">talk</span></a>&#160;•&#160;<a href="http://en.wikipedia.org/w/index.php?title=Template:Programming_paradigms&amp;action=edit" class="external text" title="http://en.wikipedia.org/w/index.php?title=Template:Programming_paradigms&amp;action=edit" rel="nofollow"><span title="Edit this template" style=";">edit</span></a></div>
</td>
</tr>
</table>
<p><b>Template metaprogramming</b> is a <a href="/wiki/Metaprogramming" title="Metaprogramming">metaprogramming</a> technique in which <a href="/wiki/Generic_programming" title="Generic programming">templates</a> are used by a <a href="/wiki/Compiler" title="Compiler">compiler</a> to generate temporary source code, which is merged by the compiler with the rest of the source code and then compiled. The output of these templates include compile-time constants, data structures, and complete functions. The use of templates can be thought of as <a href="/wiki/Compile-time_execution" title="Compile-time execution" class="mw-redirect">compile-time execution</a>. The technique is used by a number of languages, the most well-known being <a href="/wiki/C%2B%2B" title="C++">C++</a>, but also <a href="/wiki/Curl_programming_language" title="Curl programming language" class="mw-redirect">Curl</a>, <a href="/wiki/D_programming_language" title="D programming language" class="mw-redirect">D</a>, <a href="/wiki/Eiffel_(programming_language)" title="Eiffel (programming language)">Eiffel</a>, <a href="/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell</a>, <a href="/wiki/ML_programming_language" title="ML programming language" class="mw-redirect">ML</a> and <a href="/wiki/XL_Programming_Language" title="XL Programming Language" class="mw-redirect">XL</a>.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Components_of_template_metaprogramming"><span class="tocnumber">1</span> <span class="toctext">Components of template metaprogramming</span></a></li>
<li class="toclevel-1"><a href="#Using_template_metaprogramming"><span class="tocnumber">2</span> <span class="toctext">Using template metaprogramming</span></a>
<ul>
<li class="toclevel-2"><a href="#Compile-time_class_generation"><span class="tocnumber">2.1</span> <span class="toctext">Compile-time class generation</span></a></li>
<li class="toclevel-2"><a href="#Compile-time_code_optimization"><span class="tocnumber">2.2</span> <span class="toctext">Compile-time code optimization</span></a></li>
<li class="toclevel-2"><a href="#Static_polymorphism"><span class="tocnumber">2.3</span> <span class="toctext">Static polymorphism</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Benefits_and_drawbacks_of_template_metaprogramming"><span class="tocnumber">3</span> <span class="toctext">Benefits and drawbacks of template metaprogramming</span></a></li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">4</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">5</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">6</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Components_of_template_metaprogramming" id="Components_of_template_metaprogramming"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Template_metaprogramming&amp;action=edit&amp;section=1" title="Edit section: Components of template metaprogramming">edit</a>]</span> <span class="mw-headline">Components of template metaprogramming</span></h2>
<p>The use of templates as a metaprogramming technique requires two distinct operations: a template must be defined, and a defined template must be instantiated. The template definition describes the generic form of the generated source code, and the instantiation causes a specific set of source code to be generated from the generic form in the template.</p>
<p>Template metaprogramming is generally <a href="/wiki/Turing-complete" title="Turing-complete" class="mw-redirect">Turing-complete</a>, meaning that any computation expressible by a computer program can be computed, in some form, by a template metaprogram.</p>
<p>Templates are different from <i><a href="/wiki/Macro_(computer_science)#Programming_macros" title="Macro (computer science)">macros</a></i>. A macro, which is also a compile-time language feature, generates code in-line using text manipulation and substitution. Macro systems often have limited compile-time process flow abilities and usually lack awareness of the semantics and type system of their companion language (an exception should be made with <a href="/wiki/Lisp_(programming_language)" title="Lisp (programming language)">Lisp</a>'s macros, which are written in Lisp itself, and is not a simple text manipulation and substitution).</p>
<p>Template metaprograms have no <a href="/wiki/Variable#Mutable_vs._immutable" title="Variable">mutable variables</a>— that is, no variable can change value once it has been initialized, therefore template metaprogramming can be seen as a form of <a href="/wiki/Functional_programming" title="Functional programming">functional programming</a>. In fact many template implementations only implement flow control through recursion, as seen in the example below.</p>
<p><a name="Using_template_metaprogramming" id="Using_template_metaprogramming"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Template_metaprogramming&amp;action=edit&amp;section=2" title="Edit section: Using template metaprogramming">edit</a>]</span> <span class="mw-headline">Using template metaprogramming</span></h2>
<p>Though the syntax of template metaprogramming is usually very different from the programming language it is used with, it has practical uses. Some common reasons to use templates are to implement <a href="/wiki/Generic_programming" title="Generic programming">generic programming</a> (avoiding sections of code which are similar except for some minor variations) or to perform automatic compile-time optimization such as doing something once at compile time rather than every time the program is run — for instance, by having the compiler unroll loops to eliminate jumps and loop count decrements whenever the program is executed.</p>
<p><a name="Compile-time_class_generation" id="Compile-time_class_generation"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Template_metaprogramming&amp;action=edit&amp;section=3" title="Edit section: Compile-time class generation">edit</a>]</span> <span class="mw-headline">Compile-time class generation</span></h3>
<p>What exactly "programming at compile-time" means can be illustrated with an example of a <a href="/wiki/Factorial" title="Factorial">factorial</a> function, which in non-templated C++ can be written using recursion as follows:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
<span class="kw4">int</span> factorial<span class="br0">(</span><span class="kw4">int</span> n<span class="br0">)</span> 
<span class="br0">{</span>
    <span class="kw1">if</span> <span class="br0">(</span>n == <span class="nu0">0</span><span class="br0">)</span>
       <span class="kw1">return</span> <span class="nu0">1</span>;
    <span class="kw1">return</span> n * factorial<span class="br0">(</span>n - <span class="nu0">1</span><span class="br0">)</span>;
<span class="br0">}</span>
 
<span class="kw4">void</span> foo<span class="br0">(</span><span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw4">int</span> x = factorial<span class="br0">(</span><span class="nu0">4</span><span class="br0">)</span>; <span class="co1">// == (4 * 3 * 2 * 1 * 1) == 24</span>
    <span class="kw4">int</span> y = factorial<span class="br0">(</span><span class="nu0">0</span><span class="br0">)</span>; <span class="co1">// == 0! == 1</span>
<span class="br0">}</span>
</pre></div>
<p>The code above will execute when the program is run to determine the factorial value of the literals 4 and 0.</p>
<p>Instead, by using template metaprogramming and template specialization to provide the ending condition for the recursion, the factorials used in the program, ignoring any factorial <i>not</i> used, can be calculated at compile-time by</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
<span class="kw2">template</span> &lt;int N&gt;
<span class="kw4">struct</span> Factorial 
<span class="br0">{</span>
    <span class="kw2">enum</span> <span class="br0">{</span> value = N * Factorial&lt;N - <span class="nu0">1</span>&gt;::<span class="me2">value</span> <span class="br0">}</span>;
<span class="br0">}</span>;
 
<span class="kw2">template</span> &lt;&gt;
<span class="kw4">struct</span> Factorial&lt;<span class="nu0">0</span>&gt; 
<span class="br0">{</span>
    <span class="kw2">enum</span> <span class="br0">{</span> value = <span class="nu0">1</span> <span class="br0">}</span>;
<span class="br0">}</span>;
 
<span class="co1">// Factorial&lt;4&gt;::value == 24</span>
<span class="co1">// Factorial&lt;0&gt;::value == 1</span>
<span class="kw4">void</span> foo<span class="br0">(</span><span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw4">int</span> x = Factorial&lt;<span class="nu0">4</span>&gt;::<span class="me2">value</span>; <span class="co1">// == 24</span>
    <span class="kw4">int</span> y = Factorial&lt;<span class="nu0">0</span>&gt;::<span class="me2">value</span>; <span class="co1">// == 1</span>
<span class="br0">}</span>
</pre></div>
<p>The code above calculates the factorial value of the literals 4 and 0 at compile time and uses the result as if they were precalculated constants.</p>
<p>While the two versions are similar from the point of view of the program's functionality, the first example calculates the factorials at run time, while the second calculates them at compile time. However, to be able to use templates in this manner, the compiler must know the value of its parameters at compile time, which has the natural precondition that <code>Factorial&lt;</code><i>X</i><code>&gt;::value</code> can only be used if <i>X</i> is known at compile time. In other words, <i>X</i> must be a constant literal or a constant expression.</p>
<p><a name="Compile-time_code_optimization" id="Compile-time_code_optimization"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Template_metaprogramming&amp;action=edit&amp;section=4" title="Edit section: Compile-time code optimization">edit</a>]</span> <span class="mw-headline">Compile-time code optimization</span></h3>
<p>The factorial example above is one example of compile-time code optimization in that all factorials used by the program are pre-compiled and injected as numeric constants at compilation, saving both run-time overhead and memory footprint. It is, however, a relatively minor optimisation.</p>
<p>As another, more significant, example of compile-time loop-unrolling, templated metaprogramming can be used to create <i>n</i>-dimensional vector classes (where <i>n</i> is known at compile time). The benefit over a more traditional <i>n</i>-dimensional vector is that the loops can be unrolled, resulting in very optimized code. As an example, consider the addition operator. An <i>n</i>-dimensional vector addition might be written as</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
<span class="kw2">template</span> &lt;int dimension&gt;
Vector&lt;dimension&gt;&amp; Vector&lt;dimension&gt;::<span class="me2">operator</span>+=<span class="br0">(</span><span class="kw4">const</span> Vector&lt;dimension&gt;&amp; rhs<span class="br0">)</span> 
<span class="br0">{</span>
    <span class="kw1">for</span> <span class="br0">(</span><span class="kw4">int</span> i = <span class="nu0">0</span>; i &lt; dimension; ++i<span class="br0">)</span>
        value<span class="br0">[</span>i<span class="br0">]</span> += rhs.<span class="me1">value</span><span class="br0">[</span>i<span class="br0">]</span>;
    <span class="kw1">return</span> *<span class="kw3">this</span>;
<span class="br0">}</span>
</pre></div>
<p>When the compiler instantiates the templated function defined above, the following code may be produced:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
<span class="kw2">template</span> &lt;&gt;
Vector&lt;<span class="nu0">2</span>&gt;&amp; Vector&lt;<span class="nu0">2</span>&gt;::<span class="me2">operator</span>+=<span class="br0">(</span><span class="kw4">const</span> Vector&lt;<span class="nu0">2</span>&gt;&amp; rhs<span class="br0">)</span> 
<span class="br0">{</span>
    value<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span> += rhs.<span class="me1">value</span><span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span>;
    value<span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span> += rhs.<span class="me1">value</span><span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span>;
    <span class="kw1">return</span> *<span class="kw3">this</span>;
<span class="br0">}</span>
</pre></div>
<p>The compiler's optimizer should be able to unroll the <code>for</code> loop because the template parameter <code>dimension</code> is a constant at compile time.</p>
<p><a name="Static_polymorphism" id="Static_polymorphism"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Template_metaprogramming&amp;action=edit&amp;section=5" title="Edit section: Static polymorphism">edit</a>]</span> <span class="mw-headline">Static polymorphism</span></h3>
<p><a href="/wiki/Type_polymorphism" title="Type polymorphism">Polymorphism</a> is a common standard programming facility where derived objects can be used as instances of their base object but where the derived objects' methods will be invoked, as in this code</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
<span class="kw2">class</span> Base
<span class="br0">{</span>
    <span class="kw2">public</span>:
    <span class="kw2">virtual</span> <span class="kw4">void</span> method<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> std::<span class="kw3">cout</span> &lt;&lt; <span class="st0">"Base"</span>; <span class="br0">}</span>
<span class="br0">}</span>;
 
<span class="kw2">class</span> Derived : <span class="kw2">public</span> Base
<span class="br0">{</span>
    <span class="kw2">public</span>:
    <span class="kw2">virtual</span> <span class="kw4">void</span> method<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> std::<span class="kw3">cout</span> &lt;&lt; <span class="st0">"Derived"</span>; <span class="br0">}</span>
<span class="br0">}</span>;
 
<span class="kw4">int</span> main<span class="br0">(</span><span class="br0">)</span>
<span class="br0">{</span>
    Base *pBase = <span class="kw3">new</span> Derived;
    pBase-&gt;method<span class="br0">(</span><span class="br0">)</span>; <span class="co1">//outputs "Derived"</span>
    <span class="kw3">delete</span> pBase;
    <span class="kw1">return</span> <span class="nu0">0</span>;
<span class="br0">}</span>
</pre></div>
<p>where all invocations of <code>virtual</code> methods will be those of the most-derived class. This <i>dynamically polymorphic</i> behaviour is obtained by the creation of <a href="/wiki/Vtable" title="Vtable" class="mw-redirect">virtual look-up tables</a> for classes with virtual methods, tables that are traversed at run time to identify the method to be invoked. Thus, <i>run-time polymorphism</i> necessarily entails execution overhead.</p>
<p>However, in many cases the polymorphic behaviour needed is invariant and can be determined at compile time. Then the <a href="/wiki/Curiously_Recurring_Template_Pattern" title="Curiously Recurring Template Pattern" class="mw-redirect">Curiously Recurring Template Pattern</a> (CRTP) can be used to achieve <i>static polymorphism</i>, which is an imitation of polymorphism in programming code but which is resolved at compile time and thus does away with run-time virtual-table lookups. For example:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
<span class="kw2">template</span> &lt;class Derived&gt;
<span class="kw4">struct</span> base
<span class="br0">{</span>
    <span class="kw4">void</span> interface<span class="br0">(</span><span class="br0">)</span>
    <span class="br0">{</span>
         <span class="co1">// ...</span>
         static_cast&lt;Derived*&gt;<span class="br0">(</span><span class="kw3">this</span><span class="br0">)</span>-&gt;implementation<span class="br0">(</span><span class="br0">)</span>;
         <span class="co1">// ...</span>
    <span class="br0">}</span>
<span class="br0">}</span>;
 
<span class="kw4">struct</span> derived : base&lt;derived&gt;
<span class="br0">{</span>
     <span class="kw4">void</span> implementation<span class="br0">(</span><span class="br0">)</span>;
<span class="br0">}</span>;
</pre></div>
<p>Here the base class template will take advantage of the fact that member function bodies are not instantiated until after their declarations, and it will use members of the derived class within its own member functions, via the use of a <code>static_cast</code>, thus at compilation generating an object composition with polymorphic characteristics. As an example of real-world usage, the CRTP is used in the <a href="/wiki/Boost_library" title="Boost library" class="mw-redirect">Boost</a> <a href="/wiki/Iterator" title="Iterator">iterator</a> library <a href="http://www.boost.org/libs/iterator/doc/iterator_facade.html" class="external autonumber" title="http://www.boost.org/libs/iterator/doc/iterator_facade.html" rel="nofollow">[1]</a>.</p>
<p>Another similar use is the "<a href="/wiki/Barton-Nackman_trick" title="Barton-Nackman trick">Barton-Nackman trick</a>", sometimes referred to as "restricted template expansion", where common functionality can be placed in a base class that is used not as a contract but as a necessary component to enforce conformant behaviour while minimising code redundancy.</p>
<p><a name="Benefits_and_drawbacks_of_template_metaprogramming" id="Benefits_and_drawbacks_of_template_metaprogramming"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Template_metaprogramming&amp;action=edit&amp;section=6" title="Edit section: Benefits and drawbacks of template metaprogramming">edit</a>]</span> <span class="mw-headline">Benefits and drawbacks of template metaprogramming</span></h2>
<ul>
<li><b>Compile-time versus execution-time tradeoff</b>: Since all templated code is processed, evaluated and expanded at compile-time, compilation will take longer while the executable code may be more efficient. This overhead is generally small, but for large projects, or projects relying pervasively on templates, it may be significant.</li>
<li><b>Generic programming</b>: Template metaprogramming allows the programmer to focus on architecture and delegate to the compiler the generation of any implementation required by client code. Thus, template metaprogramming can accomplish truly generic code, facilitating code minimization and better maintainability.<sup class="noprint Template-Fact"><span title="This claim needs references to reliable sources&#160;since February 2008" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</span></sup></li>
<li><b>Readability</b>: With respect to C++, the syntax and idioms of template metaprogramming are esoteric compared to conventional C++ programming, and advanced, or even most non-trivial, template metaprogramming can be very difficult to understand. Metaprograms can thus be difficult to maintain by programmers inexperienced in template metaprogramming (though this may vary with the language's implementation of template metaprogramming syntax).</li>
<li><b>Portability</b>: With respect to C++, due to differences in compilers, code relying heavily on template metaprogramming (especially the newest forms of metaprogramming) might have portability issues.</li>
</ul>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Template_metaprogramming&amp;action=edit&amp;section=7" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<ul>
<li><a href="/wiki/Metaprogramming" title="Metaprogramming">Metaprogramming</a></li>
<li><a href="/wiki/Preprocessor" title="Preprocessor">Preprocessor</a></li>
<li><a href="/wiki/Parametric_polymorphism" title="Parametric polymorphism" class="mw-redirect">Parametric polymorphism</a></li>
<li><a href="/wiki/Variadic_Templates" title="Variadic Templates">Variadic Templates</a></li>
</ul>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Template_metaprogramming&amp;action=edit&amp;section=8" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<ul>
<li><a href="/w/index.php?title=Ulrich_W._Eisenecker&amp;action=edit&amp;redlink=1" class="new" title="Ulrich W. Eisenecker (page does not exist)">Ulrich W. Eisenecker</a>: <i>Generative Programming: Methods, Tools, and Applications</i>, Addison-Wesley, <a href="/wiki/Special:BookSources/0201309777" class="internal">ISBN 0-201-30977-7</a></li>
<li><a href="/wiki/Andrei_Alexandrescu" title="Andrei Alexandrescu">Andrei Alexandrescu</a>: <i><a href="/wiki/Modern_C%2B%2B_Design" title="Modern C++ Design">Modern C++ Design</a>: Generic Programming and Design Patterns Applied</i>, Addison-Wesley, <a href="/wiki/Special:BookSources/3826613473" class="internal">ISBN 3-8266-1347-3</a></li>
<li><a href="/wiki/David_Abrahams_(computer_programmer)" title="David Abrahams (computer programmer)">David Abrahams</a>, <a href="/w/index.php?title=Aleksey_Gurtovoy&amp;action=edit&amp;redlink=1" class="new" title="Aleksey Gurtovoy (page does not exist)">Aleksey Gurtovoy</a>: <i>C++ Template Metaprogramming: Concepts, Tools, and Techniques from Boost and Beyond</i>, Addison-Wesley, <a href="/wiki/Special:BookSources/0321227255" class="internal">ISBN 0-321-22725-5</a></li>
<li><a href="/w/index.php?title=David_Vandervoorde&amp;action=edit&amp;redlink=1" class="new" title="David Vandervoorde (page does not exist)">David Vandervoorde</a>, <a href="/w/index.php?title=Nicolai_M._Josuttis&amp;action=edit&amp;redlink=1" class="new" title="Nicolai M. Josuttis (page does not exist)">Nicolai M. Josuttis</a>: <i>C++ Templates: The Complete Guide</i>, Addison-Wesley, <a href="/wiki/Special:BookSources/0201734842" class="internal">ISBN 0-201-73484-2</a></li>
<li><a href="/w/index.php?title=Manuel_Clavel&amp;action=edit&amp;redlink=1" class="new" title="Manuel Clavel (page does not exist)">Manuel Clavel</a>: <i>Reflection in Rewriting Logic: Metalogical Foundations and Metaprogramming Applications</i>, <a href="/wiki/Special:BookSources/1575862387" class="internal">ISBN 1-57586-238-7</a></li>
</ul>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Template_metaprogramming&amp;action=edit&amp;section=9" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<ul>
<li><a href="http://www.boost.org/libs/mpl/doc/" class="external text" title="http://www.boost.org/libs/mpl/doc/" rel="nofollow">The Boost Metaprogramming Library (Boost MPL)</a></li>
<li><a href="http://www.boost.org/libs/spirit/" class="external text" title="http://www.boost.org/libs/spirit/" rel="nofollow">The Spirit Library (built using template-metaprogramming)</a></li>
<li><a href="http://www.boost.org/libs/lambda/doc/" class="external text" title="http://www.boost.org/libs/lambda/doc/" rel="nofollow">The Boost Lambda library (use STL algorithms easily)</a></li>
<li><a href="http://osl.iu.edu/~tveldhui/papers/Template-Metaprograms/meta-art.html" class="external text" title="http://osl.iu.edu/~tveldhui/papers/Template-Metaprograms/meta-art.html" rel="nofollow">"Using C++ template metaprograms,"</a> <i>C++ Report,</i> Vol. 7 No. 4 (May 1995), pp. 36-43 by Todd Veldhuizen</li>
<li><a href="http://www.haskell.org/th/" class="external text" title="http://www.haskell.org/th/" rel="nofollow">Template Haskell, type-safe metaprogramming in Haskell</a></li>
<li><a href="/wiki/Walter_Bright" title="Walter Bright">Walter Bright</a>, <a href="http://www.digitalmars.com/d/templates-revisited.html" class="external text" title="http://www.digitalmars.com/d/templates-revisited.html" rel="nofollow">"Templates Revisited"</a>, an article on template metaprogramming in the <a href="/wiki/D_programming_language" title="D programming language" class="mw-redirect">D programming language</a>.</li>
<li>"<a href="http://www.cs.tut.fi/~kk/webstuff/MetaprogrammingCpp.pdf" class="external text" title="http://www.cs.tut.fi/~kk/webstuff/MetaprogrammingCpp.pdf" rel="nofollow">Metaprogramming in C++</a>" by <a href="/wiki/Johannes_Koskinen" title="Johannes Koskinen">Johannes Koskinen</a></li>
<li>"<a href="http://lcgapp.cern.ch/project/architecture/ReflectionPaper.pdf" class="external text" title="http://lcgapp.cern.ch/project/architecture/ReflectionPaper.pdf" rel="nofollow">Reflection support by means of template metaprogramming</a>" by <a href="/wiki/Giuseppe_Attardi" title="Giuseppe Attardi">Giuseppe Attardi</a>,Antonio Cisternino</li>
<li>"<a href="http://www.cs.ucsd.edu/~wgg/Statements/mburton-ifip-gw-07-2002.pdf" class="external text" title="http://www.cs.ucsd.edu/~wgg/Statements/mburton-ifip-gw-07-2002.pdf" rel="nofollow">STATIC DATA STRUCTURES</a>" by Michael C. Burton, William G. Griswold, Andrew D. McCulloch, Gary A. Huber</li>
<li>Article "<a href="http://www.codeproject.com/KB/recipes/meta_programming.aspx" class="external text" title="http://www.codeproject.com/KB/recipes/meta_programming.aspx" rel="nofollow">Template Meta Programming and Number Theory</a>" by Zeeshan Amjad</li>
<li>Article "<a href="http://www.codeproject.com/KB/cpp/TemplateMetaProgramming.aspx" class="external text" title="http://www.codeproject.com/KB/cpp/TemplateMetaProgramming.aspx" rel="nofollow">Template Meta Programming and Number Theory: Part 2</a>" by Zeeshan Amjad</li>
</ul>


<!-- 
NewPP limit report
Preprocessor node count: 205/1000000
Post-expand include size: 5645/2048000 bytes
Template argument size: 727/2048000 bytes
Expensive parser function count: 1/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:198000-0!1!0!default!!en!2 and timestamp 20090331230451 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Template_metaprogramming">http://en.wikipedia.org/wiki/Template_metaprogramming</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Computer_programming" title="Category:Computer programming">Computer programming</a></span> | <span dir='ltr'><a href="/wiki/Category:C%2B%2B" title="Category:C++">C++</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_example_C%2B%2B_code" title="Category:Articles with example C++ code">Articles with example C++ code</a></span></div><div id="mw-hidden-catlinks" class="mw-hidden-cats-hidden">Hidden categories:&#32;<span dir='ltr'><a href="/wiki/Category:All_articles_with_unsourced_statements" title="Category:All articles with unsourced statements">All articles with unsourced statements</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_unsourced_statements_since_February_2008" title="Category:Articles with unsourced statements since February 2008">Articles with unsourced statements since February 2008</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Template_metaprogramming" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Template_metaprogramming" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Template_metaprogramming&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Template_metaprogramming&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Template_metaprogramming" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Template_metaprogramming" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Template_metaprogramming" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Template_metaprogramming&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Template_metaprogramming&amp;oldid=278349824" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Template_metaprogramming&amp;id=278349824">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/C%2B%2B-Metaprogrammierung">Deutsch</a></li>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/M%C3%A9taprogrammation_avec_des_patrons">Français</a></li>
				<li class="interwiki-nl"><a href="http://nl.wikipedia.org/wiki/Template_(software)">Nederlands</a></li>
				<li class="interwiki-ko"><a href="http://ko.wikipedia.org/wiki/%ED%85%9C%ED%94%8C%EB%A6%BF_%EB%A9%94%ED%83%80%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D">한국어</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%83%A1%E3%82%BF%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0">日本語</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 19 March 2009, at 16:08.</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv164 in 0.062 secs. --></body></html>
