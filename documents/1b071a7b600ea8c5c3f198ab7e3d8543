<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Static single assignment form,Assembly language,Backend,Byte-code,C (programming language),Compiler,Compiler optimization,Constant propagation,Continuation-passing style,Control flow graph,Dead code elimination" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Static_single_assignment_form&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Static_single_assignment_form&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Static single assignment form - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Static_single_assignment_form";
		var wgTitle = "Static single assignment form";
		var wgAction = "view";
		var wgArticleId = "373371";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 280586190;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Static_single_assignment_form skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Static single assignment form</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<p>In <a href="/wiki/Compiler" title="Compiler">compiler</a> design, <b>static single assignment form</b> (often abbreviated as <b>SSA form</b> or <b>SSA</b>) is an <a href="/wiki/Intermediate_representation" title="Intermediate representation">intermediate representation</a> (IR) in which every variable is assigned exactly once. Existing variables in the original IR are split into <i>versions</i>, new variables typically indicated by the original name with a subscript, so that every definition gets its own version. In SSA form, <a href="/wiki/Use-define_chain" title="Use-define chain">use-def chains</a> are explicit and each contains a single element.</p>
<p>SSA was developed by <a href="/w/index.php?title=Ron_Cytron&amp;action=edit&amp;redlink=1" class="new" title="Ron Cytron (page does not exist)">Ron Cytron</a>, <a href="/wiki/Jeanne_Ferrante" title="Jeanne Ferrante">Jeanne Ferrante</a>, <a href="/w/index.php?title=Barry_Rosen_(computer_scientist)&amp;action=edit&amp;redlink=1" class="new" title="Barry Rosen (computer scientist) (page does not exist)">Barry Rosen</a>, <a href="/wiki/Mark_Wegman" title="Mark Wegman">Mark Wegman</a>, and <a href="/w/index.php?title=Ken_Zadeck&amp;action=edit&amp;redlink=1" class="new" title="Ken Zadeck (page does not exist)">Ken Zadeck</a>, researchers at <a href="/wiki/International_Business_Machines" title="International Business Machines" class="mw-redirect">IBM</a> in the 1980s.</p>
<p>In <a href="/wiki/Functional_language" title="Functional language" class="mw-redirect">functional language</a> compilers, such as those for <a href="/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme</a>, <a href="/wiki/ML_programming_language" title="ML programming language" class="mw-redirect">ML</a> and <a href="/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell</a>, <a href="/wiki/Continuation-passing_style" title="Continuation-passing style">continuation-passing style</a> (CPS) is generally used where one might expect to find SSA in a compiler for <a href="/wiki/Fortran" title="Fortran">Fortran</a> or <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a>. SSA and CPS are formally equivalent, so optimizations and transformations formulated in terms of one immediately apply to the other.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Benefits"><span class="tocnumber">1</span> <span class="toctext">Benefits</span></a></li>
<li class="toclevel-1"><a href="#Converting_to_SSA"><span class="tocnumber">2</span> <span class="toctext">Converting to SSA</span></a>
<ul>
<li class="toclevel-2"><a href="#Computing_minimal_SSA_using_dominance_frontiers"><span class="tocnumber">2.1</span> <span class="toctext">Computing minimal SSA using dominance frontiers</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Variations_that_reduce_the_number_of_.CE.A6_functions"><span class="tocnumber">3</span> <span class="toctext">Variations that reduce the number of Î¦ functions</span></a>
<ul>
<li class="toclevel-2"><a href="#Pruned_SSA"><span class="tocnumber">3.1</span> <span class="toctext">Pruned SSA</span></a></li>
<li class="toclevel-2"><a href="#Semi-pruned_SSA"><span class="tocnumber">3.2</span> <span class="toctext">Semi-pruned SSA</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Converting_out_of_SSA_form"><span class="tocnumber">4</span> <span class="toctext">Converting out of SSA form</span></a></li>
<li class="toclevel-1"><a href="#Extensions"><span class="tocnumber">5</span> <span class="toctext">Extensions</span></a></li>
<li class="toclevel-1"><a href="#Compilers_using_SSA_form"><span class="tocnumber">6</span> <span class="toctext">Compilers using SSA form</span></a></li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">7</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">8</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">9</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Benefits" id="Benefits"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Static_single_assignment_form&amp;action=edit&amp;section=1" title="Edit section: Benefits">edit</a>]</span> <span class="mw-headline">Benefits</span></h2>
<p>The primary usefulness of SSA comes from how it simultaneously simplifies and improves the results of a variety of <a href="/wiki/Compiler_optimization" title="Compiler optimization">compiler optimizations</a>, by simplifying the properties of variables. For example, consider this piece of code:</p>
<pre>
 y := 1
 y := 2
 x := y
</pre>
<p>As humans, we can see that the first assignment is not necessary, and that the value of <code>y</code> being used in the third line comes from the second assignment of <code>y</code>. A program would have to perform <a href="/wiki/Reaching_definition" title="Reaching definition">reaching definition analysis</a> to determine this. But if the program is in SSA form, both of these are immediate:</p>
<pre>
 y<sub>1</sub> := 1
 y<sub>2</sub> := 2
 x<sub>1</sub> := y<sub>2</sub>
</pre>
<p><a href="/wiki/Compiler_optimization" title="Compiler optimization">Compiler optimization</a> algorithms which are either enabled or strongly enhanced by the use of SSA include:</p>
<ul>
<li><a href="/wiki/Constant_propagation" title="Constant propagation" class="mw-redirect">constant propagation</a></li>
<li><a href="/wiki/Sparse_conditional_constant_propagation" title="Sparse conditional constant propagation">sparse conditional constant propagation</a></li>
<li><a href="/wiki/Dead_code_elimination" title="Dead code elimination">dead code elimination</a></li>
<li><a href="/wiki/Global_value_numbering" title="Global value numbering">global value numbering</a></li>
<li><a href="/wiki/Partial_redundancy_elimination" title="Partial redundancy elimination">partial redundancy elimination</a></li>
<li><a href="/wiki/Strength_reduction" title="Strength reduction">strength reduction</a></li>
<li><a href="/wiki/Register_allocation" title="Register allocation">register allocation</a></li>
</ul>
<p><a name="Converting_to_SSA" id="Converting_to_SSA"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Static_single_assignment_form&amp;action=edit&amp;section=2" title="Edit section: Converting to SSA">edit</a>]</span> <span class="mw-headline">Converting to SSA</span></h2>
<p>Converting ordinary code into SSA form is primarily a simple matter of replacing the target of each assignment with a new variable, and replacing each use of a variable with the "version" of the variable <a href="/wiki/Reaching_definition" title="Reaching definition">reaching</a> that point. For example, consider the following <a href="/wiki/Control_flow_graph" title="Control flow graph">control flow graph</a>:</p>
<center>
<p><a href="/wiki/File:SSA_example1.1.png" class="image" title="An example control flow graph, before conversion to SSA"><img alt="An example control flow graph, before conversion to SSA" src="http://upload.wikimedia.org/wikipedia/en/7/73/SSA_example1.1.png" width="200" height="290" border="0" /></a></p>
</center>
<p>Notice that we could change the name on the left side of "x <img class="tex" alt="\leftarrow" src="http://upload.wikimedia.org/math/a/6/4/a6465c0244621c63e7e1e96eb55aad7a.png" /> x - 3", and change the following uses of <var>x</var> to use that new name, and the program would still do the same thing. We exploit this in SSA by creating two new variables, <var>x</var><sub>1</sub> and <var>x</var><sub>2</sub>, each of which is assigned only once. We likewise give distinguishing subscripts to all the other variables, and we get this:</p>
<center>
<p><a href="/wiki/File:SSA_example1.2.png" class="image" title="An example control flow graph, partially converted to SSA"><img alt="An example control flow graph, partially converted to SSA" src="http://upload.wikimedia.org/wikipedia/en/f/f7/SSA_example1.2.png" width="200" height="290" border="0" /></a></p>
</center>
<p>We've figured out which definition each use is referring to, except for one thing: the uses of <var>y</var> in the bottom block could be referring to <i>either</i> <var>y</var><sub>1</sub> or <var>y</var><sub>2</sub>, depending on which way the control flow came from. So how do we know which one to use?</p>
<p>The answer is that we add a special statement, called a <i>Î¦ (Phi) function</i>, to the beginning of the last block. This statement will generate a new definition of <var>y</var>, <var>y</var><sub>3</sub>, by "choosing" either <var>y</var><sub>1</sub> or <var>y</var><sub>2</sub>, depending on which arrow control arrived from:</p>
<center>
<p><a href="/wiki/File:SSA_example1.3.png" class="image" title="An example control flow graph, fully converted to SSA"><img alt="An example control flow graph, fully converted to SSA" src="http://upload.wikimedia.org/wikipedia/en/8/84/SSA_example1.3.png" width="200" height="298" border="0" /></a></p>
</center>
<p>Now, the uses of <var>y</var> in the last block can simply use <var>y</var><sub>3</sub>, and they'll obtain the correct value either way. You might ask at this point, do we need to add a Î¦ function for <var>x</var> too? The answer is no; only one version of <var>x</var>, namely <var>x</var><sub>2</sub> is reaching this place, so there's no problem.</p>
<p>A more general question along the same lines is, given an arbitrary control flow graph, how can I tell where to insert Î¦ functions, and for what variables? This is a difficult question, but one that has an efficient solution that can be computed using a concept called <i>dominance frontiers</i>.</p>
<p>Note: the Î¦ functions are not actually implemented; instead, they're just markers for the compiler to place the value of all the variables, which are grouped together by the Î¦ function, in the same location in memory (or same register).</p>
<p><a name="Computing_minimal_SSA_using_dominance_frontiers" id="Computing_minimal_SSA_using_dominance_frontiers"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Static_single_assignment_form&amp;action=edit&amp;section=3" title="Edit section: Computing minimal SSA using dominance frontiers">edit</a>]</span> <span class="mw-headline">Computing minimal SSA using dominance frontiers</span></h3>
<p>First, we need the concept of a <a href="/wiki/Dominator_(node)" title="Dominator (node)" class="mw-redirect"><i>dominator</i></a>: we say that a node A <i>strictly dominates</i> a different node B in the control flow graph if it's impossible to reach B without passing through A first. This is useful, because if we ever reach B we know that any code in A has run. We say that A <i>dominates</i> B if either A strictly dominates B or A = B.</p>
<p>Now we can define the <a href="/wiki/Dominator_(node)" title="Dominator (node)" class="mw-redirect"><i>dominance frontier</i></a>: a node B is in the dominance frontier of a node A if A does <i>not</i> strictly dominate B, but does dominate some immediate predecessor of B (possibly A itself if A is the immediate predecessor of B). From A's point of view, these are the nodes at which other control paths, which don't go through A, make their earliest appearance.</p>
<p><br />
Dominance frontiers capture the precise places at which we need Î¦ functions: if the node A defines a certain variable, then that definition and that definition alone (or redefinitions) will reach every node A dominates. Only when we leave these nodes and enter the dominance frontier must we account for other flows bringing in other definitions of the same variable. Moreover, no other Î¦ functions are needed in the control flow graph to deal with A's definitions, and we can do with no less.</p>
<p><br />
One algorithm for computing the dominance frontier set is:</p>
<pre>
<b>for each</b> node b
    <b>if</b> the number of predecessors of b â¥ 2
        <b>for each</b> p <b>in</b> predecessors of b
            runner := p
            <b>while</b> runner â  idom(b)
                add b to runnerâs dominance frontier set
                runner := idom(runner)
</pre>
<p>Note: in the code above, a predecessor of node n is any node from which control is transferred to node n, and idom(n) is the immediate dominator of node n.</p>
<p>There is an efficient algorithm for finding dominance frontiers of each node. This algorithm was originally described in the paper "Efficiently computing static single assignment form and the control dependence graph", by R. Cytron, J. Ferrante, B. Rosen, M. Wegman and F. Zadeck, <i>ACM Trans. on Programming Languages and Systems</i> 13(4) 1991 pp.451â490. Also useful is chapter 19 of the book "Modern compiler implementation in Java" by Andrew Appel (Cambridge University Press, 2002). See the paper for more details.</p>
<p>Keith D. Cooper, Timothy J. Harvey, and Ken Kennedy of <a href="/wiki/Rice_University" title="Rice University">Rice University</a> describe an algorithm in their paper titled <a href="http://www.hipersoft.rice.edu/grads/publications/dom14.pdf" class="external text" title="http://www.hipersoft.rice.edu/grads/publications/dom14.pdf" rel="nofollow"><i>A Simple, Fast Dominance Algorithm</i></a>. The algorithm uses well engineered data structures to improve performance.</p>
<p><a name="Variations_that_reduce_the_number_of_.CE.A6_functions" id="Variations_that_reduce_the_number_of_.CE.A6_functions"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Static_single_assignment_form&amp;action=edit&amp;section=4" title="Edit section: Variations that reduce the number of Î¦ functions">edit</a>]</span> <span class="mw-headline">Variations that reduce the number of Î¦ functions</span></h2>
<p>"Minimal" SSA inserts the minimal number of Î¦ functions required to ensure that each name is assigned a value exactly once and that each reference (use) of a name in the original program can still refer to a unique name. (The latter requirement is needed to ensure that the compiler can write down a name for each operand in each operation.)</p>
<p>However, some of these Î¦ functions could be <i><a href="/wiki/Dead_code_elimination" title="Dead code elimination">dead</a></i>. For this reason, minimal SSA does not necessarily produce the fewest number of Î¦ functions that are needed by a specific procedure. For some types of analysis, these Î¦ functions are superfluous and can cause the analysis to run less efficiently.</p>
<p><a name="Pruned_SSA" id="Pruned_SSA"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Static_single_assignment_form&amp;action=edit&amp;section=5" title="Edit section: Pruned SSA">edit</a>]</span> <span class="mw-headline">Pruned SSA</span></h3>
<p>Pruned SSA form is based on a simple observation: Î¦ functions are only needed for variables that are "live" after the Î¦ function. (Here, "live" means that the value is used along some path that begins at the Î¦ function in question.) If a variable is not live, the result of the Î¦ function cannot be used and the assignment by the Î¦ function is dead.</p>
<p>Construction of pruned SSA form uses <a href="/wiki/Live_variable_analysis" title="Live variable analysis">live variable information</a> in the Î¦ function insertion phase to decide whether a given Î¦ function is needed. If the original variable name isn't live at the Î¦ function insertion point, the Î¦ function isn't inserted.</p>
<p>Another possibility is to treat pruning as a <a href="/wiki/Dead_code_elimination" title="Dead code elimination">dead code elimination</a> problem. Then, a Î¦ function is live only if any use in the input program will be rewritten to it, or if it will be used as an argument in another Î¦ function. When entering SSA form, each use is rewritten to the nearest definition that dominates it. A Î¦ function will then be considered live as long as it is the nearest definition that dominates at least one use, or at least one argument of a live Î¦.</p>
<p><a name="Semi-pruned_SSA" id="Semi-pruned_SSA"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Static_single_assignment_form&amp;action=edit&amp;section=6" title="Edit section: Semi-pruned SSA">edit</a>]</span> <span class="mw-headline">Semi-pruned SSA</span></h3>
<p>Semi-pruned SSA form <sup id="cite_ref-0" class="reference"><a href="#cite_note-0" title=""><span>[</span>1<span>]</span></a></sup> is an attempt to reduce the number of Î¦ functions without incurring the relatively high cost of computing live variable information. It is based on the following observation: if a variable is never live upon entry into a basic block, it never needs a Î¦ function. During SSA construction, Î¦ functions for any "block-local" variables are omitted.</p>
<p>Computing the set of block-local variables is a simpler and faster procedure than full live variable analysis, making semi-pruned SSA form more efficient to compute than pruned SSA form. On the other hand, pruned SSA form will contain fewer unnecessary Î¦ functions.</p>
<p><a name="Converting_out_of_SSA_form" id="Converting_out_of_SSA_form"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Static_single_assignment_form&amp;action=edit&amp;section=7" title="Edit section: Converting out of SSA form">edit</a>]</span> <span class="mw-headline">Converting out of SSA form</span></h2>
<p>As SSA form is no longer useful for direct execution, it is frequently used "on top of" another IR with which it remains in direct correspondence. This can be accomplished by "constructing" SSA as a set of functions which map between parts of the existing IR (basic blocks, instructions, operands, <i>etc.</i>) and its SSA counterpart. When the SSA form is no longer needed, these mapping functions may be discarded, leaving only the now-optimized IR.</p>
<p>Performing optimizations on SSA form usually leads to entangled SSA-Webs, meaning there are phi instructions whose operands do not all have the same root operand. In such cases color-out algorithms are used to come out of SSA. Naive algorithms introduce a copy along each predecessor path which caused a source of different root symbol to be put in phi than the destination of phi. There are multiple algorithms for coming out of SSA with fewer copies, most use interference graphs or some approximation of it to do copy coalescing.</p>
<p><a name="Extensions" id="Extensions"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Static_single_assignment_form&amp;action=edit&amp;section=8" title="Edit section: Extensions">edit</a>]</span> <span class="mw-headline">Extensions</span></h2>
<p>Extensions to SSA form can be divided into two categories.</p>
<p><i>Renaming scheme</i> extensions alter the renaming criterion. Recall that SSA form renames each variable when it is assigned a value. Alternative schemes include static single use form (which renames each variable at each statement when it is used) and static single information form (which renames each variable when it is assigned a value, and in each conditional context in which that variable is used).</p>
<p><i>Feature-specific</i> extensions retain the single assignment property for variables, but incorporate new semantics to model additional features. Some feature-specific extensions model high-level programming language features like arrays, objects and aliased pointers. Other feature-specific extensions model low-level architectural features like speculation and predication.</p>
<p><a name="Compilers_using_SSA_form" id="Compilers_using_SSA_form"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Static_single_assignment_form&amp;action=edit&amp;section=9" title="Edit section: Compilers using SSA form">edit</a>]</span> <span class="mw-headline">Compilers using SSA form</span></h2>
<p>SSA form is a relatively recent development in the compiler community. As such, many older compilers only use SSA form for some part of the compilation or optimization process, but most do not rely on it. Examples of compilers that rely heavily on SSA form include:</p>
<ul>
<li>The ETH <a href="/wiki/Oberon-2" title="Oberon-2" class="mw-redirect">Oberon-2</a> compiler was one of the first public projects to incorporate "GSA", a variant of SSA.</li>
</ul>
<ul>
<li>The <a href="/wiki/LLVM" title="LLVM" class="mw-redirect">LLVM</a> Compiler Infrastructure uses SSA form for all scalar register values (everything except memory) in its primary code representation. SSA form is only eliminated once register allocation occurs, late in the compile process (often at link time).</li>
</ul>
<ul>
<li>The <a href="/wiki/Open64" title="Open64">Open64</a> compiler uses SSA form in its global scalar optimizer, though the code is brought into SSA form before and taken out of SSA form afterwards. Open64 uses extensions to SSA form to represent memory in SSA form as well as scalar values.</li>
</ul>
<ul>
<li>As of version 4 (released in April 2005) GCC, the <a href="/wiki/GNU_Compiler_Collection" title="GNU Compiler Collection">GNU Compiler Collection</a>, makes extensive use of SSA. The <a href="/wiki/Frontend" title="Frontend" class="mw-redirect">frontends</a> generate <a href="/wiki/GENERIC" title="GENERIC">GENERIC</a> code which is then converted into SSA form by the "<a href="/w/index.php?title=Gimplifier&amp;action=edit&amp;redlink=1" class="new" title="Gimplifier (page does not exist)">gimplifier</a>" and optimized by the "<a href="/w/index.php?title=Middle-end&amp;action=edit&amp;redlink=1" class="new" title="Middle-end (page does not exist)">middle-end</a>". The <a href="/wiki/Backend" title="Backend" class="mw-redirect">backend</a> eventually translates the optimized intermediate code into <a href="/wiki/Register_Transfer_Language" title="Register Transfer Language" class="mw-redirect">RTL</a>, executes some more low-level optimizations and finally turns RTL into <a href="/wiki/Assembly_language" title="Assembly language">assembly language</a>.</li>
</ul>
<ul>
<li><a href="/wiki/IBM" title="IBM">IBM</a>'s open source adaptive <a href="/wiki/Java_virtual_machine" title="Java virtual machine" class="mw-redirect">Java virtual machine</a>, <a href="/wiki/Jikes" title="Jikes">Jikes</a> RVM, uses extended Array SSA, an extension of SSA that allows analysis of scalars, arrays, and object fields in a unified framework. Extended Array SSA analysis is only enabled at the maximum optimization level, which is applied to the most frequently executed portions of code.</li>
</ul>
<ul>
<li>In 2002, <a href="http://citeseer.ist.psu.edu/721276.html" class="external text" title="http://citeseer.ist.psu.edu/721276.html" rel="nofollow">researchers modified</a> IBM's JikesRVM (named JalapeÃ±o at the time) to run both standard Java <a href="/wiki/Byte-code" title="Byte-code" class="mw-redirect">byte-code</a> and a typesafe SSA (<a href="/wiki/SafeTSA" title="SafeTSA">SafeTSA</a>) byte-code class files, and demonstrated significant performance benefits to using the SSA byte-code.</li>
</ul>
<ul>
<li><a href="/wiki/Sun_Microsystems" title="Sun Microsystems">Sun Microsystems</a>' <a href="/wiki/Java_HotSpot_Virtual_Machine" title="Java HotSpot Virtual Machine" class="mw-redirect">Java HotSpot Virtual Machine</a> uses an SSA-based intermediate language in its JIT compiler.</li>
<li><a href="http://www.mono-project.com/Main_Page" class="external text" title="http://www.mono-project.com/Main_Page" rel="nofollow">Mono</a> uses SSA in its JIT compiler called Mini.</li>
<li><a href="http://jackcc.sf.net" class="external text" title="http://jackcc.sf.net" rel="nofollow">jackcc</a> is an open-source compiler for the academic instruction set Jackal 3.0. It uses a simple 3-operand code with SSA for its intermediate representation. As an interesting variant, it replaces Î¦ functions with a so-called SAME instruction, which instructs the register allocator to place the two live ranges into the same physical register.</li>
</ul>
<ul>
<li>Although not a compiler, the <a href="http://boomerang.sourceforge.net/" class="external text" title="http://boomerang.sourceforge.net/" rel="nofollow">Boomerang</a> <a href="/wiki/Decompiler" title="Decompiler">decompiler</a> uses SSA form in its internal representation. SSA is used to simplify expression propagation, identifying parameters and returns, preservation analysis, and more.</li>
<li><a href="http://www.dotgnu.org" class="external text" title="http://www.dotgnu.org" rel="nofollow">Portable.NET</a> uses SSA in its JIT compiler.</li>
<li><a href="http://www.info.uni-karlsruhe.de/software/libfirm" class="external text" title="http://www.info.uni-karlsruhe.de/software/libfirm" rel="nofollow">libFirm</a> a completely graph based SSA intermediate representation for compilers. libFirm uses SSA form for all scalar register values until code generation by use of a SSA-aware register allocator.</li>
</ul>
<ul>
<li>The Illinois Concert Compiler circa 1994 <a href="http://www-csag.ucsd.edu/projects/concert.html" class="external autonumber" title="http://www-csag.ucsd.edu/projects/concert.html" rel="nofollow">[1]</a> used a variant of SSA called SSU (Static Single Use) which renames each variable when it is assigned a value, and in each conditional context in which that variable is used; essentially the static single information form mentioned above. The SSU form is documented in <a href="http://www-csag.ucsd.edu/papers/jplevyak-thesis.ps" class="external text" title="http://www-csag.ucsd.edu/papers/jplevyak-thesis.ps" rel="nofollow">John Plevyak's Ph.D Thesis</a>.</li>
</ul>
<ul>
<li>The COINS compiler uses SSA form optimizations as explained here: <a href="http://www.is.titech.ac.jp/~sassa/coins-www-ssa/english/" class="external free" title="http://www.is.titech.ac.jp/~sassa/coins-www-ssa/english/" rel="nofollow">http://www.is.titech.ac.jp/~sassa/coins-www-ssa/english/</a></li>
</ul>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Static_single_assignment_form&amp;action=edit&amp;section=10" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<div class="references-small">
<ol class="references">
<li id="cite_note-0"><b><a href="#cite_ref-0" title="">^</a></b> Practical Improvements to the Construction and Destruction of Static Single Assignment Form (1998), Preston Briggs, Keith D. Cooper, Timothy J. Harvey, L. Taylor Simpson.</li>
</ol>
</div>
<ul>
<li><cite style="font-style:normal" class="book" id="CITEREFAppel.2C_Andrew_W.1999">Appel, Andrew W. (1999). <i>Modern Compiler Implementation in ML</i>. Cambridge University Press. <a href="/wiki/Special:BookSources/0521582741" class="internal">ISBN 0-521-58274-1</a>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Modern+Compiler+Implementation+in+ML&amp;rft.aulast=Appel%2C+Andrew+W.&amp;rft.au=Appel%2C+Andrew+W.&amp;rft.date=1999&amp;rft.pub=Cambridge+University+Press&amp;rft.isbn=0-521-58274-1&amp;rfr_id=info:sid/en.wikipedia.org:Static_single_assignment_form"><span style="display: none;">&#160;</span></span> Also available in <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a> (<a href="/wiki/Special:BookSources/052182060X" class="internal">ISBN 0-521-82060-X</a> 2002) and <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a> (<a href="/wiki/Special:BookSources/0521607655" class="internal">ISBN 0-521-60765-5</a>, 199 8) versions.</li>
<li><cite style="font-style:normal" class="book" id="CITEREFCooper.2C_Keith_D..3B_.26_Torczon.2C_Linda.2003">Cooper, Keith D.; &amp; Torczon, Linda. (2003). <i>Engineering a Compiler</i>. Morgan Kaufmann. <a href="/wiki/Special:BookSources/155860698X" class="internal">ISBN 1-55860-698-X</a>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Engineering+a+Compiler&amp;rft.aulast=Cooper%2C+Keith+D.%3B+%26+Torczon%2C+Linda.&amp;rft.au=Cooper%2C+Keith+D.%3B+%26+Torczon%2C+Linda.&amp;rft.date=2003&amp;rft.pub=Morgan+Kaufmann&amp;rft.isbn=1-55860-698-X&amp;rfr_id=info:sid/en.wikipedia.org:Static_single_assignment_form"><span style="display: none;">&#160;</span></span></li>
<li><cite style="font-style:normal" class="book" id="CITEREFMuchnick.2C_Steven_S.1997">Muchnick, Steven S. (1997). <i>Advanced Compiler Design and Implementation</i>. Morgan Kaufmann. <a href="/wiki/Special:BookSources/1558603204" class="internal">ISBN 1-55860-320-4</a>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Advanced+Compiler+Design+and+Implementation&amp;rft.aulast=Muchnick%2C+Steven+S.&amp;rft.au=Muchnick%2C+Steven+S.&amp;rft.date=1997&amp;rft.pub=Morgan+Kaufmann&amp;rft.isbn=1-55860-320-4&amp;rfr_id=info:sid/en.wikipedia.org:Static_single_assignment_form"><span style="display: none;">&#160;</span></span></li>
<li><cite style="font-style:normal" class="" id="CITEREFRichard_A._Kelsey1995">Richard A. Kelsey (March 1995). "A Correspondence between Continuation Passing Style and Static Single Assignment Form". <i>ACM SIGPLAN Notices</i> <b>30</b> (3): 13â22. <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<span class="neverexpand"><a href="http://dx.doi.org/10.1145%2F202530.202532" class="external text" title="http://dx.doi.org/10.1145%2F202530.202532" rel="nofollow">10.1145/202530.202532</a></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=A+Correspondence+between+Continuation+Passing+Style+and+Static+Single+Assignment+Form&amp;rft.jtitle=ACM+SIGPLAN+Notices&amp;rft.aulast=Richard+A.+Kelsey&amp;rft.au=Richard+A.+Kelsey&amp;rft.date=March+1995&amp;rft.volume=30&amp;rft.issue=3&amp;rft.pages=13%E2%80%9322&amp;rft_id=info:doi/10.1145%2F202530.202532&amp;rfr_id=info:sid/en.wikipedia.org:Static_single_assignment_form"><span style="display: none;">&#160;</span></span></li>
<li><cite style="font-style:normal" class="" id="CITEREFAndrew_W._Appel1998">Andrew W. Appel (April 1998). "SSA is Functional Programming". <i>ACM SIGPLAN Notices</i> <b>33</b> (4): 17â20. <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<span class="neverexpand"><a href="http://dx.doi.org/10.1145%2F278283.278285" class="external text" title="http://dx.doi.org/10.1145%2F278283.278285" rel="nofollow">10.1145/278283.278285</a></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=SSA+is+Functional+Programming&amp;rft.jtitle=ACM+SIGPLAN+Notices&amp;rft.aulast=Andrew+W.+Appel&amp;rft.au=Andrew+W.+Appel&amp;rft.date=April+1998&amp;rft.volume=33&amp;rft.issue=4&amp;rft.pages=17%E2%80%9320&amp;rft_id=info:doi/10.1145%2F278283.278285&amp;rfr_id=info:sid/en.wikipedia.org:Static_single_assignment_form"><span style="display: none;">&#160;</span></span></li>
</ul>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Static_single_assignment_form&amp;action=edit&amp;section=11" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<ul>
<li><a href="/wiki/Compiler_optimization" title="Compiler optimization">Compiler optimization</a></li>
<li><a href="/wiki/Valgrind" title="Valgrind">Valgrind</a></li>
</ul>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Static_single_assignment_form&amp;action=edit&amp;section=12" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<ul>
<li>Steven Bosscher and Diego Novillo. <a href="http://lwn.net/Articles/84888/" class="external text" title="http://lwn.net/Articles/84888/" rel="nofollow">GCC gets a new Optimizer Framework</a>. An article about GCC's use of SSA and how it improves over older IRs.</li>
<li><a href="http://www.cs.man.ac.uk/~jsinger/ssa.html" class="external text" title="http://www.cs.man.ac.uk/~jsinger/ssa.html" rel="nofollow">The SSA Bibliography</a>. Extensive catalogue of SSA research papers.</li>
</ul>
<ul>
<li>F.K. Zadeck. <a href="http://webcast.rice.edu/webcast.php?action=details&amp;event=1346" class="external text" title="http://webcast.rice.edu/webcast.php?action=details&amp;event=1346" rel="nofollow">"The Development of Static Single Assignment Form"</a>, December 2007 talk on the origins of SSA.</li>
</ul>


<!-- 
NewPP limit report
Preprocessor node count: 2403/1000000
Post-expand include size: 13229/2048000 bytes
Template argument size: 3774/2048000 bytes
Expensive parser function count: 0/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:373371-0!1!0!default!!en!2 and timestamp 20090419050258 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Static_single_assignment_form">http://en.wikipedia.org/wiki/Static_single_assignment_form</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Compiler_theory" title="Category:Compiler theory">Compiler theory</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_example_pseudocode" title="Category:Articles with example pseudocode">Articles with example pseudocode</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Static_single_assignment_form" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Static_single_assignment_form" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Static_single_assignment_form&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Static_single_assignment_form&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Static_single_assignment_form" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content â the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Static_single_assignment_form" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Static_single_assignment_form" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Static_single_assignment_form&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Static_single_assignment_form&amp;oldid=280586190" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Static_single_assignment_form&amp;id=280586190">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-ko"><a href="http://ko.wikipedia.org/wiki/%EC%A0%95%EC%A0%81_%EB%8B%A8%EC%9D%BC_%EB%B0%B0%EC%A0%95_%ED%98%95%EC%8B%9D">íêµ­ì´</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/%E9%9D%99%E7%9A%84%E5%8D%98%E4%B8%80%E4%BB%A3%E5%85%A5">æ¥æ¬èª</a></li>
				<li class="interwiki-sv"><a href="http://sv.wikipedia.org/wiki/SSA_(static_single_assignment_form)">Svenska</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 30 March 2009, at 05:36 (UTC).</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv115 in 0.091 secs. --></body></html>
