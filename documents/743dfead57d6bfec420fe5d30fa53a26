<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Denotational semantics,Articles with unsourced statements since September 2007,Special:Search/Denotational semantics,Denotational semantics,Abstract interpretation,Actor model,Apply,Axiomatic semantics,Bill Roscoe,Bottom element,C.A.R. Hoare" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Denotational_semantics&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Denotational_semantics&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Denotational semantics - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Denotational_semantics";
		var wgTitle = "Denotational semantics";
		var wgAction = "view";
		var wgArticleId = "55275";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 280307704;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Denotational_semantics skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Denotational semantics</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<table class="metadata plainlinks mbox-small" style="border:1px solid #aaa; background-color:#f9f9f9;">
<tr>
<td class="mbox-image"><a href="http://en.wikibooks.org/wiki/Special:Search/Denotational_semantics" title="b:Special:Search/Denotational semantics"><img alt="Sister project" src="http://upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/40px-Wikibooks-logo-en-noslogan.svg.png" width="40" height="40" border="0" /></a></td>
<td class="mbox-text" style="">The <a href="/wiki/Wikibooks" title="Wikibooks">Wikibook</a> <i><a href="http://en.wikibooks.org/wiki/Haskell" class="extiw" title="wikibooks:Haskell">Haskell</a></i> has a page on the topic of
<div style="margin-left:10px;"><i><b><a href="http://en.wikibooks.org/wiki/Haskell/Denotational_semantics" class="extiw" title="wikibooks:Haskell/Denotational semantics">Denotational semantics</a></b></i></div>
</td>
</tr>
</table>
<p>In <a href="/wiki/Computer_science" title="Computer science">computer science</a>, <b>denotational semantics</b> is an approach to formalizing the meanings of <a href="/wiki/Programming_language" title="Programming language">programming languages</a> by constructing mathematical objects (called <i>denotations</i>) which describe the meanings of expressions from the languages. Other approaches to providing a <a href="/wiki/Formal_semantics_of_programming_languages" title="Formal semantics of programming languages">formal semantics of programming languages</a> include <a href="/wiki/Axiomatic_semantics" title="Axiomatic semantics">axiomatic semantics</a> and <a href="/wiki/Operational_semantics" title="Operational semantics">operational semantics</a>.</p>
<p>Denotational semantics originated in the work of <a href="/wiki/Christopher_Strachey" title="Christopher Strachey">Christopher Strachey</a> and <a href="/wiki/Dana_Scott" title="Dana Scott">Dana Scott</a> in the 1960s. As originally developed by Strachey and Scott, denotational semantics provided the denotation (meaning) of a computer program as a <a href="/wiki/Function_(mathematics)" title="Function (mathematics)">function</a> that mapped input into output.<sup id="cite_ref-0" class="reference"><a href="#cite_note-0" title=""><span>[</span>1<span>]</span></a></sup> To give denotations to <a href="/wiki/Recursion" title="Recursion">recursively defined</a> programs, Scott proposed working with <a href="/wiki/Continuous_functions" title="Continuous functions" class="mw-redirect">continuous functions</a> between <a href="/wiki/Domain_theory" title="Domain theory">domains</a>, specifically <a href="/wiki/Complete_partial_order" title="Complete partial order">complete partial orders</a>. Work continues in the present day in investigating appropriate denotational semantics for aspects of programming languages such as sequentiality, <a href="/wiki/Denotational_semantics#Denotational_semantics_of_concurrency" title="Denotational semantics">concurrency</a>, non-determinism and local state.</p>
<p>Broadly speaking, denotational semantics is concerned with finding mathematical objects that represent what programs do. Collections of such objects are called domains. For example, programs (or program phrases) might be represented by partial functions, or by <a href="/wiki/Actor_model" title="Actor model">Actor</a> <a href="/wiki/Denotational_semantics_of_the_Actor_model" title="Denotational semantics of the Actor model">event diagram scenarios</a>, or by games between the environment and the system: these are all general examples of domains.</p>
<p>An important tenet of denotational semantics is that <i>semantics should be <a href="/wiki/Principle_of_compositionality" title="Principle of compositionality">compositional</a></i>: the denotation of a program phrase should be built out of the denotations of its subphrases. A simple example: the meaning of "3 + 4" is determined by the meanings of "3", "4", and "+".</p>
<p>Denotational semantics was first developed as a framework for functional and sequential programs modeled as mathematical functions mapping input to output. The first section of this article describes denotational semantics developed within this framework. Later sections deal with issues of polymorphism, concurrency, etc.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Semantics_of_recursive_programs"><span class="tocnumber">1</span> <span class="toctext">Semantics of recursive programs</span></a></li>
<li class="toclevel-1"><a href="#Development_of_denotational_semantics"><span class="tocnumber">2</span> <span class="toctext">Development of denotational semantics</span></a>
<ul>
<li class="toclevel-2"><a href="#Denotational_semantics_of_state"><span class="tocnumber">2.1</span> <span class="toctext">Denotational semantics of state</span></a></li>
<li class="toclevel-2"><a href="#Denotations_of_data_types"><span class="tocnumber">2.2</span> <span class="toctext">Denotations of data types</span></a></li>
<li class="toclevel-2"><a href="#Denotational_semantics_for_programs_of_restricted_complexity"><span class="tocnumber">2.3</span> <span class="toctext">Denotational semantics for programs of restricted complexity</span></a></li>
<li class="toclevel-2"><a href="#Denotational_semantics_of_non-deterministic_programs"><span class="tocnumber">2.4</span> <span class="toctext">Denotational semantics of non-deterministic programs</span></a></li>
<li class="toclevel-2"><a href="#Denotational_semantics_of_concurrency"><span class="tocnumber">2.5</span> <span class="toctext">Denotational semantics of concurrency</span></a></li>
<li class="toclevel-2"><a href="#Denotational_semantics_of_sequentiality"><span class="tocnumber">2.6</span> <span class="toctext">Denotational semantics of sequentiality</span></a></li>
<li class="toclevel-2"><a href="#Denotational_semantics_as_source-to-source_translation"><span class="tocnumber">2.7</span> <span class="toctext">Denotational semantics as source-to-source translation</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Full_abstraction"><span class="tocnumber">3</span> <span class="toctext">Full abstraction</span></a></li>
<li class="toclevel-1"><a href="#Semantics_versus_implementation"><span class="tocnumber">4</span> <span class="toctext">Semantics versus implementation</span></a></li>
<li class="toclevel-1"><a href="#Connections_to_other_areas_of_computer_science"><span class="tocnumber">5</span> <span class="toctext">Connections to other areas of computer science</span></a></li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">6</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1"><a href="#Further_reading"><span class="tocnumber">7</span> <span class="toctext">Further reading</span></a>
<ul>
<li class="toclevel-2"><a href="#Textbooks"><span class="tocnumber">7.1</span> <span class="toctext">Textbooks</span></a></li>
<li class="toclevel-2"><a href="#Other_references"><span class="tocnumber">7.2</span> <span class="toctext">Other references</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">8</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Semantics_of_recursive_programs" id="Semantics_of_recursive_programs"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Denotational_semantics&amp;action=edit&amp;section=1" title="Edit section: Semantics of recursive programs">edit</a>]</span> <span class="mw-headline">Semantics of recursive programs</span></h2>
<p>In this section we review the semantics of <a href="/wiki/Functional_programming" title="Functional programming">functional</a> recursive programs which were the initial subject matter of denotational semantics.</p>
<p>The problem is as follows. We need to give a semantics to programs such as the definition of the <a href="/wiki/Factorial" title="Factorial">factorial</a> function as</p>
<dl>
<dd>
<dl>
<dd><tt>function factorial(n:Nat):Nat ≡ if (n==0)then 1 else n*factorial(n-1)</tt>.</dd>
</dl>
</dd>
</dl>
<p>The meaning of this factorial program should be a function on the natural numbers, but, because of its recursive definition, it is not clear how to understand this in a compositional way.</p>
<p>In the semantics of recursion, a domain is typically a <a href="/wiki/Partial_order" title="Partial order" class="mw-redirect">partial order</a>, which can be understood as an order of definedness. For instance, the set of partial functions on the natural numbers can be given an order as follows:</p>
<dl>
<dd>
<dl>
<dd>given partial functions f and g, let "f≤g" mean that "f agrees with g on all values for which f is defined".</dd>
</dl>
</dd>
</dl>
<p>The core idea behind using partial orders is that each recursive step broadens the domain on which a function is defined. Thus, for example, if <i>f</i> was the factorial function, recursively defined for only <i>n</i> iterations, then <i>g</i> could be the factorial function, recursively defined for <i>n</i>+1 (or more) iterations.</p>
<p>It is usual to assume some properties of the domain, such as the existence of limits of chains (see <a href="/wiki/Complete_partial_order" title="Complete partial order">cpo</a>) and a bottom element. The partial order of partial functions has a bottom element, the totally undefined function. It also has least upper bounds of chains. Various additional properties are often reasonable and helpful: the article on <a href="/wiki/Domain_theory" title="Domain theory">domain theory</a> has more details. One particularly important property is that of <a href="/wiki/Scott_continuity" title="Scott continuity">Scott continuity</a>: one is interested in the <a href="/wiki/Continuous_function_(topology)" title="Continuous function (topology)">continuous</a> functions between domains (in the <a href="/wiki/Scott_topology" title="Scott topology" class="mw-redirect">Scott topology</a>). These are functions that preserve the order structure, and that preserve least upper bounds.</p>
<p>In this setting, types are denoted by domains, and the elements of the domains roughly capturing the elements of the types. A denotational semantics is given to a program phrase with free variables in terms of a continuous function from the denotation of its environment type to the denotation of its type. For example, the phrase <tt>n*g(n-1)</tt> has type <tt>Nat</tt>, and it has two free variables: <tt>n</tt>, of type <tt>Nat</tt>, and <tt>g</tt> of type <tt>Nat -&gt; Nat</tt>. Thus its denotation will be a continuous function</p>
<dl>
<dd>
<dl>
<dd><img class="tex" alt="\mathbb N \times (\mathbb N \rightharpoonup \mathbb N) \to \mathbb N" src="http://upload.wikimedia.org/math/6/2/6/6261c33311e949e66534ac9842b159b2.png" />.</dd>
</dl>
</dd>
</dl>
<p>Under this order on the partial functions, the denotation of the factorial program can be given as follows. First, we must develop denotations (as Scott-continuous functions) for the basic constructions such as <tt>if-then-else</tt>, <tt>==</tt>, and multiplication. One must also develop a denotational semantics for function abstraction and <a href="/wiki/Apply" title="Apply">application</a>. The program phrase</p>
<dl>
<dd>
<dl>
<dd><tt>λ n:N. if (n==0)then 1 else n*g(n-1)</tt></dd>
</dl>
</dd>
</dl>
<p>can then be given a denotation as a continuous function between the domains of partial functions</p>
<dl>
<dd>
<dl>
<dd><img class="tex" alt="F:(\mathbb N\rightharpoonup\mathbb N) \to (\mathbb N\rightharpoonup\mathbb N)" src="http://upload.wikimedia.org/math/d/d/9/dd9753985978c7dfb5b34a1bc9a97a18.png" />.</dd>
</dl>
</dd>
</dl>
<p>The denotation of the factorial program is defined to be the <a href="/wiki/Least_fixed_point" title="Least fixed point">least fixed point</a> of this function <i>F</i>. It is thus an element of the domain <img class="tex" alt="(\mathbb N\rightharpoonup\mathbb N)" src="http://upload.wikimedia.org/math/7/1/9/7191dffc8aa28bd4c7fadc7b065c3d5e.png" />. The reason that such a fixed point exists is because <i>F</i> is a continuous function. A version of <a href="/wiki/Tarski%27s_fixed_point_theorem" title="Tarski's fixed point theorem" class="mw-redirect">Tarski's fixed point theorem</a> says that continuous functions on domains have least fixed points.</p>
<p>One way of proving the fixed point theorem gives an intuition as to why it is appropriate to give a semantics for recursion in this way. Every continuous function <i>F:D→D</i> on a domain <i>D</i> with <a href="/wiki/Bottom_element" title="Bottom element" class="mw-redirect">bottom element</a> ⊥ has a fixed point given by</p>
<dl>
<dd>
<dl>
<dd>⊔<sub>i∈N</sub><i>F<sup>i</sup></i>(⊥).</dd>
</dl>
</dd>
</dl>
<p>Here, the notation <i>F<sup>i</sup></i> indicates <a href="/wiki/Iterated_function" title="Iterated function"><i>i</i>-many applications</a> of <i>F</i>. The symbol "⊔" means "least upper bound".</p>
<p>It is instructive to think of the components of the chain as "iterates". In the case of the factorial program above, we had a function <i>F</i> on the domain of partial functions.</p>
<ul>
<li><i>F</i><sup>0</sup>(⊥) is the totally undefined partial function <i>N→N</i>;</li>
<li><i>F</i><sup>1</sup>(⊥) is the function that is defined at 0, to be 1, and undefined elsewhere;</li>
<li><i>F</i><sup>5</sup>(⊥) is the factorial function defined up to 4: <i>F</i><sup>5</sup>(⊥)(4) = 24. It is undefined for arguments greater than 4.</li>
</ul>
<p>Thus the least upper bound of this chain, then, is the full factorial function (which happens to be a total function).</p>
<p><a name="Development_of_denotational_semantics" id="Development_of_denotational_semantics"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Denotational_semantics&amp;action=edit&amp;section=2" title="Edit section: Development of denotational semantics">edit</a>]</span> <span class="mw-headline">Development of denotational semantics</span></h2>
<p>Denotational semantics has developed by investigating more elaborate constructions of programming languages and different models of computation.</p>
<p><a name="Denotational_semantics_of_state" id="Denotational_semantics_of_state"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Denotational_semantics&amp;action=edit&amp;section=3" title="Edit section: Denotational semantics of state">edit</a>]</span> <span class="mw-headline">Denotational semantics of state</span></h3>
<p>State (such as a heap) and <a href="/wiki/Imperative_programming" title="Imperative programming">imperative features</a> can be straightforwardly modeled in the denotational semantics described above. All the <a href="/wiki/Denotational_semantics#Textbooks" title="Denotational semantics">textbooks</a> below have the details. The key idea is to consider a command as a partial function on some domain of states. The denotation of "<tt>x:=3</tt>" is then the function that takes a state to the state with <tt>3</tt> assigned to <tt>x</tt>. The sequencing operator "<tt>;</tt>" is denoted by composition of functions. Fixed-point constructions are then used to give a semantics to looping constructs, such as "<tt>while</tt>".</p>
<p>Things become more difficult in modelling programs with local variables. One approach is to no longer work with domains, but instead to interpret types as <a href="/wiki/Functors" title="Functors" class="mw-redirect">functors</a> from some <a href="/wiki/Category_(mathematics)" title="Category (mathematics)">category</a> of worlds to a <a href="/wiki/Category_(mathematics)" title="Category (mathematics)">category</a> of domains. Programs are then denoted by <a href="/wiki/Natural_transformation" title="Natural transformation">natural</a> continuous functions between these functors.<sup id="cite_ref-1" class="reference"><a href="#cite_note-1" title=""><span>[</span>2<span>]</span></a></sup><sup id="cite_ref-2" class="reference"><a href="#cite_note-2" title=""><span>[</span>3<span>]</span></a></sup></p>
<p><a name="Denotations_of_data_types" id="Denotations_of_data_types"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Denotational_semantics&amp;action=edit&amp;section=4" title="Edit section: Denotations of data types">edit</a>]</span> <span class="mw-headline">Denotations of data types</span></h3>
<p>Many programming languages allow users to define <a href="/wiki/Recursive_type" title="Recursive type">recursive data types</a>. For example, the type of lists of numbers can be specified by</p>
<dl>
<dd>
<dl>
<dd><tt>datatype list = Cons of (Nat, list) | Empty.</tt></dd>
</dl>
</dd>
</dl>
<p>This section deals only with functional data structures that cannot change. Conventional programming languages would typically allow the elements of such a recursive list to be changed.</p>
<p>For another example: the type of denotations of the <a href="/wiki/Untyped_lambda_calculus" title="Untyped lambda calculus" class="mw-redirect">untyped lambda calculus</a> is</p>
<dl>
<dd>
<dl>
<dd><tt>datatype D = (D → D)</tt></dd>
</dl>
</dd>
</dl>
<p>The problem of <i>solving domain equations</i> is concerned with finding domains that model these kinds of datatypes. One approach, roughly speaking, is to consider the collection of all domains as a domain itself, and then solve the recursive definition there. The <a href="/wiki/Denotational_semantics#Textbooks" title="Denotational semantics">textbooks</a> below give more details.</p>
<p><a href="/wiki/Polymorphism_(computer_science)" title="Polymorphism (computer science)" class="mw-redirect">Polymorphic data types</a> are data types that are defined with a parameter. For example, the type of α <tt>list</tt>s is defined by</p>
<dl>
<dd>
<dl>
<dd><tt>datatype α list = Cons of (α, list) | Empty.</tt></dd>
</dl>
</dd>
</dl>
<p>Lists of numbers, then, are of type <tt>Nat list</tt>, while lists of strings are of <tt>String list</tt>.</p>
<p>Some researchers have developed domain theoretic models of polymorphism. Other researchers have also modeled parametric polymorphism within constructive set theories. Details are found in the <a href="/wiki/Denotational_semantics#Textbooks" title="Denotational semantics">textbooks</a> listed below.</p>
<p>A recent research area has involved denotational semantics for object and class based programming languages.<sup id="cite_ref-3" class="reference"><a href="#cite_note-3" title=""><span>[</span>4<span>]</span></a></sup></p>
<p><a name="Denotational_semantics_for_programs_of_restricted_complexity" id="Denotational_semantics_for_programs_of_restricted_complexity"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Denotational_semantics&amp;action=edit&amp;section=5" title="Edit section: Denotational semantics for programs of restricted complexity">edit</a>]</span> <span class="mw-headline">Denotational semantics for programs of restricted complexity</span></h3>
<p>Following the development of programming languages based on <a href="/wiki/Linear_logic" title="Linear logic">linear logic</a>, denotational semantics have been given to languages for linear usage (see e.g. <a href="/wiki/Proof_net" title="Proof net">proof nets</a>, <a href="/wiki/Coherent_space" title="Coherent space">coherence spaces</a>) and also polynomial time complexity<sup id="cite_ref-4" class="reference"><a href="#cite_note-4" title=""><span>[</span>5<span>]</span></a></sup>.</p>
<p><a name="Denotational_semantics_of_non-deterministic_programs" id="Denotational_semantics_of_non-deterministic_programs"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Denotational_semantics&amp;action=edit&amp;section=6" title="Edit section: Denotational semantics of non-deterministic programs">edit</a>]</span> <span class="mw-headline">Denotational semantics of non-deterministic programs</span></h3>
<p>The concept of <a href="/wiki/Power_domains" title="Power domains">power domains</a> has been developed to give a denotational semantics to <a href="/wiki/Nondeterministic_algorithm" title="Nondeterministic algorithm">non-deterministic sequential programs</a>. Writing <i>P</i> for a power domain constructor, the domain <i>P</i>(<i>D</i>) is the domain of non-deterministic computations of type denoted by <i>D</i>.</p>
<p>There are difficulties with fairness and <a href="/wiki/Unbounded_nondeterminism" title="Unbounded nondeterminism">unboundedness</a> in domain-theoretic models of non-determinism.<sup id="cite_ref-5" class="reference"><a href="#cite_note-5" title=""><span>[</span>6<span>]</span></a></sup> See <a href="/wiki/Power_domains#Power_domains_for_nondeterminism" title="Power domains">Power domains for nondeterminism</a>.</p>
<p><a name="Denotational_semantics_of_concurrency" id="Denotational_semantics_of_concurrency"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Denotational_semantics&amp;action=edit&amp;section=7" title="Edit section: Denotational semantics of concurrency">edit</a>]</span> <span class="mw-headline">Denotational semantics of concurrency</span></h3>
<p>Many researchers have argued that the domain theoretic models given above do not suffice for the more general case of <a href="/wiki/Concurrency_(computer_science)" title="Concurrency (computer science)">concurrent computation</a>. For this reason various <a href="/wiki/Concurrency_(computer_science)#Models" title="Concurrency (computer science)">new models</a> have been introduced. In the early 1980s, people began using the style of denotational semantics to give semantics for concurrent languages. Examples include <a href="/wiki/Denotational_semantics_of_the_Actor_model#Clinger.27s_Model" title="Denotational semantics of the Actor model">Will Clinger's work with the actor model</a>; Glynn Winskel's work with event structures and <a href="/wiki/Petri_nets" title="Petri nets" class="mw-redirect">petri nets</a><sup id="cite_ref-6" class="reference"><a href="#cite_note-6" title=""><span>[</span>7<span>]</span></a></sup>; and the work by Francez, Hoare, Lehmann, and de Roever (1979) on trace semantics for <a href="/wiki/Communicating_sequential_processes" title="Communicating sequential processes">CSP</a>.<sup id="cite_ref-7" class="reference"><a href="#cite_note-7" title=""><span>[</span>8<span>]</span></a></sup> All these lines of enquiry remain under investigation (see e.g. Hewitt's <a href="/wiki/Denotational_semantics_of_the_Actor_model#The_Timed_Diagrams_Model" title="Denotational semantics of the Actor model">Timed Diagrams Model</a>,<sup id="cite_ref-Hewitt06_8-0" class="reference"><a href="#cite_note-Hewitt06-8" title=""><span>[</span>9<span>]</span></a></sup> or the various denotational models for CSP<sup id="cite_ref-9" class="reference"><a href="#cite_note-9" title=""><span>[</span>10<span>]</span></a></sup>).</p>
<p>Recently, Winskel and others have proposed the category of <a href="/wiki/Profunctor" title="Profunctor">profunctors</a> as a domain theory for concurrency.<sup id="cite_ref-10" class="reference"><a href="#cite_note-10" title=""><span>[</span>11<span>]</span></a></sup><sup id="cite_ref-11" class="reference"><a href="#cite_note-11" title=""><span>[</span>12<span>]</span></a></sup></p>
<p><a name="Denotational_semantics_of_sequentiality" id="Denotational_semantics_of_sequentiality"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Denotational_semantics&amp;action=edit&amp;section=8" title="Edit section: Denotational semantics of sequentiality">edit</a>]</span> <span class="mw-headline">Denotational semantics of sequentiality</span></h3>
<p>The problem of full abstraction (see <a href="/wiki/Denotational_semantics#Full_abstraction" title="Denotational semantics">below</a>) for the sequential programming language <a href="/wiki/Programming_language_for_Computable_Functions" title="Programming language for Computable Functions">PCF</a> was, for a long time, a big open question in denotational semantics. The difficulty with PCF is that it is a very sequential language. For example, there is no way to define the parallel-or function in PCF. It is for this reason that the approach using domains, as introduced above, yields a denotational semantics that is not fully abstract.</p>
<p>This open question was mostly resolved in the 1990s with the development of <a href="/wiki/Game_semantics" title="Game semantics">game semantics</a> and also with techniques involving logical relations.<sup id="cite_ref-12" class="reference"><a href="#cite_note-12" title=""><span>[</span>13<span>]</span></a></sup> For more details, see the page on <a href="/wiki/Programming_language_for_Computable_Functions" title="Programming language for Computable Functions">PCF</a>.</p>
<p><a name="Denotational_semantics_as_source-to-source_translation" id="Denotational_semantics_as_source-to-source_translation"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Denotational_semantics&amp;action=edit&amp;section=9" title="Edit section: Denotational semantics as source-to-source translation">edit</a>]</span> <span class="mw-headline">Denotational semantics as source-to-source translation</span></h3>
<p>It is often useful to translate one programming language into another. For example, a concurrent programming language might be translated into a <a href="/wiki/Process_calculus" title="Process calculus">process calculus</a>; a high-level programming language might be translated into byte-code. (Indeed, conventional denotational semantics can be seen as the interpretation of programming languages into the internal language of the category of domains.)</p>
<p>In this context, notions from denotational semantics, such as <a href="/wiki/Denotational_semantics#full_abstraction" title="Denotational semantics">full abstraction</a>, help to satisfy security concerns.<sup id="cite_ref-13" class="reference"><a href="#cite_note-13" title=""><span>[</span>14<span>]</span></a></sup><sup id="cite_ref-14" class="reference"><a href="#cite_note-14" title=""><span>[</span>15<span>]</span></a></sup></p>
<p><a name="Full_abstraction" id="Full_abstraction"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Denotational_semantics&amp;action=edit&amp;section=10" title="Edit section: Full abstraction">edit</a>]</span> <span class="mw-headline">Full abstraction</span></h2>
<p>It is often considered important to connect the properties of a denotational semantics with those of an established <a href="/wiki/Operational_semantics" title="Operational semantics">operational semantics</a>. This is especially important when the denotational semantics is rather mathematical and abstract, and the operational semantics is more concrete or closer to the computational intuitions. The following properties of a denotational semantics are often of interest.</p>
<ol>
<li><b>Independence of denotational and operational semantics</b>: The denotational semantics should be formalized using mathematical structures that are independent of the operational semantics of a programming language;</li>
<li><b>Soundness</b>: All <a href="/wiki/Observational_equivalence" title="Observational equivalence">observably distinct</a> programs have distinct denotations;</li>
<li><b>Full abstraction</b>: Two programs have the same denotations precisely when they are <a href="/wiki/Observational_equivalence" title="Observational equivalence">observationally equivalent</a>.</li>
</ol>
<p>Additional desirable properties we may wish to hold between operational and denotational semantics are:</p>
<ol>
<li><b>Constructivity</b>: The semantic model should be constructive in the sense that it should only include elements that can be intuitively constructed. One way of formalizing this is that every element must be the limit of a directed set of finite elements.</li>
<li><b>Progressivity</b>:<sup id="cite_ref-Hewitt06_8-1" class="reference"><a href="#cite_note-Hewitt06-8" title=""><span>[</span>9<span>]</span></a></sup> For each system <tt>S</tt>, there is a <tt><b>progression</b><sub>S</sub></tt> function for the semantics such that the denotation (meaning) of a system <tt>S</tt> is <tt>⊔<sub>i∈ω</sub><b>progression</b><sub>S</sub><sup>i</sup>(⊥<sub>S</sub>)</tt> where <tt>⊥<sub>S</sub></tt> is the initial configuration of <tt>S</tt>.</li>
<li><b>Full completeness</b> or <b>definability</b>: Every morphism of the semantic model should be the denotation of a program.<sup class="noprint Template-Fact"><span title="This claim needs references to reliable sources&#160;since September 2007" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</span></sup></li>
</ol>
<p>For semantics in the traditional style, full abstraction may be understood roughly as the requirement that "operational equivalence coincides with denotational equality". For denotational semantics in more intensional models, such as the <a href="/wiki/Actor_model" title="Actor model">Actor model</a> and <a href="/wiki/Process_calculi" title="Process calculi" class="mw-redirect">process calculi</a>, there are different notions of equivalence within each model, and so the concept of full abstraction is a matter of debate, and harder to pin down. Also the mathematical structure of operational semantics and denotational semantics can become very close.</p>
<p><a name="Semantics_versus_implementation" id="Semantics_versus_implementation"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Denotational_semantics&amp;action=edit&amp;section=11" title="Edit section: Semantics versus implementation">edit</a>]</span> <span class="mw-headline">Semantics versus implementation</span></h2>
<p>According to <a href="/wiki/Dana_Scott" title="Dana Scott">Dana Scott</a> [1980]:</p>
<dl>
<dd><i>It is not necessary for the semantics to determine an implementation, but it should provide criteria for showing that an implementation is correct.</i></dd>
</dl>
<p>According to Clinger [1981]:</p>
<dl>
<dd><i>Usually, however, the formal semantics of a conventional sequential programming language may itself be interpreted to provide an (inefficient) implementation of the language. A formal semantics need not always provide such an implementation, though, and to believe that semantics must provide an implementation leads to confusion about the formal semantics of concurrent languages. Such confusion is painfully evident when the presence of unbounded nondeterminism in a programming language's semantics is said to imply that the programming language cannot be implemented.</i></dd>
</dl>
<p><a name="Connections_to_other_areas_of_computer_science" id="Connections_to_other_areas_of_computer_science"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Denotational_semantics&amp;action=edit&amp;section=12" title="Edit section: Connections to other areas of computer science">edit</a>]</span> <span class="mw-headline">Connections to other areas of computer science</span></h2>
<p>Some work in denotational semantics has interpreted types as domains in the sense of <a href="/wiki/Domain_theory" title="Domain theory">domain theory</a> which can be seen as a branch of <a href="/wiki/Model_theory" title="Model theory">model theory</a>, leading to connections with <a href="/wiki/Type_theory" title="Type theory">type theory</a> and <a href="/wiki/Category_theory" title="Category theory">category theory</a>. Within computer science, there are connections with <a href="/wiki/Abstract_interpretation" title="Abstract interpretation">abstract interpretation</a>, <a href="/wiki/Program_verification" title="Program verification" class="mw-redirect">program verification</a>, and <a href="/wiki/Model_checking" title="Model checking">model checking</a>.</p>
<p>Monads were introduced to denotational semantics as a way of organising semantics, and these ideas have had a big impact in <a href="/wiki/Functional_programming" title="Functional programming">functional programming</a> (see <a href="/wiki/Monads_in_functional_programming" title="Monads in functional programming" class="mw-redirect">monads in functional programming</a>).</p>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Denotational_semantics&amp;action=edit&amp;section=13" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<div class="references-small">
<ol class="references">
<li id="cite_note-0"><b><a href="#cite_ref-0" title="">^</a></b> Dana Scott and Christopher Strachey. <i>Toward a mathematical semantics for computer languages</i> Oxford Programming Research Group Technical Monograph. PRG-6. 1971.</li>
<li id="cite_note-1"><b><a href="#cite_ref-1" title="">^</a></b> Peter W. O'Hearn, John Power, Robert D. Tennent, Makoto Takeyama: Syntactic control of interference revisited. Electr. Notes Theor. Comput. Sci. 1. 1995.</li>
<li id="cite_note-2"><b><a href="#cite_ref-2" title="">^</a></b> Frank J. Oles: A Category-Theoretic Approach to the Semanics of Programming. PhD thesis, Syracuse University. 1982.</li>
<li id="cite_note-3"><b><a href="#cite_ref-3" title="">^</a></b> Bernhard Reus, Thomas Streicher: Semantics and logic of object calculi. Theor. Comput. Sci. 316(1): 191-213 (2004)</li>
<li id="cite_note-4"><b><a href="#cite_ref-4" title="">^</a></b> P. Baillot. Stratified coherence spaces: a denotational semantics for Light Linear Logic ( ps.gz) Theoretical Computer Science , 318 (1-2), pp.29-55, 2004.</li>
<li id="cite_note-5"><b><a href="#cite_ref-5" title="">^</a></b> Paul Blain Levy: Amb Breaks Well-Pointedness, Ground Amb Doesn't. Electr. Notes Theor. Comput. Sci. 173: 221-239 (2007)</li>
<li id="cite_note-6"><b><a href="#cite_ref-6" title="">^</a></b> Event Structure Semantics for CCS and Related Languages. DAIMI Research Report, University of Aarhus, 67 pp., April 1983.</li>
<li id="cite_note-7"><b><a href="#cite_ref-7" title="">^</a></b> Nissim Francez, <a href="/wiki/C.A.R._Hoare" title="C.A.R. Hoare" class="mw-redirect">C.A.R. Hoare</a>, Daniel Lehmann, and Willem-Paul de Roever. <i>Semantics of nondeterminism, concurrency, and communication</i> Journal of Computer and System Sciences. December 1979.</li>
<li id="cite_note-Hewitt06-8">^ <a href="#cite_ref-Hewitt06_8-0" title=""><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-Hewitt06_8-1" title=""><sup><i><b>b</b></i></sup></a> Carl Hewitt (2006) <a href="http://www.pcs.usp.br/~coin-aamas06/10_commitment-43_16pages.pdf" class="external text" title="http://www.pcs.usp.br/~coin-aamas06/10_commitment-43_16pages.pdf" rel="nofollow">What is Commitment? Physical, Organizational, and Social</a> COIN@AAMAS. 2006.</li>
<li id="cite_note-9"><b><a href="#cite_ref-9" title="">^</a></b> <a href="/wiki/Bill_Roscoe" title="Bill Roscoe">A. W. Roscoe</a>: <i>The Theory and Practice of Concurrency</i>, <a href="/wiki/Prentice_Hall" title="Prentice Hall">Prentice Hall</a>, <a href="/wiki/Special:BookSources/0136744095" class="internal">ISBN 0-13-674409-5</a>. Revised 2005.</li>
<li id="cite_note-10"><b><a href="#cite_ref-10" title="">^</a></b> Gian Luca Cattani, Glynn Winskel: Profunctors, open maps and bisimulation. Mathematical Structures in Computer Science 15(3): 553-614 (2005)</li>
<li id="cite_note-11"><b><a href="#cite_ref-11" title="">^</a></b> Mikkel Nygaard, Glynn Winskel: Domain theory for concurrency. Theor. Comput. Sci. 316(1): 153-190 (2004)</li>
<li id="cite_note-12"><b><a href="#cite_ref-12" title="">^</a></b> P. W. O'Hearn and J. G. Riecke, Kripke Logical Relations and PCF, Information and Computation, Volume 120, Issue 1, July 1995, Pages 107-116.</li>
<li id="cite_note-13"><b><a href="#cite_ref-13" title="">^</a></b> Martin Abadi. Protection in programming-language translations. Proc. of ICALP'98. LNCS 1443. 1998.</li>
<li id="cite_note-14"><b><a href="#cite_ref-14" title="">^</a></b> Andrew Kennedy. Securing the .NET programming model. Theoretical Computer Science, 364(3). 2006</li>
</ol>
</div>
<p><a name="Further_reading" id="Further_reading"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Denotational_semantics&amp;action=edit&amp;section=14" title="Edit section: Further reading">edit</a>]</span> <span class="mw-headline">Further reading</span></h2>
<p><a name="Textbooks" id="Textbooks"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Denotational_semantics&amp;action=edit&amp;section=15" title="Edit section: Textbooks">edit</a>]</span> <span class="mw-headline">Textbooks</span></h3>
<ul>
<li><a href="/wiki/Joe_Stoy" title="Joe Stoy">Joseph E. Stoy</a>, <i>Denotational Semantics: The Scott-Strachey Approach to Programming Language Semantics</i>. <a href="/wiki/MIT_Press" title="MIT Press">MIT Press</a>, Cambridge, Massachusetts, 1977. (A classic if dated textbook.)</li>
<li>Carl Gunter, "Semantics of Programming Languages: Structures and Techniques". <a href="/wiki/MIT_Press" title="MIT Press">MIT Press</a>, Cambridge, Massachusetts, 1992. (<a href="/wiki/Special:BookSources/9780262071437" class="internal">ISBN 978-0262071437</a>)</li>
<li>Glynn Winskel, <i>Formal Semantics of Programming Languages</i>. <a href="/wiki/MIT_Press" title="MIT Press">MIT Press</a>, Cambridge, Massachusetts, 1993. (<a href="/wiki/Special:BookSources/9780262731034" class="internal">ISBN 978-0262731034</a>)</li>
<li>R. D. Tennent, <i>Denotational semantics</i>. Handbook of logic in computer science, vol. 3 pp 169--322. Oxford University Press, 1994. (<a href="/wiki/Special:BookSources/019853762X" class="internal">ISBN 0-19-853762-X</a>)</li>
</ul>
<p><a name="Other_references" id="Other_references"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Denotational_semantics&amp;action=edit&amp;section=16" title="Edit section: Other references">edit</a>]</span> <span class="mw-headline">Other references</span></h3>
<ul>
<li>S. Abramsky and A. Jung: <a href="http://www.cs.bham.ac.uk/~axj/pub/papers/handy1.pdf" class="external text" title="http://www.cs.bham.ac.uk/~axj/pub/papers/handy1.pdf" rel="nofollow"><i>Domain theory</i></a>. In S. Abramsky, D. M. Gabbay, T. S. E. Maibaum, editors, Handbook of Logic in Computer Science, vol. III. Oxford University Press, 1994. (<a href="/wiki/Special:BookSources/019853762X" class="internal">ISBN 0-19-853762-X</a>)</li>
<li>Irene Greif. <i>Semantics of Communicating Parallel Processes</i> MIT EECS Doctoral Dissertation. August 1975.</li>
<li>Gordon Plotkin. <i>A powerdomain construction</i> SIAM Journal of Computing September 1976.</li>
<li><a href="/wiki/Edsger_Dijkstra" title="Edsger Dijkstra" class="mw-redirect">Edsger Dijkstra</a>. <i>A Discipline of Programming</i> <a href="/wiki/Prentice_Hall" title="Prentice Hall">Prentice Hall</a>. 1976.</li>
<li>Krzysztof R. Apt, J. W. de Bakker. <i>Exercises in Denotational Semantics</i> MFCS 1976: 1-11</li>
<li>J. W. de Bakker. <i>Least Fixed Points Revisited</i> Theor. Comput. Sci. 2(2): 155-181 (1976)</li>
<li>Carl Hewitt and Henry Baker <b><a href="http://www.lcs.mit.edu/publications/pubs/pdf/MIT-LCS-TR-194.pdf" class="external text" title="http://www.lcs.mit.edu/publications/pubs/pdf/MIT-LCS-TR-194.pdf" rel="nofollow">Actors and Continuous Functionals</a></b> Proceeding of IFIP Working Conference on Formal Description of Programming Concepts. August 1-5, 1977.</li>
<li><a href="/wiki/Henry_Baker_(computer_scientist)" title="Henry Baker (computer scientist)">Henry Baker</a>. <i>Actor Systems for Real-Time Computation</i> MIT EECS Doctoral Dissertation. January 1978.</li>
<li>Michael Smyth. <i>Power domains</i> <a href="/w/index.php?title=Journal_of_Computer_and_System_Sciences&amp;action=edit&amp;redlink=1" class="new" title="Journal of Computer and System Sciences (page does not exist)">Journal of Computer and System Sciences</a>. 1978.</li>
<li>George Milne and <a href="/wiki/Robin_Milner" title="Robin Milner">Robin Milner</a>. <i>Concurrent processes and their syntax</i> <a href="/wiki/JACM" title="JACM" class="mw-redirect">JACM</a>. April, 1979.</li>
<li>Nissim Francez, <a href="/wiki/C.A.R._Hoare" title="C.A.R. Hoare" class="mw-redirect">C.A.R. Hoare</a>, Daniel Lehmann, and Willem-Paul de Roever. <i>Semantics of nondeterminism, concurrency, and communication</i> Journal of Computer and System Sciences. December 1979.</li>
<li>Nancy Lynch and Michael Fischer. <i>On describing the behavior of distributed systems</i> in Semantics of Concurrent Computation. <a href="/wiki/Springer_Science%2BBusiness_Media" title="Springer Science+Business Media">Springer-Verlag</a>. 1979.</li>
<li>Jerald Schwartz <i>Denotational semantics of parallelism</i> in Semantics of Concurrent Computation. Springer-Verlag. 1979.</li>
<li>William Wadge. <i>An extensional treatment of dataflow deadlock</i> Semantics of Concurrent Computation. Springer-Verlag. 1979.</li>
<li>Ralph-Johan Back. <i>Semantics of Unbounded Nondeterminism</i> <a href="/wiki/ICALP" title="ICALP" class="mw-redirect">ICALP</a> 1980.</li>
<li>David Park. <i>On the semantics of fair parallelism</i> Proceedings of the Winter School on Formal Software Specification. Springer-Verlag. 1980.</li>
<li>Will Clinger, <i><a href="http://hdl.handle.net/1721.1/6935" class="external text" title="http://hdl.handle.net/1721.1/6935" rel="nofollow">Foundations of Actor Semantics</a>. MIT Mathematics Doctoral Dissertation, June 1981.</i></li>
<li>Lloyd Allison, <i>A Practical Introduction to Denotational Semantics</i> Cambridge University Press. 1987.</li>
<li>P. America, J. de Bakker, J. N. Kok and J. Rutten. <i>Denotational semantics of a parallel object-oriented language</i> Information and Computation, 83(2): 152 - 205 (1989)</li>
<li>David A. Schmidt, <i>The Structure of Typed Programming Languages</i>. MIT Press, Cambridge, Massachusetts, 1994. <a href="/wiki/Special:BookSources/026269171X" class="internal">ISBN 0-262-69171-X</a>.</li>
<li>M. Korff <i>True concurrency semantics for single pushout graph transformations with applications to actor systems</i> Working papers of the Int. Workshop on Information Systems - Correctness and Reusability. World Scientific. 1995.</li>
<li>M. Korff and L. Ribeiro <i>Concurrent derivations as single pushout graph grammar processes</i> Proceedings of the Joint COMPUGRAPH/SEMAGRAPH Workshop on Graph Rewriting and Computation. ENTCS Vol 2, Elsevier. 1995.</li>
<li>Thati, Prasanna, Carolyn Talcott, and Gul Agha. <i>Techniques for Executing and Reasoning About Specification Diagrams</i> International Conference on Algebraic Methodology and Software Technology (AMAST), 2004.</li>
<li>J.C.M. Baeten, T. Basten, and M.A. Reniers. <i>Algebra of Communicating Processes</i> Cambridge University Press. 2005.</li>
<li>He Jifeng and C.A.R. Hoare. <i>Linking Theories of Concurrency</i> United Nations University International Institute for Software Technology UNU-IIST Report No. 328. July, 2005.</li>
<li>Luca Aceto and Andrew D. Gordon (editors). <i>Algebraic Process Calculi: The First Twenty Five Years and Beyond</i> Process Algebra. Bertinoro, Forlì, Italy, August 1–5, 2005.</li>
<li><a href="/wiki/Bill_Roscoe" title="Bill Roscoe">A. W. Roscoe</a>: <i>The Theory and Practice of Concurrency</i>, <a href="/wiki/Prentice_Hall" title="Prentice Hall">Prentice Hall</a>, <a href="/wiki/Special:BookSources/0136744095" class="internal">ISBN 0-13-674409-5</a>. Revised 2005.</li>
</ul>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Denotational_semantics&amp;action=edit&amp;section=17" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<ul>
<li><a href="http://www.csse.monash.edu.au/~lloyd/tilde/Semantics/" class="external text" title="http://www.csse.monash.edu.au/~lloyd/tilde/Semantics/" rel="nofollow"><i>Denotational Semantics</i></a>. Overview of book by Lloyd Allison</li>
<li><a href="http://www.risc.uni-linz.ac.at/people/schreine/courses/densem/densem.html" class="external text" title="http://www.risc.uni-linz.ac.at/people/schreine/courses/densem/densem.html" rel="nofollow"><i>Structure of Programming Languages I: Denotational Semantics</i></a>. Course notes from 1995 by Wolfgang Schreiner</li>
<li><a href="http://www.cis.ksu.edu/~schmidt/text/densem.html" class="external text" title="http://www.cis.ksu.edu/~schmidt/text/densem.html" rel="nofollow"><i>Denotational Semantics: A Methodology for Language Development</i></a> by David Schmidt</li>
</ul>


<!-- 
NewPP limit report
Preprocessor node count: 409/1000000
Post-expand include size: 3297/2048000 bytes
Template argument size: 1152/2048000 bytes
Expensive parser function count: 1/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:55275-0!1!0!default!!en!2 and timestamp 20090406233838 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Denotational_semantics">http://en.wikipedia.org/wiki/Denotational_semantics</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Logic_in_computer_science" title="Category:Logic in computer science">Logic in computer science</a></span> | <span dir='ltr'><a href="/wiki/Category:Computational_models" title="Category:Computational models">Computational models</a></span> | <span dir='ltr'><a href="/wiki/Category:Formal_specification_languages" title="Category:Formal specification languages">Formal specification languages</a></span> | <span dir='ltr'><a href="/wiki/Category:Denotational_semantics" title="Category:Denotational semantics">Denotational semantics</a></span> | <span dir='ltr'><a href="/wiki/Category:Programming_language_semantics" title="Category:Programming language semantics">Programming language semantics</a></span></div><div id="mw-hidden-catlinks" class="mw-hidden-cats-hidden">Hidden categories:&#32;<span dir='ltr'><a href="/wiki/Category:All_articles_with_unsourced_statements" title="Category:All articles with unsourced statements">All articles with unsourced statements</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_unsourced_statements_since_September_2007" title="Category:Articles with unsourced statements since September 2007">Articles with unsourced statements since September 2007</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Denotational_semantics" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Denotational_semantics" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Denotational_semantics&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Denotational_semantics&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Denotational_semantics" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Denotational_semantics" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Denotational_semantics" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Denotational_semantics&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Denotational_semantics&amp;oldid=280307704" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Denotational_semantics&amp;id=280307704">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/Denotationale_Semantik">Deutsch</a></li>
				<li class="interwiki-es"><a href="http://es.wikipedia.org/wiki/Sem%C3%A1ntica_denotacional">Español</a></li>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/S%C3%A9mantique_d%C3%A9notationnelle">Français</a></li>
				<li class="interwiki-hr"><a href="http://hr.wikipedia.org/wiki/Denotacijska_semantika">Hrvatski</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/%E8%A1%A8%E7%A4%BA%E7%9A%84%E6%84%8F%E5%91%B3%E8%AB%96">日本語</a></li>
				<li class="interwiki-pt"><a href="http://pt.wikipedia.org/wiki/Sem%C3%A2ntica_denotacional">Português</a></li>
				<li class="interwiki-zh"><a href="http://zh.wikipedia.org/wiki/%E6%8C%87%E7%A7%B0%E8%AF%AD%E4%B9%89">中文</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 28 March 2009, at 23:23.</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv213 in 0.042 secs. --></body></html>
