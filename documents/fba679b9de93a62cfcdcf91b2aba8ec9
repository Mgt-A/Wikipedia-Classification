<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Cycle detection,Abelian group,Algorithm,Andrew Yao,Average case analysis,Celestial mechanics,Cellular automaton,Claus P. Schnorr,Computational group theory,Computer program,Computer simulation" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Cycle_detection&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Cycle_detection&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Cycle detection - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Cycle_detection";
		var wgTitle = "Cycle detection";
		var wgAction = "view";
		var wgArticleId = "670279";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 283640643;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
<style type="text/css">/*<![CDATA[*/
.source-python {line-height: normal;}
.source-python li, .source-python pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for python
 * CSS class: source-python, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-python .de1, .source-python .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-python  {}
.source-python .head {}
.source-python .foot {}
.source-python .imp {font-weight: bold; color: red;}
.source-python .ln-xtra {color: #cc0; background-color: #ffc;}
.source-python li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-python li.li2 {font-weight: bold;}
.source-python .kw1 {color: #ff7700;font-weight:bold;}
.source-python .kw2 {color: #008000;}
.source-python .kw3 {color: #dc143c;}
.source-python .kw4 {color: #0000cd;}
.source-python .co1 {color: #808080; font-style: italic;}
.source-python .coMULTI {color: #808080; font-style: italic;}
.source-python .es0 {color: #000099; font-weight: bold;}
.source-python .br0 {color: #66cc66;}
.source-python .st0 {color: #483d8b;}
.source-python .nu0 {color: #ff4500;}
.source-python .me1 {color: black;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style>		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Cycle_detection skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Cycle detection</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<p><b>Cycle detection</b> is the <a href="/wiki/Algorithm" title="Algorithm">algorithmic</a> problem of finding a cycle of the following type:</p>
<p>In <a href="/wiki/Mathematics" title="Mathematics">mathematics</a>, for any <a href="/wiki/Function_(mathematics)" title="Function (mathematics)">function</a> ƒ that maps a <a href="/wiki/Finite_set" title="Finite set">finite set</a> <i>S</i> to itself, and any initial value <i>x</i><sub>0</sub> in <i>S</i>, the <a href="/wiki/Sequence" title="Sequence">sequence</a> of <a href="/wiki/Iterated_function" title="Iterated function">iterated function</a> values</p>
<dl>
<dd><img class="tex" alt="\displaystyle x_0,\ x_1=f(x_0),\ x_2=f(x_1),\ \dots,\ x_i=f(x_{i-1}),\ \dots" src="http://upload.wikimedia.org/math/f/6/a/f6a4150897b6ef35c22af12d3104599d.png" /></dd>
</dl>
<p>must eventually use the same value twice: there must be some <i>i</i> ≠ <i>j</i> such that <i>x<sub>i</sub></i> = <i>x<sub>j</sub></i>. Once this happens, the sequence must continue by repeating the <a href="/wiki/Cycle_(mathematics)" title="Cycle (mathematics)">cycle</a> of values from <i>x<sub>i</sub></i> to <i>x</i><sub><i>j</i>−1</sub>.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Example"><span class="tocnumber">1</span> <span class="toctext">Example</span></a></li>
<li class="toclevel-1"><a href="#Definitions"><span class="tocnumber">2</span> <span class="toctext">Definitions</span></a></li>
<li class="toclevel-1"><a href="#Computer_representation"><span class="tocnumber">3</span> <span class="toctext">Computer representation</span></a></li>
<li class="toclevel-1"><a href="#Algorithms"><span class="tocnumber">4</span> <span class="toctext">Algorithms</span></a>
<ul>
<li class="toclevel-2"><a href="#Tortoise_and_hare"><span class="tocnumber">4.1</span> <span class="toctext">Tortoise and hare</span></a></li>
<li class="toclevel-2"><a href="#Brent.27s_algorithm"><span class="tocnumber">4.2</span> <span class="toctext">Brent's algorithm</span></a></li>
<li class="toclevel-2"><a href="#Time-space_tradeoffs"><span class="tocnumber">4.3</span> <span class="toctext">Time-space tradeoffs</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Applications"><span class="tocnumber">5</span> <span class="toctext">Applications</span></a></li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">6</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">7</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Example" id="Example"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Cycle_detection&amp;action=edit&amp;section=1" title="Edit section: Example">edit</a>]</span> <span class="mw-headline">Example</span></h2>
<div class="thumb tright">
<div class="thumbinner" style="width:242px;"><a href="/wiki/File:Functional_graph.svg" class="image" title="A function from and to the set {0,1,2,3,4,5,6,7,8} and the corresponding functional graph."><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/d/d7/Functional_graph.svg/240px-Functional_graph.svg.png" width="240" height="182" border="0" class="thumbimage" /></a>
<div class="thumbcaption">
<div class="magnify"><a href="/wiki/File:Functional_graph.svg" class="internal" title="Enlarge"><img src="/skins-1.5/common/images/magnify-clip.png" width="15" height="11" alt="" /></a></div>
A function from and to the set {0,1,2,3,4,5,6,7,8} and the corresponding functional graph.</div>
</div>
</div>
<p>The figure shows a function ƒ that maps the set <i>S</i> = {0,1,2,3,4,5,6,7,8} to itself. If one starts from <i>x</i><sub>0</sub> = 2 and repeatedly applies ƒ, one sees the sequence of values</p>
<dl>
<dd>2, 0, 6, 3, 1, 6, 3, 1, 6, 3, 1, ...</dd>
</dl>
<p>The cycle to be detected is the repeating subsequence of values 6, 3, 1 in this sequence.</p>
<p><a name="Definitions" id="Definitions"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Cycle_detection&amp;action=edit&amp;section=2" title="Edit section: Definitions">edit</a>]</span> <span class="mw-headline">Definitions</span></h2>
<p>Let <i>S</i> be any finite set, ƒ be any function from <i>S</i> to itself, and <i>x</i><sub>0</sub> be any element of <i>S</i>. For any <i>i</i> &gt; 0, let <i>x<sub>i</sub></i> = ƒ(<i>x</i><sub><i>i</i>−1</sub>). Let μ be the smallest index such that the value <i>x</i><sub>μ</sub> reappears infinitely often within the sequence of values <i>x<sub>i</sub></i>, and let λ (the loop length) be the smallest positive integer such that <i>x</i><sub>μ</sub> = <i>x</i><sub>λ+μ</sub>. The cycle detection problem is the task of finding λ and μ.</p>
<p>One can view the same problem <a href="/wiki/Graph_theory" title="Graph theory">graph-theoretically</a>, by constructing a <a href="/wiki/Functional_graph" title="Functional graph" class="mw-redirect">functional graph</a> (that is, a <a href="/wiki/Directed_graph" title="Directed graph">directed graph</a> in which each vertex has a single outgoing edge) the vertices of which are the elements of <i>S</i> and the edges of which map an element to the corresponding function value, as shown in the figure. The set of vertices <a href="/wiki/Reachability" title="Reachability">reachable</a> from any starting vertex <i>x</i><sub>0</sub> form a <a href="/wiki/Subgraph" title="Subgraph" class="mw-redirect">subgraph</a> with a shape resembling the <a href="/wiki/Rho_(letter)" title="Rho (letter)">Greek letter rho</a> (ρ): a path of length μ from <i>x</i><sub>0</sub> to a <a href="/wiki/Cycle_graph" title="Cycle graph">cycle</a> of λ vertices.</p>
<p><a name="Computer_representation" id="Computer_representation"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Cycle_detection&amp;action=edit&amp;section=3" title="Edit section: Computer representation">edit</a>]</span> <span class="mw-headline">Computer representation</span></h2>
<p>Generally, ƒ will not be specified as a table of values, as we have given it in the figure above. Rather, we may be given access either to the sequence of values <i>x<sub>i</sub></i>, or to a subroutine for calculating ƒ. The task is to find λ and μ while examining as few values from the sequence or performing as few subroutine calls as possible. Typically, also, the <a href="/wiki/Space_complexity" title="Space complexity" class="mw-redirect">space complexity</a> of an algorithm for the cycle detection problem is of importance: we wish to solve the problem while using an amount of memory significantly smaller than it would take to store the entire sequence.</p>
<p>In some applications, and in particular in <a href="/wiki/Pollard%27s_rho_algorithm" title="Pollard's rho algorithm">Pollard's rho algorithm</a> for <a href="/wiki/Integer_factorization" title="Integer factorization">integer factorization</a>, the algorithm has much more limited access to <i>S</i> and to ƒ. In Pollard's rho algorithm, for instance, <i>S</i> is the set of integers modulo an unknown prime factor of the number to be factorized, so even the size of <i>S</i> is unknown to the algorithm. We may view a cycle detection algorithm for this application as having the following capabilities: it initially has in its memory an object representing a pointer to the starting value <i>x</i><sub>0</sub>. At any step, it may perform one of three actions: it may copy any pointer it has to another object in memory, it may apply ƒ and replace any of its pointers by a pointer to the next object in the sequence, or it may apply a subroutine for determining whether two of its pointers represent equal values in the sequence. The equality test action may involve some nontrivial computation: in Pollard's rho algorithm, it is implemented by testing whether the difference between two stored values has a nontrivial <a href="/wiki/Greatest_common_divisor" title="Greatest common divisor">gcd</a> with the number to be factored. In this context, we will call an algorithm that only uses pointer copying, advancement within the sequence, and equality tests a <i>pointer algorithm</i>.</p>
<p><a name="Algorithms" id="Algorithms"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Cycle_detection&amp;action=edit&amp;section=4" title="Edit section: Algorithms">edit</a>]</span> <span class="mw-headline">Algorithms</span></h2>
<p>If the input is given as a subroutine for calculating ƒ, the cycle detection problem may be trivially solved using only λ+μ function applications, simply by computing the sequence of values <i>x<sub>i</sub></i> and using a <a href="/wiki/Data_structure" title="Data structure">data structure</a> such as a <a href="/wiki/Hash_table" title="Hash table">hash table</a> to store these values and test whether each subsequent value has already been stored. However, the space complexity of this algorithm is λ+μ, unnecessarily large. Additionally, to implement this method as a pointer algorithm would require applying the equality test to each pair of values, resulting in quadratic time overall. Thus, research in this area has concentrated on two goals: using less space than this naive algorithm, and finding pointer algorithms that use fewer equality tests.</p>
<p><a name="Tortoise_and_hare" id="Tortoise_and_hare"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Cycle_detection&amp;action=edit&amp;section=5" title="Edit section: Tortoise and hare">edit</a>]</span> <span class="mw-headline">Tortoise and hare</span></h3>
<div class="thumb tright">
<div class="thumbinner" style="width:302px;"><a href="/wiki/File:Tortoise_and_hare_algorithm.svg" class="image" title="Floyd's &quot;tortoise and hare&quot; cycle detection algorithm, applied to the sequence 2, 0, 6, 3, 1, 6, 3, 1, ..."><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/5/5f/Tortoise_and_hare_algorithm.svg/300px-Tortoise_and_hare_algorithm.svg.png" width="300" height="292" border="0" class="thumbimage" /></a>
<div class="thumbcaption">
<div class="magnify"><a href="/wiki/File:Tortoise_and_hare_algorithm.svg" class="internal" title="Enlarge"><img src="/skins-1.5/common/images/magnify-clip.png" width="15" height="11" alt="" /></a></div>
Floyd's "tortoise and hare" cycle detection algorithm, applied to the sequence 2, 0, 6, 3, 1, 6, 3, 1, ...</div>
</div>
</div>
<p><b>Floyd's cycle-finding algorithm</b>, also called the "<a href="/wiki/The_Tortoise_and_the_Hare" title="The Tortoise and the Hare">tortoise and the hare</a>" algorithm, is a pointer algorithm that uses only two pointers, which move through the sequence at different speeds. The algorithm is named for <a href="/wiki/Robert_W._Floyd" title="Robert W. Floyd" class="mw-redirect">Robert W. Floyd</a>, who invented it in the late 1960s.<sup id="cite_ref-0" class="reference"><a href="#cite_note-0" title=""><span>[</span>1<span>]</span></a></sup></p>
<p>The key insight in the algorithm is that, whenever <i>i</i> &gt; 0 is a multiple of λ that is greater than μ, <i>x<sub>i</sub></i> = <i>x</i><sub>2<i>i</i></sub> (and conversely). The algorithm will find the smallest such "i". Thus, we need only check for repeated values of this special form to find a period ν of a repetition that is a multiple of λ. Once ν is found, we may retrace the sequence from its start to find the first repetition of length ν; since λ divides ν, <i>x</i><sub>ν + μ</sub> = <i>x</i><sub>μ</sub>, the start of the first repetition. Finally, from <i>x</i><sub>μ</sub> it is trivial to find the length of the shortest repeating cycle, <i>x</i><sub>μ + λ</sub> = <i>x</i><sub>μ</sub>.</p>
<p>The algorithm thus maintains two pointers into the given sequence, one (the tortoise) at <i>x<sub>i</sub></i>, and the other (the hare) at <i>x</i><sub>2<i>i</i></sub>. At each step of the algorithm, it increases <i>i</i> by one, moving the tortoise one step forward and the hare two steps forward in the sequence, and then compares the sequence values at these two pointers. The smallest value of <i>i</i> &gt; 0 for which the tortoise and hare point to equal values is the desired value ν.</p>
<p>The following <a href="/wiki/Python_(programming_language)" title="Python (programming language)">Python</a> code shows how this idea may be implemented as an algorithm.</p>
<div style="clear:both"></div>
<div dir="ltr" style="text-align: left;">
<pre class="source-python">
<span class="kw1">def</span> floyd<span class="br0">(</span>f, x0<span class="br0">)</span>:
    <span class="co1"># The main phase of the algorithm, finding a repetition x_nu = x_2nu</span>
    <span class="co1"># The hare moves twice as quickly as the tortoise</span>
    tortoise, hare = f<span class="br0">(</span>x0<span class="br0">)</span>, f<span class="br0">(</span>f<span class="br0">(</span>x0<span class="br0">)</span><span class="br0">)</span> <span class="co1"># f(x0) is the element/node next to x0.</span>
    <span class="kw1">while</span> tortoise != hare:
        tortoise = f<span class="br0">(</span>tortoise<span class="br0">)</span>
        hare = f<span class="br0">(</span>f<span class="br0">(</span>hare<span class="br0">)</span><span class="br0">)</span>
 
    <span class="co1"># Find the position of the first repetition of length nu</span>
    <span class="co1"># The hare and tortoise move at the same speeds</span>
    mu = <span class="nu0">0</span>
    tortoise, hare = x0, tortoise
    <span class="kw1">while</span> tortoise != hare:
        tortoise = f<span class="br0">(</span>tortoise<span class="br0">)</span>
        hare = f<span class="br0">(</span>hare<span class="br0">)</span>
        mu += <span class="nu0">1</span>
 
    <span class="co1"># Find the length of the shortest cycle starting from x_mu</span>
    <span class="co1"># The hare moves while the tortoise stays still</span>
    lam = <span class="nu0">1</span>
    hare = f<span class="br0">(</span>tortoise<span class="br0">)</span>
    <span class="kw1">while</span> tortoise != hare:
        hare = f<span class="br0">(</span>hare<span class="br0">)</span>
        lam += <span class="nu0">1</span>
 
    <span class="kw1">return</span> lam, mu
</pre></div>
<p>Note that this code only accesses the sequence by storing and copying pointers, function evaluations, and equality tests; therefore, it qualifies as a pointer algorithm. The algorithm uses O(λ+μ) operations of these types, and O(1) storage space.</p>
<p><a name="Brent.27s_algorithm" id="Brent.27s_algorithm"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Cycle_detection&amp;action=edit&amp;section=6" title="Edit section: Brent's algorithm">edit</a>]</span> <span class="mw-headline">Brent's algorithm</span></h3>
<p><a href="/wiki/Richard_Brent_(scientist)" title="Richard Brent (scientist)">Richard P. Brent</a> described an alternative cycle detection algorithm that, like the tortoise and hare algorithm, requires only two pointers into the sequence.<sup id="cite_ref-brent_1-0" class="reference"><a href="#cite_note-brent-1" title=""><span>[</span>2<span>]</span></a></sup> However, it is based on a different principle: searching for the smallest <a href="/wiki/Power_of_two" title="Power of two">power of two</a> 2<sup><i>i</i></sup> that is larger than both λ and μ. For <i>i</i> = 0, 1, 2, etc., the algorithm compares <i>x</i><sub>2<sup><i>i</i></sup>−1</sub> with each subsequent sequence value up to the next power of two, stopping when it finds a match. It has two advantages compared to the tortoise and hare algorithm: it finds the correct length λ of the cycle directly, rather than needing to search for it in a subsequent stage, and its steps involve only one evaluation of ƒ rather than three.</p>
<p>The following Python code shows how this technique works in more detail.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-python">
<span class="kw1">def</span> brent<span class="br0">(</span>f, x0<span class="br0">)</span>:
    <span class="co1"># main phase: search successive powers of two</span>
    power = lam = <span class="nu0">1</span>
    tortoise, hare = x0, f<span class="br0">(</span>x0<span class="br0">)</span> <span class="co1"># f(x0) is the element/node next to x0.</span>
    <span class="kw1">while</span> tortoise != hare:
        <span class="kw1">if</span> power == lam:   <span class="co1"># time to start a new power of two?</span>
            tortoise = hare
            power *= <span class="nu0">2</span>
            lam = <span class="nu0">0</span>
        hare = f<span class="br0">(</span>hare<span class="br0">)</span>
        lam += <span class="nu0">1</span>
 
    <span class="co1"># Find the position of the first repetition of length lambda</span>
    mu = <span class="nu0">0</span>
    tortoise = hare = x0
    <span class="kw1">for</span> i <span class="kw1">in</span> <span class="kw2">range</span><span class="br0">(</span>lam<span class="br0">)</span>:
    <span class="co1"># range(lam) produces a list with the values 0, 1, ... , lam-1</span>
        hare = f<span class="br0">(</span>hare<span class="br0">)</span>
    <span class="kw1">while</span> tortoise != hare:
        tortoise = f<span class="br0">(</span>tortoise<span class="br0">)</span>
        hare = f<span class="br0">(</span>hare<span class="br0">)</span>
        mu += <span class="nu0">1</span>
 
    <span class="kw1">return</span> lam, mu
</pre></div>
<p>Like the tortoise and hare algorithm, this is a pointer algorithm that uses O(λ+μ) tests and function evaluations and O(1) storage space. It is not difficult to show that the number of function evaluations can never be higher than for Floyd's algorithm. Brent claims that, on average, his cycle finding algorithm runs around 36% more quickly than Floyd's and that it speeds up the Pollard rho algorithm by around 24%. He also performs an <a href="/wiki/Average_case_analysis" title="Average case analysis" class="mw-redirect">average case analysis</a> for a randomized version of the algorithm in which the sequence of indices traced by the slower of the two pointers is not the powers of two themselves, but rather a randomized multiple of the powers of two. Although his main intended application was in integer factorization algorithms, Brent also discusses applications in testing pseudorandom number generators.</p>
<p><a name="Time-space_tradeoffs" id="Time-space_tradeoffs"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Cycle_detection&amp;action=edit&amp;section=7" title="Edit section: Time-space tradeoffs">edit</a>]</span> <span class="mw-headline">Time-space tradeoffs</span></h3>
<p>A number of authors have studied techniques for cycle detection that use more memory than Floyd's and Brent's methods, but detect cycles more quickly. In general these methods store several previously-computed sequence values, and test whether each new value equals one of the previously-computed values. In order to do so quickly, they typically use a hash table or similar data structure for storing the previously-computed values, and therefore are not pointer algorithms: in particular, they usually cannot be applied to Pollard's rho algorithm. Where these methods differ is in how they determine which values to store. Following Nivasch,<sup id="cite_ref-nivasch_2-0" class="reference"><a href="#cite_note-nivasch-2" title=""><span>[</span>3<span>]</span></a></sup> we survey these techniques briefly.</p>
<ul>
<li>Brent<sup id="cite_ref-brent_1-1" class="reference"><a href="#cite_note-brent-1" title=""><span>[</span>2<span>]</span></a></sup> already describes variations of his technique in which the indices of saved sequence values are powers of a number <i>R</i> other than two. By choosing <i>R</i> to be a number close to one, and storing the sequence values at indices that are near a sequence of consecutive powers of <i>R</i>, a cycle detection algorithm can use a number of function evaluations that is within an arbitrarily small factor of the optimum λ+μ.<sup id="cite_ref-3" class="reference"><a href="#cite_note-3" title=""><span>[</span>4<span>]</span></a></sup><sup id="cite_ref-teske_4-0" class="reference"><a href="#cite_note-teske-4" title=""><span>[</span>5<span>]</span></a></sup></li>
</ul>
<ul>
<li>Sedgewick, Szymanski, and Yao<sup id="cite_ref-5" class="reference"><a href="#cite_note-5" title=""><span>[</span>6<span>]</span></a></sup> provide a method that uses <i>M</i> memory cells and requires in the worst case only <span class="texhtml">(λ + μ)(1 + <i>c</i><i>M</i> <sup>− 1 / 2</sup>)</span> function evaluations, for some constant <i>c</i>, which they show to be optimal. The technique involves maintaining a numerical parameter <i>d</i>, storing in a table only those positions in the sequence that are multiples of <i>d</i>, and clearing the table and doubling <i>d</i> whenever too many values have been stored.</li>
</ul>
<ul>
<li>Several authors have described <i>distinguished point</i> methods that store function values in a table based on a criterion involving the values, rather than (as in the method of Sedgewick et al.) based on their positions. For instance, values equal to zero modulo some value <i>d</i> might be stored.<sup id="cite_ref-6" class="reference"><a href="#cite_note-6" title=""><span>[</span>7<span>]</span></a></sup><sup id="cite_ref-qd_7-0" class="reference"><a href="#cite_note-qd-7" title=""><span>[</span>8<span>]</span></a></sup> More simply, Nivasch<sup id="cite_ref-nivasch_2-1" class="reference"><a href="#cite_note-nivasch-2" title=""><span>[</span>3<span>]</span></a></sup> credits D. P. Woodruff with the suggestion of storing a random sample of previously seen values, making an appropriate random choice at each step so that the sample remains random.</li>
</ul>
<ul>
<li>Nivasch<sup id="cite_ref-nivasch_2-2" class="reference"><a href="#cite_note-nivasch-2" title=""><span>[</span>3<span>]</span></a></sup> describes an algorithm that does not use a fixed amount of memory, but for which the expected amount of memory used (under the assumption that the input function is random) is logarithmic in the sequence length. An item is stored in the memory table, with this technique, when no later item has a smaller value. As Nivasch shows, the items with this technique can be maintained using a <a href="/wiki/Stack_(data_structure)" title="Stack (data structure)">stack data structure</a>, and each successive sequence value need be compared only to the top of the stack. The algorithm terminates when the repeated sequence element with smallest value is found. Running the same algorithm with multiple stacks, using random permutations of the values to reorder the values within each stack, allows a time-space tradeoff similar to the previous algorithms. However, even the version of this algorithm with a single stack is not a pointer algorithm, due to the comparisons needed to determine which of two values is smaller.</li>
</ul>
<p>Any cycle detection algorithm that stores at most <i>M</i> values from the input sequence must perform at least <img class="tex" alt="\scriptstyle (\lambda+\mu)(1+\frac{1}{M-1})" src="http://upload.wikimedia.org/math/d/e/b/debe231c7e8f53bb91e1f07743f0d4e4.png" /> function evaluations.<sup id="cite_ref-fich_8-0" class="reference"><a href="#cite_note-fich-8" title=""><span>[</span>9<span>]</span></a></sup><sup id="cite_ref-9" class="reference"><a href="#cite_note-9" title=""><span>[</span>10<span>]</span></a></sup></p>
<p><a name="Applications" id="Applications"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Cycle_detection&amp;action=edit&amp;section=8" title="Edit section: Applications">edit</a>]</span> <span class="mw-headline">Applications</span></h2>
<p>Cycle detection has been used in many applications.</p>
<ul>
<li>Determining the cycle length of a <a href="/wiki/Pseudorandom_number_generator" title="Pseudorandom number generator">pseudorandom number generator</a> is one measure of its strength. This is the application cited by Knuth in describing Floyd's method. Brent<sup id="cite_ref-brent_1-2" class="reference"><a href="#cite_note-brent-1" title=""><span>[</span>2<span>]</span></a></sup> describes the results of testing a <a href="/wiki/Linear_congruential_generator" title="Linear congruential generator">linear congruential generator</a> in this fashion; its period turned out to be significantly smaller than advertised. For more complex generators, the sequence of values in which the cycle is to be found may not represent the output of the generator, but rather its internal state.</li>
<li>Several <a href="/wiki/Number_theory" title="Number theory">Number-theoretic</a> algorithms are based on cycle detection, including <a href="/wiki/Pollard%27s_rho_algorithm" title="Pollard's rho algorithm">Pollard's rho algorithm</a> for integer factorization<sup id="cite_ref-10" class="reference"><a href="#cite_note-10" title=""><span>[</span>11<span>]</span></a></sup> and his related <a href="/wiki/Pollard%27s_lambda_algorithm" title="Pollard's lambda algorithm">lambda algorithm</a> for the <a href="/wiki/Discrete_logarithm" title="Discrete logarithm">discrete logarithm</a> problem<sup id="cite_ref-11" class="reference"><a href="#cite_note-11" title=""><span>[</span>12<span>]</span></a></sup>.</li>
<li>In <a href="/wiki/Cryptography" title="Cryptography">cryptographic</a> applications, the ability to find two distinct values <i>x</i><sub>μ−-1</sub> and <i>x</i><sub>λ+μ−-1</sub> mapped by some cryptographic function ƒ to the same value <i>x</i><sub>μ</sub> may indicate a weakness in ƒ. For instance, Quisquater and Delescaille<sup id="cite_ref-qd_7-1" class="reference"><a href="#cite_note-qd-7" title=""><span>[</span>8<span>]</span></a></sup> apply cycle detection algorithms in the search for a message and a pair of <a href="/wiki/Data_Encryption_Standard" title="Data Encryption Standard">Data Encryption Standard</a> keys that map that message to the same encrypted value; Kaliski, Rivest, and Sherman<sup id="cite_ref-krs_12-0" class="reference"><a href="#cite_note-krs-12" title=""><span>[</span>13<span>]</span></a></sup> also use cycle detection algorithms to attack DES. The technique may also be used to find a <a href="/wiki/Hash_collision" title="Hash collision" class="mw-redirect">collision</a> in a <a href="/wiki/Cryptographic_hash_function" title="Cryptographic hash function">cryptographic hash function</a>.</li>
<li>Cycle detection may be helpful as a way of discovering <a href="/wiki/Infinite_loop" title="Infinite loop">infinite loops</a> in certain types of <a href="/wiki/Computer_program" title="Computer program">computer programs</a>.<sup id="cite_ref-13" class="reference"><a href="#cite_note-13" title=""><span>[</span>14<span>]</span></a></sup></li>
<li><a href="/wiki/Oscillator_(cellular_automaton)" title="Oscillator (cellular automaton)">Periodic configurations</a> in <a href="/wiki/Cellular_automaton" title="Cellular automaton">cellular automaton</a> simulations may be found by applying cycle detection algorithms to the sequence of automaton states.<sup id="cite_ref-nivasch_2-3" class="reference"><a href="#cite_note-nivasch-2" title=""><span>[</span>3<span>]</span></a></sup></li>
<li><a href="/wiki/Shape_analysis_(software)" title="Shape analysis (software)">Shape analysis</a> of <a href="/wiki/Linked_list" title="Linked list">linked list</a> data structures is a technique for verifying the correctness of an algorithm using those structures. If a node in the list incorrectly points to an earlier node in the same list, the structure will form a cycle that can be detected by these algorithms.<sup id="cite_ref-14" class="reference"><a href="#cite_note-14" title=""><span>[</span>15<span>]</span></a></sup></li>
<li>Teske<sup id="cite_ref-teske_4-1" class="reference"><a href="#cite_note-teske-4" title=""><span>[</span>5<span>]</span></a></sup> describes applications in <a href="/wiki/Computational_group_theory" title="Computational group theory">computational group theory</a>: determining the structure of an <a href="/wiki/Abelian_group" title="Abelian group">Abelian group</a> from a set of its generators. The cryptographic algorithms of Kaliski et al.<sup id="cite_ref-krs_12-1" class="reference"><a href="#cite_note-krs-12" title=""><span>[</span>13<span>]</span></a></sup> may also be viewed as attempting to infer the structure of an unknown group.</li>
<li>Fich<sup id="cite_ref-fich_8-1" class="reference"><a href="#cite_note-fich-8" title=""><span>[</span>9<span>]</span></a></sup> briefly mentions an application to <a href="/wiki/Computer_simulation" title="Computer simulation">computer simulation</a> of <a href="/wiki/Celestial_mechanics" title="Celestial mechanics">celestial mechanics</a>, which she attributes to <a href="/wiki/William_Kahan" title="William Kahan">William Kahan</a>. In this application, cycle detection in the <a href="/wiki/Phase_space" title="Phase space">phase space</a> of an orbital system may be used to determine whether the system is <a href="/wiki/Periodicity" title="Periodicity">periodic</a> to within the accuracy of the simulation.</li>
</ul>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Cycle_detection&amp;action=edit&amp;section=9" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<div class="references-small">
<ol class="references">
<li id="cite_note-0"><b><a href="#cite_ref-0" title="">^</a></b> Floyd describes algorithms for listing all simple cycles in a <a href="/wiki/Directed_graph" title="Directed graph">directed graph</a> in a 1967 paper: <cite style="font-style:normal" class="" id="CITEREFFloyd1967"><a href="/wiki/Robert_W._Floyd" title="Robert W. Floyd" class="mw-redirect">Floyd, R.W.</a> (1967), "<a href="http://doi.acm.org/10.1145/321420.321422" class="external text" title="http://doi.acm.org/10.1145/321420.321422" rel="nofollow">Non-deterministic Algorithms</a>", <i>J. ACM</i> <b>14</b> (4): 636–644, <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<span class="neverexpand"><a href="http://dx.doi.org/10.1145%2F321420.321422" class="external text" title="http://dx.doi.org/10.1145%2F321420.321422" rel="nofollow">10.1145/321420.321422</a></span><span class="printonly">, <a href="http://doi.acm.org/10.1145/321420.321422" class="external free" title="http://doi.acm.org/10.1145/321420.321422" rel="nofollow">http://doi.acm.org/10.1145/321420.321422</a></span></cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=Non-deterministic+Algorithms&amp;rft.jtitle=J.+ACM&amp;rft.aulast=Floyd&amp;rft.aufirst=R.W.&amp;rft.au=Floyd%2C+R.W.&amp;rft.date=1967&amp;rft.volume=14&amp;rft.issue=4&amp;rft.pages=636%E2%80%93644&amp;rft_id=info:doi/10.1145%2F321420.321422&amp;rft_id=http%3A%2F%2Fdoi.acm.org%2F10.1145%2F321420.321422&amp;rfr_id=info:sid/en.wikipedia.org:Cycle_detection"><span style="display: none;">&#160;</span></span>. However this paper does not describe the cycle-finding problem in functional graphs that is the subject of this article. An early description of the tortoise and hare algorithm appears in <cite style="font-style:normal" class="" id="CITEREFKnuth1969"><a href="/wiki/Donald_Knuth" title="Donald Knuth">Knuth, Donald E.</a> (1969), <i>The Art of Computer Programming, vol. II: Seminumerical Algorithms</i>, Addison-Wesley</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=The+Art+of+Computer+Programming%2C+vol.+II%3A+Seminumerical+Algorithms&amp;rft.aulast=Knuth&amp;rft.aufirst=Donald+E.&amp;rft.au=Knuth%2C+Donald+E.&amp;rft.date=1969&amp;rft.pub=Addison-Wesley&amp;rfr_id=info:sid/en.wikipedia.org:Cycle_detection"><span style="display: none;">&#160;</span></span>, exercises 6 and 7, page 7. Knuth (p.4) credits Floyd for the algorithm, without citation.</li>
<li id="cite_note-brent-1">^ <a href="#cite_ref-brent_1-0" title=""><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-brent_1-1" title=""><sup><i><b>b</b></i></sup></a> <a href="#cite_ref-brent_1-2" title=""><sup><i><b>c</b></i></sup></a> <cite style="font-style:normal" class="" id="CITEREFBrent1980"><a href="/wiki/Richard_Brent_(scientist)" title="Richard Brent (scientist)">Brent, R. P.</a> (1980), "<a href="http://wwwmaths.anu.edu.au/~brent/ftp/rpb051a.ps.gz" class="external text" title="http://wwwmaths.anu.edu.au/~brent/ftp/rpb051a.ps.gz" rel="nofollow">An improved Monte Carlo factorization algorithm</a>", <i>BIT</i> <b>20</b>: 176–184, <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<span class="neverexpand"><a href="http://dx.doi.org/10.1007%2FBF01933190" class="external text" title="http://dx.doi.org/10.1007%2FBF01933190" rel="nofollow">10.1007/BF01933190</a></span><span class="printonly">, <a href="http://wwwmaths.anu.edu.au/~brent/ftp/rpb051a.ps.gz" class="external free" title="http://wwwmaths.anu.edu.au/~brent/ftp/rpb051a.ps.gz" rel="nofollow">http://wwwmaths.anu.edu.au/~brent/ftp/rpb051a.ps.gz</a></span></cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=An+improved+Monte+Carlo+factorization+algorithm&amp;rft.jtitle=BIT&amp;rft.aulast=Brent&amp;rft.aufirst=R.+P.&amp;rft.au=Brent%2C+R.+P.&amp;rft.date=1980&amp;rft.volume=20&amp;rft.pages=176%E2%80%93184&amp;rft_id=info:doi/10.1007%2FBF01933190&amp;rft_id=http%3A%2F%2Fwwwmaths.anu.edu.au%2F%7Ebrent%2Fftp%2Frpb051a.ps.gz&amp;rfr_id=info:sid/en.wikipedia.org:Cycle_detection"><span style="display: none;">&#160;</span></span>.</li>
<li id="cite_note-nivasch-2">^ <a href="#cite_ref-nivasch_2-0" title=""><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-nivasch_2-1" title=""><sup><i><b>b</b></i></sup></a> <a href="#cite_ref-nivasch_2-2" title=""><sup><i><b>c</b></i></sup></a> <a href="#cite_ref-nivasch_2-3" title=""><sup><i><b>d</b></i></sup></a> <cite style="font-style:normal" class="" id="CITEREFNivasch2004">Nivasch, Gabriel (2004), "Cycle detection using a stack", <i>Information Processing Letters</i> <b>90</b>: 135–140, <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<span class="neverexpand"><a href="http://dx.doi.org/10.1016%2Fj.ipl.2004.01.016" class="external text" title="http://dx.doi.org/10.1016%2Fj.ipl.2004.01.016" rel="nofollow">10.1016/j.ipl.2004.01.016</a></span></cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=Cycle+detection+using+a+stack&amp;rft.jtitle=Information+Processing+Letters&amp;rft.aulast=Nivasch&amp;rft.aufirst=Gabriel&amp;rft.au=Nivasch%2C+Gabriel&amp;rft.date=2004&amp;rft.volume=90&amp;rft.pages=135%E2%80%93140&amp;rft_id=info:doi/10.1016%2Fj.ipl.2004.01.016&amp;rfr_id=info:sid/en.wikipedia.org:Cycle_detection"><span style="display: none;">&#160;</span></span>.</li>
<li id="cite_note-3"><b><a href="#cite_ref-3" title="">^</a></b> <cite style="font-style:normal" class="" id="CITEREFSchnorrLenstra1984"><a href="/wiki/Claus_P._Schnorr" title="Claus P. Schnorr">Schnorr, Claus P.</a>; <a href="/wiki/Hendrik_Lenstra" title="Hendrik Lenstra">Lenstra, Hendrik W.</a> (1984), "A Monte Carlo Factoring Algorithm With Linear Storage", <i>Mathematics of Computation</i> <b>43</b> (167): 289–311, <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<span class="neverexpand"><a href="http://dx.doi.org/10.2307%2F2007414" class="external text" title="http://dx.doi.org/10.2307%2F2007414" rel="nofollow">10.2307/2007414</a></span></cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=A+Monte+Carlo+Factoring+Algorithm+With+Linear+Storage&amp;rft.jtitle=Mathematics+of+Computation&amp;rft.aulast=Schnorr&amp;rft.aufirst=Claus+P.&amp;rft.au=Schnorr%2C+Claus+P.&amp;rft.au=Lenstra%2C+Hendrik+W.&amp;rft.date=1984&amp;rft.volume=43&amp;rft.issue=167&amp;rft.pages=289%E2%80%93311&amp;rft_id=info:doi/10.2307%2F2007414&amp;rfr_id=info:sid/en.wikipedia.org:Cycle_detection"><span style="display: none;">&#160;</span></span>.</li>
<li id="cite_note-teske-4">^ <a href="#cite_ref-teske_4-0" title=""><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-teske_4-1" title=""><sup><i><b>b</b></i></sup></a> <cite style="font-style:normal" class="" id="CITEREFTeske1998">Teske, Edlyn (1998), "A space-efficient algorithm for group structure computation", <i>Mathematics of Computation</i> <b>67</b> (224): 1637–1663, <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<span class="neverexpand"><a href="http://dx.doi.org/10.1090%2FS0025-5718-98-00968-5" class="external text" title="http://dx.doi.org/10.1090%2FS0025-5718-98-00968-5" rel="nofollow">10.1090/S0025-5718-98-00968-5</a></span></cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=A+space-efficient+algorithm+for+group+structure+computation&amp;rft.jtitle=Mathematics+of+Computation&amp;rft.aulast=Teske&amp;rft.aufirst=Edlyn&amp;rft.au=Teske%2C+Edlyn&amp;rft.date=1998&amp;rft.volume=67&amp;rft.issue=224&amp;rft.pages=1637%E2%80%931663&amp;rft_id=info:doi/10.1090%2FS0025-5718-98-00968-5&amp;rfr_id=info:sid/en.wikipedia.org:Cycle_detection"><span style="display: none;">&#160;</span></span>.</li>
<li id="cite_note-5"><b><a href="#cite_ref-5" title="">^</a></b> <cite style="font-style:normal" class="" id="CITEREFSedgewickSzymanskiYao1982"><a href="/wiki/Robert_Sedgewick_(computer_scientist)" title="Robert Sedgewick (computer scientist)">Sedgewick, Robert</a>; Szymanski, Thomas G.; <a href="/wiki/Andrew_Yao" title="Andrew Yao">Yao, Andrew C.-C.</a> (1982), "The complexity of finding cycles in periodic functions", <i>SIAM Journal on Computing</i> <b>11</b> (2): 376–390, <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<span class="neverexpand"><a href="http://dx.doi.org/10.1137%2F0211030" class="external text" title="http://dx.doi.org/10.1137%2F0211030" rel="nofollow">10.1137/0211030</a></span></cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=The+complexity+of+finding+cycles+in+periodic+functions&amp;rft.jtitle=SIAM+Journal+on+Computing&amp;rft.aulast=Sedgewick&amp;rft.aufirst=Robert&amp;rft.au=Sedgewick%2C+Robert&amp;rft.au=Szymanski%2C+Thomas+G.&amp;rft.au=Yao%2C+Andrew+C.-C.&amp;rft.date=1982&amp;rft.volume=11&amp;rft.issue=2&amp;rft.pages=376%E2%80%93390&amp;rft_id=info:doi/10.1137%2F0211030&amp;rfr_id=info:sid/en.wikipedia.org:Cycle_detection"><span style="display: none;">&#160;</span></span>.</li>
<li id="cite_note-6"><b><a href="#cite_ref-6" title="">^</a></b> <cite style="font-style:normal" class="" id="CITEREFvan_OorschotWiener1999">van Oorschot, Paul C.; Wiener, Michael J. (1999), "Parallel collision search with cryptanalytic applications", <i>Journal of Cryptology</i> <b>12</b> (1): 1–28, <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<span class="neverexpand"><a href="http://dx.doi.org/10.1007%2FPL00003816" class="external text" title="http://dx.doi.org/10.1007%2FPL00003816" rel="nofollow">10.1007/PL00003816</a></span></cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=Parallel+collision+search+with+cryptanalytic+applications&amp;rft.jtitle=Journal+of+Cryptology&amp;rft.aulast=van+Oorschot&amp;rft.aufirst=Paul+C.&amp;rft.au=van+Oorschot%2C+Paul+C.&amp;rft.au=Wiener%2C+Michael+J.&amp;rft.date=1999&amp;rft.volume=12&amp;rft.issue=1&amp;rft.pages=1%E2%80%9328&amp;rft_id=info:doi/10.1007%2FPL00003816&amp;rfr_id=info:sid/en.wikipedia.org:Cycle_detection"><span style="display: none;">&#160;</span></span>.</li>
<li id="cite_note-qd-7">^ <a href="#cite_ref-qd_7-0" title=""><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-qd_7-1" title=""><sup><i><b>b</b></i></sup></a> <cite style="font-style:normal" class="" id="CITEREFQuisquaterDelescaille">Quisquater, J.-J.; Delescaille, J.-P., <a href="http://www.springerlink.com/content/0wnq56dava5nnm17/" class="external text" title="http://www.springerlink.com/content/0wnq56dava5nnm17/" rel="nofollow">"How easy is collision search? Application to DES"</a>, <i>Advances in Cryptology – EUROCRYPT '89, Workshop on the Theory and Application of of Cryptographic Techniques</i>, Lecture Notes in Computer Science, <b>434</b>, Springer-Verlag, pp.&#160;429–434<span class="printonly">, <a href="http://www.springerlink.com/content/0wnq56dava5nnm17/" class="external free" title="http://www.springerlink.com/content/0wnq56dava5nnm17/" rel="nofollow">http://www.springerlink.com/content/0wnq56dava5nnm17/</a></span></cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=How+easy+is+collision+search%3F+Application+to+DES&amp;rft.atitle=Advances+in+Cryptology+%E2%80%93+EUROCRYPT+%2789%2C+Workshop+on+the+Theory+and+Application+of+of+Cryptographic+Techniques&amp;rft.aulast=Quisquater&amp;rft.aufirst=J.-J.&amp;rft.au=Quisquater%2C+J.-J.&amp;rft.au=Delescaille%2C+J.-P.&amp;rft.series=Lecture+Notes+in+Computer+Science&amp;rft.volume=434&amp;rft.pages=pp.%26nbsp%3B429%E2%80%93434&amp;rft.pub=Springer-Verlag&amp;rft_id=http%3A%2F%2Fwww.springerlink.com%2Fcontent%2F0wnq56dava5nnm17%2F&amp;rfr_id=info:sid/en.wikipedia.org:Cycle_detection"><span style="display: none;">&#160;</span></span>.</li>
<li id="cite_note-fich-8">^ <a href="#cite_ref-fich_8-0" title=""><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-fich_8-1" title=""><sup><i><b>b</b></i></sup></a> <cite style="font-style:normal" class="" id="CITEREFFich1981">Fich, Faith Ellen (1981), "Lower bounds for the cycle detection problem", <i>Proc. 13th ACM Symp. Theory of Computation</i>, pp.&#160;96–105, <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<span class="neverexpand"><a href="http://dx.doi.org/10.1145%2F800076.802462" class="external text" title="http://dx.doi.org/10.1145%2F800076.802462" rel="nofollow">10.1145/800076.802462</a></span></cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Lower+bounds+for+the+cycle+detection+problem&amp;rft.atitle=Proc.+13th+ACM+Symp.+Theory+of+Computation&amp;rft.aulast=Fich&amp;rft.aufirst=Faith+Ellen&amp;rft.au=Fich%2C+Faith+Ellen&amp;rft.date=1981&amp;rft.pages=pp.%26nbsp%3B96%E2%80%93105&amp;rft_id=info:doi/10.1145%2F800076.802462&amp;rfr_id=info:sid/en.wikipedia.org:Cycle_detection"><span style="display: none;">&#160;</span></span>.</li>
<li id="cite_note-9"><b><a href="#cite_ref-9" title="">^</a></b> <cite style="font-style:normal" class="" id="CITEREFAllenderKlawe1985"><a href="/wiki/Eric_Allender" title="Eric Allender">Allender, Eric W.</a>; <a href="/wiki/Maria_Klawe" title="Maria Klawe">Klawe, Maria M.</a> (1985), "Improved lower bounds for the cycle detection problem", <i>Theoretical Computer Science</i> <b>36</b> (2–3): 231–237, <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<span class="neverexpand"><a href="http://dx.doi.org/10.1016%2F0304-3975%2885%2990044-1" class="external text" title="http://dx.doi.org/10.1016%2F0304-3975%2885%2990044-1" rel="nofollow">10.1016/0304-3975(85)90044-1</a></span></cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=Improved+lower+bounds+for+the+cycle+detection+problem&amp;rft.jtitle=Theoretical+Computer+Science&amp;rft.aulast=Allender&amp;rft.aufirst=Eric+W.&amp;rft.au=Allender%2C+Eric+W.&amp;rft.au=Klawe%2C+Maria+M.&amp;rft.date=1985&amp;rft.volume=36&amp;rft.issue=2%E2%80%933&amp;rft.pages=231%E2%80%93237&amp;rft_id=info:doi/10.1016%2F0304-3975%2885%2990044-1&amp;rfr_id=info:sid/en.wikipedia.org:Cycle_detection"><span style="display: none;">&#160;</span></span>.</li>
<li id="cite_note-10"><b><a href="#cite_ref-10" title="">^</a></b> <cite style="font-style:normal" class="" id="CITEREFPollard1975">Pollard, J. M. (1975), "A Monte Carlo method for factorization", <i>BIT</i> <b>15</b>: 331–334, <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<span class="neverexpand"><a href="http://dx.doi.org/10.1007%2FBF01933667" class="external text" title="http://dx.doi.org/10.1007%2FBF01933667" rel="nofollow">10.1007/BF01933667</a></span></cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=A+Monte+Carlo+method+for+factorization&amp;rft.jtitle=BIT&amp;rft.aulast=Pollard&amp;rft.aufirst=J.+M.&amp;rft.au=Pollard%2C+J.+M.&amp;rft.date=1975&amp;rft.volume=15&amp;rft.pages=331%E2%80%93334&amp;rft_id=info:doi/10.1007%2FBF01933667&amp;rfr_id=info:sid/en.wikipedia.org:Cycle_detection"><span style="display: none;">&#160;</span></span>.</li>
<li id="cite_note-11"><b><a href="#cite_ref-11" title="">^</a></b> <cite style="font-style:normal" class="" id="CITEREFPollard1978">Pollard, J. M. (1978), "Monte Carlo methods for index computation (mod <i>p</i>)", <i>Math. Comp.</i> <b>32</b> (143): 918–924, <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<span class="neverexpand"><a href="http://dx.doi.org/10.2307%2F2006496" class="external text" title="http://dx.doi.org/10.2307%2F2006496" rel="nofollow">10.2307/2006496</a></span></cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=Monte+Carlo+methods+for+index+computation+%28mod+%27%27p%27%27%29&amp;rft.jtitle=Math.+Comp.&amp;rft.aulast=Pollard&amp;rft.aufirst=J.+M.&amp;rft.au=Pollard%2C+J.+M.&amp;rft.date=1978&amp;rft.volume=32&amp;rft.issue=143&amp;rft.pages=918%E2%80%93924&amp;rft_id=info:doi/10.2307%2F2006496&amp;rfr_id=info:sid/en.wikipedia.org:Cycle_detection"><span style="display: none;">&#160;</span></span>.</li>
<li id="cite_note-krs-12">^ <a href="#cite_ref-krs_12-0" title=""><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-krs_12-1" title=""><sup><i><b>b</b></i></sup></a> <cite style="font-style:normal" class="" id="CITEREFKaliskiRivestSherman1988">Kaliski, Burton S., Jr.; <a href="/wiki/Ron_Rivest" title="Ron Rivest">Rivest, Ronald L.</a>; Sherman, Alan T. (1988), "Is the Data Encryption Standard a group? (Results of cycling experiments on DES)", <i>Journal of Cryptology</i> <b>1</b> (1): 3–36, <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<span class="neverexpand"><a href="http://dx.doi.org/10.1007%2FBF00206323" class="external text" title="http://dx.doi.org/10.1007%2FBF00206323" rel="nofollow">10.1007/BF00206323</a></span></cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=Is+the+Data+Encryption+Standard+a+group%3F+%28Results+of+cycling+experiments+on+DES%29&amp;rft.jtitle=Journal+of+Cryptology&amp;rft.aulast=Kaliski&amp;rft.aufirst=Burton+S.%2C+Jr.&amp;rft.au=Kaliski%2C+Burton+S.%2C+Jr.&amp;rft.au=Rivest%2C+Ronald+L.&amp;rft.au=Sherman%2C+Alan+T.&amp;rft.date=1988&amp;rft.volume=1&amp;rft.issue=1&amp;rft.pages=3%E2%80%9336&amp;rft_id=info:doi/10.1007%2FBF00206323&amp;rfr_id=info:sid/en.wikipedia.org:Cycle_detection"><span style="display: none;">&#160;</span></span>.</li>
<li id="cite_note-13"><b><a href="#cite_ref-13" title="">^</a></b> <cite style="font-style:normal" class="" id="CITEREFVan_Gelder1987">Van Gelder, Allen (1987), "Efficient loop detection in Prolog using the tortoise-and-hare technique", <i>Journal of Logic Programming</i> <b>4</b> (1): 23–31, <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<span class="neverexpand"><a href="http://dx.doi.org/10.1016%2F0743-1066%2887%2990020-3" class="external text" title="http://dx.doi.org/10.1016%2F0743-1066%2887%2990020-3" rel="nofollow">10.1016/0743-1066(87)90020-3</a></span></cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=Efficient+loop+detection+in+Prolog+using+the+tortoise-and-hare+technique&amp;rft.jtitle=Journal+of+Logic+Programming&amp;rft.aulast=Van+Gelder&amp;rft.aufirst=Allen&amp;rft.au=Van+Gelder%2C+Allen&amp;rft.date=1987&amp;rft.volume=4&amp;rft.issue=1&amp;rft.pages=23%E2%80%9331&amp;rft_id=info:doi/10.1016%2F0743-1066%2887%2990020-3&amp;rfr_id=info:sid/en.wikipedia.org:Cycle_detection"><span style="display: none;">&#160;</span></span>.</li>
<li id="cite_note-14"><b><a href="#cite_ref-14" title="">^</a></b> <cite style="font-style:normal" class="" id="CITEREFAugustonHon1997">Auguston, Mikhail; Hon, Miu Har (1997), <a href="http://www.ep.liu.se/ea/cis/1997/009/04/" class="external text" title="http://www.ep.liu.se/ea/cis/1997/009/04/" rel="nofollow">"Assertions for Dynamic Shape Analysis of List Data Structures"</a>, <i>AADEBUG '97, Proceedings of the Third International Workshop on Automatic Debugging</i>, Linköping Electronic Articles in Computer and Information Science, <a href="/wiki/Link%C3%B6ping_University" title="Linköping University">Linköping University</a>, pp.&#160;37–42<span class="printonly">, <a href="http://www.ep.liu.se/ea/cis/1997/009/04/" class="external free" title="http://www.ep.liu.se/ea/cis/1997/009/04/" rel="nofollow">http://www.ep.liu.se/ea/cis/1997/009/04/</a></span></cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Assertions+for+Dynamic+Shape+Analysis+of+List+Data+Structures&amp;rft.atitle=AADEBUG+%2797%2C+Proceedings+of+the+Third+International+Workshop+on+Automatic+Debugging&amp;rft.aulast=Auguston&amp;rft.aufirst=Mikhail&amp;rft.au=Auguston%2C+Mikhail&amp;rft.au=Hon%2C+Miu+Har&amp;rft.date=1997&amp;rft.series=Link%C3%B6ping+Electronic+Articles+in+Computer+and+Information+Science&amp;rft.pages=pp.%26nbsp%3B37%E2%80%9342&amp;rft.pub=%5B%5BLink%C3%B6ping+University%5D%5D&amp;rft_id=http%3A%2F%2Fwww.ep.liu.se%2Fea%2Fcis%2F1997%2F009%2F04%2F&amp;rfr_id=info:sid/en.wikipedia.org:Cycle_detection"><span style="display: none;">&#160;</span></span>.</li>
</ol>
</div>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Cycle_detection&amp;action=edit&amp;section=10" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<ul>
<li>Gabriel Nivasch, <a href="http://yucs.org/~gnivasch/stackalg/index.html" class="external text" title="http://yucs.org/~gnivasch/stackalg/index.html" rel="nofollow">The Cycle Detection Problem and the Stack Algorithm</a>.</li>
<li><a href="http://c2.com/cgi/wiki/Curry?TortoiseAndHare" class="external text" title="http://c2.com/cgi/wiki/Curry?TortoiseAndHare" rel="nofollow">Tortoise and Hare</a>, Portland Pattern Repository</li>
</ul>


<!-- 
NewPP limit report
Preprocessor node count: 8932/1000000
Post-expand include size: 78120/2048000 bytes
Template argument size: 17587/2048000 bytes
Expensive parser function count: 0/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:670279-0!1!0!default!!en!2 and timestamp 20090413204546 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Cycle_detection">http://en.wikipedia.org/wiki/Cycle_detection</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Fixed_points" title="Category:Fixed points">Fixed points</a></span> | <span dir='ltr'><a href="/wiki/Category:Combinatorial_algorithms" title="Category:Combinatorial algorithms">Combinatorial algorithms</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_example_Python_code" title="Category:Articles with example Python code">Articles with example Python code</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Cycle_detection" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Cycle_detection" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Cycle_detection&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Cycle_detection&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Cycle_detection" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Cycle_detection" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Cycle_detection" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Cycle_detection&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Cycle_detection&amp;oldid=283640643" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Cycle_detection&amp;id=283640643">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/Hase-Igel-Algorithmus">Deutsch</a></li>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Algorithme_du_li%C3%A8vre_et_de_la_tortue">Français</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/%E3%83%95%E3%83%AD%E3%82%A4%E3%83%89%E3%81%AE%E5%BE%AA%E7%92%B0%E6%A4%9C%E5%87%BA%E6%B3%95">日本語</a></li>
				<li class="interwiki-pt"><a href="http://pt.wikipedia.org/wiki/Algoritmo_Busca-C%C3%ADclica_de_Floyd">Português</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 13 April 2009, at 20:45 (UTC).</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv158 in 0.055 secs. --></body></html>
