<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Quine (computing),Atlas Autocode,C (programming language),Common Lisp,Communications of the ACM,Computer program,Computer programming,Computing,Data,Diagonal lemma,Douglas Hofstadter" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Quine_(computing)&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Quine_(computing)&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Quine (computing) - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Quine_(computing)";
		var wgTitle = "Quine (computing)";
		var wgAction = "view";
		var wgArticleId = "25270";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 279686205;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
<style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-c .de1, .source-c .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-c  {}
.source-c .head {}
.source-c .foot {}
.source-c .imp {font-weight: bold; color: red;}
.source-c .ln-xtra {color: #cc0; background-color: #ffc;}
.source-c li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-c li.li2 {font-weight: bold;}
.source-c .kw1 {color: #b1b100;}
.source-c .kw2 {color: #000000; font-weight: bold;}
.source-c .kw3 {color: #000066;}
.source-c .kw4 {color: #993333;}
.source-c .co1 {color: #808080; font-style: italic;}
.source-c .co2 {color: #339933;}
.source-c .coMULTI {color: #808080; font-style: italic;}
.source-c .es0 {color: #000099; font-weight: bold;}
.source-c .br0 {color: #66cc66;}
.source-c .st0 {color: #ff0000;}
.source-c .nu0 {color: #cc66cc;}
.source-c .me1 {color: #202020;}
.source-c .me2 {color: #202020;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-scheme {line-height: normal;}
.source-scheme li, .source-scheme pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for scheme
 * CSS class: source-scheme, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-scheme .de1, .source-scheme .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-scheme  {}
.source-scheme .head {}
.source-scheme .foot {}
.source-scheme .imp {font-weight: bold; color: red;}
.source-scheme .ln-xtra {color: #cc0; background-color: #ffc;}
.source-scheme li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-scheme li.li2 {font-weight: bold;}
.source-scheme .kw1 {color: #b1b100;}
.source-scheme .co1 {color: #808080; font-style: italic;}
.source-scheme .coMULTI {color: #808080; font-style: italic;}
.source-scheme .es0 {color: #000099; font-weight: bold;}
.source-scheme .br0 {color: #66cc66;}
.source-scheme .st0 {color: #ff0000;}
.source-scheme .nu0 {color: #cc66cc;}
.source-scheme .me0 {color: #202020;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style>		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Quine_computing skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Quine (computing)</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<p>In <a href="/wiki/Computing" title="Computing">computing</a>, a <b>quine</b> is a <a href="/wiki/Computer_program" title="Computer program">computer program</a> which produces a copy of its own <a href="/wiki/Source_code" title="Source code">source code</a> as its only output.</p>
<p>A quine is a <a href="/wiki/Fixed_point" title="Fixed point">fixed point</a> of an execution environment, when the execution environment is viewed as a function. Quines are possible in any programming language that has the ability to output any computable string, as a direct consequence of <a href="/wiki/Kleene%27s_recursion_theorem" title="Kleene's recursion theorem">Kleene's recursion theorem</a>. For amusement, programmers sometimes attempt to develop the shortest possible quine in any given <a href="/wiki/Programming_language" title="Programming language">programming language</a>.</p>
<p>Quines are named after philosopher <a href="/wiki/Willard_Van_Orman_Quine" title="Willard Van Orman Quine">Willard Van Orman Quine</a> (1908–2000), who made an extensive study of <a href="/wiki/Indirect_self-reference" title="Indirect self-reference">indirect self-reference</a>. He coined, among others, the following paradox-producing expression, known as <a href="/wiki/Quine%27s_paradox" title="Quine's paradox">Quine's paradox</a>:</p>
<blockquote>
<p>"Yields falsehood when preceded by its quotation" yields falsehood when preceded by its quotation.</p>
</blockquote>
<p>A quine takes no input. Allowing input would permit the source code to be fed to the program via the keyboard, opening the source file of the program, and similar mechanisms.</p>
<p>In some languages, an empty source file is a fixed point of the language, producing no output. Such an empty program, submitted as "the world's smallest self reproducing program", once won the "worst abuse of the rules" prize in the <a href="/wiki/Obfuscated_C" title="Obfuscated C" class="mw-redirect">Obfuscated C</a> contest.<sup id="cite_ref-0" class="reference"><a href="#cite_note-0" title=""><span>[</span>1<span>]</span></a></sup></p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#History"><span class="tocnumber">1</span> <span class="toctext">History</span></a></li>
<li class="toclevel-1"><a href="#Examples"><span class="tocnumber">2</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2"><a href="#C"><span class="tocnumber">2.1</span> <span class="toctext">C</span></a></li>
<li class="toclevel-2"><a href="#Scheme_.28also_valid_Common_Lisp.29"><span class="tocnumber">2.2</span> <span class="toctext">Scheme (also valid Common Lisp)</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">3</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">4</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1"><a href="#Further_reading"><span class="tocnumber">5</span> <span class="toctext">Further reading</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">6</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="History" id="History"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Quine_(computing)&amp;action=edit&amp;section=1" title="Edit section: History">edit</a>]</span> <span class="mw-headline">History</span></h2>
<p>The idea of self-reproducing programs first appeared in <i><a href="/w/index.php?title=Paul_Bratley&amp;action=edit&amp;redlink=1" class="new" title="Paul Bratley (page does not exist)">Bratley, Paul</a> and Jean Millo. "Computer Recreations; Self-Reproducing Automata", Software -- Practice &amp; Experience, Vol. 2 (1972). pp. 397-400.</i> Bratley first became interested in self-reproducing programs after seeing the first known such program written in <a href="/wiki/Atlas_Autocode" title="Atlas Autocode">Atlas Autocode</a> at Edinburgh in the 1960s by the <a href="/wiki/University_of_Edinburgh" title="University of Edinburgh">University of Edinburgh</a> lecturer and researcher <a href="/w/index.php?title=Hamish_Dewar&amp;action=edit&amp;redlink=1" class="new" title="Hamish Dewar (page does not exist)">Hamish Dewar</a>. This program appears below:</p>
<pre>
%BEGIN
!THIS IS A SELF-REPRODUCING PROGRAM
%ROUTINESPEC R
R
PRINT SYMBOL(39)
R
PRINT SYMBOL(39)
NEWLINE
%CAPTION %END~
%CAPTION %ENDOFPROGRAM~
%ROUTINE R
%PRINTTEXT '
%BEGIN
!THIS IS A SELF-REPRODUCING PROGRAM
%ROUTINESPEC R
R
PRINT SYMBOL(39)
R
PRINT SYMBOL(39)
NEWLINE
%CAPTION %END~
%CAPTION %ENDOFPROGRAM~
%ROUTINE R
%PRINTTEXT '
%END
%ENDOFPROGRAM
</pre>
<p><a name="Examples" id="Examples"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Quine_(computing)&amp;action=edit&amp;section=2" title="Edit section: Examples">edit</a>]</span> <span class="mw-headline">Examples</span></h2>
<p>In general, the method used to create a quine in any programming language is to have, within the program, two pieces: (a)&#160;<a href="/wiki/Source_code" title="Source code">code</a> used to do the actual printing and (b)&#160;<a href="/wiki/Data" title="Data">data</a> that represents the textual form of the code (e.g., <code>progdata</code> in the first C example below). The code functions by using the data to print the code (which makes sense since the data represents the textual form of the code), but it also uses the data, processed in a simple way (e.g., <code>quote()</code> below) to print the textual representation of the data itself. There are many ways the code and the data can be organized together within the program (neither must be contiguous), but a common telltale sign of the data section is that it mirrors some part of the entire program.</p>
<p>An example in colloquial English would be:</p>
<pre>
"quoted and followed by itself is a quine." quoted and followed by itself is a quine.
</pre>
<p>(from <a href="http://spikeypillow.com/item/31" class="external free" title="http://spikeypillow.com/item/31" rel="nofollow">http://spikeypillow.com/item/31</a>)</p>
<p><a name="C" id="C"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Quine_(computing)&amp;action=edit&amp;section=3" title="Edit section: C">edit</a>]</span> <span class="mw-headline"><a href="/wiki/C_(programming_language)" title="C (programming language)">C</a></span></h3>
<p>The idea behind this quine is to store a copy of the program code in a string, and use that to print out both the program code and the string.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="coMULTI">/* A simple quine (self-printing program), in standard C. */</span>
 
<span class="coMULTI">/* Note: in designing this quine, we have tried to make the code clear
 * and readable, not concise and obscure as many quines are, so that
 * the general principle can be made clear at the expense of length.
 * In a nutshell: use the same data structure (called "progdata"
 * below) to output the program code (which it represents) and its own
 * textual representation. */</span>
 
<span class="co2">#include &lt;stdio.h&gt;</span>
 
<span class="kw4">void</span> quote<span class="br0">(</span><span class="kw4">const</span> <span class="kw4">char</span> *s<span class="br0">)</span>
     <span class="coMULTI">/* This function takes a character string s and prints the
      * textual representation of s as it might appear formatted
      * in C code. */</span>
<span class="br0">{</span>
    <span class="kw4">int</span> i;
 
    <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"    <span class="es0">\"</span>"</span><span class="br0">)</span>;
    <span class="kw1">for</span> <span class="br0">(</span>i=<span class="nu0">0</span>; s<span class="br0">[</span>i<span class="br0">]</span>; ++i<span class="br0">)</span> <span class="br0">{</span>
        <span class="coMULTI">/* Certain characters are quoted. */</span>
        <span class="kw1">if</span> <span class="br0">(</span>s<span class="br0">[</span>i<span class="br0">]</span> == <span class="st0">'<span class="es0">\\</span>'</span><span class="br0">)</span>
            <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"<span class="es0">\\</span><span class="es0">\\</span>"</span><span class="br0">)</span>;
        <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">(</span>s<span class="br0">[</span>i<span class="br0">]</span> == <span class="st0">'"'</span><span class="br0">)</span>
            <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"<span class="es0">\\</span><span class="es0">\"</span>"</span><span class="br0">)</span>;
        <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">(</span>s<span class="br0">[</span>i<span class="br0">]</span> == <span class="st0">'<span class="es0">\n</span>'</span><span class="br0">)</span>
            <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"<span class="es0">\\</span>n"</span><span class="br0">)</span>;
        <span class="coMULTI">/* Others are just printed as such. */</span>
        <span class="kw1">else</span>
            <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"%c"</span>, s<span class="br0">[</span>i<span class="br0">]</span><span class="br0">)</span>;
        <span class="coMULTI">/* Also insert occasional line breaks. */</span>
        <span class="kw1">if</span> <span class="br0">(</span>i % <span class="nu0">48</span> == <span class="nu0">47</span><span class="br0">)</span>
            <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"<span class="es0">\"</span><span class="es0">\n</span>    <span class="es0">\"</span>"</span><span class="br0">)</span>;
    <span class="br0">}</span>
    <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"<span class="es0">\"</span>"</span><span class="br0">)</span>;
<span class="br0">}</span>
 
<span class="coMULTI">/* What follows is a string representation of the program code,
 * from beginning to end (formatted as per the quote() function
 * above), except that the string _itself_ is coded as two
 * consecutive '@' characters. */</span>
<span class="kw4">const</span> <span class="kw4">char</span> progdata<span class="br0">[</span><span class="br0">]</span> =
    <span class="st0">"/* A simple quine (self-printing program), in st"</span>
    <span class="st0">"andard C. */<span class="es0">\n</span><span class="es0">\n</span>/* Note: in designing this quine, "</span>
    <span class="st0">"we have tried to make the code clear<span class="es0">\n</span> * and read"</span>
    <span class="st0">"able, not concise and obscure as many quines are"</span>
    <span class="st0">", so that<span class="es0">\n</span> * the general principle can be made c"</span>
    <span class="st0">"lear at the expense of length.<span class="es0">\n</span> * In a nutshell:"</span>
    <span class="st0">" use the same data structure (called <span class="es0">\"</span>progdata<span class="es0">\"</span><span class="es0">\n</span>"</span>
    <span class="st0">" * below) to output the program code (which it r"</span>
    <span class="st0">"epresents) and its own<span class="es0">\n</span> * textual representation"</span>
    <span class="st0">". */<span class="es0">\n</span><span class="es0">\n</span>#include &lt;stdio.h&gt;<span class="es0">\n</span><span class="es0">\n</span>void quote(const char "</span>
    <span class="st0">"*s)<span class="es0">\n</span>     /* This function takes a character stri"</span>
    <span class="st0">"ng s and prints the<span class="es0">\n</span>      * textual representati"</span>
    <span class="st0">"on of s as it might appear formatted<span class="es0">\n</span>      * in "</span>
    <span class="st0">"C code. */<span class="es0">\n</span>{<span class="es0">\n</span>    int i;<span class="es0">\n</span><span class="es0">\n</span>    printf(<span class="es0">\"</span>    <span class="es0">\\</span><span class="es0">\"</span><span class="es0">\"</span>);<span class="es0">\n</span> "</span>
    <span class="st0">"   for (i=0; s[i]; ++i) {<span class="es0">\n</span>        /* Certain cha"</span>
    <span class="st0">"racters are quoted. */<span class="es0">\n</span>        if (s[i] == '<span class="es0">\\</span><span class="es0">\\</span>')"</span>
    <span class="st0">"<span class="es0">\n</span>            printf(<span class="es0">\"</span><span class="es0">\\</span><span class="es0">\\</span><span class="es0">\\</span><span class="es0">\\</span><span class="es0">\"</span>);<span class="es0">\n</span>        else if (s["</span>
    <span class="st0">"i] == '<span class="es0">\"</span>')<span class="es0">\n</span>            printf(<span class="es0">\"</span><span class="es0">\\</span><span class="es0">\\</span><span class="es0">\\</span><span class="es0">\"</span><span class="es0">\"</span>);<span class="es0">\n</span>        e"</span>
    <span class="st0">"lse if (s[i] == '<span class="es0">\\</span>n')<span class="es0">\n</span>            printf(<span class="es0">\"</span><span class="es0">\\</span><span class="es0">\\</span>n<span class="es0">\"</span>);"</span>
    <span class="st0">"<span class="es0">\n</span>        /* Others are just printed as such. */<span class="es0">\n</span>"</span>
    <span class="st0">"        else<span class="es0">\n</span>            printf(<span class="es0">\"</span>%c<span class="es0">\"</span>, s[i]);<span class="es0">\n</span>   "</span>
    <span class="st0">"     /* Also insert occasional line breaks. */<span class="es0">\n</span> "</span>
    <span class="st0">"       if (i % 48 == 47)<span class="es0">\n</span>            printf(<span class="es0">\"</span><span class="es0">\\</span><span class="es0">\"</span><span class="es0">\\</span>"</span>
    <span class="st0">"n    <span class="es0">\\</span><span class="es0">\"</span><span class="es0">\"</span>);<span class="es0">\n</span>    }<span class="es0">\n</span>    printf(<span class="es0">\"</span><span class="es0">\\</span><span class="es0">\"</span><span class="es0">\"</span>);<span class="es0">\n</span>}<span class="es0">\n</span><span class="es0">\n</span>/* What fo"</span>
    <span class="st0">"llows is a string representation of the program "</span>
    <span class="st0">"code,<span class="es0">\n</span> * from beginning to end (formatted as per"</span>
    <span class="st0">" the quote() function<span class="es0">\n</span> * above), except that the"</span>
    <span class="st0">" string _itself_ is coded as two<span class="es0">\n</span> * consecutive "</span>
    <span class="st0">"'@' characters. */<span class="es0">\n</span>const char progdata[] =<span class="es0">\n</span>@@;<span class="es0">\n</span><span class="es0">\n</span>"</span>
    <span class="st0">"int main(void)<span class="es0">\n</span>     /* The program itself... */<span class="es0">\n</span>"</span>
    <span class="st0">"{<span class="es0">\n</span>    int i;<span class="es0">\n</span><span class="es0">\n</span>    /* Print the program code, cha"</span>
    <span class="st0">"racter by character. */<span class="es0">\n</span>    for (i=0; progdata[i"</span>
    <span class="st0">"]; ++i) {<span class="es0">\n</span>        if (progdata[i] == '@' &amp;&amp; prog"</span>
    <span class="st0">"data[i+1] == '@')<span class="es0">\n</span>            /* We encounter tw"</span>
    <span class="st0">"o '@' signs, so we must print the quoted<span class="es0">\n</span>       "</span>
    <span class="st0">"      * form of the program code. */<span class="es0">\n</span>        {<span class="es0">\n</span> "</span>
    <span class="st0">"           quote(progdata);    /* Quote all. */<span class="es0">\n</span>"</span>
    <span class="st0">"            i++;                /* Skip second '"</span>
    <span class="st0">"@'. */<span class="es0">\n</span>        } else<span class="es0">\n</span>            printf(<span class="es0">\"</span>%c<span class="es0">\"</span>, p"</span>
    <span class="st0">"rogdata[i]);  /* Print character. */<span class="es0">\n</span>    }<span class="es0">\n</span>    r"</span>
    <span class="st0">"eturn 0;<span class="es0">\n</span>}<span class="es0">\n</span>"</span>;
 
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>
     <span class="coMULTI">/* The program itself... */</span>
<span class="br0">{</span>
    <span class="kw4">int</span> i;
 
    <span class="coMULTI">/* Print the program code, character by character. */</span>
    <span class="kw1">for</span> <span class="br0">(</span>i=<span class="nu0">0</span>; progdata<span class="br0">[</span>i<span class="br0">]</span>; ++i<span class="br0">)</span> <span class="br0">{</span>
        <span class="kw1">if</span> <span class="br0">(</span>progdata<span class="br0">[</span>i<span class="br0">]</span> == <span class="st0">'@'</span> &amp;&amp; progdata<span class="br0">[</span>i<span class="nu0">+1</span><span class="br0">]</span> == <span class="st0">'@'</span><span class="br0">)</span>
            <span class="coMULTI">/* We encounter two '@' signs, so we must print the quoted
             * form of the program code. */</span>
        <span class="br0">{</span>
            quote<span class="br0">(</span>progdata<span class="br0">)</span>;    <span class="coMULTI">/* Quote all. */</span>
            i++;                <span class="coMULTI">/* Skip second '@'. */</span>
        <span class="br0">}</span> <span class="kw1">else</span>
            <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"%c"</span>, progdata<span class="br0">[</span>i<span class="br0">]</span><span class="br0">)</span>;  <span class="coMULTI">/* Print character. */</span>
    <span class="br0">}</span>
    <span class="kw1">return</span> <span class="nu0">0</span>;
<span class="br0">}</span>
</pre></div>
<p>An alternative approach in C would be to make use of the C pre-processor. For example:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="co2">#include &lt;stdio.h&gt;</span>
 
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">int</span> argc, <span class="kw4">char</span>** argv<span class="br0">)</span>
<span class="br0">{</span>
<span class="coMULTI">/* This macro B will expand to its argument, followed by a printf
 command that prints the macro invocation as a literal string */</span>
<span class="co2">#define B(x) x; printf("  B(" #x ")\n");</span>
 
<span class="coMULTI">/* This macro A will expand to a printf command that prints the
 macro invocation, followed by the macro argument itself. */</span>
<span class="co2">#define A(x) printf("  A(" #x ")\n"); x;</span>
 
<span class="coMULTI">/* Now we call B on the text of the program
 up to this point. It will execute the command, and then cause
 itself to be printed. */</span>
  B<span class="br0">(</span><span class="kw3">printf</span><span class="br0">(</span><span class="st0">"#include &lt;stdio.h&gt;<span class="es0">\n</span><span class="es0">\n</span>int main(int argc, char** argv)<span class="es0">\n</span>{<span class="es0">\n</span>/*
    This macro B will expand to its argument, followed by a printf<span class="es0">\n</span>
    command that prints the macro invocation as a literal string
    */<span class="es0">\n</span>#define B(x) x; printf(<span class="es0">\"</span>  B(<span class="es0">\"</span> #x <span class="es0">\"</span>)<span class="es0">\\</span>n<span class="es0">\"</span>);<span class="es0">\n</span><span class="es0">\n</span>/* This macro
    A will expand to a printf command that prints the<span class="es0">\n</span>
    macro invocation, followed by the macro argument itself. */<span class="es0">\n</span>#define A(x)
    printf(<span class="es0">\"</span>  A(<span class="es0">\"</span> #x <span class="es0">\"</span>)<span class="es0">\\</span>n<span class="es0">\"</span>); x;<span class="es0">\n</span><span class="es0">\n</span>/* Now we call B on the text
    of the program<span class="es0">\n</span> up to this point. It will execute the command,
    and then cause<span class="es0">\n</span> itself to be printed. */<span class="es0">\n</span>"</span><span class="br0">)</span><span class="br0">)</span>
  A<span class="br0">(</span><span class="kw3">printf</span><span class="br0">(</span><span class="st0">"/* Lastly, we call A on a command to print the remainder
    of the program;<span class="es0">\n</span> it will cause itself to be printed, and then
    execute the command. */<span class="es0">\n</span>}<span class="es0">\n</span>"</span><span class="br0">)</span><span class="br0">)</span>
<span class="coMULTI">/* Lastly, we call A on a command to print the remainder of the program;
 it will cause itself to be printed, and then execute the command. */</span>
<span class="br0">}</span>
</pre></div>
<p>Note that in the above, the line beginning with <code>B(printf(</code> would be one line; there is exactly one space between the end of each line and the beginning of the next, but it is broken into multiple lines so that it does not overflow the screen. Likewise, the line beginning <code>A(printf(</code> has been broken into multiple lines.</p>
<p>After eliminating comments, the essence of this method is:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="co2">#define B(x) int main(){x; puts("B(" #x ")");}</span>
B<span class="br0">(</span>puts<span class="br0">(</span><span class="st0">"#define B(x) int main(){x; puts(<span class="es0">\"</span>B(<span class="es0">\"</span> #x <span class="es0">\"</span>)<span class="es0">\"</span>);}"</span><span class="br0">)</span><span class="br0">)</span>
</pre></div>
<p>An even shorter, classic,<sup id="cite_ref-1" class="reference"><a href="#cite_note-1" title=""><span>[</span>2<span>]</span></a></sup> approach in C instead exploits the ability of the <code>printf</code> function to use a <a href="/wiki/Format_string" title="Format string" class="mw-redirect">format string</a>, passing a carefully-constructed string as both the format string and a substitution parameter. Note: 34 is the ASCII code for a double-quote character, and is used to avoid the need to quote the double-quotes in the string literal.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
main<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> <span class="kw4">char</span> *s=<span class="st0">"main() { char *s=%c%s%c; printf(s,34,s,34); }"</span>; <span class="kw3">printf</span><span class="br0">(</span>s,<span class="nu0">34</span>,s,<span class="nu0">34</span><span class="br0">)</span>; <span class="br0">}</span>
</pre></div>
<p>This program uses the <code><a href="/wiki/Printf" title="Printf">printf</a></code> function without including its corresponding header (<code>#include &lt;<a href="/wiki/Stdio.h" title="Stdio.h">stdio.h</a>&gt;</code>), which can result in <a href="/wiki/Undefined_behavior" title="Undefined behavior">undefined behavior</a>. Also, the return type declaration for main has been left off to reduce the length of the program.</p>
<p><a name="Scheme_.28also_valid_Common_Lisp.29" id="Scheme_.28also_valid_Common_Lisp.29"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Quine_(computing)&amp;action=edit&amp;section=4" title="Edit section: Scheme (also valid Common Lisp)">edit</a>]</span> <span class="mw-headline"><a href="/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme</a> (also valid <a href="/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a>)</span></h3>
<p>This quine works by feeding the program to itself, which then converts the data structure to source code.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-scheme">
<span class="br0">(</span><span class="br0">(</span><span class="kw1">lambda</span> <span class="br0">(</span>x<span class="br0">)</span> <span class="br0">(</span><span class="kw1">list</span> x <span class="br0">(</span><span class="kw1">list</span> '<span class="kw1">quote</span> x<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>
 '<span class="br0">(</span><span class="kw1">lambda</span> <span class="br0">(</span>x<span class="br0">)</span> <span class="br0">(</span><span class="kw1">list</span> x <span class="br0">(</span><span class="kw1">list</span> '<span class="kw1">quote</span> x<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>
</pre></div>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Quine_(computing)&amp;action=edit&amp;section=5" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<div>
<table width="100%" border="0" cellspacing="0" cellpadding="0" style="background-color:transparent;table-layout:fixed;">
<tr valign="top">
<td>
<div style="margin-right:20px;">
<ul>
<li><a href="/wiki/Computer_programming" title="Computer programming">Computer programming</a></li>
<li><a href="/wiki/Diagonal_lemma" title="Diagonal lemma">Diagonal lemma</a></li>
<li><a href="/wiki/Fixed_point_combinator" title="Fixed point combinator">Fixed point combinator</a></li>
</ul>
</div>
</td>
<td>
<div style="margin-right: 20px;">
<ul>
<li><a href="/wiki/List_of_programming_languages" title="List of programming languages">List of programming languages</a></li>
<li><a href="/wiki/Obfuscated_code" title="Obfuscated code">Obfuscated code</a></li>
<li><a href="/wiki/Self-interpreter" title="Self-interpreter">Self-interpreter</a></li>
</ul>
</div>
</td>
<td>
<div style="margin-right: 20px;">
<ul>
<li><a href="/wiki/Self-replicating_machine" title="Self-replicating machine">Self-replicating machine</a></li>
<li><a href="/wiki/Self-replication" title="Self-replication">Self-replication</a></li>
<li><a href="/wiki/Tupper%27s_self-referential_formula" title="Tupper's self-referential formula">Tupper's self-referential formula</a></li>
</ul>
</div>
</td>
</tr>
</table>
</div>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Quine_(computing)&amp;action=edit&amp;section=6" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<div class="references-small">
<ol class="references">
<li id="cite_note-0"><b><a href="#cite_ref-0" title="">^</a></b> <a href="http://www0.us.ioccc.org/1994/smr.hint" class="external text" title="http://www0.us.ioccc.org/1994/smr.hint" rel="nofollow">IOCCC 1994 Worst Abuse of the Rules</a></li>
<li id="cite_note-1"><b><a href="#cite_ref-1" title="">^</a></b> <a href="http://www.nyx.net/~gthompso/quine.htm" class="external text" title="http://www.nyx.net/~gthompso/quine.htm" rel="nofollow">The Quine Page</a></li>
</ol>
</div>
<p><a name="Further_reading" id="Further_reading"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Quine_(computing)&amp;action=edit&amp;section=7" title="Edit section: Further reading">edit</a>]</span> <span class="mw-headline">Further reading</span></h2>
<ul>
<li><a href="/wiki/Douglas_Hofstadter" title="Douglas Hofstadter">Douglas Hofstadter</a>: <i><a href="/wiki/G%C3%B6del,_Escher,_Bach:_An_Eternal_Golden_Braid" title="Gödel, Escher, Bach: An Eternal Golden Braid" class="mw-redirect">Gödel, Escher, Bach: An Eternal Golden Braid</a></i></li>
<li><a href="/wiki/Ken_Thompson" title="Ken Thompson">Ken Thompson</a>: "<a href="http://cm.bell-labs.com/who/ken/trust.html" class="external text" title="http://cm.bell-labs.com/who/ken/trust.html" rel="nofollow">Reflections on Trusting Trust</a>" (<i><a href="/wiki/Communications_of_the_ACM" title="Communications of the ACM">Communications of the ACM</a></i>, <b>27</b>(8):761-3)</li>
</ul>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Quine_(computing)&amp;action=edit&amp;section=8" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<ul>
<li><a href="http://www.nyx.net/~gthompso/quine.htm" class="external text" title="http://www.nyx.net/~gthompso/quine.htm" rel="nofollow">The Quine Page (by Gary P. Thompson)</a></li>
<li><a href="http://c2.com/cgi/wiki?QuineProgram" class="external text" title="http://c2.com/cgi/wiki?QuineProgram" rel="nofollow">QuineProgram at the Portland Pattern Repository Wiki</a></li>
<li><a href="http://www.madore.org/~david/computers/quine.html" class="external text" title="http://www.madore.org/~david/computers/quine.html" rel="nofollow">David Madore's Discussion of Quines</a></li>
<li><a href="http://web-graphics.com/pages/quine.php" class="external text" title="http://web-graphics.com/pages/quine.php" rel="nofollow">JavaScript Quine Contest Entries</a></li>
<li><a href="http://steike.com/code/useless/zip-file-quine" class="external text" title="http://steike.com/code/useless/zip-file-quine" rel="nofollow">A zip file Quine</a></li>
<li><a href="http://johannesloetzsch.de/software/quines/" class="external text" title="http://johannesloetzsch.de/software/quines/" rel="nofollow">An intruduction to Quines — In particular, quines using more than one language</a></li>
</ul>


<!-- 
NewPP limit report
Preprocessor node count: 82/1000000
Post-expand include size: 403/2048000 bytes
Template argument size: 0/2048000 bytes
Expensive parser function count: 0/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:25270-0!1!0!default!!en!2 and timestamp 20090325225654 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Quine_(computing)">http://en.wikipedia.org/wiki/Quine_(computing)</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Computer_programming" title="Category:Computer programming">Computer programming</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_example_C_code" title="Category:Articles with example C code">Articles with example C code</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_example_Lisp_code" title="Category:Articles with example Lisp code">Articles with example Lisp code</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_example_Scheme_code" title="Category:Articles with example Scheme code">Articles with example Scheme code</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Quine_(computing)" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Quine_(computing)" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Quine_(computing)&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Quine_(computing)&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Quine_(computing)" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Quine_(computing)" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Quine_(computing)" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Quine_(computing)&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Quine_(computing)&amp;oldid=279686205" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Quine_(computing)&amp;id=279686205">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-be-x-old"><a href="http://be-x-old.wikipedia.org/wiki/%D0%9A%D1%83%D1%96%D0%BD">Беларуская (тарашкевіца)</a></li>
				<li class="interwiki-bg"><a href="http://bg.wikipedia.org/wiki/%D0%A1%D0%B0%D0%BC%D0%BE%D0%B8%D0%B7%D0%BF%D0%B8%D1%81%D0%B2%D0%B0%D1%89%D0%B0_%D1%81%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%B0">Български</a></li>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/Quine_(Computerprogramm)">Deutsch</a></li>
				<li class="interwiki-es"><a href="http://es.wikipedia.org/wiki/Quine_(programa)">Español</a></li>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Quine_(informatique)">Français</a></li>
				<li class="interwiki-ko"><a href="http://ko.wikipedia.org/wiki/%EC%BD%B0%EC%9D%B8">한국어</a></li>
				<li class="interwiki-it"><a href="http://it.wikipedia.org/wiki/Quine">Italiano</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/%E3%82%AF%E3%83%AF%E3%82%A4%E3%83%B3_(%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0)">日本語</a></li>
				<li class="interwiki-pl"><a href="http://pl.wikipedia.org/wiki/Quine">Polski</a></li>
				<li class="interwiki-pt"><a href="http://pt.wikipedia.org/wiki/Quine_(inform%C3%A1tica)">Português</a></li>
				<li class="interwiki-ru"><a href="http://ru.wikipedia.org/wiki/%D0%9A%D1%83%D0%B0%D0%B9%D0%BD_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)">Русский</a></li>
				<li class="interwiki-fi"><a href="http://fi.wikipedia.org/wiki/Quine_(tietokoneohjelma)">Suomi</a></li>
				<li class="interwiki-sv"><a href="http://sv.wikipedia.org/wiki/Quine">Svenska</a></li>
				<li class="interwiki-zh"><a href="http://zh.wikipedia.org/wiki/%E8%87%AA%E7%94%A2%E7%94%9F%E7%A8%8B%E5%BC%8F">中文</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 25 March 2009, at 22:53.</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv147 in 0.055 secs. --></body></html>
