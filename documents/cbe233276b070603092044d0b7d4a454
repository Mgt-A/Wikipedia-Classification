<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="X86 calling conventions,Articles lacking in-text citations from February 2008,Articles to be expanded since June 2008,AMD64,API,Application Binary Interface,Application binary interface,Automatic variable,Borland Delphi,C programming language,Call stack" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=X86_calling_conventions&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=X86_calling_conventions&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>x86 calling conventions - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "X86_calling_conventions";
		var wgTitle = "X86 calling conventions";
		var wgAction = "view";
		var wgArticleId = "6817415";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 286037116;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
<style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-c .de1, .source-c .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-c  {}
.source-c .head {}
.source-c .foot {}
.source-c .imp {font-weight: bold; color: red;}
.source-c .ln-xtra {color: #cc0; background-color: #ffc;}
.source-c li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-c li.li2 {font-weight: bold;}
.source-c .kw1 {color: #b1b100;}
.source-c .kw2 {color: #000000; font-weight: bold;}
.source-c .kw3 {color: #000066;}
.source-c .kw4 {color: #993333;}
.source-c .co1 {color: #808080; font-style: italic;}
.source-c .co2 {color: #339933;}
.source-c .coMULTI {color: #808080; font-style: italic;}
.source-c .es0 {color: #000099; font-weight: bold;}
.source-c .br0 {color: #66cc66;}
.source-c .st0 {color: #ff0000;}
.source-c .nu0 {color: #cc66cc;}
.source-c .me1 {color: #202020;}
.source-c .me2 {color: #202020;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-asm {line-height: normal;}
.source-asm li, .source-asm pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for asm
 * CSS class: source-asm, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-asm .de1, .source-asm .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-asm  {}
.source-asm .head {}
.source-asm .foot {}
.source-asm .imp {font-weight: bold; color: red;}
.source-asm .ln-xtra {color: #cc0; background-color: #ffc;}
.source-asm li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-asm li.li2 {font-weight: bold;}
.source-asm .kw1 {color: #00007f;}
.source-asm .kw2 {color: #0000ff;}
.source-asm .kw3 {color: #46aa03; font-weight:bold;}
.source-asm .kw4 {color: #0000ff;}
.source-asm .kw5 {color: #0000ff;}
.source-asm .co1 {color: #adadad; font-style: italic;}
.source-asm .es0 {color: #000099; font-weight: bold;}
.source-asm .br0 {color: #66cc66;}
.source-asm .st0 {color: #7f007f;}
.source-asm .nu0 {color: #ff0000;}
.source-asm .re0 {color: #ff0000;}
.source-asm .re1 {color: #ff0000;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-pascal {line-height: normal;}
.source-pascal li, .source-pascal pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for pascal
 * CSS class: source-pascal, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-pascal .de1, .source-pascal .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-pascal  {}
.source-pascal .head {}
.source-pascal .foot {}
.source-pascal .imp {font-weight: bold; color: red;}
.source-pascal .ln-xtra {color: #cc0; background-color: #ffc;}
.source-pascal li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-pascal li.li2 {font-weight: bold;}
.source-pascal .kw1 {color: #b1b100;}
.source-pascal .kw2 {color: #000000; font-weight: bold;}
.source-pascal .kw3 {}
.source-pascal .kw4 {color: #993333;}
.source-pascal .co1 {color: #808080; font-style: italic;}
.source-pascal .co2 {color: #339933;}
.source-pascal .coMULTI {color: #808080; font-style: italic;}
.source-pascal .es0 {color: #000099; font-weight: bold;}
.source-pascal .br0 {color: #66cc66;}
.source-pascal .st0 {color: #ff0000;}
.source-pascal .nu0 {color: #cc66cc;}
.source-pascal .me1 {color: #202020;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style>		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-X86_calling_conventions skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">x86 calling conventions</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<table class="metadata plainlinks ambox ambox-style" style="">
<tr>
<td class="mbox-image">
<div style="width: 52px;"><a href="/wiki/File:Text_document_with_red_question_mark.svg" class="image" title="Text document with red question mark.svg"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/a/a4/Text_document_with_red_question_mark.svg/40px-Text_document_with_red_question_mark.svg.png" width="40" height="40" border="0" /></a></div>
</td>
<td class="mbox-text" style="">This article includes a <a href="/wiki/Wikipedia:Citing_sources" title="Wikipedia:Citing sources">list of references</a> or <a href="/wiki/Wikipedia:External_links" title="Wikipedia:External links">external links</a>, but <b>its sources remain unclear because it lacks <a href="/wiki/Wikipedia:Citing_sources#Inline_citations" title="Wikipedia:Citing sources">inline citations</a>.</b> Please <a href="/wiki/Wikipedia:WikiProject_Fact_and_Reference_Check" title="Wikipedia:WikiProject Fact and Reference Check">improve</a> this article by introducing more precise citations <a href="/wiki/Wikipedia:When_to_cite" title="Wikipedia:When to cite">where appropriate</a>. <small><i>(February 2008)</i></small></td>
</tr>
</table>
<p>This article describes, in <a href="/wiki/Computing" title="Computing">computing</a>, the <a href="/wiki/Calling_convention" title="Calling convention">calling conventions</a> used on the <a href="/wiki/X86" title="X86">x86</a> architecture.</p>
<p>Calling conventions describe the interface of called code:</p>
<ul>
<li>The order in which parameters are allocated</li>
<li>Where parameters are placed (pushed on the stack or placed in registers)</li>
<li>Which registers may be used by the function</li>
<li>Whether the caller or the callee is responsible for unwinding the stack on return</li>
</ul>
<p>A closely related topic is <a href="/wiki/Name_mangling" title="Name mangling">name mangling</a>, which determines how symbol names in the code map to symbol names used by the linker.</p>
<p>It should be noted that there are often subtle differences in how various compilers implement these conventions, so it is often difficult to interface code which is compiled by different compilers. On the other hand, conventions which are used as an API standard (like stdcall) are necessarily very uniformly implemented.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Historical_background"><span class="tocnumber">1</span> <span class="toctext">Historical background</span></a></li>
<li class="toclevel-1"><a href="#Caller_clean-up"><span class="tocnumber">2</span> <span class="toctext">Caller clean-up</span></a>
<ul>
<li class="toclevel-2"><a href="#cdecl"><span class="tocnumber">2.1</span> <span class="toctext">cdecl</span></a></li>
<li class="toclevel-2"><a href="#syscall"><span class="tocnumber">2.2</span> <span class="toctext">syscall</span></a></li>
<li class="toclevel-2"><a href="#optlink"><span class="tocnumber">2.3</span> <span class="toctext">optlink</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Callee_clean-up"><span class="tocnumber">3</span> <span class="toctext">Callee clean-up</span></a>
<ul>
<li class="toclevel-2"><a href="#pascal"><span class="tocnumber">3.1</span> <span class="toctext">pascal</span></a></li>
<li class="toclevel-2"><a href="#register"><span class="tocnumber">3.2</span> <span class="toctext">register</span></a></li>
<li class="toclevel-2"><a href="#stdcall"><span class="tocnumber">3.3</span> <span class="toctext">stdcall</span></a></li>
<li class="toclevel-2"><a href="#fastcall"><span class="tocnumber">3.4</span> <span class="toctext">fastcall</span></a>
<ul>
<li class="toclevel-3"><a href="#Microsoft_fastcall"><span class="tocnumber">3.4.1</span> <span class="toctext">Microsoft fastcall</span></a></li>
<li class="toclevel-3"><a href="#Borland_fastcall"><span class="tocnumber">3.4.2</span> <span class="toctext">Borland fastcall</span></a></li>
<li class="toclevel-3"><a href="#Watcom_register_based_calling_convention"><span class="tocnumber">3.4.3</span> <span class="toctext">Watcom register based calling convention</span></a></li>
<li class="toclevel-3"><a href="#TopSpeed_.2F_Clarion_.2F_JPI"><span class="tocnumber">3.4.4</span> <span class="toctext">TopSpeed / Clarion / JPI</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#safecall"><span class="tocnumber">3.5</span> <span class="toctext">safecall</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Either_caller_or_callee_clean-up"><span class="tocnumber">4</span> <span class="toctext">Either caller or callee clean-up</span></a>
<ul>
<li class="toclevel-2"><a href="#thiscall"><span class="tocnumber">4.1</span> <span class="toctext">thiscall</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Intel_ABI"><span class="tocnumber">5</span> <span class="toctext">Intel ABI</span></a></li>
<li class="toclevel-1"><a href="#Microsoft_x64_calling_convention"><span class="tocnumber">6</span> <span class="toctext">Microsoft x64 calling convention</span></a></li>
<li class="toclevel-1"><a href="#AMD64_ABI_convention"><span class="tocnumber">7</span> <span class="toctext">AMD64 ABI convention</span></a></li>
<li class="toclevel-1"><a href="#Standard_exit_and_entry_sequences_for_C_code"><span class="tocnumber">8</span> <span class="toctext">Standard exit and entry sequences for C code</span></a></li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">9</span> <span class="toctext">References</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Historical_background" id="Historical_background"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=X86_calling_conventions&amp;action=edit&amp;section=1" title="Edit section: Historical background">edit</a>]</span> <span class="mw-headline">Historical background</span></h2>
<p>In the times of <a href="/wiki/Minicomputer" title="Minicomputer">minicomputers</a>, the machine manufacturer also used to provide an OS for it and most of (if not all) of the software, including compilers for various languages. So there used to be only one calling convention per language: the one implemented by the manufacturer's compilers.</p>
<p>The IBM PC case was totally different. One firm (IBM) provided the hardware, another (Intel) made the processor, the third (Microsoft) was responsible for the OS (MS-DOS), and many others wrote compilers for quite a number of programming languages. Different mutually exclusive calling schemes were thus designed to satisfy their different requirements.</p>
<p><a name="Caller_clean-up" id="Caller_clean-up"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=X86_calling_conventions&amp;action=edit&amp;section=2" title="Edit section: Caller clean-up">edit</a>]</span> <span class="mw-headline">Caller clean-up</span></h2>
<p>In these conventions the caller cleans the arguments from the stack, which allows for variable argument lists, eg. printf().</p>
<p><a name="cdecl" id="cdecl"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=X86_calling_conventions&amp;action=edit&amp;section=3" title="Edit section: cdecl">edit</a>]</span> <span class="mw-headline">cdecl</span></h3>
<p>The <b>cdecl</b> calling convention is used by many <a href="/wiki/C_programming_language" title="C programming language" class="mw-redirect">C</a> systems for the <a href="/wiki/X86_architecture" title="X86 architecture" class="mw-redirect">x86 architecture</a>. In cdecl, function parameters are pushed on the <a href="/wiki/Call_stack" title="Call stack">stack</a> in a right-to-left order. Function return values are returned in the EAX <a href="/wiki/Processor_register" title="Processor register">register</a> (except for floating point values, which are returned in the x87 register ST0). Registers EAX, ECX, and EDX are available for use in the function.</p>
<p>For instance, the following C code function prototype and function call:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">int</span> function_name<span class="br0">(</span><span class="kw4">int</span>, <span class="kw4">int</span>, <span class="kw4">int</span><span class="br0">)</span>;
<span class="kw4">int</span> a, b, c, x;
...
<span class="me1">x</span> = function_name<span class="br0">(</span>a, b, c<span class="br0">)</span>;
</pre></div>
<p>will produce the following <a href="/wiki/X86_assembly_language" title="X86 assembly language">x86 Assembly code</a> (written in <a href="/wiki/MASM" title="MASM" class="mw-redirect">MASM</a> syntax, with destination first):</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-asm">
<span class="kw1">push</span> <span class="kw5">c</span>
<span class="kw1">push</span> b
<span class="kw1">push</span> a
<span class="kw1">call</span> function_name
<span class="kw1">add</span> <span class="kw3">esp</span>, <span class="nu0">12</span> <span class="co1">;Stack clearing</span>
<span class="kw1">mov</span> x, <span class="kw3">eax</span>
</pre></div>
<p>The calling function cleans the stack after the function call returns.</p>
<p>There are some variations in the interpretation of cdecl, particularly in how to return values. As a result, x86 programs compiled for different operating system platforms and/or by different compilers can be incompatible, even if they both use the "cdecl" convention and do not call out to the underlying environment. Some compilers return simple data structures with the length of 2 registers or less in EAX:EDX, and larger structures and class objects requiring special treatment by the exception handler (e.g., a defined constructor, destructor, or assignment) are returned in memory. To pass "in memory", the caller allocates memory and passes a pointer to it as a hidden first parameter; the callee populates the memory and returns the pointer, popping the hidden pointer when returning.</p>
<p>In Linux/gcc double/floating point values should be pushed on the stack via the <a href="/wiki/X87" title="X87">x87</a> pseudo-stack. Like so:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-asm">
<span class="kw1">sub</span> <span class="kw3">esp</span>,<span class="nu0">8</span><span class="co1">;    make room for the double</span>
<span class="kw2">fld</span> <span class="br0">[</span><span class="kw3">ebp</span>+x<span class="br0">]</span><span class="co1">; load our double onto the floating point stack</span>
<span class="kw2">fstp</span> <span class="br0">[</span><span class="kw3">esp</span><span class="br0">]</span><span class="co1">;  push our double onto the stack</span>
<span class="kw1">call</span> func<span class="co1">;</span>
<span class="kw1">add</span> <span class="kw3">esp</span>,<span class="nu0">8</span><span class="co1">;</span>
</pre></div>
<p>Using this method ensures it is pushed on the stack in the correct format.</p>
<p>The <b>cdecl</b> calling convention is usually the default calling convention for x86 C <a href="/wiki/Compilers" title="Compilers" class="mw-redirect">compilers</a>, although many compilers provide options to automatically change the calling conventions used. To manually define a function to be cdecl, some support the following syntax:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">void</span> _cdecl function_name<span class="br0">(</span>params<span class="br0">)</span>;
</pre></div>
<p>The <b>_cdecl</b> modifier must be included in the function prototype, and in the function declaration to override any other settings that might be in place.</p>
<p><a name="syscall" id="syscall"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=X86_calling_conventions&amp;action=edit&amp;section=4" title="Edit section: syscall">edit</a>]</span> <span class="mw-headline">syscall</span></h3>
<p>This is similar to cdecl in that arguments are pushed right to left. EAX, ECX, and EDX are not preserved. The size of the parameter list in doublewords is passed in AL.</p>
<p>Syscall is the standard calling convention for 32 bit <a href="/wiki/OS/2" title="OS/2">OS/2</a> API.</p>
<p><a name="optlink" id="optlink"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=X86_calling_conventions&amp;action=edit&amp;section=5" title="Edit section: optlink">edit</a>]</span> <span class="mw-headline">optlink</span></h3>
<p>Arguments are pushed right to left. The three lexically first (leftmost) arguments are passed in EAX, EDX, and ECX and up to four floating-point arguments are passed in ST(0) through ST(3), although space for them is reserved in the argument list on the stack. Results are returned in EAX or ST(0). Registers EBP, EBX, ESI, and EDI are preserved.</p>
<p>Optlink is used by the <a href="/wiki/IBM" title="IBM">IBM</a> <a href="/wiki/VisualAge" title="VisualAge" class="mw-redirect">VisualAge</a> compilers.</p>
<p><a name="Callee_clean-up" id="Callee_clean-up"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=X86_calling_conventions&amp;action=edit&amp;section=6" title="Edit section: Callee clean-up">edit</a>]</span> <span class="mw-headline">Callee clean-up</span></h2>
<p>When the callee cleans the arguments from the stack it needs to be known at compile time how many bytes the stack needs to be adjusted. Therefore, these calling conventions are not compatible with variable argument lists, eg. printf(). They may be, however, slightly more efficient as the code needed to unwind the stack does not need to be generated by the calling code.</p>
<p>Functions which utilize these conventions are easy to recognize in ASM code because they will unwind the stack prior to returning. The x86 <tt>ret</tt> instruction allows an optional byte parameter that specifies the number of stack locations to unwind before returning to the caller. Such code looks like this:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-asm">
 <span class="kw1">ret</span> <span class="nu0">12</span>
</pre></div>
<p><a name="pascal" id="pascal"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=X86_calling_conventions&amp;action=edit&amp;section=7" title="Edit section: pascal">edit</a>]</span> <span class="mw-headline">pascal</span></h3>
<p>The parameters are pushed on the stack in left-to-right order (opposite of cdecl), and the callee is responsible for balancing the stack before return.</p>
<p>This calling convention was common in the following 16 bit APIs: <a href="/wiki/OS/2" title="OS/2">OS/2</a> 1.x , <a href="/wiki/Microsoft_Windows" title="Microsoft Windows">Microsoft Windows</a> 3.x, and <a href="/wiki/Borland_Delphi" title="Borland Delphi" class="mw-redirect">Borland Delphi</a> version 1.x.</p>
<p><a name="register" id="register"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=X86_calling_conventions&amp;action=edit&amp;section=8" title="Edit section: register">edit</a>]</span> <span class="mw-headline">register</span></h3>
<p>An alias for <a href="#Borland_fastcall" title="">Borland fastcall</a>.</p>
<p><a name="stdcall" id="stdcall"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=X86_calling_conventions&amp;action=edit&amp;section=9" title="Edit section: stdcall">edit</a>]</span> <span class="mw-headline">stdcall</span></h3>
<p>The stdcall<a href="http://msdn2.microsoft.com/en-us/library/zxk0tw93(vs.71).aspx" class="external autonumber" title="http://msdn2.microsoft.com/en-us/library/zxk0tw93(vs.71).aspx" rel="nofollow">[1]</a> calling convention is a variation on the pascal calling convention in which parameters are passed on the stack, pushed right-to-left. Registers EAX, ECX, and EDX are designated for use within the function. Return values are stored in the EAX register. The callee is responsible for cleanup of the stack.</p>
<p>Stdcall is the standard calling convention for the Microsoft <a href="/wiki/Win32" title="Win32" class="mw-redirect">Win32</a> <a href="/wiki/API" title="API" class="mw-redirect">API</a>.</p>
<p><a name="fastcall" id="fastcall"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=X86_calling_conventions&amp;action=edit&amp;section=10" title="Edit section: fastcall">edit</a>]</span> <span class="mw-headline">fastcall</span></h3>
<p>Conventions entitled <b>fastcall</b> have not been standardized, and have been implemented differently, depending on the compiler vendor.</p>
<p><a name="Microsoft_fastcall" id="Microsoft_fastcall"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=X86_calling_conventions&amp;action=edit&amp;section=11" title="Edit section: Microsoft fastcall">edit</a>]</span> <span class="mw-headline">Microsoft fastcall</span></h4>
<ul>
<li>Microsoft or GCC <a href="http://www.ohse.de/uwe/articles/gcc-attributes.html#func-fastcall" class="external autonumber" title="http://www.ohse.de/uwe/articles/gcc-attributes.html#func-fastcall" rel="nofollow">[2]</a> <tt>__fastcall</tt><a href="http://msdn2.microsoft.com/en-us/library/Aa271991" class="external autonumber" title="http://msdn2.microsoft.com/en-us/library/Aa271991" rel="nofollow">[3]</a> convention (aka <tt>__msfastcall</tt>) passes the first two arguments (evaluated left to right) that fit into ECX and EDX. Remaining arguments are pushed onto the stack from right to left.</li>
</ul>
<p><a name="Borland_fastcall" id="Borland_fastcall"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=X86_calling_conventions&amp;action=edit&amp;section=12" title="Edit section: Borland fastcall">edit</a>]</span> <span class="mw-headline">Borland fastcall</span></h4>
<p>Evaluating arguments from left to right, it passes three arguments via EAX, EDX, ECX. Remaining arguments are pushed onto the stack, also left to right.</p>
<p>It is the default calling convention of <a href="/wiki/Borland_Delphi" title="Borland Delphi" class="mw-redirect">Borland Delphi</a>, where it is known as <i>register</i>.</p>
<p><a name="Watcom_register_based_calling_convention" id="Watcom_register_based_calling_convention"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=X86_calling_conventions&amp;action=edit&amp;section=13" title="Edit section: Watcom register based calling convention">edit</a>]</span> <span class="mw-headline">Watcom register based calling convention</span></h4>
<p><a href="/wiki/Watcom" title="Watcom">Watcom</a> does not support the <i>__fastcall</i> keyword except to alias it to null. The register calling convention may be selected by command line switch. (However, <a href="/wiki/Interactive_Disassembler" title="Interactive Disassembler">IDA</a> uses <i>__fastcall</i> anyway for uniformity)</p>
<p>Up to 4 registers are assigned to arguments in the order eax, edx, ebx, ecx. Arguments are assigned to registers from left to right. If any argument cannot be assigned to a register (say it is too large) it, and all subsequent arguments, are assigned to the stack. Arguments assigned to the stack are pushed from right to left. Names are mangled by adding a suffixed underscore.</p>
<p>Variadic functions fall back to the Watcom stack based calling convention.</p>
<p>The Watcom C/C++ compiler also uses the <tt>#pragma aux</tt><a href="http://www.openwatcom.org/index.php/Calling_Conventions#Specifying_Calling_Conventions_the_Watcom_Way" class="external autonumber" title="http://www.openwatcom.org/index.php/Calling_Conventions#Specifying_Calling_Conventions_the_Watcom_Way" rel="nofollow">[4]</a> directive that allows the user to specify his own calling convention. As its manual states, "Very few users are likely to need this method, but if it is needed, it can be a lifesaver".</p>
<p><a name="TopSpeed_.2F_Clarion_.2F_JPI" id="TopSpeed_.2F_Clarion_.2F_JPI"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=X86_calling_conventions&amp;action=edit&amp;section=14" title="Edit section: TopSpeed / Clarion / JPI">edit</a>]</span> <span class="mw-headline">TopSpeed / Clarion / JPI</span></h4>
<p>The first four integer parameters are passed in registers eax, ebx, ecx and edx. Floating point parameters are passed on the floating point stack – registers st0, st1, st2, st3, st4, st5 and st6. Structure parameters are always passed on the stack. Additional parameters are passed on the stack after registers are exhausted. Integer values are returned in eax, pointers in edx and floating point types in st0.</p>
<p><a name="safecall" id="safecall"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=X86_calling_conventions&amp;action=edit&amp;section=15" title="Edit section: safecall">edit</a>]</span> <span class="mw-headline">safecall</span></h3>
<p>In <a href="/wiki/Borland_Delphi" title="Borland Delphi" class="mw-redirect">Borland Delphi</a> on <a href="/wiki/Microsoft_Windows" title="Microsoft Windows">Microsoft Windows</a>, the safecall calling convention encapsulates COM (<a href="/wiki/Component_Object_Model" title="Component Object Model">Component Object Model</a>) error handling, so that exceptions aren't leaked out to the caller, but are reported in the <a href="/wiki/HRESULT" title="HRESULT">HRESULT</a> return value, as required by COM/OLE. When calling a safecall function from Delphi code, Delphi also automatically checks the returned HRESULT and raises an exception if necessary. Together with language-level support for COM interfaces and automatic <a href="/wiki/IUnknown" title="IUnknown">IUnknown</a> handling (implicit AddRef/Release/QueryInterface calls), the safecall calling convention makes COM/OLE programming in Delphi easy and elegant.</p>
<p>The safecall calling convention is the same as the stdcall calling convention, except that exceptions are passed back to the caller in EAX as a HResult (instead of in FS:[0]), while the function result is passed by reference on the stack as though it were a final "out" parameter. When calling a Delphi function from Delphi this calling convention will appear just like any other calling convention, because although exceptions are passed back in EAX, they are automatically converted back to proper exceptions by the caller. When using COM objects created in other languages, the HResults will be automatically raised as exceptions, and the result for Get functions is in the result rather than a parameter. When creating COM objects in Delphi with safecall, there is no need to worry about HResults, as exceptions can be raised as normal but will be seen as HResults in other languages.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-pascal">
<span class="kw2">function</span> function_name<span class="br0">(</span>a: DWORD<span class="br0">)</span>: DWORD; safecall;
</pre></div>
<p>Returns a result and raises exceptions like a normal Delphi function, but it passes values and exceptions as though it was:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-pascal">
<span class="kw2">function</span> function_name<span class="br0">(</span>a: DWORD; out Result: DWORD<span class="br0">)</span>: HResult; <span class="kw1">stdcall</span>;
</pre></div>
<table class="metadata plainlinks ambox mbox-small-left ambox-notice" style="">
<tr>
<td class="mbox-image"><a href="/wiki/File:Wiki_letter_w.svg" class="image" title="Wiki letter w.svg"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/6/6c/Wiki_letter_w.svg/20px-Wiki_letter_w.svg.png" width="20" height="20" border="0" /></a></td>
<td class="mbox-text" style="">This section requires <a href="http://en.wikipedia.org/w/index.php?title=X86_calling_conventions&amp;action=edit" class="external text" title="http://en.wikipedia.org/w/index.php?title=X86_calling_conventions&amp;action=edit" rel="nofollow">expansion</a>.</td>
</tr>
</table>
<p><br /></p>
<p><a name="Either_caller_or_callee_clean-up" id="Either_caller_or_callee_clean-up"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=X86_calling_conventions&amp;action=edit&amp;section=16" title="Edit section: Either caller or callee clean-up">edit</a>]</span> <span class="mw-headline">Either caller or callee clean-up</span></h2>
<p><a name="thiscall" id="thiscall"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=X86_calling_conventions&amp;action=edit&amp;section=17" title="Edit section: thiscall">edit</a>]</span> <span class="mw-headline">thiscall</span></h3>
<p>This calling convention is used for calling C++ non-static member functions. There are two primary versions of <b>thiscall</b> used depending on the compiler and whether or not the function uses variable arguments.</p>
<p>For the GCC compiler, <b>thiscall</b> is almost identical to <b>cdecl</b>: the calling function cleans the stack, and the parameters are passed in right-to-left order. The difference is the addition of the <b>this</b> pointer, which is pushed onto the stack last, as if it were the first parameter in the function prototype.</p>
<p>On the Microsoft Visual C++ compiler, the <b>this</b> pointer is passed in ECX and it is the <i>callee</i> that cleans the stack, mirroring the <b>stdcall</b> convention used in C for this compiler and in Windows API functions. When functions use a variable number of arguments, it is the caller that cleans the stack (cf. <b>cdecl</b>).</p>
<p>The <b>thiscall</b> calling convention can only be explicitly specified on Microsoft Visual C++ 2005 and later. On any other compiler <i>thiscall</i> is not a keyword. (Disassemblers like <a href="/wiki/Interactive_Disassembler" title="Interactive Disassembler">IDA</a>, however, have to specify it anyway. So IDA uses keyword <i>__thiscall</i> for this)</p>
<p><a name="Intel_ABI" id="Intel_ABI"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=X86_calling_conventions&amp;action=edit&amp;section=18" title="Edit section: Intel ABI">edit</a>]</span> <span class="mw-headline">Intel ABI</span></h2>
<p>The <a href="/wiki/Intel" title="Intel" class="mw-redirect">Intel</a> <a href="/wiki/Application_Binary_Interface" title="Application Binary Interface" class="mw-redirect">Application Binary Interface</a> is a computer programming standard that most compilers and languages follow. According to the Intel ABI, the EAX, EDX, and ECX are to be free for use within a procedure or function, and need not be preserved.</p>
<p><a name="Microsoft_x64_calling_convention" id="Microsoft_x64_calling_convention"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=X86_calling_conventions&amp;action=edit&amp;section=19" title="Edit section: Microsoft x64 calling convention">edit</a>]</span> <span class="mw-headline">Microsoft x64 calling convention</span></h2>
<p>The x64 calling convention (for <a href="/wiki/Long_mode" title="Long mode">long mode</a> on <a href="/wiki/X86-64" title="X86-64">x86-64</a>) takes advantage of additional register space in the <a href="/wiki/AMD64" title="AMD64" class="mw-redirect">AMD64</a>/<a href="/wiki/Intel_64" title="Intel 64" class="mw-redirect">Intel 64</a> platform. The registers RCX, RDX, R8, R9 are used for integer and pointer arguments, and XMM0, XMM1, XMM2, XMM3 are used for floating point arguments. Additional arguments are pushed onto the stack. The return value is stored in RAX.</p>
<p>Note that when compiling for the x64 architecture using Microsoft tools, there is only one calling convention — the one described here, so that stdcall, thiscall, cdecl, fastcall, etc., are now all one and the same.</p>
<p>On x86, one could create thunks that convert any function call from stdcall to thiscall by placing the 'this' pointer in ECX and jumping to the member function address. In x64 a universal stdcall-to-thiscall thunk cannot be written, except for functions that take no arguments. Putting the implicit 'this' in place requires shifting all the arguments, whose number and sizes are unknown.</p>
<p>In the Microsoft x64 calling convention, it's the caller's responsibility to allocate 32 bytes of "shadow space" on the stack right before calling the function (regardless of the actual number of parameters used), and to pop the stack after the call. The shadow space is used to spill RCX, RDX, R8, and R9.</p>
<p>In <a href="/wiki/X86-64" title="X86-64">x86-64</a>, Visual Studio 2007 stores floating point numbers in XMM6 and XMM7 (as well as XMM8 through XMM15); consequently, for <a href="/wiki/X86-64" title="X86-64">x86-64</a>, user-written assembly language routines must preserve XMM6 and XMM7 (as compared to <a href="/wiki/X86" title="X86">x86</a> wherein user-written assembly language routines did not need to preserve XMM6 and XMM7). In other words, user-written assembly language routines must be updated to save/restore XMM6 and XMM7 before/after the function when being ported from <a href="/wiki/X86" title="X86">x86</a> to <a href="/wiki/X86-64" title="X86-64">x86-64</a>.</p>
<p><a name="AMD64_ABI_convention" id="AMD64_ABI_convention"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=X86_calling_conventions&amp;action=edit&amp;section=20" title="Edit section: AMD64 ABI convention">edit</a>]</span> <span class="mw-headline">AMD64 ABI convention</span></h2>
<p>The calling convention of the AMD64 <a href="/wiki/Application_binary_interface" title="Application binary interface">application binary interface</a> is followed on <a href="/wiki/Linux" title="Linux">Linux</a> and other non-<a href="/wiki/Microsoft" title="Microsoft">Microsoft</a> operating systems. The registers RDI, RSI, RDX, RCX, R8 and R9 are used for integer and pointer arguments while XMM0, XMM1, XMM2, XMM3, XMM4, XMM5, XMM6 and XMM7 are used for floating point arguments. As in the <a href="/wiki/Microsoft" title="Microsoft">Microsoft</a> x64 calling convention, additional arguments are pushed onto the stack and the return value is stored in RAX.</p>
<p><a name="Standard_exit_and_entry_sequences_for_C_code" id="Standard_exit_and_entry_sequences_for_C_code"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=X86_calling_conventions&amp;action=edit&amp;section=21" title="Edit section: Standard exit and entry sequences for C code">edit</a>]</span> <span class="mw-headline">Standard exit and entry sequences for C code</span></h2>
<p>The <b>Standard Entry Sequence</b> to a function is as follows:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-asm">
_function:
    <span class="kw1">push</span> <span class="kw3">ebp</span>       <span class="co1">;store the old base pointer</span>
    <span class="kw1">mov</span> <span class="kw3">ebp</span>, <span class="kw3">esp</span>   <span class="co1">;make the base pointer point to the current</span>
                   <span class="co1">;stack location – at the top of the stack is the </span>
                   <span class="co1">;old ebp, followed by the return address and then</span>
                   <span class="co1">;the parameters.</span>
    <span class="kw1">sub</span> <span class="kw3">esp</span>, x     <span class="co1">;x is the size, in bytes, of all</span>
                   <span class="co1">;"automatic variables" in the function</span>
</pre></div>
<p>This sequence preserves the original base pointer EBP; points EBP to the current stack pointer (which points at the old EBP, followed by the return address and then the function parameters); and then creates space for <a href="/wiki/Automatic_variable" title="Automatic variable">automatic variables</a> on the stack. <a href="/wiki/Local_variable" title="Local variable">Local variables</a> are created on the stack with each call to the function, and are cleaned up at the end of each function. This behaviour allows for functions to be called <a href="/wiki/Recursion_(computer_science)" title="Recursion (computer science)">recursively</a>. In C and C++, variables declared "automatic" are created in this way.</p>
<p>The <b>Standard Exit Sequence</b> goes as follows:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-asm">
<span class="kw1">mov</span> <span class="kw3">esp</span>, <span class="kw3">ebp</span>   <span class="co1">;reset the stack to "clean" away the local variables</span>
<span class="kw1">pop</span> <span class="kw3">ebp</span>        <span class="co1">;restore the original base pointer</span>
<span class="kw1">ret</span>            <span class="co1">;return from the function</span>
</pre></div>
<p><br />
Recovering the previous frame is an action so common that there's an opcode just to do that, called 'leave'. Thus, the exit sequence can also be written as follows:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-asm">
<span class="kw1">leave</span>          <span class="co1">;reset the stack and restore the original base pointer</span>
<span class="kw1">ret</span>            <span class="co1">;return from the function</span>
</pre></div>
<p>Note that while functions tend to have only one entry point, they may have multiple exit points, and thus may well have more than one standard exit sequence, or a jump to the standard exit sequence in the function body.</p>
<p><br />
The following C function:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">int</span> _cdecl MyFunction<span class="br0">(</span><span class="kw4">int</span> i<span class="br0">)</span><span class="br0">{</span> 
    <span class="kw4">int</span> k;
    <span class="kw1">return</span> i + k;
<span class="br0">}</span>
</pre></div>
<p>would produce the equivalent asm code:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-asm">
<span class="co1">;entry sequence</span>
<span class="kw1">push</span> <span class="kw3">ebp</span>
<span class="kw1">mov</span> <span class="kw3">ebp</span>, <span class="kw3">esp</span>
<span class="kw1">sub</span> <span class="kw3">esp</span>, <span class="nu0">4</span>     <span class="co1">;create function stack frame</span>
 
<span class="co1">;function code</span>
<span class="kw1">mov</span> <span class="kw3">eax</span>, <span class="br0">[</span><span class="kw3">ebp</span> + <span class="nu0">8</span><span class="br0">]</span> 
               <span class="co1">;move parameter i to accumulator</span>
<span class="kw1">add</span> <span class="kw3">eax</span>, <span class="br0">[</span><span class="kw3">ebp</span> - <span class="nu0">4</span><span class="br0">]</span>
               <span class="co1">;add k to i</span>
               <span class="co1">;result is returned in eax</span>
 
<span class="co1">;exit sequence</span>
<span class="kw1">mov</span> <span class="kw3">esp</span>, <span class="kw3">ebp</span>
<span class="kw1">pop</span> <span class="kw3">ebp</span>
<span class="kw1">ret</span>
</pre></div>
<p>Note that many compilers can optimize these standard sequences away when not needed (often called "no stackframe generation"). If you require them for e.g. interlanguage interfacing, you probably need to search your compiler manual for a compiler directive (or pragma) to turn this kind of optimization locally off.</p>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=X86_calling_conventions&amp;action=edit&amp;section=22" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<ul>
<li><a href="http://www.sco.com/developers/devspecs/abi386-4.pdf" class="external text" title="http://www.sco.com/developers/devspecs/abi386-4.pdf" rel="nofollow">System V Application Binary Interface Intel386 Architecture Processor Supplement</a></li>
<li><a href="http://www.codeproject.com/cpp/calling_conventions_demystified.asp" class="external text" title="http://www.codeproject.com/cpp/calling_conventions_demystified.asp" rel="nofollow">The Code Project—Calling Conventions Demystified</a></li>
<li><a href="http://www.unixwiz.net/techtips/win32-callconv-asm.html" class="external text" title="http://www.unixwiz.net/techtips/win32-callconv-asm.html" rel="nofollow">Intel x86 Function-call Conventions – Assembly View</a></li>
<li><a href="http://msdn.microsoft.com/en-us/library/9b372w95.aspx" class="external text" title="http://msdn.microsoft.com/en-us/library/9b372w95.aspx" rel="nofollow">Microsoft x64 Calling Convention</a></li>
<li><a href="http://www.angelcode.com/dev/callconv/callconv.html" class="external text" title="http://www.angelcode.com/dev/callconv/callconv.html" rel="nofollow">Calling Conventions</a></li>
<li><a href="http://www.agner.org/optimize/calling_conventions.pdf" class="external text" title="http://www.agner.org/optimize/calling_conventions.pdf" rel="nofollow">Calling Conventions on x86 by Agner Fog (pdf)</a></li>
<li><a href="http://www.x86-64.org/documentation/abi.pdf" class="external text" title="http://www.x86-64.org/documentation/abi.pdf" rel="nofollow">AMD64 ABI (pdf)</a></li>
<li>The Old New Thing — the history of calling conventions (by Raymond Chen) — <a href="http://blogs.msdn.com/oldnewthing/archive/2004/01/02/47184.aspx" class="external text" title="http://blogs.msdn.com/oldnewthing/archive/2004/01/02/47184.aspx" rel="nofollow">Part1</a>, <a href="http://blogs.msdn.com/oldnewthing/archive/2004/01/07/48303.aspx" class="external text" title="http://blogs.msdn.com/oldnewthing/archive/2004/01/07/48303.aspx" rel="nofollow">Part2</a>, <a href="http://blogs.msdn.com/oldnewthing/archive/2004/01/08/48616.aspx" class="external text" title="http://blogs.msdn.com/oldnewthing/archive/2004/01/08/48616.aspx" rel="nofollow">Part3</a>, <a href="http://blogs.msdn.com/oldnewthing/archive/2004/01/13/58199.aspx" class="external text" title="http://blogs.msdn.com/oldnewthing/archive/2004/01/13/58199.aspx" rel="nofollow">Part4(ia64)</a>, <a href="http://blogs.msdn.com/oldnewthing/archive/2004/01/14/58579.aspx" class="external text" title="http://blogs.msdn.com/oldnewthing/archive/2004/01/14/58579.aspx" rel="nofollow">Part5(amd64)</a></li>
</ul>


<!-- 
NewPP limit report
Preprocessor node count: 358/1000000
Post-expand include size: 5344/2048000 bytes
Template argument size: 1893/2048000 bytes
Expensive parser function count: 2/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:6817415-0!1!0!default!!en!2 and timestamp 20090429144445 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/X86_calling_conventions">http://en.wikipedia.org/wiki/X86_calling_conventions</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:X86_architecture" title="Category:X86 architecture">X86 architecture</a></span></div><div id="mw-hidden-catlinks" class="mw-hidden-cats-hidden">Hidden categories:&#32;<span dir='ltr'><a href="/wiki/Category:Articles_lacking_in-text_citations_from_February_2008" title="Category:Articles lacking in-text citations from February 2008">Articles lacking in-text citations from February 2008</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_to_be_expanded_since_June_2008" title="Category:Articles to be expanded since June 2008">Articles to be expanded since June 2008</a></span> | <span dir='ltr'><a href="/wiki/Category:All_articles_to_be_expanded" title="Category:All articles to be expanded">All articles to be expanded</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/X86_calling_conventions" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:X86_calling_conventions" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=X86_calling_conventions&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=X86_calling_conventions&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=X86_calling_conventions" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/X86_calling_conventions" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/X86_calling_conventions" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=X86_calling_conventions&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=X86_calling_conventions&amp;oldid=286037116" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=X86_calling_conventions&amp;id=286037116">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/Aufrufkonvention">Deutsch</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 25 April 2009, at 13:17 (UTC).</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv202 in 0.041 secs. --></body></html>
