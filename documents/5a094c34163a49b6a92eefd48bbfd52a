<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Prolog,Articles with unsourced statements since April 2009,Articles with unsourced statements since March 2009,Special:Search/Prolog,Abstract interpretation,Abstract syntax tree,Alain Colmerauer,Arity,Artificial intelligence,Automated theorem proving,BProlog" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Prolog&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Prolog&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Prolog - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Prolog";
		var wgTitle = "Prolog";
		var wgAction = "view";
		var wgArticleId = "23485";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281581040;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Prolog skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Prolog</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<div class="dablink">This article is about the programming language.  For the sense of an introduction, see <a href="/wiki/Prologue" title="Prologue">prologue</a>.  For other uses of "Prologue", see <a href="/wiki/Prologue_(disambiguation)" title="Prologue (disambiguation)">Prologue (disambiguation)</a>.  For the company, see <a href="/wiki/Cyan_Worlds" title="Cyan Worlds">Cyan Worlds</a>.</div>
<table class="infobox vevent" cellspacing="5" style="width: 22em; text-align: left; font-size: 88%; line-height: 1.5em;">
<caption class="summary" style="font-size: 125%; font-weight: bold;">Prolog</caption>
<tr>
<th style=""><a href="/wiki/Programming_paradigm" title="Programming paradigm">Paradigm</a></th>
<td class="" style=""><a href="/wiki/Logic_programming" title="Logic programming">Logic programming</a></td>
</tr>
<tr>
<th style="">Appeared in</th>
<td class="" style="">1972</td>
</tr>
<tr>
<th style="">Designed by</th>
<td class="organiser" style=""><a href="/wiki/Alain_Colmerauer" title="Alain Colmerauer">Alain Colmerauer</a></td>
</tr>
<tr>
<th style=""><a href="/wiki/Programming_language_implementation" title="Programming language implementation">Major implementations</a></th>
<td class="" style=""><a href="/wiki/BProlog" title="BProlog">BProlog</a>, <a href="/w/index.php?title=Ciao_Prolog&amp;action=edit&amp;redlink=1" class="new" title="Ciao Prolog (page does not exist)">Ciao Prolog</a>, <a href="/wiki/ECLiPSe" title="ECLiPSe">ECLiPSe</a>, <a href="/wiki/GNU_Prolog" title="GNU Prolog">GNU Prolog</a>, <a href="/wiki/P_Sharp" title="P Sharp">P#</a>, Quintus, <a href="/w/index.php?title=SICStus&amp;action=edit&amp;redlink=1" class="new" title="SICStus (page does not exist)">SICStus</a>, <a href="/wiki/Strawberry_Prolog" title="Strawberry Prolog">Strawberry</a>, <a href="/wiki/SWI-Prolog" title="SWI-Prolog">SWI-Prolog</a>, <a href="/wiki/TuProlog" title="TuProlog">tuProlog</a>, <a href="/wiki/YAP-Prolog" title="YAP-Prolog" class="mw-redirect">YAP-Prolog</a></td>
</tr>
<tr>
<th style=""><a href="/wiki/Programming_language_dialect" title="Programming language dialect" class="mw-redirect">Dialects</a></th>
<td class="" style="">ISO Prolog, Edinburgh Prolog</td>
</tr>
<tr>
<th style="">Influenced</th>
<td class="" style=""><a href="/wiki/Visual_Prolog" title="Visual Prolog">Visual Prolog</a>, <a href="/wiki/Mercury_programming_language" title="Mercury programming language" class="mw-redirect">Mercury</a>, <a href="/wiki/Oz_programming_language" title="Oz programming language" class="mw-redirect">Oz</a>, <a href="/wiki/Erlang_programming_language" title="Erlang programming language" class="mw-redirect">Erlang</a>, <a href="/wiki/Strand_(programming_language)" title="Strand (programming language)">Strand</a>, <a href="/wiki/KL0" title="KL0">KL0</a>, <a href="/wiki/KL1" title="KL1">KL1</a></td>
</tr>
</table>
<p><b>Prolog</b> is a <a href="/wiki/Logic_programming" title="Logic programming">logic programming</a> language. It is a general purpose language often associated with <a href="/wiki/Artificial_intelligence" title="Artificial intelligence">artificial intelligence</a> and <a href="/wiki/Computational_linguistics" title="Computational linguistics">computational linguistics</a>. It has a purely logical subset, called "pure Prolog", as well as a number of extralogical features.</p>
<p>Prolog has its roots in <a href="/wiki/Formal_logic" title="Formal logic" class="mw-redirect">formal logic</a>, and unlike many other programming languages, Prolog is <a href="/wiki/Declarative_programming" title="Declarative programming">declarative</a>: The program logic is expressed in terms of relations, and execution is triggered by running <i>queries</i> over these relations. Relations and queries are constructed using Prolog's single data type, the <i>term</i>. Relations are defined by <i>clauses</i>. Given a query, the Prolog engine attempts to find a <a href="/wiki/Resolution_(logic)" title="Resolution (logic)">resolution</a> <a href="/wiki/Refutation" title="Refutation" class="mw-redirect">refutation</a> of the negated query. If the negated query can be refuted, i.e., an instantiation for all free variables is found that makes the union of clauses and the singleton set consisting of the negated query false, it follows that the original query, with the found instantiation applied, is a logical consequence of the program. This makes Prolog (and other logic programming languages) particularly useful for database, symbolic mathematics, and language parsing applications. Because Prolog allows impure <a href="/wiki/Predicates" title="Predicates" class="mw-redirect">predicates</a>, checking the truth value of certain special predicates may have some deliberate side effect, such as printing a value to the screen. This permits the programmer to use some amount of conventional <a href="/wiki/Imperative_programming" title="Imperative programming">imperative programming</a> when the logical paradigm is inconvenient.</p>
<p>The language was first conceived by a group around <a href="/wiki/Alain_Colmerauer" title="Alain Colmerauer">Alain Colmerauer</a> in <a href="/wiki/Marseille" title="Marseille">Marseille</a>, <a href="/wiki/France" title="France">France</a>, in the early 1970s, while the first compiler was written by <a href="/wiki/David_H._D._Warren" title="David H. D. Warren">David H. D. Warren</a> in <a href="/wiki/Edinburgh" title="Edinburgh">Edinburgh</a>, <a href="/wiki/Scotland" title="Scotland">Scotland</a><sup class="noprint Template-Fact"><span title="This claim needs references to reliable sources&#160;since April 2009" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</span></sup>. Prolog was one of the first logic programming languages, and remains among the most popular such languages today, with many free and commercial implementations available. While initially aimed at <a href="/wiki/Natural_language_processing" title="Natural language processing">natural language processing</a>, the language has since then stretched far into other areas like <a href="/wiki/Automated_theorem_proving" title="Automated theorem proving">theorem proving</a>, <a href="/wiki/Expert_systems" title="Expert systems" class="mw-redirect">expert systems</a>, games, automated answering systems, <a href="/wiki/Ontology" title="Ontology">ontologies</a> and sophisticated <a href="/wiki/Control_system" title="Control system">control systems</a>, and modern Prolog environments support the creation of <a href="/wiki/Graphical_user_interface" title="Graphical user interface">graphical user interfaces</a>, as well as administrative and networked applications.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#History"><span class="tocnumber">1</span> <span class="toctext">History</span></a></li>
<li class="toclevel-1"><a href="#Data_types"><span class="tocnumber">2</span> <span class="toctext">Data types</span></a></li>
<li class="toclevel-1"><a href="#Programming_in_Prolog"><span class="tocnumber">3</span> <span class="toctext">Programming in Prolog</span></a></li>
<li class="toclevel-1"><a href="#Evaluation"><span class="tocnumber">4</span> <span class="toctext">Evaluation</span></a></li>
<li class="toclevel-1"><a href="#Loops_and_recursion"><span class="tocnumber">5</span> <span class="toctext">Loops and recursion</span></a></li>
<li class="toclevel-1"><a href="#Negation"><span class="tocnumber">6</span> <span class="toctext">Negation</span></a></li>
<li class="toclevel-1"><a href="#Operational_considerations"><span class="tocnumber">7</span> <span class="toctext">Operational considerations</span></a></li>
<li class="toclevel-1"><a href="#DCGs_and_parsing"><span class="tocnumber">8</span> <span class="toctext">DCGs and parsing</span></a>
<ul>
<li class="toclevel-2"><a href="#Parser_example"><span class="tocnumber">8.1</span> <span class="toctext">Parser example</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Higher-order_programming"><span class="tocnumber">9</span> <span class="toctext">Higher-order programming</span></a></li>
<li class="toclevel-1"><a href="#Meta-interpreters_and_reflection"><span class="tocnumber">10</span> <span class="toctext">Meta-interpreters and reflection</span></a></li>
<li class="toclevel-1"><a href="#Implementation_techniques"><span class="tocnumber">11</span> <span class="toctext">Implementation techniques</span></a></li>
<li class="toclevel-1"><a href="#Examples"><span class="tocnumber">12</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2"><a href="#QuickSort"><span class="tocnumber">12.1</span> <span class="toctext">QuickSort</span></a></li>
<li class="toclevel-2"><a href="#Turing_machine"><span class="tocnumber">12.2</span> <span class="toctext">Turing machine</span></a></li>
<li class="toclevel-2"><a href="#Dynamic_programming"><span class="tocnumber">12.3</span> <span class="toctext">Dynamic programming</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Extensions"><span class="tocnumber">13</span> <span class="toctext">Extensions</span></a></li>
<li class="toclevel-1"><a href="#Related_languages"><span class="tocnumber">14</span> <span class="toctext">Related languages</span></a></li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">15</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">16</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">17</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="History" id="History"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Prolog&amp;action=edit&amp;section=1" title="Edit section: History">edit</a>]</span> <span class="mw-headline">History</span></h2>
<p>The name <i>Prolog</i> was chosen by <a href="/w/index.php?title=Philippe_Roussel&amp;action=edit&amp;redlink=1" class="new" title="Philippe Roussel (page does not exist)">Philippe Roussel</a> as an abbreviation for <i><span lang="fr" xml:lang="fr">programmation en logique</span></i> (<a href="/wiki/French_language" title="French language">French</a> for <i>programming in <a href="/wiki/Logic" title="Logic">logic</a></i>). It was created around 1972 by <a href="/wiki/Alain_Colmerauer" title="Alain Colmerauer">Alain Colmerauer</a> with <a href="/w/index.php?title=Philippe_Roussel&amp;action=edit&amp;redlink=1" class="new" title="Philippe Roussel (page does not exist)">Philippe Roussel</a>, based on <a href="/wiki/Robert_Kowalski" title="Robert Kowalski">Robert Kowalski</a>'s procedural interpretation of <a href="/wiki/Horn_clause" title="Horn clause">Horn clauses</a>. It was motivated in part by the desire to reconcile the use of logic as a declarative knowledge representation language with the procedural representation of knowledge that was popular in North America in the late 1960s and early 1970s.</p>
<p>Much of the modern development of Prolog came from the impetus of the <a href="/wiki/Fifth_generation_computer_systems_project" title="Fifth generation computer systems project" class="mw-redirect">fifth generation computer systems project</a> (FGCS), which developed a variant of Prolog named <i><a href="/wiki/KL1" title="KL1">Kernel Language</a></i> for its first <a href="/wiki/Operating_system" title="Operating system">operating system</a>.</p>
<p>Pure Prolog was originally restricted to the use of a <a href="/wiki/Resolution_(logic)" title="Resolution (logic)">resolution</a> theorem prover with <a href="/wiki/Horn_clause" title="Horn clause">Horn clauses</a> of the form:</p>
<pre>
<tt>H :- B<sub>1</sub>, …, B<sub>n</sub>.</tt>.
</pre>
<p>The application of the theorem-prover treats such clauses as procedures:</p>
<pre>
to show/solve <tt>H</tt>, show/solve <tt>B<sub>1</sub></tt> and … and <tt>B<sub>n</sub></tt>.
</pre>
<p>Pure Prolog was soon extended, however, to include <a href="/wiki/Negation_as_failure" title="Negation as failure">negation as failure</a>, in which negative conditions of the form not(B<sub>i</sub>) are shown by trying and failing to solve the corresponding positive conditions B<sub>i</sub>.</p>
<p><a name="Data_types" id="Data_types"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Prolog&amp;action=edit&amp;section=2" title="Edit section: Data types">edit</a>]</span> <span class="mw-headline">Data types</span></h2>
<p>Prolog's single <a href="/wiki/Data_type" title="Data type">data type</a> is the <i>term</i>. Terms are either <i>atoms</i>, <i>numbers</i>, <i>variables</i> or <i>compound terms</i>.</p>
<p>An <b>atom</b> is a general-purpose name with no inherent meaning. It is composed of a sequence of characters that is parsed by the Prolog reader as a single unit. Atoms are usually bare words in Prolog code, written with no special syntax. However, atoms containing spaces or certain other special characters must be surrounded by single quotes. Atoms beginning with a capital letter must also be quoted, to distinguish them from variables. The empty list, written <code>[]</code>, is also an atom. Other examples of atoms include <code>x</code>, <code>blue</code>, <code>'Taco'</code>, and <code>'some atom'</code>.</p>
<p><b>Numbers</b> can be <a href="/wiki/Floating_point" title="Floating point">floats</a> or <a href="/wiki/Integer" title="Integer">integers</a>. Many Prolog implementations also provide unbounded integers and <a href="/wiki/Rational_number" title="Rational number">rational numbers</a>.</p>
<p><b>Variables</b> are denoted by a string consisting of letters, numbers and underscore characters, and beginning with an upper-case letter or underscore. Variables closely resemble variables in logic in that they are placeholders for arbitrary terms. A variable can become instantiated (bound to equal a specific term) via <a href="/wiki/Unification" title="Unification">unification</a>. A single underscore (<code>_</code>) denotes an anonymous variable and means "any term". Unlike other variables, the underscore does not represent the same value everywhere it occurs within a predicate definition.</p>
<p>A <b>compound term</b> is composed of an atom called a "functor" and a number of "arguments", which are again terms. Compound terms are ordinarily written as a functor followed by a comma-separated list of argument terms, which is contained in parentheses. The number of arguments is called the term's <a href="/wiki/Arity" title="Arity">arity</a>. An atom can be regarded as a compound term with <a href="/wiki/Arity" title="Arity">arity</a> zero.</p>
<p>Examples of compound terms are <code>truck_year('Mazda', 1986)</code> and <code>'Person_Friends'(zelda,[tom,jim])</code>. Compound terms with functors that are declared as operators can be written in prefix or infix notation. For example, the terms <code>-(z)</code>, <code>+(a,b)</code> and <code>=(X,Y)</code> can also be written as <code>-z</code>, <code>a+b</code> and <code>X=Y</code>, respectively. Users can declare arbitrary functors as operators with different precedences to allow for domain-specific notations. The notation <i>f/n</i> is commonly used to denote a term with functor <i>f</i> and arity <i>n</i>.</p>
<p>Special cases of compound terms:</p>
<ul>
<li><i>Lists</i> are defined inductively: The atom <code>[]</code> is a list. A compound term with functor <code>.</code> (dot) and arity 2, whose second argument is a list, is itself a list. There exists special syntax for denoting lists: <code>.(A, B)</code> is equivalent to <code>[A|B]</code>. For example, the list <code>.(1, .(2, .(3, [])))</code> can also be written as <code>[1 | [2 | [3 | []]]]</code>, or even more compactly as <code>[1,2,3]</code>.</li>
<li><i>Strings</i>: A sequence of characters surrounded by quotes is equivalent to a list of (numeric) character codes, generally in the local <a href="/wiki/Character_encoding" title="Character encoding">character encoding</a> or <a href="/wiki/Unicode" title="Unicode">Unicode</a> if the system supports Unicode.</li>
</ul>
<p><a name="Programming_in_Prolog" id="Programming_in_Prolog"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Prolog&amp;action=edit&amp;section=3" title="Edit section: Programming in Prolog">edit</a>]</span> <span class="mw-headline">Programming in Prolog</span></h2>
<p>Prolog programs describe relations, defined by means of clauses. Pure Prolog is restricted to <a href="/wiki/Horn_clauses" title="Horn clauses" class="mw-redirect">Horn clauses</a>, a <a href="/wiki/Turing_completeness" title="Turing completeness">Turing-complete</a> subset of first-order <a href="/wiki/Predicate_logic" title="Predicate logic">predicate logic</a>. There are two types of clauses: Facts and rules. A rule is of the form</p>
<pre>
Head :- Body.
</pre>
<p>and is read as "Head is true if Body is true". A rule's body consists of calls to predicates, which are called the rule's <b>goals</b>. The built-in <a href="/wiki/Predicate_(mathematics)" title="Predicate (mathematics)" class="mw-redirect">predicate</a> <code>,/2</code> (meaning a 2-arity operator with name <code>,</code>) denotes <a href="/wiki/Logical_conjunction" title="Logical conjunction">conjunction</a> of goals, and <code>;/2</code> denotes <a href="/wiki/Logical_disjunction" title="Logical disjunction">disjunction</a>. Conjunctions and disjunctions can only appear in the body, not in the head of a rule.</p>
<p>Clauses with empty bodies are called <b>facts</b>. An example of a fact is:</p>
<pre>
cat(tom).
</pre>
<p>which is equivalent to the rule:</p>
<pre>
cat(tom) :- true.
</pre>
<p>The built-in predicate <code>true/0</code> is always true.</p>
<p>Given above fact, one can ask:</p>
<p><i>is tom a cat?</i></p>
<pre>
?- cat(tom).  
Yes
</pre>
<p><i>what things are cats?</i></p>
<pre>
?- cat(X).  
X = tom
</pre>
<p>Due to the relational nature of many built-in predicates, they can typically be used in several directions. For example, <code>length/2</code> can be used to determine the length of a list (<tt>length(List, L)</tt>, given a list <tt>List</tt>) as well as to generate a list skeleton of a given length (<tt>length(X, 5)</tt>), and also to generate both list skeletons and their lengths together (<tt>length(X, L)</tt>). Similarly, <code>append/3</code> can be used both to append two lists (<tt>append(ListA, ListB, X)</tt> given lists <tt>ListA</tt> and <tt>ListB</tt>) as well as to split a given list into parts (<tt>append(X, Y, List)</tt>, given a list <tt>List</tt>). For this reason, a comparatively small set of library predicates suffices for many Prolog programs. All predicates can also be used to perform <a href="/wiki/Unit_tests" title="Unit tests" class="mw-redirect">unit tests</a>: Queries can be embedded in programs and allow for automatic compile-time regression testing.</p>
<p>As a general purpose language, Prolog also provides various built-in predicates to perform routine activities like <a href="/wiki/Input/output" title="Input/output">input/output</a>, using graphics and otherwise communicating with the operating system. These predicates are not given a relational meaning and are only useful for the side-effects they exhibit on the system. For example, the predicate <tt>write/1</tt> displays a term on the screen.</p>
<p><a name="Evaluation" id="Evaluation"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Prolog&amp;action=edit&amp;section=4" title="Edit section: Evaluation">edit</a>]</span> <span class="mw-headline">Evaluation</span></h2>
<p>Execution of a Prolog program is initiated by the user's posting of a single goal, called the query. Logically, the Prolog engine tries to find a <a href="/wiki/Resolution_(logic)" title="Resolution (logic)">resolution</a> refutation of the negated query. The resolution method used by Prolog is called <a href="/wiki/SLD_resolution" title="SLD resolution">SLD resolution</a>. If the negated query can be refuted, it follows that the query, with the appropriate variable bindings in place, is a logical consequence of the program. In that case, all generated variable bindings are reported to the user, and the query is said to have succeeded. Operationally, Prolog's execution strategy can be thought of as a generalization of function calls in other languages, one difference being that multiple clause heads can match a given call. In that case, the system creates a choice-point, unifies the goal with the clause head of the first alternative, and continues with the goals of that first alternative. If any goal fails in the course of executing the program, all variable bindings that were made since the most recent choice-point was created are undone, and execution continues with the next alternative of that choice-point. This execution strategy is called chronological <a href="/wiki/Backtracking" title="Backtracking">backtracking</a>. For example:</p>
<pre>
sibling(X, Y)      :- parent_child(Z, X), parent_child(Z, Y).

parent_child(X, Y) :- father_child(X, Y).
parent_child(X, Y) :- mother_child(X, Y).

mother_child(trude, sally).

father_child(tom, sally).
father_child(tom, erica).
father_child(mike, tom).
</pre>
<p>This results in the following query being evaluated as true:</p>
<pre>
?- sibling(sally, erica).
Yes
</pre>
<p>This is obtained as follows: Initially, the only matching clause-head for the query sibling(sally, erica) is the first one, so proving the query is equivalent to proving the body of that clause with the appropriate variable bindings in place, i.e., the conjunction (parent_child(Z,sally), parent_child(Z,erica)). The next goal to be proved is the leftmost one of this conjunction, i.e., parent_child(Z, sally). Two clause heads match this goal. The system creates a choice-point and tries the first alternative, whose body is father_child(Z, sally). This goal can be proved using the fact father_child(tom, sally), so the binding Z = tom is generated, and the next goal to be proved is the second part of the above conjunction: parent_child(tom, erica). Again, this can be proved by the corresponding fact. Since all goals could be proved, the query succeeds. Since the query contained no variables, no bindings are reported to the user. A query with variables, like:</p>
<pre>
?- father_child(Father, Child).
</pre>
<p>enumerates all valid answers on backtracking.</p>
<p>Notice that with the code as stated above, the query "?- sibling(sally, sally)." also succeeds. One would insert additional goals to describe the relevant restrictions, if desired.</p>
<p><a name="Loops_and_recursion" id="Loops_and_recursion"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Prolog&amp;action=edit&amp;section=5" title="Edit section: Loops and recursion">edit</a>]</span> <span class="mw-headline">Loops and recursion</span></h2>
<p>Iterative algorithms can be implemented by means of recursive predicates. Prolog systems typically implement a well-known optimization technique called tail call optimization (TCO) for deterministic predicates exhibiting <a href="/wiki/Tail_recursion" title="Tail recursion">tail recursion</a> or, more generally, tail calls: A clause's stack frame is discarded before performing a call in a tail position. Therefore, deterministic tail-recursive predicates are executed with constant stack space, like loops in other languages.</p>
<p><a name="Negation" id="Negation"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Prolog&amp;action=edit&amp;section=6" title="Edit section: Negation">edit</a>]</span> <span class="mw-headline">Negation</span></h2>
<p>The built-in Prolog predicate \+/1 provides <a href="/wiki/Negation_as_failure" title="Negation as failure">negation as failure</a>, which allows for <a href="/wiki/Non-monotonic_logic" title="Non-monotonic logic">non-monotonic</a> reasoning. The goal "\+ illegal(X)" in the rule</p>
<pre>
legal(X) :- \+ illegal(X).
</pre>
<p>is evaluated as follows: Prolog attempts to prove illegal(X). If a proof for that goal can be found, the original goal (i.e., \+ illegal(X)) fails. If no proof can be found, the original goal succeeds. Therefore, the \+/1 prefix operator is called the "not provable" operator, since the query "?- \+ Goal" succeeds if Goal is not provable. This kind of negation is sound if its argument is ground. Soundness is lost if the argument contains variables. In particular, the query "?- legal(X)." can now not be used to enumerate all things that are legal.</p>
<p><a name="Operational_considerations" id="Operational_considerations"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Prolog&amp;action=edit&amp;section=7" title="Edit section: Operational considerations">edit</a>]</span> <span class="mw-headline">Operational considerations</span></h2>
<p>Under a declarative reading, the order of rules, and of goals within rules, is irrelevant since logical disjunction and conjunction are commutative. Procedurally, however, it is often important to take into account Prolog's execution strategy, either for efficiency reasons, or due to the semantics of impure built-in predicates for which the order of evaluation matters.</p>
<p><a name="DCGs_and_parsing" id="DCGs_and_parsing"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Prolog&amp;action=edit&amp;section=8" title="Edit section: DCGs and parsing">edit</a>]</span> <span class="mw-headline">DCGs and parsing</span></h2>
<p>There is a special notation called definite clause grammars (<a href="/wiki/Definite_clause_grammar" title="Definite clause grammar">DCGs</a>). A rule defined via --&gt;/2 instead of&#160;:-/2 is expanded by the preprocessor (expand_term/2, a facility analogous to macros in other languages) according to a few straight-forward rewriting rules, resulting in ordinary Prolog clauses. Most notably, the rewriting equips the predicate with two additional arguments, which can be used to implicitly thread state around, analogous to <a href="/wiki/Monads_in_functional_programming" title="Monads in functional programming" class="mw-redirect">monads</a> in other languages. DCGs are often used to write parsers or list generators, as they also provide a convenient interface to list differences.</p>
<p><a name="Parser_example" id="Parser_example"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Prolog&amp;action=edit&amp;section=9" title="Edit section: Parser example">edit</a>]</span> <span class="mw-headline">Parser example</span></h3>
<p>A larger example will show the potential of using Prolog in <a href="/wiki/Parsing" title="Parsing">parsing</a>.</p>
<p>Given the sentence expressed in <a href="/wiki/Backus-Naur_Form" title="Backus-Naur Form" class="mw-redirect">Backus-Naur Form</a>:</p>
<pre>
&lt;sentence&gt;    ::=  &lt;stat_part&gt;
&lt;stat_part&gt;   ::=  &lt;statement&gt; | &lt;stat_part&gt; &lt;statement&gt;
&lt;statement&gt;   ::=  &lt;id&gt; = &lt;expression&gt; ;
&lt;expression&gt;  ::=  &lt;operand&gt; | &lt;expression&gt; &lt;operator&gt; &lt;operand&gt;
&lt;operand&gt;     ::=  &lt;id&gt; | &lt;digit&gt;
&lt;id&gt;          ::=  a | b
&lt;digit&gt;       ::=  0..9
&lt;operator&gt;    ::=  + | - | *
</pre>
<p>This can be written in Prolog using DCGs, corresponding to a predictive parser with one token look-ahead:</p>
<pre>
sentence(S)                --&gt; statement(S0), sentence_r(S0, S).
sentence_r(S, S)           --&gt; [].
sentence_r(S0, seq(S0, S)) --&gt; statement(S1), sentence_r(S1, S).

statement(assign(Id,E)) --&gt; id(Id), [=], expression(E), [;].

expression(E) --&gt; term(T), expression_r(T, E).
expression_r(E, E)  --&gt; [].
expression_r(E0, E) --&gt; [+], term(T), expression_r(plus(E0,T), E).
expression_r(E0, E) --&gt; [-], term(T), expression_r(minus(E0, T), E).

term(T)       --&gt; factor(F), term_r(F, T).
term_r(T, T)  --&gt; [].
term_r(T0, T) --&gt; [*], factor(F), term_r(times(T0, F), T).

factor(id(ID))   --&gt; id(ID).
factor(digit(D)) --&gt; [D], { (number(D) ; var(D)), between(0, 9, D)}.

id(a) --&gt; [a].
id(b) --&gt; [b].
</pre>
<p>This code defines a relation between a sentence (given as a list of tokens) and its <a href="/wiki/Abstract_syntax_tree" title="Abstract syntax tree">abstract syntax tree</a> (AST). Example query:</p>
<pre>
?- phrase(sentence(AST), [a,=,1,+,3,*,b,;,b,=,0,;]).
AST = seq(assign(a, plus(digit(1), times(digit(3), id(b)))), assign(b, digit(0))) ;
</pre>
<p>The AST is represented using Prolog terms and can be used to apply optimizations, to compile such expressions to machine-code, or to directly interpret such statements. As is typical for the relational nature of predicates, these definitions can be used both to parse and generate sentences, and also to check whether a given tree corresponds to a given list of tokens. Using iterative deepening for fair enumeration, each arbitrary but fixed sentence and its corresponding AST will be generated eventually:</p>
<pre>
?- length(Tokens, _), phrase(sentence(AST), Tokens).
 Tokens = [a, =, a, (;)], AST = assign(a, id(a)) ;
 Tokens = [a, =, b, (;)], AST = assign(a, id(b)) 
 etc.
</pre>
<p><a name="Higher-order_programming" id="Higher-order_programming"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Prolog&amp;action=edit&amp;section=10" title="Edit section: Higher-order programming">edit</a>]</span> <span class="mw-headline">Higher-order programming</span></h2>
<p>Since arbitrary Prolog goals can be constructed and evaluated at run-time, it is easy to write higher-order predicates like maplist/2, which applies an arbitrary predicate to each member of a given list, and sublist/3, which filters elements that satisfy a given predicate, also allowing for <a href="/wiki/Currying" title="Currying">currying</a>.</p>
<p>To convert solutions from temporal representation (answer substitutions on backtracking) to spatial representation (terms), Prolog has various all-solutions predicates that collect all answer substitutions of a given query in a list. This can be used for <a href="/wiki/List_comprehension" title="List comprehension">list comprehension</a>. For example, <a href="/wiki/Perfect_numbers" title="Perfect numbers" class="mw-redirect">perfect numbers</a> equal the sum of their proper divisors:</p>
<pre>
perfect(N) :-
    between(1, inf, N), U is N // 2,
    findall(D, (between(1,U,D), N mod D =:= 0), Ds),
    sumlist(Ds, N).
</pre>
<p>This can be used to enumerate perfect numbers, and also to check whether a number is perfect.</p>
<p><a name="Meta-interpreters_and_reflection" id="Meta-interpreters_and_reflection"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Prolog&amp;action=edit&amp;section=11" title="Edit section: Meta-interpreters and reflection">edit</a>]</span> <span class="mw-headline">Meta-interpreters and reflection</span></h2>
<p>Prolog is a <a href="/wiki/Homoiconic" title="Homoiconic" class="mw-redirect">homoiconic</a> language and provides many facilities for <a href="/wiki/Reflection_(computer_science)" title="Reflection (computer science)">reflection</a>. Its implicit execution strategy makes it possible to write a concise <a href="/wiki/Meta-circular_evaluator" title="Meta-circular evaluator">meta-circular evaluator</a> (also called <i>meta-interpreter</i>) for pure Prolog code. Since Prolog programs are themselves sequences of Prolog terms (:-/2 is an infix operator) that are easily read and inspected using built-in mechanisms (like read/1), it is easy to write customized interpreters that augment Prolog with domain-specific features.</p>
<p><a name="Implementation_techniques" id="Implementation_techniques"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Prolog&amp;action=edit&amp;section=12" title="Edit section: Implementation techniques">edit</a>]</span> <span class="mw-headline">Implementation techniques</span></h2>
<p>For efficiency, Prolog code is typically compiled to abstract machine code, often influenced by the register-based <a href="/wiki/Warren_Abstract_Machine" title="Warren Abstract Machine" class="mw-redirect">Warren Abstract Machine</a> (WAM) instruction set. Some implementations employ <a href="/wiki/Abstract_interpretation" title="Abstract interpretation">abstract interpretation</a> to derive type and mode information of predicates at compile time, or compile to real machine code for high performance. Devising efficient implementation techniques for Prolog code is a field of active research in the logic programming community, and various other execution techniques are employed in some implementations. These include <a href="/w/index.php?title=Clause_binarization&amp;action=edit&amp;redlink=1" class="new" title="Clause binarization (page does not exist)">clause binarization</a> and stack-based virtual machines.</p>
<p>Some Prolog systems, like <a href="/wiki/BProlog" title="BProlog">BProlog</a> and <a href="/wiki/XSB" title="XSB">XSB</a>, implement an extension called <i>tabling</i><sup class="noprint Template-Fact"><span title="This claim needs references to reliable sources&#160;since March 2009" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</span></sup>, which frees the user from manually storing intermediate results.</p>
<p><a name="Examples" id="Examples"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Prolog&amp;action=edit&amp;section=13" title="Edit section: Examples">edit</a>]</span> <span class="mw-headline">Examples</span></h2>
<p>Here follow some example programs written in Prolog.</p>
<p><a name="QuickSort" id="QuickSort"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Prolog&amp;action=edit&amp;section=14" title="Edit section: QuickSort">edit</a>]</span> <span class="mw-headline">QuickSort</span></h3>
<p>The <a href="/wiki/QuickSort" title="QuickSort" class="mw-redirect">QuickSort sorting algorithm</a>, relating a list to its sorted version:</p>
<pre>
partition([], _, [], []).
partition([X|Xs], Pivot, Smalls, Bigs) :-
    (   X @&lt; Pivot -&gt;
        Smalls = [X|Rest],
        partition(Xs, Pivot, Rest, Bigs)
    ;   Bigs = [X|Rest],
        partition(Xs, Pivot, Smalls, Rest)
    ).

quicksort([])     --&gt; [].
quicksort([X|Xs]) --&gt; 
    { partition(Xs, X, Smaller, Bigger) },
    quicksort(Smaller), [X], quicksort(Bigger).
</pre>
<p><a name="Turing_machine" id="Turing_machine"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Prolog&amp;action=edit&amp;section=15" title="Edit section: Turing machine">edit</a>]</span> <span class="mw-headline">Turing machine</span></h3>
<p><a href="/wiki/Turing_completeness" title="Turing completeness">Turing completeness</a> of Prolog can be shown by using it to simulate a Turing machine:</p>
<pre>
turing(Tape0, Tape) :-
    perform(q0, [], Ls, Tape0, Rs),
    reverse(Ls, Ls1),
    append(Ls1, Rs, Tape).

perform(qf, Ls, Ls, Rs, Rs) :- !.
perform(Q0, Ls0, Ls, Rs0, Rs) :-
    symbol(Rs0, Sym, RsRest),
    once(rule(Q0, Sym, Q1, NewSym, Action)),
    action(Action, Ls0, Ls1, [NewSym|RsRest], Rs1),
    perform(Q1, Ls1, Ls, Rs1, Rs).

symbol([], b, []).
symbol([Sym|Rs], Sym, Rs).

action(left, Ls0, Ls, Rs0, Rs) :- left(Ls0, Ls, Rs0, Rs).
action(stay, Ls, Ls, Rs, Rs).
action(right, Ls0, [Sym|Ls0], [Sym|Rs], Rs).

left([], [], Rs0, [b|Rs0]).
left([L|Ls], Ls, Rs, [L|Rs]).
</pre>
<p>A simple example Turing machine is specified by the facts:</p>
<pre>
rule(q0, 1, q0, 1, right).
rule(q0, b, qf, 1, stay).
</pre>
<p>This machine performs incrementation by one of a number in unary encoding: It loops over any number of "1" cells and appends an additional "1" at the end. Example query and result:</p>
<pre>
?- turing([1,1,1], Ts).
Ts = [1, 1, 1, 1] ;
</pre>
<p>This example illustrates how any computation can be expressed declaratively as a sequence of state transitions, implemented in Prolog as a relation between successive states of interest. As another example for this, an optimizing compiler with three optimization passes could be implemented as a relation between an initial program and its optimized form:</p>
<pre>
program_optimized(Prog0, Prog) :-
    optimization_pass_1(Prog0, Prog1),
    optimization_pass_2(Prog1, Prog2),
    optimization_pass_3(Prog2, Prog).
</pre>
<p>or equivalently using DCG notation:</p>
<pre>
program_optimized --&gt; optimization_pass_1, optimization_pass_2, optimization_pass_3.
</pre>
<p><a name="Dynamic_programming" id="Dynamic_programming"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Prolog&amp;action=edit&amp;section=16" title="Edit section: Dynamic programming">edit</a>]</span> <span class="mw-headline">Dynamic programming</span></h3>
<p>The following Prolog program uses <a href="/wiki/Dynamic_programming" title="Dynamic programming">dynamic programming</a> to find the <a href="/wiki/Longest_common_subsequence" title="Longest common subsequence" class="mw-redirect">longest common subsequence</a> of two lists in polynomial time. The clause database is used for <a href="/wiki/Memoization" title="Memoization">memoization</a>:</p>
<pre>
:- dynamic(stored/1).

memo(Goal) :- ( stored(Goal) -&gt; true ; Goal, assertz(stored(Goal)) ).

lcs([], _, []) :- !.
lcs(_, [], []) :- !.
lcs([X|Xs], [X|Ys], [X|Ls]) :- !, memo(lcs(Xs, Ys, Ls)).
lcs([X|Xs], [Y|Ys], Ls) :-
    memo(lcs([X|Xs], Ys, Ls1)), memo(lcs(Xs, [Y|Ys], Ls2)),
    length(Ls1, L1), length(Ls2, L2),
    (   L1 &gt;= L2 -&gt; Ls = Ls1 ; Ls = Ls2 ).
</pre>
<p>Example query:</p>
<pre>
?- lcs([x,m,j,y,a,u,z], [m,z,j,a,w,x,u], Ls).
Ls = [m, j, a, u]
</pre>
<p><a name="Extensions" id="Extensions"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Prolog&amp;action=edit&amp;section=17" title="Edit section: Extensions">edit</a>]</span> <span class="mw-headline">Extensions</span></h2>
<p>Various implementations have been developed from Prolog to extend logic programming capabilities in numerous directions. These include <a href="/wiki/Constraint_logic_programming" title="Constraint logic programming">constraint logic programming</a> (CLP), object-oriented logic programming (OOLP), concurrency, <a href="/wiki/Linear_Logic" title="Linear Logic" class="mw-redirect">Linear Logic</a> (LLP), functional and <a href="/wiki/Higher-order_logic" title="Higher-order logic">higher-order logic</a> programming capabilities, plus interoperability with knowledge bases:</p>
<ul>
<li><a href="/wiki/Constraint_logic_programming" title="Constraint logic programming">Constraint logic programming</a> is important for many Prolog applications in industrial settings, like time tabling and other scheduling tasks. Most Prolog systems ship with at least one constraint solver for finite domains, and often also with solvers for other domains like rational numbers.</li>
<li><a href="/w/index.php?title=HiLog&amp;action=edit&amp;redlink=1" class="new" title="HiLog (page does not exist)">HiLog</a> and <a href="/wiki/%CE%9BProlog" title="ΛProlog">λProlog</a> extend Prolog with <a href="/wiki/Higher-order_programming" title="Higher-order programming" class="mw-redirect">higher-order programming</a> features.</li>
<li><a href="/wiki/F-logic" title="F-logic">F-logic</a> extends Prolog with frames/objects for <a href="/wiki/Knowledge_representation" title="Knowledge representation">knowledge representation</a>.</li>
<li><a href="/wiki/OW_Prolog" title="OW Prolog">OW Prolog</a> has been created in order to answer Prolog's lack of graphics and interface.</li>
<li><a href="/wiki/Logtalk" title="Logtalk">Logtalk</a> is an open source object-oriented extension to the Prolog programming language. Integrating logic programming with object-oriented and event-driven programming, it is compatible with most Prolog compilers. It supports both prototypes and classes. In addition, it supports component-based programming through category-based composition.</li>
<li><a href="http://apps.lumii.lv/prolog-mpi/" class="external text" title="http://apps.lumii.lv/prolog-mpi/" rel="nofollow">Prolog-MPI</a> is an open-source <a href="/wiki/SWI-Prolog" title="SWI-Prolog">SWI-Prolog</a> extension for distributed computing over the <a href="/wiki/Message_Passing_Interface" title="Message Passing Interface">Message Passing Interface</a>.</li>
<li><a href="/wiki/Oblog" title="Oblog">Oblog</a> is a small, portable, Object-oriented extension to Prolog by Margaret McDougall of EdCAAD, University of Edinburgh.</li>
<li>The <a href="/wiki/Godel_programming_language" title="Godel programming language" class="mw-redirect">Godel programming language</a> is a strongly-typed implementation of <a href="/wiki/Concurrent_constraint_logic_programming" title="Concurrent constraint logic programming">Concurrent constraint logic programming</a>. <a href="http://www.cs.bris.ac.uk/~bowers/goedel.html" class="external text" title="http://www.cs.bris.ac.uk/~bowers/goedel.html" rel="nofollow"><b>Gödel</b></a> is built on <a href="http://www.sics.se/sicstus.html" class="external text" title="http://www.sics.se/sicstus.html" rel="nofollow">SICStus Prolog</a>.</li>
</ul>
<p><a name="Related_languages" id="Related_languages"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Prolog&amp;action=edit&amp;section=18" title="Edit section: Related languages">edit</a>]</span> <span class="mw-headline">Related languages</span></h2>
<ul>
<li><a href="/wiki/Visual_Prolog" title="Visual Prolog">Visual Prolog</a>, also formerly known as <b>PDC Prolog</b> and Turbo Prolog. Visual Prolog is a <a href="/wiki/Data_type" title="Data type">strongly typed</a> <a href="/wiki/Object-oriented_(programming)" title="Object-oriented (programming)" class="mw-redirect">object-oriented</a> dialect of Prolog, which is considerably different from standard Prolog. As Turbo Prolog it was marketed by Borland, but it is now developed and marketed by the Danish firm PDC (Prolog Development Center) that originally produced it.</li>
<li><a href="/wiki/Datalog" title="Datalog">Datalog</a> is actually a subset of Prolog. It is limited to relationships that may be stratified and does not allow compound terms. In contrast to Prolog, Datalog is not Turing-complete.</li>
<li>In some ways Prolog is a subset of <a href="/wiki/Planner_programming_language" title="Planner programming language" class="mw-redirect">Planner</a>. The ideas in Planner were later further developed in the <a href="/wiki/Scientific_Community_Metaphor" title="Scientific Community Metaphor" class="mw-redirect">Scientific Community Metaphor</a>.</li>
</ul>
<p>Frameworks also exist which can provide a bridge between Prolog and the <a href="/wiki/Java_programming_language" title="Java programming language" class="mw-redirect">Java programming language</a>:</p>
<ul>
<li>JPL is a bi-directional Java Prolog bridge which ships with SWI-Prolog by default, allowing Java and Prolog to call each other respectively. It is known to have good concurrency support and is under active development.</li>
<li><a href="http://www.declarativa.com/interprolog/" class="external text" title="http://www.declarativa.com/interprolog/" rel="nofollow">InterProlog</a>, a programming library bridge between <a href="/wiki/Java_platform" title="Java platform" class="mw-redirect">Java</a> and Prolog, implementing bi-directional predicate/method calling between both languages. Java objects can be mapped into Prolog terms and vice-versa. Allows the development of <a href="/wiki/Graphical_user_interface" title="Graphical user interface">GUIs</a> and other functionality in Java while leaving logic processing in the Prolog layer. Supports <a href="/wiki/XSB" title="XSB">XSB</a>, <a href="/wiki/SWI-Prolog" title="SWI-Prolog">SWI-Prolog</a> and YAP.</li>
<li><a href="/wiki/Prova" title="Prova">Prova</a> provides native syntax integration with Java, agent messaging and reaction rules. Prova positions itself as a rule-based scripting (RBS) system for middleware. The language breaks new ground in combining <a href="/wiki/Imperative_programming" title="Imperative programming">imperative</a> and <a href="/wiki/Declarative_programming" title="Declarative programming">declarative programming</a>.</li>
</ul>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Prolog&amp;action=edit&amp;section=19" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<ul>
<li><a href="/wiki/Comparison_of_Prolog_implementations" title="Comparison of Prolog implementations">Comparison of Prolog implementations</a></li>
<li><a href="/wiki/Prolog_standards_compliance" title="Prolog standards compliance" class="mw-redirect">Prolog standards compliance</a></li>
</ul>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Prolog&amp;action=edit&amp;section=20" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<div class="references-small" style="margin-left:1.5em;-moz-column-count:2; -webkit-column-count:2; column-count:2;">
<ul>
<li>William F. Clocksin, Christopher S. Mellish: <i>Programming in Prolog: Using the ISO Standard</i>. Springer, 5th ed., 2003, <a href="/wiki/Special:BookSources/9783540006787" class="internal">ISBN 978-3540006787</a>. <i>(This edition is updated for ISO Prolog. Previous editions described Edinburgh Prolog.)</i></li>
<li>William F. Clocksin: <i>Clause and Effect. Prolog Programming for the Working Programmer</i>. Springer, 2003, <a href="/wiki/Special:BookSources/9783540629719" class="internal">ISBN 978-3540629719</a>.</li>
<li><a href="/wiki/Michael_A._Covington" title="Michael A. Covington" class="mw-redirect">Michael A. Covington</a>, Donald Nute, Andre Vellino, <i>Prolog Programming in Depth</i>, 1996, <a href="/wiki/Special:BookSources/013138645X" class="internal">ISBN 0-13-138645-X</a>.</li>
<li>Michael A. Covington, <i>Natural Language Processing for Prolog Programmers</i>, 1994, <a href="/wiki/Special:BookSources/0136292135" class="internal">ISBN 0-13-629213-5</a>.</li>
<li><a href="/wiki/Leon_Sterling" title="Leon Sterling">Leon Sterling</a> and <a href="/wiki/Ehud_Shapiro" title="Ehud Shapiro">Ehud Shapiro</a>, <i>The Art of Prolog: Advanced Programming Techniques</i>, 1994, <a href="/wiki/Special:BookSources/0262193388" class="internal">ISBN 0-262-19338-8</a>.</li>
<li><a href="/wiki/Ivan_Bratko" title="Ivan Bratko">Ivan Bratko</a>, <i>PROLOG Programming for Artificial Intelligence</i>, 2000, <a href="/wiki/Special:BookSources/0201403757" class="internal">ISBN 0-201-40375-7</a>.</li>
<li>Robert Kowalski, <a href="http://www.doc.ic.ac.uk/~rak/papers/the%20early%20years.pdf" class="external text" title="http://www.doc.ic.ac.uk/~rak/papers/the%20early%20years.pdf" rel="nofollow"><i>The Early Years of Logic Programming</i></a>, CACM January 1988.</li>
<li><i>ISO/IEC 13211: Information technology — Programming languages — Prolog</i>. <a href="/wiki/International_Organization_for_Standardization" title="International Organization for Standardization">International Organization for Standardization</a>, Geneva.</li>
<li>Alain Colmerauer and Philippe Roussel, <a href="http://www.lim.univ-mrs.fr/~colmer/ArchivesPublications/HistoireProlog/19november92.pdf" class="external text" title="http://www.lim.univ-mrs.fr/~colmer/ArchivesPublications/HistoireProlog/19november92.pdf" rel="nofollow"><i>The birth of Prolog</i></a>, in <i>The second ACM SIGPLAN conference on History of programming languages</i>, p. 37-52, 1992.</li>
<li><a href="/wiki/Richard_O%27Keefe" title="Richard O'Keefe">Richard O'Keefe</a>, <i>The Craft of Prolog</i>, <a href="/wiki/Special:BookSources/0262150395" class="internal">ISBN 0-262-15039-5</a>.</li>
<li>Patrick Blackburn, Johan Bos, Kristina Striegnitz, <i>Learn Prolog Now!</i>, 2006, <a href="/wiki/Special:BookSources/1904987176" class="internal">ISBN 1-904987-17-6</a>.</li>
</ul>
</div>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Prolog&amp;action=edit&amp;section=21" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<table class="metadata plainlinks mbox-small" style="border:1px solid #aaa; background-color:#f9f9f9;">
<tr>
<td class="mbox-image"><a href="http://en.wikibooks.org/wiki/Special:Search/Prolog" title="b:Special:Search/Prolog"><img alt="Sister project" src="http://upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/40px-Wikibooks-logo-en-noslogan.svg.png" width="40" height="40" border="0" /></a></td>
<td class="mbox-text" style=""><a href="/wiki/Wikibooks" title="Wikibooks">Wikibooks</a> has more on the topic of
<div style="margin-left:10px;"><i><b><a href="http://en.wikibooks.org/wiki/Special:Search/Prolog" class="extiw" title="wikibooks:Special:Search/Prolog">Prolog</a></b></i></div>
</td>
</tr>
</table>
<ul>
<li><a href="http://www.logic.at/prolog/faq/" class="external text" title="http://www.logic.at/prolog/faq/" rel="nofollow">comp.lang.prolog FAQ</a></li>
<li><a href="http://pauillac.inria.fr/~deransar/prolog/docs.html" class="external text" title="http://pauillac.inria.fr/~deransar/prolog/docs.html" rel="nofollow">Prolog: The ISO standard</a></li>
<li><a href="http://www.cs.cmu.edu/afs/cs/project/ai-repository/ai/lang/prolog/doc/intro/prolog.doc" class="external text" title="http://www.cs.cmu.edu/afs/cs/project/ai-repository/ai/lang/prolog/doc/intro/prolog.doc" rel="nofollow">DECsystem-10 Prolog User’s Manual</a> (plain text) describes a typical Edinburgh Prolog</li>
<li><a href="http://www.csupomona.edu/~jrfisher/www/prolog_tutorial/contents.html" class="external text" title="http://www.csupomona.edu/~jrfisher/www/prolog_tutorial/contents.html" rel="nofollow">Prolog Tutorial</a> by J.R.Fisher</li>
<li><a href="http://www.allisons.org/ll/Logic/Prolog/Examples/" class="external text" title="http://www.allisons.org/ll/Logic/Prolog/Examples/" rel="nofollow">Runnable examples</a> by Lloyd Allison</li>
<li><a href="http://kti.ms.mff.cuni.cz/~bartak/prolog/index.html" class="external text" title="http://kti.ms.mff.cuni.cz/~bartak/prolog/index.html" rel="nofollow">On-line guide to Prolog Programming</a> by Roman Bartak</li>
<li><a href="http://www.learnprolognow.org/" class="external text" title="http://www.learnprolognow.org/" rel="nofollow">Learn Prolog Now!</a> by Patrick Blackburn, Johan Bos and Kristina Striegnitz</li>
<li><a href="http://www.cs.bham.ac.uk/~pjh/prolog_course/se207.html" class="external text" title="http://www.cs.bham.ac.uk/~pjh/prolog_course/se207.html" rel="nofollow">Prolog and Logic Programming</a> by Dr Peter Hancox</li>
<li><a href="http://www.amzi.com/ExpertSystemsInProlog/index.htm" class="external text" title="http://www.amzi.com/ExpertSystemsInProlog/index.htm" rel="nofollow">Building Expert Systems in Prolog</a>, online book by Amzi! Inc.</li>
<li><a href="http://en.literateprograms.org/Category:Programming_language:Prolog" class="external text" title="http://en.literateprograms.org/Category:Programming_language:Prolog" rel="nofollow">Literate programming in Prolog</a></li>
<li><a href="http://www.cetus-links.org/oo_prolog.html" class="external text" title="http://www.cetus-links.org/oo_prolog.html" rel="nofollow">Object Oriented Language: Prolog, OOLP and other extensions</a> by Richard Katz</li>
</ul>


<!-- 
NewPP limit report
Preprocessor node count: 1185/1000000
Post-expand include size: 10596/2048000 bytes
Template argument size: 3752/2048000 bytes
Expensive parser function count: 2/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:23485-0!1!0!default!!en!2 and timestamp 20090403215413 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Prolog">http://en.wikipedia.org/wiki/Prolog</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Prolog_programming_language_family" title="Category:Prolog programming language family">Prolog programming language family</a></span> | <span dir='ltr'><a href="/wiki/Category:Computer_and_telecommunication_standards" title="Category:Computer and telecommunication standards">Computer and telecommunication standards</a></span> | <span dir='ltr'><a href="/wiki/Category:Declarative_programming_languages" title="Category:Declarative programming languages">Declarative programming languages</a></span></div><div id="mw-hidden-catlinks" class="mw-hidden-cats-hidden">Hidden categories:&#32;<span dir='ltr'><a href="/wiki/Category:All_articles_with_unsourced_statements" title="Category:All articles with unsourced statements">All articles with unsourced statements</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_unsourced_statements_since_April_2009" title="Category:Articles with unsourced statements since April 2009">Articles with unsourced statements since April 2009</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_containing_French_language_text" title="Category:Articles containing French language text">Articles containing French language text</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_unsourced_statements_since_March_2009" title="Category:Articles with unsourced statements since March 2009">Articles with unsourced statements since March 2009</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Prolog" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Prolog" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Prolog&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Prolog&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Prolog" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Prolog" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Prolog" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Prolog&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Prolog&amp;oldid=281581040" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Prolog&amp;id=281581040">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-ar"><a href="http://ar.wikipedia.org/wiki/%D8%A8%D8%B1%D9%88%D9%84%D9%88%D8%BA">العربية</a></li>
				<li class="interwiki-an"><a href="http://an.wikipedia.org/wiki/Prolog">Aragonés</a></li>
				<li class="interwiki-ast"><a href="http://ast.wikipedia.org/wiki/Prolog">Asturianu</a></li>
				<li class="interwiki-bg"><a href="http://bg.wikipedia.org/wiki/%D0%9F%D1%80%D0%BE%D0%BB%D0%BE%D0%B3_(%D0%B5%D0%B7%D0%B8%D0%BA_%D0%B7%D0%B0_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%B8%D1%80%D0%B0%D0%BD%D0%B5)">Български</a></li>
				<li class="interwiki-ca"><a href="http://ca.wikipedia.org/wiki/Prolog">Català</a></li>
				<li class="interwiki-cs"><a href="http://cs.wikipedia.org/wiki/Prolog_(programovac%C3%AD_jazyk)">Česky</a></li>
				<li class="interwiki-da"><a href="http://da.wikipedia.org/wiki/Prolog_(programmeringssprog)">Dansk</a></li>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/Prolog_(Programmiersprache)">Deutsch</a></li>
				<li class="interwiki-et"><a href="http://et.wikipedia.org/wiki/Prolog">Eesti</a></li>
				<li class="interwiki-el"><a href="http://el.wikipedia.org/wiki/Prolog">Ελληνικά</a></li>
				<li class="interwiki-es"><a href="http://es.wikipedia.org/wiki/Prolog">Español</a></li>
				<li class="interwiki-eo"><a href="http://eo.wikipedia.org/wiki/Prolog">Esperanto</a></li>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Prolog">Français</a></li>
				<li class="interwiki-gl"><a href="http://gl.wikipedia.org/wiki/Prolog">Galego</a></li>
				<li class="interwiki-ko"><a href="http://ko.wikipedia.org/wiki/%ED%94%84%EB%A1%A4%EB%A1%9C%EA%B7%B8">한국어</a></li>
				<li class="interwiki-io"><a href="http://io.wikipedia.org/wiki/Prolog">Ido</a></li>
				<li class="interwiki-id"><a href="http://id.wikipedia.org/wiki/Prolog">Bahasa Indonesia</a></li>
				<li class="interwiki-is"><a href="http://is.wikipedia.org/wiki/Prolog_(forritunarm%C3%A1l)">Íslenska</a></li>
				<li class="interwiki-it"><a href="http://it.wikipedia.org/wiki/Prolog">Italiano</a></li>
				<li class="interwiki-he"><a href="http://he.wikipedia.org/wiki/%D7%A4%D7%A8%D7%95%D7%9C%D7%95%D7%92_(%D7%A9%D7%A4%D7%AA_%D7%AA%D7%9B%D7%A0%D7%95%D7%AA)">עברית</a></li>
				<li class="interwiki-lt"><a href="http://lt.wikipedia.org/wiki/Prolog">Lietuvių</a></li>
				<li class="interwiki-jbo"><a href="http://jbo.wikipedia.org/wiki/Prolog">Lojban</a></li>
				<li class="interwiki-hu"><a href="http://hu.wikipedia.org/wiki/Prolog">Magyar</a></li>
				<li class="interwiki-nl"><a href="http://nl.wikipedia.org/wiki/Prolog">Nederlands</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/Prolog">日本語</a></li>
				<li class="interwiki-no"><a href="http://no.wikipedia.org/wiki/Prolog_(programmeringsspr%C3%A5k)">‪Norsk (bokmål)‬</a></li>
				<li class="interwiki-pl"><a href="http://pl.wikipedia.org/wiki/Prolog_(j%C4%99zyk_programowania)">Polski</a></li>
				<li class="interwiki-pt"><a href="http://pt.wikipedia.org/wiki/Prolog">Português</a></li>
				<li class="interwiki-ro"><a href="http://ro.wikipedia.org/wiki/Prolog">Română</a></li>
				<li class="interwiki-ru"><a href="http://ru.wikipedia.org/wiki/%D0%9F%D1%80%D0%BE%D0%BB%D0%BE%D0%B3_(%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)">Русский</a></li>
				<li class="interwiki-sk"><a href="http://sk.wikipedia.org/wiki/Prolog">Slovenčina</a></li>
				<li class="interwiki-sl"><a href="http://sl.wikipedia.org/wiki/Prolog">Slovenščina</a></li>
				<li class="interwiki-fi"><a href="http://fi.wikipedia.org/wiki/Prolog">Suomi</a></li>
				<li class="interwiki-sv"><a href="http://sv.wikipedia.org/wiki/Prolog_(programmeringsspr%C3%A5k)">Svenska</a></li>
				<li class="interwiki-th"><a href="http://th.wikipedia.org/wiki/%E0%B8%A0%E0%B8%B2%E0%B8%A9%E0%B8%B2%E0%B9%82%E0%B8%9B%E0%B8%A3%E0%B8%A5%E0%B9%87%E0%B8%AD%E0%B8%81">ไทย</a></li>
				<li class="interwiki-tr"><a href="http://tr.wikipedia.org/wiki/Prolog">Türkçe</a></li>
				<li class="interwiki-uk"><a href="http://uk.wikipedia.org/wiki/%D0%9F%D1%80%D0%BE%D0%BB%D0%BE%D0%B3_(%D0%BC%D0%BE%D0%B2%D0%B0_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D1%83%D0%B2%D0%B0%D0%BD%D0%BD%D1%8F)">Українська</a></li>
				<li class="interwiki-bat-smg"><a href="http://bat-smg.wikipedia.org/wiki/Prolog">Žemaitėška</a></li>
				<li class="interwiki-zh"><a href="http://zh.wikipedia.org/wiki/Prolog">中文</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 3 April 2009, at 21:52 (UTC).</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv101 in 0.063 secs. --></body></html>
