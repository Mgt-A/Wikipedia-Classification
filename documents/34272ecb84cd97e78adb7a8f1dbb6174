<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Visitor pattern,Design Patterns Patterns,Abstract factory pattern,Adapter pattern,Algorithm,Bertrand Meyer,Bridge pattern,Builder pattern,C++,Chain-of-responsibility pattern,Command pattern" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Visitor_pattern&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Visitor_pattern&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Visitor pattern - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Visitor_pattern";
		var wgTitle = "Visitor pattern";
		var wgAction = "view";
		var wgArticleId = "38689";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 282462028;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
<style type="text/css">/*<![CDATA[*/
.source-java {line-height: normal;}
.source-java li, .source-java pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for java
 * CSS class: source-java, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-java .de1, .source-java .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-java  {}
.source-java .head {}
.source-java .foot {}
.source-java .imp {font-weight: bold; color: red;}
.source-java .ln-xtra {color: #cc0; background-color: #ffc;}
.source-java li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-java li.li2 {font-weight: bold;}
.source-java .kw1 {color: #b1b100;}
.source-java .kw2 {color: #000000; font-weight: bold;}
.source-java .kw3 {color: #aaaadd; font-weight: bold;}
.source-java .kw4 {color: #993333;}
.source-java .co1 {color: #808080; font-style: italic;}
.source-java .co2 {color: #a1a100;}
.source-java .coMULTI {color: #808080; font-style: italic;}
.source-java .es0 {color: #000099; font-weight: bold;}
.source-java .br0 {color: #66cc66;}
.source-java .st0 {color: #ff0000;}
.source-java .nu0 {color: #cc66cc;}
.source-java .me1 {color: #006600;}
.source-java .me2 {color: #006600;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style>		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Visitor_pattern skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Visitor pattern</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<div class="thumb tright">
<div class="thumbinner" style="width:302px;"><a href="/wiki/File:VisitorClassDiagram.svg" class="image" title="Visitor in UML"><img alt="" src="http://upload.wikimedia.org/wikipedia/en/thumb/7/7f/VisitorClassDiagram.svg/300px-VisitorClassDiagram.svg.png" width="300" height="267" border="0" class="thumbimage" /></a>
<div class="thumbcaption">
<div class="magnify"><a href="/wiki/File:VisitorClassDiagram.svg" class="internal" title="Enlarge"><img src="/skins-1.5/common/images/magnify-clip.png" width="15" height="11" alt="" /></a></div>
Visitor in <a href="/wiki/Unified_Modeling_Language" title="Unified Modeling Language">UML</a></div>
</div>
</div>
<div class="thumb tright">
<div class="thumbinner" style="width:302px;"><a href="/wiki/File:Visitor_pattern_in_LePUS3.gif" class="image" title="Visitor in LePUS3 (legend)"><img alt="" src="http://upload.wikimedia.org/wikipedia/en/0/03/Visitor_pattern_in_LePUS3.gif" width="300" height="160" border="0" class="thumbimage" /></a>
<div class="thumbcaption">
<div class="magnify"><a href="/wiki/File:Visitor_pattern_in_LePUS3.gif" class="internal" title="Enlarge"><img src="/skins-1.5/common/images/magnify-clip.png" width="15" height="11" alt="" /></a></div>
Visitor in <a href="/wiki/Lepus3" title="Lepus3">LePUS3</a> (<a href="http://lepus.org.uk/ref/legend/legend.xml" class="external text" title="http://lepus.org.uk/ref/legend/legend.xml" rel="nofollow">legend</a>)</div>
</div>
</div>
<p>In <a href="/wiki/Object-oriented_programming" title="Object-oriented programming">object-oriented programming</a> and <a href="/wiki/Software_engineering" title="Software engineering">software engineering</a>, the <b>visitor</b> <a href="/wiki/Design_pattern_(computer_science)" title="Design pattern (computer science)">design pattern</a> is a way of separating an <a href="/wiki/Algorithm" title="Algorithm">algorithm</a> from an object structure upon which it operates. A practical result of this separation is the ability to add new operations to existing object structures without modifying those structures. Thus, using the visitor pattern helps conformance with the <a href="/wiki/Open/closed_principle" title="Open/closed principle">open/closed principle</a>.</p>
<p>In essence, the visitor allows one to add new <a href="/wiki/Virtual_function" title="Virtual function">virtual functions</a> to a family of classes without modifying the classes themselves; instead, one creates a visitor class that implements all of the appropriate specializations of the virtual function. The visitor takes the instance reference as input, and implements the goal through <a href="/wiki/Double_dispatch" title="Double dispatch">double dispatch</a>.</p>
<p>While powerful, the visitor pattern is more limited than conventional <a href="/wiki/Virtual_functions" title="Virtual functions" class="mw-redirect">virtual functions</a>. It is not possible to create visitors for objects without adding a small callback method inside each class and the callback method in each of the classes is not inheritable.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Details"><span class="tocnumber">1</span> <span class="toctext">Details</span></a></li>
<li class="toclevel-1"><a href="#Example"><span class="tocnumber">2</span> <span class="toctext">Example</span></a></li>
<li class="toclevel-1"><a href="#State"><span class="tocnumber">3</span> <span class="toctext">State</span></a></li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">4</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">5</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Details" id="Details"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Visitor_pattern&amp;action=edit&amp;section=1" title="Edit section: Details">edit</a>]</span> <span class="mw-headline">Details</span></h2>
<p>The idea is to use a structure of element classes, each of which has an <code>accept()</code> method that takes a <code>visitor</code> object as an argument. <code>Visitor</code> is an <a href="/wiki/Interface_(computer_science)" title="Interface (computer science)">interface</a> that has a <code>visit()</code> method for each element class. The <code>accept()</code> method of an element class calls back the <code>visit()</code> method for its class. Separate concrete <code>visitor</code> classes can then be written that perform some particular operations, by implementing these operations in their respective <code>visit()</code> methods.</p>
<p>One of these <code>visit()</code> methods of a concrete <code>visitor</code> can be thought of as a method not of a single class, but rather a method of a pair of classes: the concrete visitor and the particular element class. Thus the visitor pattern simulates <a href="/wiki/Double_dispatch" title="Double dispatch">double dispatch</a> in a conventional single-dispatch <a href="/wiki/Object-oriented" title="Object-oriented" class="mw-redirect">object-oriented</a> language such as <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a>, <a href="/wiki/Smalltalk" title="Smalltalk">Smalltalk</a>, and <a href="/wiki/C%2B%2B" title="C++">C++</a>. For an explanation of how double dispatch differs from <a href="/wiki/Function_overloading" title="Function overloading" class="mw-redirect">function overloading</a>, see <a href="/wiki/Double_dispatch#Double_dispatch_is_more_than_function_overloading" title="Double dispatch">Double dispatch is more than function overloading</a> in the double dispatch article. In the Java language, two techniques have been documented which use <a href="/wiki/Computational_reflection" title="Computational reflection" class="mw-redirect">reflection</a> to simplify the mechanics of double dispatch simulation in the visitor pattern: <a href="http://www.cs.ucla.edu/~palsberg/paper/compsac98.pdf" class="external text" title="http://www.cs.ucla.edu/~palsberg/paper/compsac98.pdf" rel="nofollow">getting rid of accept() methods</a> (the Walkabout variation), and <a href="http://www.javaworld.com/javaworld/javatips/jw-javatip98.html" class="external text" title="http://www.javaworld.com/javaworld/javatips/jw-javatip98.html" rel="nofollow">getting rid of extra visit() methods</a>.</p>
<p>The visitor pattern also specifies how iteration occurs over the object structure. In the simplest version, where each algorithm needs to iterate in the same way, the <code>accept()</code> method of a container element, in addition to calling back the <code>visit()</code> method of the <code>visitor</code>, also passes the <code>visitor</code> object to the <code>accept()</code> method of all its constituent child elements.</p>
<p>Because the Visitor object has one principal function (manifested in a plurality of specialized methods) and that function is called <code>visit()</code>, the Visitor can be readily identified as a potential <a href="/wiki/Function_object" title="Function object">function object</a> or <a href="/wiki/Functor" title="Functor">functor</a>. Likewise, the <code>accept()</code> function can be identified as a function applicator, a mapper, which knows how to traverse a particular type of object and apply a function to its elements. Lisp's object system with its multiple dispatch does not replace the Visitor pattern, but merely provides a more concise implementation of it in which the pattern all but disappears.</p>
<p><a name="Example" id="Example"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Visitor_pattern&amp;action=edit&amp;section=2" title="Edit section: Example">edit</a>]</span> <span class="mw-headline">Example</span></h2>
<p>The following example is in the <a href="/wiki/Java_programming_language" title="Java programming language" class="mw-redirect">Java programming language</a>:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-java">
<span class="kw2">interface</span> CarElementVisitor <span class="br0">{</span>
    <span class="kw4">void</span> visit<span class="br0">(</span>Wheel wheel<span class="br0">)</span>;
    <span class="kw4">void</span> visit<span class="br0">(</span>Engine engine<span class="br0">)</span>;
    <span class="kw4">void</span> visit<span class="br0">(</span>Body body<span class="br0">)</span>;
    <span class="kw4">void</span> visitCar<span class="br0">(</span>Car car<span class="br0">)</span>;
<span class="br0">}</span>
<span class="kw2">interface</span> CarElement <span class="br0">{</span>
    <span class="kw4">void</span> accept<span class="br0">(</span>CarElementVisitor visitor<span class="br0">)</span>; <span class="co1">// CarElements have to provide accept().</span>
<span class="br0">}</span>
<span class="kw2">class</span> Wheel <span class="kw2">implements</span> CarElement <span class="br0">{</span>
    <span class="kw2">private</span> <span class="kw3">String</span> name;
    Wheel<span class="br0">(</span><span class="kw3">String</span> name<span class="br0">)</span> <span class="br0">{</span>
        <span class="kw2">this</span>.<span class="me1">name</span> = name;
    <span class="br0">}</span>
    <span class="kw3">String</span> getName<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
        <span class="kw2">return</span> <span class="kw2">this</span>.<span class="me1">name</span>;
    <span class="br0">}</span>
    <span class="kw2">public</span> <span class="kw4">void</span> accept<span class="br0">(</span>CarElementVisitor visitor<span class="br0">)</span> <span class="br0">{</span>
        visitor.<span class="me1">visit</span><span class="br0">(</span><span class="kw2">this</span><span class="br0">)</span>;
    <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="kw2">class</span> Engine <span class="kw2">implements</span> CarElement <span class="br0">{</span>
    <span class="kw2">public</span> <span class="kw4">void</span> accept<span class="br0">(</span>CarElementVisitor visitor<span class="br0">)</span> <span class="br0">{</span>
        visitor.<span class="me1">visit</span><span class="br0">(</span><span class="kw2">this</span><span class="br0">)</span>;
    <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="kw2">class</span> Body <span class="kw2">implements</span> CarElement <span class="br0">{</span>
    <span class="kw2">public</span> <span class="kw4">void</span> accept<span class="br0">(</span>CarElementVisitor visitor<span class="br0">)</span> <span class="br0">{</span>
        visitor.<span class="me1">visit</span><span class="br0">(</span><span class="kw2">this</span><span class="br0">)</span>;
    <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="kw2">class</span> Car  <span class="br0">{</span>
    CarElement<span class="br0">[</span><span class="br0">]</span> elements;
    <span class="kw2">public</span> CarElement<span class="br0">[</span><span class="br0">]</span> getElements<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
        <span class="kw2">return</span> elements.<span class="me1">clone</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">// Return a copy of the array of references.</span>
    <span class="br0">}</span>
    <span class="kw2">public</span> Car<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
        <span class="kw2">this</span>.<span class="me1">elements</span> = <span class="kw2">new</span> CarElement<span class="br0">[</span><span class="br0">]</span>
          <span class="br0">{</span> <span class="kw2">new</span> Wheel<span class="br0">(</span><span class="st0">"front left"</span><span class="br0">)</span>, <span class="kw2">new</span> Wheel<span class="br0">(</span><span class="st0">"front right"</span><span class="br0">)</span>,
            <span class="kw2">new</span> Wheel<span class="br0">(</span><span class="st0">"back left"</span><span class="br0">)</span> , <span class="kw2">new</span> Wheel<span class="br0">(</span><span class="st0">"back right"</span><span class="br0">)</span>,
            <span class="kw2">new</span> Body<span class="br0">(</span><span class="br0">)</span>, <span class="kw2">new</span> Engine<span class="br0">(</span><span class="br0">)</span> <span class="br0">}</span>;
    <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="kw2">class</span> CarElementPrintVisitor <span class="kw2">implements</span> CarElementVisitor <span class="br0">{</span>
    <span class="kw2">public</span> <span class="kw4">void</span> visit<span class="br0">(</span>Wheel wheel<span class="br0">)</span> <span class="br0">{</span>      
        <span class="kw3">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span><span class="st0">"Visiting "</span>+ wheel.<span class="me1">getName</span><span class="br0">(</span><span class="br0">)</span>
                            + <span class="st0">" wheel"</span><span class="br0">)</span>;
    <span class="br0">}</span>
    <span class="kw2">public</span> <span class="kw4">void</span> visit<span class="br0">(</span>Engine engine<span class="br0">)</span> <span class="br0">{</span>
        <span class="kw3">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span><span class="st0">"Visiting engine"</span><span class="br0">)</span>;
    <span class="br0">}</span>
    <span class="kw2">public</span> <span class="kw4">void</span> visit<span class="br0">(</span>Body body<span class="br0">)</span> <span class="br0">{</span>
        <span class="kw3">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span><span class="st0">"Visiting body"</span><span class="br0">)</span>;
    <span class="br0">}</span>
 
    <span class="kw2">public</span> <span class="kw4">void</span> visitCar<span class="br0">(</span>Car car<span class="br0">)</span> <span class="br0">{</span>
        <span class="kw3">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span><span class="st0">"<span class="es0">\n</span>Visiting car"</span><span class="br0">)</span>;
        <span class="kw1">for</span><span class="br0">(</span>CarElement element : car.<span class="me1">getElements</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span> <span class="br0">{</span>
            element.<span class="me1">accept</span><span class="br0">(</span><span class="kw2">this</span><span class="br0">)</span>;
        <span class="br0">}</span>
        <span class="kw3">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span><span class="st0">"Visited car"</span><span class="br0">)</span>;
    <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="kw2">class</span> CarElementDoVisitor <span class="kw2">implements</span> CarElementVisitor <span class="br0">{</span>
    <span class="kw2">public</span> <span class="kw4">void</span> visit<span class="br0">(</span>Wheel wheel<span class="br0">)</span> <span class="br0">{</span>
        <span class="kw3">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span><span class="st0">"Kicking my "</span>+ wheel.<span class="me1">getName</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>;
    <span class="br0">}</span>
    <span class="kw2">public</span> <span class="kw4">void</span> visit<span class="br0">(</span>Engine engine<span class="br0">)</span> <span class="br0">{</span>
        <span class="kw3">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span><span class="st0">"Starting my engine"</span><span class="br0">)</span>;
    <span class="br0">}</span>
    <span class="kw2">public</span> <span class="kw4">void</span> visit<span class="br0">(</span>Body body<span class="br0">)</span> <span class="br0">{</span>
        <span class="kw3">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span><span class="st0">"Moving my body"</span><span class="br0">)</span>;
    <span class="br0">}</span>
    <span class="kw2">public</span> <span class="kw4">void</span> visitCar<span class="br0">(</span>Car car<span class="br0">)</span> <span class="br0">{</span>
        <span class="kw3">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span><span class="st0">"<span class="es0">\n</span>Starting my car"</span><span class="br0">)</span>;
        <span class="kw1">for</span><span class="br0">(</span>CarElement carElement : car.<span class="me1">getElements</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span> <span class="br0">{</span>
            carElement.<span class="me1">accept</span><span class="br0">(</span><span class="kw2">this</span><span class="br0">)</span>;
        <span class="br0">}</span>
        <span class="kw3">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span><span class="st0">"Started car"</span><span class="br0">)</span>;
    <span class="br0">}</span>
 
<span class="br0">}</span>
 
<span class="kw2">public</span> <span class="kw2">class</span> VisitorDemo <span class="br0">{</span>
    <span class="kw2">static</span> <span class="kw2">public</span> <span class="kw4">void</span> main<span class="br0">(</span><span class="kw3">String</span><span class="br0">[</span><span class="br0">]</span> args<span class="br0">)</span><span class="br0">{</span>
        Car car = <span class="kw2">new</span> Car<span class="br0">(</span><span class="br0">)</span>;
        CarElementVisitor printVisitor = <span class="kw2">new</span> CarElementPrintVisitor<span class="br0">(</span><span class="br0">)</span>;
        CarElementVisitor doVisitor = <span class="kw2">new</span> CarElementDoVisitor<span class="br0">(</span><span class="br0">)</span>;
        printVisitor.<span class="me1">visitCar</span><span class="br0">(</span>car<span class="br0">)</span>;
        doVisitor.<span class="me1">visitCar</span><span class="br0">(</span>car<span class="br0">)</span>;
    <span class="br0">}</span>
<span class="br0">}</span>
</pre></div>
<p><a name="State" id="State"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Visitor_pattern&amp;action=edit&amp;section=3" title="Edit section: State">edit</a>]</span> <span class="mw-headline">State</span></h2>
<p>Aside from potentially improving <a href="/wiki/Separation_of_concerns" title="Separation of concerns">separation of concerns</a>, the visitor pattern has an additional advantage over simply calling a polymorphic method: a visitor object can have state. This is extremely useful in many cases where the action performed on the object depends on previous such actions.</p>
<p>An example of this is a <a href="/wiki/Prettyprinting" title="Prettyprinting" class="mw-redirect">pretty-printer</a> in a <a href="/wiki/Programming_language" title="Programming language">programming language</a> implementation (such as a <a href="/wiki/Compiler" title="Compiler">compiler</a> or <a href="/wiki/Interpreter_(computer_science)" title="Interpreter (computer science)" class="mw-redirect">interpreter</a>). Such a pretty-printer object (implemented as a visitor, in this example), will visit nodes in a data structure, that represents a parsed and processed program. The pretty-printer will then generate a textual representation of the program tree. In order to make the representation human readable, the pretty-printer should properly indent program statements and expressions. The <i>current indentation level</i> can then be tracked by the visitor as its state, correctly applying encapsulation, whereas in a simple polymorphic method invocation, the indentation level would have to be exposed as a parameter and the caller would rely on the method implementation to use and propagate this parameter correctly.</p>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Visitor_pattern&amp;action=edit&amp;section=4" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<ul>
<li><a href="/wiki/Double_dispatch" title="Double dispatch">Double</a> and <a href="/wiki/Multiple_dispatch" title="Multiple dispatch">multiple dispatch</a></li>
<li><a href="/wiki/Composite_pattern" title="Composite pattern">Composite pattern</a></li>
<li><a href="/wiki/Hierarchical_visitor_pattern" title="Hierarchical visitor pattern">Hierarchical visitor pattern</a></li>
<li><a href="/wiki/Strategy_pattern" title="Strategy pattern">Strategy pattern</a></li>
<li><a href="/wiki/Function_object" title="Function object">Function object</a></li>
</ul>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Visitor_pattern&amp;action=edit&amp;section=5" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<ul>
<li><a href="http://objectmentor.com/resources/articles/visitor.pdf" class="external text" title="http://objectmentor.com/resources/articles/visitor.pdf" rel="nofollow">The Visitor Family of Design Patterns</a> by Robert C. Martin - a rough chapter from <i><a href="/w/index.php?title=The_Principles,_Patterns,_and_Practices_of_Agile_Software_Development&amp;action=edit&amp;redlink=1" class="new" title="The Principles, Patterns, and Practices of Agile Software Development (page does not exist)">The Principles, Patterns, and Practices of Agile Software Development</a></i>, <a href="/wiki/Robert_C._Martin" title="Robert C. Martin" class="mw-redirect">Robert C. Martin</a>, Prentice Hall</li>
<li><a href="http://www.lepus.org.uk/ref/companion/Visitor.xml" class="external text" title="http://www.lepus.org.uk/ref/companion/Visitor.xml" rel="nofollow">Visitor pattern in UML and in LePUS3</a> (a Design Description Language)</li>
<li>Article "<a href="http://se.ethz.ch/~meyer/publications/computer/visitor.pdf" class="external text" title="http://se.ethz.ch/~meyer/publications/computer/visitor.pdf" rel="nofollow">Componentization: the Visitor Example</a> by <a href="/wiki/Bertrand_Meyer" title="Bertrand Meyer">Bertrand Meyer</a> and Karine Arnout, <i>Computer</i> (IEEE), vol. 39, no. 7, July 2006, pages 23-30.</li>
<li>Article "<a href="http://www.onjava.com/pub/a/onjava/2005/06/01/searchvisitor.html" class="external text" title="http://www.onjava.com/pub/a/onjava/2005/06/01/searchvisitor.html" rel="nofollow">Domain Searching Using Visitors</a>" by <a href="/w/index.php?title=Paul_Mukherjee&amp;action=edit&amp;redlink=1" class="new" title="Paul Mukherjee (page does not exist)">Paul Mukherjee</a></li>
<li>Article "<a href="http://codeproject.com/cpp/ConditionInterpreter.asp" class="external text" title="http://codeproject.com/cpp/ConditionInterpreter.asp" rel="nofollow">Parsing Conditions using Interpreter and Visitor Pattern</a>"</li>
<li>Article <a href="http://www.cs.bham.ac.uk/~hxt/research/mfps-visitors.pdf" class="external text" title="http://www.cs.bham.ac.uk/~hxt/research/mfps-visitors.pdf" rel="nofollow">A Type-theoretic Reconstruction of the Visitor Pattern</a></li>
<li>Article "<a href="http://citeseer.ist.psu.edu/palsberg97essence.html" class="external text" title="http://citeseer.ist.psu.edu/palsberg97essence.html" rel="nofollow">The Essence of the Visitor Pattern</a>" by <a href="/w/index.php?title=Jens_Palsberg&amp;action=edit&amp;redlink=1" class="new" title="Jens Palsberg (page does not exist)">Jens Palsberg</a> and <a href="/w/index.php?title=C._Barry_Jay&amp;action=edit&amp;redlink=1" class="new" title="C. Barry Jay (page does not exist)">C. Barry Jay</a>. 1997 <a href="/wiki/IEEE_Computer_Society" title="IEEE Computer Society">IEEE-CS</a> <a href="/wiki/Software_engineering" title="Software engineering">COMPSAC</a> paper showing that accept() methods are unnecessary when reflection is available; introduces term 'Walkabout' for the technique.</li>
<li>Article "<a href="http://www.polyglotinc.com/articles.html#reflectVisitor" class="external text" title="http://www.polyglotinc.com/articles.html#reflectVisitor" rel="nofollow">Eliminate accept() methods from your Visitor pattern</a>" by Bruce Wallace</li>
<li>Article "<a href="http://www.artima.com/cppsource/cooperative_visitor.html" class="external text" title="http://www.artima.com/cppsource/cooperative_visitor.html" rel="nofollow">Cooperative Visitor: A Template Technique for Visitor Creation</a>" by <a href="/w/index.php?title=Anand_Shankar_Krishnamoorthi&amp;action=edit&amp;redlink=1" class="new" title="Anand Shankar Krishnamoorthi (page does not exist)">Anand Shankar Krishnamoorthi</a></li>
<li><a href="http://goblin.colourcountry.net/apt1002/Visitor%20patterns" class="external text" title="http://goblin.colourcountry.net/apt1002/Visitor%20patterns" rel="nofollow">Visitor Patterns</a> as a universal model of terminating computation.</li>
<li><a href="http://www.oodesign.com/oo_design_patterns/behavioral_patterns/visitor_pattern.html" class="external text" title="http://www.oodesign.com/oo_design_patterns/behavioral_patterns/visitor_pattern.html" rel="nofollow">Visitor Pattern</a> using reflection(java).</li>
<li><a href="http://perfectjpattern.sourceforge.net/dp-visitor.html" class="external text" title="http://perfectjpattern.sourceforge.net/dp-visitor.html" rel="nofollow">PerfectJPattern Open Source Project</a>, Provides a context-free and type-safe implementation of the Visitor Pattern in Java based on Delegates.</li>
</ul>
<p><br /></p>
<table class="navbox" cellspacing="0" style=";">
<tr>
<td style="padding:2px;">
<table cellspacing="0" class="nowraplinks collapsible autocollapse" style="width:100%;background:transparent;color:inherit;;">
<tr>
<th style=";" colspan="2" class="navbox-title">
<div style="float:left; width:6em;text-align:left;">
<div class="noprint plainlinksneverexpand navbar" style="background:none; padding:0; font-weight:normal;;;border:none;; font-size:xx-small;"><a href="/wiki/Template:Design_Patterns_Patterns" title="Template:Design Patterns Patterns"><span title="View this template" style=";;border:none;">v</span></a>&#160;<span style="font-size:80%;">•</span>&#160;<a href="/w/index.php?title=Template_talk:Design_Patterns_Patterns&amp;action=edit&amp;redlink=1" class="new" title="Template talk:Design Patterns Patterns (page does not exist)"><span title="Discussion about this template" style=";;border:none;">d</span></a>&#160;<span style="font-size:80%;">•</span>&#160;<a href="http://en.wikipedia.org/w/index.php?title=Template:Design_Patterns_Patterns&amp;action=edit" class="external text" title="http://en.wikipedia.org/w/index.php?title=Template:Design_Patterns_Patterns&amp;action=edit" rel="nofollow"><span title="Edit this template" style=";;border:none;;">e</span></a></div>
</div>
<span style="font-size:110%;"><a href="/wiki/Design_pattern_(computer_science)" title="Design pattern (computer science)">Design patterns</a> in the book <i><a href="/wiki/Design_Patterns_(book)" title="Design Patterns (book)">Design Patterns</a></i></span></th>
</tr>
<tr style="height:2px;">
<td></td>
</tr>
<tr>
<td class="navbox-group" style=";;">Creational</td>
<td style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<div style="padding:0em 0.25em"><a href="/wiki/Abstract_factory_pattern" title="Abstract factory pattern">Abstract factory</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Builder_pattern" title="Builder pattern">Builder</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Factory_method_pattern" title="Factory method pattern">Factory</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Prototype_pattern" title="Prototype pattern">Prototype</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Singleton_pattern" title="Singleton pattern">Singleton</a></div>
</td>
</tr>
<tr style="height:2px">
<td></td>
</tr>
<tr>
<td class="navbox-group" style=";;">Structural</td>
<td style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<div style="padding:0em 0.25em"><a href="/wiki/Adapter_pattern" title="Adapter pattern">Adapter</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Bridge_pattern" title="Bridge pattern">Bridge</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Composite_pattern" title="Composite pattern">Composite</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Decorator_pattern" title="Decorator pattern">Decorator</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Facade_pattern" title="Facade pattern">Facade</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Flyweight_pattern" title="Flyweight pattern">Flyweight</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Proxy_pattern" title="Proxy pattern">Proxy</a></div>
</td>
</tr>
<tr style="height:2px">
<td></td>
</tr>
<tr>
<td class="navbox-group" style=";;">Behavioral</td>
<td style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<div style="padding:0em 0.25em"><a href="/wiki/Chain-of-responsibility_pattern" title="Chain-of-responsibility pattern">Chain of responsibility</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Command_pattern" title="Command pattern">Command</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Interpreter_pattern" title="Interpreter pattern">Interpreter</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Iterator_pattern" title="Iterator pattern">Iterator</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Mediator_pattern" title="Mediator pattern">Mediator</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Memento_pattern" title="Memento pattern">Memento</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Observer_pattern" title="Observer pattern">Observer</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/State_pattern" title="State pattern">State</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Strategy_pattern" title="Strategy pattern">Strategy</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Template_method_pattern" title="Template method pattern">Template method</a><span style="font-weight:bold;">&#160;·</span> <strong class="selflink">Visitor</strong></div>
</td>
</tr>
</table>
</td>
</tr>
</table>


<!-- 
NewPP limit report
Preprocessor node count: 410/1000000
Post-expand include size: 14153/2048000 bytes
Template argument size: 5823/2048000 bytes
Expensive parser function count: 0/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:38689-0!1!0!default!!en!2 and timestamp 20090408011028 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Visitor_pattern">http://en.wikipedia.org/wiki/Visitor_pattern</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Software_design_patterns" title="Category:Software design patterns">Software design patterns</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_example_Java_code" title="Category:Articles with example Java code">Articles with example Java code</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_example_C%2B%2B_code" title="Category:Articles with example C++ code">Articles with example C++ code</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Visitor_pattern" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Visitor_pattern" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Visitor_pattern&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Visitor_pattern&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Visitor_pattern" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Visitor_pattern" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Visitor_pattern" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Visitor_pattern&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Visitor_pattern&amp;oldid=282462028" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Visitor_pattern&amp;id=282462028">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/Visitor">Deutsch</a></li>
				<li class="interwiki-es"><a href="http://es.wikipedia.org/wiki/Visitor_(patr%C3%B3n_de_dise%C3%B1o)">Español</a></li>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Visiteur_(motif_de_conception)">Français</a></li>
				<li class="interwiki-it"><a href="http://it.wikipedia.org/wiki/Visitor">Italiano</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/Visitor_%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3">日本語</a></li>
				<li class="interwiki-pl"><a href="http://pl.wikipedia.org/wiki/Odwiedzaj%C4%85cy_(wzorzec_projektowy)">Polski</a></li>
				<li class="interwiki-pt"><a href="http://pt.wikipedia.org/wiki/Visitor_Pattern">Português</a></li>
				<li class="interwiki-vi"><a href="http://vi.wikipedia.org/wiki/Visitor_pattern">Tiếng Việt</a></li>
				<li class="interwiki-zh"><a href="http://zh.wikipedia.org/wiki/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F">中文</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 8 April 2009, at 01:01 (UTC).</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv142 in 0.049 secs. --></body></html>
