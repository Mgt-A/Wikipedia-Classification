<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Threaded code,.NET Framework,ALGOL,Addressing mode,Apple II,BASIC (programming language),B (programming language),Bashforth,Branch table,Burroughs large systems,Byte code" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Threaded_code&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Threaded_code&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Threaded code - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Threaded_code";
		var wgTitle = "Threaded code";
		var wgAction = "view";
		var wgArticleId = "47767";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 280123277;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Threaded_code skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Threaded code</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<div class="dablink">Not to be confused with <a href="/wiki/Thread_(computer_science)" title="Thread (computer science)">multi-threaded programming</a>.</div>
<p>In <a href="/wiki/Computer_science" title="Computer science">computer science</a>, the term <b>threaded code</b> refers to a <a href="/wiki/Compiler" title="Compiler">compiler</a> implementation technique where the generated code has a form that essentially consists entirely of calls to <a href="/wiki/Subroutine" title="Subroutine">subroutines</a>. The code may be processed by an <a href="/wiki/Interpreter" title="Interpreter" class="mw-redirect">interpreter</a>, or may simply be a sequence of <a href="/wiki/Machine_code" title="Machine code">machine code</a> <a href="/wiki/Call" title="Call">call</a> instructions.</p>
<p>One of the main advantages of threaded code is that it is very compact, compared to code generated by alternative code generation techniques and alternative <a href="/wiki/Calling_convention" title="Calling convention">calling conventions</a>. This advantage usually comes at the expense of slightly slower execution speed (usually just a single machine instruction) . However, sometimes there is a <a href="/wiki/Synergy" title="Synergy">synergistic effect</a>—sometimes more compact code is smaller <i>and</i> significantly faster than non-threaded code.<sup id="cite_ref-0" class="reference"><a href="#cite_note-0" title=""><span>[</span>1<span>]</span></a></sup> A program small enough to fit entirely in <a href="/wiki/Random-access_memory" title="Random-access memory">random-access memory</a> may run faster than a less-compact program in <a href="/wiki/Swap_space" title="Swap space" class="mw-redirect">swap space</a> that requires constant mechanical disk drive access, even though it suffers the threaded code interpretation overhead. Similarly, a program small enough to fit entirely in a <a href="/wiki/Computer_processor" title="Computer processor" class="mw-redirect">computer processor</a>'s <a href="/wiki/Cache" title="Cache">cache</a> may run faster than a less-compact program that suffers constant <a href="/wiki/Cache_miss" title="Cache miss" class="mw-redirect">cache misses</a>.</p>
<p>Threaded code is most well known as the implementation technique commonly used in the <a href="/wiki/Forth_(programming_language)" title="Forth (programming language)">Forth</a> programming language. It was also used in early versions of the <a href="/wiki/B_(programming_language)" title="B (programming language)">B</a> programming language, as well as many implementations of <a href="/wiki/BASIC_(programming_language)" title="BASIC (programming language)" class="mw-redirect">BASIC</a>, and some implementations of <a href="/wiki/COBOL" title="COBOL">COBOL</a> and other languages for small <a href="/wiki/Minicomputer" title="Minicomputer">minicomputers</a>.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#History_leading_to_threaded_code"><span class="tocnumber">1</span> <span class="toctext">History leading to threaded code</span></a></li>
<li class="toclevel-1"><a href="#Development_of_Threaded_Code"><span class="tocnumber">2</span> <span class="toctext">Development of Threaded Code</span></a></li>
<li class="toclevel-1"><a href="#Threading_models"><span class="tocnumber">3</span> <span class="toctext">Threading models</span></a>
<ul>
<li class="toclevel-2"><a href="#Direct_threading"><span class="tocnumber">3.1</span> <span class="toctext">Direct threading</span></a></li>
<li class="toclevel-2"><a href="#Indirect_threading"><span class="tocnumber">3.2</span> <span class="toctext">Indirect threading</span></a></li>
<li class="toclevel-2"><a href="#Subroutine_threading"><span class="tocnumber">3.3</span> <span class="toctext">Subroutine threading</span></a></li>
<li class="toclevel-2"><a href="#Token_threading"><span class="tocnumber">3.4</span> <span class="toctext">Token threading</span></a></li>
<li class="toclevel-2"><a href="#Huffman_threading"><span class="tocnumber">3.5</span> <span class="toctext">Huffman threading</span></a></li>
<li class="toclevel-2"><a href="#Lesser_used_threading"><span class="tocnumber">3.6</span> <span class="toctext">Lesser used threading</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Branches"><span class="tocnumber">4</span> <span class="toctext">Branches</span></a></li>
<li class="toclevel-1"><a href="#Common_amenities"><span class="tocnumber">5</span> <span class="toctext">Common amenities</span></a></li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">6</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">7</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1"><a href="#Further_reading"><span class="tocnumber">8</span> <span class="toctext">Further reading</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="History_leading_to_threaded_code" id="History_leading_to_threaded_code"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Threaded_code&amp;action=edit&amp;section=1" title="Edit section: History leading to threaded code">edit</a>]</span> <span class="mw-headline">History leading to threaded code</span></h2>
<p>The common way to make computer programs is to 'translate' a computer program written in some symbolic language to <a href="/wiki/Machine_code" title="Machine code">machine code</a> using a <a href="/wiki/Compiler" title="Compiler">compiler</a>. The code is typically fast but nonportable since the <a href="/wiki/Executable" title="Executable">binary</a> code is designed for a specific <a href="/wiki/Hardware" title="Hardware">hardware</a> platform. A different approach uses a <a href="/wiki/Virtual_machine" title="Virtual machine">virtual machine</a> <a href="/wiki/Instruction_set" title="Instruction set">instruction set</a> - that has no particular target hardware. An interpreter executes it on each new target hardware.</p>
<p>Early computers had relatively little memory. For example, most <a href="/wiki/Data_General_Nova" title="Data General Nova">Data General Nova</a>, <a href="/wiki/IBM_1130" title="IBM 1130">IBM 1130</a>, and many <a href="/wiki/Apple_II" title="Apple II" class="mw-redirect">Apple II</a> computers had only 4 K words of RAM installed. Consequently a lot of time was spent trying to find ways to reduce the size of programs so they would fit in the memory available. At the same time, computers were relatively slow, so simple interpretation was very noticeably slower than executing machine code.</p>
<p>Instead of writing out every step of an operation in every part of the program where it was needed, programmers saved memory by writing each step of such operations once (see "<a href="/wiki/Don%27t_repeat_yourself" title="Don't repeat yourself">Don't repeat yourself</a>") and placing it in a subroutine.</p>
<p>This process — <a href="/wiki/Code_refactoring" title="Code refactoring">code refactoring</a> — is used today, although for different reasons. The top-level application in these programs may consist of nothing but subroutine calls. Many of these subroutines, in turn, also consist of nothing but lower level subroutine calls.</p>
<p>Mainframes and some early microprocessors such as the <a href="/wiki/RCA_1802" title="RCA 1802">RCA 1802</a> required several instructions to call a subroutine. In the top-level application and in many subroutines, that sequence is constantly repeated, only the subroutine address changing from one call to the next. Using memory to store the same instructions repeatedly is wasteful.</p>
<p>The simple answer was a <a href="/wiki/Branch_table" title="Branch table">branch table</a> (i.e. a table consisting of just contiguous addresses of the sub-routines - usually extracted using an index, <a href="/wiki/General_purpose_register" title="General purpose register" class="mw-redirect">general purpose register</a> or <a href="/wiki/Pointer" title="Pointer" class="mw-redirect">pointer</a>). The addresses may be direct or indirect, contiguous or non-contiguous (linked by pointers), relative or absolute, resolved at compile time or dynamically built - but the program becomes a list of entry points to the actual code to be executed. This technique has been "re-invented" as "threaded code" , <a href="/wiki/Dispatch_table" title="Dispatch table">Dispatch tables</a> or <a href="/wiki/Virtual_method_table" title="Virtual method table">Virtual method tables</a> - all these techniques fill similar purposes.</p>
<p><a name="Development_of_Threaded_Code" id="Development_of_Threaded_Code"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Threaded_code&amp;action=edit&amp;section=2" title="Edit section: Development of Threaded Code">edit</a>]</span> <span class="mw-headline">Development of Threaded Code</span></h2>
<p>To save space, programmers squeezed the lists of subroutine calls into simple lists of subroutine addresses, and used a small loop to call each subroutine in turn. For example:</p>
<pre>
start:             thread:         pushA:  *sp++ = A
  tp = &amp;thread       &amp;pushA                jump top
top:                 &amp;pushB        pushB:  *sp++ = B
  jump *tp++         &amp;add                  jump top
                     ...           add:    *sp++ = *--sp + *--sp
                                           jump top
</pre>
<p>In this case, decoding the bytecodes is performed once, during program compilation or program load, so it not repeated each time an instruction is executed. This can save much time and space when decode and dispatch overhead is large compared to the execution cost.</p>
<p>Note, however, addresses in <code>thread</code> for <code>&amp;pushA</code>, <code>&amp;pushB</code>, etc., are two or more bytes, compared to one byte, typically, for the decode and dispatch interpreter described above. In general, instructions for a decode and dispatch interpreter may be any size. As example, a decode and dispatch interpreter to simulate an Intel Pentium decodes instructions that range from 1 to 16 bytes. However, bytecoded systems typically choose 1-byte codes for the most-common operations. Thus, the thread often has a higher space cost than bytecodes. In most uses, the reduction in decode cost outweighs the increase in space cost.</p>
<p>Note also that while bytecodes are nominally machine-independent, the format and value of the pointers in threads generally depend on the target machine which is executing the interpreter. Thus, an interpreter might load a portable bytecode program, decode the bytecodes to generate platform-dependent threaded code, then execute threaded code without further reference to the bytecodes.</p>
<p>The loop is simple, so is duplicated in each handler, removing <code>jump top</code> from the list of machine instructions needed to execute each interpreter instruction. As example:</p>
<pre>
start:             thread:         pushA:  *sp++ = A
  tp = thread        &amp;pushA                jump *tp++
  jump *tp++         &amp;pushB        pushB:  *sp++ = B
                     &amp;add                  jump *tp++
                     ...           add:    *sp++ = *--sp + *--sp
                                           jump *tp++
</pre>
<p>This is called <b>direct threaded code</b> (DTC). Although the technique is older, the first widely circulated use of the term "threaded code" is probably Bell's article "Threaded Code" from 1973.<sup id="cite_ref-1" class="reference"><a href="#cite_note-1" title=""><span>[</span>2<span>]</span></a></sup></p>
<p><a href="/wiki/Charles_H._Moore" title="Charles H. Moore">Charles H. Moore</a> invented a more compact notation in 1970 for his Forth virtual machine: <b>indirect threaded code</b> (ITC). Originally, Moore invented this because it was easy and fast on <a href="/wiki/Data_General_Nova" title="Data General Nova">NOVA</a> minicomputers, which have an <a href="/wiki/Addressing_mode#Multi-level_memory_indirect" title="Addressing mode">indirection bit</a> in every address. He said (in published remarks, Byte Magazine's Forth Issue) that he found it so convenient that he propagated it into all later Forth designs.</p>
<p>Some Forth compilers compile Forth programs into direct-threaded code, while others make indirect-threaded code. The programs act the same either way.</p>
<p><a name="Threading_models" id="Threading_models"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Threaded_code&amp;action=edit&amp;section=3" title="Edit section: Threading models">edit</a>]</span> <span class="mw-headline">Threading models</span></h2>
<p>Practically all executable threaded code uses one or another of these methods for invoking subroutines (each method is called a "threading model").</p>
<p><a name="Direct_threading" id="Direct_threading"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Threaded_code&amp;action=edit&amp;section=4" title="Edit section: Direct threading">edit</a>]</span> <span class="mw-headline">Direct threading</span></h3>
<p>Addresses in the thread are the addresses of machine language. This form is simple, but may have overheads because the thread consists only of machine addresses, so all further parameters must be loaded indirectly from memory. Some Forth systems produce direct-threaded code. On many machines direct-threading is faster than subroutine threading (see reference below).</p>
<p>As example, a stack machine might execute the sequence "push A, push B, add". That might be translated to the following thread and routines, where <code>tp</code> is initialized to the address <code>&amp;thread</code>.</p>
<pre>
thread:      pushA: *sp++ = A          pushB: *sp++ = B         add:  *sp++ = *--sp + *--sp
  &amp;pushA            jump *tp++                jump *tp++              jump *tp++
  &amp;pushB
  &amp;add
  ...
</pre>
<p>Alternatively, operands may be included in the thread. This can remove some indirection needed above, but makes the thread larger:</p>
<pre>
thread:      push: *sp++ = *tp++      add: *sp++ = *--sp + *--sp
  &amp;push            jump *tp++              jump *tp++
  &amp;A
  &amp;push
  &amp;B
  &amp;add
</pre>
<p><a name="Indirect_threading" id="Indirect_threading"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Threaded_code&amp;action=edit&amp;section=5" title="Edit section: Indirect threading">edit</a>]</span> <span class="mw-headline">Indirect threading</span></h3>
<p>Indirect threading uses pointers to locations that in turn point to machine code. The indirect pointer may be followed by operands which are stored in the indirect "block" rather than storing them repeatedly in the thread. Thus, indirect code is often more compact than direct-threaded code, but the indirection also typically makes it slower, though still usually faster than bytecode interpreters. Where the handler operands include both values and types, the space savings over direct-threaded code may be significant. Older FORTH systems typically produce indirect-threaded code.</p>
<p>As example, if the goal is to execute "push A, push B, add", the following might be used. Here, <code>tp</code> is initialized to address <code>&amp;thread</code>, each code fragment (<code>push</code>, <code>add</code>) is found by double-indirecting through <code>tp</code>; and operands to each code fragment are found in the first-level indirection following the address of the fragment.</p>
<pre>
thread:      i_pushA:   push:                   add:
  &amp;i_pushA     &amp;push      *sp++ = *(*tp + 1)      *sp++ = *--sp + *--sp
  &amp;i_pushB     &amp;A         jump *(*tp++)           jump *(*tp++)
  &amp;i_add     i_pushB:
               &amp;push
               &amp;B
             i_add:
               &amp;add
</pre>
<p><a name="Subroutine_threading" id="Subroutine_threading"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Threaded_code&amp;action=edit&amp;section=6" title="Edit section: Subroutine threading">edit</a>]</span> <span class="mw-headline">Subroutine threading</span></h3>
<p>So-called "subroutine-threaded code" (also "call-threaded code") consists of a series of machine-language "call" instructions (or addresses of functions to "call", as opposed to direct threading's use of "jump"). Early compilers for <a href="/wiki/ALGOL" title="ALGOL">ALGOL</a>, Fortran, Cobol and some Forth systems often produced subroutine-threaded code. The code in many of these systems operated on a last-in-first-out (LIFO) stack of operands, which had well-developed compiler theory. Most modern processors have special hardware support for subroutine "call" and "return" instructions, so the overhead of one extra machine instruction per dispatch is somewhat diminished; but according to measurements by Anton Ertl, "in contrast to popular myths, subroutine threading is usually slower than direct threading."<sup id="cite_ref-2" class="reference"><a href="#cite_note-2" title=""><span>[</span>3<span>]</span></a></sup> Ertl's most recent tests show that direct threading is the fastest threading model on Xeon, Opteron, and Athlon processors; indirect threading is the fastest threading model on Pentium M processors; and subroutine threading is the fastest threading model on Pentium 4, Pentium III, and PPC processors.</p>
<p>As an example of call threading "push A, push B, add":</p>
<pre>
thread:           pushA:            pushB:         add:
  call pushA        *sp++ = A         *sp++ = B      *sp++ = *--sp + *--sp
  call pushB        ret               ret            ret
  call add
</pre>
<p><a name="Token_threading" id="Token_threading"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Threaded_code&amp;action=edit&amp;section=7" title="Edit section: Token threading">edit</a>]</span> <span class="mw-headline">Token threading</span></h3>
<p>Token threaded code uses lists of 8 or 12-bit indexes to a table of pointers. Token threaded code is notably compact, without much special effort by a programmer. It is usually half to three-fourths the size of other threaded-codes, which are themselves a quarter to an eighth the size of compiled code. The table's pointers can either be indirect or direct. Some Forth compilers produce token threaded code. Some programmers consider the "<a href="/wiki/P-code_machine" title="P-code machine">p-code</a>" generated by some Pascal compilers, as well as the <a href="/wiki/Byte_code" title="Byte code" class="mw-redirect">byte codes</a> used by <a href="/wiki/.NET_Framework" title=".NET Framework">.NET</a>, <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a>, Basic and some <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a> compilers to be token-threading.</p>
<p>A common approach historically is <a href="/wiki/Bytecode" title="Bytecode">bytecode</a>, which uses 8-bit opcodes and, often, a stack-based virtual machine. A typical interpreter is known as a "<a href="/w/index.php?title=Decode_and_dispatch_interpreter&amp;action=edit&amp;redlink=1" class="new" title="Decode and dispatch interpreter (page does not exist)">decode and dispatch interpreter</a>", and follows the form</p>
<pre>
bytecode:         top:                   pushA:         pushB:          add:
  0 /*pushA*/       i = decode(vpc++)      *sp++ = A      *sp++ = B       *sp++ = *--sp + *--sp
  1 /*pushB*/       addr = table[i]        jump top       jump top        jump top
  2 /*add*/         jump *addr
</pre>
<p>If the virtual machine uses only byte-size instructions, <code>decode()</code> is simply a fetch from <code>bytecode</code>, but often there are <a href="/wiki/Complex_instruction_set_computer" title="Complex instruction set computer">commonly-used 1-byte instructions plus some less-common multibyte instructions</a>, in which case <code>decode()</code> is more complex. The decoding of single byte opcodes can be very simply and efficiently handled by a <a href="/wiki/Branch_table" title="Branch table">branch table</a> using the opcode directly as an index.</p>
<p>For instructions where the individual operations are simple, such as "push" and "add", the <a href="/wiki/Overhead" title="Overhead">overhead</a> involved in deciding what to execute is larger than the cost of actually executing it, such interpreters are often much slower than machine code. However for more complex ("compound") instructions, the overhead percentage is proportionally less significant.</p>
<p><br /></p>
<p><a name="Huffman_threading" id="Huffman_threading"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Threaded_code&amp;action=edit&amp;section=8" title="Edit section: Huffman threading">edit</a>]</span> <span class="mw-headline">Huffman threading</span></h3>
<p>Huffman threaded code consists of lists of <a href="/wiki/Huffman_code" title="Huffman code" class="mw-redirect">Huffman codes</a>. A Huffman code is a variable length bit string used to identify a unique item. A Huffman-threaded interpreter locates subroutines using an index table or tree of pointers that can be navigated by the Huffman code. Huffman threaded code is one of the most compact representations known for a computer program. Basically the index and codes are organized by measuring the frequency that each subroutine occurs in the code. Frequent calls are given the shortest codes. Operations with approximately equal frequencies are given codes with nearly equal bit-lengths. Most Huffman-threaded systems have been implemented as direct-threaded Forth systems, and used to pack large amounts of slow-running code into small, cheap <a href="/wiki/Microcontroller" title="Microcontroller">microcontrollers</a>. Most published uses have been in toys, calculators or watches.</p>
<p><a name="Lesser_used_threading" id="Lesser_used_threading"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Threaded_code&amp;action=edit&amp;section=9" title="Edit section: Lesser used threading">edit</a>]</span> <span class="mw-headline">Lesser used threading</span></h3>
<ul>
<li>String threading, where operations are identified by strings, usually looked-up by a hash table. This was used in Charles H. Moore's earliest Forth implementations and in the <a href="/wiki/University_of_Illinois_at_Urbana-Champaign" title="University of Illinois at Urbana-Champaign">University of Illinois</a>'s experimental hardware-interpreted computer language. It is also used in <a href="/wiki/Bashforth" title="Bashforth">Bashforth</a>.</li>
</ul>
<p><a name="Branches" id="Branches"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Threaded_code&amp;action=edit&amp;section=10" title="Edit section: Branches">edit</a>]</span> <span class="mw-headline">Branches</span></h2>
<p>Examples above show no branches. For all interpreters, a branch changes the thread pointer (<code>tp</code> above). As example, a conditional branch when the top-of-stack value is zero might be encoded as follows. Note that <code>&amp;thread[123]</code> is the location to jump to, not the address of a handler, and so must be skipped (<code>tp++</code>) whether or not the branch is taken.</p>
<pre>
thread:              brz:
  ...                  tmp = *tp++
  &amp;brz                 if (*sp++ == 0)
  &amp;thread[123]           tp = tmp
  ...                  jump *tp++
</pre>
<p><a name="Common_amenities" id="Common_amenities"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Threaded_code&amp;action=edit&amp;section=11" title="Edit section: Common amenities">edit</a>]</span> <span class="mw-headline">Common amenities</span></h2>
<p>Separating the data and return stacks in a machine eliminates a great deal of stack management code, substantially reducing the size of the threaded code. The dual-stack principle was originated three times independently: for <a href="/wiki/Burroughs_large_systems" title="Burroughs large systems">Burroughs large systems</a>, <a href="/wiki/Forth_(programming_language)" title="Forth (programming language)">Forth</a> and <a href="/wiki/PostScript" title="PostScript">PostScript</a>, and is used in some <a href="/wiki/Java_virtual_machine" title="Java virtual machine" class="mw-redirect">Java virtual machines</a>.</p>
<p>Three <a href="/wiki/Processor_register" title="Processor register">registers</a> are often present in a threaded virtual machine. Another one exists for passing data between <a href="/wiki/Subroutine" title="Subroutine">subroutines</a> ('words'). These are:</p>
<ul>
<li>ip or i (<a href="/wiki/Instruction_pointer" title="Instruction pointer" class="mw-redirect">instruction pointer</a>); examples above call it <code>tp</code></li>
<li>w (work pointer)</li>
<li>rp or r (return <a href="/wiki/Stack_(data_structure)" title="Stack (data structure)">stack</a> <a href="/wiki/Pointer" title="Pointer" class="mw-redirect">pointer</a>)</li>
<li>sp or s (<a href="/wiki/Parameter" title="Parameter">parameter</a> stack pointer for passing parameters between words)</li>
</ul>
<p>Often, threaded <a href="/wiki/Virtual_machine" title="Virtual machine">virtual machines</a> such as implementations of Forth have a simple virtual machine at heart, consisting of three <i>primitives</i>. Those are:</p>
<ul>
<li><i>nest</i>, also called <i>docol</i></li>
<li><i>unnest</i>, or <i>semi_s</i> (;s)</li>
<li><i>next</i></li>
</ul>
<p>In an indirect-threaded virtual machine, the one given here, the operations are:</p>
<pre>
next:   (ip)+ -&gt;   w    ;  jmp (w)+
nest:    ip   -&gt; -(rp)  ;  w -&gt; ip  ;  next
unnest: (rp)+ -&gt;   ip   ;  next
</pre>
<p>This is perhaps the simplest and fastest interpreter or virtual machine.</p>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Threaded_code&amp;action=edit&amp;section=12" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<ul>
<li><a href="/wiki/Continuation-passing_style" title="Continuation-passing style">Continuation-passing style</a>, which replaces the global variable <code>tp</code> with a function parameter</li>
<li><a href="/wiki/Tail_recursion" title="Tail recursion">Tail recursion</a></li>
<li><a href="/wiki/Just-in-time_compilation" title="Just-in-time compilation">Just-in-time compilation</a></li>
<li><a href="/wiki/Branch_table" title="Branch table">Branch table</a></li>
</ul>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Threaded_code&amp;action=edit&amp;section=13" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<div class="references-small">
<ol class="references">
<li id="cite_note-0"><b><a href="#cite_ref-0" title="">^</a></b> <a href="http://www.complang.tuwien.ac.at/forth/threading/" class="external text" title="http://www.complang.tuwien.ac.at/forth/threading/" rel="nofollow">Speed of various interpreter dispatch techniques V2</a></li>
<li id="cite_note-1"><b><a href="#cite_ref-1" title="">^</a></b> James R. Bell, "Threaded Code", CACM, 1973, 16, 6, pp 370–372</li>
<li id="cite_note-2"><b><a href="#cite_ref-2" title="">^</a></b> <a href="http://www.complang.tuwien.ac.at/forth/threaded-code.html#what" class="external text" title="http://www.complang.tuwien.ac.at/forth/threaded-code.html#what" rel="nofollow">"What is Threaded Code?"</a> by Anton Ertl</li>
</ol>
</div>
<p><a name="Further_reading" id="Further_reading"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Threaded_code&amp;action=edit&amp;section=14" title="Edit section: Further reading">edit</a>]</span> <span class="mw-headline">Further reading</span></h2>
<ul>
<li>Anton Ertl's explanatory page <a href="http://www.complang.tuwien.ac.at/forth/threaded-code.html" class="external text" title="http://www.complang.tuwien.ac.at/forth/threaded-code.html" rel="nofollow">What is Threaded Code?</a> describes different threading techniques and provides further references.</li>
<li><a href="http://cm.bell-labs.com/cm/cs/who/dmr/chist.html" class="external text" title="http://cm.bell-labs.com/cm/cs/who/dmr/chist.html" rel="nofollow">The Development of the C Language</a> by <a href="/wiki/Dennis_Ritchie" title="Dennis Ritchie">Dennis M. Ritchie</a> describes B (a precursor of C) as implemented using "threaded code".</li>
<li><a href="http://thinking-forth.sourceforge.net/" class="external text" title="http://thinking-forth.sourceforge.net/" rel="nofollow">Thinking Forth Project</a> includes the seminal (but out of print) book Thinking Forth by <a href="http://home.earthlink.net/~lbrodie/" class="external text" title="http://home.earthlink.net/~lbrodie/" rel="nofollow">Leo Brodie</a> published in 1984.</li>
<li><a href="http://www.forth.com/starting-forth/" class="external text" title="http://www.forth.com/starting-forth/" rel="nofollow">Starting FORTH</a> online verion of the book Starting FORTH by <a href="http://home.earthlink.net/~lbrodie/" class="external text" title="http://home.earthlink.net/~lbrodie/" rel="nofollow">Leo Brodie</a> published in 1981.</li>
<li>Brad Rodriguez's <a href="http://www.zetetics.com/bj/papers/moving1.htm" class="external text" title="http://www.zetetics.com/bj/papers/moving1.htm" rel="nofollow">Moving FORTH: Part 1: Design Decisions in the Forth Kernel</a> covers threading techniques in depth.</li>
<li><a href="/wiki/History_of_general_purpose_CPUs" title="History of general purpose CPUs">history of general purpose CPUs</a></li>
<li><a href="http://gcc.gnu.org/onlinedocs/gcc/Labels-as-Values.html" class="external text" title="http://gcc.gnu.org/onlinedocs/gcc/Labels-as-Values.html" rel="nofollow">GCC extensions. Labels as Values</a></li>
</ul>


<!-- 
NewPP limit report
Preprocessor node count: 105/1000000
Post-expand include size: 349/2048000 bytes
Template argument size: 137/2048000 bytes
Expensive parser function count: 0/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:47767-0!1!0!default!!en!2 and timestamp 20090427160359 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Threaded_code">http://en.wikipedia.org/wiki/Threaded_code</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Compilers" title="Category:Compilers">Compilers</a></span> | <span dir='ltr'><a href="/wiki/Category:Programming_language_implementation" title="Category:Programming language implementation">Programming language implementation</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Threaded_code" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Threaded_code" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Threaded_code&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Threaded_code&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Threaded_code" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Threaded_code" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Threaded_code" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Threaded_code&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Threaded_code&amp;oldid=280123277" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Threaded_code&amp;id=280123277">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-ru"><a href="http://ru.wikipedia.org/wiki/%D0%A8%D0%B8%D1%82%D1%8B%D0%B9_%D0%BA%D0%BE%D0%B4">Русский</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 28 March 2009, at 01:04 (UTC).</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv134 in 0.047 secs. --></body></html>
