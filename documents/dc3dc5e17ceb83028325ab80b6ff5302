<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Verilog,Special:Search/Verilog,2000,Abstraction (computer science),Accellera,Analog circuit,Application-specific integrated circuit,Arithmetic shift,Backus-Naur form,C (programming language),Cadence Design Systems" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Verilog&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Verilog&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Verilog - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Verilog";
		var wgTitle = "Verilog";
		var wgAction = "view";
		var wgArticleId = "63863";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 277461656;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Verilog skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Verilog</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<p>In the <a href="/wiki/Semiconductor" title="Semiconductor">semiconductor</a> and electronic design industry, <b>Verilog</b> is a <a href="/wiki/Hardware_description_language" title="Hardware description language">hardware description language</a> (HDL) used to model <a href="/wiki/Electronics#Electronic_systems" title="Electronics">electronic systems</a>. <i>Verilog HDL</i>, not to be confused with <a href="/wiki/VHDL" title="VHDL">VHDL</a>, is most commonly used in the design, verification, and implementation of <a href="/wiki/Digital_circuit" title="Digital circuit" class="mw-redirect">digital</a> logic chips at the <a href="/wiki/Register_transfer_level" title="Register transfer level">Register transfer level</a> (RTL) level of <a href="/wiki/Abstraction_(computer_science)" title="Abstraction (computer science)">abstraction</a>. It is also used in the verification of <a href="/wiki/Analog_circuit" title="Analog circuit" class="mw-redirect">analog</a> and <a href="/wiki/Mixed-signal_integrated_circuit" title="Mixed-signal integrated circuit">mixed-signal circuits</a>.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#About_Verilog"><span class="tocnumber">1</span> <span class="toctext">About Verilog</span></a></li>
<li class="toclevel-1"><a href="#History"><span class="tocnumber">2</span> <span class="toctext">History</span></a>
<ul>
<li class="toclevel-2"><a href="#Beginning"><span class="tocnumber">2.1</span> <span class="toctext">Beginning</span></a></li>
<li class="toclevel-2"><a href="#Verilog-95"><span class="tocnumber">2.2</span> <span class="toctext">Verilog-95</span></a></li>
<li class="toclevel-2"><a href="#Verilog_2001"><span class="tocnumber">2.3</span> <span class="toctext">Verilog 2001</span></a></li>
<li class="toclevel-2"><a href="#Verilog_2005"><span class="tocnumber">2.4</span> <span class="toctext">Verilog 2005</span></a></li>
<li class="toclevel-2"><a href="#SystemVerilog"><span class="tocnumber">2.5</span> <span class="toctext">SystemVerilog</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Example"><span class="tocnumber">3</span> <span class="toctext">Example</span></a></li>
<li class="toclevel-1"><a href="#Definition_of_Constants"><span class="tocnumber">4</span> <span class="toctext">Definition of Constants</span></a></li>
<li class="toclevel-1"><a href="#Synthesizeable_constructs"><span class="tocnumber">5</span> <span class="toctext">Synthesizeable constructs</span></a></li>
<li class="toclevel-1"><a href="#Initial_and_Always"><span class="tocnumber">6</span> <span class="toctext">Initial and Always</span></a></li>
<li class="toclevel-1"><a href="#Fork.2FJoin"><span class="tocnumber">7</span> <span class="toctext">Fork/Join</span></a></li>
<li class="toclevel-1"><a href="#Race_Conditions"><span class="tocnumber">8</span> <span class="toctext">Race Conditions</span></a></li>
<li class="toclevel-1"><a href="#Operators"><span class="tocnumber">9</span> <span class="toctext">Operators</span></a></li>
<li class="toclevel-1"><a href="#System_tasks"><span class="tocnumber">10</span> <span class="toctext">System tasks</span></a></li>
<li class="toclevel-1"><a href="#Program_Language_Interface_.28PLI.29"><span class="tocnumber">11</span> <span class="toctext">Program Language Interface (PLI)</span></a></li>
<li class="toclevel-1"><a href="#Simulation_software"><span class="tocnumber">12</span> <span class="toctext">Simulation software</span></a></li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">13</span> <span class="toctext">See also</span></a>
<ul>
<li class="toclevel-2"><a href="#Additional_material"><span class="tocnumber">13.1</span> <span class="toctext">Additional material</span></a></li>
<li class="toclevel-2"><a href="#Related_languages"><span class="tocnumber">13.2</span> <span class="toctext">Related languages</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">14</span> <span class="toctext">External links</span></a>
<ul>
<li class="toclevel-2"><a href="#Verilog_Resources"><span class="tocnumber">14.1</span> <span class="toctext">Verilog Resources</span></a></li>
<li class="toclevel-2"><a href="#Standards_Development"><span class="tocnumber">14.2</span> <span class="toctext">Standards Development</span></a></li>
<li class="toclevel-2"><a href="#Verilog_Tools"><span class="tocnumber">14.3</span> <span class="toctext">Verilog Tools</span></a></li>
<li class="toclevel-2"><a href="#Open_Source_Verilog_Tools"><span class="tocnumber">14.4</span> <span class="toctext">Open Source Verilog Tools</span></a></li>
<li class="toclevel-2"><a href="#References"><span class="tocnumber">14.5</span> <span class="toctext">References</span></a></li>
</ul>
</li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="About_Verilog" id="About_Verilog"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Verilog&amp;action=edit&amp;section=1" title="Edit section: About Verilog">edit</a>]</span> <span class="mw-headline">About Verilog</span></h2>
<p>Hardware description languages, such as Verilog, differ from software <a href="/wiki/Programming_language" title="Programming language">programming languages</a> in several fundamental ways. HDLs add the concept of concurrency, which is parallel execution of multiple <a href="/wiki/Statement_(programming)" title="Statement (programming)">statements</a> in explicitly specified threads, propagation of time, and signal dependency (sensitivity). There are two assignment operators, a blocking assignment (=), and a non-blocking (&lt;=) assignment. The non-blocking assignment allows designers to describe a state-machine update without needing to declare and use temporary storage variables. Since these concepts are part of the Verilog's language semantics, designers could quickly write descriptions of large circuits, in a relatively compact and concise form. At the time of Verilog's introduction (1984), Verilog represented a tremendous productivity improvement for circuit designers who were already using graphical schematic-capture, and specially-written software programs to document and simulate electronic circuits.</p>
<p>The designers of Verilog wanted a language with syntax similar to the <a href="/wiki/C_(programming_language)" title="C (programming language)">C programming language</a>, which was already widely used in engineering software development. Verilog is <a href="/wiki/Case-sensitive" title="Case-sensitive" class="mw-redirect">case-sensitive</a>, has a basic <a href="/wiki/Preprocessor" title="Preprocessor">preprocessor</a> (though less sophisticated than ANSI C/C++), and equivalent <a href="/wiki/Control_flow" title="Control flow">control flow</a> <a href="/wiki/Keyword_(computer_programming)" title="Keyword (computer programming)">keywords</a> (if/else, for, while, case, etc.), and compatible language <a href="/wiki/Operator_(programming)" title="Operator (programming)">operators</a> <a href="/wiki/Operator_precedence" title="Operator precedence" class="mw-redirect">precedence</a>. Syntactic differences include variable declaration (Verilog requires bit-widths on net/reg types), demarcation of procedural-blocks (begin/end instead of curly braces {}), though there are many other minor differences.</p>
<p>A Verilog design consists of a hierarchy of modules. Modules encapsulate <i>design hierarchy</i>, and communicate with other modules through a set of declared input, output, and bidirectional ports. Internally, a module can contain any combination of the following: net/variable declarations (wire, reg, integer, etc.), concurrent and sequential statement blocks and instances of other modules (sub-hierarchies). Sequential statements are placed inside a begin/end block and executed in sequential order within the block. But the blocks themselves are executed concurrently, qualifying Verilog as a <a href="/wiki/Dataflow_language" title="Dataflow language" class="mw-redirect">Dataflow language</a>.</p>
<p>Verilog's concept of 'wire' consists of both signal values (4-state: "1, 0, floating, undefined"), and strengths (strong, weak, etc.) This system allows abstract modeling of shared signal-lines, where multiple sources drive a common net. When a wire has multiple drivers, the wire's (readable) value is resolved by a function of the source drivers and their strengths.</p>
<p>A subset of statements in the Verilog language is <a href="/wiki/Logic_synthesis" title="Logic synthesis">synthesizable</a>. Verilog modules that conform to a synthsizeable coding-style, known as RTL (register transfer level), can be physically realized by synthesis software. Synthesis-software algorithmically transforms the (abstract) Verilog source into a <a href="/wiki/Netlist" title="Netlist">netlist</a>, a logically-equivalent description consisting only of elementary logic primitives (AND, OR, NOT, flipflops, etc.) that are available in a specific <a href="/wiki/VLSI" title="VLSI" class="mw-redirect">VLSI</a> technology. Further manipulations to the netlist ultimately lead to a circuit fabrication blueprint (such as a photo mask-set for an <a href="/wiki/Application-specific_integrated_circuit" title="Application-specific integrated circuit">ASIC</a>), or a bitstream-file for an <a href="/wiki/FPGA" title="FPGA" class="mw-redirect">FPGA</a>)</p>
<p><a name="History" id="History"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Verilog&amp;action=edit&amp;section=2" title="Edit section: History">edit</a>]</span> <span class="mw-headline">History</span></h2>
<p><a name="Beginning" id="Beginning"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Verilog&amp;action=edit&amp;section=3" title="Edit section: Beginning">edit</a>]</span> <span class="mw-headline">Beginning</span></h3>
<p>Verilog was invented by <a href="/wiki/Phil_Moorby" title="Phil Moorby">Phil Moorby</a> and <a href="/w/index.php?title=Prabhu_Goel&amp;action=edit&amp;redlink=1" class="new" title="Prabhu Goel (page does not exist)">Prabhu Goel</a> during the winter of 1983/1984 at Automated Integrated Design Systems (later renamed to <a href="/wiki/Gateway_Design_Automation" title="Gateway Design Automation">Gateway Design Automation</a> in 1985) as a hardware modeling language. Gateway Design Automation was later purchased by <a href="/wiki/Cadence_Design_Systems" title="Cadence Design Systems">Cadence Design Systems</a> in 1990. Cadence now has full proprietary rights to Gateway's Verilog and the Verilog-XL simulator <a href="/wiki/Logic_simulator" title="Logic simulator" class="mw-redirect">logic simulators</a>.</p>
<p><a name="Verilog-95" id="Verilog-95"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Verilog&amp;action=edit&amp;section=4" title="Edit section: Verilog-95">edit</a>]</span> <span class="mw-headline">Verilog-95</span></h3>
<p>With the increasing success of <a href="/wiki/VHDL" title="VHDL">VHDL</a> at the time, Cadence decided to make the language available for open <a href="/wiki/Standardization" title="Standardization">standardization</a>. Cadence transferred Verilog into the public domain under the <a href="http://www.ovi.org" class="external text" title="http://www.ovi.org" rel="nofollow">Open Verilog International</a> (OVI) (now known as <a href="/wiki/Accellera" title="Accellera">Accellera</a>) organization. Verilog was later submitted to <a href="/wiki/IEEE" title="IEEE" class="mw-redirect">IEEE</a> and became <a href="/wiki/IEEE" title="IEEE" class="mw-redirect">IEEE</a> Standard 1364-1995, commonly referred to as Verilog-95.</p>
<p>In the same time frame Cadence initiated the creation of <a href="/wiki/Verilog-A" title="Verilog-A">Verilog-A</a> to put standards support behind its analog simulator Spectre. Verilog-A was never intended to be a standalone language and is a subset of <a href="/wiki/Verilog-AMS" title="Verilog-AMS">Verilog-AMS</a> which encompassed Verilog-95.</p>
<p><a name="Verilog_2001" id="Verilog_2001"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Verilog&amp;action=edit&amp;section=5" title="Edit section: Verilog 2001">edit</a>]</span> <span class="mw-headline">Verilog 2001</span></h3>
<p>Extensions to Verilog-95 were submitted back to IEEE to cover the deficiencies that users had found in the original Verilog standard. These extensions became <a href="/wiki/IEEE" title="IEEE" class="mw-redirect">IEEE</a> Standard 1364-2001 known as Verilog-2001.</p>
<p>Verilog-2001 is a significant upgrade from Verilog-95. First, it adds explicit support for (2's complement) signed nets and variables. Previously, code authors had to perform signed-operations using awkward bit-level manipulations (for example, the carry-out bit of a simple 8-bit addition required an explicit description of the boolean-algebra to determine its correct value.) The same function under Verilog-2001 can be more succinctly described by one of the built-in operators: +, -, /, *, &gt;&gt;&gt;. A generate/endgenerate construct (similar to VHDL's generate/endgenerate) allows Verilog-2001 to control instance and statement instantiation through normal decision-operators (case/if/else). Using generate/endgenerate, Verilog-2001 can instantiate an array of instances, with control over the connectivity of the individual instances. File I/O has been improved by several new system-tasks. And finally, a few syntax additions were introduced to improve code-readability (eg. always @*, named-parameter override, C-style function/task/module header declaration.)</p>
<p>Verilog-2001 is the dominant flavor of Verilog supported by the majority of commercial EDA software packages.</p>
<p><a name="Verilog_2005" id="Verilog_2005"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Verilog&amp;action=edit&amp;section=6" title="Edit section: Verilog 2005">edit</a>]</span> <span class="mw-headline">Verilog 2005</span></h3>
<p>Not to be confused with <a href="/wiki/SystemVerilog" title="SystemVerilog">SystemVerilog</a>, <i>Verilog 2005</i> (<a href="/wiki/IEEE" title="IEEE" class="mw-redirect">IEEE</a> Standard 1364-2005) consists of minor corrections, spec clarifications, and a few new language features (such as the uwire keyword.)</p>
<p>A separate part of the Verilog standard , <a href="/wiki/Verilog-AMS" title="Verilog-AMS">Verilog-AMS</a>, attempts to integrate analog and mixed signal modelling with traditional Verilog.</p>
<p><a name="SystemVerilog" id="SystemVerilog"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Verilog&amp;action=edit&amp;section=7" title="Edit section: SystemVerilog">edit</a>]</span> <span class="mw-headline">SystemVerilog</span></h3>
<div class="rellink noprint relarticle mainarticle">Main article: <a href="/wiki/SystemVerilog" title="SystemVerilog">SystemVerilog</a></div>
<p>SystemVerilog is a <a href="/wiki/Superset" title="Superset" class="mw-redirect">superset</a> of Verilog-2005, with many new features and capabilities to aid design-verification and design-modeling.</p>
<p>The advent of High Level Verification languages such as <a href="/wiki/OpenVera" title="OpenVera">OpenVera</a>, and <a href="/w/index.php?title=Verisity&amp;action=edit&amp;redlink=1" class="new" title="Verisity (page does not exist)">Verisity</a>'s E language encouraged the development of <a href="/wiki/Superlog" title="Superlog" class="mw-redirect">Superlog</a> by <a href="/w/index.php?title=Co-Design_Automation_Inc&amp;action=edit&amp;redlink=1" class="new" title="Co-Design Automation Inc (page does not exist)">Co-Design Automation Inc</a>. Co-Design Automation Inc was later purchased by <a href="/wiki/Synopsys" title="Synopsys">Synopsys</a>. The foundations of Superlog and Vera were donated to <a href="/wiki/Accellera" title="Accellera">Accellera</a>, which later became the <a href="/wiki/IEEE" title="IEEE" class="mw-redirect">IEEE</a> standard P1800-2005: SystemVerilog.</p>
<p><a name="Example" id="Example"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Verilog&amp;action=edit&amp;section=8" title="Edit section: Example">edit</a>]</span> <span class="mw-headline">Example</span></h2>
<p>A <a href="/wiki/Hello_world_program" title="Hello world program">hello world program</a> looks like this:</p>
<pre>
module main;
  initial 
    begin
      $display("Hello world!");
      $finish;
    end
endmodule
</pre>
<p>A simple example of two <a href="/wiki/Flip-flop_(electronics)" title="Flip-flop (electronics)">flip-flops</a> follows:</p>
<pre>
module toplevel(clock,reset);
 input clock;
 input reset;

 reg flop1;
 reg flop2;

 always @ (posedge reset or posedge clock)
 if (reset)
   begin
     flop1 &lt;= 0;
     flop2 &lt;= 1;
   end
 else
   begin
     flop1 &lt;= flop2;
     flop2 &lt;= flop1;
   end
endmodule
</pre>
<p>The "&lt;=" operator in verilog is another aspect of its being a hardware description language as opposed to a normal procedural language. This is known as a "non-blocking" assignment. When the simulation runs, all of the signals assigned with a "&lt;=" operator have their assignment scheduled to occur after all statements occurring during the same point in time have executed. After all the statements have been executed for one event, the scheduled assignments are performed. This makes it easier to code behaviours that happen simultaneously.</p>
<p>In the above example, flop1 is assigned flop2, and flop2 is assigned flop1. These statements are executed during the same time event. Since the assignments are coded with the "&lt;=" non-blocking operator, the assignments are scheduled to occur at the end of the event. Until then, all reads to flop1 and flop2 will use the values they had at the beginning of the time event.</p>
<p>This means that the order of the assignments are irrelevant and will produce the same result. flop1 and flop2 will swap values every clock.</p>
<p>The other choice for assignment is an "=" operator and this is known as a blocking assignment. When the "=" operator is used, things occur in the sequence they occur much like a procedural language.</p>
<p>In the above example, if the statements had used the "=" blocking operator instead of "&lt;=", the order of the statements would affect the behaviour: the reset would set flop2 to a 1, and flop1 to a 0. A clock event would then set flop1 to flop2, which is a 1 after the reset. The next statement would be executed subsequently and would set flop2 to flop1, which is now a 1. Rather than swap values every clock, flop1 and flop2 would both become 1 and remain that way.</p>
<p>An example <a href="/wiki/Counter" title="Counter">counter</a> circuit follows:</p>
<pre>
module Div20x (rst, clk, cet, cep, count,tc);
// TITLE 'Divide-by-20 Counter with enables'
// enable CEP is a clock enable only
// enable CET is a clock enable and
// enables the TC output
// a counter using the Verilog language

parameter size = 5;
parameter length = 20;

input rst; // These inputs/outputs represent 
input clk; // connections to the module.
input cet;
input cep;

output [size-1:0] count;
output tc;

reg [size-1:0] count; // Signals assigned 
                      // within an always 
                      // (or initial)block 
                      // must be of type reg
                      
wire tc; // Other signals are of type wire

// The always statement below is a parallel
// execution statement that
// executes any time the signals 
// rst or clk transition from low to high

always @ (posedge clk or posedge rst)
  if (rst) // This causes reset of the cntr
    count &lt;= 5'b0;
  else
  if (cet &amp;&amp; cep) // Enables both  true
    begin
      if (count == length-1)
        count &lt;= 5'b0;
      else
        count &lt;= count + 5'b1; // 5'b1 is 5 bits 
    end                        // wide and equal 
                               // to the value 1.

// the value of tc is continuously assigned 
// the value of the expression
assign tc = (cet &amp;&amp; (count == length-1));

endmodule
</pre>
<p>An example of delays:</p>
<pre>
...
reg a, b, c, d;
wire e;
...
always @(b or e)
 begin
   a = b &amp; e;
   b = a | b;
   #5 c = b;
   d = #6 c ^ e;
 end
</pre>
<p>The always clause above illustrates the other type of method of use, i.e. the always clause executes any time any of the entities in the list change, i.e. the b or e change. When one of these changes, immediately a and b are assigned new values. After a delay of 5 time units, c is assigned the value of b and the value of c ^ e is tucked away in an invisible store. Then after 6 more time units, d is assigned the value that was tucked away.</p>
<p>Signals that are driven from within a process (an initial or always block) must be of type reg. Signals that are driven from outside a process must be of type wire. The keyword reg does not necessarily imply a hardware register.</p>
<p><a name="Definition_of_Constants" id="Definition_of_Constants"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Verilog&amp;action=edit&amp;section=9" title="Edit section: Definition of Constants">edit</a>]</span> <span class="mw-headline">Definition of Constants</span></h2>
<p>The definition of constants in Verilog supports the addition of a width parameter. The basic syntax is:</p>
<p>&lt;<i>Width in bits</i>&gt;'&lt;<i>base letter</i>&gt;&lt;<i>number</i>&gt;</p>
<p>Examples:</p>
<ul>
<li>12'h123 - Hexadecimal 123 (using 12 bits)</li>
<li>20'd44 - Decimal 44 (using 20 bits - 0 extension is automatic)</li>
<li>4'b1010 - Binary 1010 (using 4 bits)</li>
<li>6'o77 - Octal 77 (using 6 bits)</li>
</ul>
<p><a name="Synthesizeable_constructs" id="Synthesizeable_constructs"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Verilog&amp;action=edit&amp;section=10" title="Edit section: Synthesizeable constructs">edit</a>]</span> <span class="mw-headline"><i>Synthesizeable constructs</i></span></h2>
<p>As mentioned previously, there are several basic templates that can be used to represent hardware.</p>
<pre>
// Mux examples - Three ways to do the same thing.

// The first example uses continuous assignment
wire out ;
assign out = sel ? a : b;

// the second example uses a procedure 
// to accomplish the same thing.

reg out;
always @(a or b or sel)
 begin
  case(sel)
   1'b0: out = b;
   1'b1: out = a;
  endcase
 end
 
// Finally - you can use if/else in a 
// procedural structure.
reg out;
always @(a or b or sel)
  if (sel)
    out = a;
  else
    out = b;

</pre>
<p>The next interesting structure is a transparent latch; it will pass the input to the output when the gate signal is set for "pass-through", and captures the input and store it upon transition of the gate signal to "hold". The output will remain stable regardless of the input signal while the gate is set to "hold". In the example below the "pass-through" level of the gate would be when the value of the if clause is true, i.e. gate = 1. This is read "if gate is true, the din is fed to latch_out continuously." Once the if clause is false, the last value at latch_out will remain and is independent of the value of din.</p>
<pre>
// Transparent latch example

reg out;
always @(gate or din)
 if(gate)
   out = din; // Pass through state
   // Note that the else isn't required here. The variable
   // out will follow the value of din while gate is high.
   // When gate goes low, out will remain constant.

</pre>
<p>The flip-flop is the next significant template; in verilog, the D-flop is the simplest, and it can be modeled as:</p>
<pre>
reg q;
always @(posedge clk)
  q &lt;= d;
</pre>
<p>The significant thing to notice in the example is the use of the non-blocking assignment. A basic <a href="/wiki/Rule_of_thumb" title="Rule of thumb">rule of thumb</a> is to use <b>&lt;=</b> when there is a <b>posedge</b> or <b>negedge</b> statement within the always clause.</p>
<p>A variant of the D-flop is one with an asynchronous reset; there is a convention that the reset state will be the first if clause within the statement.</p>
<pre>
reg q;
always @(posedge clk or posedge reset)
  if(reset)
    q &lt;= 0;
  else
    q &lt;= d;
</pre>
<p>The next variant is including both an asynchronous reset and asynchronous set condition; again the convention comes into play, i.e. the reset term is followed by the set term.</p>
<pre>
reg q;
always @(posedge clk or posedge reset or posedge set)
 if(reset)
   q &lt;= 0;
 else if(set)
   q &lt;= 1;
 else
   q &lt;= d;
</pre>
<p>The final basic variant is one that implements a D-flop with a mux feeding its input. The mux has a d-input and feedback from the flop itself. This allows a gated load function.</p>
<pre>
// Basic structure with an EXPLICIT feedback path
always @(posedge clk)
  if(gate)
    q &lt;= d;
  else
    q &lt;= q; // explicit feedback path

// The more common structure ASSUMES the feedback is present
// This is a safe assumption since this is how the
// hardware compiler will interpret it. This structure
// looks much like a Latch. The differences are the
// '''@(posedge clk)''' and the non-blocking '''&lt;='''
//
always @(posedge clk)
  if(gate)
    q &lt;= d; // the "else" mux is "implied"
</pre>
<p>Looking at the original counter example you can see a combination of the basic asynchronous reset flop and Gated input flop used. The register variable <b>count</b> is set to zero on the rising edge or <b>rst</b>. When <b>rst</b> is 0, the variable <b>count</b> will load new data when <b>cet &amp;&amp; cep</b> is true. <a name="Initial_and_Always" id="Initial_and_Always"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Verilog&amp;action=edit&amp;section=11" title="Edit section: Initial and Always">edit</a>]</span> <span class="mw-headline">Initial and Always</span></h2>
<p>There are two separate ways of declaring a verilog process. These are the <b>always</b> and the <b>initial</b> keywords. The <b>always</b> keyword indicates a free-running process that triggers on the accompanying event-control (@) clause. The <b>initial</b> keyword indicates a process executes exactly once. Both constructs begin execution at simulator time 0, and both execute until the end of the block. Once an always block has reached its end, it is rescheduled (again). It is a common misconception to believe that an initial block will execute before an always block. In fact, it is better to think of the <b>initial</b>-block as a special-case of the <b>always</b>-block, one which terminates after it completes for the first time.</p>
<pre>
//Examples:
initial
  begin
    a = 1; // Assign a value to reg a at time 0
    #1; // Wait 1 time unit
    b = a; // Assign the value of reg a to reg b
  end

always @(a or b) // Anytime a or b CHANGE, run the process
begin
  if (a)
    c = b;
  else
    d = ~b;
end // Done with this block, now return to the top (i.e. the @ event-control)

always @(posedge a)// Run whenever reg a has a low to high change
  a &lt;= b;

</pre>
<p>These are the classic uses for these two keywords, but there are two significant additional uses. The most common of these is an <b>always</b> keyword without the <b>@()</b> sensitivity list. It is possible to use always as shown below:</p>
<pre>
always
 begin // Always begins executing at time 0 and NEVER stops
   clk = 0; // Set clk to 0
   #1; // Wait for 1 time unit
   clk = 1; // Set clk to 1
   #1; // Wait 1 time unit
 end // Keeps executing - so continue back at the top of the begin
</pre>
<p>The <b>always</b> keyword acts similar to the "C" construct <b>while(1) {..}</b> in the sense that it will execute forever.</p>
<p>The other interesting exception is the use of the <b>initial</b> keyword with the addition of the <b>forever</b> keyword.</p>
<p>The example below is functionally identical to the <b>always</b> example above.</p>
<pre>
initial forever // Start at time 0 and repeat the begin/end forever
 begin
   clk = 0; // Set clk to 0
   #1; // Wait for 1 time unit
   clk = 1; // Set clk to 1
   #1; // Wait 1 time unit
 end
</pre>
<p><a name="Fork.2FJoin" id="Fork.2FJoin"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Verilog&amp;action=edit&amp;section=12" title="Edit section: Fork/Join">edit</a>]</span> <span class="mw-headline">Fork/Join</span></h2>
<p>The <b>fork/join</b> pair are used by Verilog to create parallel processes. All statements (or blocks) between a fork/join pair begin execution simultaneously upon execution flow hitting the <b>fork</b>. Execution continues after the <b>join</b> upon completion of the longest running statement or block between the <b>fork</b> and <b>join</b>.</p>
<pre>
initial
 fork
   $write("A"); // Print Char A
   $write("B"); // Print Char B
   begin
     #1; // Wait 1 time unit
     $write("C");// Print Char C
   end
 join
 
</pre>
<p>The way the above is written, it is possible to have either the sequences "ABC" or "BAC" print out. The order of simulation between the first $write and the second $write depends on the simulator implementation. This illustrates one of the biggest issues with Verilog. You can have race conditions where the language execution order doesn't guarantee the results.</p>
<p><a name="Race_Conditions" id="Race_Conditions"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Verilog&amp;action=edit&amp;section=13" title="Edit section: Race Conditions">edit</a>]</span> <span class="mw-headline">Race Conditions</span></h2>
<p>The order of execution isn't always guaranteed within verilog. This can best be illustrated by a classic example. Consider the code snippet below:</p>
<pre>
initial
  a = 0;


initial
  b = a;
 
initial
  begin
    #1;
    $display("Value a=%b Value of b=%b",a,b);
  end
</pre>
<p>What will be printed out for the values of a and b? Well - it could be 0 and 0, or perhaps 0 and X! This all depends on the order of execution of the initial blocks. If the simulators scheduler works from the top of the file to the bottom, then you would get 0 and 0. If it begins from the bottom of the module and works up, then b will receive the initial value of a at the beginning of the simulation <i>before</i> it has been initialized to 0 (the value of any variable not set explicitily is set to X.) This is the way you can experience a race condition in a simulation. So be careful! Note that the 3rd initial block will execute as you expect because of the #1 there. That is a different point on the time wheel beyond time 0, consequently both of the earlier initial blocks have completed execution.</p>
<p><a name="Operators" id="Operators"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Verilog&amp;action=edit&amp;section=14" title="Edit section: Operators">edit</a>]</span> <span class="mw-headline">Operators</span></h2>
<table class="wikitable">
<tr>
<th>Operator type</th>
<th>Operator symbols</th>
<th>Operation performed</th>
</tr>
<tr>
<td rowspan="5">Bitwise</td>
<td>~</td>
<td>1's complement</td>
</tr>
<tr>
<td>&amp;</td>
<td>Bitwise AND</td>
</tr>
<tr>
<td>|</td>
<td>Bitwise OR</td>
</tr>
<tr>
<td>^</td>
<td>Bitwise XOR</td>
</tr>
<tr>
<td>~^ or ^~</td>
<td>Bitwise XNOR</td>
</tr>
<tr>
<td rowspan="3">Logical</td>
<td>&#160;!</td>
<td>NOT</td>
</tr>
<tr>
<td>&amp;&amp;</td>
<td>AND</td>
</tr>
<tr>
<td>||</td>
<td>OR</td>
</tr>
<tr>
<td rowspan="6">Reduction</td>
<td>&amp;</td>
<td>Reduction AND</td>
</tr>
<tr>
<td>~&amp;</td>
<td>Reduction NAND</td>
</tr>
<tr>
<td>|</td>
<td>Reduction OR</td>
</tr>
<tr>
<td>~|</td>
<td>Reduction NOR</td>
</tr>
<tr>
<td>^</td>
<td>Reduction XOR</td>
</tr>
<tr>
<td>~^ or ^~</td>
<td>Reduction XNOR</td>
</tr>
<tr>
<td rowspan="6">Arithmetic</td>
<td>+</td>
<td>Addition</td>
</tr>
<tr>
<td>-</td>
<td>Subtraction</td>
</tr>
<tr>
<td>-</td>
<td>2's complement</td>
</tr>
<tr>
<td>*</td>
<td>Multiplication</td>
</tr>
<tr>
<td>/</td>
<td>Division</td>
</tr>
<tr>
<td>**</td>
<td>exponent (*Verilog-2001)</td>
</tr>
<tr>
<td rowspan="8">Relational</td>
<td>&gt;</td>
<td>Greater than</td>
</tr>
<tr>
<td>&lt;</td>
<td>Less than</td>
</tr>
<tr>
<td>&gt;=</td>
<td>Greater than or equal to</td>
</tr>
<tr>
<td>&lt;=</td>
<td>Less than or equal to</td>
</tr>
<tr>
<td>==</td>
<td>logical equality (bit-value 1'bX is removed from comparison)</td>
</tr>
<tr>
<td>&#160;!=</td>
<td>Logical inequality (bit-value 1'bX is removed from comparison)</td>
</tr>
<tr>
<td>===</td>
<td>4-state logical equality (bit-value 1'bX is taken as literal)</td>
</tr>
<tr>
<td>&#160;!==</td>
<td>4-state Logical inequality (bit-value 1'bX is taken as literal)</td>
</tr>
<tr>
<td rowspan="4">Shift</td>
<td>&gt;&gt;</td>
<td>Logical Right shift</td>
</tr>
<tr>
<td>&lt;&lt;</td>
<td>Logical Left shift</td>
</tr>
<tr>
<td>&gt;&gt;&gt;</td>
<td><a href="/wiki/Arithmetic_shift" title="Arithmetic shift">Arithmetic Right shift</a> (*Verilog-2001)</td>
</tr>
<tr>
<td>&lt;&lt;&lt;</td>
<td><a href="/wiki/Arithmetic_shift" title="Arithmetic shift">Arithmetic Left shift</a> (*Verilog-2001)</td>
</tr>
<tr>
<td>Concatenation</td>
<td>{ , }</td>
<td>Concatenation</td>
</tr>
<tr>
<td>Replication</td>
<td>{{ }}</td>
<td>Replication</td>
</tr>
<tr>
<td>Conditional</td>
<td>&#160;?&#160;:</td>
<td>Conditional</td>
</tr>
</table>
<p><a name="System_tasks" id="System_tasks"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Verilog&amp;action=edit&amp;section=15" title="Edit section: System tasks">edit</a>]</span> <span class="mw-headline">System tasks</span></h2>
<p>System tasks are available to handle simple I/O, and various design measurement functions. All system tasks are prefixed with <b>$</b> to distinguish them from user tasks and functions. This section presents a short list of the most often used tasks. It is by no means a comprehensive list.</p>
<ul>
<li>$display - Print to screen a line followed by an automatic newline.</li>
<li>$write - Print to screen a line without the newline.</li>
<li>$swrite - Print to variable a line without the newline.</li>
<li>$sscanf - Read from variable a format-specified string. (*Verilog-2001)</li>
<li>$fopen - Open a handle to a file (read or write)</li>
<li>$fdisplay - Write to file a line followed by an automatic newline.</li>
<li>$fwrite - Write to file a line without the newline.</li>
<li>$fscanf - Read from file a format-specified string. (*Verilog-2001)</li>
<li>$fclose - Close and release an open file-handle.</li>
<li>$readmemh - Read hex file content into a memory array.</li>
<li>$readmemb - Read binary file content into a memory array.</li>
<li>$monitor - Print out all the listed variables when any change value.</li>
<li>$time - Value of current simulation time.</li>
<li>$dumpfile - Declare the VCD (<a href="/wiki/Value_change_dump" title="Value change dump">Value Change Dump</a>) format output file name.</li>
<li>$dumpvars - Turn on and dump the variables.</li>
<li>$dumpports - Turn on and dump the variables in Extended-VCD format.</li>
<li>$random - Return a random value.</li>
</ul>
<p><a name="Program_Language_Interface_.28PLI.29" id="Program_Language_Interface_.28PLI.29"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Verilog&amp;action=edit&amp;section=16" title="Edit section: Program Language Interface (PLI)">edit</a>]</span> <span class="mw-headline">Program Language Interface (PLI)</span></h2>
<p>Program Language Interface provides a programmer with transferring control from Verilog to a program function written in C language. It is <b>officially <a href="/wiki/Deprecated" title="Deprecated" class="mw-redirect">deprecated</a></b> by IEEE Std 1364-2005 in favor of the newer <a href="/wiki/Verilog_Procedural_Interface" title="Verilog Procedural Interface">Verilog Procedural Interface</a>, which completely replaces the PLI.</p>
<p>The PLI enables Verilog to cooperate with other programs written in the C language such as <a href="/wiki/Test_harness" title="Test harness">test harness</a>, <a href="/wiki/Instruction_Set_Simulator" title="Instruction Set Simulator" class="mw-redirect">Instruction Set Simulator</a> of <a href="/wiki/Microcontroller" title="Microcontroller">microcontroller</a>, <a href="/wiki/Debugger" title="Debugger">debugger</a>, and so on. For example, it provides C functions named tf_putlongp() and tf_getlongp() which are used to write and read the argument of the current Verilog task or function, respectively.</p>
<p><a name="Simulation_software" id="Simulation_software"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Verilog&amp;action=edit&amp;section=17" title="Edit section: Simulation software">edit</a>]</span> <span class="mw-headline">Simulation software</span></h2>
<p>For information on Verilog simulators, see <a href="/wiki/List_of_Verilog_Simulators" title="List of Verilog Simulators" class="mw-redirect">List of Verilog Simulators</a>.</p>
<p><br /></p>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Verilog&amp;action=edit&amp;section=18" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<p><a name="Additional_material" id="Additional_material"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Verilog&amp;action=edit&amp;section=19" title="Edit section: Additional material">edit</a>]</span> <span class="mw-headline">Additional material</span></h3>
<ul>
<li><a href="/wiki/List_of_Verilog_simulators" title="List of Verilog simulators">List of Verilog simulators</a></li>
<li><a href="/wiki/Waveform_viewer" title="Waveform viewer">Waveform viewer</a></li>
<li><a href="/wiki/Direct_Programming_Interface" title="Direct Programming Interface">SystemVerilog Direct Programming Interface (DPI)</a></li>
<li><a href="/wiki/Verilog_Procedural_Interface" title="Verilog Procedural Interface">Verilog Procedural Interface (VPI)</a></li>
</ul>
<p><a name="Related_languages" id="Related_languages"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Verilog&amp;action=edit&amp;section=20" title="Edit section: Related languages">edit</a>]</span> <span class="mw-headline">Related languages</span></h3>
<ul>
<li><a href="/wiki/VHSIC_Hardware_Description_Language" title="VHSIC Hardware Description Language" class="mw-redirect">VHDL</a></li>
<li><a href="/wiki/SystemC" title="SystemC">SystemC</a></li>
<li><a href="/wiki/SystemVerilog" title="SystemVerilog">SystemVerilog</a></li>
<li><a href="/wiki/OpenVera" title="OpenVera">OpenVera</a></li>
<li><a href="/w/index.php?title=Specman_E&amp;action=edit&amp;redlink=1" class="new" title="Specman E (page does not exist)">Specman E</a></li>
<li><a href="/wiki/Property_Specification_Language" title="Property Specification Language">Property Specification Language</a></li>
<li><a href="/wiki/JHDL" title="JHDL">JHDL</a></li>
</ul>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Verilog&amp;action=edit&amp;section=21" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<table class="metadata plainlinks mbox-small" style="border:1px solid #aaa; background-color:#f9f9f9;">
<tr>
<td class="mbox-image"><a href="http://en.wikibooks.org/wiki/Special:Search/Verilog" title="b:Special:Search/Verilog"><img alt="Sister project" src="http://upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/40px-Wikibooks-logo-en-noslogan.svg.png" width="40" height="40" border="0" /></a></td>
<td class="mbox-text" style=""><a href="/wiki/Wikibooks" title="Wikibooks">Wikibooks</a> has a book on the topic of
<div style="margin-left:10px;"><i><b><a href="http://en.wikibooks.org/wiki/Programmable_Logic/Verilog" class="extiw" title="wikibooks:Programmable Logic/Verilog">Programmable Logic/Verilog</a></b></i></div>
</td>
</tr>
</table>
<p><a name="Verilog_Resources" id="Verilog_Resources"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Verilog&amp;action=edit&amp;section=22" title="Edit section: Verilog Resources">edit</a>]</span> <span class="mw-headline">Verilog Resources</span></h3>
<ul>
<li><a href="http://www.testbench.in/tTB_00_INDEX.html" class="external text" title="http://www.testbench.in/tTB_00_INDEX.html" rel="nofollow">www.testbench.in</a> – Verilog for Functional Verification - free online tutorial with many examples.</li>
<li><a href="http://verilog.org/verilog-ams/" class="external text" title="http://verilog.org/verilog-ams/" rel="nofollow">verilog-ams</a> – Accellera Verilog Analog Mixed-Signal Group website.</li>
<li><a href="http://www.asic-world.com/verilog/index.html" class="external text" title="http://www.asic-world.com/verilog/index.html" rel="nofollow">Asic-World</a> – Extensive free online tutorial with many examples.</li>
<li><a href="http://www.verilog.net/" class="external text" title="http://www.verilog.net/" rel="nofollow">Verilog.net</a> – Premiere List of Verilog Resources on the Internet.</li>
<li><a href="http://csit-sun.pub.ro" class="external text" title="http://csit-sun.pub.ro" rel="nofollow">Digital Computer Courses</a> ("Politehnica" University of Bucharest).</li>
<li><cite style="font-style:normal" class="" id="CITEREFQualis_Design_Corporation">Qualis Design Corporation (<span class="mw-formatted-date" title="2000-07-20"><a href="/wiki/2000" title="2000">2000</a>-<a href="/wiki/July_20" title="July 20">07-20</a></span>). <i><a href="http://www.eda.org/rassp/vhdl/guidelines/vlogqrc.pdf" class="external text" title="http://www.eda.org/rassp/vhdl/guidelines/vlogqrc.pdf" rel="nofollow">Verilog HDL quick reference card</a></i>. 1.1. Qualis Design Corporation<span class="printonly">. <a href="http://www.eda.org/rassp/vhdl/guidelines/vlogqrc.pdf" class="external free" title="http://www.eda.org/rassp/vhdl/guidelines/vlogqrc.pdf" rel="nofollow">http://www.eda.org/rassp/vhdl/guidelines/vlogqrc.pdf</a></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Verilog+HDL+quick+reference+card&amp;rft.aulast=Qualis+Design+Corporation&amp;rft.au=Qualis+Design+Corporation&amp;rft.date=%5B%5B2000-07-20%5D%5D&amp;rft.series=1.1&amp;rft.pub=Qualis+Design+Corporation&amp;rft_id=http%3A%2F%2Fwww.eda.org%2Frassp%2Fvhdl%2Fguidelines%2Fvlogqrc.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Verilog"><span style="display: none;">&#160;</span></span></li>
<li><a href="http://www.doulos.com/knowhow/verilog_designers_guide/" class="external text" title="http://www.doulos.com/knowhow/verilog_designers_guide/" rel="nofollow">A Verilog Designers Guide</a> – Doulos. Good for beginners.</li>
<li><a href="http://asic.co.in/Index_files/verilogexamples.htm" class="external text" title="http://asic.co.in/Index_files/verilogexamples.htm" rel="nofollow">Lots of Verilog Examples</a> – asic.co.in.</li>
<li><a href="http://www.sutherland-hdl.com/online_verilog_ref_guide/vlog_ref_top.html" class="external text" title="http://www.sutherland-hdl.com/online_verilog_ref_guide/vlog_ref_top.html" rel="nofollow">Online Verilog-1995 Quick Reference Guide</a> – Stuart Sutherland of Sutherland HDL, Inc.</li>
<li><a href="http://search.cpan.org/search?query=verilog%3A%3Areadmem&amp;mode=all" class="external text" title="http://search.cpan.org/search?query=verilog%3A%3Areadmem&amp;mode=all" rel="nofollow">Perl CPAN module for parsing $readmem files</a></li>
</ul>
<p><a name="Standards_Development" id="Standards_Development"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Verilog&amp;action=edit&amp;section=23" title="Edit section: Standards Development">edit</a>]</span> <span class="mw-headline">Standards Development</span></h3>
<ul>
<li><a href="http://ieeexplore.ieee.org/xpl/standardstoc.jsp?isnumber=20656&amp;isYear=2001" class="external text" title="http://ieeexplore.ieee.org/xpl/standardstoc.jsp?isnumber=20656&amp;isYear=2001" rel="nofollow">IEEE Std 1364-2001</a> – The official standard for Verilog 2001 (not free).</li>
<li><a href="http://www.verilog.com/IEEEVerilog.html" class="external text" title="http://www.verilog.com/IEEEVerilog.html" rel="nofollow">IEEE P1364</a> – Working group for Verilog (inactive).</li>
<li><a href="http://www.eda.org/sv-ieee1800/" class="external text" title="http://www.eda.org/sv-ieee1800/" rel="nofollow">IEEE P1800</a> – Working group for SystemVerilog (replaces above).</li>
<li><a href="http://www.verilog.com/VerilogBNF.html" class="external text" title="http://www.verilog.com/VerilogBNF.html" rel="nofollow">Verilog syntax</a> – A description of the syntax in <a href="/wiki/Backus-Naur_form" title="Backus-Naur form" class="mw-redirect">Backus-Naur form</a>. This predates the IEEE-1364 standard.</li>
<li><a href="http://www.verilog.org/verilog-ams" class="external text" title="http://www.verilog.org/verilog-ams" rel="nofollow">Verilog-AMS</a> – <a href="/wiki/Accellera" title="Accellera">Accellera</a> mixed signal extensions to Verilog</li>
<li><a href="http://www.externsoft.ch/download/verilog.html" class="external text" title="http://www.externsoft.ch/download/verilog.html" rel="nofollow">Verilog 2001 syntax</a> – A heavily linked BNF syntax for Verilog 2001 (generated by <a href="http://www.externsoft.ch/ebnftools.html" class="external text" title="http://www.externsoft.ch/ebnftools.html" rel="nofollow">EBNF tools</a>).</li>
</ul>
<p><a name="Verilog_Tools" id="Verilog_Tools"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Verilog&amp;action=edit&amp;section=24" title="Edit section: Verilog Tools">edit</a>]</span> <span class="mw-headline">Verilog Tools</span></h3>
<ul>
<li><a href="/wiki/NCSim" title="NCSim">NCSim</a></li>
<li><a href="/wiki/Nusym_Technology" title="Nusym Technology">Nusym Technology</a></li>
<li><a href="http://www.synopsys.com/vcs/" class="external text" title="http://www.synopsys.com/vcs/" rel="nofollow">VCS</a> - A fast Verilog simulator, mainly UNIX-based.</li>
<li><a href="http://www.modelsim.com/" class="external text" title="http://www.modelsim.com/" rel="nofollow">ModelSim</a> - A mixed-languages simulator, supporting Verilog-2001 and SystemVerilog.</li>
<li><a href="http://www.aldec.com/" class="external text" title="http://www.aldec.com/" rel="nofollow">Active HDL</a> - A mixed-languages simulator, supporting Verilog-2001 and SystemVerilog.</li>
<li><a href="http://www.zeemz.com/" class="external text" title="http://www.zeemz.com/" rel="nofollow">LogicSim</a> - A low-cost Windows-only Verilog simulator.</li>
<li><a href="http://www.syncad.com/vlg_form.htm" class="external text" title="http://www.syncad.com/vlg_form.htm" rel="nofollow">VeriLogger Extreme</a> - Verilog 2001 simulator for Windows and Unix</li>
<li><a href="http://www.c-to-verilog.com" class="external text" title="http://www.c-to-verilog.com" rel="nofollow">C-to-Verilog</a> - A tool for compiling C into Verilog.</li>
</ul>
<p><a name="Open_Source_Verilog_Tools" id="Open_Source_Verilog_Tools"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Verilog&amp;action=edit&amp;section=25" title="Edit section: Open Source Verilog Tools">edit</a>]</span> <span class="mw-headline">Open Source Verilog Tools</span></h3>
<ul>
<li><a href="http://www.pragmatic-c.com/gpl-cver/" class="external text" title="http://www.pragmatic-c.com/gpl-cver/" rel="nofollow">GPL Cver</a> - An open-source Verilog simulator, supporting Verilog-2001 and the complete <a href="/wiki/Verilog_Procedural_Interface" title="Verilog Procedural Interface">Verilog Procedural Interface</a>.</li>
<li><a href="http://www.iss-us.com/wavevcd/index.htm" class="external text" title="http://www.iss-us.com/wavevcd/index.htm" rel="nofollow">Wave VCD</a> a free vcd waveform viewer for verilog and vhdl. Works with GPL CVer.</li>
<li><a href="http://www.icarus.com/eda/verilog/" class="external text" title="http://www.icarus.com/eda/verilog/" rel="nofollow">Icarus Verilog</a> - An open-source Verilog simulator and synthesis tool, supporting Verilog-2001 and (partially) <a href="/wiki/Verilog_Procedural_Interface" title="Verilog Procedural Interface">Verilog Procedural Interface</a>.</li>
<li><a href="http://www.veripool.org/verilog-mode.html" class="external text" title="http://www.veripool.org/verilog-mode.html" rel="nofollow">Verilog AUTOs</a> - An open-source meta-comment system to simplify maintaining Verilog code.</li>
<li><a href="/wiki/Verilator" title="Verilator">Verilator</a> - Free Verilog to <a href="/wiki/SystemC" title="SystemC">SystemC</a>/C++ compiler and other utilities</li>
<li><a href="http://sourceforge.net/projects/veriwell" class="external text" title="http://sourceforge.net/projects/veriwell" rel="nofollow">Veriwell</a> an <a href="/wiki/Open_source" title="Open source">open source</a> verilog simulation project.</li>
<li><a href="http://www.v-ms.com" class="external text" title="http://www.v-ms.com" rel="nofollow">V-MS</a> an <a href="/wiki/Open_source" title="Open source">open source</a> verilog and verilog-ams (v* mixed-signal) parser/elaborator framework project.</li>
<li><a href="http://covered.sourceforge.net/index.html" class="external text" title="http://covered.sourceforge.net/index.html" rel="nofollow">Covered</a> - A Verilog code coverage analyzer.</li>
</ul>
<p><a name="References" id="References"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Verilog&amp;action=edit&amp;section=26" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h3>
<ul>
<li>Thomas, Donald, Moorby, Phillip "The Verilog Hardware Description Language" Kluwer Academic Publishers, Norwell, MA. <a href="/wiki/Special:BookSources/0792381661" class="internal">ISBN 0-7923-8166-1</a></li>
<li><a href="http://instruct1.cit.cornell.edu/Courses/ece576/Verilog/coding_and_synthesis_with_verilog.pdf" class="external autonumber" title="http://instruct1.cit.cornell.edu/Courses/ece576/Verilog/coding_and_synthesis_with_verilog.pdf" rel="nofollow">[1]</a> Cornell ECE576 Course illustrating synthesis constructs</li>
<li>Janick Bergerdon, "Writing Testbenches: Functional Verification of HDL Models", 2000, <a href="/wiki/Special:BookSources/0792377664" class="internal">ISBN 0-7923-7766-4</a>. (The HDL Testbench Bible)</li>
</ul>


<!-- 
NewPP limit report
Preprocessor node count: 740/1000000
Post-expand include size: 5487/2048000 bytes
Template argument size: 1950/2048000 bytes
Expensive parser function count: 0/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:63863-0!1!0!default!!en!2 and timestamp 20090331084627 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Verilog">http://en.wikipedia.org/wiki/Verilog</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Hardware_description_languages" title="Category:Hardware description languages">Hardware description languages</a></span> | <span dir='ltr'><a href="/wiki/Category:IEEE_DASC_standards" title="Category:IEEE DASC standards">IEEE DASC standards</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_example_code" title="Category:Articles with example code">Articles with example code</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Verilog" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Verilog" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Verilog&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Verilog&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Verilog" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Verilog" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Verilog" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Verilog&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Verilog&amp;oldid=277461656" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Verilog&amp;id=277461656">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/Verilog">Deutsch</a></li>
				<li class="interwiki-es"><a href="http://es.wikipedia.org/wiki/Verilog">Español</a></li>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Verilog">Français</a></li>
				<li class="interwiki-ko"><a href="http://ko.wikipedia.org/wiki/%EB%B2%A0%EB%A6%B4%EB%A1%9C%EA%B7%B8">한국어</a></li>
				<li class="interwiki-it"><a href="http://it.wikipedia.org/wiki/Verilog">Italiano</a></li>
				<li class="interwiki-he"><a href="http://he.wikipedia.org/wiki/%D7%95%D7%A8%D7%99%D7%9C%D7%95%D7%92">עברית</a></li>
				<li class="interwiki-hu"><a href="http://hu.wikipedia.org/wiki/Verilog">Magyar</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/Verilog">日本語</a></li>
				<li class="interwiki-pl"><a href="http://pl.wikipedia.org/wiki/Verilog">Polski</a></li>
				<li class="interwiki-pt"><a href="http://pt.wikipedia.org/wiki/Verilog">Português</a></li>
				<li class="interwiki-ro"><a href="http://ro.wikipedia.org/wiki/Verilog">Română</a></li>
				<li class="interwiki-ru"><a href="http://ru.wikipedia.org/wiki/Verilog">Русский</a></li>
				<li class="interwiki-sv"><a href="http://sv.wikipedia.org/wiki/Verilog">Svenska</a></li>
				<li class="interwiki-tr"><a href="http://tr.wikipedia.org/wiki/Verilog">Türkçe</a></li>
				<li class="interwiki-zh"><a href="http://zh.wikipedia.org/wiki/Verilog_HDL">中文</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 15 March 2009, at 19:10.</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv173 in 0.063 secs. --></body></html>
