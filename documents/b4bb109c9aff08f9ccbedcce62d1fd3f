<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Circular buffer,Buffer (computer science),Data stream,Data structure,Digital waveguide synthesis,Exception handling,FIFO (computing),LIFO (computing),Mmap,Modulo operation,Page (computing)" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Circular_buffer&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Circular_buffer&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Circular buffer - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Circular_buffer";
		var wgTitle = "Circular buffer";
		var wgAction = "view";
		var wgArticleId = "11891734";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 282320133;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
<style type="text/css">/*<![CDATA[*/
.source-cpp {line-height: normal;}
.source-cpp li, .source-cpp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for cpp
 * CSS class: source-cpp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-cpp .de1, .source-cpp .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-cpp  {}
.source-cpp .head {}
.source-cpp .foot {}
.source-cpp .imp {font-weight: bold; color: red;}
.source-cpp .ln-xtra {color: #cc0; background-color: #ffc;}
.source-cpp li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-cpp li.li2 {font-weight: bold;}
.source-cpp .kw1 {color: #0000ff;}
.source-cpp .kw2 {color: #0000ff;}
.source-cpp .kw3 {color: #0000dd;}
.source-cpp .kw4 {color: #0000ff;}
.source-cpp .co1 {color: #ff0000;}
.source-cpp .co2 {color: #339900;}
.source-cpp .coMULTI {color: #ff0000; font-style: italic;}
.source-cpp .es0 {color: #666666; font-weight: bold;}
.source-cpp .br0 {color: #000000;}
.source-cpp .st0 {color: #666666;}
.source-cpp .nu0 {color: #0000dd;}
.source-cpp .me1 {color: #00eeff;}
.source-cpp .me2 {color: #00eeff;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style>		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Circular_buffer skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Circular buffer</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<div class="thumb tright">
<div class="thumbinner" style="width:202px;"><a href="/wiki/File:Circular_buffer.svg" class="image" title="A ring showing, conceptually, a circular buffer.  This visually shows that the buffer has no real end and it can loop around the buffer.  However, since memory is never physically created as a ring, a linear representation is generally used as is done below."><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/b/b7/Circular_buffer.svg/200px-Circular_buffer.svg.png" width="200" height="200" border="0" class="thumbimage" /></a>
<div class="thumbcaption">
<div class="magnify"><a href="/wiki/File:Circular_buffer.svg" class="internal" title="Enlarge"><img src="/skins-1.5/common/images/magnify-clip.png" width="15" height="11" alt="" /></a></div>
A ring showing, conceptually, a circular buffer. This visually shows that the buffer has no real end and it can loop around the buffer. However, since memory is never physically created as a ring, a linear representation is generally used as is done below.</div>
</div>
</div>
<p>A <b>circular buffer</b> or <b>ring buffer</b> is a <a href="/wiki/Data_structure" title="Data structure">data structure</a> that uses a single, fixed-size <a href="/wiki/Buffer_(computer_science)" title="Buffer (computer science)" class="mw-redirect">buffer</a> as if it were connected end-to-end. This structure lends itself easily to buffering <a href="/wiki/Data_stream" title="Data stream">data streams</a>.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Uses"><span class="tocnumber">1</span> <span class="toctext">Uses</span></a></li>
<li class="toclevel-1"><a href="#How_it_works"><span class="tocnumber">2</span> <span class="toctext">How it works</span></a></li>
<li class="toclevel-1"><a href="#Circular_buffer_mechanics"><span class="tocnumber">3</span> <span class="toctext">Circular buffer mechanics</span></a>
<ul>
<li class="toclevel-2"><a href="#Start_.2F_End_Pointers"><span class="tocnumber">3.1</span> <span class="toctext">Start / End Pointers</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Difficulties"><span class="tocnumber">4</span> <span class="toctext">Difficulties</span></a>
<ul>
<li class="toclevel-2"><a href="#Full_.2F_Empty_Buffer_Distinction"><span class="tocnumber">4.1</span> <span class="toctext">Full / Empty Buffer Distinction</span></a>
<ul>
<li class="toclevel-3"><a href="#Always_Keep_One_Byte_Open"><span class="tocnumber">4.1.1</span> <span class="toctext">Always Keep One Byte Open</span></a></li>
<li class="toclevel-3"><a href="#Use_a_Fill_Count"><span class="tocnumber">4.1.2</span> <span class="toctext">Use a Fill Count</span></a></li>
<li class="toclevel-3"><a href="#Read_.2F_Write_Counts"><span class="tocnumber">4.1.3</span> <span class="toctext">Read / Write Counts</span></a></li>
<li class="toclevel-3"><a href="#Absolute_indices"><span class="tocnumber">4.1.4</span> <span class="toctext">Absolute indices</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#Multiple_Read_Pointers"><span class="tocnumber">4.2</span> <span class="toctext">Multiple Read Pointers</span></a></li>
<li class="toclevel-2"><a href="#Chunked_Buffer"><span class="tocnumber">4.3</span> <span class="toctext">Chunked Buffer</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Optimization"><span class="tocnumber">5</span> <span class="toctext">Optimization</span></a>
<ul>
<li class="toclevel-2"><a href="#Exemplary_POSIX_Implementation"><span class="tocnumber">5.1</span> <span class="toctext">Exemplary POSIX Implementation</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">6</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Uses" id="Uses"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Circular_buffer&amp;action=edit&amp;section=1" title="Edit section: Uses">edit</a>]</span> <span class="mw-headline">Uses</span></h2>
<p>An example that could possibly use an overwriting circular buffer is with multimedia. If the buffer is used as the bounded buffer in the <a href="/wiki/Producer-consumer_problem" title="Producer-consumer problem">producer-consumer problem</a> then it is probably desired for the producer (e.g., an audio generator) to overwrite old data if the consumer (e.g., the <a href="/wiki/Sound_card" title="Sound card">sound card</a>) is unable to momentarily keep up. Another example is the <a href="/wiki/Digital_waveguide_synthesis" title="Digital waveguide synthesis">digital waveguide synthesis</a> method which uses circular buffers to efficiently simulate the sound of <a href="/wiki/Vibrating_strings" title="Vibrating strings" class="mw-redirect">vibrating strings</a> or <a href="/wiki/Wind_instruments" title="Wind instruments" class="mw-redirect">wind instruments</a>.</p>
<p>The "prized" attribute of a circular buffer is that it does not need to have its elements shuffled around when one is consumed. (If a non-circular buffer were used then it would be necessary to shift all elements when one is consumed.) In other words, the circular buffer is well suited as a <a href="/wiki/FIFO_(computing)" title="FIFO (computing)">FIFO</a> buffer while a standard, non-circular buffer is well suited as a <a href="/wiki/LIFO_(computing)" title="LIFO (computing)">LIFO</a> buffer.</p>
<p><a name="How_it_works" id="How_it_works"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Circular_buffer&amp;action=edit&amp;section=2" title="Edit section: How it works">edit</a>]</span> <span class="mw-headline">How it works</span></h2>
<p>A circular buffer first starts empty and of some predefined length. For example, this is a 7-element buffer:</p>
<dl>
<dd><a href="/wiki/File:Circular_buffer_-_empty.svg" class="image" title="Circular buffer - empty.svg"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/f/f7/Circular_buffer_-_empty.svg/250px-Circular_buffer_-_empty.svg.png" width="250" height="54" border="0" /></a></dd>
</dl>
<p>Assume that a 1 is written into the middle of the buffer (exact starting location does not matter in a circular buffer):</p>
<dl>
<dd><a href="/wiki/File:Circular_buffer_-_XX1XXXX.svg" class="image" title="Circular buffer - XX1XXXX.svg"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/8/89/Circular_buffer_-_XX1XXXX.svg/250px-Circular_buffer_-_XX1XXXX.svg.png" width="250" height="54" border="0" /></a></dd>
</dl>
<p>Then assume that two more elements are added — 2 &amp; 3 — which get appended after the 1:</p>
<dl>
<dd><a href="/wiki/File:Circular_buffer_-_XX123XX.svg" class="image" title="Circular buffer - XX123XX.svg"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/d/d7/Circular_buffer_-_XX123XX.svg/250px-Circular_buffer_-_XX123XX.svg.png" width="250" height="54" border="0" /></a></dd>
</dl>
<p>If two elements are then removed from the buffer then they come from the end. The two elements removed, in this case, are 1 &amp; 2 leaving the buffer with just a 3:</p>
<dl>
<dd><a href="/wiki/File:Circular_buffer_-_XXXX3XX.svg" class="image" title="Circular buffer - XXXX3XX.svg"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/1/11/Circular_buffer_-_XXXX3XX.svg/250px-Circular_buffer_-_XXXX3XX.svg.png" width="250" height="54" border="0" /></a></dd>
</dl>
<p>If the buffer has 7 elements then it is completely full:</p>
<dl>
<dd><a href="/wiki/File:Circular_buffer_-_6789345.svg" class="image" title="Circular buffer - 6789345.svg"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/6/67/Circular_buffer_-_6789345.svg/250px-Circular_buffer_-_6789345.svg.png" width="250" height="54" border="0" /></a></dd>
</dl>
<p>A consequence of the circular buffer is that when it is full and a subsequent write is performed, then it starts overwriting the oldest data. In this case, two more elements — A &amp; B — are added and they <i>overwrite</i> then 3 &amp; 4:</p>
<dl>
<dd><a href="/wiki/File:Circular_buffer_-_6789AB5.svg" class="image" title="Circular buffer - 6789AB5.svg"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/b/ba/Circular_buffer_-_6789AB5.svg/250px-Circular_buffer_-_6789AB5.svg.png" width="250" height="54" border="0" /></a></dd>
</dl>
<p>Alternatively, the routines that manage the buffer could easily not allow data to be overwritten and return an error or raise an <a href="/wiki/Exception_handling" title="Exception handling">exception</a>. Whether or not data is overwritten is up to the semantics of the buffer routines or the application using the circular buffer.</p>
<p>Finally, if after overwriting elements two elements are removed then what would be returned is <b>not</b> 3 &amp; 4 but 5 &amp; 6 because A &amp; B overwrote the 3 &amp; the 4 yielding the buffer with:</p>
<dl>
<dd><a href="/wiki/File:Circular_buffer_-_X789ABX.svg" class="image" title="Circular buffer - X789ABX.svg"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/4/43/Circular_buffer_-_X789ABX.svg/250px-Circular_buffer_-_X789ABX.svg.png" width="250" height="54" border="0" /></a></dd>
</dl>
<p><a name="Circular_buffer_mechanics" id="Circular_buffer_mechanics"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Circular_buffer&amp;action=edit&amp;section=3" title="Edit section: Circular buffer mechanics">edit</a>]</span> <span class="mw-headline">Circular buffer mechanics</span></h2>
<p>What is not shown in the example above is the mechanics of how the circular buffer is managed.</p>
<p><a name="Start_.2F_End_Pointers" id="Start_.2F_End_Pointers"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Circular_buffer&amp;action=edit&amp;section=4" title="Edit section: Start / End Pointers">edit</a>]</span> <span class="mw-headline">Start / End Pointers</span></h3>
<p>Generally, a circular buffer requires three <a href="/wiki/Pointer_(computing)" title="Pointer (computing)">pointers</a>:</p>
<ul>
<li>one to the actual buffer in memory</li>
<li>one to point to the start of valid data</li>
<li>one to point to the end of valid data</li>
</ul>
<p>Alternatively, a fixed-length buffer with two integers to keep track of indices can be used in languages that do not have pointers.</p>
<p>Taking a couple of examples from above. (While there are numerous ways to label the pointers and exact semantics can vary, this is one way to do it.)</p>
<p>This image shows a partially-full buffer:</p>
<dl>
<dd><a href="/wiki/File:Circular_buffer_-_XX123XX_with_pointers.svg" class="image" title="Circular buffer - XX123XX with pointers.svg"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/0/02/Circular_buffer_-_XX123XX_with_pointers.svg/250px-Circular_buffer_-_XX123XX_with_pointers.svg.png" width="250" height="54" border="0" /></a></dd>
</dl>
<p>This image shows a full buffer with two elements having been overwritten:</p>
<dl>
<dd><a href="/wiki/File:Circular_buffer_-_6789AB5_with_pointers.svg" class="image" title="Circular buffer - 6789AB5 with pointers.svg"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/0/05/Circular_buffer_-_6789AB5_with_pointers.svg/250px-Circular_buffer_-_6789AB5_with_pointers.svg.png" width="250" height="54" border="0" /></a></dd>
</dl>
<p>What to note about the second one is that after each element is overwritten then the start pointer is incremented as well.</p>
<p><a name="Difficulties" id="Difficulties"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Circular_buffer&amp;action=edit&amp;section=5" title="Edit section: Difficulties">edit</a>]</span> <span class="mw-headline">Difficulties</span></h2>
<p><a name="Full_.2F_Empty_Buffer_Distinction" id="Full_.2F_Empty_Buffer_Distinction"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Circular_buffer&amp;action=edit&amp;section=6" title="Edit section: Full / Empty Buffer Distinction">edit</a>]</span> <span class="mw-headline">Full / Empty Buffer Distinction</span></h3>
<p>Some small disadvantage of relying on pointers or relative indices of the start and end of data is, that in the case the buffer is entirely full, both pointers pointing at the same element:</p>
<dl>
<dd><a href="/wiki/File:Circular_buffer_-_6789AB5_full.svg" class="image" title="Circular buffer - 6789AB5 full.svg"><img alt="" src="http://upload.wikimedia.org/wikipedia/en/thumb/f/f4/Circular_buffer_-_6789AB5_full.svg/250px-Circular_buffer_-_6789AB5_full.svg.png" width="250" height="54" border="0" /></a></dd>
</dl>
<p>This is exactly the same situation as when the buffer is empty:</p>
<dl>
<dd><a href="/wiki/File:Circular_buffer_-_6789AB5_empty.svg" class="image" title="Circular buffer - 6789AB5 empty.svg"><img alt="" src="http://upload.wikimedia.org/wikipedia/en/thumb/1/11/Circular_buffer_-_6789AB5_empty.svg/250px-Circular_buffer_-_6789AB5_empty.svg.png" width="250" height="54" border="0" /></a></dd>
</dl>
<p>To solve this problem there are a number of solutions:</p>
<ul>
<li>Always keep one byte open.</li>
<li>Use a fill count to distinguish the two cases.</li>
<li>Use read and write counts to get the fill count from.</li>
<li>Use absolute indices.</li>
</ul>
<p><a name="Always_Keep_One_Byte_Open" id="Always_Keep_One_Byte_Open"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Circular_buffer&amp;action=edit&amp;section=7" title="Edit section: Always Keep One Byte Open">edit</a>]</span> <span class="mw-headline">Always Keep One Byte Open</span></h4>
<p>This simple solution always keeps one byte unallocated. A full buffer has at most <span class="texhtml">(size − 1)</span> bytes. If both pointers are pointing at the same location, the buffer is empty.</p>
<p>The advantages are:</p>
<ul>
<li>Very simple and robust.</li>
<li>You need only the two pointers.</li>
</ul>
<p>The disadvantages are:</p>
<ul>
<li>You can never use the entire buffer.</li>
<li>If you cannot read over the buffer border, you get a lot of situations where you can only read one element at once.</li>
</ul>
<p><a name="Use_a_Fill_Count" id="Use_a_Fill_Count"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Circular_buffer&amp;action=edit&amp;section=8" title="Edit section: Use a Fill Count">edit</a>]</span> <span class="mw-headline">Use a Fill Count</span></h4>
<p>The second simplest solution is to use a fill count. The fill count is implemented as an additional variable which keeps the number of readable bytes in the buffer. This variable has to be increased if the write (end) pointer is moved, and to be decreased if the read (start) pointer is moved.</p>
<p>In the situation if both pointers pointing at the same location, you consider the fill count to distinguish if the buffer is empty or full.</p>
<ul>
<li>Note: When using <a href="/wiki/Semaphore_(programming)" title="Semaphore (programming)">semaphores</a> in a <a href="/wiki/Producer-consumer_problem" title="Producer-consumer problem">Producer-consumer</a> model, the semaphores act as a fill count.</li>
</ul>
<p>The advantages are:</p>
<ul>
<li>Simple.</li>
<li>Needs only one additional variable.</li>
</ul>
<p>The disadvantage is:</p>
<ul>
<li>You need to keep track of a third variable. This can require complex logic, especially if you are working with different <a href="/wiki/Thread_(computer_science)" title="Thread (computer science)">threads</a>.</li>
</ul>
<p>Alternately, you can replace the second pointer with the fill count and generate the second pointer as required by incrementing the first pointer by the fill count.</p>
<p>The advantages are:</p>
<ul>
<li>Simple.</li>
<li>No additional variables.</li>
</ul>
<p>The disadvantage is:</p>
<ul>
<li>Additional overhead when generating the write pointer.</li>
</ul>
<p><a name="Read_.2F_Write_Counts" id="Read_.2F_Write_Counts"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Circular_buffer&amp;action=edit&amp;section=9" title="Edit section: Read / Write Counts">edit</a>]</span> <span class="mw-headline">Read / Write Counts</span></h4>
<p>Another solution is to keep counts of the number of items written to and read from the circular buffer. Both counts are stored in unsigned integer variables with numerical limits larger than the number of items that can be stored and are allowed to wrap freely from their limit back to zero.</p>
<p>The unsigned difference (write_count - read_count) always yields the number of items placed in the buffer and not yet retrieved. This can indicate that the buffer is empty, partially full, completely full (without waste of a storage location) or in a state of overrun.</p>
<p>The advantage is:</p>
<ul>
<li>The source and sink of data can implement independent policies for dealing with a full buffer and overrun while adhering to the rule that only the source of data modifies the write count and only the sink of data modifies the read count. This can result in elegant and robust circular buffer implementations even in multi-threaded environments.</li>
</ul>
<p>The disadvantage is:</p>
<ul>
<li>You need two additional variables.</li>
</ul>
<p><a name="Absolute_indices" id="Absolute_indices"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Circular_buffer&amp;action=edit&amp;section=10" title="Edit section: Absolute indices">edit</a>]</span> <span class="mw-headline">Absolute indices</span></h4>
<p>If indices are used instead of pointers, indices can store read/write counts instead of the offset from start of the buffer. This is similar to the above solution, except that there are no separate variables, and relative indices are obtained on the fly by division <a href="/wiki/Modulo_operation" title="Modulo operation">modulo</a> the buffer's length.</p>
<p>The advantage is:</p>
<ul>
<li>No extra variables are needed.</li>
</ul>
<p>The disadvantages are:</p>
<ul>
<li>Every access needs an additional <i>modulo</i> operation.</li>
<li>If counter wrap is possible, complex logic can be needed if the buffer's length is not a divisor of the counter's capacity.</li>
</ul>
<p>On binary computers, both of these disadvantages disappear if the buffer's length is a power of two -- at the cost of a constraint on possible buffers lengths.</p>
<p><a name="Multiple_Read_Pointers" id="Multiple_Read_Pointers"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Circular_buffer&amp;action=edit&amp;section=11" title="Edit section: Multiple Read Pointers">edit</a>]</span> <span class="mw-headline">Multiple Read Pointers</span></h3>
<p>A little bit more complex are multiple read pointers on the same circular buffer. This is useful if you have <i>n</i> threads, which are reading from the same buffer, but <i>one</i> thread writing to the buffer.</p>
<p><a name="Chunked_Buffer" id="Chunked_Buffer"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Circular_buffer&amp;action=edit&amp;section=12" title="Edit section: Chunked Buffer">edit</a>]</span> <span class="mw-headline">Chunked Buffer</span></h3>
<p>Much more complex are different chunks of data in the same circular buffer. The writer is not only writing elements to the buffer, it also assigns these elements to chunks.</p>
<p>The reader should not only be able to read from the buffer, it should also get informed about the chunk borders.</p>
<p>Example: The writer is reading data from small files, writing them into the same circular buffer. The reader is reading the data, but needs to know when and which file is starting at a given position.</p>
<p><a name="Optimization" id="Optimization"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Circular_buffer&amp;action=edit&amp;section=13" title="Edit section: Optimization">edit</a>]</span> <span class="mw-headline">Optimization</span></h2>
<p>A circular-buffer implementation may be optimized by <a href="/wiki/Mmap" title="Mmap">mapping</a> the underlying buffer to two contiguous regions of <a href="/wiki/Virtual_memory" title="Virtual memory">virtual memory</a>. (Naturally, the underlying buffer‘s length must then equal some multiple of the system’s <a href="/wiki/Page_(computing)" title="Page (computing)">page size</a>.) Reading from and writing to the circular buffer may then be carried out with greater efficiency by means of direct memory access; those accesses which fall beyond the end of the first virtual-memory region will automatically wrap around to the beginning of the underlying buffer. When the read offset is advanced into the second virtual-memory region, both offsets—read and write—are decremented by the length of the underlying buffer.</p>
<p><a name="Exemplary_POSIX_Implementation" id="Exemplary_POSIX_Implementation"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Circular_buffer&amp;action=edit&amp;section=14" title="Edit section: Exemplary POSIX Implementation">edit</a>]</span> <span class="mw-headline">Exemplary POSIX Implementation</span></h3>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
<span class="co2">#include &lt;sys/mman.h&gt;</span>
<span class="co2">#include &lt;stdlib.h&gt;</span>
<span class="co2">#include &lt;unistd.h&gt;</span>
 
<span class="co2">#define report_exceptional_condition() abort ()</span>
 
<span class="kw4">struct</span> ring_buffer
<span class="br0">{</span>
  <span class="kw4">void</span> *address;
 
  <span class="kw4">unsigned</span> <span class="kw4">long</span> count_bytes;
  <span class="kw4">unsigned</span> <span class="kw4">long</span> write_offset_bytes;
  <span class="kw4">unsigned</span> <span class="kw4">long</span> read_offset_bytes;
<span class="br0">}</span>;
 
<span class="kw4">void</span>
ring_buffer_create <span class="br0">(</span><span class="kw4">struct</span> ring_buffer *buffer, <span class="kw4">unsigned</span> <span class="kw4">long</span> order<span class="br0">)</span>
<span class="br0">{</span>
  <span class="kw4">char</span> path<span class="br0">[</span><span class="br0">]</span> = <span class="st0">"/dev/shm/ring-buffer-XXXXXX"</span>;
  <span class="kw4">int</span> file_descriptor;
  <span class="kw4">void</span> *address;
  <span class="kw4">int</span> status;
 
  file_descriptor = mkstemp <span class="br0">(</span>path<span class="br0">)</span>;
  <span class="kw1">if</span> <span class="br0">(</span>file_descriptor &lt; <span class="nu0">0</span><span class="br0">)</span>
    report_exceptional_condition <span class="br0">(</span><span class="br0">)</span>;
 
  status = unlink <span class="br0">(</span>path<span class="br0">)</span>;
  <span class="kw1">if</span> <span class="br0">(</span>status<span class="br0">)</span>
    report_exceptional_condition <span class="br0">(</span><span class="br0">)</span>;
 
  buffer-&gt;count_bytes = 1UL &lt;&lt; order;
  buffer-&gt;write_offset_bytes = <span class="nu0">0</span>;
  buffer-&gt;read_offset_bytes = <span class="nu0">0</span>;
 
  status = ftruncate <span class="br0">(</span>file_descriptor, buffer-&gt;count_bytes<span class="br0">)</span>;
  <span class="kw1">if</span> <span class="br0">(</span>status<span class="br0">)</span>
    report_exceptional_condition <span class="br0">(</span><span class="br0">)</span>;
 
  buffer-&gt;address = mmap <span class="br0">(</span><span class="kw2">NULL</span>, buffer-&gt;count_bytes &lt;&lt; <span class="nu0">1</span>, PROT_NONE,
                          MAP_ANONYMOUS | MAP_PRIVATE, <span class="nu0">-1</span>, <span class="nu0">0</span><span class="br0">)</span>;
 
  <span class="kw1">if</span> <span class="br0">(</span>buffer-&gt;address == MAP_FAILED<span class="br0">)</span>
    report_exceptional_condition <span class="br0">(</span><span class="br0">)</span>;
 
  address =
    mmap <span class="br0">(</span>buffer-&gt;address, buffer-&gt;count_bytes, PROT_READ | PROT_WRITE,
          MAP_FIXED | MAP_SHARED, file_descriptor, <span class="nu0">0</span><span class="br0">)</span>;
 
  <span class="kw1">if</span> <span class="br0">(</span>address != buffer-&gt;address<span class="br0">)</span>
    report_exceptional_condition <span class="br0">(</span><span class="br0">)</span>;
 
  address = mmap <span class="br0">(</span>buffer-&gt;address + buffer-&gt;count_bytes,
                  buffer-&gt;count_bytes, PROT_READ | PROT_WRITE,
                  MAP_FIXED | MAP_SHARED, file_descriptor, <span class="nu0">0</span><span class="br0">)</span>;
 
  <span class="kw1">if</span> <span class="br0">(</span>address != buffer-&gt;address + buffer-&gt;count_bytes<span class="br0">)</span>
    report_exceptional_condition <span class="br0">(</span><span class="br0">)</span>;
 
  status = close <span class="br0">(</span>file_descriptor<span class="br0">)</span>;
  <span class="kw1">if</span> <span class="br0">(</span>status<span class="br0">)</span>
    report_exceptional_condition <span class="br0">(</span><span class="br0">)</span>;
<span class="br0">}</span>
 
<span class="kw4">void</span>
ring_buffer_free <span class="br0">(</span><span class="kw4">struct</span> ring_buffer *buffer<span class="br0">)</span>
<span class="br0">{</span>
  <span class="kw4">int</span> status;
 
  status = munmap <span class="br0">(</span>buffer-&gt;address, buffer-&gt;count_bytes &lt;&lt; <span class="nu0">1</span><span class="br0">)</span>;
  <span class="kw1">if</span> <span class="br0">(</span>status<span class="br0">)</span>
    report_exceptional_condition <span class="br0">(</span><span class="br0">)</span>;
<span class="br0">}</span>
 
<span class="kw4">void</span> *
ring_buffer_write_address <span class="br0">(</span><span class="kw4">struct</span> ring_buffer *buffer<span class="br0">)</span>
<span class="br0">{</span>
  <span class="kw1">return</span> buffer-&gt;address + buffer-&gt;write_offset_bytes; <span class="coMULTI">/*** void pointer arithmetic is a constraint violation. ***/</span>
<span class="br0">}</span>
 
<span class="kw4">void</span>
ring_buffer_write_advance <span class="br0">(</span><span class="kw4">struct</span> ring_buffer *buffer,
                           <span class="kw4">unsigned</span> <span class="kw4">long</span> count_bytes<span class="br0">)</span>
<span class="br0">{</span>
  buffer-&gt;write_offset_bytes += count_bytes;
<span class="br0">}</span>
 
<span class="kw4">void</span> *
ring_buffer_read_address <span class="br0">(</span><span class="kw4">struct</span> ring_buffer *buffer<span class="br0">)</span>
<span class="br0">{</span>
  <span class="kw1">return</span> buffer-&gt;address + buffer-&gt;read_offset_bytes;
<span class="br0">}</span>
 
<span class="kw4">void</span>
ring_buffer_read_advance <span class="br0">(</span><span class="kw4">struct</span> ring_buffer *buffer,
                          <span class="kw4">unsigned</span> <span class="kw4">long</span> count_bytes<span class="br0">)</span>
<span class="br0">{</span>
  buffer-&gt;read_offset_bytes += count_bytes;
 
  <span class="kw1">if</span> <span class="br0">(</span>buffer-&gt;read_offset_bytes &gt;= buffer-&gt;count_bytes<span class="br0">)</span>
    <span class="br0">{</span>
      buffer-&gt;read_offset_bytes -= buffer-&gt;count_bytes;
      buffer-&gt;write_offset_bytes -= buffer-&gt;count_bytes;
    <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="kw4">unsigned</span> <span class="kw4">long</span>
ring_buffer_count_bytes <span class="br0">(</span><span class="kw4">struct</span> ring_buffer *buffer<span class="br0">)</span>
<span class="br0">{</span>
  <span class="kw1">return</span> buffer-&gt;write_offset_bytes - buffer-&gt;read_offset_bytes;
<span class="br0">}</span>
 
<span class="kw4">unsigned</span> <span class="kw4">long</span>
ring_buffer_count_free_bytes <span class="br0">(</span><span class="kw4">struct</span> ring_buffer *buffer<span class="br0">)</span>
<span class="br0">{</span>
  <span class="kw1">return</span> buffer-&gt;count_bytes - ring_buffer_count_bytes <span class="br0">(</span>buffer<span class="br0">)</span>;
<span class="br0">}</span>
 
<span class="kw4">void</span>
ring_buffer_clear <span class="br0">(</span><span class="kw4">struct</span> ring_buffer *buffer<span class="br0">)</span>
<span class="br0">{</span>
  buffer-&gt;write_offset_bytes = <span class="nu0">0</span>;
  buffer-&gt;read_offset_bytes = <span class="nu0">0</span>;
<span class="br0">}</span>
</pre></div>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Circular_buffer&amp;action=edit&amp;section=15" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<ul>
<li><a href="http://c2.com/cgi/wiki?CircularBuffer" class="external free" title="http://c2.com/cgi/wiki?CircularBuffer" rel="nofollow">http://c2.com/cgi/wiki?CircularBuffer</a></li>
<li><a href="http://www.codeproject.com/internet/bipbuffer.asp" class="external text" title="http://www.codeproject.com/internet/bipbuffer.asp" rel="nofollow">The Bip Buffer - The Circular Buffer with a Twist</a></li>
<li><a href="http://www.boost.org/libs/circular_buffer/index.html" class="external free" title="http://www.boost.org/libs/circular_buffer/index.html" rel="nofollow">http://www.boost.org/libs/circular_buffer/index.html</a></li>
<li><a href="http://zone.ni.com/devzone/cda/tut/p/id/7188" class="external text" title="http://zone.ni.com/devzone/cda/tut/p/id/7188" rel="nofollow">Circular Buffer - A LabVIEW Implementation</a></li>
<li><a href="http://www.dspguide.com/ch28/2.htm" class="external free" title="http://www.dspguide.com/ch28/2.htm" rel="nofollow">http://www.dspguide.com/ch28/2.htm</a></li>
</ul>


<!-- 
NewPP limit report
Preprocessor node count: 22/1000000
Post-expand include size: 0/2048000 bytes
Template argument size: 0/2048000 bytes
Expensive parser function count: 0/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:11891734-0!1!0!default!!en!2 and timestamp 20090417144548 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Circular_buffer">http://en.wikipedia.org/wiki/Circular_buffer</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Computer_memory" title="Category:Computer memory">Computer memory</a></span> | <span dir='ltr'><a href="/wiki/Category:Arrays" title="Category:Arrays">Arrays</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Circular_buffer" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Circular_buffer" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Circular_buffer&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Circular_buffer&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Circular_buffer" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Circular_buffer" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Circular_buffer" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Circular_buffer&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Circular_buffer&amp;oldid=282320133" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Circular_buffer&amp;id=282320133">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/%E3%83%AA%E3%83%B3%E3%82%B0%E3%83%90%E3%83%83%E3%83%95%E3%82%A1">日本語</a></li>
				<li class="interwiki-pl"><a href="http://pl.wikipedia.org/wiki/Bufor_cykliczny">Polski</a></li>
				<li class="interwiki-fi"><a href="http://fi.wikipedia.org/wiki/Rengaspuskuri">Suomi</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 7 April 2009, at 11:42 (UTC).</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv170 in 0.059 secs. --></body></html>
