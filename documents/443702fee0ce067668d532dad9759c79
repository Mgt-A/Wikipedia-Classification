<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="VHDL,Special:Search/VHDL,2000,2007,ASIC,Ada (programming language),Application-specific integrated circuit,Array,Bit,Boolean datatype,CPLD" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=VHDL&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=VHDL&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>VHDL - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "VHDL";
		var wgTitle = "VHDL";
		var wgAction = "view";
		var wgArticleId = "43410";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 279635665;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
<style type="text/css">/*<![CDATA[*/
.source-vhdl {line-height: normal;}
.source-vhdl li, .source-vhdl pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for vhdl
 * CSS class: source-vhdl, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-vhdl .de1, .source-vhdl .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-vhdl  {}
.source-vhdl .head {}
.source-vhdl .foot {}
.source-vhdl .imp {font-weight: bold; color: red;}
.source-vhdl .ln-xtra {color: #cc0; background-color: #ffc;}
.source-vhdl li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-vhdl li.li2 {font-weight: bold;}
.source-vhdl .kw1 {color: #000000; font-weight: bold;}
.source-vhdl .kw2 {color: #aa0000;}
.source-vhdl .co1 {color: #adadad; font-style: italic;}
.source-vhdl .es0 {color: #000099; font-weight: bold;}
.source-vhdl .br0 {color: #66cc66;}
.source-vhdl .st0 {color: #7f007f;}
.source-vhdl .nu0 {color: #ff0000;}
.source-vhdl .re0 {color: #ff0000;}
.source-vhdl .re1 {color: #ff0000;}
.source-vhdl .re2 {color: #ff0000;}
.source-vhdl .re3 {color: #ff0000;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style>		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-VHDL skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">VHDL</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<table class="infobox vevent" cellspacing="5" style="width: 22em; text-align: left; font-size: 88%; line-height: 1.5em;">
<caption class="summary" style="font-size: 125%; font-weight: bold;">VHDL</caption>
<tr>
<th style=""><a href="/wiki/Programming_paradigm" title="Programming paradigm">Paradigm</a></th>
<td class="" style="">behavioural</td>
</tr>
<tr>
<th style="">Appeared in</th>
<td class="" style="">1980s</td>
</tr>
<tr>
<th style=""><a href="/wiki/Type_system" title="Type system">Typing discipline</a></th>
<td class="" style=""><a href="/wiki/Strongly-typed_programming_language" title="Strongly-typed programming language">strong</a></td>
</tr>
<tr>
<th style=""><a href="/wiki/Website" title="Website">Website</a></th>
<td class="" style=""><a href="http://www.eda.org/vasg/" class="external text" title="http://www.eda.org/vasg/" rel="nofollow">IEEE VASG</a></td>
</tr>
</table>
<p><b>VHDL</b> (<a href="/wiki/VHSIC" title="VHSIC">VHSIC</a> (Very High Speed Integrated Circuits) <a href="/wiki/Hardware_description_language" title="Hardware description language">hardware description language</a>) is commonly used as a design-entry language for <a href="/wiki/Field-programmable_gate_array" title="Field-programmable gate array">field-programmable gate arrays</a> and <a href="/wiki/Application-specific_integrated_circuit" title="Application-specific integrated circuit">application-specific integrated circuits</a> in <a href="/wiki/Electronic_design_automation" title="Electronic design automation">electronic design automation</a> of <a href="/wiki/Digital_circuit" title="Digital circuit" class="mw-redirect">digital circuits</a>.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#History"><span class="tocnumber">1</span> <span class="toctext">History</span></a></li>
<li class="toclevel-1"><a href="#Design"><span class="tocnumber">2</span> <span class="toctext">Design</span></a></li>
<li class="toclevel-1"><a href="#Getting_started"><span class="tocnumber">3</span> <span class="toctext">Getting started</span></a></li>
<li class="toclevel-1"><a href="#Code_examples"><span class="tocnumber">4</span> <span class="toctext">Code examples</span></a>
<ul>
<li class="toclevel-2"><a href="#Synthesizeable_constructs_and_VHDL_templates"><span class="tocnumber">4.1</span> <span class="toctext">Synthesizeable constructs and VHDL templates</span></a></li>
<li class="toclevel-2"><a href="#MUX_templates"><span class="tocnumber">4.2</span> <span class="toctext">MUX templates</span></a></li>
<li class="toclevel-2"><a href="#Latch_templates"><span class="tocnumber">4.3</span> <span class="toctext">Latch templates</span></a></li>
<li class="toclevel-2"><a href="#D-type_flip-flops"><span class="tocnumber">4.4</span> <span class="toctext">D-type flip-flops</span></a></li>
<li class="toclevel-2"><a href="#The_counter_example"><span class="tocnumber">4.5</span> <span class="toctext">The counter example</span></a></li>
<li class="toclevel-2"><a href="#Simulation-only_constructs"><span class="tocnumber">4.6</span> <span class="toctext">Simulation-only constructs</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">5</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">6</span> <span class="toctext">External links</span></a></li>
<li class="toclevel-1"><a href="#Further_reading"><span class="tocnumber">7</span> <span class="toctext">Further reading</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="History" id="History"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=VHDL&amp;action=edit&amp;section=1" title="Edit section: History">edit</a>]</span> <span class="mw-headline">History</span></h2>
<p>VHDL was originally developed at the behest of the <a href="/wiki/United_States" title="United States">US</a> <a href="/wiki/United_States_Department_of_Defense" title="United States Department of Defense">Department of Defense</a> in order to document the behavior of the <a href="/wiki/Application-specific_integrated_circuit" title="Application-specific integrated circuit">ASICs</a> that supplier companies were including in equipment. That is to say, VHDL was developed as an alternative to huge, complex manuals which were subject to implementation-specific details.</p>
<p>The idea of being able to simulate this documentation was so obviously attractive that <a href="/wiki/Logic_simulation" title="Logic simulation">logic simulators</a> were developed that could read the VHDL files. The next step was the development of <a href="/wiki/Logic_synthesis" title="Logic synthesis">logic synthesis</a> tools that read the VHDL, and output a definition of the physical implementation of the circuit. Modern synthesis tools can extract <a href="/wiki/Random_Access_Memory" title="Random Access Memory" class="mw-redirect">RAM</a>, <a href="/wiki/Counter" title="Counter">counter</a>, and arithmetic blocks out of the code, and implement them according to what the user specifies. Thus, the same VHDL code could be synthesized differently for lowest area, lowest <a href="/wiki/Low-power_electronics" title="Low-power electronics">power</a> consumption, highest clock speed, or other requirements.</p>
<p>VHDL borrows heavily from the <a href="/wiki/Ada_(programming_language)" title="Ada (programming language)">Ada programming language</a> in both concepts (for example, the slice notation for indexing part of a one-dimensional array) and <a href="/wiki/Syntax" title="Syntax">syntax</a>. VHDL has constructs to handle the <a href="/wiki/Parallel_computing" title="Parallel computing">parallelism</a> inherent in hardware designs, but these constructs (processes) differ in syntax from the parallel constructs in Ada (tasks). Like Ada, VHDL is <a href="/wiki/Strongly-typed" title="Strongly-typed" class="mw-redirect">strongly-typed</a> and is not <a href="/wiki/Case_sensitivity" title="Case sensitivity">case sensitive</a>. There are many features of VHDL which are not found in Ada, such as an extended set of Boolean operators including <b>nand</b> and <b>nor</b>, in order to directly represent operations which are common in hardware. VHDL also allows arrays to be indexed in either direction (ascending or descending) because both conventions are used in hardware, whereas Ada (like most programming languages) provides ascending indexing only. The reason for the similarity between the two languages is that the <a href="/wiki/United_States_Department_of_Defense" title="United States Department of Defense">Department of Defense</a> required as much of the syntax as possible to be based on Ada, in order to avoid re-inventing concepts that had already been thoroughly tested in the development of Ada.</p>
<p>The initial version of VHDL, designed to <a href="/wiki/IEEE" title="IEEE" class="mw-redirect">IEEE</a> standard 1076-1987, included a wide range of data types, including numerical (<a href="/wiki/Integer" title="Integer">integer</a> and <a href="/wiki/Real_data_type" title="Real data type">real</a>), logical (<a href="/wiki/Bit" title="Bit">bit</a> and <a href="/wiki/Boolean_datatype" title="Boolean datatype">boolean</a>), <a href="/wiki/Character_(computing)" title="Character (computing)">character</a> and <a href="/wiki/Time" title="Time">time</a>, plus <a href="/wiki/Array" title="Array">arrays</a> of <tt>bit</tt> called <tt>bit_vector</tt> and of <tt>character</tt> called <a href="/wiki/String_(computer_science)" title="String (computer science)">string</a>.</p>
<p>A problem not solved by this edition, however, was "multi-valued logic", where a signal's drive strength (none, weak or strong) and unknown values are also considered. This required <a href="/wiki/IEEE_1164" title="IEEE 1164">IEEE standard 1164</a>, which defined the 9-value logic types: scalar <tt>std_ulogic</tt> and its vector version <tt>std_ulogic_vector</tt>.</p>
<p>The second issue of <a href="/wiki/IEEE_1076" title="IEEE 1076">IEEE 1076</a>, in 1993, made the syntax more consistent, allowed more flexibility in naming, extended the <code>character</code> type to allow ISO-8859-1 printable characters, added the <code>xnor</code> operator, etc.</p>
<p>Minor changes in the standard (2000 and 2002) added the idea of protected types (similar to the concept of class in C++) and removed some restrictions from port mapping rules.</p>
<p>In addition to IEEE standard 1164, several child standards were introduced to extend functionality of the language. IEEE standard 1076.2 added better handling of real and complex data types. IEEE standard 1076.3 introduced <code>signed</code> and <code>unsigned</code> types to facilitate arithmetical operations on vectors. IEEE standard 1076.1 (known as <a href="/wiki/VHDL-AMS" title="VHDL-AMS">VHDL-AMS</a>) provided analog and mixed-signal circuit design extensions.</p>
<p>Some other standards support wider use of VHDL, notably VITAL (VHDL Initiative Towards ASIC Libraries) and <a href="/wiki/Microwave" title="Microwave">microwave</a> circuit design extensions.</p>
<p>In June 2006, VHDL Technical Committee of Accellera (delegated by IEEE to work on next update of the standard) approved so called Draft 3.0 of VHDL-2006. While maintaining full compatibility with older versions, this proposed standard provides numerous extensions that make writing and managing VHDL code easier. Key changes include incorporation of child standards (1164, 1076.2, 1076.3) into the main 1076 standard, an extended set of operators, more flexible syntax of 'case' and 'generate' statements, incorporation of VHPI (interface to C/C++ languages) and a subset of PSL (Property Specification Language). These changes should improve quality of synthesizable VHDL code, make testbenches more flexible, and allow wider use of VHDL for system-level descriptions.</p>
<p>In February 2008, Accellera approved VHDL 4.0 also informally known as VHDL 2008, which addressed more than 90 issues discovered during the trial period for version 3.0 and includes enhanced generic types. In 2008, Accellera released VHDL 4.0 to the IEEE for balloting for inclusion in IEEE 1076-2008. The VHDL standard IEEE 1076-2008 was approved by REVCOM in September 2008.</p>
<p><a name="Design" id="Design"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=VHDL&amp;action=edit&amp;section=2" title="Edit section: Design">edit</a>]</span> <span class="mw-headline">Design</span></h2>
<p>VHDL is a fairly general-purpose language, and it doesn't require a simulator on which to run the code. There are a lot of VHDL compilers, which build executable binaries. It can read and write files on the host computer, so a VHDL program can be written that generates another VHDL program to be incorporated in the design being developed. Because of this general-purpose nature, it is possible to use VHDL to write a <i>testbench</i> that verifies the functionality of the design using files on the host computer to define stimuli, interacts with the user, and compares results with those expected. VHDL is a <a href="/wiki/Strong_typing" title="Strong typing" class="mw-redirect">strongly typed</a> language.</p>
<p>It is relatively easy for an inexperienced developer to produce code that simulates successfully but that cannot be synthesized into a real device, or is too large to be practicable. One particular pitfall is the accidental production of <a href="/wiki/Transparent_latch" title="Transparent latch" class="mw-redirect">transparent latches</a> rather than <a href="/wiki/Flip-flop_(electronics)" title="Flip-flop (electronics)">D-type flip-flops</a> as storage elements.</p>
<p>VHDL is not a case sensitive language. One can design hardware in a VHDL IDE (such as Xilinx or Quartus) to produce the RTL schematic of the desired circuit. After that, the generated schematic can be verified using simulation software (such as ModelSim) which shows the waveforms of inputs and outputs of the circuit after generating the appropriate testbench. To generate an appropriate testbench for a particular circuit or VHDL code, the inputs have to be defined correctly. For example, for clock input, a loop process or an iterative statement is required.</p>
<p>The key advantage of VHDL when used for systems design is that it allows the behavior of the required system to be described (modeled) and verified (simulated) before synthesis tools translate the design into real hardware (gates and wires).</p>
<p>Another benefit is that VHDL allows the description of a concurrent system (many parts, each with its own sub-behavior, working together at the same time). VHDL is a <a href="/wiki/Dataflow_language" title="Dataflow language" class="mw-redirect">Dataflow language</a>, unlike procedural computing languages such as BASIC, C, and assembly code, which all run sequentially, one instruction at a time.</p>
<p>A final point is that when a VHDL model is translated into the "gates and wires" that are mapped onto a programmable logic device such as a <a href="/wiki/CPLD" title="CPLD" class="mw-redirect">CPLD</a> or <a href="/wiki/FPGA" title="FPGA" class="mw-redirect">FPGA</a>, then it is the actual hardware being configured, rather than the VHDL code being "executed" as if on some form of a processor chip.</p>
<p><a name="Getting_started" id="Getting_started"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=VHDL&amp;action=edit&amp;section=3" title="Edit section: Getting started">edit</a>]</span> <span class="mw-headline">Getting started</span></h2>
<p>Although background in a computer programming language (such as <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a>) is helpful, it is not essential. Free VHDL simulators are readily available, and although these are limited in functionality compared to commercial VHDL simulators, they are more than sufficient for independent study. If the user's goal is to learn <a href="/wiki/Register_transfer_level" title="Register transfer level">RTL</a> coding, (that is, design hardware circuits in VHDL, as opposed to simply document or simulate circuit behavior), then a synthesis/design package is also needed.</p>
<p>As with VHDL simulators, free FPGA synthesis tools are readily available, and are more than adequate for independent study. Feedback from the synthesis tool gives the user a feel for the relative efficiencies of different coding styles. A schematic/gate viewer shows the user the synthesized design as a navigable netlist diagram. Many <a href="/wiki/FPGA" title="FPGA" class="mw-redirect">FPGA</a> design packages offer alternative design input methods, such as block-diagram (schematic) and state-diagram capture. These provide a useful starting template for coding certain types of repetitive structures, or complex state-transition diagrams. Finally, the included tutorials and examples are valuable aids.</p>
<p>Nearly all FPGA design and simulation flows support both VHDL and <a href="/wiki/Verilog" title="Verilog">Verilog</a>, another hardware description language, allowing the user to learn either or both languages.</p>
<p>Free design &amp; simulation packages for VHDL/Verilog:</p>
<table class="wikitable">
<tr>
<th>Vendor</th>
<th>Trial Software</th>
<th>License</th>
<th>Simulator</th>
<th>Synthesizer</th>
<th>RTL view</th>
<th>Gate view</th>
</tr>
<tr>
<td>Actel</td>
<td>Libero gold</td>
<td>one year free license</td>
<td>ModelSim Actel Edition</td>
<td>Synplify Actel Edition</td>
<td>No</td>
<td>yes**</td>
</tr>
<tr>
<td>Aldec</td>
<td>Active-HDL (Student Edition)</td>
<td>one year free license</td>
<td>Aldec (mixed language) Student</td>
<td>All Synthesis (interfaces)</td>
<td>yes</td>
<td>yes</td>
</tr>
<tr>
<td>Altera</td>
<td>Quartus II web edition</td>
<td>6 months renewable free license</td>
<td>ModelSim Altera Edition</td>
<td>Altera Quartus II</td>
<td>yes</td>
<td>yes**</td>
</tr>
<tr>
<td>Lattice</td>
<td>ispLEVER Starter</td>
<td>6 months renewable free license</td>
<td>Aldec Active-HDL Lattice Web Edition</td>
<td>Synopsys Synplify Lattice Edition</td>
<td>No</td>
<td>yes</td>
</tr>
<tr>
<td>Dolphin</td>
<td>none</td>
<td>free seduction license</td>
<td>SMASH</td>
<td>no</td>
<td>?</td>
<td>?</td>
</tr>
<tr>
<td>Mentor Graphics</td>
<td>none</td>
<td>6 months renewable free license</td>
<td>ModelSim PE Student Edition</td>
<td>no</td>
<td>yes</td>
<td>no</td>
</tr>
<tr>
<td>Xilinx</td>
<td>ISE webpack</td>
<td>free license</td>
<td>ISE Simulator*</td>
<td>Xilinx XST</td>
<td>yes</td>
<td>yes**</td>
</tr>
<tr>
<td>Blue Pacific</td>
<td>BlueHDL</td>
<td>free license</td>
<td>BlueSim</td>
<td>?</td>
<td>?</td>
<td>?</td>
</tr>
<tr>
<td>GHDL</td>
<td><a href="/w/index.php?title=GHDL&amp;action=edit&amp;redlink=1" class="new" title="GHDL (page does not exist)">GHDL</a></td>
<td>GPL</td>
<td>GHDL</td>
<td>no</td>
<td>via <a href="/wiki/GTKWave" title="GTKWave">GTKWave</a></td>
<td>no</td>
</tr>
</table>
<p>* If Modelsim is installed on the computer, the ISE software can call ModelSim's features if desired. (ISE 9.2i comes with an integrated simulator)<br />
** Limited to vendor's device-database</p>
<p><a name="Code_examples" id="Code_examples"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=VHDL&amp;action=edit&amp;section=4" title="Edit section: Code examples">edit</a>]</span> <span class="mw-headline">Code examples</span></h2>
<p>In VHDL, a design consists at a minimum of an <i>entity</i> which describes the interface and an <i>architecture</i> which contains the actual implementation. In addition, most designs import library modules. Some designs also contain multiple architectures and <i>configurations</i>.</p>
<p>A simple <a href="/wiki/Logic_gate" title="Logic gate">AND gate</a> in VHDL would look something like this:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-vhdl">
<span class="co1">-- (this is a VHDL comment)</span>
 
<span class="co1">-- import std_logic from the IEEE library</span>
<span class="kw1">library</span> IEEE;
<span class="kw1">use</span> IEEE.std_logic_1164.<span class="kw1">all</span>;
 
<span class="co1">-- this is the entity</span>
<span class="kw1">entity</span> ANDGATE <span class="kw1">is</span>
   <span class="kw1">port</span> <span class="br0">(</span> 
         IN1 : <span class="kw1">in</span> <span class="kw2">std_logic</span>;
         IN2 : <span class="kw1">in</span> <span class="kw2">std_logic</span>;
         OUT1: <span class="kw1">out</span> <span class="kw2">std_logic</span><span class="br0">)</span>;
<span class="kw1">end</span> ANDGATE;
 
<span class="kw1">architecture</span> RTL <span class="kw1">of</span> ANDGATE <span class="kw1">is</span>
<span class="kw1">begin</span>
 
  OUT1 &lt;= IN1 <span class="kw1">and</span> IN2;
 
<span class="kw1">end</span> RTL;
</pre></div>
<p>While the example above may seem very verbose to HDL beginners, one should keep in mind that many parts are either optional or need to be written only once. And generally simple functions like this are part of a larger behavioral module, instead of having a separate module for something so simple. In addition, use of elements such as the <tt>std_logic</tt> type might at first seem an overkill. One could easily use the built-in <tt>bit</tt> type and avoid the library import in the beginning. However, using this <a href="/wiki/Multi-valued_logic" title="Multi-valued logic">9-valued logic</a> (<a href="/wiki/IEEE_1164" title="IEEE 1164"><tt>U</tt>,<tt>X</tt>,<tt>0</tt>,<tt>1</tt>,<tt>Z</tt>,<tt>W</tt>,<tt>H</tt>,<tt>L</tt>,<tt>-</tt></a>) instead of simple bits (0,1) offers a very powerful simulation and debugging tool to the designer which currently does not exist in any other HDL.</p>
<p>In the examples that follow, you will see that VHDL code can be written in a very compact form. However, the experienced designers usually avoid these compact forms and use a more verbose coding style for the sake of readability and maintainability. Another advantage to the verbose coding style is the smaller amount of resources used when programming to a Programmable Logic Device such as a CPLD.</p>
<p><a name="Synthesizeable_constructs_and_VHDL_templates" id="Synthesizeable_constructs_and_VHDL_templates"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=VHDL&amp;action=edit&amp;section=5" title="Edit section: Synthesizeable constructs and VHDL templates">edit</a>]</span> <span class="mw-headline">Synthesizeable constructs and VHDL templates</span></h3>
<p>VHDL is frequently used for two different goals: simulation of electronic designs and synthesis of such designs. Synthesis is a process where a VHDL is compiled and mapped into an implementation technology such as an FPGA or an ASIC. Many FPGA vendors have free (or inexpensive) tools to synthesize VHDL for use with their chips, where ASIC tools are often very expensive.</p>
<p>Not all constructs in VHDL are suitable for synthesis. For example, most constructs that explicitly deal with timing such as <tt>wait for 10ns;</tt> are not synthesizable despite being valid for simulation. While different synthesis tools have different capabilities, there exists a common <i>synthesizable subset</i> of VHDL that defines what language constructs and idioms map into common hardware for many synthesis tools. IEEE 1076.6 defines a subset of the language that is considered the official synthesis subset. It is generally considered a "best practice" to write very idiomatic code for synthesis as results can be incorrect or suboptimal for non-standard constructs.</p>
<p>Some examples of code that map into hardware multiplexers in common tools follow:</p>
<p><a name="MUX_templates" id="MUX_templates"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=VHDL&amp;action=edit&amp;section=6" title="Edit section: MUX templates">edit</a>]</span> <span class="mw-headline">MUX templates</span></h3>
<p>The <a href="/wiki/Multiplexer" title="Multiplexer">multiplexer</a>, or 'MUX' as it is usually called, is a simple construct very common in hardware design. The example below demonstrates a simple two to one MUX, with inputs <tt>A</tt> and <tt>B</tt>, selector <tt>S</tt> and output <tt>X</tt>:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-vhdl">
 
<span class="co1">-- template 1:</span>
X &lt;= A <span class="kw1">when</span> S <span class="kw3">=</span> <span class="re0">'<span class="nu0">1</span></span>' <span class="kw1">else</span> B;
 
<span class="co1">-- template 2:</span>
<span class="kw1">with</span> S <span class="kw1">select</span> X &lt;= A <span class="kw1">when</span> <span class="re0">'<span class="nu0">1</span></span>' <span class="kw1">else</span> B;
 
<span class="co1">-- template 3:</span>
<span class="kw1">process</span><span class="br0">(</span>A,B,S<span class="br0">)</span>
<span class="kw1">begin</span>
  <span class="kw1">case</span> S <span class="kw1">is</span>
    <span class="kw1">when</span> <span class="re0">'<span class="nu0">1</span></span>'    =&gt; X &lt;= A;
    <span class="kw1">when</span> <span class="kw1">others</span> =&gt; X &lt;= B;
  <span class="kw1">end</span> <span class="kw1">case</span>;
<span class="kw1">end</span> <span class="kw1">process</span>;
 
<span class="co1">-- template 4:</span>
<span class="kw1">process</span><span class="br0">(</span>A,B,S<span class="br0">)</span>
<span class="kw1">begin</span>
  <span class="kw1">if</span> S <span class="kw3">=</span> <span class="re0">'<span class="nu0">1</span></span>' <span class="kw1">then</span>
    X &lt;= A;
  <span class="kw1">else</span>
    X &lt;= B;
  <span class="kw1">end</span> <span class="kw1">if</span>;
<span class="kw1">end</span> <span class="kw1">process</span>;
 
<span class="co1">-- template 5 - 4:1 MUX, where S is a 2-bit std_logic_vector :</span>
<span class="kw1">process</span><span class="br0">(</span>A,B,C,D,S<span class="br0">)</span>
<span class="kw1">begin</span>
  <span class="kw1">case</span> S <span class="kw1">is</span>
    <span class="kw1">when</span> <span class="st0">"00"</span>   =&gt; X &lt;= A;
    <span class="kw1">when</span> <span class="st0">"01"</span>   =&gt; X &lt;= B;
    <span class="kw1">when</span> <span class="st0">"10"</span>   =&gt; X &lt;= C;
    <span class="kw1">when</span> <span class="kw1">others</span> =&gt; X &lt;= D; 
  <span class="kw1">end</span> <span class="kw1">case</span>;
<span class="kw1">end</span> <span class="kw1">process</span>;
</pre></div>
<p>The three last templates make use of what VHDL calls 'sequential' code. The sequential sections are always placed inside a <i>process</i> and have a slightly different syntax which may resemble more traditional programming languages.</p>
<p><a name="Latch_templates" id="Latch_templates"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=VHDL&amp;action=edit&amp;section=7" title="Edit section: Latch templates">edit</a>]</span> <span class="mw-headline">Latch templates</span></h3>
<p>A <a href="/wiki/Transparent_latch" title="Transparent latch" class="mw-redirect">transparent latch</a> is basically one bit of memory which is updated when an enable signal is raised:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-vhdl">
<span class="co1">-- latch template 1:</span>
Q &lt;= D <span class="kw1">when</span> Enable <span class="kw3">=</span> <span class="re0">'<span class="nu0">1</span></span>' <span class="kw1">else</span> Q;
 
<span class="co1">-- latch template 2:</span>
<span class="kw1">process</span><span class="br0">(</span>D,Enable<span class="br0">)</span>
<span class="kw1">begin</span>
  <span class="kw1">if</span> Enable <span class="kw3">=</span> <span class="re0">'<span class="nu0">1</span></span>' <span class="kw1">then</span>
    Q &lt;= D;
  <span class="kw1">end</span> <span class="kw1">if</span>;
<span class="kw1">end</span> <span class="kw1">process</span>;
</pre></div>
<p>A <a href="/wiki/Latch_(electronic)" title="Latch (electronic)" class="mw-redirect">SR-latch</a> uses a set and reset signal instead:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-vhdl">
<span class="co1">-- SR-latch template 1:</span>
Q &lt;= <span class="re0">'<span class="nu0">1</span></span>' <span class="kw1">when</span> S <span class="kw3">=</span> <span class="re0">'<span class="nu0">1</span></span>' <span class="kw1">else</span>
  <span class="re0">'<span class="nu0">0</span></span>' <span class="kw1">when</span> R <span class="kw3">=</span> <span class="re0">'<span class="nu0">1</span></span>' <span class="kw1">else</span> Q;
 
<span class="co1">-- SR-latch template 2:</span>
<span class="kw1">process</span><span class="br0">(</span>S,R<span class="br0">)</span>
<span class="kw1">begin</span>
  <span class="kw1">if</span> S <span class="kw3">=</span> <span class="re0">'<span class="nu0">1</span></span>' <span class="kw1">then</span>
    Q &lt;= <span class="re0">'<span class="nu0">1</span></span>';
  <span class="kw1">elsif</span> R <span class="kw3">=</span> <span class="re0">'<span class="nu0">1</span></span>' <span class="kw1">then</span>
    Q &lt;= <span class="re0">'<span class="nu0">0</span></span>';
  <span class="kw1">end</span> <span class="kw1">if</span>;
<span class="kw1">end</span> <span class="kw1">process</span>;
</pre></div>
<p>Template 2 has an implicit "<tt>else Q &lt;= Q;</tt>" which may be explicitly added if desired.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-vhdl">
<span class="co1">-- This one is a RS-latch (i.e. reset dominates)</span>
<span class="kw1">process</span><span class="br0">(</span>S,R<span class="br0">)</span>
<span class="kw1">begin</span>
  <span class="kw1">if</span> R <span class="kw3">=</span> <span class="re0">'<span class="nu0">1</span></span>' <span class="kw1">then</span>
    Q &lt;= <span class="re0">'<span class="nu0">0</span></span>';
  <span class="kw1">elsif</span> S <span class="kw3">=</span> <span class="re0">'<span class="nu0">1</span></span>' <span class="kw1">then</span>
    Q &lt;= <span class="re0">'<span class="nu0">1</span></span>';
  <span class="kw1">end</span> <span class="kw1">if</span>;
<span class="kw1">end</span> <span class="kw1">process</span>;
</pre></div>
<p><a name="D-type_flip-flops" id="D-type_flip-flops"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=VHDL&amp;action=edit&amp;section=8" title="Edit section: D-type flip-flops">edit</a>]</span> <span class="mw-headline">D-type flip-flops</span></h3>
<p>The D-type <a href="/wiki/Flip-flop_(electronics)" title="Flip-flop (electronics)">flip-flop</a> samples an incoming signal at the rising or falling edge of a clock. The DFF is the basis for all synchronous logic.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-vhdl">
<span class="co1">-- simplest DFF template (not recommended)</span>
Q &lt;= D <span class="kw1">when</span> rising_edge<span class="br0">(</span>CLK<span class="br0">)</span>;
 
<span class="co1">-- recommended DFF template:</span>
<span class="kw1">process</span><span class="br0">(</span>CLK<span class="br0">)</span>
<span class="kw1">begin</span>
  <span class="co1">-- use falling_edge(CLK) to sample at the falling edge instead</span>
  <span class="kw1">if</span> rising_edge<span class="br0">(</span>CLK<span class="br0">)</span> <span class="kw1">then</span>
    Q &lt;= D;
  <span class="kw1">end</span> <span class="kw1">if</span>;
<span class="kw1">end</span> <span class="kw1">process</span>;
 
<span class="co1">-- alternative DFF template:</span>
<span class="kw1">process</span>
<span class="kw1">begin</span>
  <span class="kw1">wait</span> <span class="kw1">until</span> rising_edge<span class="br0">(</span>CLK<span class="br0">)</span>;
  Q &lt;= D;  
<span class="kw1">end</span> <span class="kw1">process</span>;
</pre></div>
<p>Some flip-flops also have Enable signals and asynchronous or synchronous Set and Reset signals:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-vhdl">
<span class="co1">-- template for asynchronous reset with clock enable:</span>
<span class="kw1">process</span><span class="br0">(</span>CLK, RESET<span class="br0">)</span>
<span class="kw1">begin</span>
  <span class="kw1">if</span> RESET <span class="kw3">=</span> <span class="re0">'<span class="nu0">1</span></span>' <span class="kw1">then</span>   <span class="co1">-- or '0' if RESET is active low...</span>
    Q &lt;= <span class="re0">'<span class="nu0">0</span></span>';
  <span class="kw1">elsif</span> rising_edge<span class="br0">(</span>CLK<span class="br0">)</span> <span class="kw1">then</span>
    <span class="kw1">if</span> Enable <span class="kw3">=</span> <span class="re0">'<span class="nu0">1</span></span>' <span class="kw1">then</span>  <span class="co1">-- or '0' if Enable is active low...</span>
      Q &lt;= D;
    <span class="kw1">end</span> <span class="kw1">if</span>;
  <span class="kw1">end</span> <span class="kw1">if</span>;
<span class="kw1">end</span> <span class="kw1">process</span>;
 
<span class="co1">-- template for synchronous reset with clock enable:</span>
<span class="kw1">process</span><span class="br0">(</span>CLK<span class="br0">)</span>
<span class="kw1">begin</span>
  <span class="kw1">if</span> rising_edge<span class="br0">(</span>CLK<span class="br0">)</span> <span class="kw1">then</span>
    <span class="kw1">if</span> RESET <span class="kw3">=</span> <span class="re0">'<span class="nu0">1</span></span>' <span class="kw1">then</span> 
      Q &lt;= <span class="re0">'<span class="nu0">0</span></span>';
    <span class="kw1">elsif</span> Enable <span class="kw3">=</span> <span class="re0">'<span class="nu0">1</span></span>' <span class="kw1">then</span>  <span class="co1">-- or '0' if Enable is active low...</span>
      Q &lt;= D;
    <span class="kw1">end</span> <span class="kw1">if</span>;
  <span class="kw1">end</span> <span class="kw1">if</span>;
<span class="kw1">end</span> <span class="kw1">process</span>;
</pre></div>
<p>A common beginner mistake is to have a set or reset input but not use it. For example, the following two snippets are not equal, the first one is a simple D-type flip-flop, while the second one is a DFF with a feedback MUX.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-vhdl">
<span class="co1">-- simple D-type flip-flop </span>
<span class="kw1">process</span><span class="br0">(</span>CLK<span class="br0">)</span>
<span class="kw1">begin</span>
  <span class="kw1">if</span> rising_edge<span class="br0">(</span>CLK<span class="br0">)</span> <span class="kw1">then</span>  
    Q &lt;= D;  
  <span class="kw1">end</span> <span class="kw1">if</span>;
<span class="kw1">end</span> <span class="kw1">process</span>;
 
<span class="co1">-- BAD VHDL: this does NOT make the flip-flop a DFF without a reset!!</span>
<span class="kw1">process</span><span class="br0">(</span>CLK, RESET<span class="br0">)</span>
<span class="kw1">begin</span>
  <span class="kw1">if</span> RESET <span class="kw3">=</span> <span class="re0">'<span class="nu0">1</span></span>' <span class="kw1">then</span>  
  	<span class="co1">-- do nothing. Q is not set here...  </span>
  <span class="kw1">elsif</span> rising_edge<span class="br0">(</span>CLK<span class="br0">)</span> <span class="kw1">then</span>  
    Q &lt;= D;  
  <span class="kw1">end</span> <span class="kw1">if</span>;
<span class="kw1">end</span> <span class="kw1">process</span>;
</pre></div>
<p>This is very similar to the 'transparent latch' mistake mentioned earlier.</p>
<p><a name="The_counter_example" id="The_counter_example"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=VHDL&amp;action=edit&amp;section=9" title="Edit section: The counter example">edit</a>]</span> <span class="mw-headline">The counter example</span></h3>
<p>The following example is an up-counter with asynchronous reset, parallel load and configurable width. It demonstrates the use of the 'unsigned' type and VHDL <i>generics</i>. The generics are very close to arguments or templates in other traditional programming languages like C or C++.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-vhdl">
<span class="kw1">library</span> IEEE;
<span class="kw1">use</span> IEEE.std_logic_1164.<span class="kw1">all</span>;
<span class="kw1">use</span> IEEE.numeric_std.<span class="kw1">all</span>;    <span class="co1">-- for the unsigned type</span>
 
<span class="kw1">entity</span> counter_example <span class="kw1">is</span>
<span class="kw1">generic</span> <span class="br0">(</span> WIDTH : <span class="kw2">integer</span> :<span class="kw3">=</span> <span class="nu0">32</span><span class="br0">)</span>;
<span class="kw1">port</span> <span class="br0">(</span>
  CLK, RESET, LOAD : <span class="kw1">in</span> <span class="kw2">std_logic</span>;
  DATA : <span class="kw1">in</span>  <span class="kw2">unsigned</span><span class="br0">(</span>WIDTH<span class="nu0">-1</span> <span class="kw1">downto</span> <span class="nu0">0</span><span class="br0">)</span>;  
  Q    : <span class="kw1">out</span> <span class="kw2">unsigned</span><span class="br0">(</span>WIDTH<span class="nu0">-1</span> <span class="kw1">downto</span> <span class="nu0">0</span><span class="br0">)</span><span class="br0">)</span>;
<span class="kw1">end</span> <span class="kw1">entity</span> counter_example;
 
<span class="kw1">architecture</span> counter_example_a <span class="kw1">of</span> counter_example <span class="kw1">is</span>
<span class="kw1">signal</span> cnt : <span class="kw2">unsigned</span><span class="br0">(</span>WIDTH<span class="nu0">-1</span> <span class="kw1">downto</span> <span class="nu0">0</span><span class="br0">)</span>;
<span class="kw1">begin</span>
  <span class="kw1">process</span><span class="br0">(</span>RESET, CLK<span class="br0">)</span>
  <span class="kw1">begin</span>
    <span class="kw1">if</span> RESET <span class="kw3">=</span> <span class="re0">'<span class="nu0">1</span></span>' <span class="kw1">then</span>
      cnt &lt;= <span class="br0">(</span><span class="kw1">others</span> =&gt; <span class="re0">'<span class="nu0">0</span></span>'<span class="br0">)</span>;
    <span class="kw1">elsif</span> rising_edge<span class="br0">(</span>CLK<span class="br0">)</span> <span class="kw1">then</span>
      <span class="kw1">if</span> LOAD <span class="kw3">=</span> <span class="re0">'<span class="nu0">1</span></span>' <span class="kw1">then</span>
        cnt &lt;= DATA;
      <span class="kw1">else</span>
        cnt &lt;= cnt + <span class="nu0">1</span>;
      <span class="kw1">end</span> <span class="kw1">if</span>;
    <span class="kw1">end</span> <span class="kw1">if</span>;
  <span class="kw1">end</span> <span class="kw1">process</span>;
 
  Q &lt;= cnt;
 
<span class="kw1">end</span> <span class="kw1">architecture</span> counter_example_a;
</pre></div>
<p>While not recommended for new designs, the <tt>std_logic_vector</tt> type can be used instead of the <tt>unsigned</tt> type.</p>
<p>More complex counters may add if/then/else statements within the <tt>rising_edge(CLK) elsif</tt> to add other functions, such as count enables, stopping or rolling over at some count value, generating output signals like terminal count signals, etc. Care must be taken with the ordering and nesting of such controls if used together, in order to produce the desired priorities and minimize the number of logic levels needed.</p>
<p><a name="Simulation-only_constructs" id="Simulation-only_constructs"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=VHDL&amp;action=edit&amp;section=10" title="Edit section: Simulation-only constructs">edit</a>]</span> <span class="mw-headline">Simulation-only constructs</span></h3>
<p>A large subset of VHDL cannot be translated into hardware. This subset is known as the non-synthesizable or the simulation-only subset of VHDL and can only be used for prototyping, simulation and debugging. For example, the following code will generate a clock with the frequency of 50 MHz. It can, for example, be used to drive a clock input in a design during simulation. It is, however, a simulation-only construct and cannot be implemented in hardware.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-vhdl">
<span class="kw1">process</span>
<span class="kw1">begin</span>
  CLK &lt;= <span class="re0">'<span class="nu0">1</span></span>'; <span class="kw1">wait</span> <span class="kw1">for</span> <span class="nu0">10</span> <span class="re0">ns</span>;
  CLK &lt;= <span class="re0">'<span class="nu0">0</span></span>'; <span class="kw1">wait</span> <span class="kw1">for</span> <span class="nu0">10</span> <span class="re0">ns</span>;
<span class="kw1">end</span> <span class="kw1">process</span>;
</pre></div>
<p>The simulation-only constructs can be used to build complex waveforms in very short time. Such waveform can be used, for example, as test vectors for a complex design or as a prototype of some synthesizable logic that will be implemented in future.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-vhdl">
<span class="kw1">process</span>
<span class="kw1">begin</span>
  <span class="kw1">wait</span> <span class="kw1">until</span> START <span class="kw3">=</span> <span class="re0">'<span class="nu0">1</span></span>'; <span class="co1">-- wait until START is high</span>
 
  <span class="kw1">for</span> i <span class="kw1">in</span> <span class="nu0">1</span> <span class="kw1">to</span> <span class="nu0">10</span> <span class="kw1">loop</span> <span class="co1">-- then wait for a few clock periods...</span>
    <span class="kw1">wait</span> <span class="kw1">until</span> rising_edge<span class="br0">(</span>CLK<span class="br0">)</span>;
  <span class="kw1">end</span> <span class="kw1">loop</span>;
 
  <span class="kw1">for</span> i <span class="kw1">in</span> <span class="nu0">1</span> <span class="kw1">to</span> <span class="nu0">10</span> <span class="kw1">loop</span> 	<span class="co1">-- write numbers 1 to 10 to DATA, 1 every cycle</span>
    DATA &lt;= to_unsigned<span class="br0">(</span>i, <span class="nu0">8</span><span class="br0">)</span>;
    <span class="kw1">wait</span> <span class="kw1">until</span> rising_edge<span class="br0">(</span>CLK<span class="br0">)</span>;
  <span class="kw1">end</span> <span class="kw1">loop</span>;
 
  <span class="co1">-- wait until the output changes</span>
  <span class="kw1">wait</span> <span class="kw1">on</span> RESULT;
 
  <span class="co1">-- now raise ACK for clock period</span>
  ACK &lt;= <span class="re0">'<span class="nu0">1</span></span>';
  <span class="kw1">wait</span> <span class="kw1">until</span> rising_edge<span class="br0">(</span>CLK<span class="br0">)</span>;
  ACK &lt;= <span class="re0">'<span class="nu0">0</span></span>';
 
 
  <span class="co1">-- and so on...</span>
<span class="kw1">end</span> <span class="kw1">process</span>;
</pre></div>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=VHDL&amp;action=edit&amp;section=11" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<ul>
<li><a href="/wiki/Verilog" title="Verilog">Verilog</a></li>
<li><a href="/wiki/SystemC" title="SystemC">SystemC</a></li>
<li><a href="/wiki/Register_transfer_level" title="Register transfer level">Register transfer level</a></li>
<li><a href="/wiki/Electronic_design_automation" title="Electronic design automation">Electronic design automation</a></li>
<li><a href="/wiki/Complex_programmable_logic_device" title="Complex programmable logic device">Complex programmable logic device</a> (CPLD)</li>
<li><a href="/wiki/Field_Programmable_Gate_Array" title="Field Programmable Gate Array" class="mw-redirect">Field Programmable Gate Array</a> (FPGA)</li>
<li><a href="/wiki/ASIC" title="ASIC" class="mw-redirect">Application Specific Integrated Circuit</a> (ASIC)</li>
<li>Free VHDL Simulator from Xilinx <a href="http://www.xilinx.com/ise/logic_design_prod/webpack.htm" class="external autonumber" title="http://www.xilinx.com/ise/logic_design_prod/webpack.htm" rel="nofollow">[1]</a></li>
</ul>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=VHDL&amp;action=edit&amp;section=12" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<table class="metadata plainlinks mbox-small" style="border:1px solid #aaa; background-color:#f9f9f9;">
<tr>
<td class="mbox-image"><a href="http://en.wikibooks.org/wiki/Special:Search/VHDL" title="b:Special:Search/VHDL"><img alt="Sister project" src="http://upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/40px-Wikibooks-logo-en-noslogan.svg.png" width="40" height="40" border="0" /></a></td>
<td class="mbox-text" style="">The <a href="/wiki/Wikibooks" title="Wikibooks">Wikibook</a> <i><a href="http://en.wikibooks.org/wiki/Programmable_Logic" class="extiw" title="wikibooks:Programmable Logic">Programmable Logic</a></i> has a page on the topic of
<div style="margin-left:10px;"><i><b><a href="http://en.wikibooks.org/wiki/Programmable_Logic/VHDL" class="extiw" title="wikibooks:Programmable Logic/VHDL">VHDL</a></b></i></div>
</td>
</tr>
</table>
<ul>
<li><a href="http://www.vhdl.org/comp.lang.vhdl/" class="external text" title="http://www.vhdl.org/comp.lang.vhdl/" rel="nofollow">The FAQ of news://comp.lang.vhdl</a></li>
<li><a href="http://groups.google.com/group/comp.lang.vhdl/topics" class="external text" title="http://groups.google.com/group/comp.lang.vhdl/topics" rel="nofollow">comp.lang.vhdl Newsgroup</a></li>
<li><a href="http://www.eda.org/vhdl-200x/" class="external text" title="http://www.eda.org/vhdl-200x/" rel="nofollow">IEEE VASG (VHDL Analysis and Standardization Group)</a> - Official VHDL Working Group</li>
<li><a href="http://ghdl.free.fr/" class="external text" title="http://ghdl.free.fr/" rel="nofollow">GHDL</a>, a complete Free Software VHDL compiler/simulator, built on top of <a href="/wiki/GNU_Compiler_Collection" title="GNU Compiler Collection">GCC</a>.</li>
<li><a href="http://members.optushome.com.au/jekent/FPGA.htm" class="external text" title="http://members.optushome.com.au/jekent/FPGA.htm" rel="nofollow">John's FPGA Page</a> - List of VHDL and FPGA resources, including VHDL tutorials.</li>
<li><a href="http://www.opencores.org/" class="external text" title="http://www.opencores.org/" rel="nofollow">www.opencores.org</a> - home of many <a href="/wiki/Open_source" title="Open source">open source</a> VHDL and <a href="/wiki/Verilog" title="Verilog">Verilog</a> projects</li>
</ul>
<p><a name="Further_reading" id="Further_reading"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=VHDL&amp;action=edit&amp;section=13" title="Edit section: Further reading">edit</a>]</span> <span class="mw-headline">Further reading</span></h2>
<ul>
<li><cite style="font-style:normal" class="news" id="CITEREFJohan_Sandstrom1995">Johan Sandstrom (October 1995). "<a href="http://www.eetimes.com/editorial/1995/systemdesign9510.html" class="external text" title="http://www.eetimes.com/editorial/1995/systemdesign9510.html" rel="nofollow">Comparing Verilog to VHDL Syntactically and Semantically</a>". <i>Integrated System Design</i> (EE Times)<span class="printonly">. <a href="http://www.eetimes.com/editorial/1995/systemdesign9510.html" class="external free" title="http://www.eetimes.com/editorial/1995/systemdesign9510.html" rel="nofollow">http://www.eetimes.com/editorial/1995/systemdesign9510.html</a></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=Comparing+Verilog+to+VHDL+Syntactically+and+Semantically&amp;rft.jtitle=Integrated+System+Design&amp;rft.aulast=Johan+Sandstrom&amp;rft.au=Johan+Sandstrom&amp;rft.date=October+1995&amp;rft.pub=EE+Times&amp;rft_id=http%3A%2F%2Fwww.eetimes.com%2Feditorial%2F1995%2Fsystemdesign9510.html&amp;rfr_id=info:sid/en.wikipedia.org:VHDL"><span style="display: none;">&#160;</span></span> — Sandstrom presents a table relating VHDL constructs to <a href="/wiki/Verilog" title="Verilog">Verilog</a> constructs.</li>
<li><cite style="font-style:normal" class="" id="CITEREFQualis_Design_Corporation">Qualis Design Corporation (<span class="mw-formatted-date" title="2000-07-20"><a href="/wiki/2000" title="2000">2000</a>-<a href="/wiki/July_20" title="July 20">07-20</a></span>) (PDF). <i><a href="http://www.eda.org/rassp/vhdl/guidelines/vhdlqrc.pdf" class="external text" title="http://www.eda.org/rassp/vhdl/guidelines/vhdlqrc.pdf" rel="nofollow">VHDL quick reference card</a></i>. 1.1. Qualis Design Corporation<span class="printonly">. <a href="http://www.eda.org/rassp/vhdl/guidelines/vhdlqrc.pdf" class="external free" title="http://www.eda.org/rassp/vhdl/guidelines/vhdlqrc.pdf" rel="nofollow">http://www.eda.org/rassp/vhdl/guidelines/vhdlqrc.pdf</a></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=VHDL+quick+reference+card&amp;rft.aulast=Qualis+Design+Corporation&amp;rft.au=Qualis+Design+Corporation&amp;rft.date=%5B%5B2000-07-20%5D%5D&amp;rft.series=1.1&amp;rft.pub=Qualis+Design+Corporation&amp;rft_id=http%3A%2F%2Fwww.eda.org%2Frassp%2Fvhdl%2Fguidelines%2Fvhdlqrc.pdf&amp;rfr_id=info:sid/en.wikipedia.org:VHDL"><span style="display: none;">&#160;</span></span></li>
<li><cite style="font-style:normal" class="" id="CITEREFQualis_Design_Corporation">Qualis Design Corporation (<span class="mw-formatted-date" title="2000-07-20"><a href="/wiki/2000" title="2000">2000</a>-<a href="/wiki/July_20" title="July 20">07-20</a></span>) (PDF). <i><a href="http://www.eda.org/rassp/vhdl/guidelines/1164qrc.pdf" class="external text" title="http://www.eda.org/rassp/vhdl/guidelines/1164qrc.pdf" rel="nofollow">1164 packages quick reference card</a></i>. 1.0. Qualis Design Corporation<span class="printonly">. <a href="http://www.eda.org/rassp/vhdl/guidelines/1164qrc.pdf" class="external free" title="http://www.eda.org/rassp/vhdl/guidelines/1164qrc.pdf" rel="nofollow">http://www.eda.org/rassp/vhdl/guidelines/1164qrc.pdf</a></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=1164+packages+quick+reference+card&amp;rft.aulast=Qualis+Design+Corporation&amp;rft.au=Qualis+Design+Corporation&amp;rft.date=%5B%5B2000-07-20%5D%5D&amp;rft.series=1.0&amp;rft.pub=Qualis+Design+Corporation&amp;rft_id=http%3A%2F%2Fwww.eda.org%2Frassp%2Fvhdl%2Fguidelines%2F1164qrc.pdf&amp;rfr_id=info:sid/en.wikipedia.org:VHDL"><span style="display: none;">&#160;</span></span></li>
<li><cite style="font-style:normal" class="" id="CITEREFQualis_Design_Corporation">Qualis Design Corporation (<span class="mw-formatted-date" title="2007-03-29"><a href="/wiki/2007" title="2007">2007</a>-<a href="/wiki/March_29" title="March 29">03-29</a></span>) (PDF). <i><a href="http://vega.unitbv.ro/~nicula/asd/resources/vhdl_ref.pdf" class="external text" title="http://vega.unitbv.ro/~nicula/asd/resources/vhdl_ref.pdf" rel="nofollow">VHDL quick reference card</a></i>. 2.2. Qualis Design Corporation<span class="printonly">. <a href="http://vega.unitbv.ro/~nicula/asd/resources/vhdl_ref.pdf" class="external free" title="http://vega.unitbv.ro/~nicula/asd/resources/vhdl_ref.pdf" rel="nofollow">http://vega.unitbv.ro/~nicula/asd/resources/vhdl_ref.pdf</a></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=VHDL+quick+reference+card&amp;rft.aulast=Qualis+Design+Corporation&amp;rft.au=Qualis+Design+Corporation&amp;rft.date=%5B%5B2007-03-29%5D%5D&amp;rft.series=2.2&amp;rft.pub=Qualis+Design+Corporation&amp;rft_id=http%3A%2F%2Fvega.unitbv.ro%2F%7Enicula%2Fasd%2Fresources%2Fvhdl_ref.pdf&amp;rfr_id=info:sid/en.wikipedia.org:VHDL"><span style="display: none;">&#160;</span></span></li>
<li><cite style="font-style:normal" class="" id="CITEREFQualis_Design_Corporation">Qualis Design Corporation (<span class="mw-formatted-date" title="2007-03-29"><a href="/wiki/2007" title="2007">2007</a>-<a href="/wiki/March_29" title="March 29">03-29</a></span>) (PDF). <i><a href="http://vega.unitbv.ro/~nicula/asd/resources/1164pkg.pdf" class="external text" title="http://vega.unitbv.ro/~nicula/asd/resources/1164pkg.pdf" rel="nofollow">1164 packages quick reference card</a></i>. 2.2. Qualis Design Corporation<span class="printonly">. <a href="http://vega.unitbv.ro/~nicula/asd/resources/1164pkg.pdf" class="external free" title="http://vega.unitbv.ro/~nicula/asd/resources/1164pkg.pdf" rel="nofollow">http://vega.unitbv.ro/~nicula/asd/resources/1164pkg.pdf</a></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=1164+packages+quick+reference+card&amp;rft.aulast=Qualis+Design+Corporation&amp;rft.au=Qualis+Design+Corporation&amp;rft.date=%5B%5B2007-03-29%5D%5D&amp;rft.series=2.2&amp;rft.pub=Qualis+Design+Corporation&amp;rft_id=http%3A%2F%2Fvega.unitbv.ro%2F%7Enicula%2Fasd%2Fresources%2F1164pkg.pdf&amp;rfr_id=info:sid/en.wikipedia.org:VHDL"><span style="display: none;">&#160;</span></span></li>
<li>Janick Bergerdon, "Writing Testbenches: Functional Verification of HDL Models", 2000, <a href="/wiki/Special:BookSources/0792377664" class="internal">ISBN 0-7923-7766-4</a>. (The HDL Testbench Bible)</li>
</ul>


<!-- 
NewPP limit report
Preprocessor node count: 3538/1000000
Post-expand include size: 21255/2048000 bytes
Template argument size: 7860/2048000 bytes
Expensive parser function count: 0/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:43410-0!1!0!default!!en!2 and timestamp 20090403215653 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/VHDL">http://en.wikipedia.org/wiki/VHDL</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Ada_programming_language_family" title="Category:Ada programming language family">Ada programming language family</a></span> | <span dir='ltr'><a href="/wiki/Category:Hardware_description_languages" title="Category:Hardware description languages">Hardware description languages</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/VHDL" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:VHDL" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=VHDL&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=VHDL&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=VHDL" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/VHDL" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/VHDL" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=VHDL&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=VHDL&amp;oldid=279635665" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=VHDL&amp;id=279635665">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-ar"><a href="http://ar.wikipedia.org/wiki/%D9%81%D9%8A_%D8%A5%D8%AA%D8%B4_%D8%AF%D9%8A_%D8%A5%D9%84">العربية</a></li>
				<li class="interwiki-bn"><a href="http://bn.wikipedia.org/wiki/%E0%A6%AD%E0%A6%BF_%E0%A6%8F%E0%A6%87%E0%A6%9A_%E0%A6%A1%E0%A6%BF_%E0%A6%8F%E0%A6%B2">বাংলা</a></li>
				<li class="interwiki-ca"><a href="http://ca.wikipedia.org/wiki/VHDL">Català</a></li>
				<li class="interwiki-cs"><a href="http://cs.wikipedia.org/wiki/VHDL">Česky</a></li>
				<li class="interwiki-da"><a href="http://da.wikipedia.org/wiki/VHDL">Dansk</a></li>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/Very_High_Speed_Integrated_Circuit_Hardware_Description_Language">Deutsch</a></li>
				<li class="interwiki-es"><a href="http://es.wikipedia.org/wiki/VHDL">Español</a></li>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/VHSIC_Hardware_Description_Language">Français</a></li>
				<li class="interwiki-ko"><a href="http://ko.wikipedia.org/wiki/VHDL">한국어</a></li>
				<li class="interwiki-it"><a href="http://it.wikipedia.org/wiki/VHDL">Italiano</a></li>
				<li class="interwiki-he"><a href="http://he.wikipedia.org/wiki/VHDL">עברית</a></li>
				<li class="interwiki-hu"><a href="http://hu.wikipedia.org/wiki/VHDL">Magyar</a></li>
				<li class="interwiki-ms"><a href="http://ms.wikipedia.org/wiki/VHDL">Bahasa Melayu</a></li>
				<li class="interwiki-mn"><a href="http://mn.wikipedia.org/wiki/VHDL">Монгол</a></li>
				<li class="interwiki-nl"><a href="http://nl.wikipedia.org/wiki/VHDL">Nederlands</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/VHDL">日本語</a></li>
				<li class="interwiki-pl"><a href="http://pl.wikipedia.org/wiki/VHDL">Polski</a></li>
				<li class="interwiki-pt"><a href="http://pt.wikipedia.org/wiki/VHDL">Português</a></li>
				<li class="interwiki-ro"><a href="http://ro.wikipedia.org/wiki/VHDL">Română</a></li>
				<li class="interwiki-ru"><a href="http://ru.wikipedia.org/wiki/VHDL">Русский</a></li>
				<li class="interwiki-sr"><a href="http://sr.wikipedia.org/wiki/VHDL">Српски / Srpski</a></li>
				<li class="interwiki-fi"><a href="http://fi.wikipedia.org/wiki/VHDL">Suomi</a></li>
				<li class="interwiki-sv"><a href="http://sv.wikipedia.org/wiki/VHDL">Svenska</a></li>
				<li class="interwiki-tr"><a href="http://tr.wikipedia.org/wiki/VHDL">Türkçe</a></li>
				<li class="interwiki-uk"><a href="http://uk.wikipedia.org/wiki/VHDL">Українська</a></li>
				<li class="interwiki-zh"><a href="http://zh.wikipedia.org/wiki/VHDL">中文</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 25 March 2009, at 18:36.</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv208 in 0.041 secs. --></body></html>
