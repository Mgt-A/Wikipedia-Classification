<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Functional programming,Articles with unsourced statements since January 2009,Articles with unsourced statements since September 2008,Articles with unsourced statements since October 2008,Functional languages,ML programming language family,Programming paradigms,Programming language,2004,APL programming language,Abductive logic programming" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Functional_programming&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Functional_programming&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Functional programming - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Functional_programming";
		var wgTitle = "Functional programming";
		var wgAction = "view";
		var wgArticleId = "10933";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 280313644;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
<style type="text/css">/*<![CDATA[*/
.source-python {line-height: normal;}
.source-python li, .source-python pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for python
 * CSS class: source-python, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-python .de1, .source-python .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-python  {}
.source-python .head {}
.source-python .foot {}
.source-python .imp {font-weight: bold; color: red;}
.source-python .ln-xtra {color: #cc0; background-color: #ffc;}
.source-python li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-python li.li2 {font-weight: bold;}
.source-python .kw1 {color: #ff7700;font-weight:bold;}
.source-python .kw2 {color: #008000;}
.source-python .kw3 {color: #dc143c;}
.source-python .kw4 {color: #0000cd;}
.source-python .co1 {color: #808080; font-style: italic;}
.source-python .coMULTI {color: #808080; font-style: italic;}
.source-python .es0 {color: #000099; font-weight: bold;}
.source-python .br0 {color: #66cc66;}
.source-python .st0 {color: #483d8b;}
.source-python .nu0 {color: #ff4500;}
.source-python .me1 {color: black;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style>		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Functional_programming skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Functional programming</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<table class="navbox" style="float:right; background-color:rgb(248,248,255); clear:right; margin: 1ex 0 0.5em 1em; width: 20em">
<tr>
<th><a href="/wiki/Programming_paradigm" title="Programming paradigm">Programming paradigms</a></th>
</tr>
<tr>
<td style="text-align:left">
<ul>
<li><a href="/wiki/Software_agent" title="Software agent">Agent-oriented</a></li>
<li><a href="/wiki/Component-based_software_engineering" title="Component-based software engineering">Component-based</a>
<ul>
<li><a href="/wiki/Flow-based_programming" title="Flow-based programming">Flow-based</a></li>
<li><a href="/wiki/Pipeline_programming" title="Pipeline programming">Pipeline</a></li>
</ul>
</li>
<li><a href="/wiki/Concatenative_programming_language" title="Concatenative programming language">Concatenative</a></li>
<li><a href="/wiki/Concurrent_computing" title="Concurrent computing">Concurrent computing</a></li>
<li><a href="/w/index.php?title=Context-oriented_programming&amp;action=edit&amp;redlink=1" class="new" title="Context-oriented programming (page does not exist)">Context-oriented</a></li>
<li><a href="/wiki/Declarative_programming" title="Declarative programming">Declarative</a> (Contrast: <a href="/wiki/Imperative_programming" title="Imperative programming">Imperative</a>)
<ul>
<li><strong class="selflink">Functional</strong>
<ul>
<li><a href="/wiki/Dataflow" title="Dataflow">Dataflow</a>
<ul>
<li><a href="/wiki/Spreadsheet" title="Spreadsheet">Cell-oriented (spreadsheets)</a></li>
<li><a href="/wiki/Reactive_programming" title="Reactive programming">Reactive</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="/w/index.php?title=Goal-directed_programming&amp;action=edit&amp;redlink=1" class="new" title="Goal-directed programming (page does not exist)">Goal-directed</a>
<ul>
<li><a href="/wiki/Constraint_programming" title="Constraint programming">Constraint</a></li>
<li><a href="/wiki/Constraint_logic_programming" title="Constraint logic programming">Constraint logic</a></li>
<li><a href="/wiki/Logic_programming" title="Logic programming">Logic</a>
<ul>
<li><a href="/wiki/Abductive_logic_programming" title="Abductive logic programming">Abductive logic</a></li>
<li><a href="/wiki/Inductive_logic_programming" title="Inductive logic programming">Inductive logic</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><a href="/wiki/Event-driven_programming" title="Event-driven programming">Event-driven</a></li>
<li><a href="/wiki/Feature_Oriented_Programming" title="Feature Oriented Programming">Feature-oriented</a></li>
<li><a href="/wiki/Function-level_programming" title="Function-level programming">Function-level</a> (Contrast: <a href="/wiki/Value-level_programming" title="Value-level programming">Value-level</a>)</li>
<li><a href="/wiki/Imperative_programming" title="Imperative programming">Imperative</a> (Contrast: <a href="/wiki/Declarative_programming" title="Declarative programming">Declarative</a>)
<ul>
<li>Advanced separation of concerns
<ul>
<li><a href="/wiki/Aspect-oriented_programming" title="Aspect-oriented programming">Aspect-oriented</a></li>
<li><a href="/wiki/Subject-oriented_programming" title="Subject-oriented programming">Subject-oriented</a></li>
</ul>
</li>
<li><a href="/wiki/Array_programming" title="Array programming">Array</a> (Contrast: <a href="/wiki/Scalar_programming" title="Scalar programming">Scalar</a>)</li>
<li><a href="/wiki/Automata-based_programming" title="Automata-based programming">Automata-based</a></li>
<li><a href="/wiki/Object-oriented_programming" title="Object-oriented programming">Object-oriented</a>
<ul>
<li><a href="/wiki/Class-based_programming" title="Class-based programming">Class-based</a></li>
<li><a href="/wiki/Prototype-based_programming" title="Prototype-based programming">Prototype-based</a></li>
</ul>
</li>
<li><a href="/wiki/Procedural_programming" title="Procedural programming">Procedural</a>
<ul>
<li><a href="/wiki/Structured_programming" title="Structured programming">Structured</a></li>
</ul>
</li>
<li><a href="/wiki/Role-oriented_programming" title="Role-oriented programming">Role-oriented</a></li>
<li><a href="/wiki/Scalar_programming" title="Scalar programming">Scalar</a> (Contrast: <a href="/wiki/Array_programming" title="Array programming">Array</a>)</li>
</ul>
</li>
<li><a href="/wiki/Iteration" title="Iteration">Iterative</a> (Contrast: <a href="/wiki/Recursion_(computer_science)" title="Recursion (computer science)">Recursive</a>)</li>
<li><a href="/wiki/Metaprogramming" title="Metaprogramming">Metaprogramming</a>
<ul>
<li><a href="/wiki/Attribute-Oriented_Programming" title="Attribute-Oriented Programming">Attribute-oriented</a></li>
<li><a href="/wiki/Automatic_programming" title="Automatic programming">Automatic</a>
<ul>
<li><a href="/wiki/Generic_programming" title="Generic programming">Generic</a>
<ul>
<li><a href="/wiki/Template_metaprogramming" title="Template metaprogramming">Template</a>
<ul>
<li><a href="/wiki/Policy-based_design" title="Policy-based design">Policy-based</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="/wiki/Language-oriented_programming" title="Language-oriented programming">Language-oriented</a>
<ul>
<li><a href="/wiki/Grammar-oriented_programming" title="Grammar-oriented programming">Grammar-oriented</a>
<ul>
<li><a href="/wiki/Dialecting" title="Dialecting">Dialecting</a></li>
</ul>
</li>
<li><a href="/wiki/Intentional_programming" title="Intentional programming">Intentional</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="/wiki/Reflection_(computer_science)" title="Reflection (computer science)">Reflective</a></li>
</ul>
</li>
<li><a href="/wiki/Modular_programming" title="Modular programming">Modular</a></li>
<li><a href="/wiki/Nondeterministic_programming" title="Nondeterministic programming">Nondeterministic</a></li>
<li><a href="/wiki/Parallel_computing" title="Parallel computing">Parallel computing</a>
<ul>
<li><a href="/wiki/Process-oriented_programming" title="Process-oriented programming">Process-oriented</a></li>
</ul>
</li>
<li><a href="/wiki/Programming_in_the_large_and_programming_in_the_small" title="Programming in the large and programming in the small">Programming in the large and programming in the small</a></li>
<li><a href="/wiki/Recursion_(computer_science)" title="Recursion (computer science)">Recursive</a> (Contrast: <a href="/wiki/Iteration" title="Iteration">Iterative</a>)</li>
<li><a href="/wiki/Tree_programming" title="Tree programming">Tree</a></li>
<li><a href="/wiki/Value-level_programming" title="Value-level programming">Value-level</a> (Contrast: <a href="/wiki/Function-level_programming" title="Function-level programming">Function-level</a>)</li>
</ul>
<hr />
<div class="noprint plainlinksneverexpand navbar" style="background:none; padding:0; font-weight:normal;; font-size:xx-small; text-align:center;">This box: <a href="/wiki/Template:Programming_paradigms" title="Template:Programming paradigms"><span title="View this template" style="">view</span></a>&#160;•&#160;<a href="/wiki/Template_talk:Programming_paradigms" title="Template talk:Programming paradigms"><span title="Discussion about this template" style="">talk</span></a>&#160;•&#160;<a href="http://en.wikipedia.org/w/index.php?title=Template:Programming_paradigms&amp;action=edit" class="external text" title="http://en.wikipedia.org/w/index.php?title=Template:Programming_paradigms&amp;action=edit" rel="nofollow"><span title="Edit this template" style=";">edit</span></a></div>
</td>
</tr>
</table>
<p>In <a href="/wiki/Computer_science" title="Computer science">computer science</a>, <b>functional programming</b> is a <a href="/wiki/Programming_paradigm" title="Programming paradigm">programming paradigm</a> that treats <a href="/wiki/Computation" title="Computation">computation</a> as the evaluation of <a href="/wiki/Function_(mathematics)" title="Function (mathematics)">mathematical functions</a> and avoids <a href="/wiki/Program_state" title="Program state">state</a> and <a href="/wiki/Immutable_object" title="Immutable object">mutable</a> data. It emphasizes the application of functions, in contrast to the <a href="/wiki/Imperative_programming" title="Imperative programming">imperative programming</a> style, which emphasizes changes in state.<sup id="cite_ref-hudak1989_0-0" class="reference"><a href="#cite_note-hudak1989-0" title=""><span>[</span>1<span>]</span></a></sup> Functional programming has its roots in the <a href="/wiki/Lambda_calculus" title="Lambda calculus">lambda calculus</a>, a <a href="/wiki/Formal_system" title="Formal system">formal system</a> developed in the 1930s to investigate function definition, function application, and <a href="/wiki/Recursion" title="Recursion">recursion</a>. Many functional <a href="/wiki/Computer_programming" title="Computer programming">programming</a> <a href="/wiki/Programming_language" title="Programming language">languages</a> can be viewed as embellishments to the lambda calculus.<sup id="cite_ref-hudak1989_0-1" class="reference"><a href="#cite_note-hudak1989-0" title=""><span>[</span>1<span>]</span></a></sup></p>
<p>In practice, the difference between a mathematical function and the notion of a "function" used in imperative programming is that imperative functions can have <a href="/wiki/Side_effect_(computer_science)" title="Side effect (computer science)">side effects</a>, changing the value of already calculated computations. Because of this they lack <a href="/wiki/Referential_transparency_(computer_science)" title="Referential transparency (computer science)">referential transparency</a>, i.e. the same language expression can result in different values at different times depending on the state of the executing program. Conversely, in functional code, the output value of a function depends only on the arguments that are input to the function, so calling a function f twice with the same value for an argument x will produce the same result f(x) both times. Eliminating side-effects can make it much easier to understand and predict the behavior of a program, which is one of the key motivations for the development of functional programming.<sup id="cite_ref-hudak1989_0-2" class="reference"><a href="#cite_note-hudak1989-0" title=""><span>[</span>1<span>]</span></a></sup></p>
<p>Functional programming languages, especially <a href="/wiki/Purely_functional" title="Purely functional">purely functional</a> ones, have largely been emphasized in <a href="/wiki/Academic" title="Academic" class="mw-redirect">academia</a> rather than in commercial software development. However, notable functional programming languages used in industry and commercial applications include <a href="/wiki/Erlang_(programming_language)" title="Erlang (programming language)">Erlang</a>,<sup id="cite_ref-1" class="reference"><a href="#cite_note-1" title=""><span>[</span>2<span>]</span></a></sup> <a href="/wiki/Objective_Caml" title="Objective Caml">OCaml</a>,<sup id="cite_ref-2" class="reference"><a href="#cite_note-2" title=""><span>[</span>3<span>]</span></a></sup> <a href="/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell</a>,<sup id="cite_ref-3" class="reference"><a href="#cite_note-3" title=""><span>[</span>4<span>]</span></a></sup> <a href="/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme</a><sup id="cite_ref-4" class="reference"><a href="#cite_note-4" title=""><span>[</span>5<span>]</span></a></sup><sup id="cite_ref-5" class="reference"><a href="#cite_note-5" title=""><span>[</span>6<span>]</span></a></sup> and <a href="/wiki/Domain-specific_programming_language" title="Domain-specific programming language" class="mw-redirect">domain-specific programming languages</a> like <a href="/wiki/R_(programming_language)" title="R (programming language)">R</a> (statistics),<sup id="cite_ref-6" class="reference"><a href="#cite_note-6" title=""><span>[</span>7<span>]</span></a></sup> <a href="/wiki/Mathematica" title="Mathematica">Mathematica</a> (symbolic math),<sup id="cite_ref-7" class="reference"><a href="#cite_note-7" title=""><span>[</span>8<span>]</span></a></sup> <a href="/wiki/J_(programming_language)" title="J (programming language)">J</a> and <a href="/wiki/K_(programming_language)" title="K (programming language)">K</a> (financial analysis), and <a href="/wiki/XSLT" title="XSLT" class="mw-redirect">XSLT</a> (<a href="/wiki/XML" title="XML">XML</a>).<sup id="cite_ref-8" class="reference"><a href="#cite_note-8" title=""><span>[</span>9<span>]</span></a></sup><sup id="cite_ref-9" class="reference"><a href="#cite_note-9" title=""><span>[</span>10<span>]</span></a></sup> Widespread declarative domain specific languages like <a href="/wiki/SQL" title="SQL">SQL</a> and <a href="/wiki/Lex_programming_tool" title="Lex programming tool" class="mw-redirect">Lex</a>/<a href="/wiki/Yacc" title="Yacc">Yacc</a>, use some elements of functional programming, especially in eschewing mutable values.<sup id="cite_ref-10" class="reference"><a href="#cite_note-10" title=""><span>[</span>11<span>]</span></a></sup> <a href="/wiki/Spreadsheet" title="Spreadsheet">Spreadsheets</a> can also be viewed as functional programming languages.<sup id="cite_ref-11" class="reference"><a href="#cite_note-11" title=""><span>[</span>12<span>]</span></a></sup></p>
<p>Programming in a functional style can be accomplished in languages, such as C, C++, Python, or Java, that aren't specifically designed for functional programming.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#History"><span class="tocnumber">1</span> <span class="toctext">History</span></a></li>
<li class="toclevel-1"><a href="#Concepts"><span class="tocnumber">2</span> <span class="toctext">Concepts</span></a>
<ul>
<li class="toclevel-2"><a href="#Higher-order_functions"><span class="tocnumber">2.1</span> <span class="toctext">Higher-order functions</span></a></li>
<li class="toclevel-2"><a href="#Pure_functions"><span class="tocnumber">2.2</span> <span class="toctext">Pure functions</span></a></li>
<li class="toclevel-2"><a href="#Recursion"><span class="tocnumber">2.3</span> <span class="toctext">Recursion</span></a></li>
<li class="toclevel-2"><a href="#Strict_versus_non-strict_evaluation"><span class="tocnumber">2.4</span> <span class="toctext">Strict versus non-strict evaluation</span></a></li>
<li class="toclevel-2"><a href="#Type_systems_and_pattern_matching"><span class="tocnumber">2.5</span> <span class="toctext">Type systems and pattern matching</span></a></li>
<li class="toclevel-2"><a href="#Functional_programming_in_non-functional_languages"><span class="tocnumber">2.6</span> <span class="toctext">Functional programming in non-functional languages</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Comparison_of_functional_and_imperative_programming"><span class="tocnumber">3</span> <span class="toctext">Comparison of functional and imperative programming</span></a>
<ul>
<li class="toclevel-2"><a href="#Simulating_state"><span class="tocnumber">3.1</span> <span class="toctext">Simulating state</span></a></li>
<li class="toclevel-2"><a href="#Efficiency_issues"><span class="tocnumber">3.2</span> <span class="toctext">Efficiency issues</span></a></li>
<li class="toclevel-2"><a href="#Coding_styles"><span class="tocnumber">3.3</span> <span class="toctext">Coding styles</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">4</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">5</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1"><a href="#Further_reading"><span class="tocnumber">6</span> <span class="toctext">Further reading</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">7</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="History" id="History"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Functional_programming&amp;action=edit&amp;section=1" title="Edit section: History">edit</a>]</span> <span class="mw-headline">History</span></h2>
<p><a href="/wiki/Lambda_calculus" title="Lambda calculus">Lambda calculus</a> provides a theoretical framework for describing functions and their evaluation. Although it is a mathematical abstraction rather than a programming language, it forms the basis of almost all functional programming languages today. An equivalent theoretical formulation, <a href="/wiki/Combinatory_logic" title="Combinatory logic">combinatory logic</a>, is commonly perceived as more abstract than lambda calculus and preceded it in invention. It is used in some esoteric languages including <a href="/wiki/Unlambda" title="Unlambda">Unlambda</a>. Combinatory logic and lambda calculus were both originally developed to achieve a clearer approach to the foundations of mathematics.<sup id="cite_ref-12" class="reference"><a href="#cite_note-12" title=""><span>[</span>13<span>]</span></a></sup></p>
<p>An early functional-flavored language was <a href="/wiki/Lisp_programming_language" title="Lisp programming language" class="mw-redirect">LISP</a>, developed by <a href="/wiki/John_McCarthy_(computer_scientist)" title="John McCarthy (computer scientist)">John McCarthy</a> while at <a href="/wiki/Massachusetts_Institute_of_Technology" title="Massachusetts Institute of Technology">MIT</a> for the <a href="/wiki/IBM_700/7000_series#Scientific_Architecture" title="IBM 700/7000 series">IBM 700/7000 series</a> scientific computers in the late 1950s.<sup id="cite_ref-13" class="reference"><a href="#cite_note-13" title=""><span>[</span>14<span>]</span></a></sup> LISP introduced many features now found in functional languages, though LISP is technically a multi-paradigm language. <a href="/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme</a> and <a href="/wiki/Dylan_programming_language" title="Dylan programming language" class="mw-redirect">Dylan</a> were later attempts to simplify and improve LISP.</p>
<p><a href="/wiki/Information_Processing_Language" title="Information Processing Language">Information Processing Language</a> (IPL) is sometimes cited as the first computer-based functional programming language. It is an assembly-style language for manipulating lists of symbols. It does have a notion of "generator", which amounts to a function accepting a function as an argument, and, since it is an assembly-level language, code can be used as data, so IPL can be regarded as having higher-order functions. However, it relies heavily on mutating list structure and similar imperative features.</p>
<p><a href="/wiki/Kenneth_E._Iverson" title="Kenneth E. Iverson">Kenneth E. Iverson</a> developed the <a href="/wiki/APL_programming_language" title="APL programming language" class="mw-redirect">APL programming language</a> in the early 1960s, described in his 1962 book <i>A Programming Language</i> (<a href="/wiki/Special:BookSources/9780471430148" class="internal">ISBN 9780471430148</a>). APL was the primary influence on <a href="/wiki/John_Backus" title="John Backus">John Backus</a>'s <a href="/wiki/FP_programming_language" title="FP programming language" class="mw-redirect">FP programming language</a>. In the early 1990s, Iverson and <a href="/wiki/Roger_Hui" title="Roger Hui">Roger Hui</a> created a successor to APL, the <a href="/wiki/J_programming_language" title="J programming language" class="mw-redirect">J programming language</a>. In the mid 1990s, <a href="/wiki/Arthur_Whitney_(computer_scientist)" title="Arthur Whitney (computer scientist)">Arthur Whitney</a>, who had previously worked with Iverson, created the <a href="/wiki/K_programming_language" title="K programming language" class="mw-redirect">K programming language</a>, which is used commercially in financial industries.</p>
<p><a href="/wiki/John_Backus" title="John Backus">John Backus</a> presented the <a href="/wiki/FP_programming_language" title="FP programming language" class="mw-redirect">FP programming language</a> in his 1977 <a href="/wiki/Turing_Award" title="Turing Award">Turing Award</a> lecture <a href="http://www.stanford.edu/class/cs242/readings/backus.pdf" class="external text" title="http://www.stanford.edu/class/cs242/readings/backus.pdf" rel="nofollow">Can Programming Be Liberated From the von Neumann Style? A Functional Style and its Algebra of Programs</a>. He defines functional programs as being built up in a hierarchical way by means of "combining forms" that allow an "algebra of programs"; in modern language, this means that functional programs follow the <a href="/wiki/Principle_of_compositionality" title="Principle of compositionality">principle of compositionality</a>. Backus's paper popularized research into functional programming, though it emphasized <a href="/wiki/Function-level_programming" title="Function-level programming">function-level programming</a> rather than the lambda-calculus style which has come to be associated with functional programming.</p>
<p>In the 1970s the <a href="/wiki/ML_programming_language" title="ML programming language" class="mw-redirect">ML programming language</a> was created by <a href="/wiki/Robin_Milner" title="Robin Milner">Robin Milner</a> at the <a href="/wiki/University_of_Edinburgh" title="University of Edinburgh">University of Edinburgh</a>, and <a href="/wiki/David_Turner_(computer_scientist)" title="David Turner (computer scientist)">David Turner</a> developed initially the language <a href="/wiki/SASL" title="SASL">SASL</a> at the <a href="/wiki/University_of_St._Andrews" title="University of St. Andrews" class="mw-redirect">University of St. Andrews</a> and later the language <a href="/wiki/Miranda_programming_language" title="Miranda programming language" class="mw-redirect">Miranda</a> at the <a href="/wiki/University_of_Kent" title="University of Kent">University of Kent</a>. ML eventually developed into <a href="/wiki/Category:ML_programming_language_family" title="Category:ML programming language family">several dialects</a>, the most common of which are now <a href="/wiki/Objective_Caml" title="Objective Caml">Objective Caml</a> and <a href="/wiki/Standard_ML" title="Standard ML">Standard ML</a>. Also in the 1970s, the development of the <a href="/wiki/Scheme_programming_language" title="Scheme programming language" class="mw-redirect">Scheme programming language</a> (a partly-functional dialect of Lisp), as described in the influential <a href="/wiki/Lambda_Papers" title="Lambda Papers">Lambda Papers</a> and the 1985 textbook <a href="/wiki/Structure_and_Interpretation_of_Computer_Programs" title="Structure and Interpretation of Computer Programs">Structure and Interpretation of Computer Programs</a>, brought awareness of the power of functional programming to the wider programming-languages community.</p>
<p>In the 1980s, <a href="/wiki/Per_Martin-L%C3%B6f" title="Per Martin-Löf">Per Martin-Löf</a> developed <a href="/wiki/Intuitionistic_type_theory" title="Intuitionistic type theory">Intuitionistic type theory</a> (also called <i>Constructive</i> type theory), which associated functional programs with <a href="/wiki/Constructive_proof" title="Constructive proof">constructive proofs</a> of arbitrarily complex mathematical propositions expressed as <a href="/wiki/Dependent_type" title="Dependent type">dependent types</a>. This led to powerful new approaches to <a href="/wiki/Interactive_theorem_proving" title="Interactive theorem proving">interactive theorem proving</a> and has influenced the development of many subsequent functional programming languages.</p>
<p>The <a href="/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell programming language</a> was released in the late 1980s in an attempt to gather together many ideas in functional programming research.</p>
<p><a name="Concepts" id="Concepts"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Functional_programming&amp;action=edit&amp;section=2" title="Edit section: Concepts">edit</a>]</span> <span class="mw-headline">Concepts</span></h2>
<p>A number of concepts and paradigms are specific to functional programming, and generally foreign to <a href="/wiki/Imperative_programming" title="Imperative programming">imperative programming</a> (including <a href="/wiki/Object_oriented_programming" title="Object oriented programming" class="mw-redirect">object oriented programming</a>). However, programming languages are often hybrids of several programming paradigms so programmers using "mostly imperative" languages may have utilized some of these concepts.<sup id="cite_ref-14" class="reference"><a href="#cite_note-14" title=""><span>[</span>15<span>]</span></a></sup></p>
<p><a name="Higher-order_functions" id="Higher-order_functions"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Functional_programming&amp;action=edit&amp;section=3" title="Edit section: Higher-order functions">edit</a>]</span> <span class="mw-headline">Higher-order functions</span></h3>
<p>Functions are higher-order when they can take other functions as arguments, and return them as results. (<a href="/wiki/Operator" title="Operator">Operators</a> in mathematics, such as the <a href="/wiki/Differential_operator" title="Differential operator">differential operator</a> <span class="texhtml"><i>d</i> / <i>d</i><i>x</i></span> that produces the <a href="/wiki/Derivative" title="Derivative">derivative</a> in <a href="/wiki/Calculus" title="Calculus">calculus</a> when applied to a function <span class="texhtml"><i>f</i></span>, are examples of this.)</p>
<p>Higher-order functions are closely related to <a href="/wiki/First-class_function" title="First-class function">first-class functions</a>, in that higher-order functions and first-class functions both allow functions as arguments and results of other functions. The distinction between the two is subtle: "higher-order" describes a mathematical concept of functions that operate on other functions, while "first-class" is a computer science term that describes programming language entities that have no restriction on their use (thus first-class functions can appear anywhere in the program that other first-class entities like numbers can, including as arguments to other functions and as their return values).</p>
<p>Higher-order functions enable <a href="/wiki/Currying" title="Currying">currying</a>, a technique in which a function is applied to its arguments one at a time, with each application returning a new function that accepts the next argument.</p>
<p><a name="Pure_functions" id="Pure_functions"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Functional_programming&amp;action=edit&amp;section=4" title="Edit section: Pure functions">edit</a>]</span> <span class="mw-headline">Pure functions</span></h3>
<p><a href="/wiki/Purely_functional" title="Purely functional">Purely functional</a> functions (or expressions) have no memory or I/O <a href="/wiki/Side_effect_(computer_science)" title="Side effect (computer science)">side effects</a>, unless the computation of the result in itself is counted as a side-effect. This means that pure functions have several useful properties, many of which can be used to optimize the code:</p>
<ul>
<li>If the result of a pure expression is not used, it can be removed without affecting other expressions.</li>
<li>If a pure function is called with parameters that cause no side-effects, the result is constant with respect to that parameter list (sometimes called <a href="/wiki/Referential_transparency_(computer_science)" title="Referential transparency (computer science)">referential transparency</a>), i.e. if the pure function is again called with the same parameters, the same result will be returned (this can enable caching optimisations such as <a href="/wiki/Memoization" title="Memoization">memoization</a>).</li>
<li>If there is no data dependency between two pure expressions, then their order can be reversed, or they can be performed in <a href="/wiki/Parallelisation" title="Parallelisation" class="mw-redirect">parallel</a> and they cannot interfere with one another (in other terms, the evaluation of any pure expression is <a href="/wiki/Thread-safe" title="Thread-safe" class="mw-redirect">thread-safe</a>).</li>
<li>If the entire language does not allow side-effects, then any evaluation strategy can be used; this gives the compiler freedom to reorder or combine the evaluation of expressions in a program (for example, using <a href="/wiki/Deforestation_(computer_science)" title="Deforestation (computer science)">deforestation</a>).</li>
</ul>
<p>While most compilers for imperative programming languages detect pure functions, and perform common-subexpression elimination for pure function calls, they cannot always do this for pre-compiled libraries, which generally do not expose this information, thus preventing optimisations that involve those external functions. Some compilers, such as <a href="/wiki/GNU_Compiler_Collection" title="GNU Compiler Collection">gcc</a>, add extra keywords for a programmer to explicitly mark external functions as pure, to enable such optimisations. <a href="/wiki/Fortran_95" title="Fortran 95" class="mw-redirect">Fortran 95</a> allows functions to be designated "pure".</p>
<p><a name="Recursion" id="Recursion"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Functional_programming&amp;action=edit&amp;section=5" title="Edit section: Recursion">edit</a>]</span> <span class="mw-headline">Recursion</span></h3>
<div class="rellink noprint relarticle mainarticle">Main article: <a href="/wiki/Recursion_(computer_science)" title="Recursion (computer science)">Recursion (computer science)</a></div>
<p><a href="/wiki/Iteration" title="Iteration">Iteration</a> (looping) in functional languages is usually accomplished via <a href="/wiki/Recursion" title="Recursion">recursion</a>. <a href="/wiki/Recursion_(computer_science)" title="Recursion (computer science)">Recursive functions</a> invoke themselves, allowing an operation to be performed over and over. Recursion may require maintaining a stack, but <a href="/wiki/Tail_recursion" title="Tail recursion">tail recursion</a> can be recognized and optimized by a compiler into the same code used to implement iteration in imperative languages. The <a href="/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme programming language</a> standard requires implementations to recognize and optimize tail recursion. Tail recursion optimization can be implemented by transforming the program into <a href="/wiki/Continuation_passing_style" title="Continuation passing style" class="mw-redirect">continuation passing style</a> during compilation, among other approaches.</p>
<p>Common patterns of recursion can be factored out using higher order functions, <a href="/wiki/Catamorphism" title="Catamorphism">catamorphisms</a> and <a href="/wiki/Anamorphism" title="Anamorphism">anamorphisms</a> (or "folds" and "unfolds") being the most obvious examples. Such higher order functions play a role analogous to built-in control structures such as <a href="/wiki/Loop" title="Loop">loops</a> in <a href="/wiki/Imperative_languages" title="Imperative languages" class="mw-redirect">imperative languages</a>.</p>
<p>Most general purpose functional programming languages allow unrestricted recursion and are <a href="/wiki/Turing_complete" title="Turing complete" class="mw-redirect">Turing complete</a>, which makes the <a href="/wiki/Halting_problem" title="Halting problem">halting problem</a> <a href="/wiki/Undecidable" title="Undecidable">undecidable</a>, can cause unsoundness of <a href="/w/index.php?title=Equational_reasoning&amp;action=edit&amp;redlink=1" class="new" title="Equational reasoning (page does not exist)">equational reasoning</a>, and generally requires the introduction of <a href="/wiki/Inconsistency" title="Inconsistency" class="mw-redirect">inconsistency</a> into the logic expressed by the language's <a href="/wiki/Type_system" title="Type system">type system</a>. Some special purpose languages such as <a href="/wiki/Coq" title="Coq">Coq</a> allow only <a href="/wiki/Well-founded" title="Well-founded" class="mw-redirect">well-founded</a> recursion and are <a href="/wiki/Strongly_normalizing" title="Strongly normalizing" class="mw-redirect">strongly normalizing</a> (nonterminating computations can be expressed only with infinite streams of values called <a href="/w/index.php?title=Codata&amp;action=edit&amp;redlink=1" class="new" title="Codata (page does not exist)">codata</a>). As a consequence, these languages fail to be Turing complete and expressing certain functions in them is impossible, but they can still express a wide class of interesting computations while avoiding the problems introduced by unrestricted recursion. Functional programming limited to well-founded recursion with a few other constraints is called <a href="/wiki/Total_functional_programming" title="Total functional programming">total functional programming</a>. See Turner 2004 for more discussion. <sup id="cite_ref-totalfp_15-0" class="reference"><a href="#cite_note-totalfp-15" title=""><span>[</span>16<span>]</span></a></sup></p>
<p><a name="Strict_versus_non-strict_evaluation" id="Strict_versus_non-strict_evaluation"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Functional_programming&amp;action=edit&amp;section=6" title="Edit section: Strict versus non-strict evaluation">edit</a>]</span> <span class="mw-headline">Strict versus non-strict evaluation</span></h3>
<dl>
<dd>
<div class="rellink noprint relarticle mainarticle">Main article: <a href="/wiki/Evaluation_strategy" title="Evaluation strategy">Evaluation strategy</a></div>
</dd>
</dl>
<p>Functional languages can be categorized by whether they use <i>strict</i> or <i>non-strict</i> evaluation, concepts that refer to how function arguments are processed when an expression is being evaluated. The technical difference is in the <a href="/wiki/Denotational_semantics" title="Denotational semantics">denotational semantics</a> of expressions containing failing or divergent computations. Under strict evaluation, the evaluation of any term containing a failing subterm will itself fail. For example, the expression</p>
<pre>
 print length([2+1, 3*2, 1/0, 5-4])
</pre>
<p>will fail under strict evaluation because of the division by zero in the third element of the list. Under nonstrict evaluation, the length function will return the value 4, since evaluating it will not attempt to evaluate the terms making up the list. In brief, strict evaluation always fully evaluates function arguments before invoking the function. Non-strict evaluation does not evaluate function arguments unless their values are required to evaluate the function call itself.</p>
<p>The usual implementation strategy for non-strict evaluation in functional languages is <a href="/wiki/Graph_reduction" title="Graph reduction">graph reduction</a>. Non-strict evaluation is used by default in several pure functional languages, including <a href="/wiki/Miranda_(programming_language)" title="Miranda (programming language)">Miranda</a>, <a href="/wiki/Clean_(programming_language)" title="Clean (programming language)">Clean</a> and <a href="/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell</a>.</p>
<p>Hughes 1984 argues for non-strict (lazy) evaluation as a mechanism for improving program modularity through <a href="/wiki/Separation_of_concerns" title="Separation of concerns">separation of concerns</a>, by easing independent implementation of producers and consumers of data streams.<sup id="cite_ref-16" class="reference"><a href="#cite_note-16" title=""><span>[</span>17<span>]</span></a></sup> Launchbury 1993 describes some difficulties that lazy evaluation introduces, particularly in analyzing a program's storage requirements, and proposes an <a href="/wiki/Operational_semantics" title="Operational semantics">operational semantics</a> to aid in such analysis.<sup id="cite_ref-17" class="reference"><a href="#cite_note-17" title=""><span>[</span>18<span>]</span></a></sup> Harper 2009 proposes including both strict and nonstrict evaluation in the same language, using the language's type system to distinguish them.<sup id="cite_ref-18" class="reference"><a href="#cite_note-18" title=""><span>[</span>19<span>]</span></a></sup></p>
<p><a name="Type_systems_and_pattern_matching" id="Type_systems_and_pattern_matching"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Functional_programming&amp;action=edit&amp;section=7" title="Edit section: Type systems and pattern matching">edit</a>]</span> <span class="mw-headline">Type systems and pattern matching</span></h3>
<p>Especially since the development of <a href="/wiki/Hindley-Milner_type_inference" title="Hindley-Milner type inference" class="mw-redirect">Hindley-Milner type inference</a> in the 1970s, functional programming languages have tended to use <a href="/wiki/Typed_lambda_calculus" title="Typed lambda calculus">typed lambda calculus</a>, as opposed to the <a href="/wiki/Untyped_lambda_calculus" title="Untyped lambda calculus" class="mw-redirect">untyped lambda calculus</a> used in Lisp and its variants (such as Scheme). The use of <a href="/wiki/Algebraic_datatypes" title="Algebraic datatypes" class="mw-redirect">algebraic datatypes</a> and <a href="/wiki/Pattern_matching" title="Pattern matching">pattern matching</a> makes manipulation of complex data structures more convenient and expressive; the presence of strong compile-time type checking makes programs more reliable, while <a href="/wiki/Type_inference" title="Type inference">type inference</a> frees the programmer from the need to manually declare types to the compiler.</p>
<p>Some research-oriented functional languages such as <a href="/wiki/Coq" title="Coq">Coq</a>, <a href="/wiki/Agda_(theorem_prover)" title="Agda (theorem prover)">Agda</a>, <a href="/wiki/Cayenne_(programming_language)" title="Cayenne (programming language)">Cayenne</a>, and <a href="/wiki/Epigram_(programming_language)" title="Epigram (programming language)">Epigram</a> are based on <a href="/wiki/Intuitionistic_type_theory" title="Intuitionistic type theory">Intuitionistic type theory</a>, which allows types to depend on terms. Such types are called <a href="/wiki/Dependent_type" title="Dependent type">dependent types</a>. These type systems do not have decidable type inference and are difficult to understand and program with. But dependent types can express arbitrary propositions in <a href="/wiki/Predicate_logic" title="Predicate logic">predicate logic</a>. Through the <a href="/wiki/Curry-Howard_isomorphism" title="Curry-Howard isomorphism" class="mw-redirect">Curry-Howard isomorphism</a>, then, well-typed programs in these languages become a means of writing formal <a href="/wiki/Mathematical_proof" title="Mathematical proof">mathematical proofs</a> from which a compiler can generate <a href="/wiki/Formal_verification" title="Formal verification">certified code</a>. While these languages are primarily of interest in academic research (including in <a href="/w/index.php?title=Formalized_mathematics&amp;action=edit&amp;redlink=1" class="new" title="Formalized mathematics (page does not exist)">formalized mathematics</a>), they have begun to be used in engineering as well. <a href="/w/index.php?title=Compcert&amp;action=edit&amp;redlink=1" class="new" title="Compcert (page does not exist)">Compcert</a> is a <a href="/wiki/Compiler" title="Compiler">compiler</a> for a subset of the <a href="/wiki/C_programming_language" title="C programming language" class="mw-redirect">C programming language</a> that is written in Coq and formally verified.<sup id="cite_ref-19" class="reference"><a href="#cite_note-19" title=""><span>[</span>20<span>]</span></a></sup></p>
<p>A limited form of dependent types called <a href="/wiki/Generalized_algebraic_data_type" title="Generalized algebraic data type" class="mw-redirect">generalized algebraic data types</a> (GADT's) can be implemented in a way that provides some of the benefits of dependently-typed programming while avoiding most of its inconvenience.<sup id="cite_ref-20" class="reference"><a href="#cite_note-20" title=""><span>[</span>21<span>]</span></a></sup> GADT's are available in the <a href="/wiki/Glasgow_Haskell_Compiler" title="Glasgow Haskell Compiler">Glasgow Haskell Compiler</a> and in <a href="/wiki/Scala_(programming_language)" title="Scala (programming language)">Scala</a> (as "case classes"), and have been proposed as additions to other languages including Java and C#.<sup id="cite_ref-21" class="reference"><a href="#cite_note-21" title=""><span>[</span>22<span>]</span></a></sup></p>
<p><a name="Functional_programming_in_non-functional_languages" id="Functional_programming_in_non-functional_languages"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Functional_programming&amp;action=edit&amp;section=8" title="Edit section: Functional programming in non-functional languages">edit</a>]</span> <span class="mw-headline">Functional programming in non-functional languages</span></h3>
<p>It is possible to employ a functional style of programming in languages that are not traditionally considered functional languages.<sup id="cite_ref-22" class="reference"><a href="#cite_note-22" title=""><span>[</span>23<span>]</span></a></sup> Some non-functional languages have borrowed features such as <a href="/wiki/Higher-order_functions" title="Higher-order functions" class="mw-redirect">higher-order functions</a>, and <a href="/wiki/List_comprehensions" title="List comprehensions" class="mw-redirect">list comprehensions</a> from functional programming languages. This makes it easier to adopt a functional style when using these languages. Functional constructs such as higher-order functions and lazy lists can be obtained in C++ via libraries.<sup id="cite_ref-23" class="reference"><a href="#cite_note-23" title=""><span>[</span>24<span>]</span></a></sup> In C, function pointers can be used to get some of the effects of higher-order functions. For example the common function <a href="/wiki/Map_(higher-order_function)" title="Map (higher-order function)">map</a> can be implemented using function pointers.<sup class="noprint Template-Fact"><span title="This claim needs references to reliable sources&#160;since January 2009" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</span></sup> In <a href="/wiki/CSharp" title="CSharp" class="mw-redirect">C#</a> version 3.0 and higher, lambda functions can be employed to write programs in a functional style.<sup class="noprint Template-Fact"><span title="This claim needs references to reliable sources&#160;since September 2008" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</span></sup> In <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a>, <a href="/wiki/Anonymous_class" title="Anonymous class" class="mw-redirect">anonymous classes</a> can sometimes be used to simulate closures,<sup class="noprint Template-Fact"><span title="This claim needs references to reliable sources&#160;since January 2009" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</span></sup> however anonymous classes cannot always be proper replacements to closures because they have more limited capabilities.</p>
<p>Many <a href="/wiki/Object-oriented" title="Object-oriented" class="mw-redirect">object-oriented</a> <a href="/wiki/Design_pattern" title="Design pattern">design patterns</a> are expressible in functional programming terms: for example, the <a href="/wiki/Strategy_pattern" title="Strategy pattern">Strategy pattern</a> simply dictates use of a higher-order function, and the <a href="/wiki/Visitor_(design_pattern)" title="Visitor (design pattern)" class="mw-redirect">Visitor</a> pattern roughly corresponds to a <a href="/wiki/Catamorphism" title="Catamorphism">Catamorphism</a>, or <a href="/wiki/Fold_(higher-order_function)" title="Fold (higher-order function)">fold</a>.</p>
<p>The benefits of immutable data can be seen even in imperative programs, so programmers often strive to make some data immutable even in imperative programs<sup class="noprint Template-Fact"><span title="This claim needs references to reliable sources&#160;since January 2009" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</span></sup>.</p>
<p><a name="Comparison_of_functional_and_imperative_programming" id="Comparison_of_functional_and_imperative_programming"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Functional_programming&amp;action=edit&amp;section=9" title="Edit section: Comparison of functional and imperative programming">edit</a>]</span> <span class="mw-headline">Comparison of functional and imperative programming</span></h2>
<p>Functional programming is very different from <a href="/wiki/Imperative_programming" title="Imperative programming">imperative programming</a>. The most significant differences stem from the fact that functional programming avoids <a href="/wiki/Side_effect_(computer_science)" title="Side effect (computer science)">side effects</a>, which are used in imperative programming to implement state and I/O. Pure functional programming disallows side effects completely. Disallowing side effects provides for <a href="/wiki/Referential_transparency_(computer_science)" title="Referential transparency (computer science)">referential transparency</a>, which makes it easier to verify, optimize, and parallelize programs, and easier to write automated tools to perform those tasks.</p>
<p>Higher order functions are rarely used in older imperative programming. Where a traditional imperative program might use a loop to traverse a list, a functional style would often use a higher-order function, map, that takes as arguments a function and a list, applies the function to each element of the list, and returns a list of the results.</p>
<p><a name="Simulating_state" id="Simulating_state"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Functional_programming&amp;action=edit&amp;section=10" title="Edit section: Simulating state">edit</a>]</span> <span class="mw-headline">Simulating state</span></h3>
<p>There are tasks—for example, maintaining a bank account balance—that often seem most naturally implemented with state. Pure functional programming performs these tasks, and I/O tasks such as accepting user input and printing to the screen, in a different way.</p>
<p>The pure functional programming language Haskell implements them using <a href="/wiki/Monads_in_functional_programming" title="Monads in functional programming" class="mw-redirect">monads</a>, derived from <a href="/wiki/Category_theory" title="Category theory">category theory</a>. Monads are powerful and offer a way to abstract certain types of computational patterns, including (but not limited to) modeling of computations with mutable state (and other side effects such as I/O) in an imperative manner without losing purity. While existing monads may be easy to apply in a program, given appropriate templates and examples, many find them difficult to understand conceptually, e.g., when asked to define new monads (which is sometimes needed for certain types of libraries).<sup id="cite_ref-24" class="reference"><a href="#cite_note-24" title=""><span>[</span>25<span>]</span></a></sup></p>
<p>Alternative methods such as <a href="/wiki/Hoare_logic" title="Hoare logic">Hoare logic</a> and <a href="/wiki/Uniqueness_type" title="Uniqueness type">uniqueness</a> have been developed to track side effects in programs. Some modern research languages use <a href="/wiki/Effect_system" title="Effect system">effect systems</a> to make explicit the presence of side effects.</p>
<p><a name="Efficiency_issues" id="Efficiency_issues"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Functional_programming&amp;action=edit&amp;section=11" title="Edit section: Efficiency issues">edit</a>]</span> <span class="mw-headline">Efficiency issues</span></h3>
<p>Functional programming languages have been perceived as less efficient in their use of <a href="/wiki/Central_processing_unit" title="Central processing unit">CPU</a> and memory than imperative languages such as C and Pascal.<sup id="cite_ref-25" class="reference"><a href="#cite_note-25" title=""><span>[</span>26<span>]</span></a></sup> However, for programs that perform intensive numerical computations, functional languages such as <a href="/wiki/OCaml_programming_language" title="OCaml programming language" class="mw-redirect">OCaml</a> and <a href="/wiki/Clean_(programming_language)" title="Clean (programming language)">Clean</a> are similar in speed to <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a>.<sup class="noprint Template-Fact"><span title="This claim needs references to reliable sources&#160;since January 2009" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</span></sup> For programs that handle large <a href="/wiki/Matrix_(mathematics)" title="Matrix (mathematics)">matrices</a> and multidimensional <a href="/wiki/Database" title="Database">databases</a>, <a href="/wiki/Array_programming" title="Array programming">array</a> functional languages (such as <a href="/wiki/J_programming_language" title="J programming language" class="mw-redirect">J</a> and <a href="/wiki/K_programming_language" title="K programming language" class="mw-redirect">K</a>) were designed with speed optimization in mind.</p>
<p>Purely functional languages have a reputation for being slower than imperative languages.<sup class="noprint Template-Fact"><span title="This claim needs references to reliable sources&#160;since October 2008" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</span></sup> However, immutability of data can, in many cases, lead to execution efficiency in allowing the compiler to make assumptions that are unsafe in an imperative language, vastly increasing opportunities for <a href="/wiki/Inline_expansion" title="Inline expansion">inlining</a>.<sup class="noprint Template-Fact"><span title="This claim needs references to reliable sources&#160;since October 2008" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</span></sup>.</p>
<p><a href="/wiki/Lazy_evaluation" title="Lazy evaluation">Lazy evaluation</a> may also speed up the program, even asymptotically, whereas it may slow it down at most by a constant factor (however, it may introduce memory leaks when used improperly)<sup class="noprint Template-Fact"><span title="This claim needs references to reliable sources&#160;since January 2009" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</span></sup>.</p>
<p><a name="Coding_styles" id="Coding_styles"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Functional_programming&amp;action=edit&amp;section=12" title="Edit section: Coding styles">edit</a>]</span> <span class="mw-headline">Coding styles</span></h3>
<p>Imperative programs tend to emphasize the series of steps taken by a program in carrying out an action, while functional programs tend to emphasize the composition and arrangement of functions, often without specifying explicit <i>steps</i>. A simple example of two solutions to the same programming goal (using the same multi-paradigm language <a href="/wiki/Python_(programming_language)" title="Python (programming language)">Python</a>) illustrates this.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-python">
<span class="co1"># imperative style</span>
target = <span class="br0">[</span><span class="br0">]</span> <span class="co1"># create empty list</span>
<span class="kw1">for</span> item <span class="kw1">in</span> source_list: <span class="co1"># iterate over each thing in source</span>
    trans1 = G<span class="br0">(</span>item<span class="br0">)</span> <span class="co1"># transform the item with the G() function</span>
    trans2 = F<span class="br0">(</span>trans1<span class="br0">)</span> <span class="co1"># second transform with the F() function</span>
    target.<span class="me1">append</span><span class="br0">(</span>trans2<span class="br0">)</span> <span class="co1"># add transformed item to target</span>
</pre></div>
<p>A functional version has a different feel to it:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-python">
<span class="co1"># functional style</span>
<span class="co1"># FP-oriented languages often have standard compose()</span>
compose2 = <span class="kw1">lambda</span> A, B: <span class="kw1">lambda</span> x: A<span class="br0">(</span>B<span class="br0">(</span>x<span class="br0">)</span><span class="br0">)</span> <span class="co1"># Define how to apply two generic transformations</span>
target = <span class="kw2">map</span><span class="br0">(</span>compose2<span class="br0">(</span>F, G<span class="br0">)</span>, source_list<span class="br0">)</span> <span class="co1"># Apply two specific functions F and G to each item in source</span>
</pre></div>
<p>In contrast to the imperative style that describes the steps involved in building <code>target</code>, the functional style describes the mathematical relationship between <code>source_list</code> and <code>target</code>.</p>
<p>In practice in Python that code is often written with a <a href="/wiki/List_comprehension" title="List comprehension">list comprehension</a>, a form of <a href="/wiki/Syntactic_sugar" title="Syntactic sugar">syntactic sugar</a> for the for loop with implicit append:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-python">
target = <span class="br0">[</span>F<span class="br0">(</span>G<span class="br0">(</span>item<span class="br0">)</span><span class="br0">)</span> <span class="kw1">for</span> item <span class="kw1">in</span> source_list<span class="br0">]</span>
</pre></div>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Functional_programming&amp;action=edit&amp;section=13" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<div style="-moz-column-count:2; column-count:2;">
<ul>
<li><a href="/wiki/Eager_evaluation" title="Eager evaluation">Eager evaluation</a></li>
<li><a href="/wiki/Function-level_programming" title="Function-level programming">Function-level programming</a> (compare and contrast)</li>
<li><a href="/wiki/Imperative_programming" title="Imperative programming">Imperative programming</a> (contrast)</li>
<li><a href="/wiki/Lambda_calculus" title="Lambda calculus">Lambda calculus</a></li>
<li><a href="/wiki/List_of_functional_programming_topics" title="List of functional programming topics">List of functional programming topics</a></li>
<li><a href="/wiki/Logic_programming" title="Logic programming">Logic programming</a> (contrast)</li>
<li><a href="/wiki/Nested_function" title="Nested function">Nested function</a></li>
<li><a href="/wiki/Procedural_programming" title="Procedural programming">Procedural programming</a> (contrast)</li>
<li><a href="/wiki/Purely_functional" title="Purely functional">Purely functional</a></li>
<li><a href="/wiki/Structure_and_Interpretation_of_Computer_Programs" title="Structure and Interpretation of Computer Programs">Structure and Interpretation of Computer Programs</a>, a textbook and a set of lecture videorecordings from MIT</li>
<li><a href="/wiki/Category:Functional_languages" title="Category:Functional languages">Category: Functional languages</a> -- Wikipedia's articles about specific languages with functional programming features.</li>
</ul>
</div>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Functional_programming&amp;action=edit&amp;section=14" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<div class="references-small">
<ol class="references">
<li id="cite_note-hudak1989-0">^ <a href="#cite_ref-hudak1989_0-0" title=""><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-hudak1989_0-1" title=""><sup><i><b>b</b></i></sup></a> <a href="#cite_ref-hudak1989_0-2" title=""><sup><i><b>c</b></i></sup></a> <cite style="font-style:normal" class="" id="CITEREFHudak1989"><a href="/w/index.php?title=Paul_Hudak&amp;action=edit&amp;redlink=1" class="new" title="Paul Hudak (page does not exist)">Hudak, Paul</a> (September 1989). "<a href="http://www.cs.berkeley.edu/~jcondit/pl-prelim/hudak89functional.pdf" class="external text" title="http://www.cs.berkeley.edu/~jcondit/pl-prelim/hudak89functional.pdf" rel="nofollow">Conception, evolution, and application of functional programming languages</a>" (PDF). <i><a href="/wiki/Association_for_Computing_Machinery" title="Association for Computing Machinery">ACM</a> Computing Surveys</i> <b>21</b> (3): 359–411. <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<span class="neverexpand"><a href="http://dx.doi.org/10.1145%2F72551.72554" class="external text" title="http://dx.doi.org/10.1145%2F72551.72554" rel="nofollow">10.1145/72551.72554</a></span><span class="printonly">. <a href="http://www.cs.berkeley.edu/~jcondit/pl-prelim/hudak89functional.pdf" class="external free" title="http://www.cs.berkeley.edu/~jcondit/pl-prelim/hudak89functional.pdf" rel="nofollow">http://www.cs.berkeley.edu/~jcondit/pl-prelim/hudak89functional.pdf</a></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=Conception%2C+evolution%2C+and+application+of+functional+programming+languages&amp;rft.jtitle=%5B%5BAssociation+for+Computing+Machinery%7CACM%5D%5D+Computing+Surveys&amp;rft.aulast=Hudak&amp;rft.aufirst=Paul&amp;rft.au=Hudak%2C+Paul&amp;rft.date=September+1989&amp;rft.volume=21&amp;rft.issue=3&amp;rft.pages=359%E2%80%93411&amp;rft_id=info:doi/10.1145%2F72551.72554&amp;rft_id=http%3A%2F%2Fwww.cs.berkeley.edu%2F%7Ejcondit%2Fpl-prelim%2Fhudak89functional.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-1"><b><a href="#cite_ref-1" title="">^</a></b> <cite style="font-style:normal" class="web"><a href="http://www.erlang.org/faq/faq.html#AEN50" class="external text" title="http://www.erlang.org/faq/faq.html#AEN50" rel="nofollow">"Who uses Erlang for product development?"</a>. <i>Frequently asked questions about Erlang</i><span class="printonly">. <a href="http://www.erlang.org/faq/faq.html#AEN50" class="external free" title="http://www.erlang.org/faq/faq.html#AEN50" rel="nofollow">http://www.erlang.org/faq/faq.html#AEN50</a></span><span class="reference-accessdate">. Retrieved on 2007-08-05</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Who+uses+Erlang+for+product+development%3F&amp;rft.atitle=Frequently+asked+questions+about+Erlang&amp;rft_id=http%3A%2F%2Fwww.erlang.org%2Ffaq%2Ffaq.html%23AEN50&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-2"><b><a href="#cite_ref-2" title="">^</a></b> <cite style="font-style:normal" class="" id="CITEREFMinskyWeeks2008">Minsky, Yaron; Weeks, Stephen (July 2008). "<a href="http://journals.cambridge.org/action/displayAbstract?aid=1899164" class="external text" title="http://journals.cambridge.org/action/displayAbstract?aid=1899164" rel="nofollow">Caml Trading - experiences with functional programming on Wall Street</a>". <i>Journal of Functional Programming</i> (Cambridge University Press) <b>18</b> (4): 553–564. <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<span class="neverexpand"><a href="http://dx.doi.org/10.1017%2FS095679680800676X" class="external text" title="http://dx.doi.org/10.1017%2FS095679680800676X" rel="nofollow">10.1017/S095679680800676X</a></span><span class="printonly">. <a href="http://journals.cambridge.org/action/displayAbstract?aid=1899164" class="external free" title="http://journals.cambridge.org/action/displayAbstract?aid=1899164" rel="nofollow">http://journals.cambridge.org/action/displayAbstract?aid=1899164</a></span><span class="reference-accessdate">. Retrieved on 2008-08-27</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=Caml+Trading+-+experiences+with+functional+programming+on+Wall+Street&amp;rft.jtitle=Journal+of+Functional+Programming&amp;rft.aulast=Minsky&amp;rft.aufirst=Yaron&amp;rft.au=Minsky%2C+Yaron&amp;rft.au=Weeks%2C+Stephen&amp;rft.date=July+2008&amp;rft.volume=18&amp;rft.issue=4&amp;rft.pages=553%E2%80%93564&amp;rft.pub=Cambridge+University+Press&amp;rft_id=info:doi/10.1017%2FS095679680800676X&amp;rft_id=http%3A%2F%2Fjournals.cambridge.org%2Faction%2FdisplayAbstract%3Faid%3D1899164&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-3"><b><a href="#cite_ref-3" title="">^</a></b> <cite style="font-style:normal" class="web"><a href="http://www.haskell.org/" class="external text" title="http://www.haskell.org/" rel="nofollow">""Haskell - Haskell Wiki"</a><span class="printonly">. <a href="http://www.haskell.org/" class="external free" title="http://www.haskell.org/" rel="nofollow">http://www.haskell.org/</a></span><span class="reference-accessdate">. Retrieved on 2008-08-27</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=%22Haskell+-+Haskell+Wiki&amp;rft.atitle=&amp;rft_id=http%3A%2F%2Fwww.haskell.org%2F&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-4"><b><a href="#cite_ref-4" title="">^</a></b> <cite style="font-style:normal" class="" id="CITEREFClinger1987">Clinger, Will (1987). "<a href="http://www.mactech.com/articles/mactech/Vol.03/03.12/Multitasking/index.html" class="external text" title="http://www.mactech.com/articles/mactech/Vol.03/03.12/Multitasking/index.html" rel="nofollow">MultiTasking and MacScheme</a>". <i>MacTech</i> <b>3</b> (12)<span class="printonly">. <a href="http://www.mactech.com/articles/mactech/Vol.03/03.12/Multitasking/index.html" class="external free" title="http://www.mactech.com/articles/mactech/Vol.03/03.12/Multitasking/index.html" rel="nofollow">http://www.mactech.com/articles/mactech/Vol.03/03.12/Multitasking/index.html</a></span><span class="reference-accessdate">. Retrieved on 2008-08-28</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=MultiTasking+and+MacScheme&amp;rft.jtitle=MacTech&amp;rft.aulast=Clinger&amp;rft.aufirst=Will&amp;rft.au=Clinger%2C+Will&amp;rft.date=1987&amp;rft.volume=3&amp;rft.issue=12&amp;rft_id=http%3A%2F%2Fwww.mactech.com%2Farticles%2Fmactech%2FVol.03%2F03.12%2FMultitasking%2Findex.html&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-5"><b><a href="#cite_ref-5" title="">^</a></b> <cite style="font-style:normal" class="" id="CITEREFHartheimer1987">Hartheimer, Anne (1987). "<a href="http://www.mactech.com/articles/mactech/Vol.03/03.1/SchemeWindows/index.html" class="external text" title="http://www.mactech.com/articles/mactech/Vol.03/03.1/SchemeWindows/index.html" rel="nofollow">Programming a Text Editor in MacScheme+Toolsmith</a>". <i>MacTech</i> <b>3</b> (1)<span class="printonly">. <a href="http://www.mactech.com/articles/mactech/Vol.03/03.1/SchemeWindows/index.html" class="external free" title="http://www.mactech.com/articles/mactech/Vol.03/03.1/SchemeWindows/index.html" rel="nofollow">http://www.mactech.com/articles/mactech/Vol.03/03.1/SchemeWindows/index.html</a></span><span class="reference-accessdate">. Retrieved on 2008-08-28</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=Programming+a+Text+Editor+in+MacScheme%2BToolsmith&amp;rft.jtitle=MacTech&amp;rft.aulast=Hartheimer&amp;rft.aufirst=Anne&amp;rft.au=Hartheimer%2C+Anne&amp;rft.date=1987&amp;rft.volume=3&amp;rft.issue=1&amp;rft_id=http%3A%2F%2Fwww.mactech.com%2Farticles%2Fmactech%2FVol.03%2F03.1%2FSchemeWindows%2Findex.html&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-6"><b><a href="#cite_ref-6" title="">^</a></b> <a href="http://www.r-project.org/useR-2006/program.html" class="external text" title="http://www.r-project.org/useR-2006/program.html" rel="nofollow">The useR! 2006 conference schedule includes papers on the commercial use of R</a></li>
<li id="cite_note-7"><b><a href="#cite_ref-7" title="">^</a></b> <cite style="font-style:normal" class="web" id="CITEREFDepartment_of_Applied_Math.2C_University_of_Colorado">Department of Applied Math, University of Colorado. <a href="http://amath.colorado.edu/computing/mmm/funcproc.html" class="external text" title="http://amath.colorado.edu/computing/mmm/funcproc.html" rel="nofollow">"Functional vs. Procedural Programming Language"</a><span class="printonly">. <a href="http://amath.colorado.edu/computing/mmm/funcproc.html" class="external free" title="http://amath.colorado.edu/computing/mmm/funcproc.html" rel="nofollow">http://amath.colorado.edu/computing/mmm/funcproc.html</a></span><span class="reference-accessdate">. Retrieved on 2006-08-28</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Functional+vs.+Procedural+Programming+Language&amp;rft.atitle=&amp;rft.aulast=Department+of+Applied+Math%2C+University+of+Colorado&amp;rft.au=Department+of+Applied+Math%2C+University+of+Colorado&amp;rft_id=http%3A%2F%2Famath.colorado.edu%2Fcomputing%2Fmmm%2Ffuncproc.html&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-8"><b><a href="#cite_ref-8" title="">^</a></b> <cite style="font-style:normal" class="web" id="CITEREFDimitre_Novatchev">Dimitre Novatchev. <a href="http://www.topxml.com/xsl/articles/fp/" class="external text" title="http://www.topxml.com/xsl/articles/fp/" rel="nofollow">"The Functional Programming Language XSLT - A proof through examples"</a>. <i>TopXML</i><span class="printonly">. <a href="http://www.topxml.com/xsl/articles/fp/" class="external free" title="http://www.topxml.com/xsl/articles/fp/" rel="nofollow">http://www.topxml.com/xsl/articles/fp/</a></span><span class="reference-accessdate">. Retrieved on May 27 2006</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=The+Functional+Programming+Language+XSLT+-+A+proof+through+examples&amp;rft.atitle=TopXML&amp;rft.aulast=Dimitre+Novatchev&amp;rft.au=Dimitre+Novatchev&amp;rft_id=http%3A%2F%2Fwww.topxml.com%2Fxsl%2Farticles%2Ffp%2F&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-9"><b><a href="#cite_ref-9" title="">^</a></b> <cite style="font-style:normal" class="web" id="CITEREFDavid_Mertz">David Mertz. <a href="http://gnosis.cx/publish/programming/xml_models_fp.html" class="external text" title="http://gnosis.cx/publish/programming/xml_models_fp.html" rel="nofollow">"XML Programming Paradigms (part four): Functional Programming approached to XML processing"</a>. <i>IBM developerWorks</i><span class="printonly">. <a href="http://gnosis.cx/publish/programming/xml_models_fp.html" class="external free" title="http://gnosis.cx/publish/programming/xml_models_fp.html" rel="nofollow">http://gnosis.cx/publish/programming/xml_models_fp.html</a></span><span class="reference-accessdate">. Retrieved on May 27 2006</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=XML+Programming+Paradigms+%28part+four%29%3A+Functional+Programming+approached+to+XML+processing&amp;rft.atitle=IBM+developerWorks&amp;rft.aulast=David+Mertz&amp;rft.au=David+Mertz&amp;rft_id=http%3A%2F%2Fgnosis.cx%2Fpublish%2Fprogramming%2Fxml_models_fp.html&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-10"><b><a href="#cite_ref-10" title="">^</a></b> <cite style="font-style:normal" class="" id="CITEREF.5B.5BDonald_D._Chamberlin.5D.5D_and_.5B.5BRaymond_F._Boyce.5D.5D1974"><a href="/wiki/Donald_D._Chamberlin" title="Donald D. Chamberlin">Donald D. Chamberlin</a> and <a href="/wiki/Raymond_F._Boyce" title="Raymond F. Boyce">Raymond F. Boyce</a> (1974). "SEQUEL: A structured English query language". <i>Proceedings of the 1974 ACM SIGFIDET</i>: 249–264.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=SEQUEL%3A+A+structured+English+query+language&amp;rft.jtitle=Proceedings+of+the+1974+ACM+SIGFIDET&amp;rft.aulast=%5B%5BDonald+D.+Chamberlin%5D%5D+and+%5B%5BRaymond+F.+Boyce%5D%5D&amp;rft.au=%5B%5BDonald+D.+Chamberlin%5D%5D+and+%5B%5BRaymond+F.+Boyce%5D%5D&amp;rft.date=1974&amp;rft.pages=249%E2%80%93264&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;">&#160;</span></span>. In this paper, one of the first formal presentations of the concepts of SQL (and before the name was later abbreviated), Chamberlin and Boyce emphasize that SQL was developed "Without resorting to the concepts of bound variables and quantifiers".</li>
<li id="cite_note-11"><b><a href="#cite_ref-11" title="">^</a></b> <cite style="font-style:normal" class="web" id="CITEREF.5B.5BSimon_Peyton_Jones.5D.5D.2C_.5B.5BMargaret_Burnett.5D.5D.2C_.5B.5BAlan_Blackwell.5D.5D2003"><a href="/wiki/Simon_Peyton_Jones" title="Simon Peyton Jones">Simon Peyton Jones</a>, <a href="/w/index.php?title=Margaret_Burnett&amp;action=edit&amp;redlink=1" class="new" title="Margaret Burnett (page does not exist)">Margaret Burnett</a>, <a href="/w/index.php?title=Alan_Blackwell&amp;action=edit&amp;redlink=1" class="new" title="Alan Blackwell (page does not exist)">Alan Blackwell</a> (March 2003). <a href="http://research.microsoft.com/~simonpj/papers/excel/index.htm" class="external text" title="http://research.microsoft.com/~simonpj/papers/excel/index.htm" rel="nofollow">"Improving the world's most popular functional language: user-defined functions in Excel"</a><span class="printonly">. <a href="http://research.microsoft.com/~simonpj/papers/excel/index.htm" class="external free" title="http://research.microsoft.com/~simonpj/papers/excel/index.htm" rel="nofollow">http://research.microsoft.com/~simonpj/papers/excel/index.htm</a></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Improving+the+world%27s+most+popular+functional+language%3A+user-defined+functions+in+Excel&amp;rft.atitle=&amp;rft.aulast=%5B%5BSimon+Peyton+Jones%5D%5D%2C+%5B%5BMargaret+Burnett%5D%5D%2C+%5B%5BAlan+Blackwell%5D%5D&amp;rft.au=%5B%5BSimon+Peyton+Jones%5D%5D%2C+%5B%5BMargaret+Burnett%5D%5D%2C+%5B%5BAlan+Blackwell%5D%5D&amp;rft.date=March+2003&amp;rft_id=http%3A%2F%2Fresearch.microsoft.com%2F%7Esimonpj%2Fpapers%2Fexcel%2Findex.htm&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-12"><b><a href="#cite_ref-12" title="">^</a></b> <cite style="font-style:normal" class="book" id="CITEREFCurryRobert_Feys_and_Craig.2C_William1958">Curry, Haskell Brooks; Robert Feys and Craig, William (1958). <i>Combinatory Logic. Volume I</i>. Amsterdam: North-Holland Publishing Company.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Combinatory+Logic.+Volume+I&amp;rft.aulast=Curry&amp;rft.aufirst=Haskell+Brooks&amp;rft.au=Curry%2C+Haskell+Brooks&amp;rft.au=Robert+Feys+and+Craig%2C+William&amp;rft.date=1958&amp;rft.place=Amsterdam&amp;rft.pub=North-Holland+Publishing+Company&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-13"><b><a href="#cite_ref-13" title="">^</a></b> <cite style="font-style:normal" class="" id="CITEREFMcCarthy1978"><a href="/wiki/John_McCarthy" title="John McCarthy">McCarthy, John</a> (June 1978). "<a href="http://citeseer.ist.psu.edu/mccarthy78history.html" class="external text" title="http://citeseer.ist.psu.edu/mccarthy78history.html" rel="nofollow">History of Lisp</a>". <i>In <a href="/wiki/Association_for_Computing_Machinery" title="Association for Computing Machinery">ACM</a> SIGPLAN History of Programming Languages Conference</i>: 173–196<span class="printonly">. <a href="http://citeseer.ist.psu.edu/mccarthy78history.html" class="external free" title="http://citeseer.ist.psu.edu/mccarthy78history.html" rel="nofollow">http://citeseer.ist.psu.edu/mccarthy78history.html</a></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=History+of+Lisp&amp;rft.jtitle=In+%5B%5BAssociation+for+Computing+Machinery%7CACM%5D%5D+SIGPLAN+History+of+Programming+Languages+Conference&amp;rft.aulast=McCarthy&amp;rft.aufirst=John&amp;rft.au=McCarthy%2C+John&amp;rft.date=June+1978&amp;rft.pages=173%E2%80%93196&amp;rft_id=http%3A%2F%2Fciteseer.ist.psu.edu%2Fmccarthy78history.html&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;">&#160;</span></span> <i>" The implementation of LISP began in Fall 1958."</i></li>
<li id="cite_note-14"><b><a href="#cite_ref-14" title="">^</a></b> <cite style="font-style:normal" class="web" id="CITEREFDick_Pountain">Dick Pountain. <a href="http://www.byte.com/art/9408/sec11/art1.htm" class="external text" title="http://www.byte.com/art/9408/sec11/art1.htm" rel="nofollow">"Functional Programming Comes of Age"</a>. <i>BYTE.com (August 1994)</i><span class="printonly">. <a href="http://www.byte.com/art/9408/sec11/art1.htm" class="external free" title="http://www.byte.com/art/9408/sec11/art1.htm" rel="nofollow">http://www.byte.com/art/9408/sec11/art1.htm</a></span><span class="reference-accessdate">. Retrieved on August 31 2006</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Functional+Programming+Comes+of+Age&amp;rft.atitle=BYTE.com+%28August+1994%29&amp;rft.aulast=Dick+Pountain&amp;rft.au=Dick+Pountain&amp;rft_id=http%3A%2F%2Fwww.byte.com%2Fart%2F9408%2Fsec11%2Fart1.htm&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-totalfp-15"><b><a href="#cite_ref-totalfp_15-0" title="">^</a></b> <cite style="font-style:normal" class="" id="CITEREFTurner"><a href="/wiki/David_Turner_(computer_scientist)" title="David Turner (computer scientist)">Turner, D.A.</a> (<span class="mw-formatted-date" title="2004-07-28"><a href="/wiki/2004" title="2004">2004</a>-<a href="/wiki/July_28" title="July 28">07-28</a></span>), "<a href="http://www.jucs.org/jucs_10_7/total_functional_programming" class="external text" title="http://www.jucs.org/jucs_10_7/total_functional_programming" rel="nofollow">Total Functional Programming</a>", <i>Journal of Universal Computer Science</i> <b>10</b> (7): 751–768<span class="printonly">, <a href="http://www.jucs.org/jucs_10_7/total_functional_programming" class="external free" title="http://www.jucs.org/jucs_10_7/total_functional_programming" rel="nofollow">http://www.jucs.org/jucs_10_7/total_functional_programming</a></span></cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=Total+Functional+Programming&amp;rft.jtitle=Journal+of+Universal+Computer+Science&amp;rft.aulast=Turner&amp;rft.aufirst=D.A.&amp;rft.au=Turner%2C+D.A.&amp;rft.date=%5B%5B2004-07-28%5D%5D&amp;rft.volume=10&amp;rft.issue=7&amp;rft.pages=751%E2%80%93768&amp;rft_id=http%3A%2F%2Fwww.jucs.org%2Fjucs_10_7%2Ftotal_functional_programming&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-16"><b><a href="#cite_ref-16" title="">^</a></b> <cite style="font-style:normal" class="web" id="CITEREFJohn_Hughes"><a href="/wiki/John_Hughes_(computer_scientist)" title="John Hughes (computer scientist)">John Hughes</a>. <a href="http://www.math.chalmers.se/~rjmh/Papers/whyfp.html" class="external text" title="http://www.math.chalmers.se/~rjmh/Papers/whyfp.html" rel="nofollow">"Why Functional Programming Matters"</a><span class="printonly">. <a href="http://www.math.chalmers.se/~rjmh/Papers/whyfp.html" class="external free" title="http://www.math.chalmers.se/~rjmh/Papers/whyfp.html" rel="nofollow">http://www.math.chalmers.se/~rjmh/Papers/whyfp.html</a></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Why+Functional+Programming+Matters&amp;rft.atitle=&amp;rft.aulast=John+Hughes&amp;rft.au=John+Hughes&amp;rft_id=http%3A%2F%2Fwww.math.chalmers.se%2F%7Erjmh%2FPapers%2Fwhyfp.html&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-17"><b><a href="#cite_ref-17" title="">^</a></b> <cite style="font-style:normal" class="web" id="CITEREFJohn_Launchbury1993">John Launchbury (1993). <a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.35.2016" class="external text" title="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.35.2016" rel="nofollow">"A Natural Semantics for Lazy Evaluation"</a><span class="printonly">. <a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.35.2016" class="external free" title="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.35.2016" rel="nofollow">http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.35.2016</a></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=A+Natural+Semantics+for+Lazy+Evaluation&amp;rft.atitle=&amp;rft.aulast=John+Launchbury&amp;rft.au=John+Launchbury&amp;rft.date=1993&amp;rft_id=http%3A%2F%2Fciteseerx.ist.psu.edu%2Fviewdoc%2Fsummary%3Fdoi%3D10.1.1.35.2016&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-18"><b><a href="#cite_ref-18" title="">^</a></b> <cite style="font-style:normal" class="book" id="CITEREFRobert_W._Harper2009"><a href="/wiki/Robert_Harper_(computer_scientist)" title="Robert Harper (computer scientist)">Robert W. Harper</a> (2009). <i><a href="http://www.cs.cmu.edu/~rwh/plbook/book.pdf" class="external text" title="http://www.cs.cmu.edu/~rwh/plbook/book.pdf" rel="nofollow">Practical Foundations for Programming Languages</a></i><span class="printonly">. <a href="http://www.cs.cmu.edu/~rwh/plbook/book.pdf" class="external free" title="http://www.cs.cmu.edu/~rwh/plbook/book.pdf" rel="nofollow">http://www.cs.cmu.edu/~rwh/plbook/book.pdf</a></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Practical+Foundations+for+Programming+Languages&amp;rft.aulast=Robert+W.+Harper&amp;rft.au=Robert+W.+Harper&amp;rft.date=2009&amp;rft_id=http%3A%2F%2Fwww.cs.cmu.edu%2F%7Erwh%2Fplbook%2Fbook.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;">&#160;</span></span> (in preparation), section XIV.</li>
<li id="cite_note-19"><b><a href="#cite_ref-19" title="">^</a></b> <cite style="font-style:normal" class="web"><a href="http://compcert.inria.fr/doc/index.html" class="external text" title="http://compcert.inria.fr/doc/index.html" rel="nofollow">"The Compcert verified compiler"</a><span class="printonly">. <a href="http://compcert.inria.fr/doc/index.html" class="external free" title="http://compcert.inria.fr/doc/index.html" rel="nofollow">http://compcert.inria.fr/doc/index.html</a></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=The+Compcert+verified+compiler&amp;rft.atitle=&amp;rft_id=http%3A%2F%2Fcompcert.inria.fr%2Fdoc%2Findex.html&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-20"><b><a href="#cite_ref-20" title="">^</a></b> <cite style="font-style:normal" class="web" id="CITEREFSimon_Peyton_Jones.2C_Dimitrios_Vytiniotis.2C_Stephanie_Weirich.2C_and_Geoffrey_Washburn">Simon Peyton Jones, Dimitrios Vytiniotis, Stephanie Weirich, and Geoffrey Washburn. <a href="http://research.microsoft.com/en-us/um/people/simonpj/papers/gadt/" class="external text" title="http://research.microsoft.com/en-us/um/people/simonpj/papers/gadt/" rel="nofollow">"Simple unification-based type inference for GADTs"</a>. <i>ICFP 2006</i>. 50-61<span class="printonly">. <a href="http://research.microsoft.com/en-us/um/people/simonpj/papers/gadt/" class="external free" title="http://research.microsoft.com/en-us/um/people/simonpj/papers/gadt/" rel="nofollow">http://research.microsoft.com/en-us/um/people/simonpj/papers/gadt/</a></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Simple+unification-based+type+inference+for+GADTs&amp;rft.atitle=ICFP+2006&amp;rft.aulast=Simon+Peyton+Jones%2C+Dimitrios+Vytiniotis%2C+Stephanie+Weirich%2C+and+Geoffrey+Washburn&amp;rft.au=Simon+Peyton+Jones%2C+Dimitrios+Vytiniotis%2C+Stephanie+Weirich%2C+and+Geoffrey+Washburn&amp;rft.pages=50-61&amp;rft_id=http%3A%2F%2Fresearch.microsoft.com%2Fen-us%2Fum%2Fpeople%2Fsimonpj%2Fpapers%2Fgadt%2F&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-21"><b><a href="#cite_ref-21" title="">^</a></b> <cite style="font-style:normal" class="web" id="CITEREFAndrew_Kennedy_and_Claudio_Russo2005">Andrew Kennedy and Claudio Russo (October 2005). <a href="http://research.microsoft.com/~akenn/generics/gadtoop.pdf" class="external text" title="http://research.microsoft.com/~akenn/generics/gadtoop.pdf" rel="nofollow">"Generalized Algebraic Data Types and Object-Oriented Programming"</a>. written at San Diego, California. <i>OOPSLA</i><span class="printonly">. <a href="http://research.microsoft.com/~akenn/generics/gadtoop.pdf" class="external free" title="http://research.microsoft.com/~akenn/generics/gadtoop.pdf" rel="nofollow">http://research.microsoft.com/~akenn/generics/gadtoop.pdf</a></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Generalized+Algebraic+Data+Types+and+Object-Oriented+Programming&amp;rft.atitle=OOPSLA&amp;rft.aulast=Andrew+Kennedy+and+Claudio+Russo&amp;rft.au=Andrew+Kennedy+and+Claudio+Russo&amp;rft.date=October+2005&amp;rft_id=http%3A%2F%2Fresearch.microsoft.com%2F%7Eakenn%2Fgenerics%2Fgadtoop.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;">&#160;</span></span> <a href="http://lambda-the-ultimate.org/node/1134" class="external text" title="http://lambda-the-ultimate.org/node/1134" rel="nofollow">source of citation</a></li>
<li id="cite_note-22"><b><a href="#cite_ref-22" title="">^</a></b> <cite style="font-style:normal" class="" id="CITEREFHartelHenk_Muller_and_Hugh_Glaser2004">Hartel, Pieter; Henk Muller and Hugh Glaser (March 2004). "<a href="http://www.ub.utwente.nl/webdocs/ctit/1/00000084.pdf" class="external text" title="http://www.ub.utwente.nl/webdocs/ctit/1/00000084.pdf" rel="nofollow">The Functional C experience</a>" (PDF). <i>The Journal of Functional Programming</i> <b>14</b> (2): 129–135. <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<span class="neverexpand"><a href="http://dx.doi.org/10.1017%2FS0956796803004817" class="external text" title="http://dx.doi.org/10.1017%2FS0956796803004817" rel="nofollow">10.1017/S0956796803004817</a></span><span class="printonly">. <a href="http://www.ub.utwente.nl/webdocs/ctit/1/00000084.pdf" class="external free" title="http://www.ub.utwente.nl/webdocs/ctit/1/00000084.pdf" rel="nofollow">http://www.ub.utwente.nl/webdocs/ctit/1/00000084.pdf</a></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=The+Functional+C+experience&amp;rft.jtitle=The+Journal+of+Functional+Programming&amp;rft.aulast=Hartel&amp;rft.aufirst=Pieter&amp;rft.au=Hartel%2C+Pieter&amp;rft.au=Henk+Muller+and+Hugh+Glaser&amp;rft.date=March+2004&amp;rft.volume=14&amp;rft.issue=2&amp;rft.pages=129%E2%80%93135&amp;rft_id=info:doi/10.1017%2FS0956796803004817&amp;rft_id=http%3A%2F%2Fwww.ub.utwente.nl%2Fwebdocs%2Fctit%2F1%2F00000084.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;">&#160;</span></span>; <cite style="font-style:normal" class="web" id="CITEREFDavid_Mertz">David Mertz. <a href="http://www-128.ibm.com/developerworks/linux/library/l-prog3.html" class="external text" title="http://www-128.ibm.com/developerworks/linux/library/l-prog3.html" rel="nofollow">"Functional programming in Python, Part 3"</a>. <i>IBM developerWorks</i><span class="printonly">. <a href="http://www-128.ibm.com/developerworks/linux/library/l-prog3.html" class="external free" title="http://www-128.ibm.com/developerworks/linux/library/l-prog3.html" rel="nofollow">http://www-128.ibm.com/developerworks/linux/library/l-prog3.html</a></span><span class="reference-accessdate">. Retrieved on 2006-09-17</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Functional+programming+in+Python%2C+Part+3&amp;rft.atitle=IBM+developerWorks&amp;rft.aulast=David+Mertz&amp;rft.au=David+Mertz&amp;rft_id=http%3A%2F%2Fwww-128.ibm.com%2Fdeveloperworks%2Flinux%2Flibrary%2Fl-prog3.html&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;">&#160;</span></span>(<a href="http://www-128.ibm.com/developerworks/library/l-prog.html" class="external text" title="http://www-128.ibm.com/developerworks/library/l-prog.html" rel="nofollow">Part 1</a>, <a href="http://www-128.ibm.com/developerworks/library/l-prog2.html" class="external text" title="http://www-128.ibm.com/developerworks/library/l-prog2.html" rel="nofollow">Part 2</a>)</li>
<li id="cite_note-23"><b><a href="#cite_ref-23" title="">^</a></b> <cite style="font-style:normal" class="web" id="CITEREFMcNamara">McNamara, B.. <a href="http://www-static.cc.gatech.edu/~yannis/fc++/" class="external text" title="http://www-static.cc.gatech.edu/~yannis/fc++/" rel="nofollow">"FC++: Functional Programming in C++"</a><span class="printonly">. <a href="http://www-static.cc.gatech.edu/~yannis/fc++/" class="external free" title="http://www-static.cc.gatech.edu/~yannis/fc++/" rel="nofollow">http://www-static.cc.gatech.edu/~yannis/fc++/</a></span><span class="reference-accessdate">. Retrieved on 2006-05-28</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=FC%2B%2B%3A+Functional+Programming+in+C%2B%2B&amp;rft.atitle=&amp;rft.aulast=McNamara&amp;rft.aufirst=B.&amp;rft.au=McNamara%2C+B.&amp;rft_id=http%3A%2F%2Fwww-static.cc.gatech.edu%2F%7Eyannis%2Ffc%2B%2B%2F&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-24"><b><a href="#cite_ref-24" title="">^</a></b> <cite style="font-style:normal" class="web" id="CITEREFNewbern">Newbern, J.. <a href="http://www.haskell.org/all_about_monads/html/" class="external text" title="http://www.haskell.org/all_about_monads/html/" rel="nofollow">"All About Monads: A comprehensive guide to the theory and practice of monadic programming in Haskell"</a><span class="printonly">. <a href="http://www.haskell.org/all_about_monads/html/" class="external free" title="http://www.haskell.org/all_about_monads/html/" rel="nofollow">http://www.haskell.org/all_about_monads/html/</a></span><span class="reference-accessdate">. Retrieved on 2008-02-14</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=All+About+Monads%3A+A+comprehensive+guide+to+the+theory+and+practice+of+monadic+programming+in+Haskell&amp;rft.atitle=&amp;rft.aulast=Newbern&amp;rft.aufirst=J.&amp;rft.au=Newbern%2C+J.&amp;rft_id=http%3A%2F%2Fwww.haskell.org%2Fall_about_monads%2Fhtml%2F&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;">&#160;</span></span>, "The sheer number of different monad tutorials on the internet is a good indication of the difficulty many people have understanding the concept. This is due to the abstract nature of monads and to the fact that they are used in several different capacities, which can confuse the picture of exactly what a monad is and what it is good for."</li>
<li id="cite_note-25"><b><a href="#cite_ref-25" title="">^</a></b> <a href="/wiki/Lawrence_Paulson" title="Lawrence Paulson">Lawrence C. Paulson</a>, <i>ML for the Working Programmer</i>. Cambridge UP, 1996. ISBN: 052156543X.</li>
</ol>
</div>
<p><a name="Further_reading" id="Further_reading"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Functional_programming&amp;action=edit&amp;section=15" title="Edit section: Further reading">edit</a>]</span> <span class="mw-headline">Further reading</span></h2>
<ul>
<li><a href="/wiki/Hal_Abelson" title="Hal Abelson">Abelson, Hal</a> and <a href="/wiki/Gerald_Jay_Sussman" title="Gerald Jay Sussman">Sussman, Gerald Jay</a>. <i><a href="/wiki/Structure_and_Interpretation_of_Computer_Programs" title="Structure and Interpretation of Computer Programs">Structure and Interpretation of Computer Programs</a></i>. MIT Press, 1985. <a href="http://mitpress.mit.edu/sicp/" class="external text" title="http://mitpress.mit.edu/sicp/" rel="nofollow">on-line</a></li>
<li>Cousineau, Guy and Michel Mauny. <i>The Functional Approach to Programming</i>. Cambridge, UK: <a href="/wiki/Cambridge_University_Press" title="Cambridge University Press">Cambridge University Press</a>, 1998.</li>
<li>Curry, Haskell Brooks and Feys, Robert and Craig, William. <i>Combinatory Logic</i>. Volume I. North-Holland Publishing Company, Amsterdam, 1958.</li>
<li>Curry, Haskell Brooks and Hindley, J. Roger and Seldin, Jonathan P. <i>Combinatory Logic</i>. Volume II. North-Holland Publishing Company, Amsterdam * London, 1972.</li>
<li>Dominus, Mark Jason. <i><a href="/wiki/Higher-Order_Perl" title="Higher-Order Perl">Higher-Order Perl</a></i>. Morgan Kaufman. 2005.</li>
<li>Felleisen, Matthias, Robert Findler, Matthew Flatt, and Shriram Krishnamurthi. <i>How to Design Programs</i> <a href="/wiki/HTDP" title="HTDP" class="mw-redirect">HTDP</a>. MIT Press. 2001. <a href="http://www.htdp.org" class="external text" title="http://www.htdp.org" rel="nofollow">on-line</a></li>
<li>Graham, Paul. <i>ANSI Common LISP</i>. Englewood Cliffs, New Jersey: <a href="/wiki/Prentice_Hall" title="Prentice Hall">Prentice Hall</a>, 1996.</li>
<li>MacLennan, Bruce J. <i>Functional Programming: Practice and Theory</i>. Addison-Wesley, 1990.</li>
<li>O'Sullivan, Brian; Stewart, Don; and Goerzen, John. <i>Real World Haskell</i>. O'Reilly, 2008. <a href="http://book.realworldhaskell.org/read/" class="external text" title="http://book.realworldhaskell.org/read/" rel="nofollow">on-line</a></li>
<li>Pratt, Terrence, W. and Marvin V. Zelkowitz. <i>Programming Languages: Design and Implementation</i>. 3rd ed. Englewood Cliffs, New Jersey: <a href="/wiki/Prentice_Hall" title="Prentice Hall">Prentice Hall</a>, 1996.</li>
<li>Salus, Peter H. <i>Functional and Logic Programming Languages</i>. Vol. 4 of Handbook of Programming Languages. Indianapolis, Indiana: <a href="/w/index.php?title=Macmillan_Technical_Publishing&amp;action=edit&amp;redlink=1" class="new" title="Macmillan Technical Publishing (page does not exist)">Macmillan Technical Publishing</a>, 1998.</li>
<li>Thompson, Simon. <i>Haskell: The Craft of Functional Programming</i>. Harlow, England: <a href="/w/index.php?title=Addison-Wesley_Longman_Limited&amp;action=edit&amp;redlink=1" class="new" title="Addison-Wesley Longman Limited (page does not exist)">Addison-Wesley Longman Limited</a>, 1996.</li>
</ul>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Functional_programming&amp;action=edit&amp;section=16" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<ul>
<li><a href="http://www.defmacro.org/ramblings/fp.html" class="external text" title="http://www.defmacro.org/ramblings/fp.html" rel="nofollow">Functional Programming for the Rest of Us</a> An introduction by Slava Akhmechet</li>
<li><a href="ftp://ftp.aw.com/cseng/authors/finkel/apld/finkel04.pdf" class="external text" title="ftp://ftp.aw.com/cseng/authors/finkel/apld/finkel04.pdf" rel="nofollow">"Functional Programming"</a> — Chapter 4 of <i>Advanced Programming Language Design</i> by <a href="/wiki/Raphael_Finkel" title="Raphael Finkel">Raphael Finkel</a>, an introductory explanation of functional programming</li>
<li><i>Functional programming in Python</i> (by <a href="/wiki/David_Mertz" title="David Mertz">David Mertz</a>): <a href="http://gnosis.cx/publish/programming/charming_python_13.html" class="external text" title="http://gnosis.cx/publish/programming/charming_python_13.html" rel="nofollow">part 1</a>, <a href="http://gnosis.cx/publish/programming/charming_python_16.html" class="external text" title="http://gnosis.cx/publish/programming/charming_python_16.html" rel="nofollow">part 2</a>, <a href="http://gnosis.cx/publish/programming/charming_python_19.html" class="external text" title="http://gnosis.cx/publish/programming/charming_python_19.html" rel="nofollow">part 3</a></li>
<li><a href="http://research.microsoft.com/~simonpj/papers/slpj-book-1987/index.htm" class="external text" title="http://research.microsoft.com/~simonpj/papers/slpj-book-1987/index.htm" rel="nofollow">The Implementation of Functional Programming Languages</a> <a href="/wiki/Simon_Peyton_Jones" title="Simon Peyton Jones">Simon Peyton Jones</a>, published by Prentice Hall, 1987.</li>
</ul>
<table class="navbox" cellspacing="0" style=";">
<tr>
<td style="padding:2px;">
<table cellspacing="0" class="nowraplinks collapsible autocollapse" style="width:100%;background:transparent;color:inherit;;">
<tr>
<th style=";" colspan="2" class="navbox-title">
<div style="float:left; width:6em;text-align:left;">
<div class="noprint plainlinksneverexpand navbar" style="background:none; padding:0; font-weight:normal;;;border:none;; font-size:xx-small;"><a href="/wiki/Template:Programming_language" title="Template:Programming language"><span title="View this template" style=";;border:none;">v</span></a>&#160;•&#160;<a href="/wiki/Template_talk:Programming_language" title="Template talk:Programming language"><span title="Discussion about this template" style=";;border:none;">d</span></a>&#160;•&#160;<a href="http://en.wikipedia.org/w/index.php?title=Template:Programming_language&amp;action=edit" class="external text" title="http://en.wikipedia.org/w/index.php?title=Template:Programming_language&amp;action=edit" rel="nofollow"><span title="Edit this template" style=";;border:none;;">e</span></a></div>
</div>
<span style="font-size:110%;"><a href="/wiki/Programming_paradigm" title="Programming paradigm">Types of programming languages</a></span></th>
</tr>
<tr style="height:2px;">
<td></td>
</tr>
<tr>
<td colspan="2" style="width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<div style="padding:0em 0.25em"><a href="/wiki/Array_programming" title="Array programming">Array</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Aspect-oriented_programming" title="Aspect-oriented programming">Aspect-oriented</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Assembly_language" title="Assembly language">Assembly</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Class-based_programming" title="Class-based programming">Class-based</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Compiled_language" title="Compiled language">Compiled</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Concurrent_computing" title="Concurrent computing">Concurrent</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Curly_bracket_programming_language" title="Curly bracket programming language">Curly bracket</a><span style="font-weight:bold;">&#160;·</span> <a href="/w/index.php?title=Data-oriented_language&amp;action=edit&amp;redlink=1" class="new" title="Data-oriented language (page does not exist)">Data-oriented</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Data-structured_language" title="Data-structured language">Data-structured</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Dataflow_programming" title="Dataflow programming">Dataflow</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Declarative_programming" title="Declarative programming">Declarative</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Domain-specific_programming_language" title="Domain-specific programming language" class="mw-redirect">Domain-specific</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Dynamic_programming_language" title="Dynamic programming language">Dynamic</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Esoteric_programming_language" title="Esoteric programming language">Esoteric</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Event-driven_programming" title="Event-driven programming">Event-driven</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Extensible_programming" title="Extensible programming">Extensible</a><span style="font-weight:bold;">&#160;·</span> <strong class="selflink">Functional</strong><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/High-level_programming_language" title="High-level programming language">High-level</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Imperative_programming" title="Imperative programming">Imperative</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Interpreted_language" title="Interpreted language">Interpreted</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Logic_programming" title="Logic programming">Logic</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Low-level_programming_language" title="Low-level programming language">Low-level</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Machine_code" title="Machine code">Machine</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Macro_(computer_science)" title="Macro (computer science)">Macro</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Metaprogramming" title="Metaprogramming">Metaprogramming</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Multi-paradigm_programming_language" title="Multi-paradigm programming language">Multi-paradigm</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Non-English-based_programming_languages" title="Non-English-based programming languages">Non-English-based</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Object-oriented_programming_language" title="Object-oriented programming language">Object-oriented</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Off-side_rule" title="Off-side rule">Off-side rule</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Pipeline_programming" title="Pipeline programming">Pipeline</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Procedural_programming" title="Procedural programming">Procedural</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Prototype-based_programming" title="Prototype-based programming">Prototype-based</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Reflection_(computer_science)" title="Reflection (computer science)">Reflective</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Rule-based_language" title="Rule-based language" class="mw-redirect">Rule-based</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Scripting_language" title="Scripting language">Scripting</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Synchronous_programming_language" title="Synchronous programming language">Synchronous</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Visual_programming_language" title="Visual programming language">Visual</a></div>
</td>
</tr>
</table>
</td>
</tr>
</table>


<!-- 
NewPP limit report
Preprocessor node count: 12695/1000000
Post-expand include size: 123284/2048000 bytes
Template argument size: 45977/2048000 bytes
Expensive parser function count: 8/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:10933-0!1!0!default!!en!2 and timestamp 20090403151446 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Functional_programming">http://en.wikipedia.org/wiki/Functional_programming</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Programming_paradigms" title="Category:Programming paradigms">Programming paradigms</a></span> | <span dir='ltr'><a href="/wiki/Category:Functional_programming" title="Category:Functional programming">Functional programming</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_example_Python_code" title="Category:Articles with example Python code">Articles with example Python code</a></span></div><div id="mw-hidden-catlinks" class="mw-hidden-cats-hidden">Hidden categories:&#32;<span dir='ltr'><a href="/wiki/Category:All_articles_with_unsourced_statements" title="Category:All articles with unsourced statements">All articles with unsourced statements</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_unsourced_statements_since_January_2009" title="Category:Articles with unsourced statements since January 2009">Articles with unsourced statements since January 2009</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_unsourced_statements_since_September_2008" title="Category:Articles with unsourced statements since September 2008">Articles with unsourced statements since September 2008</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_unsourced_statements_since_October_2008" title="Category:Articles with unsourced statements since October 2008">Articles with unsourced statements since October 2008</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Functional_programming" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Functional_programming" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Functional_programming&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Functional_programming&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Functional_programming" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Functional_programming" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Functional_programming" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Functional_programming&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Functional_programming&amp;oldid=280313644" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Functional_programming&amp;id=280313644">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-ar"><a href="http://ar.wikipedia.org/wiki/%D8%A7%D9%84%D8%A8%D8%B1%D9%85%D8%AC%D8%A9_%D8%A7%D9%84%D9%88%D8%B8%D9%8A%D9%81%D9%8A%D8%A9">العربية</a></li>
				<li class="interwiki-bn"><a href="http://bn.wikipedia.org/wiki/%E0%A6%AB%E0%A6%BE%E0%A6%82%E0%A6%B6%E0%A6%A8%E0%A6%AD%E0%A6%BF%E0%A6%A4%E0%A7%8D%E0%A6%A4%E0%A6%BF%E0%A6%95_%E0%A6%AA%E0%A7%8D%E0%A6%B0%E0%A7%8B%E0%A6%97%E0%A7%8D%E0%A6%B0%E0%A6%BE%E0%A6%AE%E0%A6%BF%E0%A6%82">বাংলা</a></li>
				<li class="interwiki-bs"><a href="http://bs.wikipedia.org/wiki/Funkcionalno_programiranje">Bosanski</a></li>
				<li class="interwiki-ca"><a href="http://ca.wikipedia.org/wiki/Programaci%C3%B3_funcional">Català</a></li>
				<li class="interwiki-cs"><a href="http://cs.wikipedia.org/wiki/Funkcion%C3%A1ln%C3%AD_programov%C3%A1n%C3%AD">Česky</a></li>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/Funktionale_Programmierung">Deutsch</a></li>
				<li class="interwiki-es"><a href="http://es.wikipedia.org/wiki/Programaci%C3%B3n_funcional">Español</a></li>
				<li class="interwiki-fa"><a href="http://fa.wikipedia.org/wiki/%D8%A8%D8%B1%D9%86%D8%A7%D9%85%D9%87%E2%80%8C%D9%86%D9%88%DB%8C%D8%B3%DB%8C_%D8%AA%D8%A7%D8%A8%D8%B9%DB%8C">فارسی</a></li>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Programmation_fonctionnelle">Français</a></li>
				<li class="interwiki-gl"><a href="http://gl.wikipedia.org/wiki/Programaci%C3%B3n_funcional">Galego</a></li>
				<li class="interwiki-ko"><a href="http://ko.wikipedia.org/wiki/%ED%95%A8%EC%88%98%ED%98%95_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D">한국어</a></li>
				<li class="interwiki-hr"><a href="http://hr.wikipedia.org/wiki/Funkcijsko_programiranje">Hrvatski</a></li>
				<li class="interwiki-it"><a href="http://it.wikipedia.org/wiki/Programmazione_funzionale">Italiano</a></li>
				<li class="interwiki-he"><a href="http://he.wikipedia.org/wiki/%D7%AA%D7%9B%D7%A0%D7%95%D7%AA_%D7%A4%D7%95%D7%A0%D7%A7%D7%A6%D7%99%D7%95%D7%A0%D7%9C%D7%99">עברית</a></li>
				<li class="interwiki-ms"><a href="http://ms.wikipedia.org/wiki/Pengaturcaraan_kefungsian">Bahasa Melayu</a></li>
				<li class="interwiki-nl"><a href="http://nl.wikipedia.org/wiki/Functioneel_programmeren">Nederlands</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/%E9%96%A2%E6%95%B0%E5%9E%8B%E8%A8%80%E8%AA%9E">日本語</a></li>
				<li class="interwiki-pl"><a href="http://pl.wikipedia.org/wiki/Programowanie_funkcyjne">Polski</a></li>
				<li class="interwiki-pt"><a href="http://pt.wikipedia.org/wiki/Programa%C3%A7%C3%A3o_funcional">Português</a></li>
				<li class="interwiki-ro"><a href="http://ro.wikipedia.org/wiki/Programare_func%C5%A3ional%C4%83">Română</a></li>
				<li class="interwiki-ru"><a href="http://ru.wikipedia.org/wiki/%D0%A4%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D0%BE%D0%BD%D0%B0%D0%BB%D1%8C%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5">Русский</a></li>
				<li class="interwiki-sk"><a href="http://sk.wikipedia.org/wiki/Funkcion%C3%A1lne_programovanie">Slovenčina</a></li>
				<li class="interwiki-sh"><a href="http://sh.wikipedia.org/wiki/Funkcijsko_programiranje">Srpskohrvatski / Српскохрватски</a></li>
				<li class="interwiki-fi"><a href="http://fi.wikipedia.org/wiki/Funktionaalinen_ohjelmointi">Suomi</a></li>
				<li class="interwiki-sv"><a href="http://sv.wikipedia.org/wiki/Funktionell_programmering">Svenska</a></li>
				<li class="interwiki-uk"><a href="http://uk.wikipedia.org/wiki/%D0%A4%D1%83%D0%BD%D0%BA%D1%86%D1%96%D0%BE%D0%BD%D0%B0%D0%BB%D1%8C%D0%BD%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D1%83%D0%B2%D0%B0%D0%BD%D0%BD%D1%8F">Українська</a></li>
				<li class="interwiki-zh"><a href="http://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B8%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80">中文</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 28 March 2009, at 23:59.</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv199 in 0.043 secs. --></body></html>
