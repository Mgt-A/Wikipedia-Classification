<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Function object,Articles needing additional references from February 2009,2006,C++,C (programming language),Callback (computer science),Category theory,Closure (computer science),Command pattern,Common Lisp,Computer programming" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Function_object&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Function_object&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Function object - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Function_object";
		var wgTitle = "Function object";
		var wgAction = "view";
		var wgArticleId = "509999";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 276372017;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
<style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-c .de1, .source-c .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-c  {}
.source-c .head {}
.source-c .foot {}
.source-c .imp {font-weight: bold; color: red;}
.source-c .ln-xtra {color: #cc0; background-color: #ffc;}
.source-c li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-c li.li2 {font-weight: bold;}
.source-c .kw1 {color: #b1b100;}
.source-c .kw2 {color: #000000; font-weight: bold;}
.source-c .kw3 {color: #000066;}
.source-c .kw4 {color: #993333;}
.source-c .co1 {color: #808080; font-style: italic;}
.source-c .co2 {color: #339933;}
.source-c .coMULTI {color: #808080; font-style: italic;}
.source-c .es0 {color: #000099; font-weight: bold;}
.source-c .br0 {color: #66cc66;}
.source-c .st0 {color: #ff0000;}
.source-c .nu0 {color: #cc66cc;}
.source-c .me1 {color: #202020;}
.source-c .me2 {color: #202020;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-cpp {line-height: normal;}
.source-cpp li, .source-cpp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for cpp
 * CSS class: source-cpp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-cpp .de1, .source-cpp .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-cpp  {}
.source-cpp .head {}
.source-cpp .foot {}
.source-cpp .imp {font-weight: bold; color: red;}
.source-cpp .ln-xtra {color: #cc0; background-color: #ffc;}
.source-cpp li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-cpp li.li2 {font-weight: bold;}
.source-cpp .kw1 {color: #0000ff;}
.source-cpp .kw2 {color: #0000ff;}
.source-cpp .kw3 {color: #0000dd;}
.source-cpp .kw4 {color: #0000ff;}
.source-cpp .co1 {color: #ff0000;}
.source-cpp .co2 {color: #339900;}
.source-cpp .coMULTI {color: #ff0000; font-style: italic;}
.source-cpp .es0 {color: #666666; font-weight: bold;}
.source-cpp .br0 {color: #000000;}
.source-cpp .st0 {color: #666666;}
.source-cpp .nu0 {color: #0000dd;}
.source-cpp .me1 {color: #00eeff;}
.source-cpp .me2 {color: #00eeff;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-d {line-height: normal;}
.source-d li, .source-d pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for d
 * CSS class: source-d, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-d .de1, .source-d .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-d  {}
.source-d .head {}
.source-d .foot {}
.source-d .imp {font-weight: bold; color: red;}
.source-d .ln-xtra {color: #cc0; background-color: #ffc;}
.source-d li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-d li.li2 {font-weight: bold;}
.source-d .kw1 {color: #b1b100;}
.source-d .kw2 {color: #000000; font-weight: bold;}
.source-d .kw3 {color: #aaaadd; font-weight: bold;}
.source-d .kw4 {color: #993333;}
.source-d .co1 {color: #808080; font-style: italic;}
.source-d .co2 {color: #a1a100;}
.source-d .coMULTI {color: #808080; font-style: italic;}
.source-d .es0 {color: #000099; font-weight: bold;}
.source-d .br0 {color: #66cc66;}
.source-d .st0 {color: #ff0000;}
.source-d .nu0 {color: #cc66cc;}
.source-d .me1 {color: #006600;}
.source-d .me2 {color: #006600;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-java {line-height: normal;}
.source-java li, .source-java pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for java
 * CSS class: source-java, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-java .de1, .source-java .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-java  {}
.source-java .head {}
.source-java .foot {}
.source-java .imp {font-weight: bold; color: red;}
.source-java .ln-xtra {color: #cc0; background-color: #ffc;}
.source-java li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-java li.li2 {font-weight: bold;}
.source-java .kw1 {color: #b1b100;}
.source-java .kw2 {color: #000000; font-weight: bold;}
.source-java .kw3 {color: #aaaadd; font-weight: bold;}
.source-java .kw4 {color: #993333;}
.source-java .co1 {color: #808080; font-style: italic;}
.source-java .co2 {color: #a1a100;}
.source-java .coMULTI {color: #808080; font-style: italic;}
.source-java .es0 {color: #000099; font-weight: bold;}
.source-java .br0 {color: #66cc66;}
.source-java .st0 {color: #ff0000;}
.source-java .nu0 {color: #cc66cc;}
.source-java .me1 {color: #006600;}
.source-java .me2 {color: #006600;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-python {line-height: normal;}
.source-python li, .source-python pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for python
 * CSS class: source-python, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-python .de1, .source-python .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-python  {}
.source-python .head {}
.source-python .foot {}
.source-python .imp {font-weight: bold; color: red;}
.source-python .ln-xtra {color: #cc0; background-color: #ffc;}
.source-python li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-python li.li2 {font-weight: bold;}
.source-python .kw1 {color: #ff7700;font-weight:bold;}
.source-python .kw2 {color: #008000;}
.source-python .kw3 {color: #dc143c;}
.source-python .kw4 {color: #0000cd;}
.source-python .co1 {color: #808080; font-style: italic;}
.source-python .coMULTI {color: #808080; font-style: italic;}
.source-python .es0 {color: #000099; font-weight: bold;}
.source-python .br0 {color: #66cc66;}
.source-python .st0 {color: #483d8b;}
.source-python .nu0 {color: #ff4500;}
.source-python .me1 {color: black;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-lisp {line-height: normal;}
.source-lisp li, .source-lisp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for lisp
 * CSS class: source-lisp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-lisp .de1, .source-lisp .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-lisp  {}
.source-lisp .head {}
.source-lisp .foot {}
.source-lisp .imp {font-weight: bold; color: red;}
.source-lisp .ln-xtra {color: #cc0; background-color: #ffc;}
.source-lisp li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-lisp li.li2 {font-weight: bold;}
.source-lisp .kw1 {color: #b1b100;}
.source-lisp .co1 {color: #808080; font-style: italic;}
.source-lisp .coMULTI {color: #808080; font-style: italic;}
.source-lisp .es0 {color: #000099; font-weight: bold;}
.source-lisp .br0 {color: #66cc66;}
.source-lisp .st0 {color: #ff0000;}
.source-lisp .nu0 {color: #cc66cc;}
.source-lisp .me0 {color: #555;}
.source-lisp .me1 {color: #555;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-ruby {line-height: normal;}
.source-ruby li, .source-ruby pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for ruby
 * CSS class: source-ruby, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-ruby .de1, .source-ruby .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-ruby  {}
.source-ruby .head {}
.source-ruby .foot {}
.source-ruby .imp {font-weight: bold; color: red;}
.source-ruby .ln-xtra {color: #cc0; background-color: #ffc;}
.source-ruby li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-ruby li.li2 {font-weight: bold;}
.source-ruby .kw1 {color:#9966CC; font-weight:bold;}
.source-ruby .kw2 {color:#0000FF; font-weight:bold;}
.source-ruby .kw3 {color:#CC0066; font-weight:bold;}
.source-ruby .kw4 {color:#CC00FF; font-weight:bold;}
.source-ruby .co1 {color:#008000; font-style:italic;}
.source-ruby .coMULTI {color:#000080; font-style:italic;}
.source-ruby .es0 {color:#000099;}
.source-ruby .br0 {color:#006600; font-weight:bold;}
.source-ruby .st0 {color:#996600;}
.source-ruby .nu0 {color:#006666;}
.source-ruby .me1 {color:#9900CC;}
.source-ruby .sc0 {}
.source-ruby .sc1 {}
.source-ruby .sc2 {}
.source-ruby .re0 {color:#ff6633; font-weight:bold;}
.source-ruby .re1 {color:#0066ff; font-weight:bold;}
.source-ruby .re2 {color:#6666ff; font-weight:bold;}
.source-ruby .re3 {color:#ff3333; font-weight:bold;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-eiffel {line-height: normal;}
.source-eiffel li, .source-eiffel pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for eiffel
 * CSS class: source-eiffel, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-eiffel .de1, .source-eiffel .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-eiffel  {}
.source-eiffel .head {}
.source-eiffel .foot {}
.source-eiffel .imp {font-weight: bold; color: red;}
.source-eiffel .ln-xtra {color: #cc0; background-color: #ffc;}
.source-eiffel li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-eiffel li.li2 {font-weight: bold;}
.source-eiffel .kw1 {color: #0600FF; font-weight: bold;}
.source-eiffel .kw2 {color: #0600FF; font-weight: bold;}
.source-eiffel .kw3 {color: #800080;}
.source-eiffel .kw4 {color: #800000}
.source-eiffel .kw5 {color: #603000;}
.source-eiffel .co1 {color: #008000; font-style: italic;}
.source-eiffel .coMULTI {}
.source-eiffel .es0 {color: #005070; font-weight: bold;}
.source-eiffel .br0 {color: #600000;}
.source-eiffel .st0 {color: #0080A0;}
.source-eiffel .nu0 {color: #FF0000;}
.source-eiffel .me1 {color: #000060;}
.source-eiffel .me2 {color: #000050;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style>		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Function_object skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Function object</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<div class="dablink">For functors in the mathematical field of category theory, see <a href="/wiki/Category_theory" title="Category theory">Category theory</a>.</div>
<p>A <b>function object</b>, also called a <b>functor</b>, <b>functional</b> or <b>functionoid</b>,<sup id="cite_ref-0" class="reference"><a href="#cite_note-0" title=""><span>[</span>1<span>]</span></a></sup> is a <a href="/wiki/Computer_programming" title="Computer programming">computer programming</a> construct allowing an <a href="/wiki/Object_(computer_science)" title="Object (computer science)">object</a> to be invoked or called as if it were an ordinary <a href="/wiki/Function_(programming)" title="Function (programming)" class="mw-redirect">function</a>, usually with the same syntax.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Description"><span class="tocnumber">1</span> <span class="toctext">Description</span></a></li>
<li class="toclevel-1"><a href="#Origins"><span class="tocnumber">2</span> <span class="toctext">Origins</span></a></li>
<li class="toclevel-1"><a href="#Functors_in_C_and_C.2B.2B"><span class="tocnumber">3</span> <span class="toctext">Functors in C and C++</span></a>
<ul>
<li class="toclevel-2"><a href="#Performance"><span class="tocnumber">3.1</span> <span class="toctext">Performance</span></a></li>
<li class="toclevel-2"><a href="#Maintaining_State"><span class="tocnumber">3.2</span> <span class="toctext">Maintaining State</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Functors_in_D"><span class="tocnumber">4</span> <span class="toctext">Functors in D</span></a></li>
<li class="toclevel-1"><a href="#Functors_in_Java"><span class="tocnumber">5</span> <span class="toctext">Functors in Java</span></a></li>
<li class="toclevel-1"><a href="#Functors_in_Python"><span class="tocnumber">6</span> <span class="toctext">Functors in Python</span></a></li>
<li class="toclevel-1"><a href="#Functors_in_Lisp"><span class="tocnumber">7</span> <span class="toctext">Functors in Lisp</span></a></li>
<li class="toclevel-1"><a href="#Functors_in_Ruby"><span class="tocnumber">8</span> <span class="toctext">Functors in Ruby</span></a></li>
<li class="toclevel-1"><a href="#Functors_in_Eiffel"><span class="tocnumber">9</span> <span class="toctext">Functors in Eiffel</span></a></li>
<li class="toclevel-1"><a href="#Other_meanings_of_functor"><span class="tocnumber">10</span> <span class="toctext">Other meanings of functor</span></a></li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">11</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">12</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1"><a href="#Further_reading"><span class="tocnumber">13</span> <span class="toctext">Further reading</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">14</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Description" id="Description"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Function_object&amp;action=edit&amp;section=1" title="Edit section: Description">edit</a>]</span> <span class="mw-headline">Description</span></h2>
<p>A typical use of a functor is in writing <a href="/wiki/Callback_(computer_science)" title="Callback (computer science)">callback functions</a>. A callback in <a href="/wiki/Procedural_programming" title="Procedural programming">procedural languages</a>, such as <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a>, may be accomplished by using <a href="/wiki/Function_pointer" title="Function pointer">function pointers</a>. However it can be difficult or awkward to pass state into or out of the callback function. This restriction also inhibits more dynamic behavior of the function. A functor solves those problems since the function is really a <a href="/wiki/Facade_pattern" title="Facade pattern">façade</a> for a full object, thus it carries its own state.</p>
<p>Most modern object-oriented languages such as <a href="/wiki/C%2B%2B" title="C++">C++</a>, <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a>, <a href="/wiki/Python_(programming_language)" title="Python (programming language)">Python</a>, <a href="/wiki/Ruby_(programming_language)" title="Ruby (programming language)">Ruby</a> and <a href="/wiki/Lisp_(programming_language)" title="Lisp (programming language)">Lisp</a> support the definition of functors and may even make significant use of them.</p>
<p><a name="Origins" id="Origins"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Function_object&amp;action=edit&amp;section=2" title="Edit section: Origins">edit</a>]</span> <span class="mw-headline">Origins</span></h2>
<p><a href="/wiki/Smalltalk" title="Smalltalk">Smalltalk</a> was one of the first languages to support functors through the use of block constructs that are an integral part of the language syntax. For example, one can supply functors as arguments to collection objects to provide filtering and sorting. It is a perfect realization of the <a href="/wiki/Strategy_pattern" title="Strategy pattern">strategy pattern</a> that promotes the use of pluggable behaviour.</p>
<p><a name="Functors_in_C_and_C.2B.2B" id="Functors_in_C_and_C.2B.2B"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Function_object&amp;action=edit&amp;section=3" title="Edit section: Functors in C and C++">edit</a>]</span> <span class="mw-headline">Functors in C and C++</span></h2>
<p>Consider the example of a sorting routine which uses a callback function to define an ordering relation between a pair of items. A C program using function pointers may appear as:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="coMULTI">/* Callback function */</span>
<span class="kw4">int</span> compare_function<span class="br0">(</span><span class="kw4">int</span> A, <span class="kw4">int</span> B<span class="br0">)</span> <span class="br0">{</span>
  <span class="kw1">return</span> <span class="br0">(</span>A &lt; B<span class="br0">)</span>;
<span class="br0">}</span>
...
<span class="coMULTI">/* Declaration of C sorting function */</span>
<span class="kw4">void</span> sort_ints<span class="br0">(</span><span class="kw4">int</span>* begin_items, <span class="kw4">int</span> num_items, <span class="kw4">int</span> <span class="br0">(</span>*cmpfunc<span class="br0">)</span><span class="br0">(</span><span class="kw4">int</span>, <span class="kw4">int</span><span class="br0">)</span> <span class="br0">)</span>;
...
<span class="kw4">int</span> main<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
    <span class="kw4">int</span> items<span class="br0">[</span><span class="br0">]</span> = <span class="br0">{</span><span class="nu0">4</span>, <span class="nu0">3</span>, <span class="nu0">1</span>, <span class="nu0">2</span><span class="br0">}</span>;
    sort_ints<span class="br0">(</span>items, <span class="kw4">sizeof</span><span class="br0">(</span>items<span class="br0">)</span>/<span class="kw4">sizeof</span><span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span>, compare_function<span class="br0">)</span>;
<span class="br0">}</span>
</pre></div>
<p>In C++ a functor may be used instead of an ordinary function by defining a class which <a href="/wiki/Operator_overloading" title="Operator overloading">overloads</a> the <a href="/wiki/Operators_in_C_and_C_Plus_Plus#Other_Operators" title="Operators in C and C Plus Plus" class="mw-redirect">function call operator</a> by defining an <code>operator()</code> member function. In C++ this is called a <b>class type functor</b>, and may appear as follows:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
<span class="kw2">class</span> compare_class <span class="br0">{</span>
  <span class="kw2">public</span>:
  <span class="kw4">bool</span> operator<span class="br0">(</span><span class="br0">)</span><span class="br0">(</span><span class="kw4">int</span> A, <span class="kw4">int</span> B<span class="br0">)</span> <span class="br0">{</span>
    <span class="kw1">return</span> <span class="br0">(</span>A &lt; B<span class="br0">)</span>;
  <span class="br0">}</span>
<span class="br0">}</span>;
...
<span class="co1">// Declaration of C++ sorting function.</span>
<span class="kw2">template</span> &lt;class ComparisonFunctor&gt; 
<span class="kw4">void</span> sort_ints<span class="br0">(</span><span class="kw4">int</span>* begin_items, <span class="kw4">int</span> num_items, ComparisonFunctor c<span class="br0">)</span>;
...
<span class="kw4">int</span> main<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
    <span class="kw4">int</span> items<span class="br0">[</span><span class="br0">]</span> = <span class="br0">{</span><span class="nu0">4</span>, <span class="nu0">3</span>, <span class="nu0">1</span>, <span class="nu0">2</span><span class="br0">}</span>;
    compare_class functor;
    sort_ints<span class="br0">(</span>items, <span class="kw3">sizeof</span><span class="br0">(</span>items<span class="br0">)</span>/<span class="kw3">sizeof</span><span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span>, functor<span class="br0">)</span>;
<span class="br0">}</span>
</pre></div>
<p>Notice that the syntax for providing the callback to the <code>sort_ints()</code> function is identical, but an object is passed instead of a function pointer. When invoked, the callback function is executed just as any other member function, and therefore has full access to the other members (data or functions) of the object.</p>
<p>It is possible to use function objects in situations other than as callback functions (although the shortened term <i>functor</i> is normally not used). Continuing the example,</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
  functor_class Y;
  <span class="kw4">int</span> result = Y<span class="br0">(</span> a, b <span class="br0">)</span>;
</pre></div>
<p>In addition to class type functors, other kinds of function objects are also possible in C++. They can take advantage of C++'s member-pointer or <a href="/wiki/Generic_programming" title="Generic programming">template</a> facilities. The expressiveness of templates allows some <a href="/wiki/Functional_programming" title="Functional programming">functional programming</a> techniques to be used, such as defining functors in terms of other functors (like <a href="/wiki/Function_composition" title="Function composition">function composition</a>). Much of the C++ <a href="/wiki/Standard_Template_Library" title="Standard Template Library">Standard Template Library</a> (STL) makes heavy use of template-based function objects.</p>
<p><a name="Performance" id="Performance"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Function_object&amp;action=edit&amp;section=4" title="Edit section: Performance">edit</a>]</span> <span class="mw-headline">Performance</span></h3>
<p>An advantage of function objects in C++ is performance because unlike a function pointer, a function object can be <a href="/wiki/Inline_function" title="Inline function">inlined</a>. For example, consider a simple function which increments its argument implemented as a function object:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
<span class="kw4">struct</span> IncrementFunctor <span class="br0">{</span>
  <span class="kw4">void</span> operator<span class="br0">(</span><span class="br0">)</span><span class="br0">(</span><span class="kw4">int</span> &amp;i<span class="br0">)</span> <span class="br0">{</span> ++i; <span class="br0">}</span>
<span class="br0">}</span>;
</pre></div>
<p>and as a free function:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
<span class="kw4">void</span> increment_function<span class="br0">(</span><span class="kw4">int</span> &amp;i<span class="br0">)</span> <span class="br0">{</span> ++i; <span class="br0">}</span>
</pre></div>
<p>Recall the standard library function <code>std::for_each()</code>:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
template&lt;typename InputIterator, <span class="kw2">typename</span> Function&gt;
Function for_each<span class="br0">(</span>InputIterator first, InputIterator last, Function f<span class="br0">)</span> <span class="br0">{</span>
  <span class="kw1">for</span> <span class="br0">(</span> ; first != last; ++first<span class="br0">)</span>
    f<span class="br0">(</span>*first<span class="br0">)</span>;
  <span class="kw1">return</span> f;
<span class="br0">}</span>
</pre></div>
<p>Suppose we apply <code>std::for_each()</code> like so:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
<span class="kw4">int</span> A<span class="br0">[</span><span class="br0">]</span> = <span class="br0">{</span><span class="nu0">1</span>, <span class="nu0">4</span>, <span class="nu0">2</span>, <span class="nu0">8</span>, <span class="nu0">5</span>, <span class="nu0">7</span><span class="br0">}</span>;
<span class="kw4">const</span> <span class="kw4">int</span> N = <span class="kw3">sizeof</span><span class="br0">(</span>A<span class="br0">)</span> / <span class="kw3">sizeof</span><span class="br0">(</span>A<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span><span class="br0">)</span>;
for_each<span class="br0">(</span>A, A + N, IncrementFunctor<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>;
for_each<span class="br0">(</span>A, A + N, increment_function<span class="br0">)</span>;
</pre></div>
<p>Both calls to <code>for_each()</code> will work as expected. The first call will be to this version:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
IncrementFunctor for_each&lt;int*,IncrementFunctor&gt;<span class="br0">(</span><span class="kw4">int</span>*, <span class="kw4">int</span>*, IncrementFunctor<span class="br0">)</span>
</pre></div>
<p>the second will be to this version:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
<span class="kw4">void</span><span class="br0">(</span>*<span class="br0">)</span><span class="br0">(</span>int&amp;<span class="br0">)</span> for_each&lt;int*,<span class="kw4">void</span><span class="br0">(</span>*<span class="br0">)</span><span class="br0">(</span>int&amp;<span class="br0">)</span>&gt;<span class="br0">(</span><span class="kw4">int</span>*, <span class="kw4">int</span>*, <span class="kw4">void</span><span class="br0">(</span>*<span class="br0">)</span><span class="br0">(</span>int&amp;<span class="br0">)</span><span class="br0">)</span>
</pre></div>
<p>Within <code>for_each&lt;int*,IncrementFunctor&gt;()</code>, the compiler will be able to inline the function object because the function is known at compile time whereas within <code>for_each&lt;int*,void(*)(int&amp;)&gt;()</code> the function cannot be known at compile time and so cannot be inlined.</p>
<p>Actually, a function can easily be known at compile time and the compiler will happily inline it, if it is instructed to. The only requirement is that the compiler has seen the function definition, and that applies equally to functions inside a class or outside. In case we are not inlining however, the linker is instructed to "silently" drop multiple definitions of the same function from different compilation units, without producing an error, but only if said function is a class function. The linker will not dismiss multiple definitions of the same function if it is not a class function.</p>
<p><a name="Maintaining_State" id="Maintaining_State"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Function_object&amp;action=edit&amp;section=5" title="Edit section: Maintaining State">edit</a>]</span> <span class="mw-headline">Maintaining State</span></h3>
<p>Another advantage of functors is that they can maintain state that affects operator() between calls. Inconveniently copies of a functor must share a state to work correctly. STL algorithms are allowed to make copies. For example, the following code defines a <a href="/wiki/Generator_(computer_science)" title="Generator (computer science)">generator</a> that counts from 10 up and is invoked 11 times.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
<span class="co2">#include &lt;iostream&gt;</span>
<span class="co2">#include &lt;iterator&gt;</span>
<span class="co2">#include &lt;algorithm&gt;</span>
 
<span class="kw2">class</span> countfrom <span class="br0">{</span>
<span class="kw2">private</span>:
  <span class="kw4">int</span> &amp;count;
<span class="kw2">public</span>:
  countfrom<span class="br0">(</span><span class="kw4">int</span> &amp;n<span class="br0">)</span> : count<span class="br0">(</span>n<span class="br0">)</span> <span class="br0">{</span><span class="br0">}</span>
  <span class="kw4">int</span> operator<span class="br0">(</span><span class="br0">)</span><span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> <span class="kw1">return</span> count++; <span class="br0">}</span>
<span class="br0">}</span>;
 
<span class="kw4">int</span> main<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
  <span class="kw4">int</span> state<span class="br0">(</span><span class="nu0">10</span><span class="br0">)</span>;
  std::<span class="me2">generate_n</span><span class="br0">(</span>std::<span class="me2">ostream_iterator</span>&lt;int&gt;<span class="br0">(</span>std::<span class="kw3">cout</span>, <span class="st0">"<span class="es0">\n</span>"</span><span class="br0">)</span>, <span class="nu0">11</span>, countfrom<span class="br0">(</span>state<span class="br0">)</span><span class="br0">)</span>;
  <span class="kw1">return</span> <span class="nu0">0</span>;
<span class="br0">}</span>
</pre></div>
<p><a name="Functors_in_D" id="Functors_in_D"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Function_object&amp;action=edit&amp;section=6" title="Edit section: Functors in D">edit</a>]</span> <span class="mw-headline">Functors in D</span></h2>
<p><a href="/wiki/D_(programming_language)" title="D (programming language)">D</a> provides several ways of declaring functors. Lisp/Python-style using <a href="/wiki/Closure_(computer_science)" title="Closure (computer science)">closures</a> or C#-style using <a href="/wiki/Delegate_(.NET)" title="Delegate (.NET)">delegates</a>, respectively:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-d">
<span class="kw4">bool</span> find<span class="br0">(</span>T<span class="br0">)</span><span class="br0">(</span>T<span class="br0">[</span><span class="br0">]</span> haystack, <span class="kw4">bool</span> <span class="kw2">delegate</span><span class="br0">(</span>T<span class="br0">)</span> needle_test<span class="br0">)</span> <span class="br0">{</span>
  <span class="kw1">foreach</span> <span class="br0">(</span> straw; haystack <span class="br0">)</span> <span class="br0">{</span>
    <span class="kw1">if</span> <span class="br0">(</span> needle_test<span class="br0">(</span>straw<span class="br0">)</span> <span class="br0">)</span>
      <span class="kw1">return</span> <span class="kw2">true</span>;
  <span class="br0">}</span>
  <span class="kw1">return</span> <span class="kw2">false</span>;
<span class="br0">}</span>
 
<span class="kw4">void</span> main<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
    <span class="kw4">int</span><span class="br0">[</span><span class="br0">]</span> haystack = <span class="br0">[</span><span class="nu0">345</span>,<span class="nu0">15</span>,<span class="nu0">457</span>,<span class="nu0">9</span>,<span class="nu0">56</span>,<span class="nu0">123</span>,<span class="nu0">456</span><span class="br0">]</span>;
    <span class="kw4">int</span>   needle = <span class="nu0">123</span>;
    <span class="kw4">bool</span> needleTest<span class="br0">(</span><span class="kw4">int</span> n<span class="br0">)</span> <span class="br0">{</span>
      <span class="kw1">return</span> n == needle;
    <span class="br0">}</span>
    <span class="kw2">assert</span><span class="br0">(</span>
      find<span class="br0">(</span>haystack, &amp;needleTest<span class="br0">)</span>
    <span class="br0">)</span>;
<span class="br0">}</span>
</pre></div>
<p>The difference between a <a href="/wiki/Delegate_(.NET)" title="Delegate (.NET)">delegate</a> and a <a href="/wiki/Closure_(computer_science)" title="Closure (computer science)">closure</a> in D is automatically and conservatively determined by the compiler. D also supports function literals, that allow a lambda-style definition:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-d">
<span class="kw4">void</span> main<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
    <span class="kw4">int</span><span class="br0">[</span><span class="br0">]</span> haystack = <span class="br0">[</span><span class="nu0">345</span>,<span class="nu0">15</span>,<span class="nu0">457</span>,<span class="nu0">9</span>,<span class="nu0">56</span>,<span class="nu0">123</span>,<span class="nu0">456</span><span class="br0">]</span>;
    <span class="kw4">int</span>   needle = <span class="nu0">123</span>;
    <span class="kw2">assert</span><span class="br0">(</span>
       find<span class="br0">(</span>haystack, <span class="br0">(</span><span class="kw4">int</span> n<span class="br0">)</span> <span class="br0">{</span> <span class="kw1">return</span> n == needle; <span class="br0">}</span><span class="br0">)</span>
    <span class="br0">)</span>;
<span class="br0">}</span>
</pre></div>
<p>In order to allow the compiler to inline the code (see above), functors can also be specified C++-style using <a href="/wiki/Operator_overloading" title="Operator overloading">operator overloading</a>:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-d">
<span class="kw4">bool</span> find<span class="br0">(</span>T,F<span class="br0">)</span><span class="br0">(</span>T<span class="br0">[</span><span class="br0">]</span> haystack, F needle_test<span class="br0">)</span> <span class="br0">{</span>
  <span class="kw1">foreach</span> <span class="br0">(</span> straw; haystack <span class="br0">)</span> <span class="br0">{</span>
    <span class="kw1">if</span> <span class="br0">(</span> needle_test<span class="br0">(</span>straw<span class="br0">)</span> <span class="br0">)</span>
      <span class="kw1">return</span> <span class="kw2">true</span>;
  <span class="br0">}</span>
  <span class="kw1">return</span> <span class="kw2">false</span>;
<span class="br0">}</span>
 
<span class="kw4">void</span> main<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
    <span class="kw4">int</span><span class="br0">[</span><span class="br0">]</span> haystack = <span class="br0">[</span><span class="nu0">345</span>,<span class="nu0">15</span>,<span class="nu0">457</span>,<span class="nu0">9</span>,<span class="nu0">56</span>,<span class="nu0">123</span>,<span class="nu0">456</span><span class="br0">]</span>;
    <span class="kw4">int</span>   needle = <span class="nu0">123</span>;
    <span class="kw4">class</span> NeedleTest <span class="br0">{</span>
      <span class="kw4">int</span> needle;
      <span class="kw2">this</span><span class="br0">(</span><span class="kw4">int</span> n<span class="br0">)</span> <span class="br0">{</span> needle = n; <span class="br0">}</span>
      <span class="kw4">bool</span> opCall<span class="br0">(</span><span class="kw4">int</span> n<span class="br0">)</span> <span class="br0">{</span>
        <span class="kw1">return</span> n == needle;
      <span class="br0">}</span>
    <span class="br0">}</span>
    <span class="kw2">assert</span><span class="br0">(</span>
      find<span class="br0">(</span>haystack, <span class="kw2">new</span> NeedleTest<span class="br0">(</span>needle<span class="br0">)</span><span class="br0">)</span>
    <span class="br0">)</span>;
<span class="br0">}</span>
</pre></div>
<p><a name="Functors_in_Java" id="Functors_in_Java"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Function_object&amp;action=edit&amp;section=7" title="Edit section: Functors in Java">edit</a>]</span> <span class="mw-headline">Functors in Java</span></h2>
<p>Since <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a> does not have <a href="/wiki/First-class_function" title="First-class function">first-class functions</a>, functors are usually expressed by an interface with a single method, typically with the implementation being an anonymous <a href="/wiki/Inner_class" title="Inner class">inner class</a>.</p>
<p>For an example from Java's standard library, java.util.Collections.sort() takes a List and a functor whose role is to compare objects in the List. But because Java does not have first-class functions, the function is part of the Comparator interface. This could be used as follows.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-java">
List&lt;String&gt; list = <span class="kw3">Arrays</span>.<span class="me1">asList</span><span class="br0">(</span><span class="st0">"10"</span>, <span class="st0">"1"</span>, <span class="st0">"20"</span>, <span class="st0">"11"</span>, <span class="st0">"21"</span>, <span class="st0">"12"</span><span class="br0">)</span>;
 
<span class="kw3">Collections</span>.<span class="me1">sort</span><span class="br0">(</span>list, <span class="kw2">new</span> Comparator&lt;String&gt;<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
    <span class="kw2">public</span> <span class="kw4">int</span> compare<span class="br0">(</span><span class="kw3">String</span> o1, <span class="kw3">String</span> o2<span class="br0">)</span> <span class="br0">{</span>
        <span class="kw2">return</span> <span class="kw3">Integer</span>.<span class="me1">valueOf</span><span class="br0">(</span>o1<span class="br0">)</span>.<span class="me1">compareTo</span><span class="br0">(</span><span class="kw3">Integer</span>.<span class="me1">valueOf</span><span class="br0">(</span>o2<span class="br0">)</span><span class="br0">)</span>;
    <span class="br0">}</span>
<span class="br0">}</span><span class="br0">)</span>;
</pre></div>
<p><a name="Functors_in_Python" id="Functors_in_Python"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Function_object&amp;action=edit&amp;section=8" title="Edit section: Functors in Python">edit</a>]</span> <span class="mw-headline">Functors in Python</span></h2>
<p>In <a href="/wiki/Python_(programming_language)" title="Python (programming language)">Python</a>, functions are objects, just like strings, numbers, lists, and so on. This feature eliminates the need to create a functor object in many cases. However, any object with a <code>__call__()</code> method may be called using function-call syntax.</p>
<p>An example is this Accumulator class (based on <a href="/wiki/Paul_Graham" title="Paul Graham">Paul Graham</a>'s study on programming language syntax and clarity <a href="http://www.paulgraham.com/accgen.html" class="external text" title="http://www.paulgraham.com/accgen.html" rel="nofollow">here</a>):</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-python">
<span class="kw1">class</span> Accumulator<span class="br0">(</span><span class="kw2">object</span><span class="br0">)</span>:
    <span class="kw1">def</span> <span class="kw4">__init__</span><span class="br0">(</span><span class="kw2">self</span>, n<span class="br0">)</span>:
        <span class="kw2">self</span>.<span class="me1">n</span> = n
    <span class="kw1">def</span> <span class="kw4">__call__</span><span class="br0">(</span><span class="kw2">self</span>, x<span class="br0">)</span>:
        <span class="kw2">self</span>.<span class="me1">n</span> += x
        <span class="kw1">return</span> <span class="kw2">self</span>.<span class="me1">n</span>
</pre></div>
<p>An example of this in use (using the interactive interpreter):</p>
<pre>
<code>&gt;&gt;&gt; a = Accumulator(4)
&gt;&gt;&gt; a(5)
9
&gt;&gt;&gt; a(2)
11
&gt;&gt;&gt; b = Accumulator(42)
&gt;&gt;&gt; b(7)
49
</code>
</pre>
<p>Another way to construct a functor in Python is to use a closure:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-python">
<span class="kw1">def</span> Accumulator<span class="br0">(</span>n<span class="br0">)</span>:
    <span class="kw1">def</span> inc<span class="br0">(</span>x<span class="br0">)</span>:
        inc.<span class="me1">n</span> += x
        <span class="kw1">return</span> inc.<span class="me1">n</span>
    inc.<span class="me1">n</span> = n
    <span class="kw1">return</span> inc
</pre></div>
<p><a name="Functors_in_Lisp" id="Functors_in_Lisp"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Function_object&amp;action=edit&amp;section=9" title="Edit section: Functors in Lisp">edit</a>]</span> <span class="mw-headline">Functors in Lisp</span></h2>
<p>In <a href="/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a>, <a href="/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme</a> and other languages in that family, functions are objects, just like strings, vectors, lists, numbers and so forth. A closure-constructing operator creates a function-object from a piece of the program itself: the piece of code given as an argument to the operator is part of the function, and so is the lexical environment: the bindings of the lexically visible variables are "captured" and stored in the functor, which is more commonly called a <a href="/wiki/Closure_(computer_science)" title="Closure (computer science)">closure</a>. The captured bindings play the role of "member variables", and the code part of the closure plays the role of the "anonymous member function", just like operator () in C++.</p>
<p>The closure constructor has the syntax <code>(lambda (parameters ...) code ...)</code>. The <code>(parameters ...)</code> part allows an interface to be declared, so that the function takes the declared parameters. The <code>code ...</code> part consists of expressions that are evaluated when the functor is called.</p>
<p>Many uses of functors in languages like C++ are simply emulations of the missing closure constructor. Since the programmer cannot directly construct a closure, he or she must define a class which has all of the necessary state variables, and also a member function. Then, construct an instance of that class instead, ensuring that all the member variables are initialized through its constructor. The values are derived precisely from those local variables that ought to be captured directly by a closure.</p>
<p>A function-object using the class system, no use of closures:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-lisp">
<span class="br0">(</span>defclass counter <span class="br0">(</span><span class="br0">)</span>
  <span class="br0">(</span><span class="br0">(</span><span class="kw1">value</span> :<span class="me1">initarg</span> :<span class="kw1">value</span> :<span class="me1">accessor</span> value-of<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>
 
<span class="br0">(</span>defmethod functor-call <span class="br0">(</span><span class="br0">(</span>c counter<span class="br0">)</span><span class="br0">)</span>
  <span class="br0">(</span>incf <span class="br0">(</span>value-of c<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>
 
<span class="br0">(</span><span class="kw1">defun</span> make-counter <span class="br0">(</span>initial-<span class="kw1">value</span><span class="br0">)</span>
  <span class="br0">(</span>make-instance 'counter :<span class="kw1">value</span> initial-<span class="kw1">value</span><span class="br0">)</span><span class="br0">)</span>
 
<span class="co1">;;; use the counter:</span>
 
<span class="br0">(</span>defvar *c* <span class="br0">(</span>make-counter <span class="nu0">10</span><span class="br0">)</span><span class="br0">)</span>
 
<span class="br0">(</span>functor-call *c*<span class="br0">)</span> --&gt; <span class="nu0">11</span>
<span class="br0">(</span>functor-call *c*<span class="br0">)</span> --&gt; <span class="nu0">12</span>
</pre></div>
<p>Since there is no standard way to make funcallable objects in Lisp, we fake it by defining a generic function called FUNCTOR-CALL. This can be specialized for any class whatsoever. The standard FUNCALL function is not generic; it only takes function objects.</p>
<p>It is this FUNCTOR-CALL generic function which gives us functors, which are <i>a computer programming construct allowing an object to be invoked or called as if it were an ordinary function, usually with the same syntax.</i> We have <b>almost</b> the same syntax: FUNCTOR-CALL instead of FUNCALL. Some Lisps provide "funcallable" objects as a simple extension. Making objects callable using the same syntax as functions is a fairly trivial business. Making a function call operator work with different kinds of "function things", whether they be class objects or closures is no more complicated than making a + operator that works with different kinds of numbers, such as integers, reals or complex numbers.</p>
<p>Now, a counter implemented using a closure. This is much more brief and direct. The INITIAL-VALUE argument of the MAKE-COUNTER <a href="/wiki/Factory_function" title="Factory function" class="mw-redirect">factory function</a> is captured and used directly. It does not have to be copied into some auxiliary class object through a constructor. It <b>is</b> the counter. An auxiliary object is created, but that happens "behind the scenes".</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-lisp">
<span class="br0">(</span><span class="kw1">defun</span> make-counter <span class="br0">(</span>initial-<span class="kw1">value</span><span class="br0">)</span>
  <span class="br0">(</span><span class="kw1">lambda</span> <span class="br0">(</span><span class="br0">)</span> <span class="br0">(</span>incf initial-<span class="kw1">value</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>
 
<span class="co1">;;; use the counter</span>
 
<span class="br0">(</span>defvar *c* <span class="br0">(</span>make-counter <span class="nu0">10</span><span class="br0">)</span><span class="br0">)</span>
 
<span class="br0">(</span><span class="kw1">funcall</span> *c*<span class="br0">)</span> --&gt; <span class="nu0">11</span>
<span class="br0">(</span><span class="kw1">funcall</span> *c*<span class="br0">)</span> --&gt; <span class="nu0">12</span>
</pre></div>
<p>More than one closure can be created in the same lexical environment. A vector of closures, each implementing a specific kind of operation, can quite faithfully emulate an object that has a set of virtual operations. That type of <a href="/wiki/Single_dispatch" title="Single dispatch" class="mw-redirect">single dispatch</a> object-oriented programming can be done entirely with closures.</p>
<p>So there exists a kind of tunnel being dug from both sides of the proverbial mountain. Programmers in OOP languages discover functors by restricting objects to have one "main" function to "do" that object's functional purpose, and even eliminate its name so that it looks like the object is being called! While programmers who use closures are not surprised that an object is called like a function, they discover that multiple closures sharing the same environment can provide a complete set of abstract operations like a virtual table for <a href="/wiki/Single_dispatch" title="Single dispatch" class="mw-redirect">single dispatch</a> type OOP.</p>
<p><a name="Functors_in_Ruby" id="Functors_in_Ruby"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Function_object&amp;action=edit&amp;section=10" title="Edit section: Functors in Ruby">edit</a>]</span> <span class="mw-headline">Functors in Ruby</span></h2>
<p><a href="/wiki/Ruby_(programming_language)" title="Ruby (programming language)">Ruby</a> has a number of objects that can be considered functors, in particular Method and Proc objects. Ruby also has two kinds of objects that can be thought of as semi-functors: UnboundMethod and block. UnboundMethods must first be bound to an object (thus becoming a Method) before they can be used as a functor. Blocks can be called like functors, but in order to be used in any other capacity as an object (eg. passed as an argument) they must first be converted to a Proc. More recently, symbols (accessed via the literal unary indicator <code>:</code>) can also be converted to <code>Proc</code>s. Using Ruby's unary <code>&amp;</code> operator—equivalent to calling <code>to_proc</code> on an object, and <a href="/wiki/Duck_typing" title="Duck typing">assuming that method exists</a>—the <a href="/w/index.php?title=Ruby_Extensions_Project&amp;action=edit&amp;redlink=1" class="new" title="Ruby Extensions Project (page does not exist)">Ruby Extensions Project</a> <a href="http://blogs.pragprog.com/cgi-bin/pragdave.cgi/Tech/Ruby/ToProc.rdoc" class="external text" title="http://blogs.pragprog.com/cgi-bin/pragdave.cgi/Tech/Ruby/ToProc.rdoc" rel="nofollow">created a simple hack.</a></p>
<div dir="ltr" style="text-align: left;">
<pre class="source-ruby">
<span class="kw1">class</span> <span class="kw4">Symbol</span>
   <span class="kw1">def</span> to_proc
      <span class="kw3">proc</span> <span class="br0">{</span> |obj, *args| obj.<span class="me1">send</span><span class="br0">(</span><span class="kw2">self</span>, *args<span class="br0">)</span> <span class="br0">}</span>
   <span class="kw1">end</span>
<span class="kw1">end</span>
</pre></div>
<p>Now, method <code>foo</code> can be a functor, i.e. a <code>Proc</code>, via <code>&amp;:foo</code> and used via <code>takes_a_functor(&amp;:foo)</code>. <code>Symbol.to_proc</code> was officially added to Ruby on <span class="mw-formatted-date" title="2006-06-11"><span class="mw-formatted-date" title="06-11"><a href="/wiki/June_11" title="June 11">June 11</a></span>, <a href="/wiki/2006" title="2006">2006</a></span> during RubyKaiga2006. <a href="http://redhanded.hobix.com/cult/symbolTo_procExonerated.html" class="external autonumber" title="http://redhanded.hobix.com/cult/symbolTo_procExonerated.html" rel="nofollow">[1]</a></p>
<p>Because of the variety of forms, the term Functor is not generally used in Ruby to mean a Function object. Rather it has come to represent a type of dispatch <a href="/wiki/Delegation_(programming)" title="Delegation (programming)">delegation</a> introduced by the <a href="http://facets.rubyforge.org" class="external text" title="http://facets.rubyforge.org" rel="nofollow">Ruby Facets</a> project. The most basic definition of which is:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-ruby">
<span class="kw1">class</span> Functor
  <span class="kw1">def</span> initialize<span class="br0">(</span>&amp;func<span class="br0">)</span>
    <span class="re1">@func</span> = func
  <span class="kw1">end</span>
  <span class="kw1">def</span> method_missing<span class="br0">(</span>op, *args, &amp;blk<span class="br0">)</span>
    <span class="re1">@func</span>.<span class="me1">call</span><span class="br0">(</span>op, *args, &amp;blk<span class="br0">)</span>
  <span class="kw1">end</span>
<span class="kw1">end</span>
</pre></div>
<p>This usage is more akin to that used by functional programming languages, like ML, and the original mathematical terminology.</p>
<p><a name="Functors_in_Eiffel" id="Functors_in_Eiffel"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Function_object&amp;action=edit&amp;section=11" title="Edit section: Functors in Eiffel">edit</a>]</span> <span class="mw-headline">Functors in Eiffel</span></h2>
<p>Operations and objects are seen always as separate concepts in the <a href="/wiki/Eiffel_(programming_language)" title="Eiffel (programming language)">Eiffel</a> software development method and programming language. However, the <a href="/wiki/Eiffel_(programming_language)#Agents" title="Eiffel (programming language)">agent</a> mechanism facilitates the modeling of operations as runtime objects. Agents satisfy the range of application attributed to functors, such as being passed as arguments in procedural calls or specified as callback routines. The design of the agent mechanism in Eiffel attempts to reflect the object-oriented nature of the method and language. An agent is an object which generally is a direct instance of one of the two library classes which model the two types of routines in Eiffel: <code lang="eiffel" xml:lang="eiffel">PROCEDURE</code> and <code lang="eiffel" xml:lang="eiffel">FUNCTION</code>. These two classes descend from the more abstract <code lang="eiffel" xml:lang="eiffel">ROUTINE</code>.</p>
<p>Within software text, the language keyword <code lang="eiffel" xml:lang="eiffel">agent</code> allows agents to be constructed in a compact form. In the following example, the goal is to add the action of stepping the gauge forward to the list of actions to be executed in the event that a button is clicked.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-eiffel">
            my_button.<span class="me1">select_actions</span>.<span class="me1">extend</span> <span class="br0">(</span><span class="kw2">agent</span> my_gauge.<span class="me1">step_forward</span><span class="br0">)</span>
</pre></div>
<p>The routine <code lang="eiffel" xml:lang="eiffel">extend</code> referenced in the example above is a feature of a class in a graphical user interface (GUI) library to provide event-driven programming capabilities.</p>
<p>In other library classes, agents are seen to be used for different purposes. In a library supporting data structures, for example, a class modeling linear structures effects <a href="/wiki/Universal_quantification" title="Universal quantification">universal quantification</a> with a function <code lang="eiffel" xml:lang="eiffel">for_all</code> of type <code lang="eiffel" xml:lang="eiffel">BOOLEAN</code> which accepts an agent, an instance of <code lang="eiffel" xml:lang="eiffel">FUNCTION</code>, as an argument. So, in the following example, <code lang="eiffel" xml:lang="eiffel">my_action</code> is executed only if all members of <code lang="eiffel" xml:lang="eiffel">my_list</code> contain the character '!':</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-eiffel">
    my_list: <span class="kw4">LINKED_LIST</span> <span class="br0">[</span><span class="kw4">STRING</span><span class="br0">]</span>
        ...
            <span class="kw2">if</span> my_list.<span class="me1">for_all</span> <span class="br0">(</span><span class="kw2">agent</span> <span class="br0">{</span><span class="kw4">STRING</span><span class="br0">}</span>.<span class="me1">has</span> <span class="br0">(</span><span class="st0">'!'</span><span class="br0">)</span><span class="br0">)</span> <span class="kw2">then</span>
                my_action
            <span class="kw2">end</span>
        ...
</pre></div>
<p>When agents are created, the arguments to the routines they model and even the target object to which they are applied can be either <b>closed</b> or left <b>open</b>. Closed arguments and targets are given values at agent creation time. The assignment of values for open arguments and targets is deferred until some point after the agent is created. The routine <code lang="eiffel" xml:lang="eiffel">for_all</code> expects as an argument an agent representing a function with one open argument or target which conforms to actual generic parameter for the structure (<code lang="eiffel" xml:lang="eiffel">STRING</code> in this example.)</p>
<p>When the target of an agent is left open, the class name of the expected target, enclosed in braces, is substituted for an object reference as shown in the text <code lang="eiffel" xml:lang="eiffel">agent {STRING}.has ('!')</code> in the example above. When an argument is left open, the question mark character ('?') is coded as a placeholder for the open argument.</p>
<p>The ability to close or leave open targets and arguments is intended to improve the flexibility of the agent mechanism. Consider a class that contains the following procedure to print a string on standard output after a new line:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-eiffel">
    print_on_new_line <span class="br0">(</span>s: <span class="kw4">STRING</span><span class="br0">)</span>
            <span class="co1">-- Print `s' preceded by a new line</span>
        <span class="kw2">do</span>
            print <span class="br0">(</span><span class="st0">"<span class="es0">%N</span>"</span> + s<span class="br0">)</span>
        <span class="kw2">end</span>
</pre></div>
<p>The following snippet, assumed to be in the same class, uses <code lang="eiffel" xml:lang="eiffel">print_on_new_line</code> to demonstrate the mixing of open arguments and open targets in agents used as arguments to the same routine.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-eiffel">
    my_list: <span class="kw4">LINKED_LIST</span> <span class="br0">[</span><span class="kw4">STRING</span><span class="br0">]</span>
        ...
            <span class="me1">my_list</span>.<span class="me1">do_all</span> <span class="br0">(</span><span class="kw2">agent</span> print_on_new_line <span class="br0">(</span>?<span class="br0">)</span><span class="br0">)</span>
            my_list.<span class="me1">do_all</span> <span class="br0">(</span><span class="kw2">agent</span> <span class="br0">{</span><span class="kw4">STRING</span><span class="br0">}</span>.<span class="me1">to_lower</span><span class="br0">)</span>
            my_list.<span class="me1">do_all</span> <span class="br0">(</span><span class="kw2">agent</span> print_on_new_line <span class="br0">(</span>?<span class="br0">)</span><span class="br0">)</span>
        ...
</pre></div>
<p>This example uses the procedure <code lang="eiffel" xml:lang="eiffel">do_all</code> for linear structures, which executes the routine modeled by an agent for each item in the structure.</p>
<p>The sequence of three instructions prints the strings in <code lang="eiffel" xml:lang="eiffel">my_list</code>, converts the strings to lowercase, and then prints them again.</p>
<p>Procedure <code lang="eiffel" xml:lang="eiffel">do_all</code> iterates across the structure executing the routine substituting the current item for either the open argument (in the case of the agents based on <code lang="eiffel" xml:lang="eiffel">print_on_new_line</code>), or the open target (in the case of the agent based on <code lang="eiffel" xml:lang="eiffel">to_lower</code>).</p>
<p>Open and closed arguments and targets also allow the use of routines which call for more arguments than are required by closing all but the necessary number of arguments:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-eiffel">
            my_list.<span class="me1">do_all</span> <span class="br0">(</span><span class="kw2">agent</span> my_multi_arg_procedure <span class="br0">(</span>closed_arg_1, ?, closed_arg_2, closed_arg_3<span class="br0">)</span>
</pre></div>
<p>The Eiffel agent mechanism is detailed in the <a href="http://www.ecma-international.org/publications/standards/Ecma-367.htm" class="external text" title="http://www.ecma-international.org/publications/standards/Ecma-367.htm" rel="nofollow">Eiffel ISO/ECMA standard document</a>.</p>
<p><a name="Other_meanings_of_functor" id="Other_meanings_of_functor"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Function_object&amp;action=edit&amp;section=12" title="Edit section: Other meanings of functor">edit</a>]</span> <span class="mw-headline">Other meanings of functor</span></h2>
<p>In some <a href="/wiki/Functional_programming_language" title="Functional programming language" class="mw-redirect">functional programming languages</a>, such as <a href="/wiki/ML_programming_language" title="ML programming language" class="mw-redirect">ML</a>, a functor represents a <a href="/wiki/Function_(mathematics)" title="Function (mathematics)">mapping</a> from modules to modules, and is a technique for reusing code. Functors used in this manner are analogous to the original mathematical meaning of <a href="/wiki/Functor" title="Functor">functor</a> in <a href="/wiki/Category_theory" title="Category theory">category theory</a>, or to the use of templates in C++.</p>
<p>In a more theoretical context a <i>function object</i> may be considered to be any instance of the class of functions, especially in languages such as <a href="/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a> in which functions are <a href="/wiki/First-class_object" title="First-class object">first-class objects</a>. In this case the shortened term functor is rarely used.</p>
<p>In <a href="/wiki/Prolog" title="Prolog">Prolog</a> and related languages, functor is a synonym for <a href="/wiki/Function_symbol" title="Function symbol" class="mw-redirect">function symbol</a>.</p>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Function_object&amp;action=edit&amp;section=13" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<ul>
<li><a href="/wiki/Closure_(computer_science)" title="Closure (computer science)">function closure</a></li>
<li><a href="/wiki/Command_pattern" title="Command pattern">Command pattern</a></li>
</ul>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Function_object&amp;action=edit&amp;section=14" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<div class="references-small">
<ol class="references">
<li id="cite_note-0"><b><a href="#cite_ref-0" title="">^</a></b> <a href="http://www.parashift.com/c++-faq-lite/pointers-to-members.html#faq-33.10" class="external free" title="http://www.parashift.com/c++-faq-lite/pointers-to-members.html#faq-33.10" rel="nofollow">http://www.parashift.com/c++-faq-lite/pointers-to-members.html#faq-33.10</a></li>
</ol>
</div>
<table class="metadata plainlinks ambox ambox-content" style="">
<tr>
<td class="mbox-image">
<div style="width: 52px;"><a href="/wiki/File:Question_book-new.svg" class="image" title="Question book-new.svg"><img alt="" src="http://upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/50px-Question_book-new.svg.png" width="50" height="39" border="0" /></a></div>
</td>
<td class="mbox-text" style="">This article <b>needs additional <a href="/wiki/Wikipedia:Citing_sources#Inline_citations" title="Wikipedia:Citing sources">citations</a> for <a href="/wiki/Wikipedia:Verifiability" title="Wikipedia:Verifiability">verification</a>.</b><br />
<small>Please help <a href="http://en.wikipedia.org/w/index.php?title=Function_object&amp;action=edit" class="external text" title="http://en.wikipedia.org/w/index.php?title=Function_object&amp;action=edit" rel="nofollow">improve this article</a> by adding <a href="/wiki/Wikipedia:Reliable_sources" title="Wikipedia:Reliable sources">reliable references</a>. Unsourced material may be <a href="/wiki/Template:Fact" title="Template:Fact">challenged</a> and <a href="/wiki/Wikipedia:BURDEN" title="Wikipedia:BURDEN" class="mw-redirect">removed</a>. <small><i>(February 2009)</i></small></small></td>
</tr>
</table>
<p><a name="Further_reading" id="Further_reading"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Function_object&amp;action=edit&amp;section=15" title="Edit section: Further reading">edit</a>]</span> <span class="mw-headline">Further reading</span></h2>
<ul>
<li>David Vandevoorde &amp; Nicolai M Josuttis (2006). <i>C++ Templates: The Complete Guide</i>, <a href="/wiki/Special:BookSources/0201734842" class="internal">ISBN 0-201-73484-2</a>&#160;: Specifically, chapter 22 is entirely devoted to function objects.</li>
</ul>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Function_object&amp;action=edit&amp;section=16" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<ul>
<li><a href="http://c2.com/cgi/wiki?FunctorObject" class="external text" title="http://c2.com/cgi/wiki?FunctorObject" rel="nofollow">Description from the Portland Pattern Repository</a></li>
<li><a href="http://www.two-sdg.demon.co.uk/curbralan/papers/AsynchronousC++.pdf" class="external text" title="http://www.two-sdg.demon.co.uk/curbralan/papers/AsynchronousC++.pdf" rel="nofollow">C++ Advanced Design Issues - Asynchronous C++</a> by <a href="/wiki/Kevlin_Henney" title="Kevlin Henney">Kevlin Henney</a></li>
<li><a href="http://www.newty.de/fpt/index.html" class="external text" title="http://www.newty.de/fpt/index.html" rel="nofollow">The Function Pointer Tutorials</a> by Lars Haendel (2000/2001)</li>
<li>Article "<a href="http://cuj.com/documents/s=8464/cujcexp0308sutter/" class="external text" title="http://cuj.com/documents/s=8464/cujcexp0308sutter/" rel="nofollow">Generalized Function Pointers</a>" by <a href="/wiki/Herb_Sutter" title="Herb Sutter">Herb Sutter</a></li>
<li><a href="http://jga.sourceforge.net/" class="external text" title="http://jga.sourceforge.net/" rel="nofollow">Generic Algorithms for Java</a></li>
</ul>


<!-- 
NewPP limit report
Preprocessor node count: 299/1000000
Post-expand include size: 3578/2048000 bytes
Template argument size: 1444/2048000 bytes
Expensive parser function count: 1/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:509999-0!1!0!default!!en!2 and timestamp 20090502192058 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Function_object">http://en.wikipedia.org/wiki/Function_object</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Programming_constructs" title="Category:Programming constructs">Programming constructs</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_example_C_code" title="Category:Articles with example C code">Articles with example C code</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_example_C%2B%2B_code" title="Category:Articles with example C++ code">Articles with example C++ code</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_example_Java_code" title="Category:Articles with example Java code">Articles with example Java code</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_example_Python_code" title="Category:Articles with example Python code">Articles with example Python code</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_example_Ruby_code" title="Category:Articles with example Ruby code">Articles with example Ruby code</a></span></div><div id="mw-hidden-catlinks" class="mw-hidden-cats-hidden">Hidden categories:&#32;<span dir='ltr'><a href="/wiki/Category:Articles_needing_additional_references_from_February_2009" title="Category:Articles needing additional references from February 2009">Articles needing additional references from February 2009</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Function_object" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Function_object" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Function_object&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Function_object&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Function_object" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Function_object" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Function_object" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Function_object&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Function_object&amp;oldid=276372017" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Function_object&amp;id=276372017">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/%E9%96%A2%E6%95%B0%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88">日本語</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 10 March 2009, at 21:47 (UTC).</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv207 in 0.042 secs. --></body></html>
