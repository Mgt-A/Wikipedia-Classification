<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Command pattern,Command pattern,Abstract factory pattern,Adapter pattern,Ambiguity,Borland Delphi,Bridge pattern,Builder pattern,Chain-of-responsibility pattern,Chain of responsibility pattern,Closure (computer science)" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Command_pattern&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Command_pattern&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Command pattern - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Command_pattern";
		var wgTitle = "Command pattern";
		var wgAction = "view";
		var wgArticleId = "164858";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281467735;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
<style type="text/css">/*<![CDATA[*/
.source-cpp {line-height: normal;}
.source-cpp li, .source-cpp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for cpp
 * CSS class: source-cpp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-cpp .de1, .source-cpp .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-cpp  {}
.source-cpp .head {}
.source-cpp .foot {}
.source-cpp .imp {font-weight: bold; color: red;}
.source-cpp .ln-xtra {color: #cc0; background-color: #ffc;}
.source-cpp li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-cpp li.li2 {font-weight: bold;}
.source-cpp .kw1 {color: #0000ff;}
.source-cpp .kw2 {color: #0000ff;}
.source-cpp .kw3 {color: #0000dd;}
.source-cpp .kw4 {color: #0000ff;}
.source-cpp .co1 {color: #ff0000;}
.source-cpp .co2 {color: #339900;}
.source-cpp .coMULTI {color: #ff0000; font-style: italic;}
.source-cpp .es0 {color: #666666; font-weight: bold;}
.source-cpp .br0 {color: #000000;}
.source-cpp .st0 {color: #666666;}
.source-cpp .nu0 {color: #0000dd;}
.source-cpp .me1 {color: #00eeff;}
.source-cpp .me2 {color: #00eeff;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-java {line-height: normal;}
.source-java li, .source-java pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for java
 * CSS class: source-java, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-java .de1, .source-java .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-java  {}
.source-java .head {}
.source-java .foot {}
.source-java .imp {font-weight: bold; color: red;}
.source-java .ln-xtra {color: #cc0; background-color: #ffc;}
.source-java li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-java li.li2 {font-weight: bold;}
.source-java .kw1 {color: #b1b100;}
.source-java .kw2 {color: #000000; font-weight: bold;}
.source-java .kw3 {color: #aaaadd; font-weight: bold;}
.source-java .kw4 {color: #993333;}
.source-java .co1 {color: #808080; font-style: italic;}
.source-java .co2 {color: #a1a100;}
.source-java .coMULTI {color: #808080; font-style: italic;}
.source-java .es0 {color: #000099; font-weight: bold;}
.source-java .br0 {color: #66cc66;}
.source-java .st0 {color: #ff0000;}
.source-java .nu0 {color: #cc66cc;}
.source-java .me1 {color: #006600;}
.source-java .me2 {color: #006600;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style>		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Command_pattern skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Command pattern</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<p>In <a href="/wiki/Object-oriented_programming" title="Object-oriented programming">object-oriented programming</a>, the <b>Command pattern</b> is a <a href="/wiki/Design_pattern_(computer_science)" title="Design pattern (computer science)">design pattern</a> in which an object is used to represent and <a href="/wiki/Information_Hiding" title="Information Hiding" class="mw-redirect">encapsulate</a> all the information needed to call a method at a later time. This information includes the method name, the object that owns the method and values for the method parameters.</p>
<p>Three terms always associated with the Command pattern are <i>client</i>, <i>invoker</i> and <i>receiver</i>. The client instantiates the command object and provides the information required to call the method at a later time. The invoker decides when the method should be called. The receiver is an instance of the class that contains the method's code.</p>
<p>Using command objects makes it easier to construct general components that need to delegate, sequence or execute method calls at a time of their choosing without the need to know the owner of the method or the method parameters.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Uses_for_the_Command_pattern"><span class="tocnumber">1</span> <span class="toctext">Uses for the Command pattern</span></a></li>
<li class="toclevel-1"><a href="#Structure"><span class="tocnumber">2</span> <span class="toctext">Structure</span></a></li>
<li class="toclevel-1"><a href="#Terminology"><span class="tocnumber">3</span> <span class="toctext">Terminology</span></a></li>
<li class="toclevel-1"><a href="#Examples"><span class="tocnumber">4</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2"><a href="#C.2B.2B"><span class="tocnumber">4.1</span> <span class="toctext">C++</span></a></li>
<li class="toclevel-2"><a href="#Java"><span class="tocnumber">4.2</span> <span class="toctext">Java</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">5</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">6</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">7</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Uses_for_the_Command_pattern" id="Uses_for_the_Command_pattern"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Command_pattern&amp;action=edit&amp;section=1" title="Edit section: Uses for the Command pattern">edit</a>]</span> <span class="mw-headline">Uses for the Command pattern</span></h2>
<p>Command objects are useful for implementing:</p>
<dl>
<dt>Multi-level <a href="/wiki/Undo" title="Undo">undo</a>&#160;</dt>
<dd>If all user actions in a program are implemented as command objects, the program can keep a stack of the most recently executed commands. When the user wants to undo a command, the program simply pops the most recent command object and executes its <tt>undo()</tt> method.</dd>
<dt><a href="/wiki/Database_transaction" title="Database transaction">Transactional</a> behavior&#160;</dt>
<dd>Undo is perhaps even more essential when it's called <i>rollback</i> and happens automatically when an operation fails partway through. <a href="/wiki/Installer" title="Installer" class="mw-redirect">Installers</a> need this and so do databases. Command objects can also be used to implement <a href="/wiki/Two-phase_commit" title="Two-phase commit" class="mw-redirect">two-phase commit</a>.</dd>
<dt><a href="/wiki/Progress_bar" title="Progress bar">Progress bars</a>&#160;</dt>
<dd>Suppose a program has a sequence of commands that it executes in order. If each command object has a <tt>getEstimatedDuration()</tt> method, the program can easily estimate the total duration. It can show a progress bar that meaningfully reflects how close the program is to completing all the tasks.</dd>
<dt><a href="/wiki/Wizard_(software)" title="Wizard (software)">Wizards</a>&#160;</dt>
<dd>Often a wizard presents several pages of configuration for a single action that happens only when the user clicks the "Finish" button on the last page. In these cases, a natural way to separate user interface code from application code is to implement the wizard using a command object. The command object is created when the wizard is first displayed. Each wizard page stores its GUI changes in the command object, so the object is populated as the user progresses. "Finish" simply triggers a call to <tt>execute()</tt>. This way, the command class contains no user interface code.</dd>
<dt>GUI buttons and menu items&#160;</dt>
<dd>In <a href="/wiki/Swing_(Java)" title="Swing (Java)">Swing</a> and <a href="/wiki/Borland_Delphi" title="Borland Delphi" class="mw-redirect">Borland Delphi</a> programming, an <code><a href="http://java.sun.com/javase/6/docs/api/javax/swing/Action.html" class="external text" title="http://java.sun.com/javase/6/docs/api/javax/swing/Action.html" rel="nofollow">Action</a></code> is a command object. In addition to the ability to perform the desired command, an <code>Action</code> may have an associated icon, keyboard shortcut, tooltip text, and so on. A toolbar button or menu item component may be completely initialized using only the <code>Action</code> object.</dd>
<dt><a href="/wiki/Thread_pool" title="Thread pool" class="mw-redirect">Thread pools</a>&#160;</dt>
<dd>A typical, general-purpose thread pool class might have a public <code>addTask()</code> method that adds a work item to an internal queue of tasks waiting to be done. It maintains a pool of threads that execute commands from the queue. The items in the queue are command objects. Typically these objects implement a common interface such as <code>java.lang.Runnable</code> that allows the thread pool to execute the command even though the thread pool class itself was written without any knowledge of the specific tasks for which it would be used.</dd>
<dt><a href="/wiki/Macro_(computer_science)" title="Macro (computer science)">Macro</a> recording&#160;</dt>
<dd>If all user actions are represented by command objects, a program can record a sequence of actions simply by keeping a list of the command objects as they are executed. It can then "play back" the same actions by executing the same command objects again in sequence. If the program embeds a scripting engine, each command object can implement a <tt>toScript()</tt> method, and user actions can then be easily recorded as scripts.</dd>
<dt>Networking&#160;</dt>
<dd>It is possible to send whole command objects across the network to be executed on the other machines, for example player actions in computer games.</dd>
<dt>Parallel Processing&#160;</dt>
<dd>Where the commands are written as tasks to a shared resource and executed by many threads in parallel (possibly on remote machines -this variant is often referred to as the Master/Worker pattern)</dd>
<dt><a href="/wiki/Code_Mobility" title="Code Mobility">Mobile Code</a>&#160;</dt>
<dd>Using languages such as Java where code can be streamed/slurped from one location to another via URLClassloaders and Codebases the commands can enable new behavior to be delivered to remote locations (EJB Command, Master Worker)</dd>
</dl>
<p><a name="Structure" id="Structure"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Command_pattern&amp;action=edit&amp;section=2" title="Edit section: Structure">edit</a>]</span> <span class="mw-headline">Structure</span></h2>
<p><a href="/wiki/File:Command_Design_Pattern_Class_Diagram.png" class="image" title="Image:Command_Design_Pattern_Class_Diagram.png"><img alt="Image:Command_Design_Pattern_Class_Diagram.png" src="http://upload.wikimedia.org/wikipedia/en/8/8e/Command_Design_Pattern_Class_Diagram.png" width="557" height="353" border="0" /></a></p>
<p><a name="Terminology" id="Terminology"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Command_pattern&amp;action=edit&amp;section=3" title="Edit section: Terminology">edit</a>]</span> <span class="mw-headline">Terminology</span></h2>
<p>The terminology used to describe command pattern implementations is not consistent and can therefore be confusing. This is the result of <a href="/wiki/Ambiguity" title="Ambiguity">ambiguity</a>, the use of <a href="/wiki/Synonyms" title="Synonyms" class="mw-redirect">synonyms</a>, and implementations that may obscure the original pattern by going well beyond it.</p>
<ol>
<li>Ambiguity.
<ol>
<li>The term <b>command</b> is ambiguous. For example, <i>move up, move up</i> may refer to a single (move up) command that should be executed twice, or it may refer to two commands, each of which happens to do the same thing (move up). If the former command is added twice to an undo stack, both items on the stack refer to the same command instance. This may be appropriate when a command can always be undone the same way (e.g. move down). Both the <a href="/wiki/Gang_of_Four_(software)" title="Gang of Four (software)" class="mw-redirect">Gang of Four</a> and the <a href="/wiki/Command_pattern#Java" title="Command pattern">Java example below</a> use this interpretation of the term <i>command</i>. On the other hand, if the latter commands are added to an undo stack, the stack refers to two separate objects. This may be appropriate when each object on the stack must contain information that allows the command to be undone. For example, to undo a <i>delete selection</i> command, the object may contain a copy of the deleted text so that it can be re-inserted if the <i>delete selection</i> command must be undone. The <a href="/wiki/Command_pattern#C.2B.2B" title="Command pattern">C++ example below</a> is an example of this interpretation. Note that using a separate object for each invocation of a command is also an example of the <a href="/wiki/Chain_of_responsibility_pattern" title="Chain of responsibility pattern" class="mw-redirect">chain of responsibility pattern</a>.</li>
<li>The term <b>execute</b> is also ambiguous. It may refer to running the code identified by the command object's <i>execute</i> method. However, in Microsoft's Windows Presentation Foundation a command is considered to have been executed when the command's <i>execute</i> method has been invoked. But that does not necessarily mean that the application code has run. That occurs only after some further event processing.</li>
</ol>
</li>
<li>Synonyms and <a href="/wiki/Homonyms" title="Homonyms" class="mw-redirect">homonyms</a>.
<ol>
<li><b>Client, Source, Invoker</b>: the button, toolbar button, or menu item clicked, the shortcut key pressed by the user.</li>
<li><b>Command Object, Routed Command Object, Action Object</b>: a singleton object (e.g. there is only one CopyCommand object), which knows about shortcut keys, button images, command text, etc. related to the command. A source/invoker object calls the Command/Action object's execute/performAction method. The Command/Action object notifies the appropriate source/invoker objects when the availability of a command/action has changed. This allows buttons and menu items to become inactive (grayed out) when a command/action cannot be executed/performed.</li>
<li><b>Receiver, Target Object</b>: the object that is about to be copied, pasted, moved, etc. The receiver object owns the method that is called by the command's <i>execute</i> method. The receiver is typically also the target object. For example, if the receiver object is a <i>cursor</i> and the method is called <i>moveUp</i>, then one would expect that the cursor is the target of the moveUp action. At the other hand, if the code is defined by the command object itself, the target object will be a different object entirely.</li>
<li><b>Command Object, routed event args, event object</b>: the object that is passed from the source to the Command/Action object, to the Target object to the code that does the work. Each button click or shortcut key results in a new command/event object. Some implementations add more information to the command/event object as it is being passed from one object (e.g. CopyCommand) to another (e.g. document section). Other implementations put command/event objects in other event objects (like a box inside a bigger box) as they move along the line, to avoid naming conflicts. (See also <a href="/wiki/Chain_of_responsibility_pattern" title="Chain of responsibility pattern" class="mw-redirect">chain of responsibility pattern</a>).</li>
<li><b>Handler, ExecutedRoutedEventHandler, method, function</b>: the actual code that does the copying, pasting, moving, etc. In some implementations the handler code is part of the command/action object. In other implementations the code is part of the Receiver/Target Object, and in yet other implementations the handler code is kept separate from the other objects.</li>
<li><b>Command Manager, Undo Manager, Scheduler, Queue, Dispatcher, Invoker</b>: an object that puts command/event objects on an undo stack or redo stack, or that holds on to command/event objects until other objects are ready to act on them, or that routes the command/event objects to the appropriate receiver/target object or handler code.<br /></li>
</ol>
</li>
<li>Implementations that go well beyond the original command pattern.
<ol>
<li>Microsoft's <a href="http://msdn.microsoft.com/en-us/library/ms752308.aspx" class="external text" title="http://msdn.microsoft.com/en-us/library/ms752308.aspx" rel="nofollow">Windows Presentation Foundation</a> (WPF), introduces routed commands, which combine the command pattern with event processing. As a result the command object no longer contains a reference to the target object nor a reference to the application code. Instead, invoking the command object's <i>execute</i> command results in a so called <i>Executed Routed Event</i> which during the event's tunneling or bubbling may encounter a so called <i>binding</i> object which identifies the target and the application code, which is executed at that point.</li>
</ol>
</li>
</ol>
<p><a name="Examples" id="Examples"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Command_pattern&amp;action=edit&amp;section=4" title="Edit section: Examples">edit</a>]</span> <span class="mw-headline">Examples</span></h2>
<p><a name="C.2B.2B" id="C.2B.2B"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Command_pattern&amp;action=edit&amp;section=5" title="Edit section: C++">edit</a>]</span> <span class="mw-headline">C++</span></h3>
<p>Consider a simple recipe making program. Every command could be represented as an object. Then if the user makes a mistake then he/she can undo the command by removing that object from the stack</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
<span class="co2">#include &lt;iostream&gt;</span>
<span class="co2">#include &lt;vector&gt;</span>
<span class="co2">#include &lt;string&gt;</span>
<span class="kw2">using</span> <span class="kw2">namespace</span> std;
 
<span class="kw2">class</span> Command<span class="br0">{</span>
  <span class="kw2">public</span>:
   <span class="kw2">virtual</span> <span class="kw4">void</span> execute<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span> =<span class="nu0">0</span>;
   <span class="kw2">virtual</span> ~Command<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span><span class="br0">{</span><span class="br0">}</span>;
<span class="br0">}</span>;
 
<span class="kw2">class</span> Ingredient : <span class="kw2">public</span> Command <span class="br0">{</span>
  <span class="kw2">public</span>:
   Ingredient<span class="br0">(</span>string amount, string ingredient<span class="br0">)</span><span class="br0">{</span>
      _ingredient = ingredient;
      _amount = amount;
   <span class="br0">}</span>
   <span class="kw4">void</span> execute<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span><span class="br0">{</span>
      <span class="kw3">cout</span> &lt;&lt; <span class="st0">" *Add "</span> &lt;&lt; _amount &lt;&lt; <span class="st0">" of "</span> &lt;&lt; _ingredient &lt;&lt; endl;
   <span class="br0">}</span>
  <span class="kw2">private</span>:
   string _ingredient;
   string _amount;
<span class="br0">}</span>;
 
<span class="kw2">class</span> Step : <span class="kw2">public</span> Command <span class="br0">{</span>
  <span class="kw2">public</span>:
   Step<span class="br0">(</span>string action, string <span class="kw3">time</span><span class="br0">)</span><span class="br0">{</span>
      _action= action;
      _time= <span class="kw3">time</span>;
   <span class="br0">}</span>
   <span class="kw4">void</span> execute<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span><span class="br0">{</span>
      <span class="kw3">cout</span> &lt;&lt; <span class="st0">" *"</span> &lt;&lt; _action &lt;&lt; <span class="st0">" for "</span> &lt;&lt; _time &lt;&lt; endl;
   <span class="br0">}</span>
  <span class="kw2">private</span>:
   string _time;
   string _action;
<span class="br0">}</span>;
 
<span class="kw2">class</span> CmdStack<span class="br0">{</span>
  <span class="kw2">public</span>:
   <span class="kw4">void</span> add<span class="br0">(</span>Command *c<span class="br0">)</span> <span class="br0">{</span>
      commands.<span class="me1">push_back</span><span class="br0">(</span>c<span class="br0">)</span>;
   <span class="br0">}</span>
   <span class="kw4">void</span> createRecipe<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span><span class="br0">{</span>
      <span class="kw1">for</span><span class="br0">(</span>vector&lt;Command*&gt;::<span class="me2">size_type</span> x=<span class="nu0">0</span>;x&lt;commands.<span class="me1">size</span><span class="br0">(</span><span class="br0">)</span>;x++<span class="br0">)</span><span class="br0">{</span>
         commands<span class="br0">[</span>x<span class="br0">]</span>-&gt;execute<span class="br0">(</span><span class="br0">)</span>;
      <span class="br0">}</span>
   <span class="br0">}</span>
   <span class="kw4">void</span> undo<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span><span class="br0">{</span>
      <span class="kw1">if</span><span class="br0">(</span>commands.<span class="me1">size</span><span class="br0">(</span><span class="br0">)</span> &gt; <span class="nu0">0</span><span class="br0">)</span> <span class="br0">{</span>
         commands.<span class="me1">pop_back</span><span class="br0">(</span><span class="br0">)</span>;
      <span class="br0">}</span>
      <span class="kw1">else</span> <span class="br0">{</span>
         <span class="kw3">cout</span> &lt;&lt; <span class="st0">"Can't undo"</span> &lt;&lt; endl;
      <span class="br0">}</span>
   <span class="br0">}</span>
  <span class="kw2">private</span>:
   vector&lt;Command*&gt; commands;
<span class="br0">}</span>;
 
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span> <span class="br0">{</span>
   CmdStack list;
 
   <span class="co1">//Create ingredients</span>
   Ingredient first<span class="br0">(</span><span class="st0">"2 tablespoons"</span>, <span class="st0">"vegetable oil"</span><span class="br0">)</span>;
   Ingredient second<span class="br0">(</span><span class="st0">"3 cups"</span>, <span class="st0">"rice"</span><span class="br0">)</span>;
   Ingredient third<span class="br0">(</span><span class="st0">"1 bottle"</span>,<span class="st0">"Ketchup"</span><span class="br0">)</span>;
   Ingredient fourth<span class="br0">(</span><span class="st0">"4 ounces"</span>, <span class="st0">"peas"</span><span class="br0">)</span>;
   Ingredient fifth<span class="br0">(</span><span class="st0">"1 teaspoon"</span>, <span class="st0">"soy sauce"</span><span class="br0">)</span>;
 
   <span class="co1">//Create Step</span>
   Step step<span class="br0">(</span><span class="st0">"Stir-fry"</span>,<span class="st0">"3-4 minutes"</span><span class="br0">)</span>;
 
   <span class="co1">//Create Recipe</span>
   <span class="kw3">cout</span> &lt;&lt; <span class="st0">"Recipe for simple Fried Rice"</span> &lt;&lt; endl;
   list.<span class="me1">add</span><span class="br0">(</span>&amp;first<span class="br0">)</span>;
   list.<span class="me1">add</span><span class="br0">(</span>&amp;second<span class="br0">)</span>;
   list.<span class="me1">add</span><span class="br0">(</span>&amp;step<span class="br0">)</span>;
   list.<span class="me1">add</span><span class="br0">(</span>&amp;third<span class="br0">)</span>; 
   list.<span class="me1">undo</span><span class="br0">(</span><span class="br0">)</span>;
   list.<span class="me1">add</span><span class="br0">(</span>&amp;fourth<span class="br0">)</span>;
   list.<span class="me1">add</span><span class="br0">(</span>&amp;fifth<span class="br0">)</span>;
   list.<span class="me1">createRecipe</span><span class="br0">(</span><span class="br0">)</span>;
   <span class="kw3">cout</span> &lt;&lt; <span class="st0">"Enjoy!"</span> &lt;&lt; endl;
   <span class="kw1">return</span> <span class="nu0">0</span>;
<span class="br0">}</span>
</pre></div>
<p><a name="Java" id="Java"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Command_pattern&amp;action=edit&amp;section=6" title="Edit section: Java">edit</a>]</span> <span class="mw-headline">Java</span></h3>
<p>Consider a simple switch. In this example we configure the Switch with 2 commands: to turn the light on and to turn the light off.</p>
<p>A benefit of this particular implementation of the Command Pattern is that the switch can be used with any device, not just a light - the Switch in the following example turns a light on and off, but the Switch's constructor is able to accept any subclasses of Command for its 2 parameters. For example, you could configure the Switch to start an engine.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-java">
<span class="coMULTI">/*the Invoker class*/</span>
<span class="kw2">public</span> <span class="kw2">class</span> <span class="kw1">Switch</span> <span class="br0">{</span>
 
    <span class="kw2">private</span> Command flipUpCommand;
    <span class="kw2">private</span> Command flipDownCommand;
 
    <span class="kw2">public</span> <span class="kw1">Switch</span><span class="br0">(</span>Command flipUpCmd,Command flipDownCmd<span class="br0">)</span><span class="br0">{</span>
         <span class="kw2">this</span>.<span class="me1">flipUpCommand</span>=flipUpCmd;
         <span class="kw2">this</span>.<span class="me1">flipDownCommand</span>=flipDownCmd;
    <span class="br0">}</span>
 
    <span class="kw2">public</span> <span class="kw4">void</span> flipUp<span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
         flipUpCommand.<span class="me1">execute</span><span class="br0">(</span><span class="br0">)</span>;
    <span class="br0">}</span>
 
    <span class="kw2">public</span> <span class="kw4">void</span> flipDown<span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
         flipDownCommand.<span class="me1">execute</span><span class="br0">(</span><span class="br0">)</span>;
    <span class="br0">}</span>
 
<span class="br0">}</span>
 
<span class="coMULTI">/*Receiver class*/</span>
 
<span class="kw2">public</span> <span class="kw2">class</span> Light<span class="br0">{</span>
 
     <span class="kw2">public</span> Light<span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>  <span class="br0">}</span>
 
     <span class="kw2">public</span> <span class="kw4">void</span> turnOn<span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
        <span class="kw3">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span><span class="st0">"The light is on"</span><span class="br0">)</span>;
     <span class="br0">}</span>
 
     <span class="kw2">public</span> <span class="kw4">void</span> turnOff<span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
        <span class="kw3">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span><span class="st0">"The light is off"</span><span class="br0">)</span>;
     <span class="br0">}</span>
 
<span class="br0">}</span>
 
 
<span class="coMULTI">/*the Command interface*/</span>
 
<span class="kw2">public</span> <span class="kw2">interface</span> Command<span class="br0">{</span>
    <span class="kw4">void</span> execute<span class="br0">(</span><span class="br0">)</span>;
<span class="br0">}</span>
 
 
<span class="coMULTI">/*the Command for turning on the light*/</span>
 
<span class="kw2">public</span> <span class="kw2">class</span> TurnOnLightCommand <span class="kw2">implements</span> Command<span class="br0">{</span>
 
   <span class="kw2">private</span> Light theLight;
 
   <span class="kw2">public</span> TurnOnLightCommand<span class="br0">(</span>Light light<span class="br0">)</span><span class="br0">{</span>
        <span class="kw2">this</span>.<span class="me1">theLight</span>=light;
       <span class="br0">}</span>
 
   <span class="kw2">public</span> <span class="kw4">void</span> execute<span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
      theLight.<span class="me1">turnOn</span><span class="br0">(</span><span class="br0">)</span>;
   <span class="br0">}</span>
 
<span class="br0">}</span>
 
<span class="coMULTI">/*the Command for turning off the light*/</span>
 
<span class="kw2">public</span> <span class="kw2">class</span> TurnOffLightCommand <span class="kw2">implements</span> Command<span class="br0">{</span>
 
   <span class="kw2">private</span> Light theLight;
 
   <span class="kw2">public</span> TurnOffLightCommand<span class="br0">(</span>Light light<span class="br0">)</span><span class="br0">{</span>
        <span class="kw2">this</span>.<span class="me1">theLight</span>=light;
       <span class="br0">}</span>
 
   <span class="kw2">public</span> <span class="kw4">void</span> execute<span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
      theLight.<span class="me1">turnOff</span><span class="br0">(</span><span class="br0">)</span>;
   <span class="br0">}</span>
 
<span class="br0">}</span>
 
<span class="coMULTI">/*The test class*/</span>
<span class="kw2">public</span> <span class="kw2">class</span> TestCommand<span class="br0">{</span>
 
   <span class="kw2">public</span> <span class="kw2">static</span> <span class="kw4">void</span> main<span class="br0">(</span><span class="kw3">String</span><span class="br0">[</span><span class="br0">]</span> args<span class="br0">)</span><span class="br0">{</span>
       Light l=<span class="kw2">new</span> Light<span class="br0">(</span><span class="br0">)</span>;
       Command switchUp=<span class="kw2">new</span> TurnOnLightCommand<span class="br0">(</span>l<span class="br0">)</span>;
       Command switchDown=<span class="kw2">new</span> TurnOffLightCommand<span class="br0">(</span>l<span class="br0">)</span>;
 
       <span class="kw1">Switch</span> s=<span class="kw2">new</span> <span class="kw1">Switch</span><span class="br0">(</span>switchUp,switchDown<span class="br0">)</span>;
 
       s.<span class="me1">flipUp</span><span class="br0">(</span><span class="br0">)</span>;
       s.<span class="me1">flipDown</span><span class="br0">(</span><span class="br0">)</span>;
   <span class="br0">}</span>
 
<span class="br0">}</span>
</pre></div>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Command_pattern&amp;action=edit&amp;section=7" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<ul>
<li><a href="/wiki/Closure_(computer_science)" title="Closure (computer science)">Closure</a></li>
<li><a href="/wiki/Model-view-controller" title="Model-view-controller" class="mw-redirect">Model-view-controller</a></li>
<li><a href="/wiki/Function_object" title="Function object">Function object</a></li>
</ul>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Command_pattern&amp;action=edit&amp;section=8" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<ul>
<li>Freeman, E; Sierra, K; Bates, B (2004). Head First Design Patterns. O'Reilly.</li>
<li><a href="/wiki/Gang_of_Four_(software)" title="Gang of Four (software)" class="mw-redirect">GoF - Design Patterns</a></li>
</ul>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Command_pattern&amp;action=edit&amp;section=9" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<ul>
<li><a href="http://c2.com/cgi/wiki?CommandPattern" class="external free" title="http://c2.com/cgi/wiki?CommandPattern" rel="nofollow">http://c2.com/cgi/wiki?CommandPattern</a></li>
<li><a href="http://www.martinfowler.com/eaaCatalog/unitOfWork.html" class="external free" title="http://www.martinfowler.com/eaaCatalog/unitOfWork.html" rel="nofollow">http://www.martinfowler.com/eaaCatalog/unitOfWork.html</a></li>
<li><a href="http://www.javaworld.com/javaworld/javatips/jw-javatip68.html" class="external free" title="http://www.javaworld.com/javaworld/javatips/jw-javatip68.html" rel="nofollow">http://www.javaworld.com/javaworld/javatips/jw-javatip68.html</a></li>
<li><a href="http://www.microsoft.com/belux/msdn/nl/community/columns/jdruyts/wpf_commandpattern.mspx" class="external free" title="http://www.microsoft.com/belux/msdn/nl/community/columns/jdruyts/wpf_commandpattern.mspx" rel="nofollow">http://www.microsoft.com/belux/msdn/nl/community/columns/jdruyts/wpf_commandpattern.mspx</a> (<a href="/wiki/Windows_Presentation_Foundation" title="Windows Presentation Foundation">Windows_Presentation_Foundation</a>)</li>
<li><a href="http://windowssdk.msdn.microsoft.com/en-us/library/ms752308.aspx" class="external text" title="http://windowssdk.msdn.microsoft.com/en-us/library/ms752308.aspx" rel="nofollow">Microsoft's Windows Presentation Foundation Commanding OverView</a></li>
<li><a href="http://perfectjpattern.sourceforge.net/dp-command.html" class="external text" title="http://perfectjpattern.sourceforge.net/dp-command.html" rel="nofollow">PerfectJPattern Open Source Project</a>, Provides a componentized i.e. context-free and type-safe implementation of the Command Pattern in Java</li>
<li><a href="http://www.fsw.com/Jt/Jt.htm" class="external text" title="http://www.fsw.com/Jt/Jt.htm" rel="nofollow">Jt</a> J2EE Pattern Oriented Framework</li>
</ul>
<p><br /></p>
<table class="navbox" cellspacing="0" style=";">
<tr>
<td style="padding:2px;">
<table cellspacing="0" class="nowraplinks collapsible autocollapse" style="width:100%;background:transparent;color:inherit;;">
<tr>
<th style=";" colspan="2" class="navbox-title">
<div style="float:left; width:6em;text-align:left;">
<div class="noprint plainlinksneverexpand navbar" style="background:none; padding:0; font-weight:normal;;;border:none;; font-size:xx-small;"><a href="/wiki/Template:Design_Patterns_Patterns" title="Template:Design Patterns Patterns"><span title="View this template" style=";;border:none;">v</span></a>&#160;•&#160;<a href="/w/index.php?title=Template_talk:Design_Patterns_Patterns&amp;action=edit&amp;redlink=1" class="new" title="Template talk:Design Patterns Patterns (page does not exist)"><span title="Discussion about this template" style=";;border:none;">d</span></a>&#160;•&#160;<a href="http://en.wikipedia.org/w/index.php?title=Template:Design_Patterns_Patterns&amp;action=edit" class="external text" title="http://en.wikipedia.org/w/index.php?title=Template:Design_Patterns_Patterns&amp;action=edit" rel="nofollow"><span title="Edit this template" style=";;border:none;;">e</span></a></div>
</div>
<span style="font-size:110%;"><a href="/wiki/Design_pattern_(computer_science)" title="Design pattern (computer science)">Design patterns</a> in the book <i><a href="/wiki/Design_Patterns_(book)" title="Design Patterns (book)">Design Patterns</a></i></span></th>
</tr>
<tr style="height:2px;">
<td></td>
</tr>
<tr>
<td class="navbox-group" style=";;">Creational</td>
<td style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<div style="padding:0em 0.25em"><a href="/wiki/Abstract_factory_pattern" title="Abstract factory pattern">Abstract factory</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Builder_pattern" title="Builder pattern">Builder</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Factory_method_pattern" title="Factory method pattern">Factory</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Prototype_pattern" title="Prototype pattern">Prototype</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Singleton_pattern" title="Singleton pattern">Singleton</a></div>
</td>
</tr>
<tr style="height:2px">
<td></td>
</tr>
<tr>
<td class="navbox-group" style=";;">Structural</td>
<td style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<div style="padding:0em 0.25em"><a href="/wiki/Adapter_pattern" title="Adapter pattern">Adapter</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Bridge_pattern" title="Bridge pattern">Bridge</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Composite_pattern" title="Composite pattern">Composite</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Decorator_pattern" title="Decorator pattern">Decorator</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Facade_pattern" title="Facade pattern">Facade</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Flyweight_pattern" title="Flyweight pattern">Flyweight</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Proxy_pattern" title="Proxy pattern">Proxy</a></div>
</td>
</tr>
<tr style="height:2px">
<td></td>
</tr>
<tr>
<td class="navbox-group" style=";;">Behavioral</td>
<td style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<div style="padding:0em 0.25em"><a href="/wiki/Chain-of-responsibility_pattern" title="Chain-of-responsibility pattern">Chain of responsibility</a><span style="font-weight:bold;">&#160;·</span> <strong class="selflink">Command</strong><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Interpreter_pattern" title="Interpreter pattern">Interpreter</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Iterator_pattern" title="Iterator pattern">Iterator</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Mediator_pattern" title="Mediator pattern">Mediator</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Memento_pattern" title="Memento pattern">Memento</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Observer_pattern" title="Observer pattern">Observer</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/State_pattern" title="State pattern">State</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Strategy_pattern" title="Strategy pattern">Strategy</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Template_method_pattern" title="Template method pattern">Template method</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Visitor_pattern" title="Visitor pattern">Visitor</a></div>
</td>
</tr>
</table>
</td>
</tr>
</table>


<!-- 
NewPP limit report
Preprocessor node count: 441/1000000
Post-expand include size: 13975/2048000 bytes
Template argument size: 5863/2048000 bytes
Expensive parser function count: 0/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:164858-0!1!0!default!!en!2 and timestamp 20090403090823 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Command_pattern">http://en.wikipedia.org/wiki/Command_pattern</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Software_design_patterns" title="Category:Software design patterns">Software design patterns</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Command_pattern" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Command_pattern" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Command_pattern&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Command_pattern&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Command_pattern" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Command_pattern" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Command_pattern" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Command_pattern&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Command_pattern&amp;oldid=281467735" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Command_pattern&amp;id=281467735">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/Kommando_(Entwurfsmuster)">Deutsch</a></li>
				<li class="interwiki-es"><a href="http://es.wikipedia.org/wiki/Command_(patr%C3%B3n_de_dise%C3%B1o)">Español</a></li>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Commande_(patron_de_conception)">Français</a></li>
				<li class="interwiki-ko"><a href="http://ko.wikipedia.org/wiki/Command_%ED%8C%A8%ED%84%B4">한국어</a></li>
				<li class="interwiki-it"><a href="http://it.wikipedia.org/wiki/Command_pattern">Italiano</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/Command_%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3">日本語</a></li>
				<li class="interwiki-pl"><a href="http://pl.wikipedia.org/wiki/Polecenie_(wzorzec_projektowy)">Polski</a></li>
				<li class="interwiki-ru"><a href="http://ru.wikipedia.org/wiki/Command">Русский</a></li>
				<li class="interwiki-uk"><a href="http://uk.wikipedia.org/wiki/%D0%9A%D0%BE%D0%BC%D0%B0%D0%BD%D0%B4%D0%B0_(%D1%88%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD_%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D1%83%D0%B2%D0%B0%D0%BD%D0%BD%D1%8F)">Українська</a></li>
				<li class="interwiki-zh"><a href="http://zh.wikipedia.org/wiki/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F">中文</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 3 April 2009, at 09:07.</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv198 in 0.038 secs. --></body></html>
