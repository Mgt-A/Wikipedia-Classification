<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Polymorphism in object-oriented programming,API,C++,C Sharp (programming language),Circular reference,Data type,Dynamic binding,Generic programming,Inheritance (computer science),Interface (computer science),Java (programming language)" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Polymorphism_in_object-oriented_programming&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Polymorphism_in_object-oriented_programming&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Polymorphism in object-oriented programming - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Polymorphism_in_object-oriented_programming";
		var wgTitle = "Polymorphism in object-oriented programming";
		var wgAction = "view";
		var wgArticleId = "24930";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 287441059;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
<style type="text/css">/*<![CDATA[*/
.source-csharp {line-height: normal;}
.source-csharp li, .source-csharp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for csharp
 * CSS class: source-csharp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-csharp .de1, .source-csharp .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-csharp  {}
.source-csharp .head {}
.source-csharp .foot {}
.source-csharp .imp {font-weight: bold; color: red;}
.source-csharp .ln-xtra {color: #cc0; background-color: #ffc;}
.source-csharp li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-csharp li.li2 {font-weight: bold;}
.source-csharp .kw1 {color: #0600FF;}
.source-csharp .kw2 {color: #FF8000; font-weight: bold;}
.source-csharp .kw3 {color: #008000;}
.source-csharp .kw4 {color: #FF0000;}
.source-csharp .kw5 {color: #000000;}
.source-csharp .co1 {color: #008080; font-style: italic;}
.source-csharp .co2 {color: #008080;}
.source-csharp .coMULTI {color: #008080; font-style: italic;}
.source-csharp .es0 {color: #008080; font-weight: bold;}
.source-csharp .br0 {color: #008000;}
.source-csharp .st0 {color: #808080;}
.source-csharp .nu0 {color: #FF0000;}
.source-csharp .me1 {color: #0000FF;}
.source-csharp .me2 {color: #0000FF;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-java5 {line-height: normal;}
.source-java5 li, .source-java5 pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for java5
 * CSS class: source-java5, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-java5 .de1, .source-java5 .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-java5  {}
.source-java5 .head {}
.source-java5 .foot {}
.source-java5 .imp {font-weight: bold; color: red;}
.source-java5 .ln-xtra {color: #cc0; background-color: #ffc;}
.source-java5 li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-java5 li.li2 {font-weight: bold;}
.source-java5 .kw1 {color: #b1b100;}
.source-java5 .kw2 {color: #000000; font-weight: bold;}
.source-java5 .kw3 {color: #993333;}
.source-java5 .kw4 {color: #b13366;}
.source-java5 .kw5 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw6 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw7 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw8 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw9 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw10 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw11 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw12 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw13 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw14 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw15 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw16 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw17 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw18 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw19 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw20 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw21 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw22 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw23 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw24 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw25 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw26 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw27 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw28 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw29 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw30 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw31 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw32 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw33 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw34 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw35 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw36 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw37 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw38 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw39 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw40 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw41 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw42 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw43 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw44 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw45 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw46 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw47 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw48 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw49 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw50 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw51 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw52 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw53 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw54 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw55 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw56 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw57 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw58 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw59 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw60 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw61 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw62 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw63 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw64 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw65 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw66 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw67 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw68 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw69 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw70 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw71 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw72 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw73 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw74 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw75 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw76 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw77 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw78 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw79 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw80 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw81 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw82 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw83 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw84 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw85 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw86 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw87 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw88 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw89 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw90 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw91 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw92 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw93 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw94 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw95 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw96 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw97 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw98 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw99 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw100 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw101 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw102 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw103 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw104 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw105 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw106 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw107 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw108 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw109 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw110 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw111 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw112 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw113 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw114 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw115 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw116 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw117 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw118 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw119 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw120 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw121 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw122 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw123 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw124 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw125 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw126 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw127 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw128 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw129 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw130 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw131 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw132 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw133 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw134 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw135 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw136 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw137 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw138 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw139 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw140 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw141 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw142 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw143 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw144 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw145 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw146 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw147 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw148 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw149 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw150 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw151 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw152 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw153 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw154 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw155 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw156 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw157 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw158 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw159 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw160 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw161 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw162 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw163 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw164 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw165 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw166 {color: #aaaadd; font-weight: bold;}
.source-java5 .co1 {color: #808080; font-style: italic;}
.source-java5 .coMULTI {color: #808080; font-style: italic;}
.source-java5 .es0 {color: #000099; font-weight: bold;}
.source-java5 .br0 {color: #66cc66;}
.source-java5 .st0 {color: #ff0000;}
.source-java5 .nu0 {color: #cc66cc;}
.source-java5 .me1 {color: #006600;}
.source-java5 .me2 {color: #006600;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-python {line-height: normal;}
.source-python li, .source-python pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for python
 * CSS class: source-python, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-python .de1, .source-python .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-python  {}
.source-python .head {}
.source-python .foot {}
.source-python .imp {font-weight: bold; color: red;}
.source-python .ln-xtra {color: #cc0; background-color: #ffc;}
.source-python li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-python li.li2 {font-weight: bold;}
.source-python .kw1 {color: #ff7700;font-weight:bold;}
.source-python .kw2 {color: #008000;}
.source-python .kw3 {color: #dc143c;}
.source-python .kw4 {color: #0000cd;}
.source-python .co1 {color: #808080; font-style: italic;}
.source-python .coMULTI {color: #808080; font-style: italic;}
.source-python .es0 {color: #000099; font-weight: bold;}
.source-python .br0 {color: #66cc66;}
.source-python .st0 {color: #483d8b;}
.source-python .nu0 {color: #ff4500;}
.source-python .me1 {color: black;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-cpp {line-height: normal;}
.source-cpp li, .source-cpp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for cpp
 * CSS class: source-cpp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-cpp .de1, .source-cpp .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-cpp  {}
.source-cpp .head {}
.source-cpp .foot {}
.source-cpp .imp {font-weight: bold; color: red;}
.source-cpp .ln-xtra {color: #cc0; background-color: #ffc;}
.source-cpp li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-cpp li.li2 {font-weight: bold;}
.source-cpp .kw1 {color: #0000ff;}
.source-cpp .kw2 {color: #0000ff;}
.source-cpp .kw3 {color: #0000dd;}
.source-cpp .kw4 {color: #0000ff;}
.source-cpp .co1 {color: #ff0000;}
.source-cpp .co2 {color: #339900;}
.source-cpp .coMULTI {color: #ff0000; font-style: italic;}
.source-cpp .es0 {color: #666666; font-weight: bold;}
.source-cpp .br0 {color: #000000;}
.source-cpp .st0 {color: #666666;}
.source-cpp .nu0 {color: #0000dd;}
.source-cpp .me1 {color: #00eeff;}
.source-cpp .me2 {color: #00eeff;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-delphi {line-height: normal;}
.source-delphi li, .source-delphi pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for delphi
 * CSS class: source-delphi, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-delphi .de1, .source-delphi .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-delphi  {}
.source-delphi .head {}
.source-delphi .foot {}
.source-delphi .imp {font-weight: bold; color: red;}
.source-delphi .ln-xtra {color: #cc0; background-color: #ffc;}
.source-delphi li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-delphi li.li2 {font-weight: bold;}
.source-delphi .kw1 {color: #000000; font-weight: bold;}
.source-delphi .kw2 {color: #000000; font-weight: bold;}
.source-delphi .kw3 {color: #000066;}
.source-delphi .kw4 {color: #993333;}
.source-delphi .co1 {color: #808080; font-style: italic;}
.source-delphi .coMULTI {color: #808080; font-style: italic;}
.source-delphi .br0 {color: #66cc66;}
.source-delphi .st0 {color: #ff0000;}
.source-delphi .nu0 {color: #cc66cc;}
.source-delphi .me1 {color: #006600;}
.source-delphi .re0 {color: #9ac;}
.source-delphi .re1 {color: #ff0000;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-perl {line-height: normal;}
.source-perl li, .source-perl pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for perl
 * CSS class: source-perl, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-perl .de1, .source-perl .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-perl  {}
.source-perl .head {}
.source-perl .foot {}
.source-perl .imp {font-weight: bold; color: red;}
.source-perl .ln-xtra {color: #cc0; background-color: #ffc;}
.source-perl li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-perl li.li2 {font-weight: bold;}
.source-perl .kw1 {color: #b1b100;}
.source-perl .kw2 {color: #000000; font-weight: bold;}
.source-perl .kw3 {color: #000066;}
.source-perl .co1 {color: #808080; font-style: italic;}
.source-perl .coMULTI {color: #808080; font-style: italic;}
.source-perl .es0 {color: #000099; font-weight: bold;}
.source-perl .br0 {color: #66cc66;}
.source-perl .st0 {color: #ff0000;}
.source-perl .nu0 {color: #cc66cc;}
.source-perl .me1 {color: #006600;}
.source-perl .me2 {color: #006600;}
.source-perl .re0 {color: #0000ff;}
.source-perl .re4 {color: #009999;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-vbnet {line-height: normal;}
.source-vbnet li, .source-vbnet pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for vbnet
 * CSS class: source-vbnet, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-vbnet .de1, .source-vbnet .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-vbnet  {}
.source-vbnet .head {}
.source-vbnet .foot {}
.source-vbnet .imp {font-weight: bold; color: red;}
.source-vbnet .ln-xtra {color: #cc0; background-color: #ffc;}
.source-vbnet li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-vbnet li.li2 {font-weight: bold;}
.source-vbnet .kw1 {color: #0600FF;}
.source-vbnet .kw2 {color: #FF8000;}
.source-vbnet .kw3 {color: #008000;}
.source-vbnet .kw4 {color: #FF0000;}
.source-vbnet .kw5 {color: #804040;}
.source-vbnet .kw6 {color: #0600FF;}
.source-vbnet .kw7 {color: #0600FF;}
.source-vbnet .kw8 {color: #0600FF;}
.source-vbnet .co1 {color: #008080; font-style: italic;}
.source-vbnet .coMULTI {color: #008080; font-style: italic;}
.source-vbnet .es0 {color: #008080; font-weight: bold;}
.source-vbnet .br0 {color: #008000;}
.source-vbnet .st0 {color: #808080;}
.source-vbnet .nu0 {color: #FF0000;}
.source-vbnet .me1 {color: #0000FF;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-visualfoxpro {line-height: normal;}
.source-visualfoxpro li, .source-visualfoxpro pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for visualfoxpro
 * CSS class: source-visualfoxpro, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-visualfoxpro .de1, .source-visualfoxpro .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-visualfoxpro  {}
.source-visualfoxpro .head {}
.source-visualfoxpro .foot {}
.source-visualfoxpro .imp {font-weight: bold; color: red;}
.source-visualfoxpro .ln-xtra {color: #cc0; background-color: #ffc;}
.source-visualfoxpro li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-visualfoxpro li.li2 {font-weight: bold;}
.source-visualfoxpro .kw1 {color: blue;}
.source-visualfoxpro .kw2 {color: blue;}
.source-visualfoxpro .kw3 {color: blue;}
.source-visualfoxpro .kw4 {color: blue;}
.source-visualfoxpro .co1 {color: green; font-style: italic;}
.source-visualfoxpro .co2 {color: green font-style: italic;}
.source-visualfoxpro .coMULTI {color: #808080; font-style: italic;}
.source-visualfoxpro .es0 {color: #000099; font-weight: bold;}
.source-visualfoxpro .br0 {color: blue;}
.source-visualfoxpro .st0 {color: #ff0000;}
.source-visualfoxpro .nu0 {color: #cc66cc;}
.source-visualfoxpro .me1 {color: #006600;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-ruby {line-height: normal;}
.source-ruby li, .source-ruby pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for ruby
 * CSS class: source-ruby, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-ruby .de1, .source-ruby .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-ruby  {}
.source-ruby .head {}
.source-ruby .foot {}
.source-ruby .imp {font-weight: bold; color: red;}
.source-ruby .ln-xtra {color: #cc0; background-color: #ffc;}
.source-ruby li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-ruby li.li2 {font-weight: bold;}
.source-ruby .kw1 {color:#9966CC; font-weight:bold;}
.source-ruby .kw2 {color:#0000FF; font-weight:bold;}
.source-ruby .kw3 {color:#CC0066; font-weight:bold;}
.source-ruby .kw4 {color:#CC00FF; font-weight:bold;}
.source-ruby .co1 {color:#008000; font-style:italic;}
.source-ruby .coMULTI {color:#000080; font-style:italic;}
.source-ruby .es0 {color:#000099;}
.source-ruby .br0 {color:#006600; font-weight:bold;}
.source-ruby .st0 {color:#996600;}
.source-ruby .nu0 {color:#006666;}
.source-ruby .me1 {color:#9900CC;}
.source-ruby .sc0 {}
.source-ruby .sc1 {}
.source-ruby .sc2 {}
.source-ruby .re0 {color:#ff6633; font-weight:bold;}
.source-ruby .re1 {color:#0066ff; font-weight:bold;}
.source-ruby .re2 {color:#6666ff; font-weight:bold;}
.source-ruby .re3 {color:#ff3333; font-weight:bold;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style>		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Polymorphism_in_object-oriented_programming skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Polymorphism in object-oriented programming</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<p>In simple terms, polymorphism is the ability of one type, A, to appear as and be used like another type, B. In strongly typed languages, this usually means that type A somehow derives from type B, or type A implements an interface that represents type B.</p>
<p>In weakly typed languages types are implicitly polymorphic.</p>
<p><a href="/wiki/Operator_overloading" title="Operator overloading">Operator Overloading</a> the numerical operators +, -, /, * allow polymorphic treatment of the various numerical types: integer, unsigned integer, float, decimal, etc; each of which have different ranges, bit patterns, and representations. Another common example is the use of the "+" operator which allows similar or polymorphic treatment of numbers (addition), strings (concatenation), and lists (attachment). This is a lesser used feature of polymorphism.</p>
<p>The primary usage of polymorphism in industry (<a href="/wiki/Object-oriented_programming" title="Object-oriented programming">object-oriented programming</a> theory) is the ability of <a href="/wiki/Object_(computer_science)" title="Object (computer science)">objects</a> belonging to different <a href="/wiki/Data_type" title="Data type">types</a> to respond to <a href="/wiki/Method_(computer_science)" title="Method (computer science)">method</a>, field, or property calls of the same name, each one according to an appropriate type-specific behavior. The programmer (and the program) does not have to know the exact type of the object in advance, and so the exact behavior is determined at run time (this is called <i>late binding</i> or <i><a href="/wiki/Dynamic_binding" title="Dynamic binding">dynamic binding</a></i>).</p>
<p>The different objects involved only need to present a compatible <a href="/wiki/Interface_(computer_science)" title="Interface (computer science)">interface</a> to the clients (<a href="/wiki/Subroutine" title="Subroutine">the calling routines</a>). That is, there must be public or internal methods, fields, events, and properties with the same name and the same <a href="/wiki/Parameter_(computer_science)" title="Parameter (computer science)">parameter sets</a> in all the superclasses, subclasses, and potentially interfaces. In principle, the object types may be unrelated, but since they share a common interface, they are often implemented as <a href="/wiki/Subclass_(computer_science)" title="Subclass (computer science)">subclasses</a> of the same <a href="/wiki/Superclass_(computer_science)" title="Superclass (computer science)">superclass</a>. Though it is not required, it is understood that the different methods will also produce similar results (for example, returning values of the same type).</p>
<p>Polymorphism is not the same as method overloading or method overriding. <sup id="cite_ref-0" class="reference"><a href="#cite_note-0" title=""><span>[</span>1<span>]</span></a></sup> Polymorphism is only concerned with the application of specific implementations to an interface or a more generic base class. Method overloading refers to methods that have the same name but different signatures inside the same class. Method overriding is where a subclass replaces the implementation of one or more of its parent's methods. Neither method overloading nor method overriding are by themselves implementations of polymorphism. <sup id="cite_ref-1" class="reference"><a href="#cite_note-1" title=""><span>[</span>2<span>]</span></a></sup></p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Inheritance_with_Polymorphism"><span class="tocnumber">1</span> <span class="toctext">Inheritance with Polymorphism</span></a></li>
<li class="toclevel-1"><a href="#Examples"><span class="tocnumber">2</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2"><a href="#C.23"><span class="tocnumber">2.1</span> <span class="toctext">C#</span></a></li>
<li class="toclevel-2"><a href="#Java"><span class="tocnumber">2.2</span> <span class="toctext">Java</span></a></li>
<li class="toclevel-2"><a href="#Python"><span class="tocnumber">2.3</span> <span class="toctext">Python</span></a></li>
<li class="toclevel-2"><a href="#C.2B.2B"><span class="tocnumber">2.4</span> <span class="toctext">C++</span></a></li>
<li class="toclevel-2"><a href="#Delphi"><span class="tocnumber">2.5</span> <span class="toctext">Delphi</span></a></li>
<li class="toclevel-2"><a href="#Perl"><span class="tocnumber">2.6</span> <span class="toctext">Perl</span></a></li>
<li class="toclevel-2"><a href="#Visual_Basic_.NET"><span class="tocnumber">2.7</span> <span class="toctext">Visual Basic .NET</span></a></li>
<li class="toclevel-2"><a href="#Xbase.2B.2B"><span class="tocnumber">2.8</span> <span class="toctext">Xbase++</span></a></li>
<li class="toclevel-2"><a href="#Ruby"><span class="tocnumber">2.9</span> <span class="toctext">Ruby</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Parametric_Polymorphism"><span class="tocnumber">3</span> <span class="toctext">Parametric Polymorphism</span></a></li>
<li class="toclevel-1"><a href="#Mitigating_circular_dependency_references_using_polymorphism_in_C.23"><span class="tocnumber">4</span> <span class="toctext">Mitigating circular dependency references using polymorphism in C#</span></a></li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">5</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">6</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">7</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Inheritance_with_Polymorphism" id="Inheritance_with_Polymorphism"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Polymorphism_in_object-oriented_programming&amp;action=edit&amp;section=1" title="Edit section: Inheritance with Polymorphism">edit</a>]</span> <span class="mw-headline">Inheritance with Polymorphism</span></h2>
<p>If a Dog is commanded to speak(), it may emit a bark, while if a Pig is asked to speak(), it may respond with an oink. Both inherit speak() from Animal, but their subclass methods override the methods of the superclass, known as overriding polymorphism. Adding a walk method to Animal would give both Pig and Dog object's the same walk method.<br />
<br />
Inheritance combined with polymorphism allows class B to inherit from class A without having to retain all features of class A; it can do some of the things that class A does differently. This means that the same "verb" can result in different actions as appropriate for a specific class. Calling code can issue the same command to their superclass or interface and get appropriately different results from each one.</p>
<p><a name="Examples" id="Examples"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Polymorphism_in_object-oriented_programming&amp;action=edit&amp;section=2" title="Edit section: Examples">edit</a>]</span> <span class="mw-headline">Examples</span></h2>
<p><a name="C.23" id="C.23"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Polymorphism_in_object-oriented_programming&amp;action=edit&amp;section=3" title="Edit section: C#">edit</a>]</span> <span class="mw-headline">C#</span></h3>
<p>The ideal implementation of polymorphism in C# is to use interfaces stored in a common class <a href="/wiki/API" title="API" class="mw-redirect">API</a> which has no user code dependencies.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-csharp">
<span class="co1">// Assembly: Common Classes</span>
<span class="co1">// Namespace: CommonClasses</span>
 
<span class="kw1">using</span> <span class="kw5">System</span>;
 
<span class="kw1">namespace</span> CommonClasses
<span class="br0">{</span>
    <span class="kw1">public</span> <span class="kw4">interface</span> IAnimal
    <span class="br0">{</span>
        <span class="kw4">string</span> Name
        <span class="br0">{</span>
            get;
        <span class="br0">}</span>
        <span class="kw4">string</span> Talk<span class="br0">(</span><span class="br0">)</span>;
    <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="co1">// Assembly: Animals</span>
<span class="co1">// Namespace: Animals</span>
 
<span class="kw1">public</span> <span class="kw4">class</span> AnimalBase
<span class="br0">{</span>
    <span class="kw1">private</span> <span class="kw4">string</span> _name;
    AnimalBase<span class="br0">(</span><span class="kw4">string</span> name<span class="br0">)</span>
    <span class="br0">{</span>
       _name = name;
    <span class="br0">}</span>
    <span class="kw1">public</span> <span class="kw4">string</span> Name
    <span class="br0">{</span>
       get
       <span class="br0">{</span>
          <span class="kw1">return</span> _name;
       <span class="br0">}</span>
    <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="co1">// Assembly: Animals</span>
<span class="co1">// Namespace: Animals</span>
 
<span class="kw1">using</span> <span class="kw5">System</span>;
<span class="kw1">using</span> CommonClasses;
 
<span class="kw1">namespace</span> Animals
<span class="br0">{</span>
    <span class="kw1">public</span> abstract <span class="kw4">class</span> AnimalBase
    <span class="br0">{</span>
        <span class="kw1">private</span> <span class="kw4">string</span> _name;
        <span class="kw1">protected</span> AnimalBase<span class="br0">(</span><span class="kw4">string</span> name<span class="br0">)</span>
        <span class="br0">{</span>
            _name = name;
        <span class="br0">}</span>
 
        <span class="kw1">public</span> <span class="kw4">string</span> Name
        <span class="br0">{</span>
            get
            <span class="br0">{</span>
                <span class="kw1">return</span> _name;
            <span class="br0">}</span>
        <span class="br0">}</span>
    <span class="br0">}</span>
    <span class="kw1">public</span> <span class="kw4">class</span> Cat : AnimalBase, IAnimal
    <span class="br0">{</span>
        <span class="kw1">public</span> Cat<span class="br0">(</span><span class="kw4">String</span> name<span class="br0">)</span> :
            <span class="kw1">base</span><span class="br0">(</span>name<span class="br0">)</span>
        <span class="br0">{</span>
        <span class="br0">}</span>
 
        <span class="kw1">public</span> <span class="kw4">string</span> Talk<span class="br0">(</span><span class="br0">)</span>
        <span class="br0">{</span>
            <span class="kw1">return</span> <span class="st0">"Meowww!"</span>;
        <span class="br0">}</span>
    <span class="br0">}</span>
    <span class="kw1">public</span> <span class="kw4">class</span> Dog : AnimalBase, IAnimal
    <span class="br0">{</span>
        <span class="kw1">public</span> Dog<span class="br0">(</span><span class="kw4">string</span> name<span class="br0">)</span> :
            <span class="kw1">base</span><span class="br0">(</span>name<span class="br0">)</span>
        <span class="br0">{</span>
        <span class="br0">}</span>
 
        <span class="kw1">public</span> <span class="kw4">string</span> Talk<span class="br0">(</span><span class="br0">)</span>
        <span class="br0">{</span>
            <span class="kw1">return</span> <span class="st0">"Arf! Arf!"</span>;
        <span class="br0">}</span>
    <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="co1">// Assembly: Program</span>
<span class="co1">// Namespace: Program</span>
<span class="co1">// References and Uses Assemblies: Common Classes, Animals</span>
 
<span class="kw1">using</span> <span class="kw5">System</span>;
<span class="kw1">using</span> <span class="kw5">System</span>.<span class="me1">Collections</span>.<span class="me1">Generic</span>;
<span class="kw1">using</span> CommonClasses;
<span class="kw1">using</span> Animals;
 
<span class="kw1">namespace</span> TestWikepediaPolymorphismInOOP
<span class="br0">{</span>
    <span class="kw1">public</span> <span class="kw4">class</span> TestAnimals
    <span class="br0">{</span>
        <span class="co1">// prints the following:</span>
        <span class="co1">//</span>
        <span class="co1">// Missy: Meowww!</span>
        <span class="co1">// Mr. Bojangles: Meowww!</span>
        <span class="co1">// Lassie: Arf! Arf!</span>
        <span class="co1">//</span>
        <span class="kw1">public</span> <span class="kw1">static</span> <span class="kw1">void</span> Main<span class="br0">(</span><span class="kw4">String</span><span class="br0">[</span><span class="br0">]</span> args<span class="br0">)</span>
        <span class="br0">{</span>
            List&lt;IAnimal&gt; animals = <span class="kw3">new</span> List&lt;IAnimal&gt;<span class="br0">(</span><span class="br0">)</span>;
            animals.<span class="me1">Add</span><span class="br0">(</span><span class="kw3">new</span> Cat<span class="br0">(</span><span class="st0">"Missy"</span><span class="br0">)</span><span class="br0">)</span>;
            animals.<span class="me1">Add</span><span class="br0">(</span><span class="kw3">new</span> Cat<span class="br0">(</span><span class="st0">"Mr. Bojangles"</span><span class="br0">)</span><span class="br0">)</span>;
            animals.<span class="me1">Add</span><span class="br0">(</span><span class="kw3">new</span> Dog<span class="br0">(</span><span class="st0">"Lassie"</span><span class="br0">)</span><span class="br0">)</span>;
 
            <span class="kw1">foreach</span> <span class="br0">(</span>IAnimal animal <span class="kw1">in</span> animals<span class="br0">)</span>
            <span class="br0">{</span>
                Console.<span class="me1">WriteLine</span><span class="br0">(</span>animal.<span class="me1">Name</span> + <span class="st0">": "</span> + animal.<span class="me1">Talk</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>;
            <span class="br0">}</span>
        <span class="br0">}</span>
    <span class="br0">}</span>
<span class="br0">}</span>
</pre></div>
<p>The reason this is ideal is because then objects can be used in any assembly, regardless of any <a href="/wiki/Circular_reference" title="Circular reference">circular reference</a> issues present. This design is similar to the <a href="/wiki/Strategy_pattern" title="Strategy pattern">Strategy Design Pattern</a>, which usually has read/write properties of type interface. This example has a read only property of type interface with the only way to set the strategy interface being via the constructor. Implementing a base class is not required but is typically useful for code reuse through inheritance.</p>
<p>This example also uses <a href="/wiki/Generic_programming" title="Generic programming">generics</a>, which enable many things, including compile time type safety for collections, and no boxing, unboxing, or casting performance penalties in C#. Combining interfaces, design patterns, and generics creates very flexible, extensible, readable, maintainable, high performance designs. <sup id="cite_ref-2" class="reference"><a href="#cite_note-2" title=""><span>[</span>3<span>]</span></a></sup></p>
<p><a name="Java" id="Java"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Polymorphism_in_object-oriented_programming&amp;action=edit&amp;section=4" title="Edit section: Java">edit</a>]</span> <span class="mw-headline">Java</span></h3>
<div dir="ltr" style="text-align: left;">
<pre class="source-java5">
<span class="kw2">interface</span> Animal 
<span class="br0">{</span>
    <span class="kw21">String</span> getName<span class="br0">(</span><span class="br0">)</span>;
    <span class="kw21">String</span> talk<span class="br0">(</span><span class="br0">)</span>;
<span class="br0">}</span>
 
<span class="kw2">abstract</span> <span class="kw2">class</span> AnimalBase <span class="kw2">implements</span> Animal
<span class="br0">{</span>
    <span class="kw2">private</span> <span class="kw2">final</span> <span class="kw21">String</span> name;
 
    <span class="kw2">protected</span> AnimalBase<span class="br0">(</span><span class="kw21">String</span> name<span class="br0">)</span> <span class="br0">{</span>
        <span class="kw2">this</span>.<span class="me1">name</span> = name;
    <span class="br0">}</span>
 
    <span class="kw2">public</span> <span class="kw21">String</span> getName<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
        <span class="kw2">return</span> name;
    <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="kw2">class</span> Cat <span class="kw2">extends</span> AnimalBase 
<span class="br0">{</span>
    <span class="kw2">public</span> Cat<span class="br0">(</span><span class="kw21">String</span> name<span class="br0">)</span> <span class="br0">{</span>
        <span class="kw2">super</span><span class="br0">(</span>name<span class="br0">)</span>;
    <span class="br0">}</span>
 
    <span class="kw2">public</span> <span class="kw21">String</span> talk<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
        <span class="kw2">return</span> <span class="st0">"Meowww!"</span>;
    <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="kw2">class</span> Dog <span class="kw2">extends</span> AnimalBase 
<span class="br0">{</span>
    <span class="kw2">public</span> Dog<span class="br0">(</span><span class="kw21">String</span> name<span class="br0">)</span> <span class="br0">{</span>
        <span class="kw2">super</span><span class="br0">(</span>name<span class="br0">)</span>;
    <span class="br0">}</span>
 
    <span class="kw2">public</span> <span class="kw21">String</span> talk<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
        <span class="kw2">return</span> <span class="st0">"Arf! Arf!"</span>;
    <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="kw2">public</span> <span class="kw2">class</span> TestAnimals
<span class="br0">{</span>
    <span class="co1">// prints the following:</span>
    <span class="co1">//</span>
    <span class="co1">// Missy: Meowww!</span>
    <span class="co1">// Mr. Bojangles: Meowww!</span>
    <span class="co1">// Lassie: Arf! Arf!</span>
    <span class="co1">//</span>
    <span class="kw2">public</span> <span class="kw2">static</span> <span class="kw3">void</span> main<span class="br0">(</span><span class="kw21">String</span><span class="br0">[</span><span class="br0">]</span> args<span class="br0">)</span> <span class="br0">{</span>
        Animal<span class="br0">[</span><span class="br0">]</span> animals = <span class="br0">{</span>
            <span class="kw2">new</span> Cat<span class="br0">(</span><span class="st0">"Missy"</span><span class="br0">)</span>,
            <span class="kw2">new</span> Cat<span class="br0">(</span><span class="st0">"Mr. Bojangles"</span><span class="br0">)</span>,
            <span class="kw2">new</span> Dog<span class="br0">(</span><span class="st0">"Lassie"</span><span class="br0">)</span>
        <span class="br0">}</span>;
 
        <span class="kw1">for</span> <span class="br0">(</span>Animal a : animals<span class="br0">)</span> <span class="br0">{</span>
            <span class="kw21">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span>a.<span class="me1">getName</span><span class="br0">(</span><span class="br0">)</span> + <span class="st0">": "</span> + a.<span class="me1">talk</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>;
        <span class="br0">}</span>
    <span class="br0">}</span>
<span class="br0">}</span>
</pre></div>
<p><a name="Python" id="Python"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Polymorphism_in_object-oriented_programming&amp;action=edit&amp;section=5" title="Edit section: Python">edit</a>]</span> <span class="mw-headline">Python</span></h3>
<div dir="ltr" style="text-align: left;">
<pre class="source-python">
myString = <span class="st0">'Hello, world!'</span>
myList = <span class="br0">[</span><span class="nu0">0</span>, <span class="st0">'one'</span>, <span class="nu0">1</span>, <span class="st0">'two'</span>, <span class="nu0">3</span>, <span class="st0">'five'</span>, <span class="nu0">8</span><span class="br0">]</span>
 
<span class="kw1">print</span> myString<span class="br0">[</span>:<span class="nu0">5</span><span class="br0">]</span>  <span class="co1"># prints Hello</span>
<span class="kw1">print</span> myList<span class="br0">[</span>:<span class="nu0">5</span><span class="br0">]</span>    <span class="co1"># prints [0, 'one', 1, 'two', 3]</span>
 
<span class="kw1">print</span> <span class="st0">'e'</span> <span class="kw1">in</span> myString   <span class="co1"># prints True</span>
<span class="kw1">print</span> <span class="nu0">5</span> <span class="kw1">in</span> myList       <span class="co1"># prints False</span>
</pre></div>
<p>However, the most common examples of polymorphism are found in custom classes. Consider the example below, where two subclasses (Cat and Dog) are derived from an Animal superclass. Two Cat objects and one Dog are instantiated and given names, and then they are gathered in an array "animals" and their "talk" method is called.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-python">
<span class="kw1">class</span> Animal:
    <span class="kw1">def</span> <span class="kw4">__init__</span><span class="br0">(</span><span class="kw2">self</span>, name<span class="br0">)</span>:    <span class="co1"># Constructor of the class</span>
        <span class="kw2">self</span>.<span class="me1">name</span> = name
 
<span class="kw1">class</span> Cat<span class="br0">(</span>Animal<span class="br0">)</span>:
    <span class="kw1">def</span> talk<span class="br0">(</span><span class="kw2">self</span><span class="br0">)</span>:
        <span class="kw1">return</span> <span class="st0">'Meow!'</span>
 
<span class="kw1">class</span> Dog<span class="br0">(</span>Animal<span class="br0">)</span>:
    <span class="kw1">def</span> talk<span class="br0">(</span><span class="kw2">self</span><span class="br0">)</span>:
        <span class="kw1">return</span> <span class="st0">'Woof! Woof!'</span>
 
animals = <span class="br0">[</span>Cat<span class="br0">(</span><span class="st0">'Missy'</span><span class="br0">)</span>, 
           Cat<span class="br0">(</span><span class="st0">'Mr. Bojangles'</span><span class="br0">)</span>, 
           Dog<span class="br0">(</span><span class="st0">'Lassie'</span><span class="br0">)</span><span class="br0">]</span>
 
<span class="kw1">for</span> animal <span class="kw1">in</span> animals:
    <span class="kw1">print</span> animal.<span class="me1">name</span> + <span class="st0">': '</span> + animal.<span class="me1">talk</span><span class="br0">(</span><span class="br0">)</span>
 
<span class="co1"># prints the following:</span>
<span class="co1">#</span>
<span class="co1"># Missy: Meow!</span>
<span class="co1"># Mr. Bojangles: Meow!</span>
<span class="co1"># Lassie: Woof! Woof!</span>
</pre></div>
<p>Note that Python makes polymorphism particularly easy to write, since the language is dynamically (and implicitly) typed: a name can be bound to objects of any type (or class) without having to explicitly specify the type, and a list holds mixed type (unlike a C array or a Java array, be it generic or not). Note the inevitable trade-off though: a language that generates fewer compile-time errors tends to generate more run-time errors, requiring explicit (unit) <a href="/wiki/Unit_testing" title="Unit testing">testing</a>.</p>
<p>Dynamic language performance is hindered by the extra checks and searches that occur at each call site. Straightforward implementations have to repeatedly search class precedence lists for members and potentially resolve overloads on method argument types each time you execute a particular line of code. In an expression such as o.m(x, y) or x + y, dynamic languages need to check exactly what kind of object o is, what is m bound to for o, what type x is, what type y is, or what "+" means for the actual runtime type of x and y. In a statically typed language (or with enough type hints in the code and type inferencing), you can emit exactly the instructions or runtime function calls that are appropriate at each call site. You can do this because you know from the static types what is needed at compile time.</p>
<p>Dynamic languages provide great productivity enhancements and powerful terse expressions due to their dynamic capabilities. However, in practice code tends to execute on the same types of objects each time. This means you can improve performance by remembering the results of method searches the first time a section of code executes. For example, with x + y, if x and y are integers the first time that expression executes, we can remember a code sequence or exactly what runtime function performs addition given two integers. Then each time that expression executes, there is no search involved. The code just checks that x and y are integers again, and dispatches to the right code with no searching. The result can literally be reduced to inlined code generation with a couple of type checks and an add instruction, depending on the semantics of an operation and method caching mechanisms used. <sup id="cite_ref-3" class="reference"><a href="#cite_note-3" title=""><span>[</span>4<span>]</span></a></sup></p>
<p><a name="C.2B.2B" id="C.2B.2B"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Polymorphism_in_object-oriented_programming&amp;action=edit&amp;section=6" title="Edit section: C++">edit</a>]</span> <span class="mw-headline">C++</span></h3>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
<span class="co2">#include &lt;iostream&gt;</span>
<span class="co2">#include &lt;string&gt;</span>
 
<span class="kw2">using</span> <span class="kw2">namespace</span> std;
 
<span class="kw2">class</span> Animal
<span class="br0">{</span>
	<span class="kw2">public</span>:
	Animal<span class="br0">(</span><span class="kw4">const</span> string&amp; name<span class="br0">)</span> : name<span class="br0">(</span>name<span class="br0">)</span> <span class="br0">{</span> <span class="br0">}</span>
	<span class="kw2">virtual</span> <span class="kw4">const</span> string talk<span class="br0">(</span><span class="br0">)</span> = <span class="nu0">0</span>;
	<span class="kw4">const</span> string name;
<span class="br0">}</span>;
 
<span class="kw2">class</span> Cat : <span class="kw2">public</span> Animal
<span class="br0">{</span>
	<span class="kw2">public</span>:
	Cat<span class="br0">(</span><span class="kw4">const</span> string&amp; name<span class="br0">)</span> : Animal<span class="br0">(</span>name<span class="br0">)</span> <span class="br0">{</span> <span class="br0">}</span>
	<span class="kw2">virtual</span> <span class="kw4">const</span> string talk<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> <span class="kw1">return</span> <span class="st0">"Meow!"</span>; <span class="br0">}</span>
<span class="br0">}</span>;
 
<span class="kw2">class</span> Dog : <span class="kw2">public</span> Animal
<span class="br0">{</span>
	<span class="kw2">public</span>:
	Dog<span class="br0">(</span><span class="kw4">const</span> string&amp; name<span class="br0">)</span> : Animal<span class="br0">(</span>name<span class="br0">)</span> <span class="br0">{</span> <span class="br0">}</span>
	<span class="kw2">virtual</span> <span class="kw4">const</span> string talk<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> <span class="kw1">return</span> <span class="st0">"Arf! Arf"</span>; <span class="br0">}</span>
<span class="br0">}</span>;
 
<span class="co1">// prints the following:</span>
<span class="co1">//</span>
<span class="co1">// Missy: Meow!</span>
<span class="co1">// Mr. Bojangles: Meow!</span>
<span class="co1">// Lassie: Arf! Arf!</span>
<span class="co1">//</span>
<span class="kw4">int</span> main<span class="br0">(</span><span class="br0">)</span>
<span class="br0">{</span>
	Animal* animals<span class="br0">[</span><span class="br0">]</span> =
	<span class="br0">{</span>
		<span class="kw3">new</span> Cat<span class="br0">(</span><span class="st0">"Missy"</span><span class="br0">)</span>,
		<span class="kw3">new</span> Cat<span class="br0">(</span><span class="st0">"Mr. Bojangles"</span><span class="br0">)</span>,
		<span class="kw3">new</span> Dog<span class="br0">(</span><span class="st0">"Lassie"</span><span class="br0">)</span>
	<span class="br0">}</span>;
 
	<span class="kw1">for</span><span class="br0">(</span><span class="kw4">int</span> i = <span class="nu0">0</span>; i &lt; <span class="nu0">3</span>; i++<span class="br0">)</span>
		<span class="kw3">cout</span> &lt;&lt; animals<span class="br0">[</span>i<span class="br0">]</span>-&gt;name &lt;&lt; <span class="st0">": "</span> &lt;&lt; animals<span class="br0">[</span>i<span class="br0">]</span>-&gt;talk<span class="br0">(</span><span class="br0">)</span> &lt;&lt; endl;
 
	<span class="kw1">return</span> <span class="nu0">0</span>;
<span class="br0">}</span>
</pre></div>
<p>Note that the <code>talk()</code> method is explicitly declared as <code>virtual</code>. This is because polymorphic method calls have relatively high overhead in C++ <sup id="cite_ref-4" class="reference"><a href="#cite_note-4" title=""><span>[</span>5<span>]</span></a></sup>. This overhead is lessened by treating all method calls as non-polymorphic, unless explicitly marked as <code>virtual</code> by the developer.</p>
<p><a name="Delphi" id="Delphi"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Polymorphism_in_object-oriented_programming&amp;action=edit&amp;section=7" title="Edit section: Delphi">edit</a>]</span> <span class="mw-headline">Delphi</span></h3>
<div dir="ltr" style="text-align: left;">
<pre class="source-delphi">
<span class="kw1">unit</span> polymorphism;
 
<span class="kw1">interface</span>
 
<span class="kw1">type</span>
  IAnimal = <span class="kw1">interface</span>
    <span class="kw1">property</span> Name : <span class="kw4">string</span> <span class="kw3">read</span>; 
    <span class="kw1">function</span> Talk : <span class="kw4">string</span>;
  <span class="kw1">end</span>;
 
  TAnimalBase = <span class="kw1">class</span><span class="br0">(</span> <span class="kw4">TObject</span> <span class="br0">)</span>
  <span class="kw1">private</span>
    fName : <span class="kw4">string</span>
  <span class="kw1">public</span>
    <span class="kw1">property</span> Name : <span class="kw4">string</span> <span class="kw3">read</span> fName;
    <span class="kw1">constructor</span> Create<span class="br0">(</span> aName : <span class="kw4">string</span> <span class="br0">)</span>; <span class="kw1">virtual</span>; 
  <span class="kw1">end</span>;
 
  TCat = <span class="kw1">class</span><span class="br0">(</span> TAnimalBase, IAnimal <span class="br0">)</span>
  <span class="kw1">public</span>
    <span class="kw1">function</span> Talk : <span class="kw4">string</span>;
  <span class="kw1">end</span>;
 
  TDog = <span class="kw1">class</span><span class="br0">(</span> TAnimalBase, IAnimal <span class="br0">)</span>
  <span class="kw1">public</span>
    <span class="kw1">function</span> Talk : <span class="kw4">string</span>;
  <span class="kw1">end</span>;
 
<span class="kw1">implementation</span>
 
<span class="kw1">constructor</span> TAnimalBase.<span class="me1">Create</span><span class="br0">(</span> aName : <span class="kw4">string</span> <span class="br0">)</span>;
<span class="kw1">begin</span>
  fName := aName;
<span class="kw1">end</span>; 
 
<span class="kw1">function</span> TCat.<span class="me1">Talk</span> : <span class="kw4">string</span>;
<span class="kw1">begin</span>
  result := <span class="st0">'Meowww!'</span>;
<span class="kw1">end</span>;
 
<span class="kw1">function</span> TDog.<span class="me1">Talk</span> : <span class="kw4">string</span>;
<span class="kw1">begin</span>
  result := <span class="st0">'Arf! Arf!'</span>;
<span class="kw1">end</span>;
 
<span class="kw1">end</span>.
</pre></div>
<p><a name="Perl" id="Perl"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Polymorphism_in_object-oriented_programming&amp;action=edit&amp;section=8" title="Edit section: Perl">edit</a>]</span> <span class="mw-headline">Perl</span></h3>
<p>Polymorphism in <a href="/wiki/Perl_(programming_language)" title="Perl (programming language)" class="mw-redirect">Perl</a> is inherently straightforward to write because of the languages use of <a href="/wiki/Sigil_(computer_programming)" title="Sigil (computer programming)">sigils</a> and <a href="/wiki/Reference_(computer_science)" title="Reference (computer science)">references</a>. This is the Animal example in standard OO Perl...</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-perl">
<span class="br0">{</span>
    <span class="kw3">package</span> Animal;
    <span class="kw2">sub</span> <span class="kw2">new</span> <span class="br0">{</span>
        <span class="kw1">my</span> <span class="br0">(</span> <span class="re0">$class</span>, <span class="re0">$name</span> <span class="br0">)</span> = <span class="re0">@_</span>;
        <span class="kw3">bless</span> <span class="br0">{</span> name =&gt; <span class="re0">$name</span> <span class="br0">}</span>, <span class="re0">$class</span>;
    <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="br0">{</span>
    <span class="kw3">package</span> Cat;
    <span class="kw2">use</span> base <span class="kw3">qw</span><span class="br0">(</span>Animal<span class="br0">)</span>;
    <span class="kw2">sub</span> talk  <span class="br0">{</span> <span class="st0">'Meow'</span> <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="br0">{</span>
    <span class="kw3">package</span> Dog;
    <span class="kw2">use</span> base <span class="kw3">qw</span><span class="br0">(</span>Animal<span class="br0">)</span>;
    <span class="kw2">sub</span> talk  <span class="br0">{</span> <span class="st0">'Woof! Woof!'</span> <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="kw1">my</span> <span class="re0">$a</span> = Cat-&gt;<span class="me1">new</span><span class="br0">(</span><span class="st0">'Missy'</span><span class="br0">)</span>;
<span class="kw1">my</span> <span class="re0">$b</span> = Cat-&gt;<span class="me1">new</span><span class="br0">(</span><span class="st0">'Mr. Bojangles'</span><span class="br0">)</span>;
<span class="kw1">my</span> <span class="re0">$c</span> = Dog-&gt;<span class="me1">new</span><span class="br0">(</span><span class="st0">'Lassie'</span><span class="br0">)</span>;
 
<span class="kw1">for</span> <span class="kw1">my</span> <span class="re0">$animal</span> <span class="br0">(</span> <span class="re0">$a</span>, <span class="re0">$b</span>, <span class="re0">$c</span> <span class="br0">)</span> <span class="br0">{</span>
    say <span class="re0">$animal</span>-&gt;<span class="br0">{</span>name<span class="br0">}</span> . <span class="st0">': '</span> . <span class="re0">$animal</span>-&gt;<span class="me1">talk</span>;
<span class="br0">}</span>
 
<span class="co1"># prints the following:</span>
<span class="co1">#</span>
<span class="co1"># Missy: Meow</span>
<span class="co1"># Mr. Bojangles: Meow</span>
<span class="co1"># Lassie: Woof! Woof!</span>
</pre></div>
<p>This means that <a href="/wiki/Perl_(programming_language)" title="Perl (programming language)" class="mw-redirect">Perl</a> can also apply Polymorphism to the method call. Example below is written using the Moose module to show modern OO practises in Perl (and is not needed for method Polymorphism).....</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-perl">
<span class="br0">{</span>
    <span class="kw3">package</span> Animal;
    <span class="kw2">use</span> Moose;
    has <span class="st0">'name'</span> =&gt; <span class="br0">(</span> isa =&gt; <span class="st0">'Str'</span>, is =&gt; <span class="st0">'ro'</span> <span class="br0">)</span>;
<span class="br0">}</span>
 
<span class="br0">{</span>
    <span class="kw3">package</span> Cat;
    <span class="kw2">use</span> Moose;
    extends <span class="st0">'Animal'</span>;
    <span class="kw2">sub</span> talk  <span class="br0">{</span> <span class="st0">'Meow'</span> <span class="br0">}</span>
    <span class="kw2">sub</span> likes <span class="br0">{</span> <span class="st0">'Milk'</span> <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="br0">{</span>
    <span class="kw3">package</span> Dog;
    <span class="kw2">use</span> Moose;
    extends <span class="st0">'Animal'</span>;
    <span class="kw2">sub</span> talk  <span class="br0">{</span> <span class="st0">'Woof! Woof!'</span> <span class="br0">}</span>
    <span class="kw2">sub</span> likes <span class="br0">{</span> <span class="st0">'Bone'</span> <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="kw1">my</span> <span class="re0">@animals</span> = <span class="br0">(</span>
    Cat-&gt;<span class="me1">new</span><span class="br0">(</span> name =&gt; <span class="st0">'Missy'</span> <span class="br0">)</span>,
    Cat-&gt;<span class="me1">new</span><span class="br0">(</span> name =&gt; <span class="st0">'Mr. Bojangles'</span> <span class="br0">)</span>,
    Dog-&gt;<span class="me1">new</span><span class="br0">(</span> name =&gt; <span class="st0">'Lassie'</span> <span class="br0">)</span>,
<span class="br0">)</span>;
 
<span class="kw1">for</span> <span class="kw1">my</span> <span class="re0">$animal</span> <span class="br0">(</span> <span class="re0">@animals</span> <span class="br0">)</span> <span class="br0">{</span>
    <span class="kw1">for</span> <span class="kw1">my</span> <span class="re0">$trait</span> <span class="kw3">qw</span>/talk likes/ <span class="br0">{</span>
        say <span class="re0">$animal</span>-&gt;<span class="me1">name</span> . <span class="st0">': '</span> . <span class="re0">$trait</span> . <span class="st0">' =&gt; '</span> . <span class="re0">$animal</span>-&gt;<span class="re0">$trait</span>;
    <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="co1"># prints the following:</span>
<span class="co1">#</span>
<span class="co1"># Missy: talk =&gt; Meow</span>
<span class="co1"># Missy: likes =&gt; Milk</span>
<span class="co1"># Mr. Bojangles: talk =&gt; Meow</span>
<span class="co1"># Mr. Bojangles: likes =&gt; Milk</span>
<span class="co1"># Lassie: talk =&gt; Woof! Woof!</span>
<span class="co1"># Lassie: likes =&gt; Bone</span>
</pre></div>
<p><a name="Visual_Basic_.NET" id="Visual_Basic_.NET"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Polymorphism_in_object-oriented_programming&amp;action=edit&amp;section=9" title="Edit section: Visual Basic .NET">edit</a>]</span> <span class="mw-headline">Visual Basic .NET</span></h3>
<p>One way of doing polymorphism is through the definition and implementation of a common interface. Consider the example below, where two subclasses (Cat and Dog) implement the IAnimal interface. Two Cat objects and one Dog are instantiated and given names, and then they are gathered in a list and their talk method is called.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-vbnet">
<span class="kw6">Namespace</span> std
 
    <span class="kw2">Public</span> <span class="kw6">Interface</span> IAnimal
        <span class="kw1">ReadOnly</span> <span class="kw2">Property</span> Name<span class="br0">(</span><span class="br0">)</span> <span class="kw2">As</span> <span class="kw2">String</span>
        <span class="kw6">Function</span> Talk<span class="br0">(</span><span class="br0">)</span> <span class="kw2">As</span> <span class="kw2">String</span>
    <span class="kw6">End</span> <span class="kw6">Interface</span>
 
    <span class="kw2">Public</span> <span class="kw6">Class</span> Cat
        <span class="kw6">Implements</span> IAnimal
 
        <span class="kw2">Private</span> mName <span class="kw2">As</span> <span class="kw2">String</span>
 
        <span class="kw6">Sub</span> <span class="kw2">New</span><span class="br0">(</span><span class="kw2">ByVal</span> name <span class="kw2">As</span> <span class="kw2">String</span><span class="br0">)</span>
            mName = name
        <span class="kw6">End</span> <span class="kw6">Sub</span>
 
        <span class="kw2">Public</span> <span class="kw1">ReadOnly</span> <span class="kw2">Property</span> Name<span class="br0">(</span><span class="br0">)</span> <span class="kw2">As</span> <span class="kw2">String</span> <span class="kw6">Implements</span> IAnimal.<span class="me1">Name</span>
            <span class="kw2">Get</span>
                Return mName
            <span class="kw6">End</span> <span class="kw2">Get</span>
        <span class="kw6">End</span> <span class="kw2">Property</span>
 
        <span class="kw2">Public</span> <span class="kw6">Function</span> Talk<span class="br0">(</span><span class="br0">)</span> <span class="kw2">As</span> <span class="kw2">String</span> <span class="kw6">Implements</span> IAnimal.<span class="me1">Talk</span>
            Return <span class="st0">"Meow!"</span>
        <span class="kw6">End</span> <span class="kw6">Function</span>
    <span class="kw6">End</span> <span class="kw6">Class</span>
 
    <span class="kw2">Public</span> <span class="kw6">Class</span> Dog
        <span class="kw6">Implements</span> IAnimal
 
        <span class="kw2">Private</span> mName <span class="kw2">As</span> <span class="kw2">String</span>
 
        <span class="kw6">Sub</span> <span class="kw2">New</span><span class="br0">(</span><span class="kw2">ByVal</span> name <span class="kw2">As</span> <span class="kw2">String</span><span class="br0">)</span>
            mName = name
        <span class="kw6">End</span> <span class="kw6">Sub</span>
 
        <span class="kw2">Public</span> <span class="kw1">ReadOnly</span> <span class="kw2">Property</span> Name<span class="br0">(</span><span class="br0">)</span> <span class="kw2">As</span> <span class="kw2">String</span> <span class="kw6">Implements</span> IAnimal.<span class="me1">Name</span>
            <span class="kw2">Get</span>
                Return mName
            <span class="kw6">End</span> <span class="kw2">Get</span>
        <span class="kw6">End</span> <span class="kw2">Property</span>
 
        <span class="kw2">Public</span> <span class="kw6">Function</span> Talk<span class="br0">(</span><span class="br0">)</span> <span class="kw2">As</span> <span class="kw2">String</span> <span class="kw6">Implements</span> IAnimal.<span class="me1">Talk</span>
            Return <span class="st0">"Arf! Arf!"</span>
        <span class="kw6">End</span> <span class="kw6">Function</span>
    <span class="kw6">End</span> <span class="kw6">Class</span>
 
    <span class="kw2">Public</span> Module TestAnimals
 
        <span class="co1">' Prints the following:</span>
        <span class="co1">'</span>
        <span class="co1">' Missy: Meow!</span>
        <span class="co1">' Mr. Bojangles: Meow!</span>
        <span class="co1">' Lassie: Arf! Arf!</span>
        <span class="kw2">Public</span> <span class="kw6">Sub</span> Main<span class="br0">(</span><span class="br0">)</span>
            <span class="kw6">Dim</span> animals<span class="br0">(</span><span class="nu0">2</span><span class="br0">)</span> <span class="kw2">As</span> IAnimal
            animals<span class="br0">(</span><span class="nu0">0</span><span class="br0">)</span> = <span class="kw2">New</span> Cat<span class="br0">(</span><span class="st0">"Missy"</span><span class="br0">)</span>
            animals<span class="br0">(</span><span class="nu0">1</span><span class="br0">)</span> = <span class="kw2">New</span> Cat<span class="br0">(</span><span class="st0">"Mr. Bojangles"</span><span class="br0">)</span>
            animals<span class="br0">(</span><span class="nu0">2</span><span class="br0">)</span> = <span class="kw2">New</span> Dog<span class="br0">(</span><span class="st0">"Lassie"</span><span class="br0">)</span>
 
            <span class="kw2">For</span> <span class="kw6">Each</span> a <span class="kw2">As</span> IAnimal In animals
                Console.<span class="me1">Out</span>.<span class="me1">WriteLine</span><span class="br0">(</span><span class="st0">"{0}: {1}"</span>, a.<span class="me1">Name</span>, a.<span class="me1">Talk</span><span class="br0">)</span>
            <span class="kw2">Next</span> a
 
        <span class="kw6">End</span> <span class="kw6">Sub</span>
    <span class="kw6">End</span> Module
 
<span class="kw6">End</span> <span class="kw6">Namespace</span>
</pre></div>
<p><a name="Xbase.2B.2B" id="Xbase.2B.2B"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Polymorphism_in_object-oriented_programming&amp;action=edit&amp;section=10" title="Edit section: Xbase++">edit</a>]</span> <span class="mw-headline">Xbase++</span></h3>
<div dir="ltr" style="text-align: left;">
<pre class="source-visualfoxpro">
<span class="kw1">#include</span> <span class="st0">"class.ch"</span>
 
<span class="co1">//</span>
<span class="co1">//  This program prints:</span>
<span class="co1">//</span>
<span class="co1">//  Missy  Meow!</span>
<span class="co1">//  Mr. Bojangles  Meow!</span>
<span class="co1">//  Lassie  Bark!</span>
<span class="co1">//  Press any key to continue...</span>
<span class="co1">//</span>
 
<span class="co1">/////////////////////////////</span>
<span class="co1">//</span>
<span class="kw1">PROCEDURE</span> Main<span class="br0">(</span><span class="br0">)</span>
<span class="co1">//</span>
<span class="co1">/////////////////////////////</span>
 
  <span class="kw1">LOCAL</span> aAnimals := <span class="kw2">Array</span><span class="br0">(</span><span class="nu0">3</span><span class="br0">)</span>
  <span class="kw1">LOCAL</span> i
 
  aAnimals<span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span> :=  Cat<span class="br0">(</span><span class="br0">)</span>:New<span class="br0">(</span><span class="st0">"Missy"</span><span class="br0">)</span>
  aAnimals<span class="br0">[</span><span class="nu0">2</span><span class="br0">]</span> :=  Cat<span class="br0">(</span><span class="br0">)</span>:New<span class="br0">(</span><span class="st0">"Mr. Bojangles"</span><span class="br0">)</span>
  aAnimals<span class="br0">[</span><span class="nu0">3</span><span class="br0">]</span> :=  Dog<span class="br0">(</span><span class="br0">)</span>:New<span class="br0">(</span><span class="st0">"Lassie"</span><span class="br0">)</span>
 
  <span class="kw1">FOR</span> i:=<span class="nu0">1</span> <span class="kw3">TO</span> <span class="kw2">LEN</span><span class="br0">(</span>aAnimals<span class="br0">)</span>
     <span class="kw1">?</span> aAnimals<span class="br0">[</span>i<span class="br0">]</span>:<span class="kw4">Name</span> + <span class="st0">"  "</span> + aAnimals<span class="br0">[</span>i<span class="br0">]</span>:<span class="kw3">Talk</span><span class="br0">(</span><span class="br0">)</span>
  <span class="kw1">NEXT</span> i
 
  <span class="kw2">WAIT</span>
 
<span class="kw2">RETURN</span>
 
<span class="co1">/////////////////////////////</span>
<span class="co1">//</span>
<span class="kw3">CLASS</span> Animal
<span class="co1">//</span>
<span class="co1">/////////////////////////////</span>
 
   EXPORTED:
      <span class="kw3">VAR</span> <span class="kw4">Name</span>   <span class="kw4">READONLY</span>
 
      METHOD <span class="kw3">Init</span>
      DEFERRED <span class="kw3">CLASS</span> METHOD <span class="kw3">Talk</span>
ENDCLASS
 
METHOD Animal:<span class="kw3">Init</span><span class="br0">(</span> cName <span class="br0">)</span>
   ::<span class="kw4">Name</span> := cName
<span class="kw2">RETURN</span> Self
 
<span class="co1">/////////////////////////////</span>
<span class="co1">//</span>
<span class="kw3">CLASS</span> Dog <span class="kw2">FROM</span> Animal
<span class="co1">//</span>
<span class="co1">/////////////////////////////</span>
   EXPORTED:
   METHOD <span class="kw3">Talk</span>
ENDCLASS
 
METHOD Dog:<span class="kw3">Talk</span><span class="br0">(</span><span class="br0">)</span>
<span class="kw2">RETURN</span> <span class="st0">"Bark!"</span>
 
<span class="co1">/////////////////////////////</span>
<span class="co1">//</span>
<span class="kw3">CLASS</span> Cat <span class="kw2">FROM</span> Animal
<span class="co1">//</span>
<span class="co1">/////////////////////////////</span>
   EXPORTED:
   METHOD <span class="kw3">Talk</span>
ENDCLASS
 
METHOD Cat:<span class="kw3">Talk</span><span class="br0">(</span><span class="br0">)</span>
<span class="kw2">RETURN</span> <span class="st0">"Meow!"</span>
</pre></div>
<p><a name="Ruby" id="Ruby"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Polymorphism_in_object-oriented_programming&amp;action=edit&amp;section=11" title="Edit section: Ruby">edit</a>]</span> <span class="mw-headline">Ruby</span></h3>
<div dir="ltr" style="text-align: left;">
<pre class="source-ruby">
<span class="kw1">class</span> Thing
  <span class="kw1">def</span> who_am_I
    <span class="kw3">puts</span> <span class="st0">"I'm a thing!"</span>
  <span class="kw1">end</span>
<span class="kw1">end</span>
 
<span class="kw1">class</span> AnotherThing
  <span class="kw1">def</span> who_am_I
    <span class="kw3">puts</span> <span class="st0">"I'm another thing!"</span>
  <span class="kw1">end</span>
<span class="kw1">end</span>
 
<span class="co1">#adds 'who_am_I' method to class String:</span>
<span class="kw1">class</span> <span class="kw3">String</span>
  <span class="kw1">def</span> who_am_I
    <span class="kw3">puts</span> <span class="st0">"I'm a plain Ruby String!"</span>
  <span class="kw1">end</span>
<span class="kw1">end</span>
 
things = <span class="br0">[</span>Thing.<span class="me1">new</span>, AnotherThing.<span class="me1">new</span>, <span class="st0">'boring string'</span><span class="br0">]</span>
things.<span class="me1">each</span><span class="br0">{</span>|current_thing| current_thing.<span class="me1">who_am_I</span><span class="br0">}</span>
 
<span class="co1">#prints:</span>
<span class="co1">#</span>
<span class="co1">#I'm a thing!</span>
<span class="co1">#I'm another thing!</span>
<span class="co1">#I'm a plain Ruby String!</span>
</pre></div>
<p><a name="Parametric_Polymorphism" id="Parametric_Polymorphism"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Polymorphism_in_object-oriented_programming&amp;action=edit&amp;section=12" title="Edit section: Parametric Polymorphism">edit</a>]</span> <span class="mw-headline">Parametric Polymorphism</span></h2>
<p>In object-oriented programming languages, the term <a href="/wiki/Polymorphism_(computer_science)" title="Polymorphism (computer science)" class="mw-redirect">polymorphism</a> has different, but related meanings; one of these, <i>parametric polymorphism</i>, is known as <a href="/wiki/Generic_programming" title="Generic programming">generic programming</a> in the Object Oriented Programming Community and is supported by many languages including <a href="/wiki/C%2B%2B" title="C++">C++</a>, <a href="/wiki/C_Sharp_(programming_language)" title="C Sharp (programming language)">C#</a> and <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a>.</p>
<p><a href="/wiki/Generic_programming" title="Generic programming">Generics</a> allow you compile time type safety and other benefits and/or disadvantages depending on the language's implementation.</p>
<p>C++ implements parametric polymorphism through templates. The use of templates requires the compiler to generate a separate instance of the templated class or function for every permutation of type parameters used with it, <a href="/wiki/Generic_programming#Advantages_and_disadvantages" title="Generic programming">which can lead to code bloat and difficulty debugging</a>. A benefit C++ templates have over Java and C# is that they allow for template metaprogramming, which is a way of pre-evaluating some of the code at compile-time rather than run-time.</p>
<p>Java parametric polymorphism is called generics and implemented through <a href="/wiki/Type_erasure" title="Type erasure" class="mw-redirect">type erasure</a>.</p>
<p>C# parametric polymorphism is called generics and implemented by <a href="/wiki/Reification_(computer_science)" title="Reification (computer science)">reification</a>, making C# the only language of the three which supports parametric polymorphism as a first class member of the language. This design choice is leveraged to provide additional functionality, such as <a href="/wiki/Generic_programming#Generic_programming_in_C.23_and_.NET" title="Generic programming">allowing reflection with preservation of generic types</a>, as well as alleviating some of the limitations of erasure (such as being unable to create generic arrays). This also means that there is no performance hit from runtime casts and normally expensive boxing conversions. When primitive and value types are used as generic arguments, they get specialized implementations, allowing for efficient generic collections and methods.</p>
<p><a name="Mitigating_circular_dependency_references_using_polymorphism_in_C.23" id="Mitigating_circular_dependency_references_using_polymorphism_in_C.23"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Polymorphism_in_object-oriented_programming&amp;action=edit&amp;section=13" title="Edit section: Mitigating circular dependency references using polymorphism in C#">edit</a>]</span> <span class="mw-headline">Mitigating circular dependency references using polymorphism in C#</span></h2>
<p><b>Problem</b><br />
<br />
<b>Assembly Name:</b> <i>Logger</i><br />
<b>Dependencies:</b> <i>Data Access Layer</i><br />
<b>Methods:</b> <i>LogError(string error)</i><br />
<br />
<b>Assembly Name</b>: <i>Data Access Layer</i><br />
<b>Dependencies</b>: <i>SqlClient, System.Data</i><br />
<b>Methods:</b> <i>WriteData(string data)</i><br />
<br />
With this design, writing error messages from catch statements and writing them to the Logger class from the Data Access Layer class would not work due to a circular dependency reference.<br />
<br />
<b>Example of broken class in Data Access Layer</b><br />
<br /></p>
<div dir="ltr" style="text-align: left;">
<pre class="source-csharp">
<span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">class</span> WriteData
<span class="br0">{</span>
     <span class="kw1">public</span> <span class="kw1">static</span> <span class="kw1">void</span> WriteData<span class="br0">(</span><span class="kw4">string</span> data, Logger logger<span class="br0">)</span> <span class="co1">// not technically possible due to circular reference</span>
     <span class="br0">{</span>
          <span class="kw1">try</span>
          <span class="br0">{</span>
               SqlHelper.<span class="me1">ExecuteNonQuery</span><span class="br0">(</span><span class="st0">"my_stored_procedure"</span>, <span class="st0">"some"</span>, <span class="st0">"different"</span>, <span class="st0">"arguments"</span>, data<span class="br0">)</span>;
          <span class="br0">}</span>
          <span class="kw1">catch</span><span class="br0">(</span>Exception ex<span class="br0">)</span>
          <span class="br0">{</span>
               logger.<span class="me1">LogError</span><span class="br0">(</span>ex<span class="br0">)</span>; <span class="co1">// not technically possible due to circular reference</span>
          <span class="br0">}</span>
     <span class="br0">}</span>
<span class="br0">}</span>
</pre></div>
<p><b>Solution</b><br />
<br />
<b>Assembly Name:</b> <i>CommonClasses</i><br />
<b>Dependencies:</b> <i>None</i><br />
<b>Interfaces:</b> <i>ILogger</i><br />
<br />
<b>Assembly Name:</b> <i>Data Access Layer</i><br />
<b>Dependencies:</b> <i>SqlClient, System.Data, CommonClasses</i><br />
<b>Methods:</b> <i>WriteData(string data, ILogger logger)</i><br />
<br />
<b>Example of working class in Data Access Layer</b><br />
<br /></p>
<div dir="ltr" style="text-align: left;">
<pre class="source-csharp">
<span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">class</span> WriteData
<span class="br0">{</span>
     <span class="kw1">public</span> <span class="kw1">static</span> <span class="kw1">void</span> WriteData<span class="br0">(</span><span class="kw4">string</span> data, ILogger logger<span class="br0">)</span>  <span class="co1">// will compile and run fine</span>
     <span class="br0">{</span>
          <span class="kw1">try</span>
          <span class="br0">{</span>
               SqlHelper.<span class="me1">ExecuteNonQuery</span><span class="br0">(</span><span class="st0">"my_stored_procedure"</span>, <span class="st0">"some"</span>, <span class="st0">"different"</span>, <span class="st0">"arguments"</span>, data<span class="br0">)</span>;
          <span class="br0">}</span>
          <span class="kw1">catch</span><span class="br0">(</span>Exception ex<span class="br0">)</span>
          <span class="br0">{</span>
               logger.<span class="me1">LogError</span><span class="br0">(</span>ex<span class="br0">)</span>; <span class="co1">// will compile and run fine</span>
          <span class="br0">}</span>
     <span class="br0">}</span>
<span class="br0">}</span>
</pre></div>
<p>It is technically a better practice to have a static initialization function the caller uses to pass in a concrete class which implements the ILogger interface to the common classes API which caches it in a static private field with an associated public or internal property for reuse throughout the application without having to reinstantiate the object. Just try to avoid using static data, and if it has to be used, make sure to synchronize access to it for thread safety. <sup id="cite_ref-5" class="reference"><a href="#cite_note-5" title=""><span>[</span>6<span>]</span></a></sup></p>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Polymorphism_in_object-oriented_programming&amp;action=edit&amp;section=14" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<ul>
<li><a href="/wiki/Inheritance_(computer_science)" title="Inheritance (computer science)">Inheritance (computer science)</a></li>
<li><a href="/wiki/Polymorphic_association" title="Polymorphic association">Polymorphic association</a></li>
<li><a href="/wiki/Generic_programming" title="Generic programming">Generic programming</a></li>
</ul>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Polymorphism_in_object-oriented_programming&amp;action=edit&amp;section=15" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<ol class="references">
<li id="cite_note-0"><b><a href="#cite_ref-0" title="">^</a></b> <cite style="font-style:normal" class="book" id="CITEREFSierraBert_Bates2009">Sierra, Kathy; Bert Bates (2005). <i>Head First Java, 2nd Ed.</i>. O'Reilly Media, Inc.. <a href="/wiki/Special:BookSources/0596009208" class="internal">ISBN 0596009208</a>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Head+First+Java%2C+2nd+Ed.&amp;rft.aulast=Sierra&amp;rft.aufirst=Kathy&amp;rft.au=Sierra%2C+Kathy&amp;rft.au=Bert+Bates&amp;rft.date=2005&amp;rft.pub=O%27Reilly+Media%2C+Inc.&amp;rft.isbn=0596009208&amp;rfr_id=info:sid/en.wikipedia.org:Polymorphism_in_object-oriented_programming"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-1"><b><a href="#cite_ref-1" title="">^</a></b> <cite style="font-style:normal" class="book" id="CITEREFStroustrup2009">Stroustrup, Bjarne (2000). <i>The C++ Programming Language Special Edition</i>. O'Reilly Media, Inc.. <a href="/wiki/Special:BookSources/0201700735" class="internal">ISBN 0-201-70073-5</a>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=The+C%2B%2B+Programming+Language+Special+Edition&amp;rft.aulast=Stroustrup&amp;rft.aufirst=Bjarne&amp;rft.au=Stroustrup%2C+Bjarne&amp;rft.date=2000&amp;rft.pub=O%27Reilly+Media%2C+Inc.&amp;rft.isbn=0-201-70073-5&amp;rfr_id=info:sid/en.wikipedia.org:Polymorphism_in_object-oriented_programming"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-2"><b><a href="#cite_ref-2" title="">^</a></b> <a href="http://www.expertwebinstalls.com/csharptutorial/polymorphism-in-c/" class="external free" title="http://www.expertwebinstalls.com/csharptutorial/polymorphism-in-c/" rel="nofollow">http://www.expertwebinstalls.com/csharptutorial/polymorphism-in-c/</a></li>
<li id="cite_note-3"><b><a href="#cite_ref-3" title="">^</a></b> <a href="http://msdn.microsoft.com/en-us/magazine/cc163344.aspx" class="external free" title="http://msdn.microsoft.com/en-us/magazine/cc163344.aspx" rel="nofollow">http://msdn.microsoft.com/en-us/magazine/cc163344.aspx</a></li>
<li id="cite_note-4"><b><a href="#cite_ref-4" title="">^</a></b> Driesen, Karel and Hölzle, Urs, <a href="http://www.cs.ucsb.edu/~urs/oocsb/papers/oopsla96.pdf" class="external text" title="http://www.cs.ucsb.edu/~urs/oocsb/papers/oopsla96.pdf" rel="nofollow">"The Direct Cost of Virtual Function Calls in C++"</a>, OOPSLA 1996</li>
<li id="cite_note-5"><b><a href="#cite_ref-5" title="">^</a></b> <a href="http://www.expertwebinstalls.com/csharptutorial/mitigating-circular-dependency-references-using-polymorphism-in-c/" class="external free" title="http://www.expertwebinstalls.com/csharptutorial/mitigating-circular-dependency-references-using-polymorphism-in-c/" rel="nofollow">http://www.expertwebinstalls.com/csharptutorial/mitigating-circular-dependency-references-using-polymorphism-in-c/</a></li>
</ol>
<p><br /></p>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Polymorphism_in_object-oriented_programming&amp;action=edit&amp;section=16" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<ul>
<li><a href="http://java4all.info/corejava/interview-questions/java-interview-questions-4.html" class="external text" title="http://java4all.info/corejava/interview-questions/java-interview-questions-4.html" rel="nofollow">Polymorphism and OOPS concepts</a></li>
<li><a href="http://javalessons.com/cgi-bin/fun/java-tutorials-main.cgi?ses=ao789&amp;code=ovd&amp;sub=fun" class="external text" title="http://javalessons.com/cgi-bin/fun/java-tutorials-main.cgi?ses=ao789&amp;code=ovd&amp;sub=fun" rel="nofollow">Java polymorphism interactive lesson</a></li>
<li><a href="http://wiki.visual-prolog.com/index.php?title=Objects_and_Polymorphism" class="external text" title="http://wiki.visual-prolog.com/index.php?title=Objects_and_Polymorphism" rel="nofollow">Objects and Polymorphism (Visual Prolog)</a></li>
<li><a href="http://www.codeproject.com/KB/cpp/PolyC.aspx" class="external text" title="http://www.codeproject.com/KB/cpp/PolyC.aspx" rel="nofollow">Polymorphism in C++</a></li>
</ul>


<!-- 
NewPP limit report
Preprocessor node count: 1139/1000000
Post-expand include size: 4592/2048000 bytes
Template argument size: 1080/2048000 bytes
Expensive parser function count: 0/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:24930-0!1!0!default!!en!2 and timestamp 20090502132106 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Polymorphism_in_object-oriented_programming">http://en.wikipedia.org/wiki/Polymorphism_in_object-oriented_programming</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Articles_with_example_code" title="Category:Articles with example code">Articles with example code</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_example_C%2B%2B_code" title="Category:Articles with example C++ code">Articles with example C++ code</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_example_Java_code" title="Category:Articles with example Java code">Articles with example Java code</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_example_Python_code" title="Category:Articles with example Python code">Articles with example Python code</a></span> | <span dir='ltr'><a href="/wiki/Category:Object-oriented_programming" title="Category:Object-oriented programming">Object-oriented programming</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Polymorphism_in_object-oriented_programming" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Polymorphism_in_object-oriented_programming" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Polymorphism_in_object-oriented_programming&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Polymorphism_in_object-oriented_programming&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Polymorphism_in_object-oriented_programming" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate/Now/en?utm_source=donate&amp;utm_medium=sidebar&amp;utm_campaign=spontaneous_donation" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Polymorphism_in_object-oriented_programming" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Polymorphism_in_object-oriented_programming" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Polymorphism_in_object-oriented_programming&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Polymorphism_in_object-oriented_programming&amp;oldid=287441059" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Polymorphism_in_object-oriented_programming&amp;id=287441059">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-es"><a href="http://es.wikipedia.org/wiki/Polimorfismo_(programaci%C3%B3n_orientada_a_objetos)">Español</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 2 May 2009, at 13:21 (UTC).</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv201 in 0.038 secs. --></body></html>
