<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Decorator pattern,Design Patterns Patterns,Abstract class,Abstract factory,Abstract factory pattern,Adapter pattern,Bridge pattern,Builder pattern,Chain-of-responsibility pattern,Class (computer science),Classes (computer science)" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Decorator_pattern&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Decorator_pattern&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Decorator pattern - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Decorator_pattern";
		var wgTitle = "Decorator pattern";
		var wgAction = "view";
		var wgArticleId = "164854";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281786613;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
<style type="text/css">/*<![CDATA[*/
.source-java {line-height: normal;}
.source-java li, .source-java pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for java
 * CSS class: source-java, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-java .de1, .source-java .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-java  {}
.source-java .head {}
.source-java .foot {}
.source-java .imp {font-weight: bold; color: red;}
.source-java .ln-xtra {color: #cc0; background-color: #ffc;}
.source-java li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-java li.li2 {font-weight: bold;}
.source-java .kw1 {color: #b1b100;}
.source-java .kw2 {color: #000000; font-weight: bold;}
.source-java .kw3 {color: #aaaadd; font-weight: bold;}
.source-java .kw4 {color: #993333;}
.source-java .co1 {color: #808080; font-style: italic;}
.source-java .co2 {color: #a1a100;}
.source-java .coMULTI {color: #808080; font-style: italic;}
.source-java .es0 {color: #000099; font-weight: bold;}
.source-java .br0 {color: #66cc66;}
.source-java .st0 {color: #ff0000;}
.source-java .nu0 {color: #cc66cc;}
.source-java .me1 {color: #006600;}
.source-java .me2 {color: #006600;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-cpp {line-height: normal;}
.source-cpp li, .source-cpp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for cpp
 * CSS class: source-cpp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-cpp .de1, .source-cpp .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-cpp  {}
.source-cpp .head {}
.source-cpp .foot {}
.source-cpp .imp {font-weight: bold; color: red;}
.source-cpp .ln-xtra {color: #cc0; background-color: #ffc;}
.source-cpp li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-cpp li.li2 {font-weight: bold;}
.source-cpp .kw1 {color: #0000ff;}
.source-cpp .kw2 {color: #0000ff;}
.source-cpp .kw3 {color: #0000dd;}
.source-cpp .kw4 {color: #0000ff;}
.source-cpp .co1 {color: #ff0000;}
.source-cpp .co2 {color: #339900;}
.source-cpp .coMULTI {color: #ff0000; font-style: italic;}
.source-cpp .es0 {color: #666666; font-weight: bold;}
.source-cpp .br0 {color: #000000;}
.source-cpp .st0 {color: #666666;}
.source-cpp .nu0 {color: #0000dd;}
.source-cpp .me1 {color: #00eeff;}
.source-cpp .me2 {color: #00eeff;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-csharp {line-height: normal;}
.source-csharp li, .source-csharp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for csharp
 * CSS class: source-csharp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-csharp .de1, .source-csharp .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-csharp  {}
.source-csharp .head {}
.source-csharp .foot {}
.source-csharp .imp {font-weight: bold; color: red;}
.source-csharp .ln-xtra {color: #cc0; background-color: #ffc;}
.source-csharp li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-csharp li.li2 {font-weight: bold;}
.source-csharp .kw1 {color: #0600FF;}
.source-csharp .kw2 {color: #FF8000; font-weight: bold;}
.source-csharp .kw3 {color: #008000;}
.source-csharp .kw4 {color: #FF0000;}
.source-csharp .kw5 {color: #000000;}
.source-csharp .co1 {color: #008080; font-style: italic;}
.source-csharp .co2 {color: #008080;}
.source-csharp .coMULTI {color: #008080; font-style: italic;}
.source-csharp .es0 {color: #008080; font-weight: bold;}
.source-csharp .br0 {color: #008000;}
.source-csharp .st0 {color: #808080;}
.source-csharp .nu0 {color: #FF0000;}
.source-csharp .me1 {color: #0000FF;}
.source-csharp .me2 {color: #0000FF;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-python {line-height: normal;}
.source-python li, .source-python pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for python
 * CSS class: source-python, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-python .de1, .source-python .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-python  {}
.source-python .head {}
.source-python .foot {}
.source-python .imp {font-weight: bold; color: red;}
.source-python .ln-xtra {color: #cc0; background-color: #ffc;}
.source-python li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-python li.li2 {font-weight: bold;}
.source-python .kw1 {color: #ff7700;font-weight:bold;}
.source-python .kw2 {color: #008000;}
.source-python .kw3 {color: #dc143c;}
.source-python .kw4 {color: #0000cd;}
.source-python .co1 {color: #808080; font-style: italic;}
.source-python .coMULTI {color: #808080; font-style: italic;}
.source-python .es0 {color: #000099; font-weight: bold;}
.source-python .br0 {color: #66cc66;}
.source-python .st0 {color: #483d8b;}
.source-python .nu0 {color: #ff4500;}
.source-python .me1 {color: black;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-php {line-height: normal;}
.source-php li, .source-php pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for php
 * CSS class: source-php, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-php .de1, .source-php .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-php  {}
.source-php .head {}
.source-php .foot {}
.source-php .imp {font-weight: bold; color: red;}
.source-php .ln-xtra {color: #cc0; background-color: #ffc;}
.source-php li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-php li.li2 {font-weight: bold;}
.source-php .kw1 {color: #b1b100;}
.source-php .kw2 {color: #000000; font-weight: bold;}
.source-php .kw3 {color: #000066;}
.source-php .co1 {color: #808080; font-style: italic;}
.source-php .co2 {color: #808080; font-style: italic;}
.source-php .coMULTI {color: #808080; font-style: italic;}
.source-php .es0 {color: #000099; font-weight: bold;}
.source-php .br0 {color: #66cc66;}
.source-php .st0 {color: #ff0000;}
.source-php .nu0 {color: #cc66cc;}
.source-php .me1 {color: #006600;}
.source-php .me2 {color: #006600;}
.source-php .sc0 {}
.source-php .sc1 {}
.source-php .sc2 {}
.source-php .sc3 {}
.source-php .re0 {color: #0000ff;}
.source-php .re1 {color: #ff0000}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-javascript {line-height: normal;}
.source-javascript li, .source-javascript pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for javascript
 * CSS class: source-javascript, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-javascript .de1, .source-javascript .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-javascript  {}
.source-javascript .head {}
.source-javascript .foot {}
.source-javascript .imp {font-weight: bold; color: red;}
.source-javascript .ln-xtra {color: #cc0; background-color: #ffc;}
.source-javascript li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-javascript li.li2 {font-weight: bold;}
.source-javascript .kw1 {color: #000066; font-weight: bold;}
.source-javascript .kw2 {color: #003366; font-weight: bold;}
.source-javascript .kw3 {color: #000066;}
.source-javascript .co1 {color: #009900; font-style: italic;}
.source-javascript .coMULTI {color: #009900; font-style: italic;}
.source-javascript .es0 {color: #000099; font-weight: bold;}
.source-javascript .br0 {color: #66cc66;}
.source-javascript .st0 {color: #3366CC;}
.source-javascript .nu0 {color: #CC0000;}
.source-javascript .me1 {color: #006600;}
.source-javascript .sc0 {}
.source-javascript .sc1 {}
.source-javascript .sc2 {}
.source-javascript .sc3 {}
.source-javascript .re0 {color: #0066FF;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style>		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Decorator_pattern skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Decorator pattern</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<div class="dablink">For decorators in Python, see <a href="/wiki/Python_syntax_and_semantics#Decorators" title="Python syntax and semantics">Python syntax and semantics#Decorators</a>.</div>
<div class="thumb tright">
<div class="thumbinner" style="width:402px;"><a href="/wiki/File:Decorator_pattern_in_LePUS3.png" class="image" title="LePUS3 chart of the decorator pattern"><img alt="" src="http://upload.wikimedia.org/wikipedia/en/thumb/4/42/Decorator_pattern_in_LePUS3.png/400px-Decorator_pattern_in_LePUS3.png" width="400" height="285" border="0" class="thumbimage" /></a>
<div class="thumbcaption">
<div class="magnify"><a href="/wiki/File:Decorator_pattern_in_LePUS3.png" class="internal" title="Enlarge"><img src="/skins-1.5/common/images/magnify-clip.png" width="15" height="11" alt="" /></a></div>
<a href="/wiki/Lepus3" title="Lepus3">LePUS3</a> chart of the decorator pattern</div>
</div>
</div>
<p>In <a href="/wiki/Object-oriented_programming" title="Object-oriented programming">object-oriented programming</a>, the <b>decorator pattern</b> is a <a href="/wiki/Design_pattern_(computer_science)" title="Design pattern (computer science)">design pattern</a> that allows new/additional behaviour to be added to an existing <a href="/wiki/Class_(computer_science)" title="Class (computer science)">class</a> dynamically.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Introduction"><span class="tocnumber">1</span> <span class="toctext">Introduction</span></a></li>
<li class="toclevel-1"><a href="#Motivation"><span class="tocnumber">2</span> <span class="toctext">Motivation</span></a></li>
<li class="toclevel-1"><a href="#Code_examples"><span class="tocnumber">3</span> <span class="toctext">Code examples</span></a>
<ul>
<li class="toclevel-2"><a href="#Java"><span class="tocnumber">3.1</span> <span class="toctext">Java</span></a></li>
<li class="toclevel-2"><a href="#C.2B.2B"><span class="tocnumber">3.2</span> <span class="toctext">C++</span></a></li>
<li class="toclevel-2"><a href="#C.23"><span class="tocnumber">3.3</span> <span class="toctext">C#</span></a></li>
<li class="toclevel-2"><a href="#Python"><span class="tocnumber">3.4</span> <span class="toctext">Python</span></a></li>
<li class="toclevel-2"><a href="#PHP"><span class="tocnumber">3.5</span> <span class="toctext">PHP</span></a></li>
<li class="toclevel-2"><a href="#Dynamic_Languages"><span class="tocnumber">3.6</span> <span class="toctext">Dynamic Languages</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">4</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">5</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Introduction" id="Introduction"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Decorator_pattern&amp;action=edit&amp;section=1" title="Edit section: Introduction">edit</a>]</span> <span class="mw-headline">Introduction</span></h2>
<p>The decorator pattern can be used to make it possible to extend (decorate) the functionality of a class at <a href="/wiki/Runtime" title="Runtime">runtime</a>. This works by adding a new <i>decorator</i> class that <a href="/wiki/Wrapper_pattern" title="Wrapper pattern" class="mw-redirect">wraps</a> the original class. This wrapping is achieved by</p>
<ol>
<li>Subclass the original "Component" class into a "Decorator" class (see UML diagram)</li>
<li>In class Decorator, add a Component pointer as a field</li>
<li>Pass a Decorator pointer to the Decorator constructor to initialize the Component pointer.</li>
<li>In class Decorator, redirect all "Component" methods to the "Component" pointer. This implies that all Decorator fields coming from the Component motherclass will never be used and their memory space will be wasted. That is an accepted drawback of the decorator pattern.</li>
<li>In class Decorator, override any Component method which behavior needs to be modified.</li>
</ol>
<p>This pattern is designed so that multiple decorators can be stacked on top of each other, each time adding a new functionality to the overridden method.</p>
<p>The decorator pattern is an alternative to <a href="/wiki/Subclass_(computer_science)" title="Subclass (computer science)">subclassing</a>. Subclassing adds behavior at <a href="/wiki/Compile_time" title="Compile time">compile time</a> whereas decorating can provide new behaviour at <a href="/wiki/Runtime" title="Runtime">runtime</a>.</p>
<p>This difference becomes most important when there are several <i>independent</i> ways of extending functionality. In some <a href="/wiki/Object-oriented_programming_language" title="Object-oriented programming language">object-oriented programming languages</a>, <a href="/wiki/Classes_(computer_science)" title="Classes (computer science)" class="mw-redirect">classes</a> cannot be created at runtime, and it is typically not possible to predict what combinations of extensions will be needed at design time. This would mean that a new class would have to be made for every possible combination. By contrast, decorators are objects, created at runtime, and can be combined on a per-use basis. An example of the decorator pattern is the <a href="/wiki/Java_Platform,_Standard_Edition#java.io" title="Java Platform, Standard Edition">Java I/O Streams</a> implementation.</p>
<p><a name="Motivation" id="Motivation"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Decorator_pattern&amp;action=edit&amp;section=2" title="Edit section: Motivation">edit</a>]</span> <span class="mw-headline">Motivation</span></h2>
<div class="thumb tright">
<div class="thumbinner" style="width:402px;"><a href="/wiki/File:Window_uml.png" class="image" title="UML Diagram for the Window Example"><img alt="" src="http://upload.wikimedia.org/wikipedia/en/thumb/f/fb/Window_uml.png/400px-Window_uml.png" width="400" height="175" border="0" class="thumbimage" /></a>
<div class="thumbcaption">
<div class="magnify"><a href="/wiki/File:Window_uml.png" class="internal" title="Enlarge"><img src="/skins-1.5/common/images/magnify-clip.png" width="15" height="11" alt="" /></a></div>
UML Diagram for the Window Example</div>
</div>
</div>
<p>As an example, consider a window in a <a href="/wiki/Windowing_system" title="Windowing system">windowing system</a>. To allow <a href="/wiki/Scrolling" title="Scrolling">scrolling</a> of the window's contents, we may wish to add horizontal or vertical <a href="/wiki/Scrollbar" title="Scrollbar">scrollbars</a> to it, as appropriate. Assume windows are represented by instances of the <i>Window</i> class, and assume this class has no functionality for adding scrollbars. We could create a subclass <i>ScrollingWindow</i> that provides them, or we could create a <i>ScrollingWindowDecorator</i> that adds this functionality to existing <i>Window</i> objects. At this point, either solution would be fine.</p>
<p>Now let's assume we also wish the option to add borders to our windows. Again, our original <i>Window</i> class has no support. The <i>ScrollingWindow</i> subclass now poses a problem, because it has effectively created a new kind of window. If we wish to add border support to <i>all</i> windows, we must create subclasses <i>WindowWithBorder</i> and <i>ScrollingWindowWithBorder</i>. Obviously, this problem gets worse with every new feature to be added. For the decorator solution, we simply create a new <i>BorderedWindowDecorator</i>—at runtime, we can decorate existing windows with the <i>ScrollingWindowDecorator</i> or the <i>BorderedWindowDecorator</i> or both, as we see fit.</p>
<p>Another good example of where a decorator can be desired is when there is a need to restrict access to an object's properties or methods according to some set of rules or perhaps several parallel sets of rules (different user credentials, etc.) In this case instead of implementing the access control in the original object it is left unchanged and unaware of any restrictions on its use, and it is wrapped in an access control decorator object, which can then serve only the permitted subset of the original object's interface.</p>
<p><a name="Code_examples" id="Code_examples"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Decorator_pattern&amp;action=edit&amp;section=3" title="Edit section: Code examples">edit</a>]</span> <span class="mw-headline">Code examples</span></h2>
<p>The following examples illustrate the use of decorators using the window/scrolling scenario.</p>
<div style="clear:both"></div>
<p><a name="Java" id="Java"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Decorator_pattern&amp;action=edit&amp;section=4" title="Edit section: Java">edit</a>]</span> <span class="mw-headline">Java</span></h3>
<div style="clear:both"></div>
<div dir="ltr" style="text-align: left;">
<pre class="source-java">
<span class="co1">// the Window interface</span>
<span class="kw2">interface</span> <span class="kw3">Window</span> <span class="br0">{</span>
    <span class="kw2">public</span> <span class="kw4">void</span> draw<span class="br0">(</span><span class="br0">)</span>; <span class="co1">// draws the Window</span>
    <span class="kw2">public</span> <span class="kw3">String</span> getDescription<span class="br0">(</span><span class="br0">)</span>; <span class="co1">// returns a description of the Window</span>
<span class="br0">}</span>
 
 
<span class="co1">// implementation of a simple Window without any scrollbars</span>
<span class="kw2">class</span> SimpleWindow <span class="kw2">implements</span> <span class="kw3">Window</span> <span class="br0">{</span>
    <span class="kw2">public</span> <span class="kw4">void</span> draw<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
        <span class="co1">// draw window</span>
    <span class="br0">}</span>
 
    <span class="kw2">public</span> <span class="kw3">String</span> getDescription<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
        <span class="kw2">return</span> <span class="st0">"simple window"</span>;
    <span class="br0">}</span>
<span class="br0">}</span>
</pre></div>
<p>The following classes contain the decorators for all <tt>Window</tt> classes, including the decorator classes themselves..</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-java">
<span class="co1">// abstract decorator class - note that it implements Window</span>
<span class="kw2">abstract</span> <span class="kw2">class</span> WindowDecorator <span class="kw2">implements</span> <span class="kw3">Window</span> <span class="br0">{</span>
    <span class="kw2">protected</span> <span class="kw3">Window</span> decoratedWindow; <span class="co1">// the Window being decorated</span>
 
    <span class="kw2">public</span> WindowDecorator <span class="br0">(</span><span class="kw3">Window</span> decoratedWindow<span class="br0">)</span> <span class="br0">{</span>
        <span class="kw2">this</span>.<span class="me1">decoratedWindow</span> = decoratedWindow;
    <span class="br0">}</span>
<span class="br0">}</span>
 
 
<span class="co1">// the first concrete decorator which adds vertical scrollbar functionality</span>
<span class="kw2">class</span> VerticalScrollBarDecorator <span class="kw2">extends</span> WindowDecorator <span class="br0">{</span>
    <span class="kw2">public</span> VerticalScrollBarDecorator <span class="br0">(</span><span class="kw3">Window</span> decoratedWindow<span class="br0">)</span> <span class="br0">{</span>
        <span class="kw2">super</span><span class="br0">(</span>decoratedWindow<span class="br0">)</span>;
    <span class="br0">}</span>
 
    <span class="kw2">public</span> <span class="kw4">void</span> draw<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
        drawVerticalScrollBar<span class="br0">(</span><span class="br0">)</span>;
        decoratedWindow.<span class="me1">draw</span><span class="br0">(</span><span class="br0">)</span>;
    <span class="br0">}</span>
 
    <span class="kw2">private</span> <span class="kw4">void</span> drawVerticalScrollBar<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
        <span class="co1">// draw the vertical scrollbar</span>
    <span class="br0">}</span>
 
    <span class="kw2">public</span> <span class="kw3">String</span> getDescription<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
        <span class="kw2">return</span> decoratedWindow.<span class="me1">getDescription</span><span class="br0">(</span><span class="br0">)</span> + <span class="st0">", including vertical scrollbars"</span>;
    <span class="br0">}</span>
<span class="br0">}</span>
 
 
<span class="co1">// the second concrete decorator which adds horizontal scrollbar functionality</span>
<span class="kw2">class</span> HorizontalScrollBarDecorator <span class="kw2">extends</span> WindowDecorator <span class="br0">{</span>
    <span class="kw2">public</span> HorizontalScrollBarDecorator <span class="br0">(</span><span class="kw3">Window</span> decoratedWindow<span class="br0">)</span> <span class="br0">{</span>
        <span class="kw2">super</span><span class="br0">(</span>decoratedWindow<span class="br0">)</span>;
    <span class="br0">}</span>
 
    <span class="kw2">public</span> <span class="kw4">void</span> draw<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
        drawHorizontalScrollBar<span class="br0">(</span><span class="br0">)</span>;
        decoratedWindow.<span class="me1">draw</span><span class="br0">(</span><span class="br0">)</span>;
    <span class="br0">}</span>
 
    <span class="kw2">private</span> <span class="kw4">void</span> drawHorizontalScrollBar<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
        <span class="co1">// draw the horizontal scrollbar</span>
    <span class="br0">}</span>
 
    <span class="kw2">public</span> <span class="kw3">String</span> getDescription<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
        <span class="kw2">return</span> decoratedWindow.<span class="me1">getDescription</span><span class="br0">(</span><span class="br0">)</span> + <span class="st0">", including horizontal scrollbars"</span>;
    <span class="br0">}</span>
<span class="br0">}</span>
</pre></div>
<p>Here's a test program that creates a <tt>Window</tt> instance which is fully decorated (i.e., with vertical and horizontal scrollbars), and prints its description:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-java">
<span class="kw2">public</span> <span class="kw2">class</span> DecoratedWindowTest <span class="br0">{</span>
    <span class="kw2">public</span> <span class="kw2">static</span> <span class="kw4">void</span> main<span class="br0">(</span><span class="kw3">String</span><span class="br0">[</span><span class="br0">]</span> args<span class="br0">)</span> <span class="br0">{</span>
        <span class="co1">// create a decorated Window with horizontal and vertical scrollbars</span>
        <span class="kw3">Window</span> decoratedWindow = <span class="kw2">new</span> HorizontalScrollBarDecorator <span class="br0">(</span>
                <span class="kw2">new</span> VerticalScrollBarDecorator<span class="br0">(</span><span class="kw2">new</span> SimpleWindow<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>;
 
        <span class="co1">// print the Window's description</span>
        <span class="kw3">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span>decoratedWindow.<span class="me1">getDescription</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>;
    <span class="br0">}</span>
<span class="br0">}</span>
</pre></div>
<p>The output of this program is "simple window, including vertical scrollbars, including horizontal scrollbars". Notice how the <tt>getDescription</tt> method of the two decorators first retrieve the decorated <tt>Window</tt>'s description and <i>decorates</i> it with a suffix.</p>
<p><a name="C.2B.2B" id="C.2B.2B"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Decorator_pattern&amp;action=edit&amp;section=5" title="Edit section: C++">edit</a>]</span> <span class="mw-headline">C++</span></h3>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
<span class="co2">#include &lt;iostream&gt;</span>
 
<span class="kw2">using</span> <span class="kw2">namespace</span> std;
 
<span class="coMULTI">/* Component (interface) */</span>
<span class="kw2">class</span> Widget <span class="br0">{</span>
 
<span class="kw2">public</span>: 
  <span class="kw2">virtual</span> <span class="kw4">void</span> draw<span class="br0">(</span><span class="br0">)</span> = <span class="nu0">0</span>; 
  <span class="kw2">virtual</span> ~Widget<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span><span class="br0">}</span>
<span class="br0">}</span>;  
 
<span class="coMULTI">/* ConcreteComponent */</span>
<span class="kw2">class</span> TextField : <span class="kw2">public</span> Widget <span class="br0">{</span>
 
<span class="kw2">private</span>:                  
   <span class="kw4">int</span> width, height;
 
<span class="kw2">public</span>:
   TextField<span class="br0">(</span> <span class="kw4">int</span> w, <span class="kw4">int</span> h <span class="br0">)</span><span class="br0">{</span> 
      width  = w;
      height = h; 
   <span class="br0">}</span>
 
   <span class="kw4">void</span> draw<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> 
      <span class="kw3">cout</span> &lt;&lt; <span class="st0">"TextField: "</span> &lt;&lt; width &lt;&lt; <span class="st0">", "</span> &lt;&lt; height &lt;&lt; endl; 
   <span class="br0">}</span>
<span class="br0">}</span>;
 
<span class="coMULTI">/* Decorator (interface) */</span>                                           
<span class="kw2">class</span> Decorator : <span class="kw2">public</span> Widget <span class="br0">{</span>
 
<span class="kw2">private</span>:
   Widget* wid;       <span class="co1">// reference to Widget</span>
 
<span class="kw2">public</span>:
   Decorator<span class="br0">(</span> Widget* w <span class="br0">)</span>  <span class="br0">{</span> 
     wid = w; 
   <span class="br0">}</span>
 
   <span class="kw4">void</span> draw<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> 
     wid-&gt;draw<span class="br0">(</span><span class="br0">)</span>; 
   <span class="br0">}</span>
 
   ~Decorator<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
     <span class="kw3">delete</span> wid;
   <span class="br0">}</span>
<span class="br0">}</span>;
 
<span class="coMULTI">/* ConcreteDecoratorA */</span>
<span class="kw2">class</span> BorderDecorator : <span class="kw2">public</span> Decorator <span class="br0">{</span> 
 
<span class="kw2">public</span>:
   BorderDecorator<span class="br0">(</span> Widget* w <span class="br0">)</span> : Decorator<span class="br0">(</span> w <span class="br0">)</span> <span class="br0">{</span> <span class="br0">}</span>
   <span class="kw4">void</span> draw<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
      Decorator::<span class="me2">draw</span><span class="br0">(</span><span class="br0">)</span>;    
      <span class="kw3">cout</span> &lt;&lt; <span class="st0">"   BorderDecorator"</span> &lt;&lt; endl; 
   <span class="br0">}</span>  
<span class="br0">}</span>;
 
<span class="coMULTI">/* ConcreteDecoratorB */</span>
<span class="kw2">class</span> ScrollDecorator : <span class="kw2">public</span> Decorator <span class="br0">{</span> 
<span class="kw2">public</span>:
   ScrollDecorator<span class="br0">(</span> Widget* w <span class="br0">)</span> : Decorator<span class="br0">(</span> w <span class="br0">)</span> <span class="br0">{</span> <span class="br0">}</span>
   <span class="kw4">void</span> draw<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
      Decorator::<span class="me2">draw</span><span class="br0">(</span><span class="br0">)</span>; 
      <span class="kw3">cout</span> &lt;&lt; <span class="st0">"   ScrollDecorator"</span> &lt;&lt; endl;
   <span class="br0">}</span>  
<span class="br0">}</span>;
 
<span class="kw4">int</span> main<span class="br0">(</span> <span class="kw4">void</span> <span class="br0">)</span> <span class="br0">{</span>
 
   Widget* aWidget = <span class="kw3">new</span> BorderDecorator<span class="br0">(</span>
                     <span class="kw3">new</span> ScrollDecorator<span class="br0">(</span>
                     <span class="kw3">new</span> TextField<span class="br0">(</span> <span class="nu0">80</span>, <span class="nu0">24</span> <span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>;
   aWidget-&gt;draw<span class="br0">(</span><span class="br0">)</span>;
   <span class="kw3">delete</span> aWidget;
<span class="br0">}</span>
</pre></div>
<p><a name="C.23" id="C.23"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Decorator_pattern&amp;action=edit&amp;section=6" title="Edit section: C#">edit</a>]</span> <span class="mw-headline">C#</span></h3>
<div dir="ltr" style="text-align: left;">
<pre class="source-csharp">
<span class="kw1">namespace</span> GSL_Decorator_pattern
<span class="br0">{</span>
    <span class="kw4">interface</span> IWindowObject
    <span class="br0">{</span>
        <span class="kw1">void</span> Draw<span class="br0">(</span><span class="br0">)</span>; <span class="co1">// draws the object</span>
        <span class="kw4">String</span> GetDescription<span class="br0">(</span><span class="br0">)</span>; <span class="co1">// returns a description of the object</span>
    <span class="br0">}</span>
 
 
    <span class="kw4">class</span> ControlComponent : IWindowObject
    <span class="br0">{</span>
        <span class="kw1">public</span> ControlComponent<span class="br0">(</span><span class="br0">)</span>
        <span class="br0">{</span>
        <span class="br0">}</span>
 
        <span class="kw1">public</span> <span class="kw1">void</span> Draw<span class="br0">(</span><span class="br0">)</span> <span class="co1">// draws the object</span>
        <span class="br0">{</span>
            Console.<span class="me1">WriteLine</span><span class="br0">(</span><span class="st0">"ControlComponent::draw()"</span><span class="br0">)</span>;
        <span class="br0">}</span>
 
        <span class="kw1">public</span> <span class="kw4">String</span> GetDescription<span class="br0">(</span><span class="br0">)</span> <span class="co1">// returns a description of the object</span>
        <span class="br0">{</span>
            <span class="kw1">return</span> <span class="st0">"ControlComponent::getDescription()"</span>;
        <span class="br0">}</span>
    <span class="br0">}</span>
 
    abstract <span class="kw4">class</span> Decorator : IWindowObject
    <span class="br0">{</span>
        <span class="kw1">protected</span> IWindowObject _decoratedWindow = <span class="kw1">null</span>; <span class="co1">// the object being decorated</span>
 
        <span class="kw1">public</span> Decorator<span class="br0">(</span>IWindowObject decoratedWindow<span class="br0">)</span>
        <span class="br0">{</span>
            _decoratedWindow = decoratedWindow;
        <span class="br0">}</span>
 
        <span class="kw1">public</span> <span class="kw1">virtual</span> <span class="kw1">void</span> Draw<span class="br0">(</span><span class="br0">)</span>
        <span class="br0">{</span>
            _decoratedWindow.<span class="me1">Draw</span><span class="br0">(</span><span class="br0">)</span>;
            Console.<span class="me1">WriteLine</span><span class="br0">(</span><span class="st0">"<span class="es0">\t</span>Decorator::draw() "</span><span class="br0">)</span>;
        <span class="br0">}</span>
 
        <span class="kw1">public</span> <span class="kw1">virtual</span> <span class="kw4">String</span> GetDescription<span class="br0">(</span><span class="br0">)</span> <span class="co1">// returns a description of the object</span>
        <span class="br0">{</span>
            <span class="kw1">return</span> _decoratedWindow.<span class="me1">GetDescription</span><span class="br0">(</span><span class="br0">)</span> + <span class="st0">"<span class="es0">\n</span><span class="es0">\t</span>"</span> + <span class="st0">"Decorator::getDescription() "</span>;
        <span class="br0">}</span>
    <span class="br0">}</span>
 
    <span class="co1">// the first decorator </span>
    <span class="kw4">class</span> DecorationA : Decorator
    <span class="br0">{</span>
        <span class="kw1">public</span> DecorationA<span class="br0">(</span>IWindowObject decoratedWindow<span class="br0">)</span>
            : <span class="kw1">base</span><span class="br0">(</span>decoratedWindow<span class="br0">)</span>
        <span class="br0">{</span>
        <span class="br0">}</span>
 
        <span class="kw1">public</span> <span class="kw1">override</span> <span class="kw1">void</span> Draw<span class="br0">(</span><span class="br0">)</span>
        <span class="br0">{</span>
            <span class="kw1">base</span>.<span class="me1">Draw</span><span class="br0">(</span><span class="br0">)</span>;
            DecorationAStuff<span class="br0">(</span><span class="br0">)</span>;
        <span class="br0">}</span>
 
        <span class="kw1">private</span> <span class="kw1">void</span> DecorationAStuff<span class="br0">(</span><span class="br0">)</span>
        <span class="br0">{</span>
            Console.<span class="me1">WriteLine</span><span class="br0">(</span><span class="st0">"<span class="es0">\t</span><span class="es0">\t</span>doing DecorationA things"</span><span class="br0">)</span>;
        <span class="br0">}</span>
 
        <span class="kw1">public</span> <span class="kw1">override</span> <span class="kw4">String</span> GetDescription<span class="br0">(</span><span class="br0">)</span>
        <span class="br0">{</span>
            <span class="kw1">return</span> <span class="kw1">base</span>.<span class="me1">GetDescription</span><span class="br0">(</span><span class="br0">)</span> + <span class="st0">"<span class="es0">\n</span><span class="es0">\t</span><span class="es0">\t</span>including "</span> + <span class="kw1">this</span>.<span class="me1">ToString</span><span class="br0">(</span><span class="br0">)</span>;
        <span class="br0">}</span>
 
    <span class="br0">}</span><span class="co1">// end  class ConcreteDecoratorA : Decorator</span>
 
    <span class="kw4">class</span> DecorationB : Decorator
    <span class="br0">{</span>
        <span class="kw1">public</span> DecorationB<span class="br0">(</span>IWindowObject decoratedWindow<span class="br0">)</span>
            : <span class="kw1">base</span><span class="br0">(</span>decoratedWindow<span class="br0">)</span>
        <span class="br0">{</span>
        <span class="br0">}</span>
 
        <span class="kw1">public</span> <span class="kw1">override</span> <span class="kw1">void</span> Draw<span class="br0">(</span><span class="br0">)</span>
        <span class="br0">{</span>
            <span class="kw1">base</span>.<span class="me1">Draw</span><span class="br0">(</span><span class="br0">)</span>;
            DecorationBStuff<span class="br0">(</span><span class="br0">)</span>;
        <span class="br0">}</span>
 
        <span class="kw1">private</span> <span class="kw1">void</span> DecorationBStuff<span class="br0">(</span><span class="br0">)</span>
        <span class="br0">{</span>
            Console.<span class="me1">WriteLine</span><span class="br0">(</span><span class="st0">"<span class="es0">\t</span><span class="es0">\t</span>doing DecorationB things"</span><span class="br0">)</span>;
        <span class="br0">}</span>
 
        <span class="kw1">public</span> <span class="kw1">override</span> <span class="kw4">String</span> GetDescription<span class="br0">(</span><span class="br0">)</span>
        <span class="br0">{</span>
            <span class="kw1">return</span> <span class="kw1">base</span>.<span class="me1">GetDescription</span><span class="br0">(</span><span class="br0">)</span> + <span class="st0">"<span class="es0">\n</span><span class="es0">\t</span><span class="es0">\t</span>including "</span> + <span class="kw1">this</span>.<span class="me1">ToString</span><span class="br0">(</span><span class="br0">)</span>;
        <span class="br0">}</span>
 
    <span class="br0">}</span><span class="co1">// end  class DecorationB : Decorator</span>
 
    <span class="kw4">class</span> DecorationC : Decorator
    <span class="br0">{</span>
        <span class="kw1">public</span> DecorationC<span class="br0">(</span>IWindowObject decoratedWindow<span class="br0">)</span>
            : <span class="kw1">base</span><span class="br0">(</span>decoratedWindow<span class="br0">)</span>
        <span class="br0">{</span>
        <span class="br0">}</span>
 
        <span class="kw1">public</span> <span class="kw1">override</span> <span class="kw1">void</span> Draw<span class="br0">(</span><span class="br0">)</span>
        <span class="br0">{</span>
            <span class="kw1">base</span>.<span class="me1">Draw</span><span class="br0">(</span><span class="br0">)</span>;
            DecorationCStuff<span class="br0">(</span><span class="br0">)</span>;
        <span class="br0">}</span>
 
        <span class="kw1">private</span> <span class="kw1">void</span> DecorationCStuff<span class="br0">(</span><span class="br0">)</span>
        <span class="br0">{</span>
            Console.<span class="me1">WriteLine</span><span class="br0">(</span><span class="st0">"<span class="es0">\t</span><span class="es0">\t</span>doing DecorationC things"</span><span class="br0">)</span>;
        <span class="br0">}</span>
 
        <span class="kw1">public</span> <span class="kw1">override</span> <span class="kw4">String</span> GetDescription<span class="br0">(</span><span class="br0">)</span>
        <span class="br0">{</span>
            <span class="kw1">return</span> <span class="kw1">base</span>.<span class="me1">GetDescription</span><span class="br0">(</span><span class="br0">)</span> + <span class="st0">"<span class="es0">\n</span><span class="es0">\t</span><span class="es0">\t</span>including "</span> + <span class="kw1">this</span>.<span class="me1">ToString</span><span class="br0">(</span><span class="br0">)</span>;
        <span class="br0">}</span>
 
    <span class="br0">}</span><span class="co1">// end  class DecorationC : Decorator</span>
 
    <span class="kw4">class</span> Program
    <span class="br0">{</span>
        <span class="kw1">static</span> <span class="kw1">void</span> Main<span class="br0">(</span><span class="kw4">string</span><span class="br0">[</span><span class="br0">]</span> args<span class="br0">)</span>
        <span class="br0">{</span>
            IWindowObject window = <span class="kw3">new</span> DecorationA<span class="br0">(</span><span class="kw3">new</span> ControlComponent<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>;
            window = <span class="kw3">new</span> DecorationB<span class="br0">(</span>window<span class="br0">)</span>;
            window = <span class="kw3">new</span> DecorationC<span class="br0">(</span>window<span class="br0">)</span>;
            window.<span class="me1">Draw</span><span class="br0">(</span><span class="br0">)</span>;
            window.<span class="me1">GetDescription</span><span class="br0">(</span><span class="br0">)</span>;
            Console.<span class="me1">ReadLine</span><span class="br0">(</span><span class="br0">)</span>;
        <span class="br0">}</span>
    <span class="br0">}</span>
<span class="br0">}</span><span class="co1">// end of namespace GSL_Decorator_pattern</span>
</pre></div>
<p><a name="Python" id="Python"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Decorator_pattern&amp;action=edit&amp;section=7" title="Edit section: Python">edit</a>]</span> <span class="mw-headline">Python</span></h3>
<div dir="ltr" style="text-align: left;">
<pre class="source-python">
<span class="kw1">class</span> Coffee:
    <span class="kw1">def</span> cost<span class="br0">(</span><span class="kw2">self</span><span class="br0">)</span>:
        <span class="kw1">return</span> <span class="nu0">1</span>
 
<span class="kw1">class</span> Milk:
    <span class="kw1">def</span> <span class="kw4">__init__</span><span class="br0">(</span><span class="kw2">self</span>, coffee<span class="br0">)</span>:
        <span class="kw2">self</span>.<span class="me1">coffee</span> = coffee
 
    <span class="kw1">def</span> cost<span class="br0">(</span><span class="kw2">self</span><span class="br0">)</span>:
        <span class="kw1">return</span> <span class="kw2">self</span>.<span class="me1">coffee</span>.<span class="me1">cost</span><span class="br0">(</span><span class="br0">)</span> + .<span class="nu0">5</span>
 
<span class="kw1">class</span> Whip:
    <span class="kw1">def</span> <span class="kw4">__init__</span><span class="br0">(</span><span class="kw2">self</span>, coffee<span class="br0">)</span>:
        <span class="kw2">self</span>.<span class="me1">coffee</span> = coffee
 
    <span class="kw1">def</span> cost<span class="br0">(</span><span class="kw2">self</span><span class="br0">)</span>:
        <span class="kw1">return</span> <span class="kw2">self</span>.<span class="me1">coffee</span>.<span class="me1">cost</span><span class="br0">(</span><span class="br0">)</span> + .<span class="nu0">7</span>
 
<span class="kw1">class</span> Sprinkles:
    <span class="kw1">def</span> <span class="kw4">__init__</span><span class="br0">(</span><span class="kw2">self</span>, coffee<span class="br0">)</span>:
        <span class="kw2">self</span>.<span class="me1">coffee</span> = coffee
 
    <span class="kw1">def</span> cost<span class="br0">(</span><span class="kw2">self</span><span class="br0">)</span>:
        <span class="kw1">return</span> <span class="kw2">self</span>.<span class="me1">coffee</span>.<span class="me1">cost</span><span class="br0">(</span><span class="br0">)</span> + .<span class="nu0">2</span>
 
<span class="co1"># Example 1</span>
coffee = Milk<span class="br0">(</span>Coffee<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>
<span class="kw1">print</span> <span class="st0">"Coffee with milk : "</span>+<span class="kw2">str</span><span class="br0">(</span>coffee.<span class="me1">cost</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>
 
<span class="co1"># Example 2</span>
coffee = Sprinkles<span class="br0">(</span>Whip<span class="br0">(</span>Milk<span class="br0">(</span>Coffee<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>
<span class="kw1">print</span> <span class="st0">"Coffee with milk, whip and sprinkles : "</span>+<span class="kw2">str</span><span class="br0">(</span>coffee.<span class="me1">cost</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>
</pre></div>
<p><a name="PHP" id="PHP"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Decorator_pattern&amp;action=edit&amp;section=8" title="Edit section: PHP">edit</a>]</span> <span class="mw-headline">PHP</span></h3>
<div dir="ltr" style="text-align: left;">
<pre class="source-php">
<span class="co1">// Component</span>
<span class="kw2">interface</span> MenuItem<span class="br0">{</span>
	<span class="kw2">public</span> <span class="kw2">function</span> cost<span class="br0">(</span><span class="br0">)</span>;
<span class="br0">}</span>
 
<span class="co1">// Concrete Component</span>
<span class="kw2">class</span> Coffee implements MenuItem<span class="br0">{</span>
	<span class="kw2">private</span> <span class="re0">$_cost</span> = <span class="nu0">1.00</span>;
 
	<span class="kw2">public</span> <span class="kw2">function</span> cost<span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
		<span class="kw1">return</span> <span class="re0">$this</span>-&gt;_cost;
	<span class="br0">}</span>
 
<span class="br0">}</span>
 
<span class="co1">// Decorator</span>
abstract <span class="kw2">class</span> MenuDecorator <span class="kw2">extends</span> Coffee<span class="br0">{</span>
	protected <span class="re0">$_component</span>;
 
	<span class="kw2">public</span> <span class="kw2">function</span> __construct<span class="br0">(</span>MenuItem <span class="re0">$component</span><span class="br0">)</span><span class="br0">{</span>
 
		<span class="re0">$this</span>-&gt;_component = <span class="re0">$component</span>;
 
	<span class="br0">}</span>
 
<span class="br0">}</span>
 
<span class="co1">// Concrete Decorator</span>
<span class="kw2">class</span> CoffeeMilkDecorator <span class="kw2">extends</span> MenuDecorator<span class="br0">{</span>
 
	<span class="kw2">public</span> <span class="kw2">function</span> cost<span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
 
		<span class="kw1">return</span> <span class="re0">$this</span>-&gt;_component-&gt;<span class="me1">cost</span><span class="br0">(</span><span class="br0">)</span> + <span class="nu0">0.5</span>;
 
	<span class="br0">}</span>
 
<span class="br0">}</span>
 
<span class="co1">// Concrete Decorator</span>
<span class="kw2">class</span> CoffeeWhipDecorator <span class="kw2">extends</span> MenuDecorator<span class="br0">{</span>
 
	<span class="kw2">public</span> <span class="kw2">function</span> cost<span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
 
		<span class="kw1">return</span> <span class="re0">$this</span>-&gt;_component-&gt;<span class="me1">cost</span><span class="br0">(</span><span class="br0">)</span> + <span class="nu0">0.7</span>;
 
	<span class="br0">}</span>
 
<span class="br0">}</span>
 
<span class="co1">// Concrete Decorator</span>
<span class="kw2">class</span> CoffeeSprinklesDecorator <span class="kw2">extends</span> MenuDecorator<span class="br0">{</span>
 
	<span class="kw2">public</span> <span class="kw2">function</span> cost<span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
 
		<span class="kw1">return</span> <span class="re0">$this</span>-&gt;_component-&gt;<span class="me1">cost</span><span class="br0">(</span><span class="br0">)</span> + <span class="nu0">0.2</span>;
 
	<span class="br0">}</span>
 
<span class="br0">}</span>
 
 
<span class="co1">// Example 1   </span>
<span class="re0">$coffee</span> = <span class="kw2">new</span> CoffeeMilkDecorator<span class="br0">(</span><span class="kw2">new</span> Coffee<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>;
<span class="kw3">print</span> <span class="st0">"Coffee with milk : "</span>.<span class="re0">$coffee</span>-&gt;<span class="me1">cost</span><span class="br0">(</span><span class="br0">)</span>;
 
<span class="co1">// Example 2</span>
<span class="re0">$coffee</span> = <span class="kw2">new</span> CoffeeWhipDecorator<span class="br0">(</span><span class="kw2">new</span> CoffeeMilkDecorator<span class="br0">(</span><span class="kw2">new</span> CoffeeSprinklesDecorator<span class="br0">(</span><span class="kw2">new</span> Coffee<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>;
<span class="kw3">print</span> <span class="st0">"Coffee with milk, whip and sprinkles : "</span>.<span class="re0">$coffee</span>-&gt;<span class="me1">cost</span><span class="br0">(</span><span class="br0">)</span>;
</pre></div>
<p><a name="Dynamic_Languages" id="Dynamic_Languages"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Decorator_pattern&amp;action=edit&amp;section=9" title="Edit section: Dynamic Languages">edit</a>]</span> <span class="mw-headline">Dynamic Languages</span></h3>
<p>The decorator pattern can also be implemented in dynamic languages with no interfaces or traditional OOP inheritance.</p>
<p>JavaScript coffee shop:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
<span class="co1">//Class to be decorated</span>
<span class="kw2">function</span> Coffee<span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
    <span class="kw1">this</span>.<span class="me1">cost</span> = <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
	<span class="kw1">return</span> <span class="nu0">1</span>;
    <span class="br0">}</span>;
<span class="br0">}</span>
 
<span class="co1">//Decorator A</span>
<span class="kw2">function</span> Milk<span class="br0">(</span>coffee<span class="br0">)</span><span class="br0">{</span>
    <span class="kw1">this</span>.<span class="me1">cost</span> = <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
	<span class="kw1">return</span> coffee.<span class="me1">cost</span><span class="br0">(</span><span class="br0">)</span> + <span class="nu0">0.5</span>;
    <span class="br0">}</span>;	
<span class="br0">}</span>
 
<span class="co1">//Decorator B</span>
<span class="kw2">function</span> Whip<span class="br0">(</span>coffee<span class="br0">)</span><span class="br0">{</span>
    <span class="kw1">this</span>.<span class="me1">cost</span> = <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
	<span class="kw1">return</span> coffee.<span class="me1">cost</span><span class="br0">(</span><span class="br0">)</span> + <span class="nu0">0.7</span>;
    <span class="br0">}</span>;
<span class="br0">}</span>
 
<span class="co1">//Decorator C</span>
<span class="kw2">function</span> Sprinkles<span class="br0">(</span>coffee<span class="br0">)</span><span class="br0">{</span>
    <span class="kw1">this</span>.<span class="me1">cost</span> = <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
	<span class="kw1">return</span> coffee.<span class="me1">cost</span><span class="br0">(</span><span class="br0">)</span> + <span class="nu0">0.2</span>;
    <span class="br0">}</span>;
<span class="br0">}</span>
 
<span class="co1">//Here's one way of using it</span>
<span class="kw2">var</span> coffee = <span class="kw2">new</span> Milk<span class="br0">(</span><span class="kw2">new</span> Whip<span class="br0">(</span><span class="kw2">new</span> Sprinkles<span class="br0">(</span><span class="kw2">new</span> Coffee<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>;
<span class="kw3">alert</span><span class="br0">(</span> coffee.<span class="me1">cost</span><span class="br0">(</span><span class="br0">)</span> <span class="br0">)</span>;
 
<span class="co1">//Here's another</span>
<span class="kw2">var</span> coffee = <span class="kw2">new</span> Coffee<span class="br0">(</span><span class="br0">)</span>;
coffee = <span class="kw2">new</span> Sprinkles<span class="br0">(</span>coffee<span class="br0">)</span>;
coffee = <span class="kw2">new</span> Whip<span class="br0">(</span>coffee<span class="br0">)</span>;
coffee = <span class="kw2">new</span> Milk<span class="br0">(</span>coffee<span class="br0">)</span>;
<span class="kw3">alert</span><span class="br0">(</span>coffee.<span class="me1">cost</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>;
</pre></div>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Decorator_pattern&amp;action=edit&amp;section=10" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<ul>
<li><a href="/wiki/Composite_pattern" title="Composite pattern">Composite pattern</a></li>
<li><a href="/wiki/Adapter_pattern" title="Adapter pattern">Adapter pattern</a></li>
<li><a href="/wiki/Abstract_class" title="Abstract class" class="mw-redirect">Abstract class</a></li>
<li><a href="/wiki/Abstract_factory" title="Abstract factory" class="mw-redirect">Abstract factory</a></li>
<li><a href="/wiki/Immutable_object" title="Immutable object">Immutable object</a></li>
</ul>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Decorator_pattern&amp;action=edit&amp;section=11" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<ul>
<li><a href="http://c2.com/cgi/wiki?DecoratorPattern" class="external text" title="http://c2.com/cgi/wiki?DecoratorPattern" rel="nofollow">Decorator pattern description from the Portland Pattern Repository</a></li>
<li>Article "<a href="http://exciton.cs.rice.edu/JavaResources/DesignPatterns/DecoratorPattern.htm" class="external text" title="http://exciton.cs.rice.edu/JavaResources/DesignPatterns/DecoratorPattern.htm" rel="nofollow">The Decorator Design Pattern</a>" (Java) by Antonio García and <a href="/wiki/Stephen_Wong" title="Stephen Wong">Stephen Wong</a></li>
<li>Article "<a href="http://www.onjava.com/pub/a/onjava/2003/02/05/decorator.html" class="external text" title="http://www.onjava.com/pub/a/onjava/2003/02/05/decorator.html" rel="nofollow">Using the Decorator Pattern</a>" (Java) by <a href="/w/index.php?title=Budi_Kurniawan&amp;action=edit&amp;redlink=1" class="new" title="Budi Kurniawan (page does not exist)">Budi Kurniawan</a></li>
<li><a href="http://www.lepus.org.uk/ref/companion/Decorator.xml" class="external text" title="http://www.lepus.org.uk/ref/companion/Decorator.xml" rel="nofollow">Decorator in UML and in LePUS3 (a formal modelling language)</a></li>
<li>Sample Chapter "<a href="http://www.informit.com/articles/article.aspx?p=31350" class="external text" title="http://www.informit.com/articles/article.aspx?p=31350" rel="nofollow">C# Design Patterns: The Decorator Pattern</a>" (C#) by <a href="/w/index.php?title=James_W._Cooper&amp;action=edit&amp;redlink=1" class="new" title="James W. Cooper (page does not exist)">James W. Cooper</a></li>
<li><a href="http://phppatterns.com/index.php/article/articleview/30/1/1" class="external text" title="http://phppatterns.com/index.php/article/articleview/30/1/1" rel="nofollow">A PHP approach</a> (PHP)</li>
<li><a href="http://www.castle-cadenza.demon.co.uk/decorate.htm" class="external text" title="http://www.castle-cadenza.demon.co.uk/decorate.htm" rel="nofollow">A Delphi approach</a> (Delphi)</li>
<li><a href="http://www.phpied.com/a-javascript-implementation-of-the-decorator-pattern/" class="external text" title="http://www.phpied.com/a-javascript-implementation-of-the-decorator-pattern/" rel="nofollow">A JavaScript implementation</a></li>
<li><a href="http://www.fsw.com/Jt/Jt.htm" class="external text" title="http://www.fsw.com/Jt/Jt.htm" rel="nofollow">Jt</a> J2EE Pattern Oriented Framework</li>
<li><a href="http://www.lukeredpath.co.uk/2006/9/6/decorator-pattern-with-ruby-in-8-lines" class="external text" title="http://www.lukeredpath.co.uk/2006/9/6/decorator-pattern-with-ruby-in-8-lines" rel="nofollow">Decorator Pattern with Ruby in 8 Lines</a> (Ruby)</li>
<li><a href="http://perfectjpattern.sourceforge.net/dp-decorator.html" class="external text" title="http://perfectjpattern.sourceforge.net/dp-decorator.html" rel="nofollow">PerfectJPattern Open Source Project</a>, Provides componentized implementation of the Decorator Pattern in Java</li>
</ul>
<p><br /></p>
<table class="navbox" cellspacing="0" style=";">
<tr>
<td style="padding:2px;">
<table cellspacing="0" class="nowraplinks collapsible autocollapse" style="width:100%;background:transparent;color:inherit;;">
<tr>
<th style=";" colspan="2" class="navbox-title">
<div style="float:left; width:6em;text-align:left;">
<div class="noprint plainlinksneverexpand navbar" style="background:none; padding:0; font-weight:normal;;;border:none;; font-size:xx-small;"><a href="/wiki/Template:Design_Patterns_Patterns" title="Template:Design Patterns Patterns"><span title="View this template" style=";;border:none;">v</span></a>&#160;<span style="font-size:80%;">•</span>&#160;<a href="/w/index.php?title=Template_talk:Design_Patterns_Patterns&amp;action=edit&amp;redlink=1" class="new" title="Template talk:Design Patterns Patterns (page does not exist)"><span title="Discussion about this template" style=";;border:none;">d</span></a>&#160;<span style="font-size:80%;">•</span>&#160;<a href="http://en.wikipedia.org/w/index.php?title=Template:Design_Patterns_Patterns&amp;action=edit" class="external text" title="http://en.wikipedia.org/w/index.php?title=Template:Design_Patterns_Patterns&amp;action=edit" rel="nofollow"><span title="Edit this template" style=";;border:none;;">e</span></a></div>
</div>
<span style="font-size:110%;"><a href="/wiki/Design_pattern_(computer_science)" title="Design pattern (computer science)">Design patterns</a> in the book <i><a href="/wiki/Design_Patterns_(book)" title="Design Patterns (book)">Design Patterns</a></i></span></th>
</tr>
<tr style="height:2px;">
<td></td>
</tr>
<tr>
<td class="navbox-group" style=";;">Creational</td>
<td style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<div style="padding:0em 0.25em"><a href="/wiki/Abstract_factory_pattern" title="Abstract factory pattern">Abstract factory</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Builder_pattern" title="Builder pattern">Builder</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Factory_method_pattern" title="Factory method pattern">Factory</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Prototype_pattern" title="Prototype pattern">Prototype</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Singleton_pattern" title="Singleton pattern">Singleton</a></div>
</td>
</tr>
<tr style="height:2px">
<td></td>
</tr>
<tr>
<td class="navbox-group" style=";;">Structural</td>
<td style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<div style="padding:0em 0.25em"><a href="/wiki/Adapter_pattern" title="Adapter pattern">Adapter</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Bridge_pattern" title="Bridge pattern">Bridge</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Composite_pattern" title="Composite pattern">Composite</a><span style="font-weight:bold;">&#160;·</span> <strong class="selflink">Decorator</strong><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Facade_pattern" title="Facade pattern">Facade</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Flyweight_pattern" title="Flyweight pattern">Flyweight</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Proxy_pattern" title="Proxy pattern">Proxy</a></div>
</td>
</tr>
<tr style="height:2px">
<td></td>
</tr>
<tr>
<td class="navbox-group" style=";;">Behavioral</td>
<td style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<div style="padding:0em 0.25em"><a href="/wiki/Chain-of-responsibility_pattern" title="Chain-of-responsibility pattern">Chain of responsibility</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Command_pattern" title="Command pattern">Command</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Interpreter_pattern" title="Interpreter pattern">Interpreter</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Iterator_pattern" title="Iterator pattern">Iterator</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Mediator_pattern" title="Mediator pattern">Mediator</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Memento_pattern" title="Memento pattern">Memento</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Observer_pattern" title="Observer pattern">Observer</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/State_pattern" title="State pattern">State</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Strategy_pattern" title="Strategy pattern">Strategy</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Template_method_pattern" title="Template method pattern">Template method</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Visitor_pattern" title="Visitor pattern">Visitor</a></div>
</td>
</tr>
</table>
</td>
</tr>
</table>


<!-- 
NewPP limit report
Preprocessor node count: 456/1000000
Post-expand include size: 14493/2048000 bytes
Template argument size: 6032/2048000 bytes
Expensive parser function count: 0/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:164854-0!1!0!default!!en!2 and timestamp 20090404223246 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Decorator_pattern">http://en.wikipedia.org/wiki/Decorator_pattern</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Software_design_patterns" title="Category:Software design patterns">Software design patterns</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_example_Java_code" title="Category:Articles with example Java code">Articles with example Java code</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Decorator_pattern" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Decorator_pattern" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Decorator_pattern&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Decorator_pattern&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Decorator_pattern" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Decorator_pattern" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Decorator_pattern" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Decorator_pattern&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Decorator_pattern&amp;oldid=281786613" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Decorator_pattern&amp;id=281786613">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/Decorator">Deutsch</a></li>
				<li class="interwiki-es"><a href="http://es.wikipedia.org/wiki/Decorator_(patr%C3%B3n_de_dise%C3%B1o)">Español</a></li>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/D%C3%A9corateur_(patron_de_conception)">Français</a></li>
				<li class="interwiki-ko"><a href="http://ko.wikipedia.org/wiki/Decorator_%ED%8C%A8%ED%84%B4">한국어</a></li>
				<li class="interwiki-it"><a href="http://it.wikipedia.org/wiki/Decorator">Italiano</a></li>
				<li class="interwiki-nl"><a href="http://nl.wikipedia.org/wiki/Decorator">Nederlands</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/Decorator_%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3">日本語</a></li>
				<li class="interwiki-pl"><a href="http://pl.wikipedia.org/wiki/Dekorator_(wzorzec_projektowy)">Polski</a></li>
				<li class="interwiki-ru"><a href="http://ru.wikipedia.org/wiki/%D0%94%D0%B5%D0%BA%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80_(%D1%88%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD_%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)">Русский</a></li>
				<li class="interwiki-vi"><a href="http://vi.wikipedia.org/wiki/Decorator_pattern">Tiếng Việt</a></li>
				<li class="interwiki-uk"><a href="http://uk.wikipedia.org/wiki/%D0%94%D0%B5%D0%BA%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80_(%D1%88%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD_%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D1%83%D0%B2%D0%B0%D0%BD%D0%BD%D1%8F)">Українська</a></li>
				<li class="interwiki-zh"><a href="http://zh.wikipedia.org/wiki/%E4%BF%AE%E9%A5%B0%E6%A8%A1%E5%BC%8F">中文</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 4 April 2009, at 22:32.</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv137 in 0.063 secs. --></body></html>
