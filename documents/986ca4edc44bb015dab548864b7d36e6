<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Factory method pattern,Articles with unsourced statements since March 2009,Design Patterns Patterns,ADO.NET,Abstract factory pattern,Adapter pattern,Associative array,Bertrand Meyer,Bridge pattern,Builder pattern,Chain-of-responsibility pattern" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Factory_method_pattern&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Factory_method_pattern&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Factory method pattern - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Factory_method_pattern";
		var wgTitle = "Factory method pattern";
		var wgAction = "view";
		var wgArticleId = "164850";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281510232;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
<style type="text/css">/*<![CDATA[*/
.source-java {line-height: normal;}
.source-java li, .source-java pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for java
 * CSS class: source-java, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-java .de1, .source-java .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-java  {}
.source-java .head {}
.source-java .foot {}
.source-java .imp {font-weight: bold; color: red;}
.source-java .ln-xtra {color: #cc0; background-color: #ffc;}
.source-java li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-java li.li2 {font-weight: bold;}
.source-java .kw1 {color: #b1b100;}
.source-java .kw2 {color: #000000; font-weight: bold;}
.source-java .kw3 {color: #aaaadd; font-weight: bold;}
.source-java .kw4 {color: #993333;}
.source-java .co1 {color: #808080; font-style: italic;}
.source-java .co2 {color: #a1a100;}
.source-java .coMULTI {color: #808080; font-style: italic;}
.source-java .es0 {color: #000099; font-weight: bold;}
.source-java .br0 {color: #66cc66;}
.source-java .st0 {color: #ff0000;}
.source-java .nu0 {color: #cc66cc;}
.source-java .me1 {color: #006600;}
.source-java .me2 {color: #006600;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-csharp {line-height: normal;}
.source-csharp li, .source-csharp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for csharp
 * CSS class: source-csharp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-csharp .de1, .source-csharp .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-csharp  {}
.source-csharp .head {}
.source-csharp .foot {}
.source-csharp .imp {font-weight: bold; color: red;}
.source-csharp .ln-xtra {color: #cc0; background-color: #ffc;}
.source-csharp li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-csharp li.li2 {font-weight: bold;}
.source-csharp .kw1 {color: #0600FF;}
.source-csharp .kw2 {color: #FF8000; font-weight: bold;}
.source-csharp .kw3 {color: #008000;}
.source-csharp .kw4 {color: #FF0000;}
.source-csharp .kw5 {color: #000000;}
.source-csharp .co1 {color: #008080; font-style: italic;}
.source-csharp .co2 {color: #008080;}
.source-csharp .coMULTI {color: #008080; font-style: italic;}
.source-csharp .es0 {color: #008080; font-weight: bold;}
.source-csharp .br0 {color: #008000;}
.source-csharp .st0 {color: #808080;}
.source-csharp .nu0 {color: #FF0000;}
.source-csharp .me1 {color: #0000FF;}
.source-csharp .me2 {color: #0000FF;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-cpp {line-height: normal;}
.source-cpp li, .source-cpp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for cpp
 * CSS class: source-cpp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-cpp .de1, .source-cpp .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-cpp  {}
.source-cpp .head {}
.source-cpp .foot {}
.source-cpp .imp {font-weight: bold; color: red;}
.source-cpp .ln-xtra {color: #cc0; background-color: #ffc;}
.source-cpp li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-cpp li.li2 {font-weight: bold;}
.source-cpp .kw1 {color: #0000ff;}
.source-cpp .kw2 {color: #0000ff;}
.source-cpp .kw3 {color: #0000dd;}
.source-cpp .kw4 {color: #0000ff;}
.source-cpp .co1 {color: #ff0000;}
.source-cpp .co2 {color: #339900;}
.source-cpp .coMULTI {color: #ff0000; font-style: italic;}
.source-cpp .es0 {color: #666666; font-weight: bold;}
.source-cpp .br0 {color: #000000;}
.source-cpp .st0 {color: #666666;}
.source-cpp .nu0 {color: #0000dd;}
.source-cpp .me1 {color: #00eeff;}
.source-cpp .me2 {color: #00eeff;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-javascript {line-height: normal;}
.source-javascript li, .source-javascript pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for javascript
 * CSS class: source-javascript, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-javascript .de1, .source-javascript .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-javascript  {}
.source-javascript .head {}
.source-javascript .foot {}
.source-javascript .imp {font-weight: bold; color: red;}
.source-javascript .ln-xtra {color: #cc0; background-color: #ffc;}
.source-javascript li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-javascript li.li2 {font-weight: bold;}
.source-javascript .kw1 {color: #000066; font-weight: bold;}
.source-javascript .kw2 {color: #003366; font-weight: bold;}
.source-javascript .kw3 {color: #000066;}
.source-javascript .co1 {color: #009900; font-style: italic;}
.source-javascript .coMULTI {color: #009900; font-style: italic;}
.source-javascript .es0 {color: #000099; font-weight: bold;}
.source-javascript .br0 {color: #66cc66;}
.source-javascript .st0 {color: #3366CC;}
.source-javascript .nu0 {color: #CC0000;}
.source-javascript .me1 {color: #006600;}
.source-javascript .sc0 {}
.source-javascript .sc1 {}
.source-javascript .sc2 {}
.source-javascript .sc3 {}
.source-javascript .re0 {color: #0066FF;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-ruby {line-height: normal;}
.source-ruby li, .source-ruby pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for ruby
 * CSS class: source-ruby, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-ruby .de1, .source-ruby .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-ruby  {}
.source-ruby .head {}
.source-ruby .foot {}
.source-ruby .imp {font-weight: bold; color: red;}
.source-ruby .ln-xtra {color: #cc0; background-color: #ffc;}
.source-ruby li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-ruby li.li2 {font-weight: bold;}
.source-ruby .kw1 {color:#9966CC; font-weight:bold;}
.source-ruby .kw2 {color:#0000FF; font-weight:bold;}
.source-ruby .kw3 {color:#CC0066; font-weight:bold;}
.source-ruby .kw4 {color:#CC00FF; font-weight:bold;}
.source-ruby .co1 {color:#008000; font-style:italic;}
.source-ruby .coMULTI {color:#000080; font-style:italic;}
.source-ruby .es0 {color:#000099;}
.source-ruby .br0 {color:#006600; font-weight:bold;}
.source-ruby .st0 {color:#996600;}
.source-ruby .nu0 {color:#006666;}
.source-ruby .me1 {color:#9900CC;}
.source-ruby .sc0 {}
.source-ruby .sc1 {}
.source-ruby .sc2 {}
.source-ruby .re0 {color:#ff6633; font-weight:bold;}
.source-ruby .re1 {color:#0066ff; font-weight:bold;}
.source-ruby .re2 {color:#6666ff; font-weight:bold;}
.source-ruby .re3 {color:#ff3333; font-weight:bold;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-perl {line-height: normal;}
.source-perl li, .source-perl pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for perl
 * CSS class: source-perl, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-perl .de1, .source-perl .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-perl  {}
.source-perl .head {}
.source-perl .foot {}
.source-perl .imp {font-weight: bold; color: red;}
.source-perl .ln-xtra {color: #cc0; background-color: #ffc;}
.source-perl li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-perl li.li2 {font-weight: bold;}
.source-perl .kw1 {color: #b1b100;}
.source-perl .kw2 {color: #000000; font-weight: bold;}
.source-perl .kw3 {color: #000066;}
.source-perl .co1 {color: #808080; font-style: italic;}
.source-perl .coMULTI {color: #808080; font-style: italic;}
.source-perl .es0 {color: #000099; font-weight: bold;}
.source-perl .br0 {color: #66cc66;}
.source-perl .st0 {color: #ff0000;}
.source-perl .nu0 {color: #cc66cc;}
.source-perl .me1 {color: #006600;}
.source-perl .me2 {color: #006600;}
.source-perl .re0 {color: #0000ff;}
.source-perl .re4 {color: #009999;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-python {line-height: normal;}
.source-python li, .source-python pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for python
 * CSS class: source-python, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-python .de1, .source-python .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-python  {}
.source-python .head {}
.source-python .foot {}
.source-python .imp {font-weight: bold; color: red;}
.source-python .ln-xtra {color: #cc0; background-color: #ffc;}
.source-python li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-python li.li2 {font-weight: bold;}
.source-python .kw1 {color: #ff7700;font-weight:bold;}
.source-python .kw2 {color: #008000;}
.source-python .kw3 {color: #dc143c;}
.source-python .kw4 {color: #0000cd;}
.source-python .co1 {color: #808080; font-style: italic;}
.source-python .coMULTI {color: #808080; font-style: italic;}
.source-python .es0 {color: #000099; font-weight: bold;}
.source-python .br0 {color: #66cc66;}
.source-python .st0 {color: #483d8b;}
.source-python .nu0 {color: #ff4500;}
.source-python .me1 {color: black;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-php {line-height: normal;}
.source-php li, .source-php pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for php
 * CSS class: source-php, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-php .de1, .source-php .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-php  {}
.source-php .head {}
.source-php .foot {}
.source-php .imp {font-weight: bold; color: red;}
.source-php .ln-xtra {color: #cc0; background-color: #ffc;}
.source-php li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-php li.li2 {font-weight: bold;}
.source-php .kw1 {color: #b1b100;}
.source-php .kw2 {color: #000000; font-weight: bold;}
.source-php .kw3 {color: #000066;}
.source-php .co1 {color: #808080; font-style: italic;}
.source-php .co2 {color: #808080; font-style: italic;}
.source-php .coMULTI {color: #808080; font-style: italic;}
.source-php .es0 {color: #000099; font-weight: bold;}
.source-php .br0 {color: #66cc66;}
.source-php .st0 {color: #ff0000;}
.source-php .nu0 {color: #cc66cc;}
.source-php .me1 {color: #006600;}
.source-php .me2 {color: #006600;}
.source-php .sc0 {}
.source-php .sc1 {}
.source-php .sc2 {}
.source-php .sc3 {}
.source-php .re0 {color: #0000ff;}
.source-php .re1 {color: #ff0000}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-ocaml {line-height: normal;}
.source-ocaml li, .source-ocaml pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for ocaml
 * CSS class: source-ocaml, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-ocaml .de1, .source-ocaml .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-ocaml  {}
.source-ocaml .head {}
.source-ocaml .foot {}
.source-ocaml .imp {font-weight: bold; color: red;}
.source-ocaml .ln-xtra {color: #cc0; background-color: #ffc;}
.source-ocaml li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-ocaml li.li2 {font-weight: bold;}
.source-ocaml .kw1 {color: #06c; font-weight: bold;}
.source-ocaml .coMULTI {color: #5d478b; font-style: italic;}
.source-ocaml .br0 {color: #a52a2a;}
.source-ocaml .st0 {color: #3cb371;}
.source-ocaml .nu0 {color: #c6c;}
.source-ocaml .me1 {color: #060;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style>		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Factory_method_pattern skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Factory method pattern</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<div class="thumb tright">
<div class="thumbinner" style="width:302px;"><a href="/wiki/File:FactoryMethod.svg" class="image" title="Factory method in UML"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/a/a3/FactoryMethod.svg/300px-FactoryMethod.svg.png" width="300" height="177" border="0" class="thumbimage" /></a>
<div class="thumbcaption">
<div class="magnify"><a href="/wiki/File:FactoryMethod.svg" class="internal" title="Enlarge"><img src="/skins-1.5/common/images/magnify-clip.png" width="15" height="11" alt="" /></a></div>
Factory method in <a href="/wiki/Unified_Modeling_Language" title="Unified Modeling Language">UML</a></div>
</div>
</div>
<div class="thumb tright">
<div class="thumbinner" style="width:302px;"><a href="/wiki/File:Factory_Method_pattern_in_LePUS3.png" class="image" title="Factory Method in LePUS3"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/e/ee/Factory_Method_pattern_in_LePUS3.png/300px-Factory_Method_pattern_in_LePUS3.png" width="300" height="114" border="0" class="thumbimage" /></a>
<div class="thumbcaption">
<div class="magnify"><a href="/wiki/File:Factory_Method_pattern_in_LePUS3.png" class="internal" title="Enlarge"><img src="/skins-1.5/common/images/magnify-clip.png" width="15" height="11" alt="" /></a></div>
Factory Method in <a href="/wiki/Lepus3" title="Lepus3">LePUS3</a></div>
</div>
</div>
<p>The <b>factory method pattern</b> is an <a href="/wiki/Object-oriented" title="Object-oriented" class="mw-redirect">object-oriented</a> <a href="/wiki/Design_pattern_(computer_science)" title="Design pattern (computer science)">design pattern</a>. Like other <a href="/wiki/Creational_pattern" title="Creational pattern">creational patterns</a>, it deals with the problem of creating <a href="/wiki/Object_(computer_science)" title="Object (computer science)">objects</a> (products) without specifying the exact <a href="/wiki/Class_(computer_science)" title="Class (computer science)">class</a> of object that will be created. The factory method design pattern handles this problem by defining a separate <a href="/wiki/Method_(computer_science)" title="Method (computer science)">method</a> for creating the objects, whose <a href="/wiki/Subclass_(computer_science)" title="Subclass (computer science)">subclasses</a> can then override to specify the <a href="/wiki/Derived_type" title="Derived type">derived type</a> of product that will be created. More generally, the term <i>factory method</i> is often used to refer to any method whose main purpose is creation of objects.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Definition"><span class="tocnumber">1</span> <span class="toctext">Definition</span></a></li>
<li class="toclevel-1"><a href="#Common_usage"><span class="tocnumber">2</span> <span class="toctext">Common usage</span></a></li>
<li class="toclevel-1"><a href="#Other_benefits_and_variants"><span class="tocnumber">3</span> <span class="toctext">Other benefits and variants</span></a>
<ul>
<li class="toclevel-2"><a href="#Encapsulation"><span class="tocnumber">3.1</span> <span class="toctext">Encapsulation</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Limitations"><span class="tocnumber">4</span> <span class="toctext">Limitations</span></a></li>
<li class="toclevel-1"><a href="#Examples"><span class="tocnumber">5</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2"><a href="#Java"><span class="tocnumber">5.1</span> <span class="toctext">Java</span></a></li>
<li class="toclevel-2"><a href="#C.23"><span class="tocnumber">5.2</span> <span class="toctext">C#</span></a></li>
<li class="toclevel-2"><a href="#C.2B.2B"><span class="tocnumber">5.3</span> <span class="toctext">C++</span></a></li>
<li class="toclevel-2"><a href="#JavaScript"><span class="tocnumber">5.4</span> <span class="toctext">JavaScript</span></a></li>
<li class="toclevel-2"><a href="#Ruby"><span class="tocnumber">5.5</span> <span class="toctext">Ruby</span></a></li>
<li class="toclevel-2"><a href="#Perl"><span class="tocnumber">5.6</span> <span class="toctext">Perl</span></a></li>
<li class="toclevel-2"><a href="#Python"><span class="tocnumber">5.7</span> <span class="toctext">Python</span></a></li>
<li class="toclevel-2"><a href="#Php"><span class="tocnumber">5.8</span> <span class="toctext">Php</span></a></li>
<li class="toclevel-2"><a href="#Haskell"><span class="tocnumber">5.9</span> <span class="toctext">Haskell</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Uses"><span class="tocnumber">6</span> <span class="toctext">Uses</span></a></li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">7</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">8</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">9</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Definition" id="Definition"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Factory_method_pattern&amp;action=edit&amp;section=1" title="Edit section: Definition">edit</a>]</span> <span class="mw-headline">Definition</span></h2>
<p>The essence of the <a href="/wiki/Factory_Pattern" title="Factory Pattern" class="mw-redirect">Factory Pattern</a> is to "Define an interface for creating an object, but let the subclasses decide which class to instantiate. The Factory method lets a class defer instantiation to subclasses."</p>
<p><a name="Common_usage" id="Common_usage"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Factory_method_pattern&amp;action=edit&amp;section=2" title="Edit section: Common usage">edit</a>]</span> <span class="mw-headline">Common usage</span></h2>
<p>Factory methods are common in <b><a href="/wiki/Toolkit" title="Toolkit">toolkits</a></b> and <b><a href="/wiki/Framework" title="Framework">frameworks</a></b> where library code needs to create objects of types which may be subclassed by applications using the framework.</p>
<p>Parallel class hierarchies often require objects from one hierarchy to be able to create appropriate objects from <i>another</i>.</p>
<p>Factory methods are used in <a href="/wiki/Test-driven_development" title="Test-driven development">test-driven development</a> to allow classes to be put under test<sup id="cite_ref-0" class="reference"><a href="#cite_note-0" title=""><span>[</span>1<span>]</span></a></sup>. If such a class <code>Foo</code> creates another object <code>Dangerous</code> that can't be put under automated <a href="/wiki/Unit_test" title="Unit test" class="mw-redirect">unit tests</a> (perhaps it communicates with a production database that isn't always available), then the creation of <code>Dangerous</code> objects is placed in the <a href="/wiki/Virtual_function" title="Virtual function">virtual</a> factory method <code>CreateDangerous</code> in class <code>Foo</code>. For testing, <code>TestFoo</code> (a subclass of <code>Foo</code>) is then created, with the virtual factory method <code>CreateDangerous</code> overridden to create and return <code>FakeDangerous</code>, a <a href="/wiki/Fake_object" title="Fake object" class="mw-redirect">fake object</a>. Unit tests then use <code>TestFoo</code> to test the functionality of <code>Foo</code> without incurring the side effects of using a real <code>Dangerous</code> object.</p>
<p><a name="Other_benefits_and_variants" id="Other_benefits_and_variants"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Factory_method_pattern&amp;action=edit&amp;section=3" title="Edit section: Other benefits and variants">edit</a>]</span> <span class="mw-headline">Other benefits and variants</span></h2>
<p>Although the motivation behind the factory method pattern is to allow subclasses to choose which type of object to create, there are other benefits to using factory methods, many of which do not depend on subclassing. Therefore, it is common to define "factory methods" that are not polymorphic to create objects in order to gain these other benefits. Such methods are often static.</p>
<p><a name="Encapsulation" id="Encapsulation"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Factory_method_pattern&amp;action=edit&amp;section=4" title="Edit section: Encapsulation">edit</a>]</span> <span class="mw-headline">Encapsulation</span></h3>
<p>Factory methods encapsulate the creation of objects. This can be useful if the creation process is very complex, for example if it depends on settings in configuration files or on user input.</p>
<p>Consider as an example a program to read <a href="/wiki/Image_file" title="Image file" class="mw-redirect">image files</a> and make <a href="/wiki/Thumbnail" title="Thumbnail">thumbnails</a> out of them. The program supports different image formats, represented by a reader class for each format:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-java">
<span class="kw2">public</span> <span class="kw2">interface</span> ImageReader 
<span class="br0">{</span>
     <span class="kw2">public</span> DecodedImage getDecodedImage<span class="br0">(</span><span class="br0">)</span>;
<span class="br0">}</span>
 
<span class="kw2">public</span> <span class="kw2">class</span> GifReader <span class="kw2">implements</span> ImageReader 
<span class="br0">{</span> 
     <span class="kw2">public</span> DecodedImage getDecodedImage<span class="br0">(</span><span class="br0">)</span> 
     <span class="br0">{</span>
        <span class="kw2">return</span> decodedImage;
     <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="kw2">public</span> <span class="kw2">class</span> JpegReader <span class="kw2">implements</span> ImageReader 
<span class="br0">{</span>
     <span class="co1">//....</span>
<span class="br0">}</span>
</pre></div>
<p>Each time the program reads an image it needs to create a reader of the appropriate type based on some information in the file. This logic can be encapsulated in a factory method:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-java">
<span class="kw2">public</span> <span class="kw2">class</span> ImageReaderFactory 
<span class="br0">{</span>
    <span class="kw2">public</span> <span class="kw2">static</span> ImageReader getImageReader<span class="br0">(</span> <span class="kw3">InputStream</span> is <span class="br0">)</span> 
    <span class="br0">{</span>
        <span class="kw4">int</span> imageType = figureOutImageType<span class="br0">(</span> is <span class="br0">)</span>;
 
        <span class="kw1">switch</span><span class="br0">(</span> imageType <span class="br0">)</span> 
        <span class="br0">{</span>
            <span class="kw1">case</span> ImageReaderFactory.<span class="me1">GIF</span>:
                <span class="kw2">return</span> <span class="kw2">new</span> GifReader<span class="br0">(</span> is <span class="br0">)</span>;
            <span class="kw1">case</span> ImageReaderFactory.<span class="me1">JPEG</span>:
                <span class="kw2">return</span> <span class="kw2">new</span> JpegReader<span class="br0">(</span> is <span class="br0">)</span>;
            <span class="co1">// etc.</span>
        <span class="br0">}</span>
    <span class="br0">}</span>
<span class="br0">}</span>
</pre></div>
<p>The code fragment in the previous example uses a <a href="/wiki/Switch_statement" title="Switch statement">switch statement</a> to associate an <code>imageType</code> with a specific <a href="/wiki/Factory_object" title="Factory object">factory object</a>. Alternatively, this association could also be implemented as a <a href="/wiki/Map_(computer_science)" title="Map (computer science)" class="mw-redirect">mapping</a>. This would allow the switch statement to be replaced with an <a href="/wiki/Associative_array" title="Associative array">associative array</a> lookup.</p>
<p><a name="Limitations" id="Limitations"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Factory_method_pattern&amp;action=edit&amp;section=5" title="Edit section: Limitations">edit</a>]</span> <span class="mw-headline">Limitations</span></h2>
<p>There are three limitations associated with the use of the factory method. The first relates to <a href="/wiki/Code_refactoring" title="Code refactoring">refactoring</a> existing code; the other two relate to inheritance.</p>
<ul>
<li>The first limitation is that refactoring an existing class to use factories breaks existing clients. For example, if class Complex were a standard class, it might have numerous clients with code like:</li>
</ul>
<div dir="ltr" style="text-align: left;">
<pre class="source-java">
Complex c = <span class="kw2">new</span> Complex<span class="br0">(</span><span class="nu0">-1</span>, <span class="nu0">0</span><span class="br0">)</span>;
</pre></div>
<dl>
<dd>Once we realize that two different factories are needed, we change the class (to the code shown earlier). But since the constructor is now private, the existing client code no longer compiles.</dd>
</dl>
<ul>
<li>The second limitation is that, since the pattern relies on using a private constructor, the class cannot be extended. Any subclass must invoke the inherited constructor, but this cannot be done if that constructor is private.</li>
</ul>
<ul>
<li>The third limitation is that, if we do extend the class (e.g., by making the constructor protected -- this is risky but possible), the subclass must provide its own re-implementation of all factory methods with exactly the same signatures. For example, if class StrangeComplex extends Complex, then unless StrangeComplex provides its own version of all factory methods, the call StrangeComplex.fromPolar(1, pi) will yield an instance of <i>Complex</i> (the superclass) rather than the expected instance of the subclass.</li>
</ul>
<p>All three problems could be alleviated by altering the underlying programming language to make factories first-class class members (rather than using the design pattern).<sup class="noprint Template-Fact"><span title="This claim needs references to reliable sources&#160;since March 2009" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</span></sup></p>
<p><a name="Examples" id="Examples"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Factory_method_pattern&amp;action=edit&amp;section=6" title="Edit section: Examples">edit</a>]</span> <span class="mw-headline">Examples</span></h2>
<p><a name="Java" id="Java"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Factory_method_pattern&amp;action=edit&amp;section=7" title="Edit section: Java">edit</a>]</span> <span class="mw-headline">Java</span></h3>
<p>Pizza example:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-java">
<span class="kw2">abstract</span> <span class="kw2">class</span> Pizza <span class="br0">{</span>
    <span class="kw2">public</span> <span class="kw2">abstract</span> <span class="kw4">double</span> getPrice<span class="br0">(</span><span class="br0">)</span>;
<span class="br0">}</span>
 
<span class="kw2">class</span> HamAndMushroomPizza <span class="kw2">extends</span> Pizza <span class="br0">{</span>
    <span class="kw2">private</span> <span class="kw4">double</span> price = <span class="nu0">8.5</span>;
 
    <span class="kw2">public</span> <span class="kw4">double</span> getPrice<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
        <span class="kw2">return</span> price;
    <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="kw2">class</span> DeluxePizza <span class="kw2">extends</span> Pizza <span class="br0">{</span>
    <span class="kw2">private</span> <span class="kw4">double</span> price = <span class="nu0">10.5</span>;
 
    <span class="kw2">public</span> <span class="kw4">double</span> getPrice<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
        <span class="kw2">return</span> price;
    <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="kw2">class</span> HawaiianPizza <span class="kw2">extends</span> Pizza <span class="br0">{</span>
    <span class="kw2">private</span> <span class="kw4">double</span> price = <span class="nu0">11.5</span>;
 
    <span class="kw2">public</span> <span class="kw4">double</span> getPrice<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
        <span class="kw2">return</span> price;
    <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="kw2">class</span> PizzaFactory <span class="br0">{</span>
    <span class="kw2">public</span> <span class="kw2">enum</span> PizzaType <span class="br0">{</span>
        HamMushroom,
        Deluxe,
        Hawaiian
    <span class="br0">}</span>
 
    <span class="kw2">public</span> <span class="kw2">static</span> Pizza createPizza<span class="br0">(</span>PizzaType pizzaType<span class="br0">)</span> <span class="br0">{</span>
        <span class="kw1">switch</span> <span class="br0">(</span>pizzaType<span class="br0">)</span> <span class="br0">{</span>
            <span class="kw1">case</span> HamMushroom:
                <span class="kw2">return</span> <span class="kw2">new</span> HamAndMushroomPizza<span class="br0">(</span><span class="br0">)</span>;
            <span class="kw1">case</span> Deluxe:
                <span class="kw2">return</span> <span class="kw2">new</span> DeluxePizza<span class="br0">(</span><span class="br0">)</span>;
            <span class="kw1">case</span> Hawaiian:
                <span class="kw2">return</span> <span class="kw2">new</span> HawaiianPizza<span class="br0">(</span><span class="br0">)</span>;
        <span class="br0">}</span>
        <span class="kw2">throw</span> <span class="kw2">new</span> <span class="kw3">IllegalArgumentException</span><span class="br0">(</span><span class="st0">"The pizza type "</span> + pizzaType + <span class="st0">" is not recognized."</span><span class="br0">)</span>;
    <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="kw2">class</span> PizzaLover <span class="br0">{</span>
    <span class="coMULTI">/**
     * Create all available pizzas and print their prices
     */</span>
    <span class="kw2">public</span> <span class="kw2">static</span> <span class="kw4">void</span> main <span class="br0">(</span><span class="kw3">String</span> args<span class="br0">[</span><span class="br0">]</span><span class="br0">)</span> <span class="br0">{</span>
        <span class="kw1">for</span> <span class="br0">(</span>PizzaFactory.<span class="me1">PizzaType</span> pizzaType : PizzaFactory.<span class="me1">PizzaType</span>.<span class="me1">values</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span> <span class="br0">{</span>
            <span class="kw3">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span><span class="st0">"Price of "</span> + pizzaType + <span class="st0">" is "</span> + PizzaFactory.<span class="me1">createPizza</span><span class="br0">(</span>pizzaType<span class="br0">)</span>.<span class="me1">getPrice</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>;
        <span class="br0">}</span>
    <span class="br0">}</span>
<span class="br0">}</span>
</pre></div>
<p><a name="C.23" id="C.23"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Factory_method_pattern&amp;action=edit&amp;section=8" title="Edit section: C#">edit</a>]</span> <span class="mw-headline">C#</span></h3>
<p>Pizza example:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-csharp">
<span class="kw1">public</span> abstract <span class="kw4">class</span> Pizza
<span class="br0">{</span>
    <span class="kw1">public</span> abstract <span class="kw4">decimal</span> GetPrice<span class="br0">(</span><span class="br0">)</span>;
 
    <span class="kw1">public</span> <span class="kw4">enum</span> PizzaType
    <span class="br0">{</span>
        HamMushroom, Deluxe, Hawaiian
    <span class="br0">}</span>
    <span class="kw1">public</span> <span class="kw1">static</span> Pizza PizzaFactory<span class="br0">(</span>PizzaType pizzaType<span class="br0">)</span>
    <span class="br0">{</span>
        <span class="kw1">switch</span> <span class="br0">(</span>pizzaType<span class="br0">)</span>
        <span class="br0">{</span>
            <span class="kw1">case</span> PizzaType.<span class="me1">HamMushroom</span>:
                <span class="kw1">return</span> <span class="kw3">new</span> HamAndMushroomPizza<span class="br0">(</span><span class="br0">)</span>;
                <span class="kw1">break</span>;
 
            <span class="kw1">case</span> PizzaType.<span class="me1">Deluxe</span>:
                <span class="kw1">return</span> <span class="kw3">new</span> DeluxePizza<span class="br0">(</span><span class="br0">)</span>;
                <span class="kw1">break</span>;
 
            <span class="kw1">case</span> PizzaType.<span class="me1">Hawaiian</span>:
                <span class="kw1">return</span> <span class="kw3">new</span> HawaiianPizza<span class="br0">(</span><span class="br0">)</span>;
                <span class="kw1">break</span>;
 
            <span class="kw1">default</span>:
                <span class="kw1">break</span>;
        <span class="br0">}</span>
 
        <span class="kw1">throw</span> <span class="kw3">new</span> <span class="kw5">System</span>.<span class="me1">NotSupportedException</span><span class="br0">(</span><span class="st0">"The pizza type "</span> + pizzaType.<span class="me1">ToString</span><span class="br0">(</span><span class="br0">)</span> + <span class="st0">" is not recognized."</span><span class="br0">)</span>;
    <span class="br0">}</span>
<span class="br0">}</span>
</pre></div>
<div dir="ltr" style="text-align: left;">
<pre class="source-csharp">
<span class="kw1">public</span> <span class="kw4">class</span> HamAndMushroomPizza : Pizza
<span class="br0">{</span>
    <span class="kw1">private</span> <span class="kw4">decimal</span> price = <span class="nu0">8</span>.5M;
    <span class="kw1">public</span> <span class="kw1">override</span> <span class="kw4">decimal</span> GetPrice<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> <span class="kw1">return</span> price; <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="kw1">public</span> <span class="kw4">class</span> DeluxePizza : Pizza
<span class="br0">{</span>
    <span class="kw1">private</span> <span class="kw4">decimal</span> price = <span class="nu0">10</span>.5M;
    <span class="kw1">public</span> <span class="kw1">override</span> <span class="kw4">decimal</span> GetPrice<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> <span class="kw1">return</span> price; <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="kw1">public</span> <span class="kw4">class</span> HawaiianPizza : Pizza
<span class="br0">{</span>
    <span class="kw1">private</span> <span class="kw4">decimal</span> price = <span class="nu0">11</span>.5M;
    <span class="kw1">public</span> <span class="kw1">override</span> <span class="kw4">decimal</span> GetPrice<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> <span class="kw1">return</span> price; <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="co1">// Somewhere in the code</span>
...
  <span class="me1">Console</span>.<span class="me1">WriteLine</span><span class="br0">(</span> Pizza.<span class="me1">PizzaFactory</span><span class="br0">(</span>Pizza.<span class="me1">PizzaType</span>.<span class="me1">Hawaiian</span><span class="br0">)</span>.<span class="me1">GetPrice</span><span class="br0">(</span><span class="br0">)</span>.<span class="me1">ToString</span><span class="br0">(</span><span class="st0">"C2"</span><span class="br0">)</span> <span class="br0">)</span>; <span class="co1">// $11.50</span>
...
&lt;pro&gt;
 
<span class="kw1">private</span> <span class="kw4">class</span> Pro : Pizza
 
Console.<span class="me1">WriteLine</span><span class="br0">(</span> Pizza.<span class="me1">PizzaFactory</span><span class="br0">(</span>Pizza.<span class="me1">PizzaType</span>.<span class="me1">Hawaiian</span><span class="br0">)</span>.<span class="me1">GetPrice</span><span class="br0">(</span><span class="br0">)</span>.<span class="me1">ToString</span><span class="br0">(</span><span class="st0">"C2"</span><span class="br0">)</span> <span class="br0">)</span>; <span class="co1">// $11.50</span>
</pre></div>
<p><a name="C.2B.2B" id="C.2B.2B"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Factory_method_pattern&amp;action=edit&amp;section=9" title="Edit section: C++">edit</a>]</span> <span class="mw-headline">C++</span></h3>
<p>Pizza example:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
<span class="co2">#include &lt;string&gt;</span>
<span class="co2">#include &lt;iostream&gt;</span>
<span class="co2">#include &lt;memory&gt; // std::auto_ptr</span>
<span class="kw2">class</span> Pizza <span class="br0">{</span>
<span class="kw2">public</span>:
    <span class="kw2">virtual</span> <span class="kw4">void</span> get_price<span class="br0">(</span><span class="br0">)</span> <span class="kw4">const</span> = <span class="nu0">0</span>;
    <span class="kw2">virtual</span> ~Pizza<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span><span class="br0">}</span>;
<span class="br0">}</span>;
 
<span class="kw2">class</span> HamAndMushroomPizza: <span class="kw2">public</span> Pizza <span class="br0">{</span>
<span class="kw2">public</span>:
    <span class="kw2">virtual</span> <span class="kw4">void</span> get_price<span class="br0">(</span><span class="br0">)</span> <span class="kw4">const</span> <span class="br0">{</span>
        std::<span class="kw3">cout</span> &lt;&lt; <span class="st0">"Ham and Mushroom: $8.5"</span> &lt;&lt; std::<span class="me2">endl</span>;
    <span class="br0">}</span>
<span class="br0">}</span>;
 
<span class="kw2">class</span> DeluxePizza : <span class="kw2">public</span> Pizza <span class="br0">{</span>
<span class="kw2">public</span>:
    <span class="kw2">virtual</span> <span class="kw4">void</span> get_price<span class="br0">(</span><span class="br0">)</span> <span class="kw4">const</span> <span class="br0">{</span>
        std::<span class="kw3">cout</span> &lt;&lt; <span class="st0">"Deluxe: $10.5"</span> &lt;&lt; std::<span class="me2">endl</span>;
    <span class="br0">}</span>
<span class="br0">}</span>;
 
<span class="kw2">class</span> HawaiianPizza : <span class="kw2">public</span> Pizza <span class="br0">{</span>
<span class="kw2">public</span>:
    <span class="kw2">virtual</span> <span class="kw4">void</span> get_price<span class="br0">(</span><span class="br0">)</span> <span class="kw4">const</span> <span class="br0">{</span>
        std::<span class="kw3">cout</span> &lt;&lt; <span class="st0">"Hawaiian: $11.5"</span> &lt;&lt; std::<span class="me2">endl</span>;
    <span class="br0">}</span>
<span class="br0">}</span>;
 
<span class="kw2">class</span> PizzaFactory <span class="br0">{</span>
<span class="kw2">public</span>:
    <span class="kw4">static</span> Pizza* create_pizza<span class="br0">(</span><span class="kw4">const</span> std::<span class="me2">string</span>&amp; type<span class="br0">)</span> <span class="br0">{</span>
        <span class="kw1">if</span> <span class="br0">(</span>type == <span class="st0">"Ham and Mushroom"</span><span class="br0">)</span>
            <span class="kw1">return</span> <span class="kw3">new</span> HamAndMushroomPizza<span class="br0">(</span><span class="br0">)</span>;
        <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">(</span>type == <span class="st0">"Hawaiian"</span><span class="br0">)</span>
            <span class="kw1">return</span> <span class="kw3">new</span> HawaiianPizza<span class="br0">(</span><span class="br0">)</span>;
        <span class="kw1">else</span>
            <span class="kw1">return</span> <span class="kw3">new</span> DeluxePizza<span class="br0">(</span><span class="br0">)</span>;
    <span class="br0">}</span>
<span class="br0">}</span>;
<span class="co1">//usage</span>
<span class="kw4">int</span> main<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
    PizzaFactory factory;
 
    std::<span class="me2">auto_ptr</span>&lt;const Pizza&gt; pizza<span class="br0">(</span>factory.<span class="me1">create_pizza</span><span class="br0">(</span><span class="st0">"Default"</span><span class="br0">)</span><span class="br0">)</span>;
    pizza-&gt;get_price<span class="br0">(</span><span class="br0">)</span>;
 
    pizza.<span class="me1">reset</span><span class="br0">(</span>factory.<span class="me1">create_pizza</span><span class="br0">(</span><span class="st0">"Ham and Mushroom"</span><span class="br0">)</span><span class="br0">)</span>;
    pizza-&gt;get_price<span class="br0">(</span><span class="br0">)</span>;
 
    pizza.<span class="me1">reset</span><span class="br0">(</span>factory.<span class="me1">create_pizza</span><span class="br0">(</span><span class="st0">"Hawaiian"</span><span class="br0">)</span><span class="br0">)</span>;
    pizza-&gt;get_price<span class="br0">(</span><span class="br0">)</span>;
<span class="br0">}</span>
</pre></div>
<p><a name="JavaScript" id="JavaScript"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Factory_method_pattern&amp;action=edit&amp;section=10" title="Edit section: JavaScript">edit</a>]</span> <span class="mw-headline">JavaScript</span></h3>
<p>Pizza example:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
<span class="co1">//Our pizzas</span>
<span class="kw2">function</span> HamAndMushroomPizza<span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
  <span class="kw2">var</span> price = <span class="nu0">8.50</span>;
  <span class="kw1">this</span>.<span class="me1">getPrice</span> = <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
    <span class="kw1">return</span> price;
  <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="kw2">function</span> DeluxePizza<span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
  <span class="kw2">var</span> price = <span class="nu0">10.50</span>;
  <span class="kw1">this</span>.<span class="me1">getPrice</span> = <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
    <span class="kw1">return</span> price;
  <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="kw2">function</span> HawaiianPizza<span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
  <span class="kw2">var</span> price = <span class="nu0">11.50</span>;
  <span class="kw1">this</span>.<span class="me1">getPrice</span> = <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
    <span class="kw1">return</span> price;
  <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="co1">//Pizza Factory</span>
<span class="kw2">function</span> PizzaFactory<span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
  <span class="kw1">this</span>.<span class="me1">createPizza</span> = <span class="kw2">function</span><span class="br0">(</span>type<span class="br0">)</span><span class="br0">{</span>
     <span class="kw1">switch</span><span class="br0">(</span>type<span class="br0">)</span><span class="br0">{</span>
      <span class="kw1">case</span> <span class="st0">"Ham and Mushroom"</span>:
        <span class="kw1">return</span> <span class="kw2">new</span> HamAndMushroomPizza<span class="br0">(</span><span class="br0">)</span>;
      <span class="kw1">case</span> <span class="st0">"Hawaiian"</span>:
        <span class="kw1">return</span> <span class="kw2">new</span> HawaiianPizza<span class="br0">(</span><span class="br0">)</span>;
      <span class="kw2">default</span>:
          <span class="kw1">return</span> <span class="kw2">new</span> DeluxePizza<span class="br0">(</span><span class="br0">)</span>;
     <span class="br0">}</span>     
  <span class="br0">}</span>
<span class="br0">}</span>
</pre></div>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
<span class="co1">//Usage</span>
<span class="kw2">var</span> pizzaPrice = <span class="kw2">new</span> PizzaFactory<span class="br0">(</span><span class="br0">)</span>.<span class="me1">createPizza</span><span class="br0">(</span><span class="st0">"Ham and Mushroom"</span><span class="br0">)</span>.<span class="me1">getPrice</span><span class="br0">(</span><span class="br0">)</span>;
<span class="kw3">alert</span><span class="br0">(</span>pizzaPrice<span class="br0">)</span>;
</pre></div>
<p><a name="Ruby" id="Ruby"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Factory_method_pattern&amp;action=edit&amp;section=11" title="Edit section: Ruby">edit</a>]</span> <span class="mw-headline">Ruby</span></h3>
<p>Pizza example:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-ruby">
<span class="kw1">class</span> HamAndMushroomPizza
  <span class="kw1">def</span> price
    <span class="nu0">8.50</span>
  <span class="kw1">end</span>
<span class="kw1">end</span>
 
<span class="kw1">class</span> DeluxePizza
  <span class="kw1">def</span> price
    <span class="nu0">10.50</span>
  <span class="kw1">end</span>
<span class="kw1">end</span>
 
<span class="kw1">class</span> HawaiianPizza
  <span class="kw1">def</span> price
    <span class="nu0">11.50</span>
  <span class="kw1">end</span>
<span class="kw1">end</span>
 
<span class="kw1">class</span> ChunkyBaconPizza
  <span class="kw1">def</span> price
    <span class="nu0">19.95</span>
  <span class="kw1">end</span>
<span class="kw1">end</span>
 
<span class="kw1">class</span> PizzaFactory
  <span class="kw1">def</span> create_pizza<span class="br0">(</span>style=<span class="st0">''</span><span class="br0">)</span>
    <span class="kw1">case</span> style
      <span class="kw1">when</span> <span class="st0">'Ham and Mushroom'</span>
        HamAndMushroomPizza.<span class="me1">new</span>
      <span class="kw1">when</span> <span class="st0">'Deluxe'</span>
        DeluxePizza.<span class="me1">new</span>
      <span class="kw1">when</span> <span class="st0">'Hawaiian'</span>
        HawaiianPizza.<span class="me1">new</span>
      <span class="kw1">when</span> <span class="st0">'WithChunkyBacon'</span>
        ChunkyBaconPizza.<span class="me1">new</span>
      <span class="kw1">else</span>
        DeluxePizza.<span class="me1">new</span>
    <span class="kw1">end</span>   
  <span class="kw1">end</span>
<span class="kw1">end</span>
 
<span class="co1"># usage</span>
factory = PizzaFactory.<span class="me1">new</span>
pizza = factory.<span class="me1">create_pizza</span><span class="br0">(</span><span class="st0">'Ham and Mushroom'</span><span class="br0">)</span>
pizza.<span class="me1">price</span> <span class="co1">#=&gt; 8.5</span>
<span class="co1"># bonus formatting</span>
formatted_price = <span class="kw3">sprintf</span><span class="br0">(</span><span class="st0">"$%.2f"</span>, pizza.<span class="me1">price</span><span class="br0">)</span> <span class="co1">#=&gt; "$8.50"</span>
<span class="co1"># one liner</span>
<span class="kw3">sprintf</span><span class="br0">(</span><span class="st0">"$%.2f"</span>, PizzaFactory.<span class="me1">new</span>.<span class="me1">create_pizza</span><span class="br0">(</span><span class="st0">'Ham and Mushroom'</span><span class="br0">)</span>.<span class="me1">price</span><span class="br0">)</span> <span class="co1">#=&gt; "$8.50"</span>
</pre></div>
<p><a name="Perl" id="Perl"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Factory_method_pattern&amp;action=edit&amp;section=12" title="Edit section: Perl">edit</a>]</span> <span class="mw-headline">Perl</span></h3>
<div dir="ltr" style="text-align: left;">
<pre class="source-perl">
<span class="co1">#!/usr/bin/env perl</span>
<span class="kw3">package</span> Pizza;
<span class="kw2">use</span> Moose;
 
has price =&gt; <span class="br0">(</span>is =&gt; <span class="st0">'rw'</span>, isa =&gt; <span class="st0">'Num'</span><span class="br0">)</span>;
 
<span class="kw3">package</span> HamAndMushroomPizza;
<span class="kw2">use</span> Moose;
extends <span class="st0">'Pizza'</span>;
 
<span class="kw2">sub</span> BUILD <span class="br0">{</span>
    shift-&gt;<span class="me1">price</span><span class="br0">(</span><span class="nu0">8.5</span><span class="br0">)</span>
<span class="br0">}</span>
 
<span class="kw3">package</span> DeluxePizza;
<span class="kw2">use</span> Moose;
extends <span class="st0">'Pizza'</span>;
 
<span class="kw2">sub</span> BUILD <span class="br0">{</span>
    shift-&gt;<span class="me1">price</span><span class="br0">(</span><span class="nu0">10.5</span><span class="br0">)</span>
<span class="br0">}</span>
 
<span class="kw3">package</span> HawaiianPizza;
<span class="kw2">use</span> Moose;
extends <span class="st0">'Pizza'</span>;
 
<span class="kw2">sub</span> BUILD <span class="br0">{</span>
    shift-&gt;<span class="me1">price</span><span class="br0">(</span><span class="nu0">11.5</span><span class="br0">)</span>
<span class="br0">}</span>
 
<span class="kw3">package</span> PizzaFactory;
<span class="kw2">use</span> Moose;
 
<span class="kw2">sub</span> createPizza <span class="br0">{</span>
    <span class="kw1">my</span> <span class="re0">$pizza_type</span> = <span class="kw3">shift</span>;
    <span class="kw1">my</span> <span class="re0">$pizza</span> = <span class="kw3">eval</span> <span class="st0">"${pizza_type}Pizza-&gt;new()"</span>;
    confess <span class="st0">"Pizza not found"</span> <span class="kw1">if</span> <span class="br0">(</span>$@<span class="br0">)</span>;
    <span class="kw3">return</span> <span class="re0">$pizza</span>;
<span class="br0">}</span>
 
 
<span class="co1"># The following prints them all:</span>
<span class="kw3">package</span> main;
<span class="kw2">use</span> strict;
<span class="kw2">use</span> feature <span class="st0">':5.10'</span>;
 
<span class="kw1">my</span> <span class="re0">@pizza_types</span> = <span class="kw3">qw</span>/HamAndMushroom Deluxe Hawaiian/;
 
<span class="kw1">for</span> <span class="kw1">my</span> <span class="re0">$pizza_type</span> <span class="br0">(</span><span class="re0">@pizza_types</span><span class="br0">)</span> <span class="br0">{</span>
    <span class="kw1">my</span> <span class="re0">$pizza</span> = PizzaFactory::<span class="me2">createPizza</span><span class="br0">(</span><span class="re0">$pizza_type</span><span class="br0">)</span>;
    say <span class="st0">"Price of $pizza_type is "</span> . <span class="re0">$pizza</span>-&gt;<span class="me1">price</span><span class="br0">(</span><span class="br0">)</span>;
<span class="br0">}</span>
</pre></div>
<p><a name="Python" id="Python"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Factory_method_pattern&amp;action=edit&amp;section=13" title="Edit section: Python">edit</a>]</span> <span class="mw-headline">Python</span></h3>
<div dir="ltr" style="text-align: left;">
<pre class="source-python">
<span class="co1"># Our Pizzas</span>
 
<span class="kw1">class</span> Pizza<span class="br0">(</span><span class="kw2">object</span><span class="br0">)</span>:
    PIZZA_TYPE_HAM_MUSHROOM, PIZZA_TYPE_DELUXE, PIZZA_TYPE_HAWAIIAN = <span class="kw2">range</span><span class="br0">(</span><span class="nu0">3</span><span class="br0">)</span>
 
    <span class="kw1">def</span> <span class="kw4">__init__</span><span class="br0">(</span><span class="kw2">self</span><span class="br0">)</span>:
        <span class="kw2">self</span>.<span class="me1">price</span> = <span class="kw2">None</span>
 
    <span class="kw1">def</span> getPrice<span class="br0">(</span><span class="kw2">self</span><span class="br0">)</span>:
        <span class="kw1">return</span> <span class="kw2">self</span>.<span class="me1">price</span>
</pre></div>
<div dir="ltr" style="text-align: left;">
<pre class="source-python">
<span class="kw1">class</span> HamAndMushroomPizza<span class="br0">(</span>Pizza<span class="br0">)</span>:
    <span class="kw1">def</span> <span class="kw4">__init__</span><span class="br0">(</span><span class="kw2">self</span><span class="br0">)</span>:
        <span class="kw2">self</span>.<span class="me1">price</span> = <span class="nu0">8.50</span>
 
<span class="kw1">class</span> DeluxePizza<span class="br0">(</span>Pizza<span class="br0">)</span>:
    <span class="kw1">def</span> <span class="kw4">__init__</span><span class="br0">(</span><span class="kw2">self</span><span class="br0">)</span>:
        <span class="kw2">self</span>.<span class="me1">price</span> = <span class="nu0">10.50</span>
 
<span class="kw1">class</span> HawaiianPizza<span class="br0">(</span>Pizza<span class="br0">)</span>:
    <span class="kw1">def</span> <span class="kw4">__init__</span><span class="br0">(</span><span class="kw2">self</span><span class="br0">)</span>:
        <span class="kw2">self</span>.<span class="me1">price</span> = <span class="nu0">11.50</span>
 
<span class="kw1">class</span> PizzaFactory<span class="br0">(</span><span class="kw2">object</span><span class="br0">)</span>:
    <span class="kw1">def</span> make<span class="br0">(</span><span class="kw2">self</span>, pizzaType<span class="br0">)</span>:
        classByType = <span class="br0">{</span>
            Pizza.<span class="me1">PIZZA_TYPE_HAM_MUSHROOM</span>: HamAndMushroomPizza,
            Pizza.<span class="me1">PIZZA_TYPE_DELUXE</span>: DeluxePizza,
            Pizza.<span class="me1">PIZZA_TYPE_HAWAIIAN</span>: HawaiianPizza,
        <span class="br0">}</span>
        <span class="kw1">return</span> classByType<span class="br0">[</span>pizzaType<span class="br0">]</span><span class="br0">(</span><span class="br0">)</span>
 
<span class="co1"># Usage</span>
<span class="kw1">print</span> <span class="br0">(</span><span class="st0">'$ %.02f'</span> % PizzaFactory<span class="br0">(</span><span class="br0">)</span>.<span class="me1">make</span><span class="br0">(</span>Pizza.<span class="me1">PIZZA_TYPE_HAM_MUSHROOM</span><span class="br0">)</span>.<span class="me1">getPrice</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>
</pre></div>
<p><a name="Php" id="Php"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Factory_method_pattern&amp;action=edit&amp;section=14" title="Edit section: Php">edit</a>]</span> <span class="mw-headline">Php</span></h3>
<div dir="ltr" style="text-align: left;">
<pre class="source-php">
<span class="co1">// Our Pizzas</span>
abstract <span class="kw2">class</span> Pizza <span class="br0">{</span>
    abstract <span class="kw2">public</span> <span class="kw2">function</span> get_price<span class="br0">(</span><span class="br0">)</span>;
<span class="br0">}</span>
 
<span class="kw2">class</span> HamAndMushroomPizza <span class="kw2">extends</span> Pizza <span class="br0">{</span>
    <span class="kw2">public</span> <span class="kw2">function</span> get_price<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
        <span class="kw1">return</span> <span class="nu0">8.5</span>;
    <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="kw2">class</span> DeluxePizza <span class="kw2">extends</span> Pizza <span class="br0">{</span>
    <span class="kw2">public</span> <span class="kw2">function</span> get_price<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
        <span class="kw1">return</span> <span class="nu0">10.5</span>;
    <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="kw2">class</span> HawaiianPizza <span class="kw2">extends</span> Pizza <span class="br0">{</span>
    <span class="kw2">public</span> <span class="kw2">function</span> get_price<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
        <span class="kw1">return</span> <span class="nu0">11.5</span>;
    <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="kw2">class</span> PizzaFactory <span class="br0">{</span>
    <span class="kw2">public</span> <span class="kw3">static</span> <span class="kw2">function</span> create_pizza<span class="br0">(</span> <span class="re0">$type</span> <span class="br0">)</span> <span class="br0">{</span>
        <span class="kw1">switch</span><span class="br0">(</span> <span class="re0">$type</span> <span class="br0">)</span> <span class="br0">{</span>
            <span class="kw1">case</span> <span class="st0">'Ham and Mushroom'</span>:
                <span class="kw1">return</span> <span class="kw2">new</span> HamAndMushroomPizza<span class="br0">(</span><span class="br0">)</span>;
            <span class="kw1">case</span> <span class="st0">'Hawaiian'</span>:
                <span class="kw1">return</span> <span class="kw2">new</span> HawaiianPizza<span class="br0">(</span><span class="br0">)</span>;
            <span class="kw2">default</span>:
                <span class="kw1">return</span> <span class="kw2">new</span> DeluxePizza<span class="br0">(</span><span class="br0">)</span>;
        <span class="br0">}</span>
    <span class="br0">}</span>
<span class="br0">}</span>
<span class="co1">// Usage</span>
<span class="re0">$pizza</span> = PizzaFactory::<span class="me2">create_pizza</span><span class="br0">(</span> <span class="st0">'Hawaiian'</span> <span class="br0">)</span>;
<span class="kw3">echo</span> <span class="re0">$pizza</span>-&gt;<span class="me1">get_price</span><span class="br0">(</span><span class="br0">)</span>;
</pre></div>
<p><a name="Haskell" id="Haskell"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Factory_method_pattern&amp;action=edit&amp;section=15" title="Edit section: Haskell">edit</a>]</span> <span class="mw-headline">Haskell</span></h3>
<p>This example uses Haskell's <a href="/wiki/Type_class" title="Type class">type classes</a> rather than <a href="/wiki/Class-based_programming" title="Class-based programming">object-oriented classes</a> (which are not supported in Haskell).</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-ocaml">
<span class="kw1">class</span> Pizza a where
  price :: a -&gt; Float
 
data HamMushroom = HamMushroom
data Deluxe      = Deluxe     
data Hawaiian    = Hawaiian   
 
instance Pizza HamMushroom where
  price _ = <span class="nu0">8.50</span>
 
instance Pizza Deluxe where
  price _ = <span class="nu0">10.50</span>
 
instance Pizza Hawaiian where
  price _ = <span class="nu0">11.50</span>
</pre></div>
<p>Usage example:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-ocaml">
main = print <span class="br0">(</span>price Hawaiian<span class="br0">)</span>
</pre></div>
<p><a name="Uses" id="Uses"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Factory_method_pattern&amp;action=edit&amp;section=16" title="Edit section: Uses">edit</a>]</span> <span class="mw-headline">Uses</span></h2>
<ul>
<li>In <a href="/wiki/ADO.NET" title="ADO.NET">ADO.NET</a>, <a href="http://msdn2.microsoft.com/en-us/library/system.data.idbcommand.createparameter.aspx" class="external text" title="http://msdn2.microsoft.com/en-us/library/system.data.idbcommand.createparameter.aspx" rel="nofollow">IDbCommand.CreateParameter</a> is an example of the use of factory method to connect parallel class hierarchies.</li>
<li>In <a href="/wiki/Qt_(toolkit)" title="Qt (toolkit)">Qt</a>, <a href="http://doc.trolltech.com/4.0/qmainwindow.html#createPopupMenu" class="external text" title="http://doc.trolltech.com/4.0/qmainwindow.html#createPopupMenu" rel="nofollow">QMainWindow::createPopupMenu</a> is a factory method declared in a framework which can be overridden in application code.</li>
<li>In <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a>, several factories are used in the <a href="http://java.sun.com/j2se/1.4.2/docs/api/javax/xml/parsers/package-summary.html" class="external text" title="http://java.sun.com/j2se/1.4.2/docs/api/javax/xml/parsers/package-summary.html" rel="nofollow">javax.xml.parsers</a> package. e.g. javax.xml.parsers.DocumentBuilderFactory or javax.xml.parsers.SAXParserFactory.</li>
</ul>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Factory_method_pattern&amp;action=edit&amp;section=17" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<ul>
<li><a href="/wiki/Design_Patterns_(book)" title="Design Patterns (book)">Design Patterns</a>, the highly-influential book</li>
<li><a href="/wiki/Abstract_factory_pattern" title="Abstract factory pattern">Abstract Factory</a>, a pattern often implemented using factory methods</li>
<li><a href="/wiki/Builder_pattern" title="Builder pattern">Builder pattern</a>, another creational pattern</li>
<li><a href="/wiki/Template_method_pattern" title="Template method pattern">Template method pattern</a>, which may call factory methods</li>
<li><a href="/wiki/Factory_object" title="Factory object">Factory object</a></li>
</ul>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Factory_method_pattern&amp;action=edit&amp;section=18" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<ol class="references">
<li id="cite_note-0"><b><a href="#cite_ref-0" title="">^</a></b> <cite style="font-style:normal" class="book" id="CITEREF.5B.5BMichael_Feathers.7CFeathers.2C_Michael.5D.5D2004"><a href="/w/index.php?title=Michael_Feathers&amp;action=edit&amp;redlink=1" class="new" title="Michael Feathers (page does not exist)">Feathers, Michael</a> (October 2004). <i>Working Effectively with Legacy Code</i>. <a href="/wiki/Special:BookSources/9780131177055" class="internal">ISBN 978-0131177055</a>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Working+Effectively+with+Legacy+Code&amp;rft.aulast=%5B%5BMichael+Feathers%7CFeathers%2C+Michael%5D%5D&amp;rft.au=%5B%5BMichael+Feathers%7CFeathers%2C+Michael%5D%5D&amp;rft.date=October+2004&amp;rft.isbn=978-0131177055&amp;rfr_id=info:sid/en.wikipedia.org:Factory_method_pattern"><span style="display: none;">&#160;</span></span></li>
</ol>
<ul>
<li><cite style="font-style:normal" class="book" id="CITEREFFowler.5B.5BKent_Beck.5D.5D.2C_.5B.5BJohn_Brant_.28author.29.7CJohn_Brant.5D.5D.2C_.5B.5BWilliam_Opdyke.5D.5D.2C_and_.5B.5BDon_Roberts.5D.5D1999">Fowler, Martin; <a href="/wiki/Kent_Beck" title="Kent Beck">Kent Beck</a>, <a href="/w/index.php?title=John_Brant_(author)&amp;action=edit&amp;redlink=1" class="new" title="John Brant (author) (page does not exist)">John Brant</a>, <a href="/wiki/William_Opdyke" title="William Opdyke">William Opdyke</a>, and <a href="/w/index.php?title=Don_Roberts&amp;action=edit&amp;redlink=1" class="new" title="Don Roberts (page does not exist)">Don Roberts</a> (June 1999). <i><a href="/wiki/Refactoring" title="Refactoring" class="mw-redirect">Refactoring</a>: Improving the Design of Existing Code</i>. Addison-Wesley. <a href="/wiki/Special:BookSources/0201485672" class="internal">ISBN 0-201-48567-2</a>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=%5B%5BRefactoring%5D%5D%3A+Improving+the+Design+of+Existing+Code&amp;rft.aulast=Fowler&amp;rft.aufirst=Martin&amp;rft.au=Fowler%2C+Martin&amp;rft.au=%5B%5BKent+Beck%5D%5D%2C+%5B%5BJohn+Brant+%28author%29%7CJohn+Brant%5D%5D%2C+%5B%5BWilliam+Opdyke%5D%5D%2C+and+%5B%5BDon+Roberts%5D%5D&amp;rft.date=June+1999&amp;rft.pub=Addison-Wesley&amp;rft.isbn=0-201-48567-2&amp;rfr_id=info:sid/en.wikipedia.org:Factory_method_pattern"><span style="display: none;">&#160;</span></span></li>
<li><cite style="font-style:normal" class="book" id="CITEREF.5B.5BErich_Gamma.7CGamma.2C_Erich.5D.5D.3B_.5B.5BRichard_Helm.7CHelm.2C_Richard.5D.5D.3B_Johnson.2C_Ralph.3B_Vlissides.2C_John1994"><a href="/wiki/Erich_Gamma" title="Erich Gamma">Gamma, Erich</a>; <a href="/wiki/Richard_Helm" title="Richard Helm">Helm, Richard</a>; Johnson, Ralph; Vlissides, John (1994). <i><a href="/wiki/Design_Patterns" title="Design Patterns" class="mw-redirect">Design Patterns: Elements of Reusable Object-Oriented Software</a></i>. Addison-Wesley. <a href="/wiki/Special:BookSources/0201633612" class="internal">ISBN 0-201-63361-2</a>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=%5B%5BDesign+Patterns%7CDesign+Patterns%3A+Elements+of+Reusable+Object-Oriented+Software%5D%5D&amp;rft.aulast=%5B%5BErich+Gamma%7CGamma%2C+Erich%5D%5D%3B+%5B%5BRichard+Helm%7CHelm%2C+Richard%5D%5D%3B+Johnson%2C+Ralph%3B+Vlissides%2C+John&amp;rft.au=%5B%5BErich+Gamma%7CGamma%2C+Erich%5D%5D%3B+%5B%5BRichard+Helm%7CHelm%2C+Richard%5D%5D%3B+Johnson%2C+Ralph%3B+Vlissides%2C+John&amp;rft.date=1994&amp;rft.pub=Addison-Wesley&amp;rft.isbn=0-201-63361-2&amp;rfr_id=info:sid/en.wikipedia.org:Factory_method_pattern"><span style="display: none;">&#160;</span></span></li>
<li><cite style="font-style:normal" class="" id="CITEREFCohenGil.2C_Joseph2007">Cohen, Tal; Gil, Joseph (2007). "<a href="http://tal.forum2.org/static/cv/Factories.pdf" class="external text" title="http://tal.forum2.org/static/cv/Factories.pdf" rel="nofollow">Better Construction with Factories</a>" (<a href="/wiki/PDF" title="PDF" class="mw-redirect">PDF</a>). <i>Journal of Object Technology</i> (<a href="/wiki/Bertrand_Meyer" title="Bertrand Meyer">Bertrand Meyer</a>)<span class="printonly">. <a href="http://tal.forum2.org/static/cv/Factories.pdf" class="external free" title="http://tal.forum2.org/static/cv/Factories.pdf" rel="nofollow">http://tal.forum2.org/static/cv/Factories.pdf</a></span><span class="reference-accessdate">. Retrieved on 2007-03-12</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=Better+Construction+with+Factories&amp;rft.jtitle=Journal+of+Object+Technology&amp;rft.aulast=Cohen&amp;rft.aufirst=Tal&amp;rft.au=Cohen%2C+Tal&amp;rft.au=Gil%2C+Joseph&amp;rft.date=2007&amp;rft.pub=%5B%5BBertrand+Meyer%5D%5D&amp;rft_id=http%3A%2F%2Ftal.forum2.org%2Fstatic%2Fcv%2FFactories.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Factory_method_pattern"><span style="display: none;">&#160;</span></span></li>
</ul>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Factory_method_pattern&amp;action=edit&amp;section=19" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<ul>
<li><a href="http://www.lepus.org.uk/ref/companion/FactoryMethod.xml" class="external text" title="http://www.lepus.org.uk/ref/companion/FactoryMethod.xml" rel="nofollow">Factory method in UML and in LePUS3</a> (a Design Description Language)</li>
<li><a href="http://c2.com/cgi/wiki?FactoryMethodPattern" class="external text" title="http://c2.com/cgi/wiki?FactoryMethodPattern" rel="nofollow">Description from the Portland Pattern Repository</a></li>
<li><a href="http://www.fsw.com/Jt/Jt.htm" class="external text" title="http://www.fsw.com/Jt/Jt.htm" rel="nofollow">Jt</a> J2EE Pattern Oriented Framework</li>
</ul>
<table class="navbox" cellspacing="0" style=";">
<tr>
<td style="padding:2px;">
<table cellspacing="0" class="nowraplinks collapsible autocollapse" style="width:100%;background:transparent;color:inherit;;">
<tr>
<th style=";" colspan="2" class="navbox-title">
<div style="float:left; width:6em;text-align:left;">
<div class="noprint plainlinksneverexpand navbar" style="background:none; padding:0; font-weight:normal;;;border:none;; font-size:xx-small;"><a href="/wiki/Template:Design_Patterns_Patterns" title="Template:Design Patterns Patterns"><span title="View this template" style=";;border:none;">v</span></a>&#160;•&#160;<a href="/w/index.php?title=Template_talk:Design_Patterns_Patterns&amp;action=edit&amp;redlink=1" class="new" title="Template talk:Design Patterns Patterns (page does not exist)"><span title="Discussion about this template" style=";;border:none;">d</span></a>&#160;•&#160;<a href="http://en.wikipedia.org/w/index.php?title=Template:Design_Patterns_Patterns&amp;action=edit" class="external text" title="http://en.wikipedia.org/w/index.php?title=Template:Design_Patterns_Patterns&amp;action=edit" rel="nofollow"><span title="Edit this template" style=";;border:none;;">e</span></a></div>
</div>
<span style="font-size:110%;"><a href="/wiki/Design_pattern_(computer_science)" title="Design pattern (computer science)">Design patterns</a> in the book <i><a href="/wiki/Design_Patterns_(book)" title="Design Patterns (book)">Design Patterns</a></i></span></th>
</tr>
<tr style="height:2px;">
<td></td>
</tr>
<tr>
<td class="navbox-group" style=";;">Creational</td>
<td style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<div style="padding:0em 0.25em"><a href="/wiki/Abstract_factory_pattern" title="Abstract factory pattern">Abstract factory</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Builder_pattern" title="Builder pattern">Builder</a><span style="font-weight:bold;">&#160;·</span> <strong class="selflink">Factory</strong><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Prototype_pattern" title="Prototype pattern">Prototype</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Singleton_pattern" title="Singleton pattern">Singleton</a></div>
</td>
</tr>
<tr style="height:2px">
<td></td>
</tr>
<tr>
<td class="navbox-group" style=";;">Structural</td>
<td style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<div style="padding:0em 0.25em"><a href="/wiki/Adapter_pattern" title="Adapter pattern">Adapter</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Bridge_pattern" title="Bridge pattern">Bridge</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Composite_pattern" title="Composite pattern">Composite</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Decorator_pattern" title="Decorator pattern">Decorator</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Facade_pattern" title="Facade pattern">Facade</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Flyweight_pattern" title="Flyweight pattern">Flyweight</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Proxy_pattern" title="Proxy pattern">Proxy</a></div>
</td>
</tr>
<tr style="height:2px">
<td></td>
</tr>
<tr>
<td class="navbox-group" style=";;">Behavioral</td>
<td style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<div style="padding:0em 0.25em"><a href="/wiki/Chain-of-responsibility_pattern" title="Chain-of-responsibility pattern">Chain of responsibility</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Command_pattern" title="Command pattern">Command</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Interpreter_pattern" title="Interpreter pattern">Interpreter</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Iterator_pattern" title="Iterator pattern">Iterator</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Mediator_pattern" title="Mediator pattern">Mediator</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Memento_pattern" title="Memento pattern">Memento</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Observer_pattern" title="Observer pattern">Observer</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/State_pattern" title="State pattern">State</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Strategy_pattern" title="Strategy pattern">Strategy</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Template_method_pattern" title="Template method pattern">Template method</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Visitor_pattern" title="Visitor pattern">Visitor</a></div>
</td>
</tr>
</table>
</td>
</tr>
</table>


<!-- 
NewPP limit report
Preprocessor node count: 2497/1000000
Post-expand include size: 29690/2048000 bytes
Template argument size: 11025/2048000 bytes
Expensive parser function count: 1/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:164850-0!1!0!default!!en!2 and timestamp 20090403150005 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Factory_method_pattern">http://en.wikipedia.org/wiki/Factory_method_pattern</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Software_design_patterns" title="Category:Software design patterns">Software design patterns</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_example_Haskell_code" title="Category:Articles with example Haskell code">Articles with example Haskell code</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_example_Java_code" title="Category:Articles with example Java code">Articles with example Java code</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_example_Python_code" title="Category:Articles with example Python code">Articles with example Python code</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_example_C%2B%2B_code" title="Category:Articles with example C++ code">Articles with example C++ code</a></span> | <span dir='ltr'><a href="/wiki/Category:Method_(computer_science)" title="Category:Method (computer science)">Method (computer science)</a></span></div><div id="mw-hidden-catlinks" class="mw-hidden-cats-hidden">Hidden categories:&#32;<span dir='ltr'><a href="/wiki/Category:All_articles_with_unsourced_statements" title="Category:All articles with unsourced statements">All articles with unsourced statements</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_unsourced_statements_since_March_2009" title="Category:Articles with unsourced statements since March 2009">Articles with unsourced statements since March 2009</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Factory_method_pattern" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Factory_method_pattern" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Factory_method_pattern&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Factory_method_pattern&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Factory_method_pattern" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Factory_method_pattern" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Factory_method_pattern" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Factory_method_pattern&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Factory_method_pattern&amp;oldid=281510232" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Factory_method_pattern&amp;id=281510232">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/Fabrikmethode">Deutsch</a></li>
				<li class="interwiki-es"><a href="http://es.wikipedia.org/wiki/Factory_Method_(patr%C3%B3n_de_dise%C3%B1o)">Español</a></li>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Fabrique_(patron_de_conception)">Français</a></li>
				<li class="interwiki-ko"><a href="http://ko.wikipedia.org/wiki/Factory_method_%ED%8C%A8%ED%84%B4">한국어</a></li>
				<li class="interwiki-it"><a href="http://it.wikipedia.org/wiki/Factory_method">Italiano</a></li>
				<li class="interwiki-he"><a href="http://he.wikipedia.org/wiki/%D7%AA%D7%91%D7%A0%D7%99%D7%AA_Factory_Method">עברית</a></li>
				<li class="interwiki-nl"><a href="http://nl.wikipedia.org/wiki/Factory_(ontwerppatroon)">Nederlands</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/Factory_Method_%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3">日本語</a></li>
				<li class="interwiki-pl"><a href="http://pl.wikipedia.org/wiki/Metoda_wytw%C3%B3rcza_(wzorzec_projektowy)">Polski</a></li>
				<li class="interwiki-pt"><a href="http://pt.wikipedia.org/wiki/Factory_Method">Português</a></li>
				<li class="interwiki-ru"><a href="http://ru.wikipedia.org/wiki/%D0%A4%D0%B0%D0%B1%D1%80%D0%B8%D1%87%D0%BD%D1%8B%D0%B9_%D0%BC%D0%B5%D1%82%D0%BE%D0%B4_(%D1%88%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD_%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)">Русский</a></li>
				<li class="interwiki-th"><a href="http://th.wikipedia.org/wiki/%E0%B9%81%E0%B8%9F%E0%B8%81%E0%B8%97%E0%B8%AD%E0%B8%A3%E0%B8%B5%E0%B9%80%E0%B8%A1%E0%B8%98%E0%B8%AD%E0%B8%94%E0%B9%81%E0%B8%9E%E0%B8%95%E0%B9%80%E0%B8%97%E0%B8%B4%E0%B8%A3%E0%B9%8C%E0%B8%99">ไทย</a></li>
				<li class="interwiki-vi"><a href="http://vi.wikipedia.org/wiki/Factory_method_pattern">Tiếng Việt</a></li>
				<li class="interwiki-uk"><a href="http://uk.wikipedia.org/wiki/%D0%A4%D0%B0%D0%B1%D1%80%D0%B8%D1%87%D0%BD%D0%B8%D0%B9_%D0%BC%D0%B5%D1%82%D0%BE%D0%B4_(%D1%88%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD_%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D1%83%D0%B2%D0%B0%D0%BD%D0%BD%D1%8F)">Українська</a></li>
				<li class="interwiki-zh"><a href="http://zh.wikipedia.org/wiki/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95">中文</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 3 April 2009, at 15:00.</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv202 in 0.045 secs. --></body></html>
