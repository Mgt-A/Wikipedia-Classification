<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="X86,2006,29K,32-bit,386BSD,3DNow,3DNow!,3D computer graphics,5k86,64-bit,6x86" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=X86&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=X86&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>x86 - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "X86";
		var wgTitle = "X86";
		var wgAction = "view";
		var wgArticleId = "34198";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 282089241;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-X86 skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">x86</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<div class="rellink boilerplate seealso">See also: <a href="/wiki/X86_assembly_language" title="X86 assembly language">x86 assembly language</a></div>
<div class="thumb tright">
<div class="thumbinner" style="width:182px;"><a href="/wiki/File:Core_2_Duo_E6300.jpg" class="image" title="Intel Core 2 Duo, an example of an x86-compatible and multi-core 64-bit processor."><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/2/23/Core_2_Duo_E6300.jpg/180px-Core_2_Duo_E6300.jpg" width="180" height="179" border="0" class="thumbimage" /></a>
<div class="thumbcaption">
<div class="magnify"><a href="/wiki/File:Core_2_Duo_E6300.jpg" class="internal" title="Enlarge"><img src="/skins-1.5/common/images/magnify-clip.png" width="15" height="11" alt="" /></a></div>
<b>Intel</b> Core 2 Duo, an example of an x86-compatible and multi-core 64-bit processor.</div>
</div>
</div>
<div class="thumb tright">
<div class="thumbinner" style="width:182px;"><a href="/wiki/File:Slot-A_Athlon.jpg" class="image" title="AMD Athlon (early version), another technically different, but fully compatible x86 implementation."><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/e/e7/Slot-A_Athlon.jpg/180px-Slot-A_Athlon.jpg" width="180" height="83" border="0" class="thumbimage" /></a>
<div class="thumbcaption">
<div class="magnify"><a href="/wiki/File:Slot-A_Athlon.jpg" class="internal" title="Enlarge"><img src="/skins-1.5/common/images/magnify-clip.png" width="15" height="11" alt="" /></a></div>
<b>AMD</b> Athlon (early version), another technically different, but fully compatible x86 implementation.</div>
</div>
</div>
<p>The generic term <b>x86</b> refers to the most commercially successful <a href="/wiki/Instruction_set_architecture" title="Instruction set architecture" class="mw-redirect">instruction set architecture</a><sup id="cite_ref-0" class="reference"><a href="#cite_note-0" title=""><span>[</span>1<span>]</span></a></sup> in the history of <a href="/wiki/Personal_computing" title="Personal computing" class="mw-redirect">personal computing</a>. It derived from the model numbers, ending in "86", of the first few processor generations <a href="/wiki/Backward_compatibility" title="Backward compatibility">backward compatible</a> with the original <a href="/wiki/Intel_8086" title="Intel 8086">Intel 8086</a>. Since then, many additions and extensions have been added to the x86 instruction set, almost consistently with full backwards compatibility.<sup id="cite_ref-1" class="reference"><a href="#cite_note-1" title=""><span>[</span>2<span>]</span></a></sup> The architecture has been implemented in processors from <a href="/wiki/Intel_Corporation" title="Intel Corporation">Intel</a>, <a href="/wiki/Cyrix" title="Cyrix">Cyrix</a>, <a href="/wiki/Advanced_Micro_Devices" title="Advanced Micro Devices">AMD</a>, <a href="/wiki/VIA_Technologies" title="VIA Technologies">VIA</a>, and many others.</p>
<p>As the x86 term became common <i>after</i> the introduction of the <a href="/wiki/80386" title="80386" class="mw-redirect">80386</a>, it usually implies a binary compatibility with the 32-bit <a href="/wiki/Instruction_set" title="Instruction set">instruction set</a> of the 80386. This may sometimes be emphasized as <a href="/wiki/X86-32" title="X86-32" class="mw-redirect">x86-32</a> to distinguish it either from the original 16-bit x86-16 or from the newer 64-bit <a href="/wiki/X86-64" title="X86-64">x86-64</a> (also called x64).<sup id="cite_ref-2" class="reference"><a href="#cite_note-2" title=""><span>[</span>3<span>]</span></a></sup> Although most x86 processors used in <i>new</i> <a href="/wiki/Personal_computer" title="Personal computer">personal computers</a> and <a href="/wiki/Server" title="Server">servers</a> have 64-bit capabilities, to avoid compatibility problems with older computers or systems, the term <i>x86-64</i> is often used to denote 64-bit software, with the term <i>x86</i> implying only 32-bit.<sup id="cite_ref-3" class="reference"><a href="#cite_note-3" title=""><span>[</span>4<span>]</span></a></sup><sup id="cite_ref-4" class="reference"><a href="#cite_note-4" title=""><span>[</span>5<span>]</span></a></sup></p>
<p>Today, the x86 architecture is ubiquitous among desktop and notebook computers, as well as a growing majority among servers and workstations. A large amount of <a href="/wiki/Computer_software" title="Computer software">software</a> supports the platform, including <a href="/wiki/Operating_system" title="Operating system">OSs</a> such as <a href="/wiki/MS-DOS" title="MS-DOS">MS-DOS</a>, <a href="/wiki/Microsoft_Windows" title="Microsoft Windows">Windows</a>, <a href="/wiki/GNU/Linux" title="GNU/Linux" class="mw-redirect">GNU/Linux</a>, <a href="/wiki/BSD" title="BSD" class="mw-redirect">BSD</a>, <a href="/wiki/Solaris_(operating_system)" title="Solaris (operating system)">Solaris</a>, and <a href="/wiki/Mac_OS_X" title="Mac OS X">Mac OS X</a>. The architecture is relatively uncommon in <a href="/wiki/Embedded_systems" title="Embedded systems" class="mw-redirect">embedded systems</a> and low-cost niches such as <a href="/wiki/Appliance" title="Appliance">appliances</a> and toys lack any significant x86 presence.<sup id="cite_ref-5" class="reference"><a href="#cite_note-5" title=""><span>[</span>6<span>]</span></a></sup> Simpler 16-bit x86 chips are more common here, but <a href="/wiki/Advanced_Micro_Devices" title="Advanced Micro Devices">AMD</a>'s <a href="/wiki/Geode_(processor)" title="Geode (processor)">Geode</a> and the new <a href="/wiki/Intel_Atom" title="Intel Atom">Intel Atom</a> are examples of 32- and 64-bit designs used in this segment.</p>
<p>Contrary to some popular belief, x86 is not synonymous with <a href="/wiki/IBM_PC_compatible" title="IBM PC compatible">IBM PC compatibility</a> as this also implies a multitude of other hardware, albeit with some of it standardized. For instance, the original <a href="/wiki/Xbox" title="Xbox">Xbox</a> was designed around an x86 processor but security restrictions led to software requirements making it incapable of simply running standard code designed for other IBM PC compatible systems. Also, the <a href="/wiki/GRID_Compass" title="GRID Compass" class="mw-redirect">GRID Compass</a> laptop (one of the first on the market), and many others, used x86 chips before the IBM PC compatible market even started.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Chronology"><span class="tocnumber">1</span> <span class="toctext">Chronology</span></a></li>
<li class="toclevel-1"><a href="#History"><span class="tocnumber">2</span> <span class="toctext">History</span></a>
<ul>
<li class="toclevel-2"><a href="#Background"><span class="tocnumber">2.1</span> <span class="toctext">Background</span></a></li>
<li class="toclevel-2"><a href="#Other_manufacturers"><span class="tocnumber">2.2</span> <span class="toctext">Other manufacturers</span></a></li>
<li class="toclevel-2"><a href="#Extensions_of_word_size"><span class="tocnumber">2.3</span> <span class="toctext">Extensions of word size</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Overview"><span class="tocnumber">3</span> <span class="toctext">Overview</span></a>
<ul>
<li class="toclevel-2"><a href="#Basic_properties_of_the_architecture"><span class="tocnumber">3.1</span> <span class="toctext">Basic properties of the architecture</span></a></li>
<li class="toclevel-2"><a href="#Current_implementations"><span class="tocnumber">3.2</span> <span class="toctext">Current implementations</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Segmentation"><span class="tocnumber">4</span> <span class="toctext">Segmentation</span></a></li>
<li class="toclevel-1"><a href="#Addressing_modes"><span class="tocnumber">5</span> <span class="toctext">Addressing modes</span></a></li>
<li class="toclevel-1"><a href="#x86_registers"><span class="tocnumber">6</span> <span class="toctext">x86 registers</span></a>
<ul>
<li class="toclevel-2"><a href="#16-bit"><span class="tocnumber">6.1</span> <span class="toctext">16-bit</span></a></li>
<li class="toclevel-2"><a href="#32-bit"><span class="tocnumber">6.2</span> <span class="toctext">32-bit</span></a></li>
<li class="toclevel-2"><a href="#64-bit"><span class="tocnumber">6.3</span> <span class="toctext">64-bit</span></a></li>
<li class="toclevel-2"><a href="#Miscellaneous.2FSpecial_Purpose"><span class="tocnumber">6.4</span> <span class="toctext">Miscellaneous/Special Purpose</span></a></li>
<li class="toclevel-2"><a href="#Purpose"><span class="tocnumber">6.5</span> <span class="toctext">Purpose</span></a></li>
<li class="toclevel-2"><a href="#Structure"><span class="tocnumber">6.6</span> <span class="toctext">Structure</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Operating_modes"><span class="tocnumber">7</span> <span class="toctext">Operating modes</span></a>
<ul>
<li class="toclevel-2"><a href="#Real_mode"><span class="tocnumber">7.1</span> <span class="toctext">Real mode</span></a></li>
<li class="toclevel-2"><a href="#Protected_mode"><span class="tocnumber">7.2</span> <span class="toctext">Protected mode</span></a>
<ul>
<li class="toclevel-3"><a href="#Virtual_8086_mode"><span class="tocnumber">7.2.1</span> <span class="toctext">Virtual 8086 mode</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#64-bit_Long_mode"><span class="tocnumber">7.3</span> <span class="toctext">64-bit Long mode</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Extensions"><span class="tocnumber">8</span> <span class="toctext">Extensions</span></a>
<ul>
<li class="toclevel-2"><a href="#Floating_point_unit"><span class="tocnumber">8.1</span> <span class="toctext">Floating point unit</span></a></li>
<li class="toclevel-2"><a href="#MMX"><span class="tocnumber">8.2</span> <span class="toctext">MMX</span></a></li>
<li class="toclevel-2"><a href="#3DNow.21"><span class="tocnumber">8.3</span> <span class="toctext">3DNow!</span></a></li>
<li class="toclevel-2"><a href="#SSE"><span class="tocnumber">8.4</span> <span class="toctext">SSE</span></a></li>
<li class="toclevel-2"><a href="#Physical_Address_Extension_.28PAE.29"><span class="tocnumber">8.5</span> <span class="toctext">Physical Address Extension (PAE)</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Virtualization"><span class="tocnumber">9</span> <span class="toctext">Virtualization</span></a></li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">10</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#Footnotes"><span class="tocnumber">11</span> <span class="toctext">Footnotes</span></a></li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">12</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">13</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Chronology" id="Chronology"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=X86&amp;action=edit&amp;section=1" title="Edit section: Chronology">edit</a>]</span> <span class="mw-headline">Chronology</span></h2>
<p>The table below lists brands of common<sup id="cite_ref-6" class="reference"><a href="#cite_note-6" title=""><span>[</span>7<span>]</span></a></sup> consumer targeted processors implementing the x86 <a href="/wiki/Instruction_set" title="Instruction set">instruction set</a>, grouped by generations that highlight important points in x86 history. Note: <i>CPU generations are not strict - each generation is roughly marked by significantly improved or commercially successful processor <a href="/wiki/Microarchitecture" title="Microarchitecture">microarchitecture</a> designs.</i></p>
<table class="wikitable">
<tr>
<th>Generation</th>
<th>First introduced</th>
<th>Prominent Consumer CPU brands</th>
<th>linear / physical address space</th>
<th>Notable (new) features</th>
</tr>
<tr>
<td>1</td>
<td>1978</td>
<td><a href="/wiki/Intel_8086" title="Intel 8086">Intel 8086</a>, <a href="/wiki/Intel_8088" title="Intel 8088">Intel 8088</a></td>
<td rowspan="2"><b>16-bit</b> / 20-bit (<i>segmented</i>)</td>
<td>first x86 microprocessors</td>
</tr>
<tr>
<td rowspan="2">2</td>
<td rowspan="2">1982</td>
<td><a href="/wiki/Intel_80186" title="Intel 80186">Intel 80186</a>, <a href="/wiki/Intel_80188" title="Intel 80188">Intel 80188</a>, <a href="/wiki/NEC_V20" title="NEC V20">NEC V20</a>/V30</td>
<td>hardware for fast <a href="/wiki/Address" title="Address">address</a> calculations, fast mul/div etc</td>
</tr>
<tr>
<td><a href="/wiki/Intel_80286" title="Intel 80286">Intel 80286</a></td>
<td><b>16-bit</b> (30-bit <i>virtual</i>) / 24-bit (<i>segmented</i>)</td>
<td><a href="/wiki/Memory_management_unit" title="Memory management unit">MMU</a>, for <a href="/wiki/Protected_mode" title="Protected mode">protected mode</a> and a larger <a href="/wiki/Address_space" title="Address space">address space</a></td>
</tr>
<tr>
<td>3 (<a href="/wiki/IA-32" title="IA-32">IA-32</a>)</td>
<td>1985</td>
<td><a href="/wiki/Intel_80386" title="Intel 80386">Intel386</a>, <a href="/wiki/AMD_Am386" title="AMD Am386" class="mw-redirect">AMD Am386</a></td>
<td rowspan="4"><b>32-bit</b> (46-bit <i>virtual</i>) / 32-bit</td>
<td><a href="/wiki/32-bit" title="32-bit">32-bit</a> <a href="/wiki/Instruction_set" title="Instruction set">instruction set</a>, MMU with paging</td>
</tr>
<tr>
<td>4</td>
<td>1989</td>
<td><a href="/wiki/Intel_486" title="Intel 486" class="mw-redirect">Intel486</a>, <a href="/wiki/AMD_Am486" title="AMD Am486" class="mw-redirect">AMD Am486</a></td>
<td>risc-like <a href="/wiki/Pipelining" title="Pipelining" class="mw-redirect">pipelining</a>, integrated <a href="/wiki/Floating_point_unit" title="Floating point unit" class="mw-redirect">FPU</a>, on-chip <a href="/wiki/CPU_cache" title="CPU cache">cache</a></td>
</tr>
<tr>
<td>5</td>
<td>1993</td>
<td><a href="/wiki/Pentium" title="Pentium">Pentium</a>, <a href="/wiki/Pentium_MMX" title="Pentium MMX" class="mw-redirect">Pentium MMX</a></td>
<td><a href="/wiki/Superscalar" title="Superscalar">superscalar</a>, <a href="/wiki/64-bit" title="64-bit">64-bit</a> <a href="/wiki/Databus" title="Databus" class="mw-redirect">databus</a>, faster FPU, <a href="/wiki/MMX_(instruction_set)" title="MMX (instruction set)">MMX</a></td>
</tr>
<tr>
<td>5/6</td>
<td>1996</td>
<td><a href="/wiki/Cyrix_6x86" title="Cyrix 6x86">Cyrix 6x86</a>, <a href="/wiki/Cyrix_MII" title="Cyrix MII" class="mw-redirect">Cyrix MII</a></td>
<td><a href="/wiki/Register_renaming" title="Register renaming">register renaming</a>, <a href="/wiki/Speculative_execution" title="Speculative execution">speculative execution</a></td>
</tr>
<tr>
<td rowspan="2">6</td>
<td>1995</td>
<td><a href="/wiki/Pentium_Pro" title="Pentium Pro">Pentium Pro</a>, <a href="/wiki/AMD_K5" title="AMD K5">AMD K5</a>, <a href="/wiki/Nx586" title="Nx586" class="mw-redirect">Nx586 (1994)</a></td>
<td rowspan="5"><i>as above</i> / <b>36</b>-bit <i>physical</i> (PAE)</td>
<td>μ-op translation, <a href="/wiki/Physical_Address_Extension" title="Physical Address Extension">PAE</a> (not K5, Nx586), integrated <a href="/wiki/L2_cache" title="L2 cache" class="mw-redirect">L2 cache</a> (not K5, Nx586)</td>
</tr>
<tr>
<td>1997</td>
<td><a href="/wiki/AMD_K6" title="AMD K6">AMD K6</a>/<a href="/wiki/AMD_K6-2" title="AMD K6-2">-2/3</a>, <a href="/wiki/Pentium_II" title="Pentium II">Pentium II</a>/<a href="/wiki/Pentium_III" title="Pentium III">III</a></td>
<td>L3-cache support, <a href="/wiki/3DNow" title="3DNow" class="mw-redirect">3DNow</a>, <a href="/wiki/Streaming_SIMD_Extensions" title="Streaming SIMD Extensions">SSE</a></td>
</tr>
<tr>
<td rowspan="2">7</td>
<td>1999</td>
<td><a href="/wiki/Athlon" title="Athlon">Athlon</a>, <a href="/wiki/Athlon_XP" title="Athlon XP" class="mw-redirect">Athlon XP</a></td>
<td>superscalar FPU, wide design (<i>up to three x86 instr./clock</i>)</td>
</tr>
<tr>
<td>2000</td>
<td><a href="/wiki/Pentium_4" title="Pentium 4">Pentium 4</a></td>
<td>deeply <a href="/wiki/Pipelining" title="Pipelining" class="mw-redirect">pipelined</a>, high frequency, <a href="/wiki/SSE2" title="SSE2">SSE2</a>, <a href="/wiki/Hyper-threading" title="Hyper-threading">hyper-threading</a></td>
</tr>
<tr>
<td>6-M/7-M</td>
<td rowspan="2">2003</td>
<td><a href="/wiki/Pentium_M" title="Pentium M">Pentium M</a>, <a href="/wiki/Intel_Core" title="Intel Core">Intel Core</a></td>
<td>optimized for low <a href="/wiki/Thermal_Design_Power" title="Thermal Design Power">power</a></td>
</tr>
<tr>
<td rowspan="2">8 (<a href="/wiki/X86-64" title="X86-64">x86-64</a>)</td>
<td><a href="/wiki/Athlon_64" title="Athlon 64">Athlon 64</a>, <a href="/wiki/Opteron" title="Opteron">Opteron</a></td>
<td rowspan="3"><b>64-bit</b> / 52-bit (<i>48-bit / 40-bit in first impl.)</i></td>
<td><a href="/wiki/X86-64" title="X86-64">x86-64 instruction set</a>, on-die memory controller, <a href="/wiki/Hypertransport" title="Hypertransport" class="mw-redirect">hypertransport</a></td>
</tr>
<tr>
<td>2004</td>
<td>Pentium 4 <a href="/wiki/Pentium4" title="Pentium4" class="mw-redirect">Prescott</a></td>
<td>very deeply <a href="/wiki/Pipelining" title="Pipelining" class="mw-redirect">pipelined</a>, very high frequency, <a href="/wiki/SSE3" title="SSE3">SSE3</a></td>
</tr>
<tr>
<td>9</td>
<td>2006</td>
<td><a href="/wiki/Intel_Core_2" title="Intel Core 2">Intel Core 2</a></td>
<td>low power, <a href="/wiki/Multi-core" title="Multi-core">multi-core</a>, lower clock frequency, <a href="/wiki/SSE4" title="SSE4">SSE4</a> (Penryn)</td>
</tr>
<tr>
<td>10</td>
<td>2007</td>
<td>AMD <a href="/wiki/Phenom_(processor)" title="Phenom (processor)">Phenom</a></td>
<td rowspan="3"><i>as above / 48-bit physical for AMD Phenom</i></td>
<td>monolithic quad-core, 128 bit FPUs, <a href="/wiki/SSE4a" title="SSE4a" class="mw-redirect">SSE4a</a>, HyperTransport 3 or QuickPath, modular design</td>
</tr>
<tr>
<td>&#160;?</td>
<td>2008</td>
<td><a href="/wiki/Intel_Atom" title="Intel Atom">Intel Atom</a>, <a href="/wiki/Intel_Core_i7" title="Intel Core i7">Intel Core i7</a></td>
<td>In-order but highly pipelined, very-low-power, native memory controller, on-die L3 cache</td>
</tr>
<tr>
<td>11</td>
<td>2010</td>
<td>Intel <a href="/wiki/Sandy_Bridge_(microarchitecture)" title="Sandy Bridge (microarchitecture)" class="mw-redirect">Sandy Bridge</a>, AMD <a href="/wiki/Bulldozer_(processor)" title="Bulldozer (processor)">Bulldozer</a></td>
<td><a href="/wiki/SSE5" title="SSE5">SSE5</a>/<a href="/wiki/Advanced_Vector_Extensions" title="Advanced Vector Extensions">AVX</a>, highly modular design</td>
</tr>
</table>
<p><a name="History" id="History"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=X86&amp;action=edit&amp;section=2" title="Edit section: History">edit</a>]</span> <span class="mw-headline">History</span></h2>
<p><a name="Background" id="Background"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=X86&amp;action=edit&amp;section=3" title="Edit section: Background">edit</a>]</span> <span class="mw-headline">Background</span></h4>
<p>The x86 architecture first appeared as the <a href="/wiki/Intel_8086" title="Intel 8086">Intel 8086</a> <a href="/wiki/Central_processing_unit" title="Central processing unit">CPU</a> released in 1978, a fully 16-bit design based on the earlier <a href="/wiki/Intel_8085" title="Intel 8085">Intel 8085</a>. Although not binary compatible, it was designed to allow <a href="/wiki/Assembly_language" title="Assembly language">assembly language</a> programs written for the 8085 to be mechanically translated into the equivalent <a href="/wiki/X86_assembly_language" title="X86 assembly language">8086 assembly</a>. This made the new processor a tempting migration path for 8085 hardware and software vendors, but - mainly due to a wider databus - not without significant redesign of system hardware. To address this, Intel introduced the almost identical, but externally 8-bit, <a href="/wiki/Intel_8088" title="Intel 8088">8088</a> which permitted simpler <a href="/wiki/Printed_circuit_board" title="Printed circuit board">printed circuit boards</a>, demanded fewer (1-bit wide) <a href="/wiki/DRAM" title="DRAM" class="mw-redirect">DRAM</a> chips, and more easily could be interfaced to already established (i.e. low-cost) 8-bit system and peripheral chips. Among other, non technical factors, this contributed to the fact that IBM built their <a href="/wiki/IBM_PC" title="IBM PC" class="mw-redirect">IBM PC</a> around the 8088, despite a presence of 16-bit microprocessors from Motorola, Zilog, and National Semiconductor. Subsequently, the IBM PC became the dominant personal computer platform and the 8088 and its successors became the dominant CPU architecture for desktop and laptop computers.</p>
<p><a name="Other_manufacturers" id="Other_manufacturers"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=X86&amp;action=edit&amp;section=4" title="Edit section: Other manufacturers">edit</a>]</span> <span class="mw-headline">Other manufacturers</span></h4>
<div class="rellink boilerplate further">Further information: <a href="/wiki/List_of_former_IA32_compatible_processor_manufacturers" title="List of former IA32 compatible processor manufacturers">List of former IA32 compatible processor manufacturers</a></div>
<p>At various times, companies such as <a href="/wiki/IBM" title="IBM">IBM</a>, <a href="/wiki/NEC" title="NEC">NEC</a><sup id="cite_ref-7" class="reference"><a href="#cite_note-7" title=""><span>[</span>8<span>]</span></a></sup>, <a href="/wiki/AMD" title="AMD" class="mw-redirect">AMD</a>, <a href="/wiki/Texas_Instruments" title="Texas Instruments">TI</a>, <a href="/wiki/STMicroelectronics" title="STMicroelectronics">STM</a>, <a href="/wiki/Fujitsu" title="Fujitsu">Fujitsu</a>, <a href="/wiki/OKI" title="OKI" class="mw-redirect">OKI</a>, <a href="/wiki/Siemens_AG" title="Siemens AG" class="mw-redirect">Siemens</a>, <a href="/wiki/Cyrix" title="Cyrix">Cyrix</a>, <a href="/wiki/Intersil" title="Intersil">Intersil</a>, <a href="/wiki/Chips_and_Technologies" title="Chips and Technologies">C&amp;T</a>, <a href="/wiki/NexGen" title="NexGen">NexGen</a>, and <a href="/wiki/United_Microelectronics_Corporation" title="United Microelectronics Corporation">UMC</a> started to design and/or manufacture x86 <a href="/wiki/Central_processing_unit" title="Central processing unit">processors</a> intended for personal computers as well as embedded systems. Such x86 implementations are seldom plain copies but often employ different internal <a href="/wiki/Microarchitecture" title="Microarchitecture">microarchitectures</a> as well as different solutions at the electronic and physical levels. Quite naturally, early compatible chips were 16-bit, while 32-bit designs appeared much later. For the <a href="/wiki/Personal_computer" title="Personal computer">personal computer</a> market, real quantities started to appear around 1990 with <a href="/wiki/I386" title="I386" class="mw-redirect">i386</a> and <a href="/wiki/I486" title="I486" class="mw-redirect">i486</a> compatible processors, often named similarly to Intel's original chips. Other companies, which designed or manufactured x86 or <a href="/wiki/X87" title="X87">x87</a> processors, include <a href="/wiki/ITT_Corporation" title="ITT Corporation">ITT Corporation</a>, <a href="/wiki/National_Semiconductor" title="National Semiconductor">National Semiconductor</a>, <a href="/w/index.php?title=ULSI_System_Technology&amp;action=edit&amp;redlink=1" class="new" title="ULSI System Technology (page does not exist)">ULSI System Technology</a>, and <a href="/wiki/Weitek" title="Weitek">Weitek</a>.</p>
<p>Following the fully <a href="/wiki/Pipelining" title="Pipelining" class="mw-redirect">pipelined</a> <a href="/wiki/I486" title="I486" class="mw-redirect">i486</a>, <a href="/wiki/Intel_Corporation" title="Intel Corporation">Intel</a> introduced the <a href="/wiki/Pentium" title="Pentium">Pentium</a> brand name (which, unlike numbers, could be trademarked) for their new line of <a href="/wiki/Superscalar" title="Superscalar">superscalar</a> x86 designs. With the x86 naming scheme now legally cleared, <a href="/wiki/IBM" title="IBM">IBM</a> partnered with <a href="/wiki/Cyrix" title="Cyrix">Cyrix</a> to produce the <a href="/wiki/Cyrix_Cx5x86" title="Cyrix Cx5x86">5x86</a> and then the very efficient <a href="/wiki/6x86" title="6x86" class="mw-redirect">6x86</a> (M1) and <a href="/wiki/6x86" title="6x86" class="mw-redirect">6x86</a>MX (<a href="/wiki/MII" title="MII">MII</a>) lines of <a href="/wiki/Cyrix" title="Cyrix">Cyrix</a> designs, which were the first x86 chips implementing <a href="/wiki/Register_renaming" title="Register renaming">register renaming</a> to enable <a href="/wiki/Speculative_execution" title="Speculative execution">speculative execution</a>. AMD meanwhile designed and manufactured the advanced but delayed <a href="/wiki/5k86" title="5k86" class="mw-redirect">5k86</a> (<a href="/wiki/AMD_K5" title="AMD K5">K5</a>), which, <i>internally</i>, was heavily based on AMD's earlier <a href="/wiki/29K" title="29K" class="mw-redirect">29K</a> <a href="/wiki/RISC" title="RISC" class="mw-redirect">RISC</a> design; similar to <a href="/wiki/NexGen" title="NexGen">NexGen</a>'s <a href="/wiki/Nx586" title="Nx586" class="mw-redirect">Nx586</a>, it used a strategy where dedicated pipeline stages decode x86 instructions into uniform and easily handled <a href="/wiki/Micro-operation" title="Micro-operation">micro-operations</a>, a method that has remained the basis for most (not all) x86 designs to this day.</p>
<p>Some early versions of these chips had heat dissipation problems. The 6x86 was also affected by a few minor compatibility issues, the <a href="/wiki/Nx586" title="Nx586" class="mw-redirect">Nx586</a> lacked an <a href="/wiki/Floating_point_unit" title="Floating point unit" class="mw-redirect">FPU</a> and (the then crucial) pin-compatibility, while the <a href="/wiki/AMD_K5" title="AMD K5">K5</a> had somewhat disappointing performance when it was (eventually) launched. A low customer awareness of alternatives to the Pentium line further contributed to these designs being comparatively unsuccessful, despite the fact that the <a href="/wiki/AMD_K5" title="AMD K5">K5</a> had very good Pentium compatibility and the <a href="/wiki/6x86" title="6x86" class="mw-redirect">6x86</a> was significantly faster than the Pentium on integer code.<sup id="cite_ref-8" class="reference"><a href="#cite_note-8" title=""><span>[</span>9<span>]</span></a></sup> <a href="/wiki/AMD" title="AMD" class="mw-redirect">AMD</a> later managed to establish itself as a serious contender with the <a href="/wiki/AMD_K6" title="AMD K6">K6</a> line of processors, which gave way to the highly successful <a href="/wiki/Athlon" title="Athlon">Athlon</a> and <a href="/wiki/Opteron" title="Opteron">Opteron</a>. There were also other contenders, such as <a href="/wiki/Centaur_Technology" title="Centaur Technology">Centaur Technology</a>, (<a href="/wiki/Integrated_Device_Technology" title="Integrated Device Technology">IDT</a>), <a href="/wiki/Rise_Technology" title="Rise Technology">Rise Technology</a>, and <a href="/wiki/Transmeta" title="Transmeta">Transmeta</a>. <a href="/wiki/VIA_Technologies" title="VIA Technologies">VIA Technologies</a>' energy efficient <a href="/wiki/VIA_C3" title="VIA C3">C3</a> and <a href="/wiki/VIA_C7" title="VIA C7">C7</a> processors, which were designed by <a href="/wiki/Centaur_Technology" title="Centaur Technology">Centaur</a>, have been sold for many years, and Centaur newest design, the <a href="/wiki/VIA_Nano" title="VIA Nano">VIA Nano</a>, is their first processor with <a href="/wiki/Superscalar" title="Superscalar">superscalar</a> and <a href="/wiki/Speculative_execution" title="Speculative execution">speculative execution</a>. It was, perhaps interestingly, introduced at about the same time as Intel's first "in-order" processor since the original <a href="/wiki/Pentium" title="Pentium">Pentium</a>, the <a href="/wiki/Intel_Atom" title="Intel Atom">Intel Atom</a>.</p>
<p><a name="Extensions_of_word_size" id="Extensions_of_word_size"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=X86&amp;action=edit&amp;section=5" title="Edit section: Extensions of word size">edit</a>]</span> <span class="mw-headline">Extensions of word size</span></h4>
<p>The <a href="/wiki/Instruction_set_architecture" title="Instruction set architecture" class="mw-redirect">instruction set architecture</a> has twice been extended to a larger <a href="/wiki/Word_(computer_science)" title="Word (computer science)" class="mw-redirect">word size</a>. In 1985, Intel released the 32-bit 80386 (or i386) which gradually replaced the earlier 16-bit chips in computers (although typically not in <a href="/wiki/Embedded_system" title="Embedded system">embedded systems</a>) during the following years; this extended programming model was originally referred to as <i>the i386 architecture</i> (like its first implementation) but Intel later dubbed it <a href="/wiki/IA-32" title="IA-32">IA-32</a> when introducing its (unrelated) <a href="/wiki/IA-64" title="IA-64" class="mw-redirect">IA-64</a> architecture. In 1999-2003, <a href="/wiki/Advanced_Micro_Devices" title="Advanced Micro Devices">AMD</a> extended this 32-bit architecture to 64 bits and referred to it as <a href="/wiki/X86-64" title="X86-64">x86-64</a> in early documents and later as <a href="/wiki/AMD64" title="AMD64" class="mw-redirect">AMD64</a>. Intel soon adopted AMD's architectural extensions under the name IA-32e which was later renamed EM64T and finally Intel 64. Among these five names, x86-64 is probably the most commonly used, although <a href="/wiki/Microsoft" title="Microsoft">Microsoft</a> and <a href="/wiki/Sun_Microsystems" title="Sun Microsystems">Sun Microsystems</a> also use the (perhaps even more vendor-neutral) term x64.</p>
<p><a name="Overview" id="Overview"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=X86&amp;action=edit&amp;section=6" title="Edit section: Overview">edit</a>]</span> <span class="mw-headline">Overview</span></h2>
<p><a name="Basic_properties_of_the_architecture" id="Basic_properties_of_the_architecture"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=X86&amp;action=edit&amp;section=7" title="Edit section: Basic properties of the architecture">edit</a>]</span> <span class="mw-headline">Basic properties of the architecture</span></h3>
<p>The x86 architecture is a variable instruction length, primarily two-address "<a href="/wiki/Complex_instruction_set_computer" title="Complex instruction set computer">CISC</a>" design with emphasis on <a href="/wiki/Backward_compatibility" title="Backward compatibility">backward compatibility</a>. The instruction set is not typical CISC however, but basically an extended and orthogonalized version of the simple eight-bit <a href="/wiki/Intel_8085" title="Intel 8085">8085</a> architecture. Words are stored in <a href="/wiki/Endianness" title="Endianness">little-endian</a> order and 16-bit and 32-bit accesses are allowed to unaligned memory addresses.</p>
<p>To conserve opcode space, most register-addresses are three bits, and at most one operand can be in memory (some highly orthogonal "CISC" designs, such as the <a href="/wiki/PDP-11" title="PDP-11">PDP-11</a>, may use two memory operands), but this memory operand may also be the <i>destination</i>, while the other operand, the <i>source</i>, can be either <i>register</i> or <i>immediate</i>. This contributes, among other factors, to a code footprint that rivals eight-bit machines and enables efficient use of instruction cache memory. The relatively small number of general registers (also inherited from 8085) has made register-relative addressing (using small immediate offsets) an important method of accessing operands, especially on the stack. Much work has therefore been invested in making such accesses as fast as register accesses, i.e. a one cycle instruction throughput, in most circumstances.</p>
<p><a name="Current_implementations" id="Current_implementations"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=X86&amp;action=edit&amp;section=8" title="Edit section: Current implementations">edit</a>]</span> <span class="mw-headline">Current implementations</span></h3>
<p>During <a href="/wiki/Execution_(computers)" title="Execution (computers)" class="mw-redirect">execution</a>, current x86 processors employ a few extra decoding steps to split most instructions into smaller pieces (micro-operations). These are then handed to a control unit that buffers and schedules them in compliance with x86-semantics so that they can be executed, partly in parallel, by one of several (more or less specialized) <a href="/wiki/Execution_units" title="Execution units" class="mw-redirect">execution units</a>. These modern x86 designs are thus <a href="/wiki/Superscalar" title="Superscalar">superscalar</a>, and also capable of <a href="/wiki/Out_of_order_execution" title="Out of order execution" class="mw-redirect">out of order</a> and <a href="/wiki/Speculative_execution" title="Speculative execution">speculative execution</a> (via <a href="/wiki/Register_renaming" title="Register renaming">register renaming</a>), which means they may execute multiple (partial or complete) x86 instructions simultaneously, and not necessarily in the same order as given in the instruction stream.</p>
<p>When introduced, this approach was sometimes referred to as a "RISC core" or as "RISC translation", partly for marketing reasons, but also because these micro-operations share some properties with certain types of RISC instructions. However, <i>traditional</i> <a href="/wiki/Microcode" title="Microcode">microcode</a> (used since the 1950s) also inherently shares many of the same properties; the new approach differs mainly in that the translation to micro-operations now occurs asynchronously. Not having to synchronize the execution units with the decode steps opens up possibilities for more analysis of the (buffered) code stream, and therefore permits detection of operations that can be performed in parallel, simultaneously feeding more than one execution unit.</p>
<p>The latest processors also do the opposite when appropriate; they combine certain x86 sequences (such as a compare followed by a conditional jump) into a more complex μop which fits the execution model better and thus can be executed faster or with less machine resources involved.</p>
<p>Another way to try to improve performance is to cache the decoded micro-operations, so the processor can directly access the decoded micro-operations from a special cache, instead of decoding them again. The Execution Trace Cache found in Intel's NetBurst Microarchitecture (Pentium 4) is so far the only widespread example of this technique.</p>
<p><a href="/wiki/Transmeta" title="Transmeta">Transmeta</a> use a completely different method in their x86 compatible CPUs. They use <a href="/wiki/Just-in-time" title="Just-in-time" class="mw-redirect">just-in-time</a> translation to convert x86 instructions to the CPU's native instructions. Transmeta argues that their approach allows for more power efficient designs since the CPU can forgo the complicated decode step of more traditional x86 implementations.</p>
<p><a name="Segmentation" id="Segmentation"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=X86&amp;action=edit&amp;section=9" title="Edit section: Segmentation">edit</a>]</span> <span class="mw-headline">Segmentation</span></h2>
<div class="rellink boilerplate further">Further information: <a href="/wiki/X86_memory_segmentation" title="X86 memory segmentation">x86 memory segmentation</a></div>
<p>Minicomputers during the late 1970s were running up against the 16-bit 64-<a href="/wiki/Kilobyte" title="Kilobyte">KB</a> address limit, as memory had become cheaper. Most such companies therefore redesigned their processors to directly handle 32-bit addressing and data. The original 8086, developed from the simple <a href="/wiki/Intel_8085" title="Intel 8085">8085</a> microprocessor and primarily aiming at another market, instead adopted segment registers which raised the memory address limit by only 4 bits, to 20 bits (1 <a href="/wiki/Megabyte" title="Megabyte">megabyte</a>). While the concept of segment registers was not new at the time, as many mainframes used segment register to quickly swap to different tasks, in practice on the x86 it was (is) a much-criticized implementation.</p>
<p>Data and/or code could be managed within "near" 16-bit segments within this 1 <a href="/wiki/Megabyte" title="Megabyte">MB</a> address space, or a compiler could operate in a "far" mode using 32-bit <code>segment:offset</code> pairs reaching (only) 1 MB. While that would also prove to be quite limiting by the mid-1980s, it was working for the emerging PC market, and made it very simple to translate software from the older <a href="/wiki/Intel_8080" title="Intel 8080">8080</a>, <a href="/wiki/Intel_8085" title="Intel 8085">8085</a>, and <a href="/wiki/Z80" title="Z80" class="mw-redirect">Z80</a> to the newer processor. In 1985, the 16 bit segment addressing model was effectively factored out by the introduction of 32-bit offset registers, in the <a href="/wiki/Intel_80386" title="Intel 80386">386</a> design.</p>
<p>In <a href="/wiki/Real_mode" title="Real mode">real mode</a>, segmentation is achieved by <a href="/wiki/Bitwise_operation#Bit_shifts" title="Bitwise operation">shifting</a> the segment address left by 4 bits and adding an offset in order to receive a final 20-bit address. For example, if DS is A000h and SI is 5677h, DS:SI will point at the absolute address DS × 16 + SI = A5677h. Thus the total address space in real mode is 2<sup>20</sup> bytes, or 1 <a href="/wiki/Megabyte" title="Megabyte">MB</a>, quite an impressive figure for 1978. All memory addresses consist of both a segment and offset; every type of access (code, data, or stack) has a default segment register associated with it (for data the register is usually DS, for code it is CS, and for stack it is SS). For data accesses, the segment register can be explicitly specified (using a segment override prefix) to use any of the four segment registers.</p>
<p>In this scheme, two different segment/offset pairs can point at a single absolute location. Thus, if DS is A111h and SI is 4567h, DS:SI will point at the same A5677h as above. This scheme makes it impossible to use more than four segments at once. CS and SS are vital for the correct functioning of the program, so that only DS and ES can be used to point to data segments outside the program (or, more precisely, outside the currently-executing segment of the program) or the stack.</p>
<p>In <a href="/wiki/Protected_mode" title="Protected mode">protected mode</a>, a segment register no longer contains the physical address of the beginning of a segment, but contain a "selector" that points to a system-level structure called a segment descriptor. A segment descriptor contains the physical address of the beginning of the segment, the length of the segment, and access permissions to that segment. The offset is checked against the length of the segment, with offsets referring to locations outside the segment causing an exception. Offsets referring to locations inside the segment are combined with the physical address of the beginning of the segment to get the physical address corresponding to that offset.</p>
<p>The segmented nature can make programming and compilers design difficult because the use of near and far pointers affect performance.</p>
<p><a name="Addressing_modes" id="Addressing_modes"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=X86&amp;action=edit&amp;section=10" title="Edit section: Addressing modes">edit</a>]</span> <span class="mw-headline">Addressing modes</span></h2>
<p>Addressing modes for 16-bit x86 processors can be summarized by this formula:</p>
<dl>
<dd><img class="tex" alt="
\begin{Bmatrix}CS:\\DS:\\SS:\\ES:\end{Bmatrix}
\begin{bmatrix}\begin{Bmatrix}IP\\BX\\BP\end{Bmatrix}\end{bmatrix} + 
\begin{bmatrix}\begin{Bmatrix}SI\\DI\end{Bmatrix}\end{bmatrix} +
[displacement]
" src="http://upload.wikimedia.org/math/9/1/4/914f82eb2955c96e27758c8810857e6b.png" /></dd>
</dl>
<p>Addressing modes for 32-bit code on 32-bit or 64-bit x86 processors can be summarized by this formula:</p>
<dl>
<dd><img class="tex" alt="
\begin{Bmatrix}CS:\\DS:\\SS:\\ES:\\FS:\\GS:\end{Bmatrix}
\begin{bmatrix}\begin{Bmatrix}EAX\\EBX\\ECX\\EDX\\ESP\\EBP\\ESI\\EDI\end{Bmatrix}\end{bmatrix} + 
\begin{bmatrix}\begin{Bmatrix}EAX\\EBX\\ECX\\EDX\\EBP\\ESI\\EDI\end{Bmatrix}*\begin{Bmatrix}1\\2\\4\\8\end{Bmatrix}\end{bmatrix} +
[displacement]
" src="http://upload.wikimedia.org/math/e/7/2/e72e0914aaf7bb16692a043b9d226958.png" /></dd>
</dl>
<p>Addressing modes for 64-bit code on 64-bit x86 processors can be summarized by these formulas:</p>
<dl>
<dd><img class="tex" alt="
\begin{Bmatrix}:\\FS:\\GS:\end{Bmatrix}
\begin{bmatrix}generalregister\end{bmatrix} + 
\begin{bmatrix}generalregister*\begin{Bmatrix}1\\2\\4\\8\end{Bmatrix}\end{bmatrix} +
[displacement]
" src="http://upload.wikimedia.org/math/2/d/9/2d99a560151609af880055383d4fa78e.png" /></dd>
</dl>
<p>and</p>
<dl>
<dd><span class="texhtml"><i>R</i><i>I</i><i>P</i> + [<i>d</i><i>i</i><i>s</i><i>p</i><i>l</i><i>a</i><i>c</i><i>e</i><i>m</i><i>e</i><i>n</i><i>t</i>]</span></dd>
</dl>
<p>The 8086 had 64 KB of 8-bit (or alternatively 32 K-word of 16-bit) <a href="/wiki/I/O" title="I/O" class="mw-redirect">I/O</a> space, and a 64 KB (one segment) <a href="/wiki/Stack_(data_structure)" title="Stack (data structure)">stack</a> in memory supported by <a href="/wiki/Hardware" title="Hardware">hardware</a>. Only words (2 bytes) can be pushed to the stack. The stack grows downwards (toward numerically lower addresses), its bottom being pointed by SS:SP. There are 256 <a href="/wiki/Interrupt" title="Interrupt">interrupts</a>, which can be invoked by both hardware and software. The interrupts can cascade, using the stack to store the <a href="/wiki/Return_address#Programming" title="Return address">return address</a>.</p>
<p><a name="x86_registers" id="x86_registers"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=X86&amp;action=edit&amp;section=11" title="Edit section: x86 registers">edit</a>]</span> <span class="mw-headline">x86 registers</span></h2>
<p><i>For a description of the general notion of a CPU register, see <a href="/wiki/Processor_register" title="Processor register">Processor register</a>.</i></p>
<p><a name="16-bit" id="16-bit"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=X86&amp;action=edit&amp;section=12" title="Edit section: 16-bit">edit</a>]</span> <span class="mw-headline">16-bit</span></h3>
<p>The original Intel <a href="/wiki/Intel_8086" title="Intel 8086">8086</a> and <a href="/wiki/Intel_8088" title="Intel 8088">8088</a> have fourteen 16-<a href="/wiki/Bit" title="Bit">bit</a> registers. Four of them (AX, BX, CX, DX) are general registers (although each may have an additional purpose; for example only CX can be used as a counter with the <i>loop</i> instruction). Each can be accessed as two separate bytes (thus BX's high byte can be accessed as BH and low byte as BL). Four segment registers (CS, DS, SS and ES) are used to form a memory address. There are two pointer registers. SP points to the bottom of the stack and BP which is used to point at some other place in the stack or the memory(Offset). Two registers (SI and DI) are for array indexing. The <a href="/wiki/FLAGS_register_(computing)" title="FLAGS register (computing)">FLAGS register</a> contains <a href="/wiki/Flag_(computing)" title="Flag (computing)">flags</a> such as <a href="/wiki/Carry_flag" title="Carry flag">carry flag</a>, <a href="/wiki/Overflow_flag" title="Overflow flag">overflow flag</a> and <a href="/wiki/Zero_flag" title="Zero flag">zero flag</a>. Finally, the instruction pointer (IP) points to the next instruction that will be fetched from memory and then executed.</p>
<p><a name="32-bit" id="32-bit"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=X86&amp;action=edit&amp;section=13" title="Edit section: 32-bit">edit</a>]</span> <span class="mw-headline">32-bit</span></h3>
<p>With the advent of the 32-bit 80386 processor, the 16-bit general-purpose registers, base registers, index registers, instruction pointer, and <a href="/wiki/FLAGS_register" title="FLAGS register" class="mw-redirect">FLAGS register</a>, but not the segment registers, were expanded to 32 bits. This is represented by prefixing an "<b>E</b>" (for <b>Extended</b>) to the register <a href="/wiki/Opcode" title="Opcode">opcodes</a> (thus the expanded AX became EAX, SI became ESI and so on). The general-purpose registers, base registers, and index registers could all be used as the base in addressing modes, and all of those registers except for the stack pointer could be used as the index in addressing modes. Two new segment registers (FS and GS) were added. With a greater number of registers, instructions and operands, the <a href="/wiki/Machine_code" title="Machine code">machine code</a> format was expanded. To provide backward compatibility, segments with executable code can be marked as containing either 16-bit or 32-bit instructions. Special prefixes allow inclusion of 32-bit instructions in a 16-bit segment or vice versa.</p>
<p><a name="64-bit" id="64-bit"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=X86&amp;action=edit&amp;section=14" title="Edit section: 64-bit">edit</a>]</span> <span class="mw-headline">64-bit</span></h3>
<p>Starting with the AMD Opteron processor, the x86 in 64-bit long mode (as a subset or remset of <a href="/wiki/X86-64" title="X86-64">x86-64</a> mode) extended the 32-bit registers in a way similar to what 32-bit protected mode had done before (RAX, RBX, RCX, RDX, RSI, RDI, RBP, RSP, RFLAGS, RIP). However, 8 additional 64-bit general registers (R8, R9, ..., R15) were also introduced. The addressing modes were not dramatically changed from 32-bit mode, except that addressing was extended to 64 bits, physical addressing was now sign extended (so memory always added equally to the top and bottom of memory; note that this does not affect linear or virtual addressing), and other selector details were dramatically reduced. DRAM memory was now signed dynamically.</p>
<p><a name="Miscellaneous.2FSpecial_Purpose" id="Miscellaneous.2FSpecial_Purpose"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=X86&amp;action=edit&amp;section=15" title="Edit section: Miscellaneous/Special Purpose">edit</a>]</span> <span class="mw-headline">Miscellaneous/Special Purpose</span></h3>
<p>x86 processors also include various special/miscellaneous registers such as <a href="/wiki/Control_register" title="Control register">control registers</a> (CR0 through 4), <a href="/wiki/Debug_register" title="Debug register" class="mw-redirect">debug registers</a> (DR0 through 3, plus 6 and 7), <a href="/wiki/Test_register" title="Test register">test registers</a> (TR4 through 7), descriptor registers (GDTR, LDTR, IDTR), and a task register (TR).</p>
<p><a name="Purpose" id="Purpose"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=X86&amp;action=edit&amp;section=16" title="Edit section: Purpose">edit</a>]</span> <span class="mw-headline">Purpose</span></h3>
<p>Although the main registers are "general-purpose" and can be used for anything, it was envisaged that they be used for the following purposes:</p>
<ul>
<li>AX/EAX/RAX: accumulator</li>
<li>BX/EBX/RBX: base</li>
<li>CX/ECX/RCX: counter</li>
<li>DX/EDX/RDX: data/general</li>
<li>SI/ESI/RSI: "source index" for <a href="/wiki/String_(computer_science)" title="String (computer science)">string</a> operations.</li>
<li>DI/EDI/RDI: "destination index" for string operations.</li>
<li>SP/ESP/RSP: stack pointer for top address of the stack.</li>
<li>BP/EBP/RBP: stack base pointer for holding the address of the current <a href="/wiki/Stack_frame" title="Stack frame" class="mw-redirect">stack frame</a>.</li>
<li>IP/EIP/RIP: instruction pointer. Holds the current instruction address.</li>
</ul>
<p>No particular purposes were envisaged for the other 8 registers available only in 64-bit mode.</p>
<p>Some instructions compile and execute more efficiently when using these registers for their designed purpose. For example, using AL as an <a href="/wiki/Accumulator" title="Accumulator">accumulator</a> and adding an immediate byte value to it produces the efficient add to AL <a href="/wiki/Opcode" title="Opcode">opcode</a> of 04h, whilst using the BL register produces the generic and longer add to register opcode of 80C3h.</p>
<p><a name="Structure" id="Structure"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=X86&amp;action=edit&amp;section=17" title="Edit section: Structure">edit</a>]</span> <span class="mw-headline">Structure</span></h3>
<p>General Purpose Registers (A, B, C and D)</p>
<table border="1">
<tr>
<th>7</th>
<th>6</th>
<th>5</th>
<th>4</th>
<th>3</th>
<th>2</th>
<th>1</th>
<th>0</th>
</tr>
<tr>
<td width="100pt" colspan="8" align="center" style="background:lightgrey">R?X</td>
</tr>
<tr>
<td width="100pt" colspan="4" style="background:lightgrey"></td>
<td width="100pt" colspan="4" align="center" style="background:lightgrey">E?X</td>
</tr>
<tr>
<td width="100pt" colspan="2" style="background:lightgrey"></td>
<td width="100pt" colspan="2" style="background:lightgrey"></td>
<td width="100pt" colspan="2" style="background:lightgrey"></td>
<td width="100pt" colspan="2" align="center" style="background:lightgrey">?X</td>
</tr>
<tr>
<td width="100pt" style="background:lightgrey"></td>
<td width="100pt" style="background:lightgrey"></td>
<td width="100pt" style="background:lightgrey"></td>
<td width="100pt" style="background:lightgrey"></td>
<td width="100pt" style="background:lightgrey"></td>
<td width="100pt" style="background:lightgrey"></td>
<td width="100pt" align="center" style="background:lightgrey">?H</td>
<td width="100pt" align="center" style="background:lightgrey">?L</td>
</tr>
</table>
<p>Segment Registers (C, D, S, E, F, and G)</p>
<table border="1">
<tr>
<th>1</th>
<th>0</th>
</tr>
<tr>
<td width="100pt" colspan="2" align="center" style="background:lightgrey">?S</td>
</tr>
</table>
<p>Pointer Registers (S and B)</p>
<table border="1">
<tr>
<th>7</th>
<th>6</th>
<th>5</th>
<th>4</th>
<th>3</th>
<th>2</th>
<th>1</th>
<th>0</th>
</tr>
<tr>
<td width="100pt" colspan="8" align="center" style="background:lightgrey">R?P</td>
</tr>
<tr>
<td width="100pt" colspan="4" style="background:lightgrey"></td>
<td width="100pt" colspan="4" align="center" style="background:lightgrey">E?P</td>
</tr>
<tr>
<td width="100pt" style="background:lightgrey" colspan="2"></td>
<td width="100pt" style="background:lightgrey" colspan="2"></td>
<td width="100pt" style="background:lightgrey" colspan="2"></td>
<td width="100pt" colspan="2" align="center" style="background:lightgrey">?P</td>
</tr>
</table>
<p>Index Registers (S and D)</p>
<table border="1">
<tr>
<th>7</th>
<th>6</th>
<th>5</th>
<th>4</th>
<th>3</th>
<th>2</th>
<th>1</th>
<th>0</th>
</tr>
<tr>
<td width="100pt" colspan="8" align="center" style="background:lightgrey">R?I</td>
</tr>
<tr>
<td width="100pt" colspan="4" style="background:lightgrey"></td>
<td width="100pt" colspan="4" align="center" style="background:lightgrey">E?I</td>
</tr>
<tr>
<td width="100pt" style="background:lightgrey" colspan="2"></td>
<td width="100pt" style="background:lightgrey" colspan="2"></td>
<td width="100pt" style="background:lightgrey" colspan="2"></td>
<td width="100pt" colspan="2" align="center" style="background:lightgrey">?I</td>
</tr>
</table>
<p>Instruction Pointer Register (I)</p>
<table border="1">
<tr>
<th>7</th>
<th>6</th>
<th>5</th>
<th>4</th>
<th>3</th>
<th>2</th>
<th>1</th>
<th>0</th>
</tr>
<tr>
<td width="100pt" colspan="8" align="center" style="background:lightgrey">R?P</td>
</tr>
<tr>
<td width="100pt" colspan="4" style="background:lightgrey"></td>
<td width="100pt" colspan="4" align="center" style="background:lightgrey">E?P</td>
</tr>
<tr>
<td width="100pt" style="background:lightgrey" colspan="2"></td>
<td width="100pt" style="background:lightgrey" colspan="2"></td>
<td width="100pt" style="background:lightgrey" colspan="2"></td>
<td width="100pt" colspan="2" align="center" style="background:lightgrey">?P</td>
</tr>
</table>
<p>x86-64-only General Purpose Registers (R8, R9, R10, R11, R12, R13, R14, R15)</p>
<table border="1">
<tr>
<th>7</th>
<th>6</th>
<th>5</th>
<th>4</th>
<th>3</th>
<th>2</th>
<th>1</th>
<th>0</th>
</tr>
<tr>
<td width="100pt" colspan="8" align="center" style="background:lightgrey">?</td>
</tr>
<tr>
<td width="100pt" colspan="4" style="background:lightgrey"></td>
<td width="100pt" colspan="4" align="center" style="background:lightgrey">?D</td>
</tr>
</table>
<p><a name="Operating_modes" id="Operating_modes"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=X86&amp;action=edit&amp;section=18" title="Edit section: Operating modes">edit</a>]</span> <span class="mw-headline">Operating modes</span></h2>
<p><a name="Real_mode" id="Real_mode"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=X86&amp;action=edit&amp;section=19" title="Edit section: Real mode">edit</a>]</span> <span class="mw-headline">Real mode</span></h3>
<div class="rellink noprint relarticle mainarticle">Main article: <a href="/wiki/Real_mode" title="Real mode">Real mode</a></div>
<p>Real mode is an operating mode of <a href="/wiki/80286" title="80286" class="mw-redirect">80286</a> and later x86-compatible <a href="/wiki/Central_processing_unit" title="Central processing unit">CPUs</a>. Real mode is characterized by a 20 bit segmented memory address space (meaning that only 1 <a href="/wiki/Megabyte" title="Megabyte">MB</a> of memory can be addressed), direct software access to <a href="/wiki/BIOS" title="BIOS">BIOS</a> routines and peripheral hardware, and no concept of <a href="/wiki/Memory_protection" title="Memory protection">memory protection</a> or <a href="/wiki/Computer_multitasking" title="Computer multitasking">multitasking</a> at the hardware level. All x86 CPUs in the <a href="/wiki/80286" title="80286" class="mw-redirect">80286</a> series and later start up in real mode at power-on; <a href="/wiki/80186" title="80186" class="mw-redirect">80186</a> CPUs and earlier had only one operational mode, which is equivalent to real mode in later chips.</p>
<p>In order to use more than 64 KB of memory, the segment registers must be used. This created great complications for C compiler implementors who introduced odd pointer modes such as "near", "far" and "huge" to lever the implicit nature of segmented architecture to different degrees, with some pointers containing 16-bit offsets within implied segments and other pointers containing segment addresses and offsets within segments.</p>
<p><a name="Protected_mode" id="Protected_mode"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=X86&amp;action=edit&amp;section=20" title="Edit section: Protected mode">edit</a>]</span> <span class="mw-headline">Protected mode</span></h3>
<div class="rellink noprint relarticle mainarticle">Main article: <a href="/wiki/Protected_mode" title="Protected mode">Protected mode</a></div>
<p>In addition to real mode, the Intel 80286 supports protected mode, expanding addressable <a href="/wiki/Physical_memory" title="Physical memory" class="mw-redirect">physical memory</a> to 16 <a href="/wiki/Megabyte" title="Megabyte">MB</a> and addressable <a href="/wiki/Virtual_memory" title="Virtual memory">virtual memory</a> to 1 <a href="/wiki/Gigabyte" title="Gigabyte">GB</a>, and providing <a href="/wiki/Protected_memory" title="Protected memory" class="mw-redirect">protected memory</a>, which prevents programs from corrupting one another. This is done by using the segment registers only for storing an index to a segment table. There were two such tables, the <a href="/wiki/Global_Descriptor_Table" title="Global Descriptor Table">Global Descriptor Table</a> (GDT) and the <a href="/wiki/Local_Descriptor_Table" title="Local Descriptor Table">Local Descriptor Table</a> (LDT), each holding up to 8192 segment descriptors, each segment giving access to 64 KB of memory. The segment table provided a 24-bit <a href="/wiki/Base_address" title="Base address">base address</a>, which can be added to the desired offset to create an absolute address. Each segment can be assigned one of four <a href="/wiki/Ring_(computer_security)" title="Ring (computer security)">ring</a> levels used for hardware-based <a href="/wiki/Computer_security" title="Computer security">computer security</a>.</p>
<p>The <a href="/wiki/Intel_80386" title="Intel 80386">Intel 80386</a> introduced support in protected mode for <a href="/wiki/Paging" title="Paging">paging</a>, a mechanism making it possible to use <a href="/wiki/Virtual_memory" title="Virtual memory">virtual memory</a>.</p>
<p>Paging and segmented memory access are required for modern multitasking operating systems. <a href="/wiki/Linux" title="Linux">Linux</a>, <a href="/wiki/386BSD" title="386BSD">386BSD</a> and <a href="/wiki/Windows_NT" title="Windows NT">Windows NT</a> were developed for the 386 because it was the first Intel architecture CPU to support paging and 32-bit segment offsets. The 386 architecture became the basis of all further development in the x86 series. The success of <a href="/wiki/Windows_3.0" title="Windows 3.0">Windows 3.0</a>, the first widely accepted version of <a href="/wiki/Microsoft_Windows" title="Microsoft Windows">Microsoft Windows</a>, was largely due to its ability to take advantage of 386 features, even though it was used mainly to run multiple sessions rather than to take advantage of the native 32-bit <a href="/wiki/Instruction_set" title="Instruction set">instruction set</a>.</p>
<p>x86 processors that support protected mode boot into <a href="/wiki/Real_mode" title="Real mode">real mode</a> for backward compatibility with the older 8086 class of processors. Upon power-on (aka <a href="/wiki/Booting" title="Booting">booting</a>), the processor initiates itself into Real mode, and then it begins loading programs automatically into <a href="/wiki/Random_access_memory" title="Random access memory" class="mw-redirect">RAM</a> from ROM and <a href="/wiki/Hard_disk" title="Hard disk" class="mw-redirect">disk</a>. A <a href="/wiki/Computer_program" title="Computer program">program</a> inserted somewhere along the <a href="/wiki/Booting" title="Booting">boot</a> sequence may be used to put the processor into the <a href="/wiki/Protected_mode" title="Protected mode">Protected mode</a>. The instruction set in protected mode is backward compatible with the one used in real mode.</p>
<p><a name="Virtual_8086_mode" id="Virtual_8086_mode"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=X86&amp;action=edit&amp;section=21" title="Edit section: Virtual 8086 mode">edit</a>]</span> <span class="mw-headline">Virtual 8086 mode</span></h4>
<div class="rellink boilerplate further">Further information: <a href="/wiki/Virtual_8086_mode" title="Virtual 8086 mode">Virtual 8086 mode</a></div>
<p>There is also a sub-mode of operation in 32-bit Protected mode, called <i><a href="/wiki/Virtual_8086_mode" title="Virtual 8086 mode">virtual 8086 mode</a></i>. This is basically a special hybrid operating mode that allows real mode programs and operating systems to run while under the control of a Protected mode supervisor operating system. This allows for a great deal of flexibility in running both Protected mode programs and real mode programs simultaneously. This mode is available in the 32-bit version of Protected mode; virtual 8086 mode does not exist previously in the 16-bit version of Protected mode, or in the 64-bit long mode.</p>
<p><a name="64-bit_Long_mode" id="64-bit_Long_mode"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=X86&amp;action=edit&amp;section=22" title="Edit section: 64-bit Long mode">edit</a>]</span> <span class="mw-headline">64-bit Long mode</span></h3>
<div class="rellink noprint relarticle mainarticle">Main article: <a href="/wiki/Long_mode" title="Long mode">Long mode</a></div>
<p>By 2002, it was obvious that the 32-bit address space of the x86 architecture was limiting its performance in applications requiring large data sets. A 32-bit address space would allow the processor to directly address only 4 GB of data, a size surpassed by applications such as <a href="/wiki/Video_editing_software" title="Video editing software">video processing</a> and <a href="/wiki/Database_engine" title="Database engine">database engines</a>, while using the 64-bit address, one can directly address 16777216 <a href="/wiki/TB" title="TB">TB</a> (more than 17 billion GB) of data, although most 64-bit architectures don't support access to the full 64-bit address space (AMD64, for example, supports only 48 bits, split into 4 paging levels, from a 64-bit address).</p>
<p><a href="/wiki/AMD" title="AMD" class="mw-redirect">AMD</a>, who would traditionally follow the lead of Intel, took the initiative of extending the 32-bit x86 architecture to <a href="/wiki/64-bit" title="64-bit">64-bit</a>, initially calling it <i>x86-64</i>, later renaming it <i>AMD64</i>. The <a href="/wiki/Opteron" title="Opteron">Opteron</a>, <a href="/wiki/Athlon_64" title="Athlon 64">Athlon 64</a>, <a href="/wiki/Turion_64" title="Turion 64">Turion 64</a>, and later <a href="/wiki/Sempron" title="Sempron">Sempron</a> families of processors use this architecture. The success of the AMD64 line of processors coupled with the lukewarm reception of the IA-64 architecture forced Intel to release their own x86-64 instruction set. Intel had previously developed an x86-64 instruction set<sup id="cite_ref-9" class="reference"><a href="#cite_note-9" title=""><span>[</span>10<span>]</span></a></sup> but opted not to enable it in hopes that AMD would not make it to market with theirs before Itanium's new IA-64 instruction set was widely adopted. They branded their extensions <i>EM64T</i> architecture, and later re-branded it <i>Intel 64</i>.</p>
<p>In its literature and product version names, Microsoft and Sun refer to AMD64/Intel 64 collectively as <i>x64</i> in the Windows and <a href="/wiki/Solaris_operating_system" title="Solaris operating system" class="mw-redirect">Solaris</a> operating systems respectively. <a href="/wiki/Linux" title="Linux">Linux</a> distributions refer to it either as "x86-64", its variant "x86_64", or "amd64". <a href="/wiki/Berkeley_Software_Distribution" title="Berkeley Software Distribution">BSD</a> systems use "amd64" while <a href="/wiki/Mac_OS_X" title="Mac OS X">Mac OS X</a> uses "x86_64".</p>
<p>Long mode is mostly an extension of the 32-bit instruction set, but unlike the 16–to–32-bit transition, many instructions were dropped in the 64 bit mode. This does not affect actual binary backward compatibility (which would execute legacy code in other modes that retain support for those instructions), but it changes the way assembler and compilers for new code have to work.</p>
<p>This was the first time that a <i>major</i> upgrade of the x86 architecture was initiated and originated by a manufacturer other than Intel. It was also the first time that Intel accepted technology of this nature from an outside source.</p>
<p><a name="Extensions" id="Extensions"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=X86&amp;action=edit&amp;section=23" title="Edit section: Extensions">edit</a>]</span> <span class="mw-headline">Extensions</span></h2>
<p><a name="Floating_point_unit" id="Floating_point_unit"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=X86&amp;action=edit&amp;section=24" title="Edit section: Floating point unit">edit</a>]</span> <span class="mw-headline">Floating point unit</span></h3>
<div class="rellink boilerplate further">Further information: <a href="/wiki/Floating_point_unit" title="Floating point unit" class="mw-redirect">Floating point unit</a></div>
<p>Initially, IA-32 included floating-point capabilities only on add-on processors (8087, 80287 and 80387.) With the introduction of the 80486, these 8 80x87 floating point registers, known as ST(0) through ST(7) are built in to the CPU. Each register is 80 bits wide and stores numbers in the double extended precision format of the <a href="/wiki/IEEE_floating-point_standard" title="IEEE floating-point standard" class="mw-redirect">IEEE floating-point standard</a>.</p>
<p>These registers are not accessible directly, but are accessible like a <a href="/wiki/LIFO_(computing)" title="LIFO (computing)">LIFO</a> stack. The register numbers are not fixed, but are relative to the top of the stack; <b>ST(0)</b> is the top of the stack, <b>ST(1)</b> is the next register below the top of the stack, <b>ST(2)</b> is two below the top of the stack, etc. That means that data is always pushed down from the top of the stack, and operations are always done against the top of the stack. Register access had to be done in the stack order, not randomly.</p>
<p><a name="MMX" id="MMX"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=X86&amp;action=edit&amp;section=25" title="Edit section: MMX">edit</a>]</span> <span class="mw-headline">MMX</span></h3>
<div class="rellink noprint relarticle mainarticle">Main article: <a href="/wiki/MMX_(instruction_set)" title="MMX (instruction set)">MMX (instruction set)</a></div>
<p>MMX is a <a href="/wiki/SIMD" title="SIMD">SIMD</a> instruction set designed by Intel, introduced in 1997 for <a href="/wiki/Pentium" title="Pentium">Pentium</a> MMX microprocessors. It developed out of a similar unit first used on the <a href="/wiki/Intel_i860" title="Intel i860">Intel i860</a>. It first appeared in the <a href="/wiki/Pentium#P55C.2C_Tillamook" title="Pentium">Pentium MMX</a>. It is supported on most subsequent IA-32 processors by Intel and other vendors. MMX is typically used for video applications.</p>
<p>MMX added 8 new "registers" to the architecture, known as MM0 through MM7 (henceforth referred to as <i>MMn</i>). In reality, these new "registers" were just aliases for the existing x87 FPU stack registers. Hence, anything that was done to the floating point stack would also affect the MMX registers. Unlike the FP stack, these MMn registers were fixed, not relative, and therefore they were randomly accessible. The instruction set did not adopt the stack-like semantics so that existing operating systems could still correctly save and restore the register state when multitasking without modifications.</p>
<p>Each of the MMn registers are 64-bit integers. However, one of the main concepts of the MMX instruction set is the concept of <i>packed data types</i>, which means instead of using the whole register for a single 64-bit integer (<a href="/wiki/Quadword" title="Quadword" class="mw-redirect">quadword</a>); two 32-bit integers (<a href="/wiki/Integer_(computer_science)" title="Integer (computer science)">doubleword</a>), four 16-bit integers (<a href="/wiki/Integer_(computer_science)" title="Integer (computer science)">word</a>) or eight 8-bit integers (<a href="/wiki/Integer_(computer_science)" title="Integer (computer science)">byte</a>) may be used. Also because the MMX's 64-bit MMn registers are aliased to the FPU stack, and each of the stack registers are 80-bit wide, the upper 16-bits of the stack registers go unused in MMX, and these bits are set to all ones, which makes it look like NaN's or infinities in the floating point view. This makes it easier to tell whether you are working on a floating point data or MMX data.</p>
<p><a name="3DNow.21" id="3DNow.21"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=X86&amp;action=edit&amp;section=26" title="Edit section: 3DNow!">edit</a>]</span> <span class="mw-headline">3DNow!</span></h3>
<div class="rellink noprint relarticle mainarticle">Main article: <a href="/wiki/3DNow!" title="3DNow!">3DNow!</a></div>
<p>In 1997 AMD introduced 3DNow! The introduction of this technology coincided with the rise of <a href="/wiki/3D_computer_graphics" title="3D computer graphics">3D</a> entertainment applications and was designed to improve the CPU's <a href="/wiki/Vector_processing" title="Vector processing" class="mw-redirect">vector processing</a> performance of graphic-intensive applications. 3D video game developers and 3D graphics hardware vendors use 3DNow! to enhance their performance on AMD's <a href="/wiki/AMD_K6" title="AMD K6">K6</a> and <a href="/wiki/Athlon" title="Athlon">Athlon</a> series of processors.</p>
<p>3DNow! was designed to be the natural evolution of MMX from integers to floating point. As such, it uses the exact same register naming convention as MMX, that is MM0 through MM7. The only difference is that instead of packing byte to quadword integers into these registers, one would pack <a href="/wiki/Single_precision" title="Single precision">single precision</a> floating points into these registers. The advantage of aliasing registers with the FPU registers is that the same instruction and data structures used to save the state of the FPU registers can also be used to save 3DNow! register states. Thus no special modifications are required to be made to operating systems which would otherwise not know about.</p>
<p><a name="SSE" id="SSE"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=X86&amp;action=edit&amp;section=27" title="Edit section: SSE">edit</a>]</span> <span class="mw-headline">SSE</span></h3>
<div class="rellink noprint relarticle mainarticle">Main articles: <a href="/wiki/Streaming_SIMD_Extensions" title="Streaming SIMD Extensions">Streaming SIMD Extensions</a>, <a href="/wiki/SSE2" title="SSE2">SSE2</a>, <a href="/wiki/SSE3" title="SSE3">SSE3</a>, <a href="/wiki/SSSE3" title="SSSE3">SSSE3</a>, <a href="/wiki/SSE4" title="SSE4">SSE4</a>, and <a href="/wiki/SSE5" title="SSE5">SSE5</a></div>
<p>In 1999, Intel introduced the Streaming SIMD Extensions (SSE) <a href="/wiki/Instruction_set" title="Instruction set">instruction set</a>, following in 2000 with SSE2. The first addition allowed offloading of basic floating-point operations from the x87 stack and the second made MMX almost obsolete and allowed the instructions to be realistically targeted by conventional compilers. Introduced in 2004 along with the <a href="/wiki/Pentium_4#Prescott" title="Pentium 4"><i>Prescott</i></a> revision of the <a href="/wiki/Pentium_4" title="Pentium 4">Pentium 4</a> processor, SSE3 added specific memory and <a href="/wiki/Thread_(software_engineering)" title="Thread (software engineering)" class="mw-redirect">thread</a>-handling instructions to boost the performance of Intel's <a href="/wiki/HyperThreading" title="HyperThreading" class="mw-redirect">HyperThreading</a> technology. AMD licensed the SSE3 instruction set and implemented most of the SSE3 instructions for its revision E and later Athlon 64 processors. The Athlon 64 does not support HyperThreading and lacks those SSE3 instructions used only for HyperThreading.</p>
<p>SSE discarded all legacy connections to the FPU stack. This also meant that this instruction set discarded all legacy connections to previous generations of SIMD instruction sets like MMX. But it freed the designers up, allowing them to use larger registers, not limited by the size of the FPU registers. The designers created eight 128-bit registers, named XMM0 through XMM7. (<i>Note</i>: in <a href="/wiki/X86-64" title="X86-64">AMD64</a>, the number of SSE XMM registers has been increased from 8 to 16.) However, the downside was that operating systems had to have an awareness of this new set of instructions in order to be able to save their register states. So Intel created a slightly modified version of Protected mode, called Enhanced mode which enables the usage of SSE instructions, whereas they stay disabled in regular Protected mode. An OS that is aware of SSE will activate Enhanced mode, whereas an unaware OS will only enter into traditional Protected mode.</p>
<p>SSE is a SIMD instruction set that works only on floating point values, like 3DNow!. However, unlike 3DNow! it severs all legacy connection to the FPU stack. Because it has larger registers than 3DNow!, SSE can pack twice the number of <a href="/wiki/Single_precision" title="Single precision">single precision</a> floats into its registers. The original SSE was limited to only single-precision numbers, like 3DNow!. The SSE2 introduced the capability to pack <a href="/wiki/Double_precision" title="Double precision">double precision</a> numbers too, which 3DNow! had no possibility of doing since a double precision number is 64-bit in size which would be the full size of a single 3DNow! MMn register. At 128-bit, the SSE XMMn registers could pack two double precision floats into one register. Thus SSE2 is much more suitable for scientific calculations than either SSE1 or 3DNow!, which were limited to only single precision. SSE3 does not introduce any additional registers.</p>
<p><a name="Physical_Address_Extension_.28PAE.29" id="Physical_Address_Extension_.28PAE.29"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=X86&amp;action=edit&amp;section=28" title="Edit section: Physical Address Extension (PAE)">edit</a>]</span> <span class="mw-headline">Physical Address Extension (PAE)</span></h3>
<div class="rellink noprint relarticle mainarticle">Main article: <a href="/wiki/Physical_Address_Extension" title="Physical Address Extension">Physical Address Extension</a></div>
<p>By default, physical addresses are 32-bit, however, there exists a page extension mode called <a href="/wiki/Physical_Address_Extension" title="Physical Address Extension">Physical Address Extension</a> or PAE, first added in the Intel <a href="/wiki/Pentium_Pro" title="Pentium Pro">Pentium Pro</a>, which allows an additional 4 bits of physical addressing. The size of memory in Protected mode is usually limited to 4 <a href="/wiki/GB" title="GB">GB</a>. Through tricks in the processor's page and segment memory management systems, x86 operating systems may be able to access more than 32-bits of address space, even without the switchover to the 64-bit paradigm. This mode does not change the length of segment offsets or linear addresses; those are still only 32 bits.</p>
<p><a name="Virtualization" id="Virtualization"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=X86&amp;action=edit&amp;section=29" title="Edit section: Virtualization">edit</a>]</span> <span class="mw-headline">Virtualization</span></h2>
<p>x86 <a href="/wiki/Virtual_machine" title="Virtual machine">virtualization</a> is difficult because the architecture did not meet the <a href="/wiki/Popek_and_Goldberg_virtualization_requirements" title="Popek and Goldberg virtualization requirements">Popek and Goldberg requirements</a> until recently. Nevertheless, there are several commercial <a href="/wiki/X86_virtualization" title="X86 virtualization">x86 virtualization</a> products, such as <a href="/wiki/VMware" title="VMware">VMware</a>, <a href="/wiki/Parallels_Workstation" title="Parallels Workstation">Parallels</a> and <a href="/wiki/Virtual_PC" title="Virtual PC">Microsoft Virtual PC</a>, as well as <a href="/wiki/Open_source" title="Open source">open source</a> virtualization projects such as <a href="/wiki/QEMU" title="QEMU">QEMU</a>+<a href="/wiki/KQEMU" title="KQEMU" class="mw-redirect">KQEMU</a>, <a href="/wiki/VirtualBox" title="VirtualBox">VirtualBox</a>, <a href="/wiki/Xen" title="Xen">Xen</a>.</p>
<p>Intel and AMD have introduced x86 processors with hardware-based virtualization extensions that overcome the classical virtualization limitations of the x86 architecture. These extensions are known as <a href="/wiki/X86_virtualization#Intel_VT_.28IVT.29" title="X86 virtualization">Intel VT</a> (IVT or simply VT) that was code named "Vanderpool," and <a href="/wiki/X86_virtualization#AMD_virtualization_.28AMD-V.29" title="X86 virtualization">AMD-V</a> that was code named "Pacifica." Although most modern x86 server-based and many modern x86 desktop-based processors include these extensions, the technology is generally considered immature at this point with most software-based virtualization outperforming these extensions.<sup id="cite_ref-10" class="reference"><a href="#cite_note-10" title=""><span>[</span>11<span>]</span></a></sup> This is expected to change as the technology matures.</p>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=X86&amp;action=edit&amp;section=30" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<ul>
<li><a href="/wiki/IA-32" title="IA-32">IA-32</a></li>
<li><a href="/wiki/X86_assembly_language" title="X86 assembly language">x86 assembly language</a></li>
<li><a href="/wiki/X86_instruction_listings" title="X86 instruction listings">x86 instruction listings</a></li>
<li><a href="/wiki/X87" title="X87">x87</a></li>
<li><a href="/wiki/Real_mode" title="Real mode">Real mode</a> — <a href="/wiki/Unreal_mode" title="Unreal mode">Unreal mode</a> — <a href="/wiki/Virtual_8086_mode" title="Virtual 8086 mode">Virtual 8086 mode</a> — <a href="/wiki/Protected_mode" title="Protected mode">Protected mode</a> — <a href="/wiki/Long_mode" title="Long mode">Long mode</a></li>
<li><a href="/wiki/X86-64" title="X86-64">x86-64</a></li>
<li><a href="/wiki/IA64" title="IA64" class="mw-redirect">IA64</a></li>
<li><a href="/wiki/Microarchitecture" title="Microarchitecture">Microarchitecture</a></li>
<li><a href="/wiki/List_of_Intel_microprocessors" title="List of Intel microprocessors">List of Intel microprocessors</a></li>
<li><a href="/wiki/List_of_AMD_microprocessors" title="List of AMD microprocessors">List of AMD microprocessors</a></li>
<li><a href="/wiki/List_of_VIA_microprocessors" title="List of VIA microprocessors" class="mw-redirect">List of VIA microprocessors</a></li>
<li><a href="/wiki/List_of_x86_manufacturers" title="List of x86 manufacturers">List of x86 manufacturers</a></li>
<li><a href="/wiki/Input/Output_Base_Address" title="Input/Output Base Address">Input/Output Base Address</a></li>
<li><a href="/wiki/Interrupt_request" title="Interrupt request">Interrupt request</a></li>
</ul>
<p><a name="Footnotes" id="Footnotes"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=X86&amp;action=edit&amp;section=31" title="Edit section: Footnotes">edit</a>]</span> <span class="mw-headline">Footnotes</span></h2>
<div class="references-small">
<ol class="references">
<li id="cite_note-0"><b><a href="#cite_ref-0" title="">^</a></b> Unlike the <a href="/wiki/Microarchitecture" title="Microarchitecture">microarchitecture</a> (and the specific electronic and physical implementation) used for a specific chip design</li>
<li id="cite_note-1"><b><a href="#cite_ref-1" title="">^</a></b> Intel abandoned its "x86" naming scheme with the <i><a href="/wiki/Pentium" title="Pentium">Pentium</a></i> in 1993 (as <i>numbers</i> could not be trademarked). However, the term x86 was already firmly established among technicians, compiler writers etc.</li>
<li id="cite_note-2"><b><a href="#cite_ref-2" title="">^</a></b> Intel's naming are <a href="/wiki/IA-32" title="IA-32">IA-32</a> and <a href="/wiki/Intel_64" title="Intel 64" class="mw-redirect">Intel 64</a> (formerly EM64T or IA-32e) for x86 and <a href="/wiki/X86-64" title="X86-64">x86-64</a> respectively. Likewise, AMD today prefers <a href="/wiki/AMD64" title="AMD64" class="mw-redirect">AMD64</a> over the <a href="/wiki/X86-64" title="X86-64">x86-64</a> name they once introduced.</li>
<li id="cite_note-3"><b><a href="#cite_ref-3" title="">^</a></b> <cite style="font-style:normal" class="web"><a href="http://www.intel.com/cd/ids/developer/asmo-na/eng/182333.htm?page=4" class="external text" title="http://www.intel.com/cd/ids/developer/asmo-na/eng/182333.htm?page=4" rel="nofollow">"Linux* Kernel Compiling"</a>. Intel<span class="printonly">. <a href="http://www.intel.com/cd/ids/developer/asmo-na/eng/182333.htm?page=4" class="external free" title="http://www.intel.com/cd/ids/developer/asmo-na/eng/182333.htm?page=4" rel="nofollow">http://www.intel.com/cd/ids/developer/asmo-na/eng/182333.htm?page=4</a></span><span class="reference-accessdate">. Retrieved on 2007-09-04</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Linux%2A+Kernel+Compiling&amp;rft.atitle=&amp;rft.pub=Intel&amp;rft_id=http%3A%2F%2Fwww.intel.com%2Fcd%2Fids%2Fdeveloper%2Fasmo-na%2Feng%2F182333.htm%3Fpage%3D4&amp;rfr_id=info:sid/en.wikipedia.org:X86"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-4"><b><a href="#cite_ref-4" title="">^</a></b> <cite style="font-style:normal" class="web"><a href="http://mysearch.intel.com/corporate/default.aspx?culture=en-US&amp;q=x64&amp;searchsubmit.x=21&amp;searchsubmit.y=11" class="external text" title="http://mysearch.intel.com/corporate/default.aspx?culture=en-US&amp;q=x64&amp;searchsubmit.x=21&amp;searchsubmit.y=11" rel="nofollow">"Intel Web page search result for "x64""</a><span class="printonly">. <a href="http://mysearch.intel.com/corporate/default.aspx?culture=en-US&amp;q=x64&amp;searchsubmit.x=21&amp;searchsubmit.y=11" class="external free" title="http://mysearch.intel.com/corporate/default.aspx?culture=en-US&amp;q=x64&amp;searchsubmit.x=21&amp;searchsubmit.y=11" rel="nofollow">http://mysearch.intel.com/corporate/default.aspx?culture=en-US&amp;q=x64&amp;searchsubmit.x=21&amp;searchsubmit.y=11</a></span><span class="reference-accessdate">. Retrieved on 2007-09-04</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Intel+Web+page+search+result+for+%22x64%22&amp;rft.atitle=&amp;rft_id=http%3A%2F%2Fmysearch.intel.com%2Fcorporate%2Fdefault.aspx%3Fculture%3Den-US%26q%3Dx64%26searchsubmit.x%3D21%26searchsubmit.y%3D11&amp;rfr_id=info:sid/en.wikipedia.org:X86"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-5"><b><a href="#cite_ref-5" title="">^</a></b> The embedded processor's market is populated by more than 25 different <a href="/wiki/Instruction_set" title="Instruction set">architectures</a>, which, due to the price sensitivity, low power and hardware simplicity requirements, outnumber the x86.</li>
<li id="cite_note-6"><b><a href="#cite_ref-6" title="">^</a></b> <cite style="font-style:normal" class="web"><a href="http://www.intel.com/museum/online/hist%5Fmicro/hof/" class="external text" title="http://www.intel.com/museum/online/hist%5Fmicro/hof/" rel="nofollow">"Microprocessor Hall of Fame"</a>. Intel<span class="printonly">. <a href="http://www.intel.com/museum/online/hist%5Fmicro/hof/" class="external free" title="http://www.intel.com/museum/online/hist%5Fmicro/hof/" rel="nofollow">http://www.intel.com/museum/online/hist%5Fmicro/hof/</a></span><span class="reference-accessdate">. Retrieved on 2007-08-11</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Microprocessor+Hall+of+Fame&amp;rft.atitle=&amp;rft.pub=Intel&amp;rft_id=http%3A%2F%2Fwww.intel.com%2Fmuseum%2Fonline%2Fhist%255Fmicro%2Fhof%2F&amp;rfr_id=info:sid/en.wikipedia.org:X86"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-7"><b><a href="#cite_ref-7" title="">^</a></b> <i>The NEC V20 and V30 also provided the older 8080 instruction set, allowing PC equipped with these chips to run CP/M applications at full speed (i.e. without the need to simulate a 8080 in software).</i></li>
<li id="cite_note-8"><b><a href="#cite_ref-8" title="">^</a></b> It had a slower <a href="/wiki/Floating_point_unit" title="Floating point unit" class="mw-redirect">Floating point unit</a> however, which is slightly ironic as Cyrix started out as a designer of fast Floating point units for x86 processors.</li>
<li id="cite_note-9"><b><a href="#cite_ref-9" title="">^</a></b> <a href="http://www.geek.com/intels-yamhill-technology-x86-64-compatible/" class="external text" title="http://www.geek.com/intels-yamhill-technology-x86-64-compatible/" rel="nofollow">Intel's Yamhill Technology: x86-64 compatible | Geek.com</a></li>
<li id="cite_note-10"><b><a href="#cite_ref-10" title="">^</a></b> <a href="http://www.vmware.com/pdf/asplos235_adams.pdf" class="external text" title="http://www.vmware.com/pdf/asplos235_adams.pdf" rel="nofollow">A Comparison of Software and Hardware Techniques for x86 Virtualization</a></li>
</ol>
</div>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=X86&amp;action=edit&amp;section=32" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<ul>
<li><cite style="font-style:normal">Adams, Keith; Agesen, Ole (2006-21-2006). "<a href="http://www.vmware.com/pdf/asplos235_adams.pdf" class="external text" title="http://www.vmware.com/pdf/asplos235_adams.pdf" rel="nofollow">A Comparison of Software and Hardware Techniques for x86 Virtualization</a>". <i>Proceedings of the International Conference on Architectural Support for Programming Languages and Operating Systems, San Jose, CA, USA, 2006</i>. ACM 1-59593-451-0/06/0010. <span class="reference-accessdate">Retrieved on <span class="mw-formatted-date" title="2006-12-22"><a href="/wiki/2006" title="2006">2006</a>-<a href="/wiki/December_22" title="December 22">12-22</a></span></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=proceeding&amp;rft.btitle=Proceedings+of+the+International+Conference+on+Architectural+Support+for+Programming+Languages+and+Operating+Systems%2C+San+Jose%2C+CA%2C+USA%2C+2006&amp;rft.atitle=A+Comparison+of+Software+and+Hardware+Techniques+for+x86+Virtualization&amp;rft.aulast=Adams&amp;rft.aufirst=Keith&amp;rft.date=2006-21-2006&amp;rft_id=http%3A%2F%2Fwww.vmware.com%2Fpdf%2Fasplos235_adams.pdf"><span style="display: none;">&#160;</span></span></li>
</ul>
<ul>
<li><cite style="font-style:normal">Rosenblum, Mendel; Garfinkel, Tal (May, 2005). "<a href="http://ieeexplore.ieee.org/iel5/2/30853/01430630.pdf?tp=&amp;isnumber=&amp;arnumber=1430630" class="external text" title="http://ieeexplore.ieee.org/iel5/2/30853/01430630.pdf?tp=&amp;isnumber=&amp;arnumber=1430630" rel="nofollow">Virtual machine monitors: current technology and future trends</a>". <i>IEEE Computer, volume 38, issue 5</i>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=proceeding&amp;rft.btitle=IEEE+Computer%2C+volume+38%2C+issue+5&amp;rft.atitle=Virtual+machine+monitors%3A+current+technology+and+future+trends&amp;rft.aulast=Rosenblum&amp;rft.aufirst=Mendel&amp;rft.date=May%2C+2005&amp;rft_id=http%3A%2F%2Fieeexplore.ieee.org%2Fiel5%2F2%2F30853%2F01430630.pdf%3Ftp%3D%26isnumber%3D%26arnumber%3D1430630"><span style="display: none;">&#160;</span></span></li>
</ul>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=X86&amp;action=edit&amp;section=33" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<ul>
<li><a href="http://www.intel.com/museum/corporatetimeline/index.htm?iid=about+ln_history" class="external text" title="http://www.intel.com/museum/corporatetimeline/index.htm?iid=about+ln_history" rel="nofollow">25 Years of Intel Architecture</a></li>
<li><a href="http://www.x86-guide.com/" class="external text" title="http://www.x86-guide.com/" rel="nofollow">x86 CPUs guide</a></li>
</ul>


<!-- 
NewPP limit report
Preprocessor node count: 2061/1000000
Post-expand include size: 17405/2048000 bytes
Template argument size: 6983/2048000 bytes
Expensive parser function count: 0/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:34198-0!1!0!default!!en!2 and timestamp 20090406113046 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/X86">http://en.wikipedia.org/wiki/X86</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:1978_introductions" title="Category:1978 introductions">1978 introductions</a></span> | <span dir='ltr'><a href="/wiki/Category:X86_architecture" title="Category:X86 architecture">X86 architecture</a></span> | <span dir='ltr'><a href="/wiki/Category:Intel_products" title="Category:Intel products">Intel products</a></span> | <span dir='ltr'><a href="/wiki/Category:IBM_PC_compatibles" title="Category:IBM PC compatibles">IBM PC compatibles</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/X86" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:X86" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=X86&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=X86&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=X86" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/X86" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/X86" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=X86&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=X86&amp;oldid=282089241" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=X86&amp;id=282089241">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-bs"><a href="http://bs.wikipedia.org/wiki/Procesorska_arhitektura_x86">Bosanski</a></li>
				<li class="interwiki-bg"><a href="http://bg.wikipedia.org/wiki/X86">Български</a></li>
				<li class="interwiki-ca"><a href="http://ca.wikipedia.org/wiki/X86">Català</a></li>
				<li class="interwiki-cs"><a href="http://cs.wikipedia.org/wiki/X86">Česky</a></li>
				<li class="interwiki-da"><a href="http://da.wikipedia.org/wiki/X86">Dansk</a></li>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/X86-Prozessor">Deutsch</a></li>
				<li class="interwiki-es"><a href="http://es.wikipedia.org/wiki/X86">Español</a></li>
				<li class="interwiki-eo"><a href="http://eo.wikipedia.org/wiki/X86">Esperanto</a></li>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/X86">Français</a></li>
				<li class="interwiki-ga"><a href="http://ga.wikipedia.org/wiki/Ailtireacht_x86">Gaeilge</a></li>
				<li class="interwiki-ko"><a href="http://ko.wikipedia.org/wiki/X86">한국어</a></li>
				<li class="interwiki-id"><a href="http://id.wikipedia.org/wiki/X86">Bahasa Indonesia</a></li>
				<li class="interwiki-is"><a href="http://is.wikipedia.org/wiki/X86-h%C3%B6nnun">Íslenska</a></li>
				<li class="interwiki-it"><a href="http://it.wikipedia.org/wiki/Architettura_x86">Italiano</a></li>
				<li class="interwiki-he"><a href="http://he.wikipedia.org/wiki/X86">עברית</a></li>
				<li class="interwiki-lv"><a href="http://lv.wikipedia.org/wiki/X86">Latviešu</a></li>
				<li class="interwiki-lt"><a href="http://lt.wikipedia.org/wiki/X86">Lietuvių</a></li>
				<li class="interwiki-nl"><a href="http://nl.wikipedia.org/wiki/X86-instructieset">Nederlands</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/80x86">日本語</a></li>
				<li class="interwiki-no"><a href="http://no.wikipedia.org/wiki/X86-arkitektur">‪Norsk (bokmål)‬</a></li>
				<li class="interwiki-pl"><a href="http://pl.wikipedia.org/wiki/X86">Polski</a></li>
				<li class="interwiki-pt"><a href="http://pt.wikipedia.org/wiki/X86">Português</a></li>
				<li class="interwiki-ru"><a href="http://ru.wikipedia.org/wiki/X86">Русский</a></li>
				<li class="interwiki-sk"><a href="http://sk.wikipedia.org/wiki/X86">Slovenčina</a></li>
				<li class="interwiki-fi"><a href="http://fi.wikipedia.org/wiki/X86">Suomi</a></li>
				<li class="interwiki-sv"><a href="http://sv.wikipedia.org/wiki/X86">Svenska</a></li>
				<li class="interwiki-th"><a href="http://th.wikipedia.org/wiki/X86">ไทย</a></li>
				<li class="interwiki-tr"><a href="http://tr.wikipedia.org/wiki/X86">Türkçe</a></li>
				<li class="interwiki-uk"><a href="http://uk.wikipedia.org/wiki/X86">Українська</a></li>
				<li class="interwiki-zh"><a href="http://zh.wikipedia.org/wiki/X86">中文</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 6 April 2009, at 11:30.</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv101 in 0.125 secs. --></body></html>
