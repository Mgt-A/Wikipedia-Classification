<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Data structure alignment,Articles needing additional references from March 2009,Binary numeral system,Bitwise AND,Bitwise NOT,Borland,Bus error,Byte,Bytes,C++,CPU" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Data_structure_alignment&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Data_structure_alignment&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Data structure alignment - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Data_structure_alignment";
		var wgTitle = "Data structure alignment";
		var wgAction = "view";
		var wgArticleId = "2247927";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 282072956;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
<style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-c .de1, .source-c .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-c  {}
.source-c .head {}
.source-c .foot {}
.source-c .imp {font-weight: bold; color: red;}
.source-c .ln-xtra {color: #cc0; background-color: #ffc;}
.source-c li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-c li.li2 {font-weight: bold;}
.source-c .kw1 {color: #b1b100;}
.source-c .kw2 {color: #000000; font-weight: bold;}
.source-c .kw3 {color: #000066;}
.source-c .kw4 {color: #993333;}
.source-c .co1 {color: #808080; font-style: italic;}
.source-c .co2 {color: #339933;}
.source-c .coMULTI {color: #808080; font-style: italic;}
.source-c .es0 {color: #000099; font-weight: bold;}
.source-c .br0 {color: #66cc66;}
.source-c .st0 {color: #ff0000;}
.source-c .nu0 {color: #cc66cc;}
.source-c .me1 {color: #202020;}
.source-c .me2 {color: #202020;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style>		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Data_structure_alignment skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Data structure alignment</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<table class="metadata plainlinks ambox ambox-content" style="">
<tr>
<td class="mbox-image">
<div style="width: 52px;"><a href="/wiki/File:Question_book-new.svg" class="image" title="Question book-new.svg"><img alt="" src="http://upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/50px-Question_book-new.svg.png" width="50" height="39" border="0" /></a></div>
</td>
<td class="mbox-text" style="">This article <b>needs additional <a href="/wiki/Wikipedia:Citing_sources" title="Wikipedia:Citing sources">citations</a> for <a href="/wiki/Wikipedia:Verifiability" title="Wikipedia:Verifiability">verification</a>.</b> Please help <a href="http://en.wikipedia.org/w/index.php?title=Data_structure_alignment&amp;action=edit" class="external text" title="http://en.wikipedia.org/w/index.php?title=Data_structure_alignment&amp;action=edit" rel="nofollow">improve this article</a> by adding <a href="/wiki/Wikipedia:Reliable_sources" title="Wikipedia:Reliable sources">reliable references</a> (ideally, using <i><a href="/wiki/Wikipedia:Footnotes" title="Wikipedia:Footnotes">inline citations</a></i>). Unsourced material may be <a href="/wiki/Template:Fact" title="Template:Fact">challenged</a> and <a href="/wiki/Wikipedia:BURDEN" title="Wikipedia:BURDEN" class="mw-redirect">removed</a>. <small><i>(March 2009)</i></small></td>
</tr>
</table>
<p><b>Data structure alignment</b> is the way data is arranged and accessed in computer memory. It consists of two separate but related issues: <i>data alignment</i> and <i>data structure padding</i>. When modern computers read from or write to a memory address, it will do this in <a href="/wiki/Word_(computing)" title="Word (computing)">word</a> sized chunks (e.g. 4 byte chunks on a 32-bit system). <i>Data alignment</i> is to put the data at a memory offset equal to some multiple of the word size, which increases the system's performance due to how the <a href="/wiki/CPU" title="CPU" class="mw-redirect">CPU</a> handles memory. To align the data, it may be necessary to insert some meaningless bytes between the end of the last data structure and the start of the next, which is <i>data structure padding</i>.</p>
<p>For example, when the computer's word size is 4 bytes, the data to be read should be at a memory offset which is some multiple of 4. When this is not the case, e.g. the data starts at the 14th byte instead of the 16th byte, then the computer has to read two 4-byte chunks and do some calculation before the requested data has been read, or it may generate an <a href="/wiki/Bus_error" title="Bus error">alignment fault</a>. Even though the previous data structure ends at the 14th byte, the next data structure should start at the 16th byte. Two padding bytes are inserted between the two data structures to align the next data structure to the 16th byte.</p>
<p>Although data structure alignment is a fundamental issue for all modern computers, many computer languages and computer language implementations handle data alignment automatically. Certain C and C++ implementations and assembly language allow at least partial control of data structure padding, which may be useful in certain special circumstances.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Definitions"><span class="tocnumber">1</span> <span class="toctext">Definitions</span></a></li>
<li class="toclevel-1"><a href="#Problems"><span class="tocnumber">2</span> <span class="toctext">Problems</span></a></li>
<li class="toclevel-1"><a href="#Architectures"><span class="tocnumber">3</span> <span class="toctext">Architectures</span></a>
<ul>
<li class="toclevel-2"><a href="#RISC"><span class="tocnumber">3.1</span> <span class="toctext">RISC</span></a></li>
<li class="toclevel-2"><a href="#x86_and_x86-64"><span class="tocnumber">3.2</span> <span class="toctext">x86 and x86-64</span></a></li>
<li class="toclevel-2"><a href="#Compatibility"><span class="tocnumber">3.3</span> <span class="toctext">Compatibility</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Data_Structure_Padding"><span class="tocnumber">4</span> <span class="toctext">Data Structure Padding</span></a>
<ul>
<li class="toclevel-2"><a href="#Computing_padding"><span class="tocnumber">4.1</span> <span class="toctext">Computing padding</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Typical_alignment_of_C_structs_on_x86"><span class="tocnumber">5</span> <span class="toctext">Typical alignment of C structs on x86</span></a>
<ul>
<li class="toclevel-2"><a href="#Default_packing_and_.23pragma_pack"><span class="tocnumber">5.1</span> <span class="toctext">Default packing and #pragma pack</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Allocating_memory_aligned_to_cache_lines"><span class="tocnumber">6</span> <span class="toctext">Allocating memory aligned to cache lines</span></a></li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">7</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">8</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">9</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Definitions" id="Definitions"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Data_structure_alignment&amp;action=edit&amp;section=1" title="Edit section: Definitions">edit</a>]</span> <span class="mw-headline">Definitions</span></h2>
<p>A <a href="/wiki/Computer_memory" title="Computer memory">memory</a> address <i>a</i>, is said to be <i>n-byte aligned</i> when <i>n</i> is a power of two and <i>a</i> is a multiple of <i>n</i> <a href="/wiki/Byte" title="Byte">bytes</a>. In this context a byte is the smallest unit of memory access, i.e. each memory address specifies a different byte. An <i>n</i>-byte aligned address would have <i>log<sub>2</sub> n</i> least-significant zeros when expressed in <a href="/wiki/Binary_numeral_system" title="Binary numeral system">binary</a>.</p>
<p>A memory access is said to be <i>aligned</i> when the datum being accessed is <i>n</i> bytes long and the datum address is <i>n</i>-byte aligned. When a memory access is not aligned, it is said to be <i>misaligned</i>. Note that by definition byte memory accesses are always aligned.</p>
<p>A memory pointer that refers to primitive data that is <i>n</i> bytes long is said to be <i>aligned</i> if it is only allowed to contain addresses that are <i>n</i>-byte aligned, otherwise it is said to be <i>unaligned</i>. A memory pointer that refers to a data aggregate (a data structure or array) is <i>aligned</i> if (and only if) each primitive datum in the aggregate is aligned.</p>
<p>Note that the definitions above assume that each primitive datum is a power of two bytes long. When this is not the case (as with 80-bit floating-point on x86) the context influences the conditions where the datum is considered aligned or not.</p>
<p><a name="Problems" id="Problems"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Data_structure_alignment&amp;action=edit&amp;section=2" title="Edit section: Problems">edit</a>]</span> <span class="mw-headline">Problems</span></h2>
<p>A computer accesses memory a single memory word at a time. As long as the memory word size is at least as large as the largest primitive data type supported by the computer, aligned accesses will always access a single memory word. This may not be true for misaligned data accesses.</p>
<p>If the highest and lowest bytes in a datum are not within the same memory word the computer must split the datum access into multiple memory accesses. This requires a lot of complex circuitry to generate the memory accesses and coordinate them. To handle the case where the memory words are in different memory pages the processor must either verify that both pages are present before executing the instruction or be able to handle a <a href="/wiki/Translation_lookaside_buffer" title="Translation lookaside buffer">TLB</a> miss or a <a href="/wiki/Page_fault" title="Page fault">page fault</a> on any memory access during the instruction execution.</p>
<p>When a single memory word is accessed the operation is atomic, i.e. the whole memory word is read or written at once and other devices must wait until the read or write operation completes before they can access it. This may not be true for unaligned accesses to multiple memory words, e.g. the first word might be read by one device, both words written by another device and then the second word read by the first device so that the value read is neither the original value nor the updated value. Although such failures are rare, they can be very difficult to identify.</p>
<p><a name="Architectures" id="Architectures"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Data_structure_alignment&amp;action=edit&amp;section=3" title="Edit section: Architectures">edit</a>]</span> <span class="mw-headline">Architectures</span></h2>
<p><a name="RISC" id="RISC"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Data_structure_alignment&amp;action=edit&amp;section=4" title="Edit section: RISC">edit</a>]</span> <span class="mw-headline">RISC</span></h3>
<p>Most RISC processors will generate an alignment fault when a load or store instruction accesses a misaligned address. This allows the operating system to emulate the misaligned access using other instructions. For example, the alignment fault handler might use byte loads or stores (which are always aligned) to emulate a larger load or store instruction.</p>
<p>Some architectures like <a href="/wiki/MIPS_architecture" title="MIPS architecture">MIPS</a> have special unaligned load and store instructions. One unaligned load instruction gets the bytes from the memory word with the lowest byte address and another gets the bytes from the memory word with the highest byte address. Similarly, store-high and store-low instructions store the appropriate bytes in the higher and lower memory words respectively.</p>
<p>The <a href="/wiki/DEC_Alpha" title="DEC Alpha">DEC Alpha</a> architecture has a two-step approach to unaligned loads and stores. The first step is to load the upper and lower memory words into separate registers. The second step is to extract or modify the memory words using special low/high instructions similar to the MIPS instructions. An unaligned store is completed by storing the modified memory words back to memory. The reason for this complexity is that the original Alpha architecture could only read or write 32-bit or 64-bit values. This proved to be a severe limitation that often led to code bloat and poor performance. Later Alpha processors added byte and double-byte load and store instructions.</p>
<p>Because these instructions are larger and slower than the normal memory load and store instructions they should only be used when necessary. Most C and C++ compilers have an “unaligned” attribute that can be applied to pointers that need the unaligned instructions.</p>
<p><a name="x86_and_x86-64" id="x86_and_x86-64"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Data_structure_alignment&amp;action=edit&amp;section=5" title="Edit section: x86 and x86-64">edit</a>]</span> <span class="mw-headline">x86 and x86-64</span></h3>
<p>While the <a href="/wiki/X86" title="X86">x86</a> architecture originally did not require aligned memory access and still works without it, <a href="/wiki/SSE2" title="SSE2">SSE2</a> and <a href="/wiki/X86-64" title="X86-64">x86-64</a> instructions on <a href="/wiki/X86" title="X86">x86</a> CPUs <i>do</i> require the data to be 128-bit (16-byte) aligned and there can be substantial performance advantages from using aligned data on these architectures.</p>
<p><a name="Compatibility" id="Compatibility"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Data_structure_alignment&amp;action=edit&amp;section=6" title="Edit section: Compatibility">edit</a>]</span> <span class="mw-headline">Compatibility</span></h3>
<p>The advantage to supporting unaligned access is that it is easier to write compilers that do not need to align memory, at the expense of the cost of slower access. One way to increase performance in <a href="/wiki/RISC" title="RISC" class="mw-redirect">RISC</a> processors which are designed to maximize raw performance is to require data to be loaded or stored on a word boundary. So though memory is commonly addressed by 8 bit <a href="/wiki/Bytes" title="Bytes" class="mw-redirect">bytes</a>, loading a 32 bit integer or 64 bit floating point number would be required to be start at every 64 bits on a 64 bit machine. The processor could flag a fault if it were asked to load a number which was not on such a boundary, but this would result in a slower call to a routine which would need to figure out which word or words contained the data and extract the equivalent value.</p>
<p><a name="Data_Structure_Padding" id="Data_Structure_Padding"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Data_structure_alignment&amp;action=edit&amp;section=7" title="Edit section: Data Structure Padding">edit</a>]</span> <span class="mw-headline">Data Structure Padding</span></h2>
<p>Although the <a href="/wiki/Compiler" title="Compiler">compiler</a> (or <a href="/wiki/Interpreter_(computing)" title="Interpreter (computing)">interpreter</a>) normally allocates individual data items on aligned boundaries, data structures often have members with different alignment requirements. To maintain proper alignment the translator normally inserts additional unnamed data members so that each member is properly aligned. In addition the data structure as a whole may be padded with a final unnamed member. This allows each member of an array of structures to be properly aligned.</p>
<p>Padding is only inserted when a <a href="/wiki/Structure" title="Structure">structure</a> member is followed by a member with a larger alignment requirement or at the end of the structure. By changing the ordering of members in a structure, it is possible to change the amount of padding required to maintain alignment. For example, if members are sorted by ascending or descending alignment requirements a minimal amount of padding is required. The minimal amount of padding required is always less than the largest alignment in the structure. Computing the maximum amount of padding required is more complicated, but is always less than the sum of the alignment requirements for all members minus twice the sum of the alignment requirements for the least aligned half of the structure members.</p>
<p>Although <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a> and <a href="/wiki/C%2B%2B" title="C++">C++</a> do not allow the compiler to reorder structure members to save space, other languages might. It is also possible to tell most C and C++ compilers to "pack" the members of a structure to a certain level of alignment, e.g. "pack(2)" means align data members larger than a byte to a two-byte boundary so that any padding members are at most one byte long.</p>
<p>One use for such "packed" structures is to conserve memory. For example, a structure containing a single byte and a four-byte integer would require three additional bytes of padding. A large array of such structures would use 37.5% less memory if they are packed, although accessing each structure might take longer. This compromise may be considered a form of <a href="/wiki/Space-time_tradeoff" title="Space-time tradeoff">space-time tradeoff</a>.</p>
<p>Although use of "packed" structures is most frequently used to conserve <a href="/wiki/Memory_space" title="Memory space" class="mw-redirect">memory space</a>, it may also be used to format a data structure for transmission using a standard protocol. However in this usage, care must also be taken to ensure that the values of the struct members are stored with the <a href="/wiki/Endianness" title="Endianness">endianness</a> required by the protocol (often <a href="/wiki/Network_byte_order" title="Network byte order" class="mw-redirect">network byte order</a>), which may be different from the endianness used natively by the host machine.</p>
<p><a name="Computing_padding" id="Computing_padding"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Data_structure_alignment&amp;action=edit&amp;section=8" title="Edit section: Computing padding">edit</a>]</span> <span class="mw-headline">Computing padding</span></h3>
<p>The following formulas provides the number of padding bytes required to align the start of a data structure (where <i>mod</i> is the <a href="/wiki/Modulo_operation" title="Modulo operation">modulo</a> operator):</p>
<pre>
padding = (align - (offset mod align)) mod align
new offset = offset + ((align - (offset mod align)) mod align)
</pre>
<p>For example, the padding to add to offset 0x59d for a structure aligned to every 4 bytes is 3. The structure will then start at 0x5a0, which is a multiple of 4. Note that when <i>offset</i> already is a multiple of <i>align</i>, taking the modulo of <i>align - (offset mod align)</i> is required to get a padding of 0.</p>
<p>Or alternatively when the alignment is a power of two, the following formulas provides the new offset (where <i>&amp;</i> is a <a href="/wiki/Bitwise_AND" title="Bitwise AND" class="mw-redirect">bitwise AND</a> and <i>~</i> a <a href="/wiki/Bitwise_NOT" title="Bitwise NOT" class="mw-redirect">bitwise NOT</a>):</p>
<pre>
new offset = align + ((offset - 1) &amp; ~(align - 1))
padding = (align + ((offset - 1) &amp; ~(align - 1))) - offset
</pre>
<p><a name="Typical_alignment_of_C_structs_on_x86" id="Typical_alignment_of_C_structs_on_x86"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Data_structure_alignment&amp;action=edit&amp;section=9" title="Edit section: Typical alignment of C structs on x86">edit</a>]</span> <span class="mw-headline">Typical alignment of C structs on x86</span></h2>
<p><a href="/wiki/Data_structure" title="Data structure">Data structure</a> members are stored sequentially in a memory so that in the structure below the member Data1 will always precede Data2 and Data2 will always precede Data3:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">struct</span> MyData
<span class="br0">{</span>
    <span class="kw4">short</span> Data1;
    <span class="kw4">short</span> Data2;
    <span class="kw4">short</span> Data3;
<span class="br0">}</span>;
</pre></div>
<p>If the type "short" is stored in two bytes of memory then each member of the data structure depicted above would be 2-byte aligned. Data1 would be at offset 0, Data2 at offset 2 and Data3 at offset 4. The size of this structure would be 6 bytes.</p>
<p>The type of each member of the structure usually has a default alignment, meaning that it will, unless otherwise requested by the programmer, be aligned on a pre-determined boundary. The following typical alignments are valid for compilers from <a href="/wiki/Microsoft" title="Microsoft">Microsoft</a>, <a href="/wiki/Borland" title="Borland">Borland</a>, and <a href="/wiki/GNU" title="GNU">GNU</a> when compiling for x86:</p>
<ul>
<li>A <b>char</b> (one byte) will be 1-byte aligned.</li>
<li>A <b>short</b> (two bytes) will be 2-byte aligned.</li>
<li>An <b>int</b> (four bytes) will be 4-byte aligned.</li>
<li>A <b>float</b> (four bytes) will be 4-byte aligned.</li>
<li>A <b>double</b> (eight bytes) will be 8-byte aligned on Windows and 4-byte aligned on Linux.</li>
</ul>
<p>Here is a structure with members of various types, totaling <b>8 bytes</b> before compilation:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">struct</span> MixedData
<span class="br0">{</span>
    <span class="kw4">char</span> Data1;
    <span class="kw4">short</span> Data2;
    <span class="kw4">int</span> Data3;
    <span class="kw4">char</span> Data4;
<span class="br0">}</span>;
</pre></div>
<p>After compilation the data structure will be supplemented with padding bytes to ensure a proper alignment for each of its members:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">struct</span> MixedData  <span class="coMULTI">/* after compilation */</span>
<span class="br0">{</span>
    <span class="kw4">char</span> Data1;
    <span class="kw4">char</span> Padding0<span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span>; <span class="coMULTI">/* For the following 'short' to be aligned on a 2 byte boundary */</span>
    <span class="kw4">short</span> Data2;
    <span class="kw4">int</span> Data3;  
    <span class="kw4">char</span> Data4;
    <span class="kw4">char</span> Padding1<span class="br0">[</span><span class="nu0">3</span><span class="br0">]</span>;
<span class="br0">}</span>;
</pre></div>
<p>The compiled size of the structure is now <b>12 bytes</b>. It is important to note that the last member is padded with the number of bytes required to conform to the largest type of the structure. In this case 3 bytes are added to the last member to pad the structure to the size of a long word.</p>
<p>It is possible to change the alignment of structures to reduce the memory they require (or to conform to an existing format) by changing the compiler’s alignment (or “packing”) of structure members.</p>
<p>Requesting that the <i>MixedData</i> structure above be aligned to a one byte boundary will have the compiler discard the pre-determined alignment of the members and no padding bytes would be inserted.</p>
<p>While there is no standard way of defining the alignment of structure members, some compilers use <i>#pragma</i> directives to specify packing inside source files. Here is an example:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="co2">#pragma pack(push)  /* push current alignment to stack */</span>
<span class="co2">#pragma pack(1)     /* set alignment to 1 byte boundary */</span>
 
<span class="kw4">struct</span> MyPackedData
<span class="br0">{</span>
    <span class="kw4">char</span> Data1;
    <span class="kw4">long</span> Data2;
    <span class="kw4">char</span> Data3;
<span class="br0">}</span>;
 
<span class="co2">#pragma pack(pop)   /* restore original alignment from stack */</span>
</pre></div>
<p>This structure would have a compiled size of <b>6 bytes</b>. The above directives are available in compilers from <a href="/wiki/Microsoft" title="Microsoft">Microsoft</a>, <a href="/wiki/Borland" title="Borland">Borland</a>, <a href="/wiki/GNU" title="GNU">GNU</a> and many others.</p>
<p><a name="Default_packing_and_.23pragma_pack" id="Default_packing_and_.23pragma_pack"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Data_structure_alignment&amp;action=edit&amp;section=10" title="Edit section: Default packing and #pragma pack">edit</a>]</span> <span class="mw-headline">Default packing and #pragma pack</span></h3>
<p>On MS compilers, there is a relationship between project default packing (the /Zp directive) and the #pragma pack directive which is unexpected for most people.</p>
<p>The #pragma pack directive can only be used to <b>reduce</b> the packing size of a structure from the project default packing. This leads to interoperability problems with library headers which use for example #pragma pack(8) if you set a project packing to smaller than this. The MSDN documentation states that if the #pragma pack packing is larger than or equal to the project packing, it will be ignored.</p>
<p>For this reason, one should never set a project packing to any value other than the default of 8 bytes, as it would break the #pragma pack directives used in library headers and result in binary incompatibilities between structures.</p>
<p>In particular, setting /Zp1 breaks all #pragma pack directives other than #pragma pack(1).</p>
<p><a name="Allocating_memory_aligned_to_cache_lines" id="Allocating_memory_aligned_to_cache_lines"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Data_structure_alignment&amp;action=edit&amp;section=11" title="Edit section: Allocating memory aligned to cache lines">edit</a>]</span> <span class="mw-headline">Allocating memory aligned to cache lines</span></h2>
<p>It would be beneficial to allocate memory aligned to <a href="/wiki/Cache_line" title="Cache line" class="mw-redirect">cache lines</a>. If an array is partitioned for more than one thread to operate on, having the sub-array boundaries unaligned to cache lines could lead to performance degradation. Here is an example to allocate memory (double array of size 8) aligned to cache line of 64 bytes.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="co2">#include &lt;stdlib.h&gt;</span>
<span class="kw4">int</span> foo <span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
   <span class="kw4">double</span> *var;
   posix_memalign<span class="br0">(</span>&amp;var, <span class="nu0">64</span>, <span class="nu0">8</span><span class="br0">)</span>;
<span class="br0">}</span>
</pre></div>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Data_structure_alignment&amp;action=edit&amp;section=12" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<ul>
<li><cite style="font-style:normal" class="" id="CITEREFBryantDavid2003"><a href="/wiki/Randal_Bryant" title="Randal Bryant">Bryant, Randal E.</a>; David, O'Hallaron (2003), <i><a href="http://csapp.cs.cmu.edu/" class="external text" title="http://csapp.cs.cmu.edu/" rel="nofollow">Computer Systems: A Programmer's Perspective</a></i> (2003 ed.), Upper Saddle River, NJ: Pearson Education, <a href="/wiki/Special:BookSources/013034074X" class="internal">ISBN 0-13-034074-X</a><span class="printonly">, <a href="http://csapp.cs.cmu.edu/" class="external free" title="http://csapp.cs.cmu.edu/" rel="nofollow">http://csapp.cs.cmu.edu/</a></span></cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Computer+Systems%3A+A+Programmer%27s+Perspective&amp;rft.aulast=Bryant&amp;rft.aufirst=Randal+E.&amp;rft.au=Bryant%2C+Randal+E.&amp;rft.au=David%2C+O%27Hallaron&amp;rft.date=2003&amp;rft.edition=2003&amp;rft.place=Upper+Saddle+River%2C+NJ&amp;rft.pub=Pearson+Education&amp;rft.isbn=0-13-034074-X&amp;rft_id=http%3A%2F%2Fcsapp.cs.cmu.edu%2F&amp;rfr_id=info:sid/en.wikipedia.org:Data_structure_alignment"><span style="display: none;">&#160;</span></span></li>
</ul>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Data_structure_alignment&amp;action=edit&amp;section=13" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<ul>
<li><a href="/wiki/Stride_of_an_array" title="Stride of an array">Stride of an array</a></li>
<li><a href="/wiki/Type_punning" title="Type punning">Type punning</a></li>
</ul>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Data_structure_alignment&amp;action=edit&amp;section=14" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<ul>
<li><a href="http://www-128.ibm.com/developerworks/library/pa-dalign/" class="external text" title="http://www-128.ibm.com/developerworks/library/pa-dalign/" rel="nofollow">IBM developerWorks article on data alignment</a></li>
<li><a href="http://msdn2.microsoft.com/en-us/library/ms253949.aspx" class="external text" title="http://msdn2.microsoft.com/en-us/library/ms253949.aspx" rel="nofollow">MSDN article on data alignment</a></li>
<li><a href="http://www.codesynthesis.com/~boris/blog/2009/04/06/cxx-data-alignment-portability/" class="external text" title="http://www.codesynthesis.com/~boris/blog/2009/04/06/cxx-data-alignment-portability/" rel="nofollow">Article on data alignment and data portability</a></li>
<li><a href="http://www.eventhelix.com/RealtimeMantra/ByteAlignmentAndOrdering.htm" class="external text" title="http://www.eventhelix.com/RealtimeMantra/ByteAlignmentAndOrdering.htm" rel="nofollow">Byte Alignment and Ordering</a></li>
<li><a href="http://developer.intel.com/design/itanium/manuals/245317.htm" class="external text" title="http://developer.intel.com/design/itanium/manuals/245317.htm" rel="nofollow">Intel Itanium Architecture Software Developer's Manual</a></li>
<li><a href="http://www-01.ibm.com/chips/techlib/techlib.nsf/techdocs/852569B20050FF778525699600719DF2" class="external text" title="http://www-01.ibm.com/chips/techlib/techlib.nsf/techdocs/852569B20050FF778525699600719DF2" rel="nofollow">PowerPC Microprocessor Family: The Programming Environments for 32-Bit Microprocessors</a></li>
</ul>


<!-- 
NewPP limit report
Preprocessor node count: 737/1000000
Post-expand include size: 8111/2048000 bytes
Template argument size: 2378/2048000 bytes
Expensive parser function count: 1/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:2247927-0!1!0!default!!en!2 and timestamp 20090417035521 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Data_structure_alignment">http://en.wikipedia.org/wiki/Data_structure_alignment</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Data_structures" title="Category:Data structures">Data structures</a></span> | <span dir='ltr'><a href="/wiki/Category:Compiler_theory" title="Category:Compiler theory">Compiler theory</a></span></div><div id="mw-hidden-catlinks" class="mw-hidden-cats-hidden">Hidden categories:&#32;<span dir='ltr'><a href="/wiki/Category:Articles_needing_additional_references_from_March_2009" title="Category:Articles needing additional references from March 2009">Articles needing additional references from March 2009</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Data_structure_alignment" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Data_structure_alignment" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Data_structure_alignment&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Data_structure_alignment&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Data_structure_alignment" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Data_structure_alignment" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Data_structure_alignment" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Data_structure_alignment&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Data_structure_alignment&amp;oldid=282072956" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Data_structure_alignment&amp;id=282072956">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/Speicherausrichtung">Deutsch</a></li>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Alignement_de_donn%C3%A9es">Français</a></li>
				<li class="interwiki-ru"><a href="http://ru.wikipedia.org/wiki/%D0%92%D1%8B%D1%80%D0%B0%D0%B2%D0%BD%D0%B8%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5_%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85">Русский</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 6 April 2009, at 09:12 (UTC).</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv151 in 0.062 secs. --></body></html>
