<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="C preprocessor,Special:Search/C preprocessor,/dev/null,2008,?:,ANSI C,Backslash,C++,C99,C (programming language),C Sharp (programming language)" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=C_preprocessor&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=C_preprocessor&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>C preprocessor - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "C_preprocessor";
		var wgTitle = "C preprocessor";
		var wgAction = "view";
		var wgArticleId = "231835";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 282326362;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
<style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-c .de1, .source-c .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-c  {}
.source-c .head {}
.source-c .foot {}
.source-c .imp {font-weight: bold; color: red;}
.source-c .ln-xtra {color: #cc0; background-color: #ffc;}
.source-c li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-c li.li2 {font-weight: bold;}
.source-c .kw1 {color: #b1b100;}
.source-c .kw2 {color: #000000; font-weight: bold;}
.source-c .kw3 {color: #000066;}
.source-c .kw4 {color: #993333;}
.source-c .co1 {color: #808080; font-style: italic;}
.source-c .co2 {color: #339933;}
.source-c .coMULTI {color: #808080; font-style: italic;}
.source-c .es0 {color: #000099; font-weight: bold;}
.source-c .br0 {color: #66cc66;}
.source-c .st0 {color: #ff0000;}
.source-c .nu0 {color: #cc66cc;}
.source-c .me1 {color: #202020;}
.source-c .me2 {color: #202020;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-cpp {line-height: normal;}
.source-cpp li, .source-cpp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for cpp
 * CSS class: source-cpp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-cpp .de1, .source-cpp .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-cpp  {}
.source-cpp .head {}
.source-cpp .foot {}
.source-cpp .imp {font-weight: bold; color: red;}
.source-cpp .ln-xtra {color: #cc0; background-color: #ffc;}
.source-cpp li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-cpp li.li2 {font-weight: bold;}
.source-cpp .kw1 {color: #0000ff;}
.source-cpp .kw2 {color: #0000ff;}
.source-cpp .kw3 {color: #0000dd;}
.source-cpp .kw4 {color: #0000ff;}
.source-cpp .co1 {color: #ff0000;}
.source-cpp .co2 {color: #339900;}
.source-cpp .coMULTI {color: #ff0000; font-style: italic;}
.source-cpp .es0 {color: #666666; font-weight: bold;}
.source-cpp .br0 {color: #000000;}
.source-cpp .st0 {color: #666666;}
.source-cpp .nu0 {color: #0000dd;}
.source-cpp .me1 {color: #00eeff;}
.source-cpp .me2 {color: #00eeff;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style>		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-C_preprocessor skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">C preprocessor</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<p>The <b>C preprocessor</b> (<b>cpp</b>) is the <a href="/wiki/Preprocessor" title="Preprocessor">preprocessor</a> for the <a href="/wiki/C_(programming_language)" title="C (programming language)">C programming language</a>. In many C implementations, it is a separate <a href="/wiki/Computer_program" title="Computer program">program</a> invoked by the <a href="/wiki/Compiler" title="Compiler">compiler</a> as the first part of translation. The preprocessor handles directives for <a href="/wiki/Source_code" title="Source code">source file</a> inclusion (<tt>#include</tt>), <a href="/wiki/Macro_(computer_science)" title="Macro (computer science)">macro</a> definitions (<tt>#define</tt>), and conditional inclusion (<tt>#if</tt>). The language of preprocessor directives is not strictly specific to the grammar of C, so the C preprocessor can also be used independently to process other types of files.</p>
<p>The transformations it makes on its input form the first four of C's so-called <i>Phases of Translation</i>. Though an implementation may choose to perform some or all phases simultaneously, it must behave <b>as if</b> it performed them one-by-one in order.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Phases"><span class="tocnumber">1</span> <span class="toctext">Phases</span></a></li>
<li class="toclevel-1"><a href="#Including_files"><span class="tocnumber">2</span> <span class="toctext">Including files</span></a></li>
<li class="toclevel-1"><a href="#Conditional_compilation"><span class="tocnumber">3</span> <span class="toctext">Conditional compilation</span></a></li>
<li class="toclevel-1"><a href="#Macro_definition_and_expansion"><span class="tocnumber">4</span> <span class="toctext">Macro definition and expansion</span></a>
<ul>
<li class="toclevel-2"><a href="#Precedence"><span class="tocnumber">4.1</span> <span class="toctext">Precedence</span></a></li>
<li class="toclevel-2"><a href="#Multiple_lines"><span class="tocnumber">4.2</span> <span class="toctext">Multiple lines</span></a></li>
<li class="toclevel-2"><a href="#Multiple_evaluation_of_side_effects"><span class="tocnumber">4.3</span> <span class="toctext">Multiple evaluation of side effects</span></a></li>
<li class="toclevel-2"><a href="#Token_concatenation"><span class="tocnumber">4.4</span> <span class="toctext">Token concatenation</span></a></li>
<li class="toclevel-2"><a href="#Semicolons"><span class="tocnumber">4.5</span> <span class="toctext">Semicolons</span></a>
<ul>
<li class="toclevel-3"><a href="#Multiple_statements"><span class="tocnumber">4.5.1</span> <span class="toctext">Multiple statements</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#Quoting_macro_arguments"><span class="tocnumber">4.6</span> <span class="toctext">Quoting macro arguments</span></a>
<ul>
<li class="toclevel-3"><a href="#Indirectly_quoting_macro_arguments"><span class="tocnumber">4.6.1</span> <span class="toctext">Indirectly quoting macro arguments</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#Variadic_macros"><span class="tocnumber">4.7</span> <span class="toctext">Variadic macros</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#X-Macros"><span class="tocnumber">5</span> <span class="toctext">X-Macros</span></a></li>
<li class="toclevel-1"><a href="#User-defined_compilation_errors_and_warnings"><span class="tocnumber">6</span> <span class="toctext">User-defined compilation errors and warnings</span></a></li>
<li class="toclevel-1"><a href="#Compiler-specific_preprocessor_features"><span class="tocnumber">7</span> <span class="toctext">Compiler-specific preprocessor features</span></a></li>
<li class="toclevel-1"><a href="#Standard_positioning_macros"><span class="tocnumber">8</span> <span class="toctext">Standard positioning macros</span></a></li>
<li class="toclevel-1"><a href="#Compiler-specific_predefined_macros"><span class="tocnumber">9</span> <span class="toctext">Compiler-specific predefined macros</span></a></li>
<li class="toclevel-1"><a href="#As_a_general-purpose_preprocessor"><span class="tocnumber">10</span> <span class="toctext">As a general-purpose preprocessor</span></a></li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">11</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">12</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">13</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Phases" id="Phases"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=C_preprocessor&amp;action=edit&amp;section=1" title="Edit section: Phases">edit</a>]</span> <span class="mw-headline">Phases</span></h2>
<p>The following are the first four (of eight) <i>phases of translation</i> specified in the C Standard:</p>
<ol>
<li>Trigraph Replacement - The preprocessor replaces <a href="/wiki/C_trigraph" title="C trigraph" class="mw-redirect">trigraph sequences</a> with the characters they represent.</li>
<li>Line Splicing - Physical source lines that are continued with escaped newline sequences are <i>spliced</i> to form logical lines.</li>
<li>Tokenization - The preprocessor breaks the result into <i>preprocessing tokens</i> and <a href="/wiki/Whitespace" title="Whitespace" class="mw-redirect">whitespace</a>. It replaces comments with whitespace.</li>
<li>Macro Expansion and Directive Handling - <a href="/wiki/Preprocessing_directive" title="Preprocessing directive" class="mw-redirect">Preprocessing directive</a> lines, including file inclusion and conditional compilation, are executed. The preprocessor simultaneously expands macros and, in the 1999 version of the C standard, handles <code>_Pragma</code> operators.</li>
</ol>
<p><a name="Including_files" id="Including_files"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=C_preprocessor&amp;action=edit&amp;section=2" title="Edit section: Including files">edit</a>]</span> <span class="mw-headline">Including files</span></h2>
<p>The most common use of the preprocessor is to include another file:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="co2">#include &lt;stdio.h&gt;</span>
 
<span class="kw4">int</span> main <span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"Hello, world!<span class="es0">\n</span>"</span><span class="br0">)</span>;
    <span class="kw1">return</span> <span class="nu0">0</span>;
<span class="br0">}</span>
</pre></div>
<p>The preprocessor replaces the line <code>#include &lt;stdio.h&gt;</code> with the system <a href="/wiki/Header_file" title="Header file">header file</a> of that name, which declares the <code>printf()</code> <a href="/wiki/Subroutine" title="Subroutine">function</a> amongst other things. More precisely, the entire text of the file 'stdio.h' replaces the <code>#include</code> directive.</p>
<p>This can also be written using double quotes, e.g. <code>#include "stdio.h"</code>. If the filename is enclosed within angle brackets, the file is searched for in the standard compiler include paths. If the filename is enclosed within double quotes, the search path is expanded to include the current source directory. C compilers and programming environments all have a facility which allows the programmer to define where include files can be found. This can be introduced through a command line flag, which can be parameterized using a <a href="/wiki/Make_(software)" title="Make (software)">makefile</a>, so that a different set of include files can be swapped in for different operating systems, for instance.</p>
<p>By convention, include files are given a <i>.h</i> extension, and files not included by others are given a <i>.c</i> extension. However, there is no requirement that this be observed. Occasionally you will see files with other extensions included, in particular files with a <i>.def</i> extension may denote files designed to be included multiple times, each time expanding the same repetitive content.</p>
<p><code>#include</code> often compels the use of <a href="/wiki/Include_guard" title="Include guard"><code>#include</code> guards</a> or <a href="/wiki/Pragma_once" title="Pragma once"><code>#pragma once</code></a> to prevent double inclusion.</p>
<p><a name="Conditional_compilation" id="Conditional_compilation"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=C_preprocessor&amp;action=edit&amp;section=3" title="Edit section: Conditional compilation">edit</a>]</span> <span class="mw-headline">Conditional compilation</span></h2>
<p>The <code>#if</code>, <code>#ifdef</code>, <code>#ifndef</code>, <code>#else</code>, <code>#elif</code> and <code>#endif</code> directives can be used for conditional compilation.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="co2">#ifdef WIN32 // WIN32 is defined by all Windows 32 compilers, but not by others.</span>
<span class="co2">#include &lt;windows.h&gt;</span>
<span class="co2">#else</span>
<span class="co2">#include &lt;unistd.h&gt;</span>
<span class="co2">#endif</span>
</pre></div>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="co2">#if VERBOSE &gt;= 2</span>
  print<span class="br0">(</span><span class="st0">"trace message"</span><span class="br0">)</span>;
<span class="co2">#endif</span>
</pre></div>
<p>The macro <code>WIN32</code> could be defined implicitly by the compiler, or specified on the compiler's command line, perhaps to control compilation of the program from a <a href="/wiki/Makefile" title="Makefile" class="mw-redirect">makefile</a>.</p>
<p>The code tests if a macro <code>WIN32</code> is defined. If it is, as in this example, the file <code>&lt;windows.h&gt;</code> is included, otherwise <code>&lt;unistd.h&gt;</code>.</p>
<p><a name="Macro_definition_and_expansion" id="Macro_definition_and_expansion"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=C_preprocessor&amp;action=edit&amp;section=4" title="Edit section: Macro definition and expansion">edit</a>]</span> <span class="mw-headline">Macro definition and expansion</span></h2>
<p>There are two types of macros, <i>object-like</i> and <i>function-like</i>. Object-like macros do not take parameters; function-like macros do. The generic syntax for declaring an identifier as a macro of each type is, respectively,</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="co2">#define &lt;identifier&gt; &lt;replacement token list&gt;</span>
<span class="co2">#define &lt;identifier&gt;(&lt;parameter list&gt;) &lt;replacement token list&gt;</span>
</pre></div>
<p>Note that the <i>function-like</i> macro declaration must <b>not</b> have any whitespace between the identifier and the first, opening, parenthesis. If whitespace is present, the macro will be interpreted as object-like with everything starting from the first parenthesis added to the token list.</p>
<p>Whenever the identifier appears in the source code it is replaced with the replacement token list, which can be empty. For an identifier declared to be a function-like macro, it is only replaced when the following token is also a left parenthesis that begins the argument list of the macro invocation. The exact procedure followed for expansion of function-like macros with arguments is subtle.</p>
<p>Object-like macros were conventionally used as part of good programming practice to create symbolic names for constants, e.g.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="co2">#define PI 3.14159</span>
</pre></div>
<p>... instead of hard-coding those numbers throughout one's code. However, both C and C++ provide the <tt>const</tt> directive, which provides another way to avoid hard-coding constants throughout the code.</p>
<p>An example of a function-like macro is:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="co2">#define RADTODEG(x) ((x) * 57.29578)</span>
</pre></div>
<p>This defines a <a href="/wiki/Radian" title="Radian">radians</a> to degrees conversion which can be written subsequently, e.g. <code>RADTODEG(34)</code> or <code>RADTODEG (34)</code>. This is expanded in-place, so the caller does not need to litter copies of the multiplication constant all over his code. The macro here is written as all uppercase to emphasize that it is a macro, not a compiled function.</p>
<p><a name="Precedence" id="Precedence"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=C_preprocessor&amp;action=edit&amp;section=5" title="Edit section: Precedence">edit</a>]</span> <span class="mw-headline">Precedence</span></h3>
<p>Note that the example macro <tt>RADTODEG(x)</tt> given above uses normally superfluous parentheses both around the argument and around the entire expression. Omitting either of these can lead to unexpected results. For example:</p>
<ul>
<li>Macro defined as</li>
</ul>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="co2">#define RADTODEG(x) (x * 57.29578)</span>
</pre></div>
<p>will expand</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
RADTODEG<span class="br0">(</span>a + b<span class="br0">)</span>
</pre></div>
<p>to</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="br0">(</span>a + b * <span class="nu0">57.29578</span><span class="br0">)</span>
</pre></div>
<ul>
<li>Macro defined as</li>
</ul>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="co2">#define RADTODEG(x) (x) * 57.29578</span>
</pre></div>
<p>will expand</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="nu0">1</span> / RADTODEG<span class="br0">(</span>a<span class="br0">)</span>
</pre></div>
<p>to</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="nu0">1</span> / <span class="br0">(</span>a<span class="br0">)</span> * <span class="nu0">57.29578</span>
</pre></div>
<p>neither of which give the intended result.</p>
<p><a name="Multiple_lines" id="Multiple_lines"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=C_preprocessor&amp;action=edit&amp;section=6" title="Edit section: Multiple lines">edit</a>]</span> <span class="mw-headline">Multiple lines</span></h3>
<p>A macro can be extended over as many lines as required using a <a href="/wiki/Backslash" title="Backslash">backslash</a> <a href="/wiki/Escape_character" title="Escape character">escape character</a> at the end of each line. The macro ends after the first line which does not end in a backslash.</p>
<p>The extent to which multi-line macros enhance or reduce the size and complexity of the source of a C program, or its <a href="/wiki/Readability" title="Readability">readability</a> and <a href="/wiki/Maintainability" title="Maintainability">maintainability</a> is open to debate (there is no <a href="/wiki/Experiment" title="Experiment">experimental</a> evidence on this issue). Techniques such as <a href="#X-Macros" title="">X-Macros</a> are occasionally used to address these potential issues.</p>
<p><a name="Multiple_evaluation_of_side_effects" id="Multiple_evaluation_of_side_effects"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=C_preprocessor&amp;action=edit&amp;section=7" title="Edit section: Multiple evaluation of side effects">edit</a>]</span> <span class="mw-headline">Multiple evaluation of side effects</span></h3>
<p>Another example of a function-like macro is:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="co2">#define MIN(a,b) ((a)&gt;(b)?(b):(a))</span>
</pre></div>
<p>Notice the use of the <code><a href="/wiki/%3F:" title="?:">?:</a></code> operator. This illustrates one of the dangers of using function-like macros. One of the arguments, <i>a</i> or <i>b</i>, will be evaluated twice when this "function" is called. So, if the expression <code>MIN(++firstnum,secondnum)</code> is evaluated, then <i>firstnum</i> may be incremented <b>twice</b>, not once as would be expected.</p>
<p>A safer way to achieve the same would be to use a typeof-construct:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="co2">#define max(a,b) \</span>
       <span class="br0">(</span><span class="br0">{</span> typeof <span class="br0">(</span>a<span class="br0">)</span> _a = <span class="br0">(</span>a<span class="br0">)</span>; \
           typeof <span class="br0">(</span>b<span class="br0">)</span> _b = <span class="br0">(</span>b<span class="br0">)</span>; \
         _a &gt; _b ? _a : _b; <span class="br0">}</span><span class="br0">)</span>
</pre></div>
<p>This will cause the arguments to be evaluated only once, and it will not be type-specific anymore. This construct is not legal <a href="/wiki/ANSI_C" title="ANSI C">ANSI C</a>; both the <code>typeof</code> keyword, and the construct of placing a compound statement within parentheses, are non-standard extensions implemented in the popular <a href="/wiki/GNU_Compiler_Collection" title="GNU Compiler Collection">GNU C compiler (GCC)</a>. If you are using GCC, the same general problem can also be solved using a static <a href="/wiki/Inline_function" title="Inline function">inline function</a>, which is as efficient as a <code>#define</code>. The inline function allows the compiler to check/coerce parameter types -- in this particular example this appears to be a disadvantage, since the 'max' function as shown works equally well with different parameter types, but in general having the type coercion is often an advantage.</p>
<p>Within ANSI C, there is no reliable general solution to the issue of side-effects in macro arguments.</p>
<p><a name="Token_concatenation" id="Token_concatenation"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=C_preprocessor&amp;action=edit&amp;section=8" title="Edit section: Token concatenation">edit</a>]</span> <span class="mw-headline">Token concatenation</span></h3>
<p>Token concatenation, also called token pasting, is one of the most subtle — and easy to abuse — features of the C macro preprocessor. Two arguments can be 'glued' together using <code>##</code> preprocessor operator; this allows two tokens to be concatenated in the preprocessed code. This can be used to construct elaborate macros which act like a crude version of <a href="/wiki/C%2B%2B" title="C++">C++</a> <a href="/wiki/Template_(programming)" title="Template (programming)">templates</a>.</p>
<p>For instance:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="co2">#define MYCASE(item,id) \</span>
<span class="kw1">case</span> id: \
  item<span class="co2">##_##id = id;\</span>
<span class="kw2">break</span>
 
<span class="kw1">switch</span><span class="br0">(</span>x<span class="br0">)</span> <span class="br0">{</span>
    MYCASE<span class="br0">(</span>widget,<span class="nu0">23</span><span class="br0">)</span>;
<span class="br0">}</span>
</pre></div>
<p>The line <code>MYCASE(widget,23);</code> gets expanded here into</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
<span class="kw1">case</span> <span class="nu0">23</span>: 
  widget_23 = <span class="nu0">23</span>; 
<span class="kw2">break</span>;
</pre></div>
<p>(The semicolon following the invocation of <code>MYCASE</code> becomes the semicolon that completes the break statement.)</p>
<p><a name="Semicolons" id="Semicolons"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=C_preprocessor&amp;action=edit&amp;section=9" title="Edit section: Semicolons">edit</a>]</span> <span class="mw-headline">Semicolons</span></h3>
<p>One stylistic note about the above macro is that the semicolon on the last line of the macro definition is omitted so that the macro looks 'natural' when written. It could be included in the macro definition, but then there would be lines in the code without semicolons at the end which would throw off the casual reader. Worse, the user could be tempted to include semicolons anyway; in most cases this would be harmless (an extra semicolon denotes an empty statement) but it would cause errors in control flow blocks:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="co2">#define PRETTY_PRINT(msg) \</span>
   <span class="kw3">printf</span> <span class="br0">(</span><span class="st0">"Message: '%s'<span class="es0">\n</span>"</span>, msg<span class="br0">)</span>;
 
  <span class="kw1">if</span> <span class="br0">(</span>n &lt; <span class="nu0">10</span><span class="br0">)</span>
    PRETTY_PRINT<span class="br0">(</span><span class="st0">"n is less than 10"</span><span class="br0">)</span>;
  <span class="kw1">else</span>
    PRETTY_PRINT<span class="br0">(</span><span class="st0">"n is at least 10"</span><span class="br0">)</span>;
</pre></div>
<p>This expands to give two statements – the intended <code>printf</code> and an empty statement – in each branch of the <a href="/wiki/Conditional_statement" title="Conditional statement" class="mw-redirect">if/else construct</a>, which will cause the compiler to give an error message similar to:</p>
<blockquote class="templatequote">
<div>
<p><code>error: expected expression before ‘else’</code></p>
</div>
<div class="templatequotecite">—<cite><a href="/wiki/GNU_Compiler_Collection" title="GNU Compiler Collection">gcc</a> 4.1.1</cite></div>
</blockquote>
<p><a name="Multiple_statements" id="Multiple_statements"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=C_preprocessor&amp;action=edit&amp;section=10" title="Edit section: Multiple statements">edit</a>]</span> <span class="mw-headline">Multiple statements</span></h4>
<p>Inconsistent use of multiple-statement macros can result in unintended behaviour. The code</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="co2">#define CMDS \</span>
   a = b; \
   c = d
 
  <span class="kw1">if</span> <span class="br0">(</span>var == <span class="nu0">13</span><span class="br0">)</span>
    CMDS;
  <span class="kw1">else</span>
    <span class="kw1">return</span>;
</pre></div>
<p>will expand to</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
  <span class="kw1">if</span> <span class="br0">(</span>var == <span class="nu0">13</span><span class="br0">)</span>
    a = b;
  c = d;
  <span class="kw1">else</span>
    <span class="kw1">return</span>;
</pre></div>
<p>which is a syntax error (the <code>else</code> is lacking a matching <code>if</code>).</p>
<p>The macro can be made safe by replacing the internal semicolon with the comma operator, since two operands connected by a comma form a single statement. The comma operator is the <a href="/wiki/Operators_in_C_and_C%2B%2B" title="Operators in C and C++">lowest precedence operator</a>. In particular, its precedence is lower than the assignment operator's, so that a = b, c = d does not parse as a = (b,c) = d. Therefore,</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="co2">#define CMDS a = b, c = d</span>
 
  <span class="kw1">if</span> <span class="br0">(</span>var == <span class="nu0">13</span><span class="br0">)</span>
    CMDS;
  <span class="kw1">else</span>
    <span class="kw1">return</span>;
</pre></div>
<p>will expand to</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
  <span class="kw1">if</span> <span class="br0">(</span>var == <span class="nu0">13</span><span class="br0">)</span>
    a = b, c = d;
  <span class="kw1">else</span>
    <span class="kw1">return</span>;
</pre></div>
<p>The problem can also be fixed without using the comma operator:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="co2">#define CMDS \</span>
  <span class="kw1">do</span> <span class="br0">{</span> \
    a = b; \
    c = d; \
  <span class="br0">}</span> <span class="kw1">while</span> <span class="br0">(</span><span class="nu0">0</span><span class="br0">)</span>
</pre></div>
<p>expands to</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
  <span class="kw1">if</span> <span class="br0">(</span>var == <span class="nu0">13</span><span class="br0">)</span>
    <span class="kw1">do</span> <span class="br0">{</span>
      a = b;
      c = d;
    <span class="br0">}</span> <span class="kw1">while</span> <span class="br0">(</span><span class="nu0">0</span><span class="br0">)</span>;
  <span class="kw1">else</span>
    <span class="kw1">return</span>;
</pre></div>
<p>The <code>do</code> and <code>while (0)</code> are needed to allow the macro invocation to be followed by a semicolon; if they were omitted the resulting expansion would be</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
  <span class="kw1">if</span> <span class="br0">(</span>var == <span class="nu0">13</span><span class="br0">)</span> <span class="br0">{</span>
      a = b;
      c = d;
  <span class="br0">}</span>
  ;
  <span class="kw1">else</span>
    <span class="kw1">return</span>;
</pre></div>
<p>The semicolon in the macro's invocation above becomes an empty statement, causing a syntax error at the <code>else</code> by preventing it matching up with the preceding <code>if</code>.</p>
<p><a name="Quoting_macro_arguments" id="Quoting_macro_arguments"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=C_preprocessor&amp;action=edit&amp;section=11" title="Edit section: Quoting macro arguments">edit</a>]</span> <span class="mw-headline">Quoting macro arguments</span></h3>
<p>Although macro expansion does not occur within a quoted string, the text of the macro arguments can be quoted and treated as a string literal by using the "<code>#</code>" directive(also known as the "Stringizing Operator"). For example, with the macro</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="co2">#define QUOTEME(x) #x</span>
</pre></div>
<p>the code</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw3">printf</span><span class="br0">(</span><span class="st0">"%s<span class="es0">\n</span>"</span>, QUOTEME<span class="br0">(</span><span class="nu0">1</span><span class="nu0">+2</span><span class="br0">)</span><span class="br0">)</span>;
</pre></div>
<p>will expand to</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw3">printf</span><span class="br0">(</span><span class="st0">"%s<span class="es0">\n</span>"</span>, <span class="st0">"1+2"</span><span class="br0">)</span>;
</pre></div>
<p>This capability can be used with automatic <a href="/wiki/C_syntax#String_literal_concatenation" title="C syntax">string literal concatenation</a> to make debugging macros. For example, the macro in</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="co2">#define dumpme(x, fmt) printf("%s:%u: %s=" fmt, __FILE__, __LINE__, #x, x)</span>
 
<span class="kw4">int</span> some_function<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
    <span class="kw4">int</span> foo;
    <span class="coMULTI">/* [a lot of complicated code goes here] */</span>
    dumpme<span class="br0">(</span>foo, <span class="st0">"%d"</span><span class="br0">)</span>;
    <span class="coMULTI">/* [more complicated code goes here] */</span>
<span class="br0">}</span>
</pre></div>
<p>would print the name of an expression and its value, along with the file name and the line number.</p>
<p><a name="Indirectly_quoting_macro_arguments" id="Indirectly_quoting_macro_arguments"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=C_preprocessor&amp;action=edit&amp;section=12" title="Edit section: Indirectly quoting macro arguments">edit</a>]</span> <span class="mw-headline">Indirectly quoting macro arguments</span></h4>
<p>The "<code>#</code>" directive can also be used indirectly. For example, with the macro:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="co2">#define FOO bar</span>
<span class="co2">#define _QUOTEME(x) #x</span>
<span class="co2">#define QUOTEME(x) _QUOTEME(x)</span>
</pre></div>
<p>the code</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw3">printf</span><span class="br0">(</span><span class="st0">"FOO=%s<span class="es0">\n</span>"</span>, QUOTEME<span class="br0">(</span>FOO<span class="br0">)</span><span class="br0">)</span>;
</pre></div>
<p>will expand to</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw3">printf</span><span class="br0">(</span><span class="st0">"FOO=%s<span class="es0">\n</span>"</span>, <span class="st0">"bar"</span><span class="br0">)</span>;
</pre></div>
<p>One common use for this technique is to convert the __LINE__ macro to a string. Eg:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
QUOTEME<span class="br0">(</span>__LINE__<span class="br0">)</span>;
</pre></div>
<p>is converted to:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="st0">"34"</span>
</pre></div>
<p>if __LINE__ happens to have the value 34 when QUOTEME() is called. On the other hand _QUOTEME(__LINE__) will expand to "__LINE__"</p>
<p><a name="Variadic_macros" id="Variadic_macros"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=C_preprocessor&amp;action=edit&amp;section=13" title="Edit section: Variadic macros">edit</a>]</span> <span class="mw-headline">Variadic macros</span></h3>
<div class="rellink noprint relarticle mainarticle">Main article: <a href="/wiki/Variadic_macro" title="Variadic macro">Variadic macro</a></div>
<p>Macros that can take a varying number of arguments (<a href="/wiki/Variadic_macro" title="Variadic macro">variadic macros</a>) are not allowed in C89, but were introduced by a number of compilers and standardised in <a href="/wiki/C99" title="C99">C99</a>. Variadic macros are particularly useful when writing wrappers to variable parameter number functions, such as <code><a href="/wiki/Printf" title="Printf">printf</a></code>, for example when logging warnings and errors.</p>
<p><a name="X-Macros" id="X-Macros"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=C_preprocessor&amp;action=edit&amp;section=14" title="Edit section: X-Macros">edit</a>]</span> <span class="mw-headline">X-Macros</span></h2>
<p>One little-known usage-pattern of the C preprocessor is known as "X-Macros" or "Supermacros".<sup id="cite_ref-X_macros_0-0" class="reference"><a href="#cite_note-X_macros-0" title=""><span>[</span>1<span>]</span></a></sup><sup id="cite_ref-1" class="reference"><a href="#cite_note-1" title=""><span>[</span>2<span>]</span></a></sup><sup id="cite_ref-2" class="reference"><a href="#cite_note-2" title=""><span>[</span>3<span>]</span></a></sup> An X-Macro is an <a href="/wiki/Header_file" title="Header file">#include file</a> (commonly using a ".def" extension instead of the traditional ".h") that contains a list of similar macro calls (which can be referred to as "component macros"). The include file is then referenced repeatedly in the following pattern:</p>
<p>(Given that the include file is "xmacro.def" and it contains a list of component macros of the style "foo(x, y, z)")</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="co2">#define foo(x, y, z) doSomethingWith(x, y, z);</span>
<span class="co2">#include "xmacro.def"</span>
<span class="co2">#undef foo</span>
 
<span class="co2">#define foo(x, y, z) doSomethingElseWith(x, y, z);</span>
<span class="co2">#include "xmacro.def"</span>
<span class="co2">#undef foo</span>
 
<span class="br0">(</span>etc...<span class="br0">)</span>
</pre></div>
<p>The most common usage of X-Macros is to establish a list of C objects and then automatically generate code for each of them. Some implementations also perform any #undefs they need inside the X-Macro, as opposed to expecting the caller to undef them.</p>
<p>Common sets of objects are a set of global configuration settings, a set of members of a structure, a list of possible XML tags for converting an XML file to a quickly traversable tree or the body of an enum declaration, although other lists are possible.</p>
<p>Once the X-Macro has been processed to create the list of objects, the component macros can be redefined to generate, for instance, accessor and/or mutator functions. Structure serializing and deserializing are also commonly done.</p>
<p>Here is an example of an X-Macro that establishes a struct and automatically creates serialize/deserialize functions:</p>
<p>(Note: for simplicity, we don't account for endianness or buffer overflows)</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
File:  object.<span class="me1">def</span>
 
struct_member<span class="br0">(</span> x, <span class="kw4">int</span> <span class="br0">)</span>;
struct_member<span class="br0">(</span> y, <span class="kw4">int</span> <span class="br0">)</span>;
struct_member<span class="br0">(</span> z, <span class="kw4">int</span> <span class="br0">)</span>;
struct_member<span class="br0">(</span> radius, <span class="kw4">double</span> <span class="br0">)</span>;
 
 
File: star_table.<span class="me1">c</span>
 
<span class="kw4">typedef</span> <span class="kw4">struct</span>
<span class="br0">{</span>
<span class="co2">#define struct_member( name, type ) type name;</span>
<span class="co2">#include "object.def"</span>
<span class="co2">#undef struct_member</span>
<span class="br0">}</span> star;
 
<span class="kw4">void</span> serialize_star<span class="br0">(</span> <span class="kw4">const</span> star *_star, <span class="kw4">unsigned</span> <span class="kw4">char</span> *buffer <span class="br0">)</span>
 
<span class="br0">{</span>
<span class="coMULTI">/* Copy each member's data into buffer and move the pointer. */</span>
<span class="co2">#define struct_member( name, type ) \</span>
    memcpy<span class="br0">(</span>buffer, <span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">char</span> *<span class="br0">)</span> &amp;<span class="br0">(</span>_star-&gt;name<span class="br0">)</span>, <span class="kw4">sizeof</span><span class="br0">(</span>_star-&gt;name<span class="br0">)</span> <span class="br0">)</span>; \
    buffer += <span class="kw4">sizeof</span><span class="br0">(</span>_star-&gt;name<span class="br0">)</span>;
<span class="co2">#include "object.def"</span>
<span class="co2">#undef struct_member</span>
<span class="br0">}</span>
 
<span class="kw4">void</span> deserialize_star<span class="br0">(</span> star *_star, <span class="kw4">const</span> <span class="kw4">unsigned</span> <span class="kw4">char</span> *buffer <span class="br0">)</span>
 
<span class="br0">{</span>
<span class="coMULTI">/* Copy each member's data out of buffer and move the pointer. */</span>
<span class="co2">#define struct_member( name, type ) \</span>
    memcpy<span class="br0">(</span><span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">char</span> *<span class="br0">)</span> &amp;<span class="br0">(</span>_star-&gt;name<span class="br0">)</span>, buffer, <span class="kw4">sizeof</span><span class="br0">(</span>_star-&gt;name<span class="br0">)</span> <span class="br0">)</span>; \
    buffer += <span class="kw4">sizeof</span><span class="br0">(</span>_star-&gt;name<span class="br0">)</span>;
<span class="co2">#include "object.def"</span>
<span class="co2">#undef struct_member</span>
<span class="br0">}</span>
</pre></div>
<p>Often, handlers for individual data types are created and accessed using the token concatenation ("##") and quoting ("#") operators. For instance, the following might be added to the above code:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">void</span> print_int<span class="br0">(</span> <span class="kw4">int</span> val <span class="br0">)</span>
<span class="br0">{</span>
   <span class="kw3">printf</span><span class="br0">(</span> <span class="st0">"%d"</span>, val <span class="br0">)</span>
<span class="br0">}</span>
 
<span class="kw4">void</span> print_double<span class="br0">(</span> <span class="kw4">double</span> val <span class="br0">)</span>
<span class="br0">{</span>
   <span class="kw3">printf</span><span class="br0">(</span> <span class="st0">"%g"</span>, val <span class="br0">)</span>
<span class="br0">}</span>
 
<span class="kw4">void</span> print_star<span class="br0">(</span> <span class="kw4">const</span> star *_star <span class="br0">)</span>
 
<span class="br0">{</span>
<span class="coMULTI">/* print_##type will be replaced with print_int or print_double */</span>
<span class="co2">#define struct_member( name, type ) printf( "%s: ", #name ); print_##type( _star-&gt;name ); printf("\n");</span>
<span class="co2">#include "object.def"</span>
<span class="co2">#undef struct_member</span>
<span class="br0">}</span>
</pre></div>
<p>The creation of a separate header file can be avoided by creating a single macro containing what would be the contents of the file. For instance, the above defined "object.def" could be replaced with this macro:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="co2">#define object_def \</span>
struct_member<span class="br0">(</span> x, <span class="kw4">int</span> <span class="br0">)</span>; \
struct_member<span class="br0">(</span> y, <span class="kw4">int</span> <span class="br0">)</span>; \
struct_member<span class="br0">(</span> z, <span class="kw4">int</span> <span class="br0">)</span>; \
struct_member<span class="br0">(</span> radius, <span class="kw4">double</span> <span class="br0">)</span>;
</pre></div>
<p>and then all calls to '#include "object.def"' could be replaced with a simple object_def statement. The above function would become:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">void</span> print_star<span class="br0">(</span> <span class="kw4">const</span> star *_star <span class="br0">)</span>
 
<span class="br0">{</span>
<span class="coMULTI">/* print_##type will be replaced with print_int or print_double */</span>
<span class="co2">#define struct_member( name, type ) printf( "%s: ", #name ); print_##type( _star-&gt;name ); printf("\n");</span>
object_def
<span class="co2">#undef struct_member</span>
<span class="br0">}</span>
</pre></div>
<p>A variant which avoids needing to know the names of any expanded sub-macros is to accept the operators as an argument to the list macro:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="co2">#define object_def(_) \</span>
_<span class="br0">(</span> x, <span class="kw4">int</span> <span class="br0">)</span> \
_<span class="br0">(</span> y, <span class="kw4">int</span> <span class="br0">)</span> \
_<span class="br0">(</span> z, <span class="kw4">int</span> <span class="br0">)</span> \
_<span class="br0">(</span> radius, <span class="kw4">double</span> <span class="br0">)</span>
 
<span class="kw4">void</span> print_star<span class="br0">(</span> <span class="kw4">const</span> star *_star <span class="br0">)</span>
<span class="br0">{</span>
<span class="coMULTI">/* print_##type will be replaced with print_int or print_double */</span>
<span class="co2">#define struct_member( name, type ) printf( "%s: ", #name ); print_##type( _star-&gt;name ); printf("\n")</span>
object_def<span class="br0">(</span>struct_member<span class="br0">)</span>
<span class="co2">#undef struct_member</span>
<span class="br0">}</span>
</pre></div>
<p>This approach can be dangerous in that the entire macro set is always interpreted as if it was on a single source line, which could encounter compiler limits with complex component macros and/or long member lists.</p>
<p><a name="User-defined_compilation_errors_and_warnings" id="User-defined_compilation_errors_and_warnings"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=C_preprocessor&amp;action=edit&amp;section=15" title="Edit section: User-defined compilation errors and warnings">edit</a>]</span> <span class="mw-headline">User-defined compilation errors and warnings</span></h2>
<p>The <code>#error</code> directive inserts an error message into the compiler output.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="co2">#error "Gaah!"</span>
</pre></div>
<p>This prints "Gaah!" in the compiler output and halts the computation at that point. This is extremely useful for determining whether a given line is being compiled or not. It is also useful if you have a heavily parameterized body of code and want to make sure a particular <code>#define</code> has been introduced from the makefile, e.g.:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="co2">#ifdef WINDOWS</span>
    ... <span class="coMULTI">/* Windows specific code */</span>
<span class="co2">#elif defined(UNIX)</span>
    ... <span class="coMULTI">/* Unix specific code */</span>
<span class="co2">#else</span>
    <span class="co2">#error "What's your operating system?"</span>
<span class="co2">#endif</span>
</pre></div>
<p>Some implementations provide a non-standard <code>#warning</code> directive to print out a warning message in the compiler output, but <i>not</i> stop the compilation process. A typical use is to warn about the usage of some old code, which is now unfavored and only included for compatibility reasons, e.g.:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="co2">#warning "Do not use ABC, which is deprecated. Use XYZ instead."</span>
</pre></div>
<p>Although the text following the <code>#error</code> or <code>#warning</code> directive does not have to be quoted, it is good practice to do so. Otherwise, there may be problems with apostrophes and other characters that the preprocessor tries to interpret. Microsoft C uses <code>#pragma message ( "text" )</code> instead of <code>#warning</code>.</p>
<p><a name="Compiler-specific_preprocessor_features" id="Compiler-specific_preprocessor_features"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=C_preprocessor&amp;action=edit&amp;section=16" title="Edit section: Compiler-specific preprocessor features">edit</a>]</span> <span class="mw-headline">Compiler-specific preprocessor features</span></h2>
<p>The <code>#pragma</code> directive is a <a href="/wiki/Compiler_directive" title="Compiler directive" class="mw-redirect">compiler specific directive</a> which compiler vendors may use for their own purposes. For instance, a <code>#pragma</code> is often used to allow suppression of specific error messages, manage heap and stack debugging, etc.</p>
<p>C99 introduced a few standard <code>#pragma</code> directives, taking the form <code>#pragma STDC …</code>, which are used to control the floating-point implementation.</p>
<p><a name="Standard_positioning_macros" id="Standard_positioning_macros"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=C_preprocessor&amp;action=edit&amp;section=17" title="Edit section: Standard positioning macros">edit</a>]</span> <span class="mw-headline">Standard positioning macros</span></h2>
<p>Certain symbols are predefined in ANSI C. Two useful ones are <code>__FILE__</code> and <code>__LINE__</code>, which expand into the current file and line number. For instance:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="co1">// debugging macros so we can pin down message provenance at a glance</span>
<span class="co2">#define WHERESTR "[file %s, line %d] "</span>
<span class="co2">#define WHEREARG __FILE__,__LINE__</span>
 
<span class="kw3">printf</span><span class="br0">(</span>WHERESTR <span class="st0">": hey, x=%d<span class="es0">\n</span>"</span>, WHEREARG, x<span class="br0">)</span>;
</pre></div>
<p>This prints the value of <code>x</code>, preceded by the file and line number, allowing quick access to which line the message was produced on. Note that the <code>WHERESTR</code> argument is concatenated with the string following it.</p>
<p><a name="Compiler-specific_predefined_macros" id="Compiler-specific_predefined_macros"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=C_preprocessor&amp;action=edit&amp;section=18" title="Edit section: Compiler-specific predefined macros">edit</a>]</span> <span class="mw-headline">Compiler-specific predefined macros</span></h2>
<p>Compiler-specific predefined macros are usually listed in the compiler documentation, although this is often incomplete. The <a href="http://predef.sourceforge.net/" class="external text" title="http://predef.sourceforge.net/" rel="nofollow">Pre-defined C/C++ Compiler Macros project</a> lists "various pre-defined compiler macros that can be used to identify standards, compilers, operating systems, hardware architectures, and even basic run-time libraries at compile-time".</p>
<p>Some compilers can be made to dump at least some of their useful predefined macros, for example:</p>
<dl>
<dt><a href="/wiki/GNU_Compiler_Collection" title="GNU Compiler Collection">GNU C Compiler</a></dt>
<dd><code>gcc -dM -E - &lt; <a href="/wiki//dev/null" title="/dev/null">/dev/null</a></code></dd>
<dt><a href="/wiki/HP-UX" title="HP-UX">HP-UX</a> ansi C compiler</dt>
<dd><code>cc -v fred.c</code> (where <code>fred.c</code> is a simple test file)</dd>
<dt><a href="/wiki/SCO_OpenServer" title="SCO OpenServer">SCO OpenServer</a> C compiler</dt>
<dd><code>cc -## fred.c</code> (where <code>fred.c</code> is a simple test file)</dd>
<dt><a href="/wiki/Sun_Studio_(software)" title="Sun Studio (software)">Sun Studio</a> C/C++ compiler</dt>
<dd><code>cc -## fred.c</code> (where <code>fred.c</code> is a simple test file)</dd>
</dl>
<p><a name="As_a_general-purpose_preprocessor" id="As_a_general-purpose_preprocessor"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=C_preprocessor&amp;action=edit&amp;section=19" title="Edit section: As a general-purpose preprocessor">edit</a>]</span> <span class="mw-headline">As a general-purpose preprocessor</span></h2>
<p>Since the C preprocessor can be invoked independently to process files other than those containing to-be-compiled source code, it can also be used as a "general purpose preprocessor" for other types of text processing. One particularly notable example is the now-deprecated <a href="/wiki/Imake" title="Imake">imake</a> system; more examples are listed at <a href="/wiki/Preprocessor#General_purpose_preprocessor" title="Preprocessor">General purpose preprocessor</a>.</p>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=C_preprocessor&amp;action=edit&amp;section=20" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<ul>
<li><a href="/wiki/C_syntax" title="C syntax">C syntax</a></li>
<li><a href="/wiki/Make_(software)" title="Make (software)">Make</a></li>
<li><a href="/wiki/Preprocessor" title="Preprocessor">Preprocessor</a></li>
</ul>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=C_preprocessor&amp;action=edit&amp;section=21" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<ol class="references">
<li id="cite_note-X_macros-0"><b><a href="#cite_ref-X_macros_0-0" title="">^</a></b> <a href="http://liw.iki.fi/liw/texts/cpp-trick.html" class="external text" title="http://liw.iki.fi/liw/texts/cpp-trick.html" rel="nofollow">C Preprocessor Trick For Implementing Similar Data Types</a></li>
<li id="cite_note-1"><b><a href="#cite_ref-1" title="">^</a></b> <cite style="font-style:normal">Meyers, Randy (May 2001) <a href="http://www.ddj.com/cpp/184401387" class="external text" title="http://www.ddj.com/cpp/184401387" rel="nofollow">"The New C: X Macros"</a> in <i>Dr. Dobb's Journal</i>.  Retrieved on <span class="mw-formatted-date" title="2008-05-01"><a href="/wiki/May_1" title="May 1">1 May</a> <a href="/wiki/2008" title="2008">2008</a></span>.</cite></li>
<li id="cite_note-2"><b><a href="#cite_ref-2" title="">^</a></b> <cite style="font-style:normal">Beal, Stephan (August 2004) <a href="http://wanderinghorse.net/computing/papers/#supermacros" class="external text" title="http://wanderinghorse.net/computing/papers/#supermacros" rel="nofollow">"Supermacros"</a> .  Retrieved on <span class="mw-formatted-date" title="2008-10-27"><a href="/wiki/October_27" title="October 27">27 October</a> <a href="/wiki/2008" title="2008">2008</a></span>.</cite></li>
</ol>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=C_preprocessor&amp;action=edit&amp;section=22" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<table class="metadata plainlinks mbox-small" style="border:1px solid #aaa; background-color:#f9f9f9;">
<tr>
<td class="mbox-image"><a href="http://en.wikibooks.org/wiki/Special:Search/C_preprocessor" title="b:Special:Search/C preprocessor"><img alt="Sister project" src="http://upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/40px-Wikibooks-logo-en-noslogan.svg.png" width="40" height="40" border="0" /></a></td>
<td class="mbox-text" style=""><a href="/wiki/Wikibooks" title="Wikibooks">Wikibooks</a> has a book on the topic of
<div style="margin-left:10px;"><i><b><a href="http://en.wikibooks.org/wiki/C_Programming/Preprocessor" class="extiw" title="wikibooks:C Programming/Preprocessor">C Programming/Preprocessor</a></b></i></div>
</td>
</tr>
</table>
<ul>
<li><a href="http://www.open-std.org/JTC1/SC22/WG14/www/standards" class="external text" title="http://www.open-std.org/JTC1/SC22/WG14/www/standards" rel="nofollow">ISO/IEC 9899</a>. The official C:1999 standard, along with defect reports and a rationale. As of 2005 the latest version is <a href="http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf" class="external text" title="http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf" rel="nofollow">ISO/IEC 9899:TC2</a>.</li>
<li><a href="http://gcc.gnu.org/onlinedocs/cpp/index.html" class="external text" title="http://gcc.gnu.org/onlinedocs/cpp/index.html" rel="nofollow">GNU CPP online manual</a></li>
<li><a href="http://msdn.microsoft.com/en-us/library/y4skk93w(VS.80).aspx" class="external text" title="http://msdn.microsoft.com/en-us/library/y4skk93w(VS.80).aspx" rel="nofollow">Visual Studio .NET preprocessor reference</a></li>
<li><a href="http://predef.sourceforge.net/" class="external text" title="http://predef.sourceforge.net/" rel="nofollow">Collection of pre-defined macros</a></li>
</ul>
<table class="navbox" cellspacing="0" style=";">
<tr>
<td style="padding:2px;">
<table cellspacing="0" class="nowraplinks collapsible autocollapse" style="width:100%;background:transparent;color:inherit;;">
<tr>
<th style=";" colspan="2" class="navbox-title">
<div style="float:left; width:6em;text-align:left;">
<div class="noprint plainlinksneverexpand navbar" style="background:none; padding:0; font-weight:normal;;;border:none;; font-size:xx-small;"><a href="/wiki/Template:CProLang" title="Template:CProLang"><span title="View this template" style=";;border:none;">v</span></a>&#160;<span style="font-size:80%;">•</span>&#160;<a href="/wiki/Template_talk:CProLang" title="Template talk:CProLang"><span title="Discussion about this template" style=";;border:none;">d</span></a>&#160;<span style="font-size:80%;">•</span>&#160;<a href="http://en.wikipedia.org/w/index.php?title=Template:CProLang&amp;action=edit" class="external text" title="http://en.wikipedia.org/w/index.php?title=Template:CProLang&amp;action=edit" rel="nofollow"><span title="Edit this template" style=";;border:none;;">e</span></a></div>
</div>
<span style="font-size:110%;"><a href="/wiki/C_(programming_language)" title="C (programming language)">C programming language</a></span></th>
</tr>
<tr style="height:2px;">
<td></td>
</tr>
<tr>
<td class="navbox-group" style=";;">Libraries</td>
<td style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<div style="padding:0em 0.25em"><a href="/wiki/C_standard_library" title="C standard library">C standard library</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/GNU_C_Library" title="GNU C Library">glibc</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Dietlibc" title="Dietlibc">Dietlibc</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/UClibc" title="UClibc">uClibc</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Newlib" title="Newlib">Newlib</a><span style="font-weight:bold;">&#160;·</span> <i><a href="/wiki/Category:C_libraries" title="Category:C libraries">more</a></i></div>
</td>
</tr>
<tr style="height:2px">
<td></td>
</tr>
<tr>
<td class="navbox-group" style=";;">Features</td>
<td style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<div style="padding:0em 0.25em"><a href="/wiki/C_string" title="C string">String</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/C_syntax" title="C syntax">Syntax</a><span style="font-weight:bold;">&#160;·</span> <strong class="selflink">Preprocessor</strong><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/C_variable_types_and_declarations" title="C variable types and declarations">Variable types and declarations</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/List_of_C_functions" title="List of C functions">Functions</a></div>
</td>
</tr>
<tr style="height:2px">
<td></td>
</tr>
<tr>
<td class="navbox-group" style=";;">Descendants</td>
<td style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<div style="padding:0em 0.25em"><a href="/wiki/C%2B%2B" title="C++">C++</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Objective-C" title="Objective-C">Objective-C</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/D_(programming_language)" title="D (programming language)">D</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/C_Sharp_(programming_language)" title="C Sharp (programming language)">C#</a></div>
</td>
</tr>
<tr style="height:2px">
<td></td>
</tr>
<tr>
<td class="navbox-group" style=";;">C and Other Languages</td>
<td style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<div style="padding:0em 0.25em">C and C++ (<a href="/wiki/Compatibility_of_C_and_C%2B%2B" title="Compatibility of C and C++">Compatibility</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Operators_in_C_and_C%2B%2B" title="Operators in C and C++">Operators</a>)<span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Comparison_of_Pascal_and_C" title="Comparison of Pascal and C">Comparison of Pascal and C</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/C_to_Java_byte-code_compiler" title="C to Java byte-code compiler" class="mw-redirect">C to Java byte-code compiler</a></div>
</td>
</tr>
<tr style="height:2px;">
<td></td>
</tr>
<tr>
<td class="navbox-abovebelow" style=";" colspan="2"><b><a href="/wiki/Category:C_programming_language" title="Category:C programming language">Category</a></b></td>
</tr>
</table>
</td>
</tr>
</table>


<!-- 
NewPP limit report
Preprocessor node count: 990/1000000
Post-expand include size: 16683/2048000 bytes
Template argument size: 6722/2048000 bytes
Expensive parser function count: 0/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:231835-0!1!0!default!!en!2 and timestamp 20090407122603 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/C_preprocessor">http://en.wikipedia.org/wiki/C_preprocessor</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:C_programming_language" title="Category:C programming language">C programming language</a></span> | <span dir='ltr'><a href="/wiki/Category:Transformation_languages" title="Category:Transformation languages">Transformation languages</a></span> | <span dir='ltr'><a href="/wiki/Category:Macro_programming_languages" title="Category:Macro programming languages">Macro programming languages</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/C_preprocessor" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:C_preprocessor" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=C_preprocessor&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=C_preprocessor&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=C_preprocessor" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/C_preprocessor" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/C_preprocessor" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=C_preprocessor&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=C_preprocessor&amp;oldid=282326362" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=C_preprocessor&amp;id=282326362">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-cs"><a href="http://cs.wikipedia.org/wiki/Preprocesor_jazyka_C">Česky</a></li>
				<li class="interwiki-es"><a href="http://es.wikipedia.org/wiki/Preprocesador_de_C">Español</a></li>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/C-Pr%C3%A4prozessor">Deutsch</a></li>
				<li class="interwiki-hu"><a href="http://hu.wikipedia.org/wiki/C_el%C5%91ford%C3%ADt%C3%B3">Magyar</a></li>
				<li class="interwiki-pl"><a href="http://pl.wikipedia.org/wiki/CPP">Polski</a></li>
				<li class="interwiki-fi"><a href="http://fi.wikipedia.org/wiki/Cpp">Suomi</a></li>
				<li class="interwiki-tr"><a href="http://tr.wikipedia.org/wiki/C_%C3%B6ni%C5%9Flemcisi">Türkçe</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 7 April 2009, at 12:25 (UTC).</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv189 in 0.057 secs. --></body></html>
