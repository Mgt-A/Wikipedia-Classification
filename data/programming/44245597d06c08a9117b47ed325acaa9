<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Eiffel (programming language),Ecma International Standards,ALGOL,ANSI escape code,Abstract class,Abstract data type,Ada (programming language),Apple Media Tool,Assertion (computing),Bertrand Meyer,BlueJ" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Eiffel (programming language) - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Eiffel_(programming_language)";
		var wgTitle = "Eiffel (programming language)";
		var wgAction = "view";
		var wgArticleId = "9838";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 273327528;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
<style type="text/css">/*<![CDATA[*/
.source-eiffel {line-height: normal;}
.source-eiffel li, .source-eiffel pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for eiffel
 * CSS class: source-eiffel, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-eiffel .de1, .source-eiffel .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-eiffel  {}
.source-eiffel .head {}
.source-eiffel .foot {}
.source-eiffel .imp {font-weight: bold; color: red;}
.source-eiffel .ln-xtra {color: #cc0; background-color: #ffc;}
.source-eiffel li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-eiffel li.li2 {font-weight: bold;}
.source-eiffel .kw1 {color: #0600FF; font-weight: bold;}
.source-eiffel .kw2 {color: #0600FF; font-weight: bold;}
.source-eiffel .kw3 {color: #800080;}
.source-eiffel .kw4 {color: #800000}
.source-eiffel .kw5 {color: #603000;}
.source-eiffel .co1 {color: #008000; font-style: italic;}
.source-eiffel .coMULTI {}
.source-eiffel .es0 {color: #005070; font-weight: bold;}
.source-eiffel .br0 {color: #600000;}
.source-eiffel .st0 {color: #0080A0;}
.source-eiffel .nu0 {color: #FF0000;}
.source-eiffel .me1 {color: #000060;}
.source-eiffel .me2 {color: #000050;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style>		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Eiffel_programming_language skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Eiffel (programming language)</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<table class="infobox vevent" cellspacing="5" style="width: 22em; text-align: left; font-size: 88%; line-height: 1.5em;">
<caption class="summary" style="font-size: 125%; font-weight: bold;">Eiffel</caption>
<tr>
<td colspan="2" class="" style="text-align:center;"><a href="/wiki/File:Eiffel_logo.jpg" class="image" title="File:Eiffel logo.jpg"><img alt="File:Eiffel logo.jpg" src="http://upload.wikimedia.org/wikipedia/en/4/46/Eiffel_logo.jpg" width="240" height="240" border="0" /></a></td>
</tr>
<tr>
<th style=""><a href="/wiki/Programming_paradigm" title="Programming paradigm">Paradigm</a></th>
<td class="" style=""><a href="/wiki/Object-oriented_programming" title="Object-oriented programming">object-oriented</a></td>
</tr>
<tr>
<th style="">Appeared in</th>
<td class="" style="">1986</td>
</tr>
<tr>
<th style="">Designed by</th>
<td class="organiser" style=""><a href="/wiki/Bertrand_Meyer" title="Bertrand Meyer">Bertrand Meyer</a></td>
</tr>
<tr>
<th style=""><a href="/wiki/Software_developer" title="Software developer">Developer</a></th>
<td class="" style=""><a href="/wiki/Bertrand_Meyer" title="Bertrand Meyer">Bertrand Meyer</a> &amp; <a href="/wiki/Eiffel_Software" title="Eiffel Software">Eiffel Software</a></td>
</tr>
<tr>
<th style=""><a href="/wiki/Type_system" title="Type system">Typing discipline</a></th>
<td class="" style=""><a href="/wiki/Static_typing" title="Static typing" class="mw-redirect">static typing</a>, <a href="/wiki/Strong_typing" title="Strong typing" class="mw-redirect">strong typing</a></td>
</tr>
<tr>
<th style=""><a href="/wiki/Programming_language_implementation" title="Programming language implementation">Major implementations</a></th>
<td class="" style=""><a href="/wiki/EiffelStudio" title="EiffelStudio">EiffelStudio</a>, <a href="/wiki/SmartEiffel" title="SmartEiffel">SmartEiffel</a>, <a href="/wiki/Visual_Eiffel" title="Visual Eiffel">Visual Eiffel</a> , <a href="http://www.gobosoft.com/eiffel/gobo/gec/index.html" class="external text" title="http://www.gobosoft.com/eiffel/gobo/gec/index.html" rel="nofollow">Gobo Eiffel</a>, <a href="http://www.sourceforge.net/projects/tecomp" class="external text" title="http://www.sourceforge.net/projects/tecomp" rel="nofollow">"The Eiffel Compiler" tecomp</a></td>
</tr>
<tr>
<th style="">Influenced by</th>
<td class="" style=""><a href="/wiki/Ada_(programming_language)" title="Ada (programming language)">Ada</a>, <a href="/wiki/Simula" title="Simula">Simula</a>, <a href="/wiki/Z_notation" title="Z notation">Z</a></td>
</tr>
<tr>
<th style="">Influenced</th>
<td class="" style=""><a href="/wiki/Sather" title="Sather">Sather</a>, <a href="/wiki/Ruby_(programming_language)" title="Ruby (programming language)">Ruby</a>, <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a>, <a href="/wiki/C_Sharp_(programming_language)" title="C Sharp (programming language)">C#</a>, <a href="/wiki/D_(programming_language)" title="D (programming language)">D</a>, <a href="/wiki/Lisaac" title="Lisaac">Lisaac</a></td>
</tr>
</table>
<p><b>Eiffel</b> is an <a href="/wiki/International_Organization_for_Standardization" title="International Organization for Standardization">ISO</a>-standardized, <a href="/wiki/Object-oriented" title="Object-oriented" class="mw-redirect">object-oriented</a> <a href="/wiki/Programming_language" title="Programming language">programming language</a> designed to enable programmers to efficiently develop extensible, reusable, reliable software. Eiffel is used in academia as a language for teaching computer-programming principles. Eiffel is used in the finance, aerospace, health-care, video-gaming, and other industries as a development platform. Since 1985, many suppliers have developed Eiffel programming environments.</p>
<p>The Eiffel language's design is closely connected with the Eiffel programming method. Both are based on a set of principles, including <a href="/wiki/Design_by_contract" title="Design by contract">design by contract</a>, <a href="/wiki/Command-query_separation" title="Command-query separation">command-query separation</a>, <a href="/wiki/Uniform_access_principle" title="Uniform access principle">uniform-access principle</a>, <a href="/wiki/Single_choice_principle" title="Single choice principle">single-choice principle</a>, <a href="/wiki/Open_Closed_Principle" title="Open Closed Principle" class="mw-redirect">open-closed principle</a>, and <a href="/wiki/Option-operand_separation" title="Option-operand separation">option-operand separation</a>.</p>
<p>Many concepts initially introduced by Eiffel have later found their way into Java, C#, and other languages. New language-design ideas, particularly through the <a href="/wiki/European_Computer_Manufacturers_Association" title="European Computer Manufacturers Association" class="mw-redirect">ECMA</a>/<a href="/wiki/International_Organisation_for_Standardisation" title="International Organisation for Standardisation" class="mw-redirect">ISO</a> standardization process, continue to be incorporated into the Eiffel language.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Characteristics"><span class="tocnumber">1</span> <span class="toctext">Characteristics</span></a></li>
<li class="toclevel-1"><a href="#Design_goals"><span class="tocnumber">2</span> <span class="toctext">Design goals</span></a></li>
<li class="toclevel-1"><a href="#Background"><span class="tocnumber">3</span> <span class="toctext">Background</span></a>
<ul>
<li class="toclevel-2"><a href="#Implementations_and_environments"><span class="tocnumber">3.1</span> <span class="toctext">Implementations and environments</span></a></li>
<li class="toclevel-2"><a href="#Specifications_and_standards"><span class="tocnumber">3.2</span> <span class="toctext">Specifications and standards</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Syntax_and_semantics"><span class="tocnumber">4</span> <span class="toctext">Syntax and semantics</span></a>
<ul>
<li class="toclevel-2"><a href="#Overall_structure"><span class="tocnumber">4.1</span> <span class="toctext">Overall structure</span></a>
<ul>
<li class="toclevel-3"><a href="#Scoping"><span class="tocnumber">4.1.1</span> <span class="toctext">Scoping</span></a></li>
<li class="toclevel-3"><a href="#.22Hello.2C_world.21.22"><span class="tocnumber">4.1.2</span> <span class="toctext">"Hello, world!"</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#Design_by_Contract"><span class="tocnumber">4.2</span> <span class="toctext">Design by Contract</span></a></li>
<li class="toclevel-2"><a href="#Features.2C_commands.2C_queries"><span class="tocnumber">4.3</span> <span class="toctext">Features, commands, queries</span></a></li>
<li class="toclevel-2"><a href="#Overloading"><span class="tocnumber">4.4</span> <span class="toctext">Overloading</span></a></li>
<li class="toclevel-2"><a href="#Genericity"><span class="tocnumber">4.5</span> <span class="toctext">Genericity</span></a></li>
<li class="toclevel-2"><a href="#Inheritance_basics"><span class="tocnumber">4.6</span> <span class="toctext">Inheritance basics</span></a></li>
<li class="toclevel-2"><a href="#Deferred_classes_and_features"><span class="tocnumber">4.7</span> <span class="toctext">Deferred classes and features</span></a></li>
<li class="toclevel-2"><a href="#Renaming"><span class="tocnumber">4.8</span> <span class="toctext">Renaming</span></a></li>
<li class="toclevel-2"><a href="#Tuples"><span class="tocnumber">4.9</span> <span class="toctext">Tuples</span></a></li>
<li class="toclevel-2"><a href="#Agents"><span class="tocnumber">4.10</span> <span class="toctext">Agents</span></a></li>
<li class="toclevel-2"><a href="#Once_routines"><span class="tocnumber">4.11</span> <span class="toctext">Once routines</span></a></li>
<li class="toclevel-2"><a href="#Conversions"><span class="tocnumber">4.12</span> <span class="toctext">Conversions</span></a></li>
<li class="toclevel-2"><a href="#Exception_handling"><span class="tocnumber">4.13</span> <span class="toctext">Exception handling</span></a></li>
<li class="toclevel-2"><a href="#Concurrency"><span class="tocnumber">4.14</span> <span class="toctext">Concurrency</span></a></li>
<li class="toclevel-2"><a href="#Operator_and_bracket_syntax.2C_assigner_commands"><span class="tocnumber">4.15</span> <span class="toctext">Operator and bracket syntax, assigner commands</span></a></li>
<li class="toclevel-2"><a href="#Lexical_and_syntax_properties"><span class="tocnumber">4.16</span> <span class="toctext">Lexical and syntax properties</span></a></li>
<li class="toclevel-2"><a href="#Style_conventions"><span class="tocnumber">4.17</span> <span class="toctext">Style conventions</span></a></li>
<li class="toclevel-2"><a href="#Interfaces_to_other_tools_and_languages"><span class="tocnumber">4.18</span> <span class="toctext">Interfaces to other tools and languages</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">5</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">6</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Characteristics" id="Characteristics"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=1" title="Edit section: Characteristics">edit</a>]</span> <span class="mw-headline">Characteristics</span></h2>
<p>The key characteristics of the Eiffel language include:</p>
<ul>
<li>An object-oriented program structure in which a class serves as the basic unit of decomposition.</li>
<li><a href="/wiki/Design_by_contract" title="Design by contract">Design by contract</a> tightly integrated with other language constructs.</li>
<li>Automatic memory management, typically implemented by <a href="/wiki/Garbage_collection_(computer_science)" title="Garbage collection (computer science)">garbage collection</a>.</li>
<li><a href="/wiki/Inheritance_(computer_science)" title="Inheritance (computer science)">Inheritance</a>, including <a href="/wiki/Multiple_inheritance" title="Multiple inheritance">multiple inheritance</a>, <a href="/wiki/Renaming" title="Renaming" class="mw-redirect">renaming</a>, <a href="/wiki/Overriding" title="Overriding" class="mw-redirect">redefinition</a>, "select", <a href="/w/index.php?title=Non-conforming_inheritance&amp;action=edit&amp;redlink=1" class="new" title="Non-conforming inheritance (page does not exist)">non-conforming inheritance</a>, and other mechanisms intended to make inheritance safe.</li>
<li>Constrained and unconstrained <a href="/wiki/Generic_programming" title="Generic programming">generic programming</a>.</li>
<li>A uniform type system handling both value and reference semantics in which all types, including basic types such as INTEGER, are class-based.</li>
<li>Type safety (<a href="/wiki/Static_typing" title="Static typing" class="mw-redirect">static typing</a>).</li>
<li>Void safety, or static protection against calls on null references, through the attached-types mechanism.</li>
<li>Agents, or objects that wrap computations, closely connected with <a href="/wiki/Closure_(computer_science)" title="Closure (computer science)">closures</a> and <a href="/wiki/Lambda_calculus" title="Lambda calculus">lambda calculus</a>.</li>
<li><i>Once</i> routines, or routines evaluated only once, for object sharing and decentralized initialization.</li>
<li>Keyword-based syntax in the <a href="/wiki/ALGOL" title="ALGOL">ALGOL</a>/<a href="/wiki/Pascal_(programming_language)" title="Pascal (programming language)">Pascal</a> tradition but separator-free, insofar as semicolons are optional, with operator syntax available for routines.</li>
<li>Case insensitivity.</li>
</ul>
<p><a name="Design_goals" id="Design_goals"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=2" title="Edit section: Design goals">edit</a>]</span> <span class="mw-headline">Design goals</span></h2>
<p>Eiffel emphasizes declarative statements over procedural code and attempts to eliminate the need for bookkeeping instructions.</p>
<p>Eiffel shuns coding tricks or coding techniques intended as <a href="/wiki/Optimization_(computer_science)" title="Optimization (computer science)">optimization</a> hints to the compiler. The aim is not only to make the code more readable, but also to allow programmers to concentrate on the important aspects of a program without getting bogged down in implementation details. Eiffel's simplicity is intended to promote simple, extensible, reusable, and reliable answers to computing problems. Compilers for computer programs written in Eiffel provide extensive optimization techniques, such as automatic in-lining, that relieve the programmer of part of the optimization burden while producing code whose efficiency is comparable to that of code written in <a href="/wiki/C%2B%2B" title="C++">C++</a>.</p>
<p><a name="Background" id="Background"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=3" title="Edit section: Background">edit</a>]</span> <span class="mw-headline">Background</span></h2>
<p>Eiffel was originally developed by <a href="/wiki/Eiffel_Software" title="Eiffel Software">Eiffel Software</a>, a company originally called Interactive Software Engineering Inc. (ISE) founded by <a href="/wiki/Bertrand_Meyer" title="Bertrand Meyer">Bertrand Meyer</a>. <a href="/wiki/Object-Oriented_Software_Construction" title="Object-Oriented Software Construction">Object-Oriented Software Construction</a> contains a detailed treatment of the concepts and theory of the object technology that led to Eiffel's design.<sup id="cite_ref-0" class="reference"><a href="#cite_note-0" title=""><span>[</span>1<span>]</span></a></sup></p>
<p>The design goal behind the Eiffel language, libraries, and programming methods is to enable programmers to create reliable, reusable software modules. Eiffel supports <a href="/wiki/Multiple_inheritance" title="Multiple inheritance">multiple inheritance</a>, <a href="/wiki/Genericity" title="Genericity" class="mw-redirect">genericity</a>, <a href="/wiki/Polymorphism_(computer_science)" title="Polymorphism (computer science)" class="mw-redirect">polymorphism</a>, <a href="/wiki/Encapsulation_(computer_science)" title="Encapsulation (computer science)">encapsulation</a>, type-safe conversions, and <a href="/wiki/Parameter_covariance" title="Parameter covariance" class="mw-redirect">parameter covariance</a>. Eiffel's most important contribution to <a href="/wiki/Software_engineering" title="Software engineering">software engineering</a> is <a href="/wiki/Design_by_contract" title="Design by contract">design by contract</a> (DbC), in which <a href="/wiki/Assertion_(computing)" title="Assertion (computing)">assertions</a>, <a href="/wiki/Precondition" title="Precondition">preconditions</a>, <a href="/wiki/Postcondition" title="Postcondition">postconditions</a>, and <a href="/wiki/Class_invariant" title="Class invariant">class invariants</a> are employed to help ensure program correctness without sacrificing efficiency.</p>
<p>Eiffel's design is based on object-oriented programming theory, with only minor influence of other paradigms or concern for support of legacy code. Eiffel formally supports <a href="/wiki/Abstract_data_type" title="Abstract data type">abstract data types</a>. Under Eiffel's design, a software text should be able to reproduce its design documentation from the text itself, using a formalized implementation of the "Abstract Data Type".</p>
<p><a name="Implementations_and_environments" id="Implementations_and_environments"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=4" title="Edit section: Implementations and environments">edit</a>]</span> <span class="mw-headline">Implementations and environments</span></h3>
<p><a href="/wiki/EiffelStudio" title="EiffelStudio">EiffelStudio</a> is an <a href="/wiki/Integrated_development_environment" title="Integrated development environment">integrated development environment</a> available under either an <a href="/wiki/Open-source" title="Open-source" class="mw-redirect">open source</a> or a commercial license. It offers an object-oriented environment for <a href="/wiki/Software_engineering" title="Software engineering">software engineering</a>. <a href="/w/index.php?title=EiffelEnvision&amp;action=edit&amp;redlink=1" class="new" title="EiffelEnvision (page does not exist)">EiffelEnvision</a> is a plug-in for <a href="/wiki/Microsoft_Visual_Studio" title="Microsoft Visual Studio">Microsoft Visual Studio</a> that allows users to edit, compile, and debug Eiffel projects from within the Microsoft Visual Studio IDE. EiffelStudio and EiffelEnvision are free for non-commercial use. Four other <a href="/wiki/Open-source" title="Open-source" class="mw-redirect">open source</a> implementations are available:<a href="http://www.sourceforge.net/projects/tecomp" class="external text" title="http://www.sourceforge.net/projects/tecomp" rel="nofollow">"The Eiffel Compiler" tecomp</a>, Gobo Eiffel, <a href="/wiki/SmartEiffel" title="SmartEiffel">SmartEiffel</a>—the GNU implementation, based on an older version of the language—and <a href="/wiki/Visual_Eiffel" title="Visual Eiffel">Visual Eiffel</a>.</p>
<p>Several other programming languages incorporate elements first introduced in Eiffel. <a href="/wiki/Sather" title="Sather">Sather</a>, for example, was originally based on Eiffel but has since diverged, and now includes several <a href="/wiki/Functional_programming" title="Functional programming">functional programming</a> features. The interactive-teaching language <a href="/wiki/Blue_(programming_language)" title="Blue (programming language)">Blue</a>, forerunner of <a href="/wiki/BlueJ" title="BlueJ">BlueJ</a>, is also Eiffel-based. The <a href="/wiki/Apple_Media_Tool" title="Apple Media Tool">Apple Media Tool</a> includes an Eiffel-based Apple Media Language.</p>
<p><a name="Specifications_and_standards" id="Specifications_and_standards"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=5" title="Edit section: Specifications and standards">edit</a>]</span> <span class="mw-headline">Specifications and standards</span></h3>
<p>The Eiffel language definition is an international standard of the <a href="/wiki/International_Organization_for_Standardization" title="International Organization for Standardization">ISO</a>. The standard was developed by <a href="/wiki/European_Computer_Manufacturers_Association" title="European Computer Manufacturers Association" class="mw-redirect">ECMA International</a>, which first approved the standard on 21 June 2005 as ECMA standard 367, <cite>Eiffel: Analysis, Design and Implementation Language</cite>. In June 2006, ECMA and ISO adopted the second version. In November 2006, ISO first published that version. The standard can be found and used free of charge on the ECMA site.<sup id="cite_ref-1" class="reference"><a href="#cite_note-1" title=""><span>[</span>2<span>]</span></a></sup> The ISO version<sup id="cite_ref-2" class="reference"><a href="#cite_note-2" title=""><span>[</span>3<span>]</span></a></sup> is identical in all respects except formatting.</p>
<p>Eiffel Software, "The Eiffel Compiler" tecomp and Eiffel-library-developer Gobo have committed to implementing the standard; Eiffel Software's EiffelStudio 6.1 implements some of the major new mechanisms—in particular, inline agents, assigner commands, bracket notation, non-conforming inheritance, and attached types. The <a href="/wiki/SmartEiffel" title="SmartEiffel">SmartEiffel</a> team has turned away from this standard to create its own version of the language, which they believe to be closer to the original style of Eiffel. Object Tools has not disclosed whether future versions of its Eiffel compiler will comply with the standard.</p>
<p>The standard cites the following, predecessor Eiffel-language specifications:</p>
<ul>
<li>Bertrand Meyer: <cite>Eiffel: The Language</cite>, Prentice Hall, second printing, 1992 (first printing: 1991)</li>
<li>Bertrand Meyer: <cite>Standard Eiffel</cite> (revision of preceding entry), ongoing, 1997-present, at <a href="http://www.inf.ethz.ch/~meyer/ongoing/etl" class="external text" title="http://www.inf.ethz.ch/~meyer/ongoing/etl" rel="nofollow"><cite>Bertrand Meyer's ETL3 page</cite></a>, and</li>
<li>Bertrand Meyer: <cite>Object-Oriented Software Construction</cite>, Prentice Hall: first edition, 1988; second edition, 1997.</li>
</ul>
<p><a name="Syntax_and_semantics" id="Syntax_and_semantics"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=6" title="Edit section: Syntax and semantics">edit</a>]</span> <span class="mw-headline">Syntax and semantics</span></h2>
<p><a name="Overall_structure" id="Overall_structure"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=7" title="Edit section: Overall structure">edit</a>]</span> <span class="mw-headline">Overall structure</span></h3>
<p>An Eiffel "system" or "program" is a collection of <i>classes</i>. Above the level of classes, Eiffel defines <i>cluster</i>, which are essentially a group of classes, and possibly of <i>subclusters</i> (nested clusters). Clusters are not a syntactic language construct, but rather a standard organizational convention. Typically an Eiffel application will be organized with each class in a separate file, and each cluster in a directory containing class files. In this organization, subclusters are subdirectories. For example, under standard organizational and casing conventions, <code>x.e</code> might be the name of a file that defines a class called X.</p>
<p>A class contains <i>features</i>, which are similar to "members", "attributes" or "methods" in other object-oriented programming languages. A class also defines its invariants, and contains other properties, such as a "notes" section for documentation and metadata. Eiffel's standard data types, such as <code>INTEGER</code>, <code>STRING</code> and <code>ARRAY</code>, are all themselves classes.</p>
<p>Every system must have a class designated as "root", with one of its creation procedures designated as "root procedure". Executing a system consists of creating an instance of the root class and executing its root procedure. Generally, doing so creates new objects, calls new features, and so on.</p>
<p>Eiffel has five basic executable instructions: assignment, object creation, routine call, condition, and iteration. Eiffel's control structures are strict in enforcing structured programming: every block has exactly one entry and exactly one exit.</p>
<p><a name="Scoping" id="Scoping"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=8" title="Edit section: Scoping">edit</a>]</span> <span class="mw-headline">Scoping</span></h4>
<p>Unlike many object-oriented languages, but like <a href="/wiki/Smalltalk_programming_language" title="Smalltalk programming language" class="mw-redirect">Smalltalk</a>, Eiffel does not permit any assignment into fields of objects, except within the features of an object. Eiffel emphasizes information hiding and data abstraction, by requiring formal interfaces to data mutation. To put it in the language of other object-oriented programming languages, all Eiffel fields are "private", and "setters" are needed to modify values. An upshot of this is that "setters" can, and normally do, implement the invariants Eiffel provides syntax for.</p>
<p><a name=".22Hello.2C_world.21.22" id=".22Hello.2C_world.21.22"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=9" title="Edit section: &quot;Hello, world!&quot;">edit</a>]</span> <span class="mw-headline">"Hello, world!"</span></h4>
<p>A programming language's look and feel is often conveyed using a "Hello, world!" program. Such a program written in Eiffel might be:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-eiffel">
<span class="kw1">class</span>
    HELLO_WORLD
<span class="kw2">create</span>
    make
<span class="kw1">feature</span>
    make
        <span class="kw2">do</span>
            print <span class="br0">(</span><span class="st0">"Hello, world!<span class="es0">%N</span>"</span><span class="br0">)</span>
        <span class="kw2">end</span>
<span class="kw2">end</span>
</pre></div>
<p><a name="Design_by_Contract" id="Design_by_Contract"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=10" title="Edit section: Design by Contract">edit</a>]</span> <span class="mw-headline">Design by Contract</span></h3>
<p>The concept of <a href="/wiki/Design_by_contract" title="Design by contract">design by contract</a> is central to Eiffel. The mechanisms are tightly integrated with the language. Contracts guide redefinition of features in inheritance.</p>
<ul>
<li>Routine precondition: The precondition may only be weakened by inheritance; any call that meets the requirements of the ancestor meets those of the descendant.</li>
<li>Routine postcondition: The postcondition can only be strengthened by inheritance; any result guaranteed by the ancestor is still provided by the descendant.</li>
<li>Class invariant</li>
</ul>
<p>In addition, the language supports a "check instruction" (a kind of "assert") and loop invariants.</p>
<p><a name="Features.2C_commands.2C_queries" id="Features.2C_commands.2C_queries"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=11" title="Edit section: Features, commands, queries">edit</a>]</span> <span class="mw-headline">Features, commands, queries</span></h3>
<p>The primary characteristic of a class is that it contains a set of features. As a class represents a set of run-time objects, or "instances", a feature is an operation on these objects. There are two kinds of features: queries and commands. A query provides information about an instance. A command modifies an instance.</p>
<p>The command-query distinction is important to the Eiffel method. In particular:</p>
<ul>
<li>Uniform-Access Principle: from the point of view of a software client making a call to a class feature, whether a query is an attribute (field in each object) or a function (algorithm) should not make any difference. For example a_vehicle.speed could be an attribute, accessed from the object's representation; or it could be computed by a function that divides distance by time. The notation is the same in both cases, so that it's easy to change representation without affecting the rest of the software.</li>
</ul>
<ul>
<li><a href="/wiki/Command-Query_Separation" title="Command-Query Separation" class="mw-redirect">Command-Query Separation Principle</a>: Queries must not modify the instance. This is not a language rule but a methodological principle. So in good Eiffel style, one does not find "get" functions that change something and return a result; instead there are commands (procedures) to change objects, and queries to obtain information about the object, resulting from preceding changes.</li>
</ul>
<p><a name="Overloading" id="Overloading"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=12" title="Edit section: Overloading">edit</a>]</span> <span class="mw-headline">Overloading</span></h3>
<p>Eiffel does not allow argument <a href="/wiki/Method_overloading" title="Method overloading">overloading</a>. Each feature name within a class always maps to a specific feature within the class. One name, within one class, means one thing.</p>
<p>This design choice helps the readability of classes, by avoiding a cause of ambiguity about which routine will be invoked by a call. It also simplifies the language mechanism; in particular, this is what makes Eiffel's multiple inheritance mechanism possible.<sup id="cite_ref-3" class="reference"><a href="#cite_note-3" title=""><span>[</span>4<span>]</span></a></sup></p>
<p>Names can, of course, be reused in different classes. For example the <tt>"+"</tt> operator is defined in several classes: <tt>INTEGER</tt>, <tt>REAL</tt>, <tt>STRING</tt>, etc.</p>
<p><a name="Genericity" id="Genericity"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=13" title="Edit section: Genericity">edit</a>]</span> <span class="mw-headline">Genericity</span></h3>
<p>Classes can be generic, to express that they are parameterized by types. Generic parameters appear in square brackets:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-eiffel">
<span class="kw1">class</span> <span class="kw4">LIST</span> <span class="br0">[</span>G<span class="br0">]</span> ...
</pre></div>
<p>G is known as a "formal generic parameter". (Eiffel reserves "argument" for routines, and uses "parameter" only for generic classes.) With such a declaration G represents within the class an arbitrary type; so a function can return a value of type G, and a routine can take an argument of that type:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-eiffel">
item: G <span class="kw2">do</span> ... <span class="kw2">end</span>
put <span class="br0">(</span>x: G<span class="br0">)</span> <span class="kw2">do</span> ... <span class="kw2">end</span>
</pre></div>
<p>The <code>LIST [INTEGER]</code> and <code>LIST [WORD]</code> are "generic derivations" of this class. Permitted combinations (with <code>n: INTEGER</code>, <code>w: WORD</code>, <code>il: LIST [INTEGER]</code>, <code>wl: LIST [WORD]</code>) are</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-eiffel">
n := il.<span class="me1">item</span>
wl.<span class="me1">put</span> <span class="br0">(</span>w<span class="br0">)</span>
</pre></div>
<p><code>INTEGER</code> resp. <code>WORD</code> are the "actual generic parameters" in these generic derivations.</p>
<p>It is also possible to have 'constrained' formal parameters, for which the actual parameter must inherit from a given class, the "constraint". For example in</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-eiffel">
   <span class="kw1">class</span> <span class="kw4">HASH_TABLE</span> <span class="br0">[</span>G, KEY -&gt; <span class="kw4">HASHABLE</span><span class="br0">]</span>
</pre></div>
<p>a derivation <code>HASH_TABLE [INTEGER, STRING]</code> is valid only if <code>STRING</code> inherits from <code>HASHABLE</code> (as it indeed does in typical Eiffel libraries). Within the class, having <code>KEY</code> constrained by <code>HASHABLE</code> means that for <code>x: KEY</code> it is possible to apply to <code>x</code> all the features of <code>HASHABLE</code>, as in <code>x.hash_code</code>.</p>
<p><a name="Inheritance_basics" id="Inheritance_basics"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=14" title="Edit section: Inheritance basics">edit</a>]</span> <span class="mw-headline">Inheritance basics</span></h3>
<p>To inherit from one or more others, a class will include an <code>inherit</code> clause at the beginning:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-eiffel">
<span class="kw1">class</span> C <span class="kw1">inherit</span>
   A
   B
 
<span class="co1">-- ... Rest of class declaration ...</span>
</pre></div>
<p>The class may redefine (override) some or all of the inherited features. This must be explicitly announced at the beginning of the class through a <code>redefine</code> subclause of the inheritance clause, as in</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-eiffel">
<span class="kw1">class</span> C <span class="kw1">inherit</span>
    A
        <span class="kw2">redefine</span> f, g, h <span class="kw2">end</span>
    B
        <span class="kw2">redefine</span> u, v <span class="kw2">end</span>
</pre></div>
<p><a name="Deferred_classes_and_features" id="Deferred_classes_and_features"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=15" title="Edit section: Deferred classes and features">edit</a>]</span> <span class="mw-headline">Deferred classes and features</span></h3>
<p>Classes may be defined with <code>deferred class</code> rather than with <code>class</code> to indicate that the class may not be directly instantiated. Non-instantiatable classes are called <a href="/wiki/Abstract_class" title="Abstract class" class="mw-redirect">abstract classes</a> in some other object-oriented programming languages. In Eiffel parlance, only an "effective" class can be instantiated (it may be a descendent of a deferred class). A feature can also be deferred by using the <code>deferred</code> keyword in place of a <code>do</code> clause. If a class has any deferred features it must be declared as deferred; however, a class with no deferred features may nonetheless itself be deferred.</p>
<p>Deferred classes play some of the same role as interfaces in languages such as Java, though many object-oriented programming theorists believe interfaces are themselves largely an answer to Java's lack of multiple inheritance (which Eiffel has).</p>
<p><a name="Renaming" id="Renaming"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=16" title="Edit section: Renaming">edit</a>]</span> <span class="mw-headline">Renaming</span></h3>
<p>A class that inherits from one or more others gets all its features, by default under their original names. It may, however, change their names through <code>rename</code> clauses. This is required in the case of multiple inheritance if there are name clashes between inherited features; without renaming, the resulting class would violate the no-overloading principle noted above and hence would be invalid.</p>
<p><a name="Tuples" id="Tuples"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=17" title="Edit section: Tuples">edit</a>]</span> <span class="mw-headline">Tuples</span></h3>
<p>Tuples types may be viewed as a simple form of class, providing only attributes and the corresponding "setter" procedure. A typical tuple type reads</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-eiffel">
   <span class="kw4">TUPLE</span> <span class="br0">[</span>name: <span class="kw4">STRING</span>; weight: <span class="kw4">REAL</span>; date: DATE<span class="br0">]</span>
</pre></div>
<p>and could be used to describe a simple notion of birth record if a class is not needed. An instance of such a tuple is simply a sequence of values with the given types, given in brackets, such as</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-eiffel">
   <span class="br0">[</span><span class="st0">"Brigitte"</span>, <span class="nu0">3.5</span>, Last_night<span class="br0">]</span>
</pre></div>
<p>Components of such a tuple can be accessed as if the tuple tags were attributes of a class, for example if <code>t</code> has been assigned the above tuple then <code>t.weight</code> has value 3.5.</p>
<p>Thanks to the notion of assigner command (see below), dot notation can also be used to assign components of such a tuple, as in</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-eiffel">
   t.<span class="me1">weight</span> := t.<span class="me1">weight</span> + <span class="nu0">0.5</span>
</pre></div>
<p>The tuple tags are optional, so that it is also possible to write a tuple type as <code>TUPLE [STRING, REAL, DATE]</code>. (In some compilers this is the only form of tuple, as tags were introduced with the ECMA standard.)</p>
<p>The precise specification of e.g. <code>TUPLE [A, B, C]</code> is that it describes sequences of <i>at least</i> three elements, the first three being of types <code>A</code>, <code>B</code>, <code>C</code> respectively. As a result <code>TUPLE [A, B, C]</code> conforms to (may be assigned to) <code>TUPLE [A, B]</code>, to <code>TUPLE [A]</code> and to <code>TUPLE</code> (without parameters), the topmost tuple type to which all tuple types conform.</p>
<p><a name="Agents" id="Agents"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=18" title="Edit section: Agents">edit</a>]</span> <span class="mw-headline">Agents</span></h3>
<p>Eiffel's "agent" mechanism wraps operations into objects. This mechanism can be used for iteration, event-driven programming, and other contexts in which it is useful to pass operations around the program structure. Other programming languages, especially ones that emphasize <a href="/wiki/Functional_programming" title="Functional programming">functional programming</a>, allow a similar pattern using <a href="/wiki/Continuations" title="Continuations" class="mw-redirect">continuations</a>, <a href="/wiki/Closure_(computer_science)" title="Closure (computer science)">closures</a>, or <a href="/wiki/Generator_(computer_science)" title="Generator (computer science)">generators</a>; Eiffel's agents emphasize the language's object-oriented paradigm, and use a syntax and semantics similar to code blocks in <a href="/wiki/Smalltalk_programming_language" title="Smalltalk programming language" class="mw-redirect">Smalltalk</a> and <a href="/wiki/Ruby_(programming_language)" title="Ruby (programming language)">Ruby</a>.</p>
<p>For example, to execute the <code>my_action</code> block for each element of <code>my_list</code>, one would write:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-eiffel">
   my_list.<span class="me1">do_all</span> <span class="br0">(</span><span class="kw2">agent</span> my_action<span class="br0">)</span>
</pre></div>
<p>To execute <code>my_action</code> only on elements satisfying <code>my_condition</code>, a limitation/filter can be added:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-eiffel">
   my_list.<span class="me1">do_if</span> <span class="br0">(</span><span class="kw2">agent</span> my_action, <span class="kw2">agent</span> my_condition<span class="br0">)</span>
</pre></div>
<p>In these examples, <code>my_action</code> and <code>my_condition</code> are routines. Prefixing them with <code>agent</code> yields an object that represents the corresponding routine with all its properties, in particular the ability to be called with the appropriate arguments. So if <code>a</code> represents that object (for example because <code>a</code> is the argument to <code>do_all</code>), the instruction</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-eiffel">
   a.<span class="me1">call</span> <span class="br0">(</span><span class="br0">[</span>x<span class="br0">]</span><span class="br0">)</span>
</pre></div>
<p>will call the original routine with the argument <code>x</code>, as if we had directly called the original routine: <code>my_action (x)</code>. Arguments to <code>call</code> are passed as a tuple, here <code>[x]</code>.</p>
<p>It is possible to keep some arguments to an agent <b>open</b> and make others <b>closed</b>. The open arguments are passed as arguments to <code>call</code>: they are provided at the time of <i>agent use</i>. The closed arguments are provided at the time of agent <i>definition</i>. For example, if <code>action2</code> has two arguments, the iteration</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-eiffel">
   my_list.<span class="me1">do_all</span> <span class="br0">(</span><span class="kw2">agent</span> action2 <span class="br0">(</span>?, y<span class="br0">)</span><span class="br0">)</span>
</pre></div>
<p>iterates <code>action2 (x, y)</code> for successive values of <code>x</code>, where the second arguments remained set to <code>y</code>. The question mark <code>?</code> indicates an open argument; <code>y</code> is a closed argument of the agent. Note that the basic syntax <code>agent f</code> is a short hand for <code>agent f (?,&#160;?, ...)</code> with all arguments open. It is also possible to make the <i>target</i> of an agent open through the notation <code>{T}?</code> where <code>T</code> is the type of the target.</p>
<p>The distinction between open and closed operands (operands = arguments + target) corresponds to the distinction between bound and free variables in <a href="/wiki/Lambda_calculus" title="Lambda calculus">lambda calculus</a>. An agent expression such as <code>action2 (?, y)</code> with some operands closed and some open corresponds to a version of the original operation <a href="/wiki/Currying" title="Currying"><i>curried</i></a> on the closed operands.</p>
<p>The agent mechanism has been recently generalized to allow defining an agent without reference to an existing routine (such as <code>my_action</code>, <code>my_condition</code>, <code>action2</code>), through inline agents as in</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-eiffel">
my_list.<span class="me1">do_all</span> <span class="br0">(</span><span class="kw2">agent</span> <span class="br0">(</span>s: <span class="kw4">STRING</span><span class="br0">)</span>
     <span class="kw2">require</span>
         not_void: s /= <span class="kw3">Void</span>
     <span class="kw2">do</span>
         s.<span class="me1">append_character</span> <span class="br0">(</span><span class="st0">','</span><span class="br0">)</span>
     <span class="kw2">ensure</span>
         appended: s.<span class="me1">count</span> = <span class="kw2">old</span> s.<span class="me1">count</span> + <span class="nu0">1</span>
     <span class="kw2">end</span><span class="br0">)</span>
</pre></div>
<p>The inline agent passed here can have all the trappings of a normal routine, including precondition, postcondition, rescue clause (not used here), and a full signature. This avoids defining routines when all that's needed is a computation to be wrapped in an agent. This is useful in particular for contracts, as in an invariant clause that expresses that all elements of a list are positive:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-eiffel">
   my_list.<span class="me1">for_all</span> <span class="br0">(</span><span class="kw2">agent</span> <span class="br0">(</span>x: <span class="kw4">INTEGER</span><span class="br0">)</span>: <span class="kw4">BOOLEAN</span> <span class="kw2">do</span> <span class="kw3">Result</span> := <span class="br0">(</span>x &gt; <span class="nu0">0</span><span class="br0">)</span> <span class="kw2">end</span><span class="br0">)</span>
</pre></div>
<p>The current agent mechanism leaves a possibility of run-time type error (if a routine with <i>n</i> arguments is passed to an agent expecting <i>m</i> arguments with <i>m</i> &lt; <i>n</i>). This can be avoided by a run-time check through the precondition <code>valid_arguments</code> of <code>call</code>. Several proposals for a purely static correction of this problem are available, including a language change proposal by Ribet et al.<sup id="cite_ref-4" class="reference"><a href="#cite_note-4" title=""><span>[</span>5<span>]</span></a></sup>.</p>
<p><a name="Once_routines" id="Once_routines"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=19" title="Edit section: Once routines">edit</a>]</span> <span class="mw-headline">Once routines</span></h3>
<p>A routine's result can be cached using the <code>once</code> keyword in place of <code>do</code>. Non-first calls to a routine require no additional computation or resource allocation, but simply return a previously computed result. A common pattern for "once functions" is to provide shared objects; the first call will create the object, subsequent ones will return the reference to that object. The typical scheme is:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-eiffel">
shared_object: SOME_TYPE
    <span class="kw2">once</span>
        <span class="kw2">create</span> <span class="kw3">Result</span>.<span class="me1">make</span> <span class="br0">(</span>args<span class="br0">)</span>
             <span class="co1">-- This creates the object and returns a reference to it through `Result'.</span>
    <span class="kw2">end</span>
</pre></div>
<p>The returned object—<code>Result</code> in the example—can itself be mutable, but its reference remains the same.</p>
<p>Often "once routines" perform a required initialization: multiple calls to a libraries can include a call to the initialization procedure, but only the first such call will perform the required actions. Using this pattern initialization can be decentralized, avoiding the need for a special initialization module. "Once routines" are similar in purpose and effect to the <a href="/wiki/Singleton_pattern" title="Singleton pattern">singleton pattern</a> in many programming languages, and to the <a href="/wiki/Singleton_pattern#Python_Borg_pattern" title="Singleton pattern">Borg pattern</a> used in Python.</p>
<p>The ECMA specification allows variants of "once" (qualified by a keyword in parentheses, e.g. <code>once (THREAD)</code>: once per process, once per thread, once per object. However, this is not yet fully implemented by current compilers (typically, only PROCESS and THREAD).</p>
<p><a name="Conversions" id="Conversions"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=20" title="Edit section: Conversions">edit</a>]</span> <span class="mw-headline">Conversions</span></h3>
<p>Eiffel provides a mechanism to allow conversions between various types. The mechanisms coexists with inheritance and complements it. To avoid any confusion between the two mechanisms, the design enforces the following principle:</p>
<dl>
<dd><b>(Conversion principle) A type may not both conform and convert to another.</b></dd>
</dl>
<p>For example <code>NEWSPAPER</code> may conform to <code>PUBLICATION</code>, but <code>INTEGER</code> converts to <code>REAL</code> (and does not inherit from it).</p>
<p>The conversion mechanism simply generalizes the ad hoc conversion rules (such as indeed between <code>INTEGER</code> and <code>REAL</code>) that exist in most programming languages, making them applicable to any type as long as the above principle is observed. For example a <code>DATE</code> class may be declared to convert to <code>STRING</code>; this makes it possible to create a string from a date simply through</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-eiffel">
   my_string := my_date
</pre></div>
<p>as a shortcut for using an explicit object creation with a conversion procedure:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-eiffel">
   <span class="kw2">create</span> my_string.<span class="me1">make_from_date</span> <span class="br0">(</span>my_date<span class="br0">)</span>
</pre></div>
<p>To make the first form possible as a synonym for the second, it suffices to list the creation procedure (constructor) <code>make_from_date</code> in a <code>convert</code> clause at the beginning of the class.</p>
<p>As another example, if there is such a conversion procedure listed from <code>TUPLE [day: INTEGER; month: STRING; year: INTEGER]</code>, then one can directly assign a tuple to a date, causing the appropriate conversion, as in</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-eiffel">
      Bastille_day := <span class="br0">[</span><span class="nu0">14</span>, <span class="st0">"July"</span>, <span class="nu0">1789</span><span class="br0">]</span>
</pre></div>
<p><a name="Exception_handling" id="Exception_handling"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=21" title="Edit section: Exception handling">edit</a>]</span> <span class="mw-headline">Exception handling</span></h3>
<p><a href="/wiki/Exception_handling" title="Exception handling">Exception handling</a> in Eiffel is based on the principles of design by contract. For example, an exception occurs when a routine's caller fails to satisfy a precondition, or when a routine cannot ensure a promised postcondition. In Eiffel, exception handling is not used for <a href="/wiki/Control_flow" title="Control flow">control flow</a> or to correct data-input mistakes.</p>
<p>An Eiffel exception handler is defined using the <tt>rescue</tt> keyword. Within the <tt>rescue</tt> section, the <tt>retry</tt> keyword executes the routine again. For example, the following routine tracks the number of attempts at executing the routine, and only retries a certain number of times:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-eiffel">
connect_to_server <span class="br0">(</span>server: SOCKET<span class="br0">)</span>
      <span class="co1">-- Connect to a server or give up after 10 attempts.</span>
    <span class="kw2">require</span>
        server /= <span class="kw3">Void</span> <span class="kw2">and</span> <span class="kw2">then</span> server.<span class="me1">address</span> /= <span class="kw3">Void</span>
    <span class="kw2">local</span>
        attempts: <span class="kw4">INTEGER</span>
    <span class="kw2">do</span>
        server.<span class="me1">connect</span>
    <span class="kw2">ensure</span>
      connected: server.<span class="me1">is_connected</span>
    <span class="kw2">rescue</span>
        <span class="kw2">if</span> attempts &lt; <span class="nu0">10</span> <span class="kw2">then</span>
            attempts := attempts + <span class="nu0">1</span>
            <span class="kw2">retry</span>
        <span class="kw2">end</span>
    <span class="kw2">end</span>
</pre></div>
<p>This example is arguably flawed for anything but the simplest programs, however, because connection failure is to be expected. For most programs a routine name like <tt>attempt_connecting_to_server</tt> would be better, and the postcondition would not promise a connection, leaving it up to the caller to take appropriate steps if the connection was not opened.</p>
<p><a name="Concurrency" id="Concurrency"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=22" title="Edit section: Concurrency">edit</a>]</span> <span class="mw-headline">Concurrency</span></h3>
<p>A number of networking and threading libraries are available, such as EiffelNet and EiffelThreads. A concurrency model for Eiffel, based on the concepts of design by contract, is <a href="/wiki/SCOOP_(software)" title="SCOOP (software)" class="mw-redirect">SCOOP (software)</a>, or <i>Simple Concurrent Object-Oriented Programming</i>, not yet part of the official language definition but available as an add-on from <a href="/wiki/ETH_Zurich" title="ETH Zurich">ETH Zurich</a>.</p>
<p><a name="Operator_and_bracket_syntax.2C_assigner_commands" id="Operator_and_bracket_syntax.2C_assigner_commands"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=23" title="Edit section: Operator and bracket syntax, assigner commands">edit</a>]</span> <span class="mw-headline">Operator and bracket syntax, assigner commands</span></h3>
<p>Eiffel's view of computation is completely object-oriented in the sense that every operation is relative to an object, the "target". So for example an addition</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-eiffel">
  <span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span> a + b
</pre></div>
<p>is conceptually understood as if it were a function call</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-eiffel">
  <span class="br0">[</span><span class="nu0">2</span><span class="br0">]</span> a.<span class="me1">plus</span> <span class="br0">(</span>b<span class="br0">)</span>
</pre></div>
<p>with target <code>a</code>, feature <code>plus</code> and argument <code>b</code>.</p>
<p>Of course [1] is the conventional syntax and usually preferred. Operator syntax makes it possible to use either form by declaring the feature (for example in <code>INTEGER</code>, but this applies to other basic classes and can be used in any other for which such an operator appropriate):</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-eiffel">
plus <span class="kw2">alias</span> <span class="st0">"+"</span> <span class="br0">(</span>other: <span class="kw4">INTEGER</span><span class="br0">)</span>: <span class="kw4">INTEGER</span>
        <span class="co1">-- ... Normal function declaration...</span>
    <span class="kw2">end</span>
</pre></div>
<p>The range of operators that can be used as "alias" is quite broad; they include predefined operators such as "+" but also "free operators" made of non-alphanumeric symbols. This makes it possible to design special infix and prefix notations, for example in mathematics and physics applications.</p>
<p>Every class may in addition have <i>one</i> function aliased to "[]", the "bracket" operator, allowing the notation <code>a [i, ...]</code> as a synonym for <code>a.f (i, ...)</code> where <code>f</code> is the chosen function. This is particularly useful for container structures such as arrays, hash tables, lists etc. For example access to an element of a hash table with string keys can be written</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-eiffel">
   number := phone_book <span class="br0">[</span><span class="st0">"JILL SMITH"</span><span class="br0">]</span>
</pre></div>
<p>"Assigner commands" are a companion mechanism designed in the same spirit of allowing well-established, convenient notation reinterpreted in the framework of object-oriented programming. Assigner commands allow assignment-like syntax to call "setter" procedures. An assignment proper can never be of the form <code>a.x&#160;:= v</code> as this violates information hiding; you have to go for a setter command (procedure). For example the hash table class can have the function and the procedure</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-eiffel">
item <span class="kw2">alias</span> <span class="st0">"[]"</span> <span class="br0">(</span>key: <span class="kw4">STRING</span><span class="br0">)</span>: ELEMENT         <span class="br0">[</span><span class="nu0">3</span><span class="br0">]</span>
      <span class="co1">-- The element of key `key'.</span>
      <span class="co1">-- ("Getter" query)</span>
    <span class="kw2">do</span>
        ...
    <span class="kw2">end</span>
 
put <span class="br0">(</span>e: ELEMENT; key: <span class="kw4">STRING</span><span class="br0">)</span>
      <span class="co1">-- Insert the element `e', associating it with the key `key'.</span>
      <span class="co1">-- ("Setter" command)</span>
    <span class="kw2">do</span>
        ...
    <span class="kw2">end</span>
</pre></div>
<p>Then to insert an element you have to use an explicit call to the setter command:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-eiffel">
   <span class="br0">[</span><span class="nu0">4</span><span class="br0">]</span> phone_book.<span class="me1">put</span> <span class="br0">(</span>New_person, <span class="st0">"JILL SMITH"</span><span class="br0">)</span>
</pre></div>
<p>It is possible to write this equivalently as</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-eiffel">
   <span class="br0">[</span><span class="nu0">5</span><span class="br0">]</span> phone_book <span class="br0">[</span><span class="st0">"JILL SMITH"</span><span class="br0">]</span> := New_person
</pre></div>
<p>(in the same way that <code>phone_book ["JILL SMITH"]</code> is a synonym for <code>number&#160;:= phone_book.item ("JILL SMITH")</code>), provided the declaration of <code>item</code> now starts (replacement for [3]) with</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-eiffel">
   item <span class="kw2">alias</span> <span class="st0">"[]"</span> <span class="br0">(</span>key: <span class="kw4">STRING</span><span class="br0">)</span>: ELEMENT assign put
</pre></div>
<p>This declares <code>put</code> as the assigner command associated with <code>item</code> and, combined with the bracket alias, makes [5] legal and equivalent to [4]. (It could also be written, without taking advantage of the bracket, as <code>phone_book.item ("JILL SMITH")&#160;:= New_person</code>.</p>
<p>note: The argument list of a's assigner is constrained to be: (a's return type;all of a's argument list...)</p>
<p><a name="Lexical_and_syntax_properties" id="Lexical_and_syntax_properties"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=24" title="Edit section: Lexical and syntax properties">edit</a>]</span> <span class="mw-headline">Lexical and syntax properties</span></h3>
<p>Eiffel is not case-sensitive. The tokens <code>make</code>, <code>maKe</code> and <code>MAKE</code> all denote the same identifier. See, however, the "style rules" below.</p>
<p>Comments are introduced by <code>--</code> (two consecutive dashes) and extend to the end of the line.</p>
<p>The semicolon, as instruction separator, is optional. Most of the time the semicolon is just omitted, except to separate multiple instructions on a line. This results in less clutter on the program page.</p>
<p>There is no nesting of feature and class declarations. As a result the structure of an Eiffel class is simple: some class-level clauses (inheritance, invariant) and a succession of feature declarations, all at the same level.</p>
<p>It is customary to group features into separate "feature clauses" for more readability, with a standard set of basic feature tags appearing in a standard order, for example:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-eiffel">
<span class="kw1">class</span> <span class="kw4">HASH_TABLE</span> <span class="br0">[</span>ELEMENT, KEY -&gt; <span class="kw4">HASHABLE</span><span class="br0">]</span> <span class="kw1">inherit</span> <span class="kw4">TABLE</span> <span class="br0">[</span>ELEMENT<span class="br0">]</span>
 
    <span class="kw1">feature</span> <span class="co1">-- Initialization</span>
         <span class="co1">-- ... Declarations of initialization commands (creation procedures/constructors) ...</span>
 
    <span class="kw1">feature</span> <span class="co1">-- Access</span>
         <span class="co1">-- ... Declarations of non-boolean queries on the object state, e.g. item ...</span>
 
    <span class="kw1">feature</span> <span class="co1">-- Status report</span>
         <span class="co1">-- ... Declarations of boolean queries on the object state, e.g. is_empty ...</span>
 
    <span class="kw1">feature</span> <span class="co1">-- Element change</span>
         <span class="co1">-- ... Declarations of commands that change the structure, e.g. put ...</span>
 
    <span class="co1">-- etc.</span>
<span class="kw2">end</span>
</pre></div>
<p>In contrast to most <a href="/wiki/Curly_bracket_programming_language" title="Curly bracket programming language">curly bracket programming languages</a>, Eiffel makes a clear distinction between expressions and instructions. This is in line with the <a href="/wiki/Command-Query_Separation" title="Command-Query Separation" class="mw-redirect">Command-Query Separation</a> principle of the Eiffel method.</p>
<p><a name="Style_conventions" id="Style_conventions"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=25" title="Edit section: Style conventions">edit</a>]</span> <span class="mw-headline">Style conventions</span></h3>
<p>Much of the documentation of Eiffel uses distinctive style conventions, designed to enforce a consistent look-and-feel. Some of these conventions apply to the code format itself, and others to the standard typographic rendering of Eiffel code in formats and publications where these conventions are possible.</p>
<p>While the language is case-insensitive, the style standards prescribe the use of all-capitals for class names (<code>LIST</code>), all-lower-case for feature names (<code>make</code>), and initial capitals for constants (<code>Avogadro</code>). The recommended style also suggests underscore to separate components of a multi-word identifier, as in <code>average_temperature</code>.</p>
<p>The specification of Eiffel includes guidelines for displaying software texts in typeset formats: keywords in bold, user-defined identifiers and constants are shown in <i><code>italics</code></i>, comments, operators, and punctuation marks in <code>Roman</code>, with program text in <code>blue</code> as in the present article to distinguish it from explanatory text. For example, the "Hello, world!" program given above would be rendered as below in Eiffel documentation:</p>
<pre>
<font color="blue"><b>class</b> 
    <i>HELLO_WORLD</i>
<b>create</b>
    <i>make</i>
<b>feature</b>
   <i>make</i>
      <b>do</b>
         <i>print</i> ("Hello, world!")
      <b>end</b>
<b>end</b></font>
</pre>
<p><a name="Interfaces_to_other_tools_and_languages" id="Interfaces_to_other_tools_and_languages"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=26" title="Edit section: Interfaces to other tools and languages">edit</a>]</span> <span class="mw-headline">Interfaces to other tools and languages</span></h3>
<p>Eiffel is a purely object-oriented language but provides an open architecture for interfacing with "external" software in any other programming language.</p>
<p>It is possible for example to program machine- and operating-system level operations in <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a>. Eiffel provides a straightforward interface to C routines, including support for "inline C" (writing the body of an Eiffel routine in C, typically for short machine-level operations).</p>
<p>Although there is no direct connection between Eiffel and C, many Eiffel <a href="/wiki/Compiler" title="Compiler">compilers</a> except one (<a href="/wiki/Visual_Eiffel" title="Visual Eiffel">Visual Eiffel</a>) output C <a href="/wiki/Source_code" title="Source code">source code</a> as an <a href="/wiki/Intermediate_language" title="Intermediate language">intermediate language</a>, to submit to a C compiler, for <a href="/wiki/Optimization_(computer_science)" title="Optimization (computer science)">optimizing</a> and <a href="/wiki/Porting" title="Porting">portability</a>. The Eiffel Compiler tecomp can execute Eiffel code directly (like an interpreter) without going via an intermediate C code or emit C code which will be passed to a C compiler in order to obtain optimized native code. On .NET, the <a href="/wiki/EiffelStudio" title="EiffelStudio">EiffelStudio</a> compiler directly generates <a href="/wiki/Common_Intermediate_Language" title="Common Intermediate Language">CIL</a> (Common Intermediate Language) code. The <a href="/wiki/SmartEiffel" title="SmartEiffel">SmartEiffel</a> compiler can also output <a href="/wiki/Java_bytecode" title="Java bytecode">Java bytecode</a>.</p>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=27" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<div class="references-small">
<ol class="references">
<li id="cite_note-0"><b><a href="#cite_ref-0" title="">^</a></b> <i>Object-Oriented Software Construction</i>, Second Edition, by <a href="/wiki/Bertrand_Meyer" title="Bertrand Meyer">Bertrand Meyer</a>, Prentice Hall, 1997, <a href="/wiki/Special:BookSources/0136291554" class="internal">ISBN 0-13-629155-4</a></li>
<li id="cite_note-1"><b><a href="#cite_ref-1" title="">^</a></b> ECMA International: <cite>Standard ECMA-367 —Eiffel: Analysis, Design and Programming Language 2nd edition (June 2006)</cite>; available online at <a href="http://www.ecma-international.org/publications/standards/Ecma-367.htm" class="external text" title="http://www.ecma-international.org/publications/standards/Ecma-367.htm" rel="nofollow">www.ecma-international.org/publications/standards/Ecma-367.htm</a></li>
<li id="cite_note-2"><b><a href="#cite_ref-2" title="">^</a></b> International Organisation for Standardisation: <cite>Standard ISO/IEC DIS 25436</cite>, available online at <a href="http://www.iso.org/iso/en/CatalogueDetailPage.CatalogueDetail?CSNUMBER=42924&amp;ICS1=35&amp;ICS2=60&amp;ICS3=" class="external autonumber" title="http://www.iso.org/iso/en/CatalogueDetailPage.CatalogueDetail?CSNUMBER=42924&amp;ICS1=35&amp;ICS2=60&amp;ICS3=" rel="nofollow">[1]</a></li>
<li id="cite_note-3"><b><a href="#cite_ref-3" title="">^</a></b> Bertrand Meyer: Overloading vs Object Technology, in Journal of Object-Oriented Programming (JOOP), vol. 14, no. 4, October-November 2001, available <a href="http://se.ethz.ch/~meyer/publications/joop/overloading.pdf" class="external text" title="http://se.ethz.ch/~meyer/publications/joop/overloading.pdf" rel="nofollow">online</a></li>
<li id="cite_note-4"><b><a href="#cite_ref-4" title="">^</a></b> Philippe Ribet, Cyril Adrian, Olivier Zendra, Dominique Colnet: <i>Conformance of agents in the Eiffel language</i>, in <a href="/wiki/JOT:_Journal_of_Object_Technology" title="JOT: Journal of Object Technology"><i>Journal of Object Technology</i></a>, vol. 3, no. 4, April 2004, Special issue: TOOLS USA 2003, pp. 125-143. Available on line from the <a href="http://www.jot.fm/issues/issue_2004_04/article7" class="external text" title="http://www.jot.fm/issues/issue_2004_04/article7" rel="nofollow">JOT article page</a></li>
</ol>
</div>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit&amp;section=28" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<ul>
<li><a href="http://se.ethz.ch/~meyer/publications/online/eiffel/basic.html" class="external text" title="http://se.ethz.ch/~meyer/publications/online/eiffel/basic.html" rel="nofollow">Basic Eiffel Language Mechanisms</a>, <a href="http://se.ethz.ch/~meyer/" class="external text" title="http://se.ethz.ch/~meyer/" rel="nofollow">Bertrand Meyer</a>, August 2006.</li>
<li><a href="http://dev.eiffel.com" class="external text" title="http://dev.eiffel.com" rel="nofollow">Eiffel Software's Open Source initiative</a></li>
<li><a href="http://www.eiffel.com/" class="external text" title="http://www.eiffel.com/" rel="nofollow">Eiffel Software</a> web site of the company that introduced Eiffel, was Interactive Software Engineering (ISE).</li>
<li>Eiffel tutorial (100 pages) by <a href="/wiki/Bertrand_Meyer" title="Bertrand Meyer">Bertrand Meyer</a> (<a href="http://archive.eiffel.com/doc/online/eiffel50/intro/language/tutorial-00.html" class="external text" title="http://archive.eiffel.com/doc/online/eiffel50/intro/language/tutorial-00.html" rel="nofollow">HTML</a>, <a href="http://www.eiffel.com/doc/online/eiffel50/intro/language/tutorial.pdf" class="external text" title="http://www.eiffel.com/doc/online/eiffel50/intro/language/tutorial.pdf" rel="nofollow">PDF</a>)</li>
<li><a href="http://www.ecma-international.org/publications/standards/Ecma-367.htm" class="external text" title="http://www.ecma-international.org/publications/standards/Ecma-367.htm" rel="nofollow">Eiffel standard</a>, revision 2 (2006); this is the ECMA standard, with free access, its text identical to that of the ISO standard.</li>
<li><a href="http://smarteiffel.loria.fr/" class="external text" title="http://smarteiffel.loria.fr/" rel="nofollow">SmartEiffel</a> fairly complete Eiffel compiler, released under GNU GPL license, was SmallEiffel, not ECMA standard compliant.</li>
<li><a href="http://www.sourceforge.net/projects/tecomp" class="external text" title="http://www.sourceforge.net/projects/tecomp" rel="nofollow">"The Eiffel Compiler" (tecomp)</a> an <a href="/wiki/Open_source" title="Open source">open source</a> Eiffel compiler with <a href="http://tecomp.sourceforge.net" class="external text" title="http://tecomp.sourceforge.net" rel="nofollow">documentation</a>.</li>
<li><a href="http://visual-eiffel.org" class="external text" title="http://visual-eiffel.org" rel="nofollow">Visual Eiffel</a> an <a href="/wiki/Open_source" title="Open source">open source</a> implementation of Eiffel creating <a href="/wiki/Native_code" title="Native code" class="mw-redirect">native code</a> for X86 systems (Windows, Linux)</li>
<li><a href="http://www.eiffel-nice.org/" class="external text" title="http://www.eiffel-nice.org/" rel="nofollow">NICE</a> Nonprofit International Consortium for Eiffel.</li>
<li><a href="http://www.eiffelroom.com/" class="external text" title="http://www.eiffelroom.com/" rel="nofollow">eiffelroom.com</a> Community around standard Eiffel</li>
<li><a href="http://eiffelzone.com/" class="external text" title="http://eiffelzone.com/" rel="nofollow">eiffelzone.com</a> Includes a comprehensive Eiffel Software Directory</li>
<li><a href="http://www.cetus-links.org/oo_eiffel.html" class="external text" title="http://www.cetus-links.org/oo_eiffel.html" rel="nofollow">Cetus Eiffel Page</a></li>
<li><a href="http://www.eiffel.com/products/envsn" class="external text" title="http://www.eiffel.com/products/envsn" rel="nofollow">Eiffel for .Net</a></li>
<li><a href="http://archive.eiffel.com/nice/language/" class="external text" title="http://archive.eiffel.com/nice/language/" rel="nofollow"><cite>Eiffel: the Language</cite></a> subset</li>
</ul>
<table class="navbox" cellspacing="0" style=";">
<tr>
<td style="padding:2px;">
<table cellspacing="0" class="nowraplinks collapsible autocollapse" style="width:100%;background:transparent;color:inherit;;">
<tr>
<th style=";" colspan="2" class="navbox-title">
<div style="float:left; width:6em;text-align:left;">
<div class="noprint plainlinksneverexpand navbar" style="background:none; padding:0; font-weight:normal;;;border:none;; font-size:xx-small;"><a href="/wiki/Template:Ecma_International_Standards" title="Template:Ecma International Standards"><span title="View this template" style=";;border:none;">v</span></a>&#160;•&#160;<a href="/w/index.php?title=Template_talk:Ecma_International_Standards&amp;action=edit&amp;redlink=1" class="new" title="Template talk:Ecma International Standards (page does not exist)"><span title="Discussion about this template" style=";;border:none;">d</span></a>&#160;•&#160;<a href="http://en.wikipedia.org/w/index.php?title=Template:Ecma_International_Standards&amp;action=edit" class="external text" title="http://en.wikipedia.org/w/index.php?title=Template:Ecma_International_Standards&amp;action=edit" rel="nofollow"><span title="Edit this template" style=";;border:none;;">e</span></a></div>
</div>
<span style="font-size:110%;">Standards of <a href="/wiki/Ecma_International" title="Ecma International">Ecma International</a></span></th>
</tr>
<tr style="height:2px;">
<td></td>
</tr>
<tr>
<td colspan="2" style="width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<div style="padding:0em 0.25em"><a href="/wiki/ANSI_escape_code" title="ANSI escape code">ANSI escape code</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/C%2B%2B/CLI" title="C++/CLI">C++/CLI</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/C_Sharp_(programming_language)" title="C Sharp (programming language)">C#</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/CD-ROM" title="CD-ROM">CD-ROM</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Common_Language_Infrastructure" title="Common Language Infrastructure">CLI</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Digital_Data_Storage" title="Digital Data Storage">DDS</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/ECMAScript_for_XML" title="ECMAScript for XML">E4X</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/ECMAScript" title="ECMAScript">ECMAScript</a><span style="font-weight:bold;">&#160;·</span> <strong class="selflink">Eiffel</strong><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/File_Allocation_Table" title="File Allocation Table">FAT</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Floppy_disk" title="Floppy disk">FD</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Holographic_Versatile_Disc" title="Holographic Versatile Disc">HVD</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Office_Open_XML" title="Office Open XML">Office Open XML</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Universal_3D" title="Universal 3D">U3D</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Universal_Disk_Format" title="Universal Disk Format">UDF</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Ultra_Density_Optical" title="Ultra Density Optical">UDO</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Universal_Media_Disc" title="Universal Media Disc">UMD</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Ultra-wideband" title="Ultra-wideband">UWB</a></div>
</td>
</tr>
<tr style="height:2px;">
<td></td>
</tr>
<tr>
<td class="navbox-abovebelow" style=";" colspan="2"><a href="/wiki/List_of_Ecma_standards" title="List of Ecma standards">List of Ecma standards</a></td>
</tr>
</table>
</td>
</tr>
</table>


<!-- 
NewPP limit report
Preprocessor node count: 1419/1000000
Post-expand include size: 17525/2048000 bytes
Template argument size: 7164/2048000 bytes
Expensive parser function count: 0/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:9838-0!1!0!default!!en!2 and timestamp 20090402023545 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Eiffel_(programming_language)">http://en.wikipedia.org/wiki/Eiffel_(programming_language)</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Object-oriented_programming_languages" title="Category:Object-oriented programming languages">Object-oriented programming languages</a></span> | <span dir='ltr'><a href="/wiki/Category:Class-based_programming_languages" title="Category:Class-based programming languages">Class-based programming languages</a></span> | <span dir='ltr'><a href="/wiki/Category:Object-oriented_programming" title="Category:Object-oriented programming">Object-oriented programming</a></span> | <span dir='ltr'><a href="/wiki/Category:Formal_specification_languages" title="Category:Formal specification languages">Formal specification languages</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Eiffel_(programming_language)" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Eiffel_(programming_language)" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Eiffel_(programming_language)&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Eiffel_(programming_language)" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Eiffel_(programming_language)" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Eiffel_(programming_language)" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Eiffel_(programming_language)&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Eiffel_(programming_language)&amp;oldid=273327528" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Eiffel_(programming_language)&amp;id=273327528">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-an"><a href="http://an.wikipedia.org/wiki/Luengache_de_programazi%C3%B3n_Eiffel">Aragonés</a></li>
				<li class="interwiki-cs"><a href="http://cs.wikipedia.org/wiki/Eiffel">Česky</a></li>
				<li class="interwiki-da"><a href="http://da.wikipedia.org/wiki/Eiffel_(programmeringssprog)">Dansk</a></li>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/Eiffel_(Programmiersprache)">Deutsch</a></li>
				<li class="interwiki-es"><a href="http://es.wikipedia.org/wiki/Lenguaje_de_programaci%C3%B3n_Eiffel">Español</a></li>
				<li class="interwiki-eo"><a href="http://eo.wikipedia.org/wiki/Eiffel_(programlingvo)">Esperanto</a></li>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Eiffel_(langage)">Français</a></li>
				<li class="interwiki-gl"><a href="http://gl.wikipedia.org/wiki/Linguaxe_de_programaci%C3%B3n_Eiffel">Galego</a></li>
				<li class="interwiki-it"><a href="http://it.wikipedia.org/wiki/Eiffel_(linguaggio)">Italiano</a></li>
				<li class="interwiki-hu"><a href="http://hu.wikipedia.org/wiki/Eiffel_(programoz%C3%A1si_nyelv)">Magyar</a></li>
				<li class="interwiki-nl"><a href="http://nl.wikipedia.org/wiki/Eiffel_(programmeertaal)">Nederlands</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/Eiffel">日本語</a></li>
				<li class="interwiki-pl"><a href="http://pl.wikipedia.org/wiki/Eiffel_(j%C4%99zyk_programowania)">Polski</a></li>
				<li class="interwiki-pt"><a href="http://pt.wikipedia.org/wiki/Eiffel_(linguagem_de_programa%C3%A7%C3%A3o)">Português</a></li>
				<li class="interwiki-ru"><a href="http://ru.wikipedia.org/wiki/%D0%AD%D0%B9%D1%84%D0%B5%D0%BB%D1%8C_(%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)">Русский</a></li>
				<li class="interwiki-sk"><a href="http://sk.wikipedia.org/wiki/Eiffel_(programovac%C3%AD_jazyk)">Slovenčina</a></li>
				<li class="interwiki-fi"><a href="http://fi.wikipedia.org/wiki/Eiffel_(ohjelmointikieli)">Suomi</a></li>
				<li class="interwiki-uk"><a href="http://uk.wikipedia.org/wiki/Eiffel">Українська</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 26 February 2009, at 01:30.</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv225 in 0.041 secs. --></body></html>
