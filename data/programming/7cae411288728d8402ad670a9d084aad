<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Control flow,Articles with unsourced statements since May 2007,Special:Search/Control flow,Control flow,Ada programming language,Algol 60,Algol 68,Algol programming language,AppleScript,Assembly language,Asynchronous systems" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Control_flow&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Control_flow&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Control flow - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Control_flow";
		var wgTitle = "Control flow";
		var wgAction = "view";
		var wgArticleId = "45459";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 277197961;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
<style type="text/css">/*<![CDATA[*/
.source-qbasic {line-height: normal;}
.source-qbasic li, .source-qbasic pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for qbasic
 * CSS class: source-qbasic, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-qbasic .de1, .source-qbasic .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-qbasic  {}
.source-qbasic .head {}
.source-qbasic .foot {}
.source-qbasic .imp {font-weight: bold; color: red;}
.source-qbasic .ln-xtra {color: #cc0; background-color: #ffc;}
.source-qbasic li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-qbasic li.li2 {font-weight: bold;}
.source-qbasic .kw1 {color: #a1a100;}
.source-qbasic .kw3 {color: #000066;}
.source-qbasic .co1 {color: #808080;}
.source-qbasic .co2 {color: #808080;}
.source-qbasic .co3 {color: #808080;}
.source-qbasic .es0 {color: #000099;}
.source-qbasic .br0 {color: #66cc66;}
.source-qbasic .st0 {color: #ff0000;}
.source-qbasic .nu0 {color: #cc66cc;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-c .de1, .source-c .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-c  {}
.source-c .head {}
.source-c .foot {}
.source-c .imp {font-weight: bold; color: red;}
.source-c .ln-xtra {color: #cc0; background-color: #ffc;}
.source-c li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-c li.li2 {font-weight: bold;}
.source-c .kw1 {color: #b1b100;}
.source-c .kw2 {color: #000000; font-weight: bold;}
.source-c .kw3 {color: #000066;}
.source-c .kw4 {color: #993333;}
.source-c .co1 {color: #808080; font-style: italic;}
.source-c .co2 {color: #339933;}
.source-c .coMULTI {color: #808080; font-style: italic;}
.source-c .es0 {color: #000099; font-weight: bold;}
.source-c .br0 {color: #66cc66;}
.source-c .st0 {color: #ff0000;}
.source-c .nu0 {color: #cc66cc;}
.source-c .me1 {color: #202020;}
.source-c .me2 {color: #202020;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-ada {line-height: normal;}
.source-ada li, .source-ada pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for ada
 * CSS class: source-ada, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-ada .de1, .source-ada .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-ada  {}
.source-ada .head {}
.source-ada .foot {}
.source-ada .imp {font-weight: bold; color: red;}
.source-ada .ln-xtra {color: #cc0; background-color: #ffc;}
.source-ada li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-ada li.li2 {font-weight: bold;}
.source-ada .kw1 {color: #00007f;}
.source-ada .kw2 {color: #0000ff;}
.source-ada .kw3 {color: #46aa03; font-weight:bold;}
.source-ada .co1 {color: #adadad; font-style: italic;}
.source-ada .coMULTI {color: #808080; font-style: italic;}
.source-ada .es0 {color: #000099; font-weight: bold;}
.source-ada .br0 {color: #66cc66;}
.source-ada .st0 {color: #7f007f;}
.source-ada .nu0 {color: #ff0000;}
.source-ada .me1 {color: #202020;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-python {line-height: normal;}
.source-python li, .source-python pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for python
 * CSS class: source-python, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-python .de1, .source-python .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-python  {}
.source-python .head {}
.source-python .foot {}
.source-python .imp {font-weight: bold; color: red;}
.source-python .ln-xtra {color: #cc0; background-color: #ffc;}
.source-python li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-python li.li2 {font-weight: bold;}
.source-python .kw1 {color: #ff7700;font-weight:bold;}
.source-python .kw2 {color: #008000;}
.source-python .kw3 {color: #dc143c;}
.source-python .kw4 {color: #0000cd;}
.source-python .co1 {color: #808080; font-style: italic;}
.source-python .coMULTI {color: #808080; font-style: italic;}
.source-python .es0 {color: #000099; font-weight: bold;}
.source-python .br0 {color: #66cc66;}
.source-python .st0 {color: #483d8b;}
.source-python .nu0 {color: #ff4500;}
.source-python .me1 {color: black;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-cpp {line-height: normal;}
.source-cpp li, .source-cpp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for cpp
 * CSS class: source-cpp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-cpp .de1, .source-cpp .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-cpp  {}
.source-cpp .head {}
.source-cpp .foot {}
.source-cpp .imp {font-weight: bold; color: red;}
.source-cpp .ln-xtra {color: #cc0; background-color: #ffc;}
.source-cpp li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-cpp li.li2 {font-weight: bold;}
.source-cpp .kw1 {color: #0000ff;}
.source-cpp .kw2 {color: #0000ff;}
.source-cpp .kw3 {color: #0000dd;}
.source-cpp .kw4 {color: #0000ff;}
.source-cpp .co1 {color: #ff0000;}
.source-cpp .co2 {color: #339900;}
.source-cpp .coMULTI {color: #ff0000; font-style: italic;}
.source-cpp .es0 {color: #666666; font-weight: bold;}
.source-cpp .br0 {color: #000000;}
.source-cpp .st0 {color: #666666;}
.source-cpp .nu0 {color: #0000dd;}
.source-cpp .me1 {color: #00eeff;}
.source-cpp .me2 {color: #00eeff;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-csharp {line-height: normal;}
.source-csharp li, .source-csharp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for csharp
 * CSS class: source-csharp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-csharp .de1, .source-csharp .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-csharp  {}
.source-csharp .head {}
.source-csharp .foot {}
.source-csharp .imp {font-weight: bold; color: red;}
.source-csharp .ln-xtra {color: #cc0; background-color: #ffc;}
.source-csharp li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-csharp li.li2 {font-weight: bold;}
.source-csharp .kw1 {color: #0600FF;}
.source-csharp .kw2 {color: #FF8000; font-weight: bold;}
.source-csharp .kw3 {color: #008000;}
.source-csharp .kw4 {color: #FF0000;}
.source-csharp .kw5 {color: #000000;}
.source-csharp .co1 {color: #008080; font-style: italic;}
.source-csharp .co2 {color: #008080;}
.source-csharp .coMULTI {color: #008080; font-style: italic;}
.source-csharp .es0 {color: #008080; font-weight: bold;}
.source-csharp .br0 {color: #008000;}
.source-csharp .st0 {color: #808080;}
.source-csharp .nu0 {color: #FF0000;}
.source-csharp .me1 {color: #0000FF;}
.source-csharp .me2 {color: #0000FF;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-applescript {line-height: normal;}
.source-applescript li, .source-applescript pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for applescript
 * CSS class: source-applescript, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-applescript .de1, .source-applescript .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-applescript  {}
.source-applescript .head {}
.source-applescript .foot {}
.source-applescript .imp {font-weight: bold; color: red;}
.source-applescript .ln-xtra {color: #cc0; background-color: #ffc;}
.source-applescript li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-applescript li.li2 {font-weight: bold;}
.source-applescript .kw1 {color: #b1b100;}
.source-applescript .kw2 {color: #000000; font-weight: bold;}
.source-applescript .kw3 {color: #000066;}
.source-applescript .co1 {color: #808080; font-style: italic;}
.source-applescript .coMULTI {color: #808080; font-style: italic;}
.source-applescript .es0 {color: #000099; font-weight: bold;}
.source-applescript .br0 {color: #66cc66;}
.source-applescript .st0 {color: #ff0000;}
.source-applescript .nu0 {color: #cc66cc;}
.source-applescript .me1 {color: #006600;}
.source-applescript .me2 {color: #006600;}
.source-applescript .re0 {color: #0000ff;}
.source-applescript .re4 {color: #009999;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style>		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Control_flow skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Control flow</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<div class="dablink">Not to be confused with <a href="/wiki/Flow_control" title="Flow control">flow control</a>.</div>
<p>In <a href="/wiki/Computer_science" title="Computer science">computer science</a> <b>control flow</b> (or alternatively, flow of control) refers to the order in which the individual <a href="/wiki/Statement_(programming)" title="Statement (programming)">statements</a>, <a href="/wiki/Instruction_(computer_science)" title="Instruction (computer science)">instructions</a> or <a href="/wiki/Function_call" title="Function call" class="mw-redirect">function calls</a> of an <a href="/wiki/Imperative_programming" title="Imperative programming">imperative</a> or <a href="/wiki/Functional_programming" title="Functional programming">functional</a> <a href="/wiki/Computer_program" title="Computer program">program</a> are <a href="/wiki/Execution_(computers)" title="Execution (computers)" class="mw-redirect">executed</a> or evaluated.</p>
<p>Within an imperative <a href="/wiki/Programming_language" title="Programming language">programming language</a>, a <b>control flow statement</b> is a statement whose execution results in a choice being made as to which of two or more paths should be followed. For <a href="/wiki/Strict_programming_language" title="Strict programming language">non-strict</a> functional languages, functions and language constructs exist to achieve the same result, but they are not necessarily called control flow statements.</p>
<p>The kinds of control flow statements supported by different languages vary, but can be categorized by their effect:</p>
<ul>
<li>continuation at a different statement (<a href="/wiki/Unconditional_branch" title="Unconditional branch" class="mw-redirect">unconditional branch</a> or <a href="/wiki/Branch_(computer_science)" title="Branch (computer science)">jump</a>),</li>
<li>executing a set of statements only if some condition is met (choice - i.e. <a href="/wiki/Conditional_branch" title="Conditional branch" class="mw-redirect">conditional branch</a>),</li>
<li>executing a set of statements zero or more times, until some condition is met (i.e. loop - the same as <a href="/wiki/Conditional_branch" title="Conditional branch" class="mw-redirect">conditional branch</a>),</li>
<li>executing a set of distant statements, after which the flow of control usually returns (<a href="/wiki/Subroutine" title="Subroutine">subroutines</a>, <a href="/wiki/Coroutine" title="Coroutine">coroutines</a>, and <a href="/wiki/Continuation" title="Continuation">continuations</a>),</li>
<li>stopping the program, preventing any further execution (unconditional halt).</li>
</ul>
<p><a href="/wiki/Interrupt" title="Interrupt">Interrupts</a> and <a href="/wiki/Signal_(computing)" title="Signal (computing)">signals</a> are low-level mechanisms that can alter the flow of control in a way similar to a subroutine, but usually occur as a response to some external stimulus or event (that can occur <a href="/wiki/Asynchronous_systems" title="Asynchronous systems">asynchronously</a>), rather than execution of an 'in-line' control flow statement. <a href="/wiki/Self-modifying_code" title="Self-modifying code">Self-modifying code</a> can also be used to affect control flow through its <a href="/wiki/Side_effect_(computer_science)" title="Side effect (computer science)">side effects</a>, but usually does not involve an explicit control flow statement (an exception being the ALTER verb in <a href="/wiki/COBOL" title="COBOL">COBOL</a><sup class="noprint Template-Fact"><span title="This claim needs references to reliable sources&#160;since May 2007" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</span></sup>).</p>
<p>At the level of <a href="/wiki/Machine_language" title="Machine language" class="mw-redirect">machine</a> or <a href="/wiki/Assembly_language" title="Assembly language">assembly language</a>, control flow instructions usually work by altering the <a href="/wiki/Program_counter" title="Program counter">program counter</a>. For some <a href="/wiki/Central_processing_unit" title="Central processing unit">CPUs</a> the only control flow instructions available are conditional or unconditional <a href="/wiki/Branch_(computer_science)" title="Branch (computer science)">branches</a> (sometimes called jumps).</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Primitives"><span class="tocnumber">1</span> <span class="toctext">Primitives</span></a>
<ul>
<li class="toclevel-2"><a href="#Labels"><span class="tocnumber">1.1</span> <span class="toctext">Labels</span></a></li>
<li class="toclevel-2"><a href="#Goto"><span class="tocnumber">1.2</span> <span class="toctext">Goto</span></a></li>
<li class="toclevel-2"><a href="#Subroutines"><span class="tocnumber">1.3</span> <span class="toctext">Subroutines</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Minimal_structured_control_flow"><span class="tocnumber">2</span> <span class="toctext">Minimal structured control flow</span></a></li>
<li class="toclevel-1"><a href="#Control_structures_in_practice"><span class="tocnumber">3</span> <span class="toctext">Control structures in practice</span></a></li>
<li class="toclevel-1"><a href="#Choice"><span class="tocnumber">4</span> <span class="toctext">Choice</span></a></li>
<li class="toclevel-1"><a href="#Loops"><span class="tocnumber">5</span> <span class="toctext">Loops</span></a>
<ul>
<li class="toclevel-2"><a href="#Count-controlled_loops"><span class="tocnumber">5.1</span> <span class="toctext">Count-controlled loops</span></a></li>
<li class="toclevel-2"><a href="#Condition-controlled_loops"><span class="tocnumber">5.2</span> <span class="toctext">Condition-controlled loops</span></a></li>
<li class="toclevel-2"><a href="#Collection-controlled_loops"><span class="tocnumber">5.3</span> <span class="toctext">Collection-controlled loops</span></a></li>
<li class="toclevel-2"><a href="#General_iteration"><span class="tocnumber">5.4</span> <span class="toctext">General iteration</span></a></li>
<li class="toclevel-2"><a href="#Infinite_loops"><span class="tocnumber">5.5</span> <span class="toctext">Infinite loops</span></a></li>
<li class="toclevel-2"><a href="#Continuation_with_next_iteration"><span class="tocnumber">5.6</span> <span class="toctext">Continuation with next iteration</span></a></li>
<li class="toclevel-2"><a href="#Redo_current_iteration"><span class="tocnumber">5.7</span> <span class="toctext">Redo current iteration</span></a></li>
<li class="toclevel-2"><a href="#Early_exit_from_loops"><span class="tocnumber">5.8</span> <span class="toctext">Early exit from loops</span></a></li>
<li class="toclevel-2"><a href="#Loop_system_cross_reference_table"><span class="tocnumber">5.9</span> <span class="toctext">Loop system cross reference table</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Structured_non-local_control_flow"><span class="tocnumber">6</span> <span class="toctext">Structured non-local control flow</span></a>
<ul>
<li class="toclevel-2"><a href="#Conditions"><span class="tocnumber">6.1</span> <span class="toctext">Conditions</span></a></li>
<li class="toclevel-2"><a href="#Exceptions"><span class="tocnumber">6.2</span> <span class="toctext">Exceptions</span></a></li>
<li class="toclevel-2"><a href="#Continuations"><span class="tocnumber">6.3</span> <span class="toctext">Continuations</span></a></li>
<li class="toclevel-2"><a href="#Non-local_control_flow_cross_reference"><span class="tocnumber">6.4</span> <span class="toctext">Non-local control flow cross reference</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Proposed_control_structures"><span class="tocnumber">7</span> <span class="toctext">Proposed control structures</span></a>
<ul>
<li class="toclevel-2"><a href="#Loop_with_test_in_the_middle"><span class="tocnumber">7.1</span> <span class="toctext">Loop with test in the middle</span></a></li>
<li class="toclevel-2"><a href="#Multiple_early_exit.2Fexit_from_nested_loops"><span class="tocnumber">7.2</span> <span class="toctext">Multiple early exit/exit from nested loops</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">8</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">9</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">10</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Primitives" id="Primitives"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Control_flow&amp;action=edit&amp;section=1" title="Edit section: Primitives">edit</a>]</span> <span class="mw-headline">Primitives</span></h2>
<p><a name="Labels" id="Labels"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Control_flow&amp;action=edit&amp;section=2" title="Edit section: Labels">edit</a>]</span> <span class="mw-headline">Labels</span></h3>
<div class="rellink noprint relarticle mainarticle">Main article: <a href="/wiki/Label_(programming_language)" title="Label (programming language)">Label (programming language)</a></div>
<p>A <a href="/wiki/Label_(programming_language)" title="Label (programming language)">label</a> is an explicit name or number assigned to a fixed position within the <a href="/wiki/Source_code" title="Source code">source code</a>, and which may be referenced by control flow statements appearing elsewhere in the source code. Other than marking a position within the source code a label has no effect.</p>
<p><a href="/wiki/Line_number" title="Line number">Line numbers</a> are an alternative to a named label and used in some languages such as <a href="/wiki/Fortran" title="Fortran">Fortran</a> and <a href="/wiki/BASIC_programming_language" title="BASIC programming language" class="mw-redirect">BASIC</a>), that are <a href="/wiki/Whole_number" title="Whole number">whole numbers</a> placed at the beginning of each line of text within the source code. Languages which use these often impose the constraint that the line numbers must increase in value in each subsequent line, but may not require that they be consecutive. For example, in BASIC:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-qbasic">
<span class="nu0">10</span> <span class="kw3">LET</span> X = <span class="nu0">3</span>
<span class="nu0">20</span> <span class="kw3">PRINT</span> X
</pre></div>
<p>In other languages such as <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a> and <a href="/wiki/Ada_programming_language" title="Ada programming language" class="mw-redirect">Ada</a> a label is an <a href="/wiki/Identifier" title="Identifier">identifier</a>, usually appearing at the beginning of a line and immediately followed by a colon. For example, in C:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
Success: <span class="kw3">printf</span> <span class="br0">(</span><span class="st0">"The operation was successful.<span class="es0">\n</span>"</span><span class="br0">)</span>;
</pre></div>
<p>The <a href="/wiki/Algol_60" title="Algol 60" class="mw-redirect">Algol 60</a> language allowed both whole numbers and identifiers as labels (both attached by colons to the following statement), but few if any other variants of Algol allowed whole numbers.</p>
<p><a name="Goto" id="Goto"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Control_flow&amp;action=edit&amp;section=3" title="Edit section: Goto">edit</a>]</span> <span class="mw-headline">Goto</span></h3>
<div class="rellink noprint relarticle mainarticle">Main article: <a href="/wiki/GOTO" title="GOTO" class="mw-redirect">GOTO</a></div>
<p>The <b>goto</b> statement (a combination of the English words <i><a href="http://en.wiktionary.org/wiki/go" class="extiw" title="wiktionary:go">go</a></i> and <i><a href="http://en.wiktionary.org/wiki/to" class="extiw" title="wiktionary:to">to</a></i>, and pronounced accordingly) is the most basic form of unconditional transfer of control.</p>
<p>Although the <a href="/wiki/Keyword_(computing)" title="Keyword (computing)" class="mw-redirect">keyword</a> may either be in upper or lower case depending on the language, it is usually written as:</p>
<pre>
   <b>goto</b> <i>label</i>
</pre>
<p>The effect of a goto statement is to cause the next statement to be executed to be the statement appearing at (or immediately after) the indicated label.</p>
<p>Goto statements have been <a href="/wiki/Considered_harmful" title="Considered harmful">considered harmful</a> by many computer scientists, notably <a href="/wiki/Edsger_W._Dijkstra" title="Edsger W. Dijkstra">Dijkstra</a>.</p>
<p><a name="Subroutines" id="Subroutines"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Control_flow&amp;action=edit&amp;section=4" title="Edit section: Subroutines">edit</a>]</span> <span class="mw-headline">Subroutines</span></h3>
<div class="rellink noprint relarticle mainarticle">Main article: <a href="/wiki/Subroutine" title="Subroutine">Subroutine</a></div>
<p>The terminology for <a href="/wiki/Subroutine" title="Subroutine">subroutines</a> varies; they may alternatively be known as routines, procedures, functions (especially if they return results) or methods (especially if they belong to <a href="/wiki/Class_(programming)" title="Class (programming)" class="mw-redirect">classes</a> or <a href="/wiki/Type_class" title="Type class">type classes</a>).</p>
<p>In the 1950s, computer memories were very small by current standards so subroutines were used primarily<sup class="noprint Template-Fact"><span title="This claim needs references to reliable sources&#160;since May 2007" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</span></sup> to reduce program size; a piece of code was written once and then used many times from various other places in the program.</p>
<p>Nowadays, subroutines are more frequently used to help make a program more structured, e.g. by isolating some particular algorithm or hiding some particular data access method. If many programmers are working on a single program, subroutines are one kind of <a href="/wiki/Modularity_(programming)" title="Modularity (programming)" class="mw-redirect">modularity</a> that can help split up the work.</p>
<p><a name="Minimal_structured_control_flow" id="Minimal_structured_control_flow"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Control_flow&amp;action=edit&amp;section=5" title="Edit section: Minimal structured control flow">edit</a>]</span> <span class="mw-headline">Minimal structured control flow</span></h2>
<p>(See also <a href="/wiki/Structured_program_theorem" title="Structured program theorem">Structured program theorem</a>.) In May 1966, Böhm and Jacopini published an article<sup id="cite_ref-0" class="reference"><a href="#cite_note-0" title=""><span>[</span>1<span>]</span></a></sup> in Communications of the ACM which showed that any program with <b>goto</b>s could be transformed into a goto-free form involving only choice (IF THEN ELSE) and loops (WHILE condition DO xxx), possibly with duplicated code and/or the addition of Boolean variables (true/false flags). Later authors have shown that choice can be replaced by loops (and yet more Boolean variables).</p>
<p>The fact that such minimalism is possible does not necessarily mean that it is desirable; after all, computers theoretically only need <a href="/wiki/One_instruction_set_computer" title="One instruction set computer">one machine instruction</a> (subtract one number from another and branch if the result is negative), but practical computers have dozens or even hundreds of machine instructions.</p>
<p>What Böhm and Jacopini's article showed was that all programs could be goto-free. Other research showed that control structures with one entry and one exit were much easier to understand than any other form, primarily because they could be used anywhere as a statement without disrupting the control flow. In other words, they were <i>composable</i>. (Later developments, such as <a href="/wiki/Non-strict_programming_language" title="Non-strict programming language" class="mw-redirect">non-strict programming languages</a> - and more recently, composable <a href="/wiki/Software_transactional_memory" title="Software transactional memory">software transactions</a> - have continued this line of thought, making components of programs even more freely composable.)</p>
<p><a name="Control_structures_in_practice" id="Control_structures_in_practice"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Control_flow&amp;action=edit&amp;section=6" title="Edit section: Control structures in practice">edit</a>]</span> <span class="mw-headline">Control structures in practice</span></h2>
<table class="metadata plainlinks mbox-small" style="border:1px solid #aaa; background-color:#f9f9f9;">
<tr>
<td class="mbox-image"><a href="http://en.wikibooks.org/wiki/Special:Search/Control_flow" title="b:Special:Search/Control flow"><img alt="Sister project" src="http://upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/40px-Wikibooks-logo-en-noslogan.svg.png" width="40" height="40" border="0" /></a></td>
<td class="mbox-text" style="">The <a href="/wiki/Wikibooks" title="Wikibooks">Wikibook</a> <i><a href="http://en.wikibooks.org/wiki/Computer_programming" class="extiw" title="wikibooks:Computer programming">Computer programming</a></i> has a page on the topic of
<div style="margin-left:10px;"><i><b><a href="http://en.wikibooks.org/wiki/Computer_programming/Control" class="extiw" title="wikibooks:Computer programming/Control">Control</a></b></i></div>
</td>
</tr>
</table>
<p>Most programming languages with control structures have an initial keyword which indicates the type of control structure involved. Languages then divide as to whether or not control structures have a final keyword.</p>
<ul>
<li>No final keyword: <a href="/wiki/Algol_programming_language" title="Algol programming language" class="mw-redirect">Algol 60</a>, <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a>, <a href="/wiki/C%2B%2B" title="C++">C++</a>, <a href="/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell</a>, <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a>, <a href="/wiki/Pascal_programming_language" title="Pascal programming language" class="mw-redirect">Pascal</a>, <a href="/wiki/Perl" title="Perl">Perl</a>, <a href="/wiki/PHP" title="PHP">PHP</a>, <a href="/wiki/PL/I_programming_language" title="PL/I programming language" class="mw-redirect">PL/I</a>, <a href="/wiki/Python_(programming_language)" title="Python (programming language)">Python</a>, <a href="/wiki/Windows_PowerShell" title="Windows PowerShell">PowerShell</a>. Such languages need some way of grouping statements together:
<ul>
<li>Algol 60 and Pascal&#160;: <code>begin</code> ... <code>end</code></li>
<li>C, C++, Java, Perl, PHP, and PowerShell: <a href="/wiki/Curly_bracket_programming_language" title="Curly bracket programming language">curly brackets</a> <code>{</code> ... <code>}</code></li>
<li>PL/1: <code>DO</code> ... <code>END</code></li>
<li>Python: uses indentation level (see <a href="/wiki/Off-side_rule" title="Off-side rule">Off-side rule</a>)</li>
<li>Haskell: either indentation level or curly brackets can be used, and they can be freely mixed</li>
</ul>
</li>
<li>Final keyword: <a href="/wiki/Ada_programming_language" title="Ada programming language" class="mw-redirect">Ada</a>, <a href="/wiki/Algol_68" title="Algol 68" class="mw-redirect">Algol 68</a>, <a href="/wiki/Modula-2" title="Modula-2">Modula-2</a>, <a href="/wiki/Fortran" title="Fortran">Fortran 77</a>, <a href="/wiki/Visual_Basic" title="Visual Basic">Visual Basic</a>. The forms of the final keyword vary:
<ul>
<li>Ada: final keyword is <code>end</code> + <i>space</i> + initial keyword e.g. <code>if</code> ... <code>end if</code>, <code>loop</code> ... <code>end loop</code></li>
<li>Algol 68: initial keyword spelled backwards e.g. <code>if</code> ... <code>fi</code>, <code>case</code> ... <code>esac</code></li>
<li>Fortran 77: final keyword is <code>end</code> + initial keyword e.g. <code>IF</code> ... <code>ENDIF</code>, <code>DO</code> ... <code>ENDDO</code></li>
<li>Modula-2: same final keyword <code>end</code> for everything</li>
<li>Visual Basic: every control structure has its own keyword. <code>If</code> ... <code>End If</code>; <code>For</code> ... <code>Next</code>; <code>Do</code> ... <code>Loop</code></li>
</ul>
</li>
</ul>
<p><a name="Choice" id="Choice"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Control_flow&amp;action=edit&amp;section=7" title="Edit section: Choice">edit</a>]</span> <span class="mw-headline">Choice</span></h2>
<div class="rellink noprint relarticle mainarticle">Main article: <a href="/wiki/Conditional_(programming)" title="Conditional (programming)">Conditional (programming)</a></div>
<p><a name="Loops" id="Loops"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Control_flow&amp;action=edit&amp;section=8" title="Edit section: Loops">edit</a>]</span> <span class="mw-headline">Loops</span></h2>
<p>A loop is a sequence of statements which is specified once but which may be carried out several times in succession. The code "inside" the loop (the <i>body</i> of the loop, shown below as <i>xxx</i>) is obeyed a specified number of times, or once for each of a collection of items, or until some condition is met.</p>
<p>In some languages, such as <a href="/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme</a>, loops are often expressed using <a href="/wiki/Tail_recursion" title="Tail recursion">tail recursion</a> rather than explicit looping constructs.</p>
<p><a name="Count-controlled_loops" id="Count-controlled_loops"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Control_flow&amp;action=edit&amp;section=9" title="Edit section: Count-controlled loops">edit</a>]</span> <span class="mw-headline">Count-controlled loops</span></h3>
<div class="rellink noprint relarticle mainarticle">Main article: <a href="/wiki/For_loop" title="For loop">For loop</a></div>
<div class="rellink boilerplate seealso">See also: <a href="/wiki/Loop_counter" title="Loop counter">Loop counter</a></div>
<p>Most programming languages have constructions for repeating a loop a certain number of times. Note that if N is less than 1 in these examples then the language may specify that the body is skipped completely, or that the body is executed just once with N = 1. In most cases counting can go downwards instead of upwards and step sizes other than 1 can be used.</p>
<pre>
   FOR I = 1 TO N            <b>for</b> I := 1 <b>to</b> N <b>do</b> <b>begin</b>
       xxx                       xxx
   NEXT I                    <b>end</b>;

   DO I = 1,N                <b>for</b> ( I=1; I&lt;=N; ++I ) {
       xxx                       xxx
   END DO                    }
</pre>
<p>In many programming languages, only integers can be reliably used in a count-controlled loop. Floating-point numbers are represented imprecisely due to hardware constraints, so a loop such as<br /></p>
<pre>
   <b>for</b> X := 0.1 <b>step</b> 0.1 <b>to</b> 1.0 <b>do</b><br />
</pre>
<p>might be repeated 9 or 10 times, depending on rounding errors and/or the hardware and/or the compiler version. Furthermore, if the increment of X occurs by repeated addition, accumulated rounding errors may mean that the value of X in each iteration can differ quite significantly from the expected sequence 0.1, 0.2, 0.3, ..., 1.0.</p>
<p><a name="Condition-controlled_loops" id="Condition-controlled_loops"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Control_flow&amp;action=edit&amp;section=10" title="Edit section: Condition-controlled loops">edit</a>]</span> <span class="mw-headline">Condition-controlled loops</span></h3>
<div class="rellink noprint relarticle mainarticle">Main article: <a href="/wiki/While_loop" title="While loop">While loop</a></div>
<div class="rellink boilerplate seealso">See also: <a href="/wiki/Do-while_loop" title="Do-while loop" class="mw-redirect">Do-while loop</a></div>
<p>Again, most programming languages have constructions for repeating a loop until some condition changes. Note that some variations place the test at the start of the loop, while others have the test at the end of the loop. In the former case the body may be skipped completely, while in the latter case the body is always obeyed at least once.</p>
<pre>
   DO WHILE (test)           <b>repeat</b> 
       xxx                       xxx 
   LOOP                      <b>until</b> test;

   <b>while</b> (test) {            <b>do</b>
       xxx                       xxx
   }                         <b>while</b> (test);
</pre>
<p><a name="Collection-controlled_loops" id="Collection-controlled_loops"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Control_flow&amp;action=edit&amp;section=11" title="Edit section: Collection-controlled loops">edit</a>]</span> <span class="mw-headline">Collection-controlled loops</span></h3>
<div class="rellink noprint relarticle mainarticle">Main article: <a href="/wiki/Foreach" title="Foreach">Foreach</a></div>
<p>Several programming languages (e.g. <a href="/wiki/Ada_programming_language" title="Ada programming language" class="mw-redirect">Ada</a>, <a href="/wiki/Smalltalk" title="Smalltalk">Smalltalk</a>, <a href="/wiki/Perl" title="Perl">Perl</a>, <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a>, <a href="/wiki/C_Sharp_(programming_language)" title="C Sharp (programming language)">C#</a>, <a href="/wiki/Visual_Basic" title="Visual Basic">Visual Basic</a>, <a href="/wiki/Ruby_(programming_language)" title="Ruby (programming language)">Ruby</a>, <a href="/wiki/Python_(programming_language)" title="Python (programming language)">Python</a>, <a href="/wiki/JavaScript" title="JavaScript">JavaScript</a>) have special constructs which allow implicitly looping through all elements of an array, or all members of a set or collection.</p>
<pre>
   someCollection <b>do</b>: [:eachElement |xxx].

   <b>foreach</b> someArray { xxx }

   Collection&lt;String&gt; coll; <b>for</b> (String s : coll) {}

   <b>foreach</b> (<b>string</b> s <b>in</b> myStringCollection) { xxx }

   $someCollection | ForEach-Object { $_ }
</pre>
<p><a name="General_iteration" id="General_iteration"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Control_flow&amp;action=edit&amp;section=12" title="Edit section: General iteration">edit</a>]</span> <span class="mw-headline">General iteration</span></h3>
<p>General iteration constructs such as C's <b>for</b> statement and <a href="/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a>'s <b>do</b> form can be used to express any of the above sorts of loops, as well as others -- such as looping over a number of collections in parallel. Where a more specific looping construct can be used, it is usually preferred over the general iteration construct, since it often makes the purpose of the expression more clear.</p>
<p><a name="Infinite_loops" id="Infinite_loops"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Control_flow&amp;action=edit&amp;section=13" title="Edit section: Infinite loops">edit</a>]</span> <span class="mw-headline"><a href="/wiki/Infinite_loop" title="Infinite loop">Infinite loops</a></span></h3>
<p>Sometimes it is desirable for a program to loop forever, or until an exceptional condition such as an error arises. For instance, an event-driven program (such as a <a href="/wiki/Server_(computing)" title="Server (computing)">server</a>) may be intended to loop forever handling events as they occur, only stopping when the process is killed by the operator.</p>
<p>Often, an infinite loop is due to a programming error in a condition-controlled loop, wherein the loop condition is never changed within the loop.</p>
<p><a name="Continuation_with_next_iteration" id="Continuation_with_next_iteration"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Control_flow&amp;action=edit&amp;section=14" title="Edit section: Continuation with next iteration">edit</a>]</span> <span class="mw-headline">Continuation with next iteration</span></h3>
<p>Sometimes within the body of a loop there is a desire to skip the remainder of the loop body and continue with the next iteration of the loop. Some languages provide a statement such as <b>continue</b>, <b>skip</b>, or <b>next</b> which will do this. The effect is to prematurely terminate the innermost loop body and then resume as normal with the next iteration. If the iteration is the last one in the loop, the effect is to terminate the entire loop early.</p>
<p><a name="Redo_current_iteration" id="Redo_current_iteration"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Control_flow&amp;action=edit&amp;section=15" title="Edit section: Redo current iteration">edit</a>]</span> <span class="mw-headline">Redo current iteration</span></h3>
<p>Some languages, like Perl and Ruby, have a <b>redo</b> statement that restarts the current iteration from the beginning.</p>
<p><a name="Early_exit_from_loops" id="Early_exit_from_loops"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Control_flow&amp;action=edit&amp;section=16" title="Edit section: Early exit from loops">edit</a>]</span> <span class="mw-headline">Early exit from loops</span></h3>
<p>When using a count-controlled loop to search through a table, it might be desirable to stop searching as soon as the required item is found. Some programming languages provide a statement such as <b>break</b> or <b>exit</b>, whose effect is to terminate the current loop immediately and transfer control to the statement immediately following that loop. Things can get a bit messy if searching a multi-dimensional table using nested loops (see Missing Control Structures below).</p>
<p>The following example is done in <a href="/wiki/Ada_programming_language" title="Ada programming language" class="mw-redirect">Ada</a> which supports both <i><a href="/wiki/Control_flow#Early_exit_from_loops" title="Control flow">early exit from loops</a></i> and <i><a href="/wiki/Control_flow#Loop_with_test_in_the_middle" title="Control flow">loops with test in the middle</a></i>. Both features are very similar and comparing both code snippets will show the difference: <i>early exit</i> needs to be combined with an <b>if</b> statement while a <i>condition in the middle</i> is a self contained construct.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-ada">
<span class="kw3">with</span> Ada.<span class="me1">Text</span> IO;
<span class="kw3">with</span> Ada.<span class="me1">Integer</span> Text IO;
 
<span class="kw3">procedure</span> Print_Squares <span class="kw1">is</span> 
    X : Integer;
<span class="kw1">begin</span>
    Read_Data : <span class="kw1">loop</span>
        Ada.<span class="me1">Integer</span> Text IO.<span class="me1">Get</span><span class="br0">(</span>X<span class="br0">)</span>;
    <span class="kw3">exit</span> Read_Data <span class="kw3">when</span> X = <span class="nu0">0</span>;
        Ada.<span class="me1">Text</span> IO.<span class="me1">Put</span> <span class="br0">(</span>X * X<span class="br0">)</span>;
        Ada.<span class="me1">Text</span> IO.<span class="me1">New_Line</span>;
    <span class="kw1">end</span> <span class="kw1">loop</span> Read_Data;
<span class="kw1">end</span> Print_Squares;
</pre></div>
<p><a href="/wiki/Python_(programming_language)" title="Python (programming language)">Python</a> supports conditional execution of code depending on whether a loop was exited early (with a <code>break</code> statement) or not by using a else-clause with the loop. For example,</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-python">
<span class="kw1">for</span> n <span class="kw1">in</span> set_of_numbers:
    <span class="kw1">if</span> isprime<span class="br0">(</span>n<span class="br0">)</span>:
        <span class="kw1">print</span> <span class="st0">"Set contains a prime number"</span>
        <span class="kw1">break</span>
<span class="kw1">else</span>:
    <span class="kw1">print</span> <span class="st0">"Set did not contain any prime numbers"</span>
</pre></div>
<p>Note that the <code>else</code> clause in the above example is attached to the <code>for</code> statement, and not the inner <code>if</code> statement. Both Python's <code>for</code> and <code>while</code> loops support such an else clause, which is executed only if early exit of the loop did not occur.</p>
<p><a name="Loop_system_cross_reference_table" id="Loop_system_cross_reference_table"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Control_flow&amp;action=edit&amp;section=17" title="Edit section: Loop system cross reference table">edit</a>]</span> <span class="mw-headline">Loop system cross reference table</span></h3>
<table class="wikitable">
<tr>
<th rowspan="2"><a href="/wiki/Programming_language" title="Programming language">Programming language</a></th>
<th colspan="3">conditional</th>
<th colspan="4">loop</th>
<th rowspan="2">early exit</th>
<th rowspan="2">continuation</th>
<th rowspan="2">redo</th>
</tr>
<tr>
<th>begin</th>
<th>middle</th>
<th>end</th>
<th>count</th>
<th>collection</th>
<th>general</th>
<th>infinite <span class="reference"><sup id="ref_loop_infinitea"><a href="#endnote_loop_infinitea" title="">[1]</a></sup></span></th>
</tr>
<tr>
<td><a href="/wiki/Ada_programming_language" title="Ada programming language" class="mw-redirect">Ada</a></td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background: #ffffdd; color: black;" class="table-partial">arrays</td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#90ff90; color:black;" class="table-yes">deep nested</td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td></td>
</tr>
<tr>
<td><a href="/wiki/C_(programming_language)" title="C (programming language)">C</a></td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#ff9090; color:black;" class="table-no">No <span class="reference"><sup id="ref_loop_fora"><a href="#endnote_loop_fora" title="">[2]</a></sup></span></td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background: #ffffdd; color: black;" class="table-partial">deep nested <span class="reference"><sup id="ref_deep_break_ca"><a href="#endnote_deep_break_ca" title="">[3]</a></sup></span></td>
<td style="background: #ffffdd; color: black;" class="table-partial">deep nested <span class="reference"><sup id="ref_deep_break_ca"><a href="#endnote_deep_break_ca" title="">[3]</a></sup></span></td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
</tr>
<tr>
<td><a href="/wiki/C%2B%2B" title="C++">C++</a></td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#ff9090; color:black;" class="table-no">No <span class="reference"><sup id="ref_loop_forb"><a href="#endnote_loop_forb" title="">[2]</a></sup></span></td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background: #ffffdd; color: black;" class="table-partial">deep nested <span class="reference"><sup id="ref_deep_break_cb"><a href="#endnote_deep_break_cb" title="">[3]</a></sup></span></td>
<td style="background: #ffffdd; color: black;" class="table-partial">deep nested <span class="reference"><sup id="ref_deep_break_ca"><a href="#endnote_deep_break_ca" title="">[3]</a></sup></span></td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
</tr>
<tr>
<td><a href="/wiki/C_Sharp_(programming_language)" title="C Sharp (programming language)">C#</a></td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#ff9090; color:black;" class="table-no">No <span class="reference"><sup id="ref_loop_forc"><a href="#endnote_loop_forc" title="">[2]</a></sup></span></td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background: #ffffdd; color: black;" class="table-partial">deep nested <span class="reference"><sup id="ref_deep_break_cc"><a href="#endnote_deep_break_cc" title="">[3]</a></sup></span></td>
<td style="background: #ffffdd; color: black;" class="table-partial">deep nested <span class="reference"><sup id="ref_deep_break_ca"><a href="#endnote_deep_break_ca" title="">[3]</a></sup></span></td>
<td></td>
</tr>
<tr>
<td><a href="/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a></td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#90ff90; color:black;" class="table-yes">deep nested</td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td></td>
</tr>
<tr>
<td><a href="/wiki/FORTRAN_77" title="FORTRAN 77" class="mw-redirect">FORTRAN 77</a></td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background: #ffffdd; color: black;" class="table-partial">one level</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td></td>
</tr>
<tr>
<td><a href="/wiki/Fortran_90" title="Fortran 90" class="mw-redirect">Fortran 90</a></td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#90ff90; color:black;" class="table-yes">deep nested</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td></td>
</tr>
<tr>
<td><a href="/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell</a></td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background:#90ff90; color:black;" class="table-yes">lists</td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#ff9090; color:black;" class="table-no">No <span class="reference"><sup id="ref_deep_break_ea"><a href="#endnote_deep_break_ea" title="">[6]</a></sup></span></td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
</tr>
<tr>
<td><a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a></td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#ff9090; color:black;" class="table-no">No <span class="reference"><sup id="ref_loop_ford"><a href="#endnote_loop_ford" title="">[2]</a></sup></span></td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background:#90ff90; color:black;" class="table-yes">deep nested</td>
<td style="background:#90ff90; color:black;" class="table-yes">deep nested</td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
</tr>
<tr>
<td><a href="/wiki/JavaScript" title="JavaScript">JavaScript</a></td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#ff9090; color:black;" class="table-no">No <span class="reference"><sup id="ref_loop_forg"><a href="#endnote_loop_forg" title="">[2]</a></sup></span></td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background:#90ff90; color:black;" class="table-yes">deep nested</td>
<td style="background:#90ff90; color:black;" class="table-yes">deep nested</td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
</tr>
<tr>
<td><a href="/wiki/OCaml" title="OCaml" class="mw-redirect">OCaml</a></td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#90ff90; color:black;" class="table-yes">arrays,lists</td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background:#ff9090; color:black;" class="table-no">No <span class="reference"><sup id="ref_deep_break_eb"><a href="#endnote_deep_break_eb" title="">[6]</a></sup></span></td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
</tr>
<tr>
<td><a href="/wiki/PHP" title="PHP">PHP</a></td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#ff9090; color:black;" class="table-no">No <span class="reference"><sup id="ref_loop_fore"><a href="#endnote_loop_fore" title="">[2]</a></sup></span> <span class="reference"><sup id="ref_loop_forb"><a href="#endnote_loop_forb" title="">[5]</a></sup></span></td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes <span class="reference"><sup id="ref_loop_phpforeacha"><a href="#endnote_loop_phpforeacha" title="">[4]</a></sup></span></td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background:#90ff90; color:black;" class="table-yes">deep nested</td>
<td style="background:#90ff90; color:black;" class="table-yes">deep nested</td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
</tr>
<tr>
<td><a href="/wiki/Perl" title="Perl">Perl</a></td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#ff9090; color:black;" class="table-no">No <span class="reference"><sup id="ref_loop_forf"><a href="#endnote_loop_forf" title="">[2]</a></sup></span> <span class="reference"><sup id="ref_loop_forc"><a href="#endnote_loop_forc" title="">[5]</a></sup></span></td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background:#90ff90; color:black;" class="table-yes">deep nested</td>
<td style="background:#90ff90; color:black;" class="table-yes">deep nested</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
</tr>
<tr>
<td><a href="/wiki/Python_(programming_language)" title="Python (programming language)">Python</a></td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background:#ff9090; color:black;" class="table-no">No <span class="reference"><sup id="ref_loop_rangea"><a href="#endnote_loop_rangea" title="">[5]</a></sup></span></td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background: #ffffdd; color: black;" class="table-partial">deep nested <span class="reference"><sup id="ref_deep_break_ec"><a href="#endnote_deep_break_ec" title="">[6]</a></sup></span></td>
<td style="background: #ffffdd; color: black;" class="table-partial">deep nested <span class="reference"><sup id="ref_deep_break_ec"><a href="#endnote_deep_break_ec" title="">[6]</a></sup></span></td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
</tr>
<tr>
<td><a href="/wiki/REBOL" title="REBOL">REBOL</a></td>
<td style="background:#ff9090; color:black;" class="table-no">No <span class="reference"><sup id="ref_whilea"><a href="#endnote_whilea" title="">[7]</a></sup></span></td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#ff9090; color:black;" class="table-no">No <span class="reference"><sup id="ref_usera"><a href="#endnote_usera" title="">[8]</a></sup></span></td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background: #ffffdd; color: black;" class="table-partial">one level <span class="reference"><sup id="ref_deep_break_ed"><a href="#endnote_deep_break_ed" title="">[6]</a></sup></span></td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
</tr>
<tr>
<td><a href="/wiki/Ruby_(programming_language)" title="Ruby (programming language)">Ruby</a></td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background: #ffffdd; color: black;" class="table-partial">deep nested <span class="reference"><sup id="ref_deep_break_ee"><a href="#endnote_deep_break_ee" title="">[6]</a></sup></span></td>
<td style="background: #ffffdd; color: black;" class="table-partial">deep nested <span class="reference"><sup id="ref_deep_break_ee"><a href="#endnote_deep_break_ee" title="">[6]</a></sup></span></td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
</tr>
<tr>
<td><a href="/wiki/Visual_Basic_.NET" title="Visual Basic .NET">Visual Basic .NET</a></td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background: #ffffdd; color: black;" class="table-partial">one level per type of loop</td>
<td style="background: #ffffdd; color: black;" class="table-partial">one level per type of loop</td>
<td></td>
</tr>
<tr>
<td><a href="/wiki/Windows_PowerShell" title="Windows PowerShell">Windows PowerShell</a></td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#ff9090; color:black;" class="table-no">No <span class="reference"><sup id="ref_loop_forh"><a href="#endnote_loop_forh" title="">[2]</a></sup></span></td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td><i><b>?</b></i></td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td></td>
</tr>
</table>
<ol>
<li><cite id="endnote_loop_infinitea"><a href="#ref_loop_infinitea" title=""><b><sup>a</sup></b></a></cite>&#160; <code>while (true)</code> does not count as an infinite loop for this purpose, because it is not a dedicated language structure.</li>
<li><cite id="endnote_loop_fora"><a href="#ref_loop_fora" title=""><b><sup>a</sup></b></a></cite>&#160;<cite id="endnote_loop_forb"><a href="#ref_loop_forb" title=""><b><sup>b</sup></b></a></cite>&#160;<cite id="endnote_loop_forc"><a href="#ref_loop_forc" title=""><b><sup>c</sup></b></a></cite>&#160;<cite id="endnote_loop_ford"><a href="#ref_loop_ford" title=""><b><sup>d</sup></b></a></cite>&#160;<cite id="endnote_loop_fore"><a href="#ref_loop_fore" title=""><b><sup>e</sup></b></a></cite>&#160;<cite id="endnote_loop_forf"><a href="#ref_loop_forf" title=""><b><sup>f</sup></b></a></cite>&#160;<cite id="endnote_loop_forg"><a href="#ref_loop_forg" title=""><b><sup>g</sup></b></a></cite>&#160;<cite id="endnote_loop_forh"><a href="#ref_loop_forh" title=""><b><sup>h</sup></b></a></cite>&#160; C's <code>for (<i>init</i>; <i>condition</i>; <i>loop</i>)</code> loop is a general loop construct, not specifically a counting one, although it is often used for that.</li>
<li><cite id="endnote_deep_break_ca"><a href="#ref_deep_break_ca" title=""><b><sup>a</sup></b></a></cite>&#160;<cite id="endnote_deep_break_cb"><a href="#ref_deep_break_cb" title=""><b><sup>b</sup></b></a></cite>&#160;<cite id="endnote_deep_break_cc"><a href="#ref_deep_break_cc" title=""><b><sup>c</sup></b></a></cite>&#160; Deep breaks may be accomplished in C, C++ and C# through the use of labels and gotos.</li>
<li><cite id="endnote_loop_phpforeacha"><a href="#ref_loop_phpforeacha" title=""><b><sup>a</sup></b></a></cite>&#160; Iteration over objects was <a href="http://www.php.net/manual/en/language.oop5.iterations.php" class="external text" title="http://www.php.net/manual/en/language.oop5.iterations.php" rel="nofollow">added</a> in PHP 5.</li>
<li><cite id="endnote_loop_rangea"><a href="#ref_loop_rangea" title=""><b><sup>a</sup></b></a></cite>&#160;<cite id="endnote_loop_rangeb"><a href="#ref_loop_rangeb" title=""><b><sup>b</sup></b></a></cite>&#160;<cite id="endnote_loop_rangec"><a href="#ref_loop_rangec" title=""><b><sup>c</sup></b></a></cite>&#160; A counting loop can be simulated by iterating over an incrementing list or generator, for instance, Python's <code>range()</code>.</li>
<li><cite id="endnote_deep_break_ea"><a href="#ref_deep_break_ea" title=""><b><sup>a</sup></b></a></cite>&#160;<cite id="endnote_deep_break_eb"><a href="#ref_deep_break_eb" title=""><b><sup>b</sup></b></a></cite>&#160;<cite id="endnote_deep_break_ec"><a href="#ref_deep_break_ec" title=""><b><sup>c</sup></b></a></cite>&#160;<cite id="endnote_deep_break_ed"><a href="#ref_deep_break_ed" title=""><b><sup>d</sup></b></a></cite>&#160;<cite id="endnote_deep_break_ee"><a href="#ref_deep_break_ee" title=""><b><sup>e</sup></b></a></cite>&#160; Deep breaks may be accomplished through the use of exception handling.</li>
<li><cite id="endnote_whilea"><a href="#ref_whilea" title=""><b><sup>a</sup></b></a></cite>&#160; There is no special construct, since the <code>while</code> function can be used for this.</li>
<li><cite id="endnote_usera"><a href="#ref_usera" title=""><b><sup>a</sup></b></a></cite>&#160; There is no special construct, but users can define general loop functions.</li>
</ol>
<p><a name="Structured_non-local_control_flow" id="Structured_non-local_control_flow"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Control_flow&amp;action=edit&amp;section=18" title="Edit section: Structured non-local control flow">edit</a>]</span> <span class="mw-headline">Structured non-local control flow</span></h2>
<p>Many programming languages, particularly those which favor more dynamic styles of programming, offer constructs for <b>non-local control flow</b>. These cause the flow of execution to jump out of a given context and resume at some predeclared point. <i><a href="/wiki/Exception_handling" title="Exception handling">Exceptions</a></i>, <i><a href="/wiki/Condition" title="Condition">conditions</a></i>, and <i><a href="/wiki/Continuation" title="Continuation">continuations</a></i> are three common sorts of non-local control constructs.</p>
<p><a name="Conditions" id="Conditions"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Control_flow&amp;action=edit&amp;section=19" title="Edit section: Conditions">edit</a>]</span> <span class="mw-headline">Conditions</span></h3>
<p><a href="/wiki/PL/I_programming_language" title="PL/I programming language" class="mw-redirect">PL/I</a> has some 22 standard conditions (e.g. ZERODIVIDE SUBSCRIPTRANGE ENDFILE) which can be RAISEd and which can be intercepted by: ON <i>condition</i> action; Programmers can also define and use their own named conditions.</p>
<p>Like the <i>unstructured if</i> only one statement can be specified so in many cases a GOTO is needed to decide where flow of control should resume.</p>
<p>Unfortunately, some implementations had a substantial overhead in both space and time (especially SUBSCRIPTRANGE), so many programmers tried to avoid using conditions.</p>
<p>Common Syntax examples:</p>
<pre>
 <b>ON</b> <i>condition</i> <b>GOTO</b> <i>label</i>
</pre>
<p><a name="Exceptions" id="Exceptions"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Control_flow&amp;action=edit&amp;section=20" title="Edit section: Exceptions">edit</a>]</span> <span class="mw-headline">Exceptions</span></h3>
<div class="rellink noprint relarticle mainarticle">Main article: <a href="/wiki/Exception_handling" title="Exception handling">Exception handling</a></div>
<p>Modern languages have a structured construct for exception handling which does not rely on the use of <code>GOTO</code>:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
<span class="kw2">try</span> <span class="br0">{</span>
    xxx1                                  <span class="co1">// Somewhere in here</span>
    xxx2                                  <span class="co1">//     use: '''throw''' someValue;</span>
    xxx3
<span class="br0">}</span> <span class="kw2">catch</span> <span class="br0">(</span>someClass&amp; someId<span class="br0">)</span> <span class="br0">{</span>             <span class="co1">// catch value of someClass</span>
    actionForSomeClass 
<span class="br0">}</span> <span class="kw2">catch</span> <span class="br0">(</span>someType&amp; anotherId<span class="br0">)</span> <span class="br0">{</span>           <span class="co1">// catch value of someType</span>
    actionForSomeType
<span class="br0">}</span> <span class="kw2">catch</span> <span class="br0">(</span>...<span class="br0">)</span> <span class="br0">{</span>                           <span class="co1">// catch anything not already caught</span>
    actionForAnythingElse
<span class="br0">}</span>
</pre></div>
<p>Any number and variety of <code>catch</code> clauses can be used above. In D, Java, C#, and Python a <code>finally</code> clause can be added to the <code>try</code> construct. No matter how control leaves the <code>try</code> the code inside the <code>finally</code> clause is guaranteed to execute. This is useful when writing code that must relinquish an expensive resource (such as an opened file or a database connection) when finished processing:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-csharp">
FileStream stm = <span class="kw1">null</span>;                    <span class="co1">// C# example</span>
<span class="kw1">try</span> <span class="br0">{</span>
    stm = <span class="kw3">new</span> FileStream <span class="br0">(</span><span class="st0">"logfile.txt"</span>, FileMode.<span class="me1">Create</span><span class="br0">)</span>;
    <span class="kw1">return</span> ProcessStuff<span class="br0">(</span>stm<span class="br0">)</span>;             <span class="co1">// may throw an exception</span>
<span class="br0">}</span> <span class="kw1">finally</span> <span class="br0">{</span>
    <span class="kw1">if</span> <span class="br0">(</span>stm != <span class="kw1">null</span><span class="br0">)</span>
        stm. <span class="me1">Close</span><span class="br0">(</span><span class="br0">)</span>;
<span class="br0">}</span>
</pre></div>
<p>Since this pattern is fairly common, C# has a special syntax:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-csharp">
<span class="kw1">using</span> <span class="br0">(</span>FileStream stm = <span class="kw3">new</span> FileStream <span class="br0">(</span><span class="st0">"logfile.txt"</span>, FileMode.<span class="me1">Create</span><span class="br0">)</span><span class="br0">)</span> <span class="br0">{</span>
    <span class="kw1">return</span> ProcessStuff<span class="br0">(</span>stm<span class="br0">)</span>;             <span class="co1">// may throw an exception</span>
<span class="br0">}</span>
</pre></div>
<p>Upon leaving the <code>using</code>-block, the compiler guarantees that the <code>stm</code> object is released. Python's <code>with</code> statement and Ruby's block argument to <code>File.open</code> are used to similar effect.</p>
<p>All these languages define standard exceptions and the circumstances under which they are thrown. Users can throw exceptions of their own (in fact C++ and Python allow users to throw and catch almost any type).</p>
<p>If there is no <code>catch</code> matching a particular <code>throw</code>, then control percolates back through subroutine calls and/or nested blocks until a matching <code>catch</code> is found or until the end of the main program is reached, at which point the program is forcibly stopped with a suitable error message.</p>
<p>The <a href="/wiki/AppleScript" title="AppleScript">AppleScript</a> <a href="/wiki/Scripting_programming_language" title="Scripting programming language" class="mw-redirect">scripting programming language</a> provides several pieces of information to a "<code>try</code>" block:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-applescript">
<span class="kw1">try</span>
    <span class="kw1">set</span> myNumber <span class="kw1">to</span> myNumber / <span class="nu0">0</span>
 
<span class="kw1">on</span> <span class="kw1">error</span> e  number n  <span class="kw1">from</span> f  <span class="kw1">to</span> t  partial <span class="kw3">result</span> pr
 
    <span class="kw1">if</span> <span class="br0">(</span> e = <span class="st0">"Can't divide by zero"</span> <span class="br0">)</span> <span class="kw1">then</span> display dialog <span class="st0">"You idiot!"</span>
 
<span class="kw1">end</span> <span class="kw1">try</span>
</pre></div>
<p><a name="Continuations" id="Continuations"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Control_flow&amp;action=edit&amp;section=21" title="Edit section: Continuations">edit</a>]</span> <span class="mw-headline">Continuations</span></h3>
<div class="rellink noprint relarticle mainarticle">Main article: <a href="/wiki/Continuation" title="Continuation">Continuation</a></div>
<p><a name="Non-local_control_flow_cross_reference" id="Non-local_control_flow_cross_reference"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Control_flow&amp;action=edit&amp;section=22" title="Edit section: Non-local control flow cross reference">edit</a>]</span> <span class="mw-headline">Non-local control flow cross reference</span></h3>
<table class="wikitable">
<tr>
<th><a href="/wiki/Programming_language" title="Programming language">Programming language</a></th>
<th>conditions</th>
<th>exceptions</th>
</tr>
<tr>
<td><a href="/wiki/Ada_programming_language" title="Ada programming language" class="mw-redirect">Ada</a></td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
</tr>
<tr>
<td><a href="/wiki/C_(programming_language)" title="C (programming language)">C</a></td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
</tr>
<tr>
<td><a href="/wiki/C%2B%2B" title="C++">C++</a></td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
</tr>
<tr>
<td><a href="/wiki/C_Sharp_(programming_language)" title="C Sharp (programming language)">C#</a></td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
</tr>
<tr>
<td><a href="/wiki/D_programming_language" title="D programming language" class="mw-redirect">D</a></td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
</tr>
<tr>
<td><a href="/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell</a></td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
</tr>
<tr>
<td><a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a></td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
</tr>
<tr>
<td><a href="/wiki/Objective_C_programming_language" title="Objective C programming language" class="mw-redirect">Objective C</a></td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
</tr>
<tr>
<td><a href="/wiki/PHP" title="PHP">PHP</a></td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
</tr>
<tr>
<td><a href="/wiki/PL/I_programming_language" title="PL/I programming language" class="mw-redirect">PL/1</a></td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
</tr>
<tr>
<td><a href="/wiki/Python_(programming_language)" title="Python (programming language)">Python</a></td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
</tr>
<tr>
<td><a href="/wiki/REBOL" title="REBOL">REBOL</a></td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
</tr>
<tr>
<td><a href="/wiki/Ruby_programming_language" title="Ruby programming language" class="mw-redirect">Ruby</a></td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
</tr>
<tr>
<td><a href="/wiki/Visual_Basic_.NET" title="Visual Basic .NET">Visual Basic .NET</a></td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
</tr>
<tr>
<td><a href="/wiki/Windows_PowerShell" title="Windows PowerShell">Windows PowerShell</a></td>
<td style="background:#ff9090; color:black;" class="table-no">No</td>
<td style="background:#90ff90; color:black;" class="table-yes">Yes</td>
</tr>
</table>
<p><a name="Proposed_control_structures" id="Proposed_control_structures"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Control_flow&amp;action=edit&amp;section=23" title="Edit section: Proposed control structures">edit</a>]</span> <span class="mw-headline">Proposed control structures</span></h2>
<p>In a spoof <a href="/wiki/Datamation" title="Datamation">Datamation</a> article<sup id="cite_ref-1" class="reference"><a href="#cite_note-1" title=""><span>[</span>2<span>]</span></a></sup> in 1973, R. Lawrence Clark suggested that the GOTO statement could be replaced by the <a href="/wiki/COMEFROM" title="COMEFROM">COMEFROM</a> statement, and provides some entertaining examples. This was actually implemented in the <a href="/wiki/INTERCAL_programming_language" title="INTERCAL programming language" class="mw-redirect">INTERCAL programming language</a>, a language designed to make programs as obscure as possible.</p>
<p>In his 1974 article "Structured Programming with go to Statements"<sup id="cite_ref-2" class="reference"><a href="#cite_note-2" title=""><span>[</span>3<span>]</span></a></sup>, <a href="/wiki/Donald_Knuth" title="Donald Knuth">Donald Knuth</a> identified two situations which were not covered by the control structures listed above, and gave examples of control structures which could handle these situations. Despite their utility, these constructions have not yet found their way into mainstream programming languages.</p>
<p><a name="Loop_with_test_in_the_middle" id="Loop_with_test_in_the_middle"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Control_flow&amp;action=edit&amp;section=24" title="Edit section: Loop with test in the middle">edit</a>]</span> <span class="mw-headline">Loop with test in the middle</span></h3>
<p>This was proposed by <a href="/wiki/Ole-Johan_Dahl" title="Ole-Johan Dahl">Dahl</a> in 1972<sup id="cite_ref-3" class="reference"><a href="#cite_note-3" title=""><span>[</span>4<span>]</span></a></sup>.</p>
<pre>
   <b>loop</b>                           <b>loop</b>
       xxx1                           read(char);
   <b>while</b> test;                    <b>while</b> <b>not</b> atEndOfFile;
       xxx2                           write(char);
   <b>repeat</b>;                        <b>repeat</b>;
</pre>
<p>If <i>xxx1</i> is omitted we get a loop with the test at the top. If <i>xxx2</i> is omitted we get a loop with the test at the bottom. If <b>while</b> is omitted we get an infinite loop. Hence this single construction can replace several constructions in most programming languages. A possible variant is to allow more than one <b>while</b> test; within the loop, but the use of <b>exitwhen</b> (see next section) appears to cover this case better.</p>
<p>As the example on the right shows (copying a file one character at a time), there are simple situations where this is exactly the right construction to use in order to avoid duplicated code and/or repeated tests.</p>
<table class="metadata plainlinks mbox-small" style="border:1px solid #aaa; background-color:#f9f9f9;">
<tr>
<td class="mbox-image"><a href="http://en.wikibooks.org/wiki/Special:Search/Control_flow" title="b:Special:Search/Control flow"><img alt="Sister project" src="http://upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/40px-Wikibooks-logo-en-noslogan.svg.png" width="40" height="40" border="0" /></a></td>
<td class="mbox-text" style="">The <a href="/wiki/Wikibooks" title="Wikibooks">Wikibook</a> <i><a href="http://en.wikibooks.org/wiki/Ada_Programming" class="extiw" title="wikibooks:Ada Programming">Ada Programming</a></i> has a page on the topic of
<div style="margin-left:10px;"><i><b><a href="http://en.wikibooks.org/wiki/Ada_Programming/Control" class="extiw" title="wikibooks:Ada Programming/Control">Control</a></b></i></div>
</td>
</tr>
</table>
<p>In <a href="/wiki/Ada_programming_language" title="Ada programming language" class="mw-redirect">Ada</a>, the above loop construct (<b>loop</b>-<b>while</b>-<b>repeat</b>) can be represented using a standard infinite loop (<b>loop</b> - <b>end loop</b>) that has an <b>exit when</b> clause in the middle (not to be confused with the <b>exitwhen</b> statement in the following section).</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-ada">
<span class="kw3">with</span> Ada.<span class="me1">Text_IO</span>;
<span class="kw3">with</span> Ada.<span class="me1">Integer_Text_IO</span>;
 
<span class="kw3">procedure</span> Print_Squares <span class="kw1">is</span> 
    X : Integer;
<span class="kw1">begin</span>
    Read_Data : <span class="kw1">loop</span>
        Ada.<span class="me1">Integer_Text_IO</span>.<span class="me1">Get</span><span class="br0">(</span>X<span class="br0">)</span>;
    <span class="kw3">exit</span> Read_Data <span class="kw3">when</span> X = <span class="nu0">0</span>;
        Ada.<span class="me1">Text</span> IO.<span class="me1">Put</span> <span class="br0">(</span>X * X<span class="br0">)</span>;
        Ada.<span class="me1">Text</span> IO.<span class="me1">New_Line</span>;
    <span class="kw1">end</span> <span class="kw1">loop</span> Read_Data;
<span class="kw1">end</span> Print_Squares;
</pre></div>
<p>Naming a loop (Like <i>Read_Data</i> in our example) is optional but allows to leave the outer loop of several nested loops.</p>
<p><a name="Multiple_early_exit.2Fexit_from_nested_loops" id="Multiple_early_exit.2Fexit_from_nested_loops"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Control_flow&amp;action=edit&amp;section=25" title="Edit section: Multiple early exit/exit from nested loops">edit</a>]</span> <span class="mw-headline">Multiple early exit/exit from nested loops</span></h3>
<p>This was proposed by <a href="/wiki/Zahn%27s_construct" title="Zahn's construct">Zahn</a> in 1974<sup id="cite_ref-4" class="reference"><a href="#cite_note-4" title=""><span>[</span>5<span>]</span></a></sup>. A modified version is presented here.</p>
<pre>
   <b>exitwhen</b> EventA <b>or</b> EventB <b>or</b> EventC;
       xxx
   <b>exits</b>
       EventA: actionA
       EventB: actionB
       EventC: actionC
   <b>endexit</b>;
</pre>
<p><b>exitwhen</b> is used to specify the events which may occur within <i>xxx</i>, their occurrence is indicated by using the name of the event as a statement. When some event does occur, the relevant action is carried out, and then control passes just after <b>endexit</b>. This construction provides a very clear separation between determining that some situation applies, and the action to be taken for that situation.</p>
<p><b>exitwhen</b> is conceptually similar to <a href="/wiki/Exception_handling" title="Exception handling">exception handling</a>, and exceptions or similar constructs are used for this purpose in many languages.</p>
<p>The following simple example involves searching a two-dimensional table for a particular item.</p>
<pre>
   <b>exitwhen</b> found <b>or</b> missing;
       <b>for</b> I := 1 <b>to</b> N <b>do</b>
           <b>for</b> J := 1 <b>to</b> M <b>do</b>
               <b>if</b> table[I,J] = target <b>then</b> found;
       missing;
   <b>exits</b>
       found:   print ("item is in table");
       missing: print ("item is not in table");
   <b>endexit</b>;
</pre>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Control_flow&amp;action=edit&amp;section=26" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<ul>
<li><a href="/wiki/Branch_(computer_science)" title="Branch (computer science)">Branch (computer science)</a></li>
<li><a href="/wiki/Control_flow_diagram" title="Control flow diagram">Control flow diagram</a></li>
<li><a href="/wiki/Control_flow_graph" title="Control flow graph">Control flow graph</a></li>
<li><a href="/wiki/Coroutine" title="Coroutine">Coroutine</a></li>
<li><a href="/wiki/Cyclomatic_complexity" title="Cyclomatic complexity">Cyclomatic complexity</a></li>
<li><a href="/wiki/Flowchart" title="Flowchart">Flowchart</a></li>
<li><a href="/wiki/GOTO" title="GOTO" class="mw-redirect">GOTO</a></li>
<li><a href="/wiki/Main_loop" title="Main loop" class="mw-redirect">Main loop</a></li>
<li><a href="/wiki/Recursion" title="Recursion">Recursion</a></li>
<li><a href="/wiki/Spaghetti_code" title="Spaghetti code">Spaghetti code</a></li>
<li><a href="/wiki/Structured_programming" title="Structured programming">Structured programming</a></li>
<li><a href="/wiki/Subroutine" title="Subroutine">Subroutine</a></li>
</ul>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Control_flow&amp;action=edit&amp;section=27" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<div class="references-small">
<ol class="references">
<li id="cite_note-0"><b><a href="#cite_ref-0" title="">^</a></b> Böhm, Jacopini. Flow diagrams, "Turing Machines and Languages with only Two Formation Rules" <a href="/wiki/Comm._ACM" title="Comm. ACM" class="mw-redirect">Comm. ACM</a>, 9(5):366-371, May 1966.</li>
<li id="cite_note-1"><b><a href="#cite_ref-1" title="">^</a></b> <a href="http://www.fortran.com/fortran/come_from.html" class="external text" title="http://www.fortran.com/fortran/come_from.html" rel="nofollow">We don't know where to GOTO if we don't know where we've COME FROM. This linguistic innovation lives up to all expectations.</a>By R. Lawrence Clark* From DATAMATION, December, 1973</li>
<li id="cite_note-2"><b><a href="#cite_ref-2" title="">^</a></b> Knuth, Donald E. "Structured Programming with go to Statements" <a href="/w/index.php?title=ACM_Computing_Surveys&amp;action=edit&amp;redlink=1" class="new" title="ACM Computing Surveys (page does not exist)">ACM Computing Surveys</a> 6(4):261-301, December 1974.</li>
<li id="cite_note-3"><b><a href="#cite_ref-3" title="">^</a></b> Dahl &amp; Dijkstra &amp; Hoare, "Structured Programming" Academic Press, 1972.</li>
<li id="cite_note-4"><b><a href="#cite_ref-4" title="">^</a></b> Zahn, C. T. "A control statement for natural top-down structured programming" presented at Symposium on Programming Languages, Paris, 1974.</li>
</ol>
</div>
<div class="references-small" style="margin-left:1.5em;">
<ul>
<li>Hoare, C. A. R. "Partition: Algorithm 63," "Quicksort: Algorithm 64," and "Find: Algorithm 65." Comm. ACM 4, 321-322, 1961.</li>
</ul>
</div>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Control_flow&amp;action=edit&amp;section=28" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<ul>
<li><a href="http://beginner-java-tutorial.com/java-control-statements.html" class="external text" title="http://beginner-java-tutorial.com/java-control-statements.html" rel="nofollow">Java Control Statements</a></li>
<li><a href="http://www.acm.org/classics/oct95/" class="external text" title="http://www.acm.org/classics/oct95/" rel="nofollow">Go To Statement Considered Harmful</a></li>
<li><a href="http://www.fortran.com/fortran/come_from.html" class="external text" title="http://www.fortran.com/fortran/come_from.html" rel="nofollow">A Linguistic Contribution of GOTO-less Programming</a></li>
<li><span class="PDFlink"><a href="http://pplab.snu.ac.kr/courses/adv_pl05/papers/p261-knuth.pdf" class="external text" title="http://pplab.snu.ac.kr/courses/adv_pl05/papers/p261-knuth.pdf" rel="nofollow">Structured Programming with Go To Statements</a></span><span style="font-size:smaller;"><a href="/wiki/Portable_Document_Format" title="Portable Document Format">PDF</a>&#160;(2.88&#160;<a href="/wiki/Mebibyte" title="Mebibyte">MiB</a>)</span></li>
<li><span class="PDFlink"><a href="http://www.bitsavers.org/pdf/ibm/704/24-6661-2_704_Manual_1955.pdf" class="external text" title="http://www.bitsavers.org/pdf/ibm/704/24-6661-2_704_Manual_1955.pdf" rel="nofollow">IBM 704 Manual</a></span><span style="font-size:smaller;"><a href="/wiki/Portable_Document_Format" title="Portable Document Format">PDF</a>&#160;(31.4&#160;<a href="/wiki/Mebibyte" title="Mebibyte">MiB</a>)</span></li>
</ul>


<!-- 
NewPP limit report
Preprocessor node count: 2218/1000000
Post-expand include size: 29617/2048000 bytes
Template argument size: 5657/2048000 bytes
Expensive parser function count: 2/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:45459-0!1!0!default!!en!2 and timestamp 20090331093904 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Control_flow">http://en.wikipedia.org/wiki/Control_flow</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Control_flow" title="Category:Control flow">Control flow</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_example_Ada_code" title="Category:Articles with example Ada code">Articles with example Ada code</a></span></div><div id="mw-hidden-catlinks" class="mw-hidden-cats-hidden">Hidden categories:&#32;<span dir='ltr'><a href="/wiki/Category:All_articles_with_unsourced_statements" title="Category:All articles with unsourced statements">All articles with unsourced statements</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_unsourced_statements_since_May_2007" title="Category:Articles with unsourced statements since May 2007">Articles with unsourced statements since May 2007</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Control_flow" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Control_flow" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Control_flow&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Control_flow&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Control_flow" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Control_flow" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Control_flow" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Control_flow&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Control_flow&amp;oldid=277197961" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Control_flow&amp;id=277197961">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-cs"><a href="http://cs.wikipedia.org/wiki/%C5%98%C3%ADdic%C3%AD_struktura">Česky</a></li>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/Kontrollstruktur">Deutsch</a></li>
				<li class="interwiki-es"><a href="http://es.wikipedia.org/wiki/Estructuras_de_control">Español</a></li>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Structure_de_contr%C3%B4le">Français</a></li>
				<li class="interwiki-it"><a href="http://it.wikipedia.org/wiki/Struttura_di_controllo">Italiano</a></li>
				<li class="interwiki-he"><a href="http://he.wikipedia.org/wiki/%D7%9C%D7%95%D7%9C%D7%90%D7%94">עברית</a></li>
				<li class="interwiki-nl"><a href="http://nl.wikipedia.org/wiki/Control_flow">Nederlands</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/%E5%88%B6%E5%BE%A1%E6%A7%8B%E9%80%A0">日本語</a></li>
				<li class="interwiki-pl"><a href="http://pl.wikipedia.org/wiki/Przep%C5%82yw_sterowania">Polski</a></li>
				<li class="interwiki-ta"><a href="http://ta.wikipedia.org/wiki/%E0%AE%95%E0%AE%9F%E0%AF%8D%E0%AE%9F%E0%AF%81%E0%AE%AA%E0%AF%8D%E0%AE%AA%E0%AE%BE%E0%AE%9F%E0%AF%8D%E0%AE%9F%E0%AF%81_%E0%AE%95%E0%AE%9F%E0%AF%8D%E0%AE%9F%E0%AE%AE%E0%AF%88%E0%AE%AA%E0%AF%8D%E0%AE%AA%E0%AF%81">தமிழ்</a></li>
				<li class="interwiki-uk"><a href="http://uk.wikipedia.org/wiki/%D0%A6%D0%B8%D0%BA%D0%BB_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%B8">Українська</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 14 March 2009, at 15:39.</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv195 in 0.042 secs. --></body></html>
