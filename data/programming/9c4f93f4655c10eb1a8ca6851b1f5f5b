<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Virtual function,Abstract Factory Pattern,C++,Constructor (computer science),Declaration (computer science),Design patterns,Destructor (computer science),Dynamic dispatch,Exception handling,IEC,ISO" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Virtual_function&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Virtual_function&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Virtual function - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Virtual_function";
		var wgTitle = "Virtual function";
		var wgAction = "view";
		var wgArticleId = "374664";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 282233163;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
<style type="text/css">/*<![CDATA[*/
.source-cpp {line-height: normal;}
.source-cpp li, .source-cpp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for cpp
 * CSS class: source-cpp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-cpp .de1, .source-cpp .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-cpp  {}
.source-cpp .head {}
.source-cpp .foot {}
.source-cpp .imp {font-weight: bold; color: red;}
.source-cpp .ln-xtra {color: #cc0; background-color: #ffc;}
.source-cpp li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-cpp li.li2 {font-weight: bold;}
.source-cpp .kw1 {color: #0000ff;}
.source-cpp .kw2 {color: #0000ff;}
.source-cpp .kw3 {color: #0000dd;}
.source-cpp .kw4 {color: #0000ff;}
.source-cpp .co1 {color: #ff0000;}
.source-cpp .co2 {color: #339900;}
.source-cpp .coMULTI {color: #ff0000; font-style: italic;}
.source-cpp .es0 {color: #666666; font-weight: bold;}
.source-cpp .br0 {color: #000000;}
.source-cpp .st0 {color: #666666;}
.source-cpp .nu0 {color: #0000dd;}
.source-cpp .me1 {color: #00eeff;}
.source-cpp .me2 {color: #00eeff;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-java {line-height: normal;}
.source-java li, .source-java pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for java
 * CSS class: source-java, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-java .de1, .source-java .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-java  {}
.source-java .head {}
.source-java .foot {}
.source-java .imp {font-weight: bold; color: red;}
.source-java .ln-xtra {color: #cc0; background-color: #ffc;}
.source-java li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-java li.li2 {font-weight: bold;}
.source-java .kw1 {color: #b1b100;}
.source-java .kw2 {color: #000000; font-weight: bold;}
.source-java .kw3 {color: #aaaadd; font-weight: bold;}
.source-java .kw4 {color: #993333;}
.source-java .co1 {color: #808080; font-style: italic;}
.source-java .co2 {color: #a1a100;}
.source-java .coMULTI {color: #808080; font-style: italic;}
.source-java .es0 {color: #000099; font-weight: bold;}
.source-java .br0 {color: #66cc66;}
.source-java .st0 {color: #ff0000;}
.source-java .nu0 {color: #cc66cc;}
.source-java .me1 {color: #006600;}
.source-java .me2 {color: #006600;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-csharp {line-height: normal;}
.source-csharp li, .source-csharp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for csharp
 * CSS class: source-csharp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-csharp .de1, .source-csharp .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-csharp  {}
.source-csharp .head {}
.source-csharp .foot {}
.source-csharp .imp {font-weight: bold; color: red;}
.source-csharp .ln-xtra {color: #cc0; background-color: #ffc;}
.source-csharp li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-csharp li.li2 {font-weight: bold;}
.source-csharp .kw1 {color: #0600FF;}
.source-csharp .kw2 {color: #FF8000; font-weight: bold;}
.source-csharp .kw3 {color: #008000;}
.source-csharp .kw4 {color: #FF0000;}
.source-csharp .kw5 {color: #000000;}
.source-csharp .co1 {color: #008080; font-style: italic;}
.source-csharp .co2 {color: #008080;}
.source-csharp .coMULTI {color: #008080; font-style: italic;}
.source-csharp .es0 {color: #008080; font-weight: bold;}
.source-csharp .br0 {color: #008000;}
.source-csharp .st0 {color: #808080;}
.source-csharp .nu0 {color: #FF0000;}
.source-csharp .me1 {color: #0000FF;}
.source-csharp .me2 {color: #0000FF;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-vb {line-height: normal;}
.source-vb li, .source-vb pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for vb
 * CSS class: source-vb, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-vb .de1, .source-vb .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-vb  {}
.source-vb .head {}
.source-vb .foot {}
.source-vb .imp {font-weight: bold; color: red;}
.source-vb .ln-xtra {color: #cc0; background-color: #ffc;}
.source-vb li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-vb li.li2 {font-weight: bold;}
.source-vb .kw1 {color: #b1b100;}
.source-vb .co1 {color: #808080;}
.source-vb .es0 {color: #000099;}
.source-vb .br0 {color: #66cc66;}
.source-vb .st0 {color: #ff0000;}
.source-vb .nu0 {color: #cc66cc;}
.source-vb .me1 {color: #66cc66;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style>		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Virtual_function skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Virtual function</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<p>In <a href="/wiki/Object-oriented_programming" title="Object-oriented programming">object-oriented programming</a>, a virtual function or virtual <a href="/wiki/Method_(computer_science)" title="Method (computer science)">method</a> is one whose behavior can be <a href="/wiki/Method_overriding_(programming)" title="Method overriding (programming)">overridden</a> within an inheriting class by a function with the same <a href="/wiki/Method_signature" title="Method signature">signature</a>. This concept is a very important part of the <a href="/wiki/Polymorphism_(computer_science)" title="Polymorphism (computer science)" class="mw-redirect">polymorphism</a> portion of <a href="/wiki/Object-oriented_programming" title="Object-oriented programming">object-oriented programming</a> (OOP).</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Purpose"><span class="tocnumber">1</span> <span class="toctext">Purpose</span></a></li>
<li class="toclevel-1"><a href="#Example"><span class="tocnumber">2</span> <span class="toctext">Example</span></a>
<ul>
<li class="toclevel-2"><a href="#C.2B.2B"><span class="tocnumber">2.1</span> <span class="toctext">C++</span></a></li>
<li class="toclevel-2"><a href="#Java"><span class="tocnumber">2.2</span> <span class="toctext">Java</span></a></li>
<li class="toclevel-2"><a href="#C.23"><span class="tocnumber">2.3</span> <span class="toctext">C#</span></a></li>
<li class="toclevel-2"><a href="#VB.NET"><span class="tocnumber">2.4</span> <span class="toctext">VB.NET</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Abstract_classes_and_pure_virtual_functions"><span class="tocnumber">3</span> <span class="toctext">Abstract classes and pure virtual functions</span></a>
<ul>
<li class="toclevel-2"><a href="#C.2B.2B_2"><span class="tocnumber">3.1</span> <span class="toctext">C++</span></a></li>
<li class="toclevel-2"><a href="#Java_.28and_C.23.29"><span class="tocnumber">3.2</span> <span class="toctext">Java (and C#)</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Behavior_During_Construction_and_Destruction"><span class="tocnumber">4</span> <span class="toctext">Behavior During Construction and Destruction</span></a>
<ul>
<li class="toclevel-2"><a href="#C.2B.2B_3"><span class="tocnumber">4.1</span> <span class="toctext">C++</span></a></li>
<li class="toclevel-2"><a href="#Java_2"><span class="tocnumber">4.2</span> <span class="toctext">Java</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Virtual_destructors"><span class="tocnumber">5</span> <span class="toctext">Virtual destructors</span></a></li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">6</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">7</span> <span class="toctext">References</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Purpose" id="Purpose"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Virtual_function&amp;action=edit&amp;section=1" title="Edit section: Purpose">edit</a>]</span> <span class="mw-headline">Purpose</span></h2>
<div class="rellink">Further information: <a href="/wiki/Dynamic_dispatch" title="Dynamic dispatch">Dynamic dispatch</a></div>
<p>The concept of the virtual function solves the following problem:</p>
<p>In OOP when a derived class inherits from a base class, an object of the derived class may be referred to (or cast) as either being the base class type or the derived class type. If there are base class functions overridden by the derived class, a problem then arises when a derived object has been cast as the base class type. When a derived object is referred to as being of the base's type, the desired function call behavior is ambiguous.</p>
<p>The distinction between virtual and not virtual resolves this ambiguity. If the function in question is designated "virtual" in the base class then the derived class's function would be called (if it exists). If it is not virtual, the base class's function would be called.</p>
<p>Virtual functions overcome the problems with the type-field solution by allowing the programmer to declare functions in a base class that can be redefined in each derived class.</p>
<p><a name="Example" id="Example"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Virtual_function&amp;action=edit&amp;section=2" title="Edit section: Example">edit</a>]</span> <span class="mw-headline">Example</span></h2>
<p>For example, a base class <code>Animal</code> could have a virtual function <code>eat</code>. Subclass <code>Fish</code> would implement <code>eat()</code> differently than subclass <code>Wolf</code>, but you can invoke <code>eat()</code> on any class instance referred to as Animal, and get the <code>eat()</code> behavior of the specific subclass.</p>
<p>This allows a programmer to process a list of objects of class <code>Animal</code>, telling each in turn to eat (by calling <code>eat()</code>), <a href="/wiki/Polymorphism_(computer_science)" title="Polymorphism (computer science)" class="mw-redirect">with no knowledge of what kind</a> of animal may be in the list. You also do not need to have knowledge of how each animal eats, or what the complete set of possible animal types might be.</p>
<p><a name="C.2B.2B" id="C.2B.2B"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Virtual_function&amp;action=edit&amp;section=3" title="Edit section: C++">edit</a>]</span> <span class="mw-headline">C++</span></h3>
<p>The following is an example in C++. Note that this example is not <a href="/wiki/Exception_handling" title="Exception handling">exception-safe</a>. In particular, it may leak resources if <tt>new</tt> or <tt>vector::push_back</tt> throws an exception.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
<span class="co2">#include &lt;iostream&gt;</span>
<span class="co2">#include &lt;vector&gt;</span>
 
<span class="kw2">using</span> <span class="kw2">namespace</span> std;
<span class="kw2">class</span> Animal
<span class="br0">{</span>
<span class="kw2">public</span>:
    <span class="kw2">virtual</span> <span class="kw4">void</span> eat<span class="br0">(</span><span class="br0">)</span> <span class="kw4">const</span> <span class="br0">{</span> <span class="kw3">cout</span> &lt;&lt; <span class="st0">"I eat like a generic Animal."</span> &lt;&lt; endl; <span class="br0">}</span>
    <span class="kw2">virtual</span> ~Animal<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span><span class="br0">}</span>
<span class="br0">}</span>;
 
<span class="kw2">class</span> Wolf : <span class="kw2">public</span> Animal
<span class="br0">{</span>
<span class="kw2">public</span>:
    <span class="kw4">void</span> eat<span class="br0">(</span><span class="br0">)</span> <span class="kw4">const</span> <span class="br0">{</span> <span class="kw3">cout</span> &lt;&lt; <span class="st0">"I eat like a wolf!"</span> &lt;&lt; endl; <span class="br0">}</span>
<span class="br0">}</span>;
 
<span class="kw2">class</span> Fish : <span class="kw2">public</span> Animal
<span class="br0">{</span>
<span class="kw2">public</span>:
    <span class="kw4">void</span> eat<span class="br0">(</span><span class="br0">)</span> <span class="kw4">const</span> <span class="br0">{</span> <span class="kw3">cout</span> &lt;&lt; <span class="st0">"I eat like a fish!"</span> &lt;&lt; endl; <span class="br0">}</span>
<span class="br0">}</span>;
 
<span class="kw2">class</span> GoldFish : <span class="kw2">public</span> Fish
<span class="br0">{</span>
<span class="kw2">public</span>:
    <span class="kw4">void</span> eat<span class="br0">(</span><span class="br0">)</span> <span class="kw4">const</span> <span class="br0">{</span> <span class="kw3">cout</span> &lt;&lt; <span class="st0">"I eat like a goldfish!"</span> &lt;&lt; endl; <span class="br0">}</span>
<span class="br0">}</span>;
 
 
<span class="kw2">class</span> OtherAnimal : <span class="kw2">public</span> Animal
<span class="br0">{</span>
<span class="br0">}</span>;
 
<span class="kw4">int</span> main<span class="br0">(</span><span class="br0">)</span>
<span class="br0">{</span>
    std::<span class="me2">vector</span>&lt;Animal*&gt; animals;
    animals.<span class="me1">push_back</span><span class="br0">(</span> <span class="kw3">new</span> Animal<span class="br0">(</span><span class="br0">)</span> <span class="br0">)</span>;
    animals.<span class="me1">push_back</span><span class="br0">(</span> <span class="kw3">new</span> Wolf<span class="br0">(</span><span class="br0">)</span> <span class="br0">)</span>;
    animals.<span class="me1">push_back</span><span class="br0">(</span> <span class="kw3">new</span> Fish<span class="br0">(</span><span class="br0">)</span> <span class="br0">)</span>;
    animals.<span class="me1">push_back</span><span class="br0">(</span> <span class="kw3">new</span> GoldFish<span class="br0">(</span><span class="br0">)</span> <span class="br0">)</span>;
    animals.<span class="me1">push_back</span><span class="br0">(</span> <span class="kw3">new</span> OtherAnimal<span class="br0">(</span><span class="br0">)</span> <span class="br0">)</span>;
 
    <span class="kw1">for</span><span class="br0">(</span> std::<span class="me2">vector</span>&lt;Animal*&gt;::<span class="me2">const_iterator</span> it = animals.<span class="me1">begin</span><span class="br0">(</span><span class="br0">)</span>;
       it != animals.<span class="me1">end</span><span class="br0">(</span><span class="br0">)</span>; ++it<span class="br0">)</span> 
    <span class="br0">{</span>
        <span class="br0">(</span>*it<span class="br0">)</span>-&gt;eat<span class="br0">(</span><span class="br0">)</span>;
        <span class="kw3">delete</span> *it;
    <span class="br0">}</span>
 
   <span class="kw1">return</span> <span class="nu0">0</span>;
<span class="br0">}</span>
</pre></div>
<p>Output with the virtual function <code>Animal::eat()</code>:</p>
<pre>
I eat like a generic Animal.
I eat like a wolf!
I eat like a fish!
I eat like a goldfish!
I eat like a generic Animal.
</pre>
<p>Output if <code>Animal::eat()</code> were not declared as virtual:</p>
<pre>
I eat like a generic Animal.
I eat like a generic Animal.
I eat like a generic Animal.
I eat like a generic Animal.
I eat like a generic Animal.
</pre>
<p><a name="Java" id="Java"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Virtual_function&amp;action=edit&amp;section=4" title="Edit section: Java">edit</a>]</span> <span class="mw-headline">Java</span></h3>
<p>In Java, all methods are by default "virtual functions". The following is an example in Java:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-java">
<span class="co2">import java.util.*;</span>
 
<span class="kw2">public</span> <span class="kw2">class</span> Animal <span class="br0">{</span>
   <span class="kw2">public</span> <span class="kw4">void</span> eat<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> <span class="kw3">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span><span class="st0">"I eat like a generic Animal."</span><span class="br0">)</span>; <span class="br0">}</span>
 
   <span class="kw2">public</span> <span class="kw2">static</span> <span class="kw4">void</span> main<span class="br0">(</span><span class="kw3">String</span><span class="br0">[</span><span class="br0">]</span> args<span class="br0">)</span> <span class="br0">{</span>
      List&lt;Animal&gt; animals = <span class="kw2">new</span> LinkedList&lt;Animal&gt;<span class="br0">(</span><span class="br0">)</span>;
 
      animals.<span class="me1">add</span><span class="br0">(</span><span class="kw2">new</span> Animal<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>;
      animals.<span class="me1">add</span><span class="br0">(</span><span class="kw2">new</span> Wolf<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>;
      animals.<span class="me1">add</span><span class="br0">(</span><span class="kw2">new</span> Fish<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>;
      animals.<span class="me1">add</span><span class="br0">(</span><span class="kw2">new</span> OtherAnimal<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>;
 
      <span class="kw1">for</span> <span class="br0">(</span>Animal currentAnimal : animals<span class="br0">)</span> <span class="br0">{</span>
         currentAnimal.<span class="me1">eat</span><span class="br0">(</span><span class="br0">)</span>;
      <span class="br0">}</span>
   <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="kw2">public</span> <span class="kw2">class</span> Wolf <span class="kw2">extends</span> Animal <span class="br0">{</span>
   <span class="kw2">public</span> <span class="kw4">void</span> eat<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> <span class="kw3">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span><span class="st0">"I eat like a wolf!"</span><span class="br0">)</span>; <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="kw2">public</span> <span class="kw2">class</span> Fish <span class="kw2">extends</span> Animal <span class="br0">{</span>
   <span class="kw2">public</span> <span class="kw4">void</span> eat<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> <span class="kw3">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span><span class="st0">"I eat like a fish!"</span><span class="br0">)</span>; <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="kw2">public</span> <span class="kw2">class</span> OtherAnimal <span class="kw2">extends</span> Animal <span class="br0">{</span><span class="br0">}</span>
</pre></div>
<p>Output:</p>
<pre>
I eat like a generic Animal.
I eat like a wolf!
I eat like a fish!
I eat like a generic Animal.
</pre>
<p><a name="C.23" id="C.23"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Virtual_function&amp;action=edit&amp;section=5" title="Edit section: C#">edit</a>]</span> <span class="mw-headline">C#</span></h3>
<p>In C#, a base class must provide the <code>virtual</code> modifier for any virtual method, and derived classes must provide the <code>override</code> modifier for any overriden method inherited from a base class. The following is an example in C#:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-csharp">
<span class="kw1">using</span> <span class="kw5">System</span>;
<span class="kw1">using</span> <span class="kw5">System</span>.<span class="me1">Collections</span>.<span class="me1">Generic</span>;
 
<span class="kw1">namespace</span> ConsoleApplication1
<span class="br0">{</span>
  <span class="kw1">public</span> <span class="kw4">class</span> Animal
  <span class="br0">{</span>
    <span class="kw1">public</span> <span class="kw1">virtual</span> <span class="kw1">void</span> eat<span class="br0">(</span><span class="br0">)</span>
    <span class="br0">{</span>
      Console.<span class="me1">WriteLine</span><span class="br0">(</span><span class="st0">"I eat like a generic Animal."</span><span class="br0">)</span>;
    <span class="br0">}</span>
  <span class="br0">}</span>
 
  <span class="kw1">public</span> <span class="kw4">class</span> Wolf : Animal
  <span class="br0">{</span>
    <span class="kw1">public</span> <span class="kw1">override</span> <span class="kw1">void</span> eat<span class="br0">(</span><span class="br0">)</span>
    <span class="br0">{</span>
      Console.<span class="me1">WriteLine</span><span class="br0">(</span><span class="st0">"I eat like a wolf!"</span><span class="br0">)</span>;
    <span class="br0">}</span>
  <span class="br0">}</span>
 
  <span class="kw1">public</span> <span class="kw4">class</span> Fish : Animal
  <span class="br0">{</span>
    <span class="kw1">public</span> <span class="kw1">override</span> <span class="kw1">void</span> eat<span class="br0">(</span><span class="br0">)</span>
    <span class="br0">{</span>
      Console.<span class="me1">WriteLine</span><span class="br0">(</span><span class="st0">"I eat like a fish!"</span><span class="br0">)</span>;
    <span class="br0">}</span>
  <span class="br0">}</span>
 
  <span class="kw1">public</span> <span class="kw4">class</span> GoldFish : Fish
  <span class="br0">{</span>
    <span class="kw1">public</span> <span class="kw1">override</span> <span class="kw1">void</span> eat<span class="br0">(</span><span class="br0">)</span>
    <span class="br0">{</span>
      Console.<span class="me1">WriteLine</span><span class="br0">(</span><span class="st0">"I eat like a goldfish!"</span><span class="br0">)</span>;
    <span class="br0">}</span>
  <span class="br0">}</span>
 
  <span class="kw1">public</span> <span class="kw4">class</span> OtherAnimal : Animal
  <span class="br0">{</span>
    <span class="co1">// eat() method is not overridden, so the base class method will be used.</span>
  <span class="br0">}</span>
 
  <span class="kw4">class</span> Program
  <span class="br0">{</span>
    <span class="kw1">static</span> <span class="kw1">void</span> Main<span class="br0">(</span><span class="kw4">string</span><span class="br0">[</span><span class="br0">]</span> args<span class="br0">)</span>
    <span class="br0">{</span>
      List&lt;Animal&gt; animals = <span class="kw3">new</span> List&lt;Animal&gt;<span class="br0">(</span><span class="br0">)</span>;
 
      animals.<span class="me1">Add</span><span class="br0">(</span><span class="kw3">new</span> Animal<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>;
      animals.<span class="me1">Add</span><span class="br0">(</span><span class="kw3">new</span> Wolf<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>;
      animals.<span class="me1">Add</span><span class="br0">(</span><span class="kw3">new</span> Fish<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>;
      animals.<span class="me1">Add</span><span class="br0">(</span><span class="kw3">new</span> GoldFish<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>;
      animals.<span class="me1">Add</span><span class="br0">(</span><span class="kw3">new</span> OtherAnimal<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>;
 
      <span class="kw1">foreach</span> <span class="br0">(</span>Animal currentAnimal <span class="kw1">in</span> animals<span class="br0">)</span>
      <span class="br0">{</span>
        currentAnimal.<span class="me1">eat</span><span class="br0">(</span><span class="br0">)</span>;
      <span class="br0">}</span>
    <span class="br0">}</span>
  <span class="br0">}</span>
<span class="br0">}</span>
</pre></div>
<p>Output:</p>
<pre>
I eat like a generic Animal.
I eat like a wolf!
I eat like a fish!
I eat like a goldfish!
I eat like a generic Animal.
</pre>
<p><a name="VB.NET" id="VB.NET"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Virtual_function&amp;action=edit&amp;section=6" title="Edit section: VB.NET">edit</a>]</span> <span class="mw-headline">VB.NET</span></h3>
<p>In VB.NET, a base class must provide the <code>Overridable</code> modifier for any virtual method, and derived classes may provide the optional <code>Overrides</code> modifier for any overriden method inherited from a base class (this prevents a warning from being issued). The following is an example in VB.NET:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-vb">
Imports System
Imports System.<span class="me1">Collections</span>.<span class="me1">Generic</span>
 
Namespace ConsoleApplication1
 
    <span class="kw1">Public</span> Class Animal
        <span class="kw1">Public</span> Overridable <span class="kw1">Sub</span> eat<span class="br0">(</span><span class="br0">)</span>
            Console.<span class="me1">WriteLine</span><span class="br0">(</span><span class="st0">"I eat like a generic Animal."</span><span class="br0">)</span>
        <span class="kw1">End</span> <span class="kw1">Sub</span>
    <span class="kw1">End</span> Class
 
    <span class="kw1">Public</span> Class Wolf
        Inherits Animal
        <span class="kw1">Public</span> Overrides <span class="kw1">Sub</span> eat<span class="br0">(</span><span class="br0">)</span>
            Console.<span class="me1">WriteLine</span><span class="br0">(</span><span class="st0">"I eat like a wolf!"</span><span class="br0">)</span>
        <span class="kw1">End</span> <span class="kw1">Sub</span>
    <span class="kw1">End</span> Class
 
    <span class="kw1">Public</span> Class Fish
        Inherits Animal
        <span class="kw1">Public</span> Overrides <span class="kw1">Sub</span> eat<span class="br0">(</span><span class="br0">)</span>
            Console.<span class="me1">WriteLine</span><span class="br0">(</span><span class="st0">"I eat like a fish!"</span><span class="br0">)</span>
        <span class="kw1">End</span> <span class="kw1">Sub</span>
    <span class="kw1">End</span> Class
 
    <span class="kw1">Public</span> Class Goldfish
        Inherits Fish
        <span class="kw1">Public</span> Overrides <span class="kw1">Sub</span> eat<span class="br0">(</span><span class="br0">)</span>
            Console.<span class="me1">WriteLine</span><span class="br0">(</span><span class="st0">"I eat like a goldfish!"</span><span class="br0">)</span>
        <span class="kw1">End</span> <span class="kw1">Sub</span>
    <span class="kw1">End</span> Class
 
    <span class="kw1">Public</span> Class OtherAnimal
        Inherits Animal
        <span class="co1">'eat() method is not overridden, so the base class method will be used.</span>
    <span class="kw1">End</span> Class
 
    <span class="kw1">Public</span> Class Program
        Shared <span class="kw1">Sub</span> Main<span class="br0">(</span><span class="br0">)</span>
            <span class="kw1">Dim</span> animals <span class="kw1">As</span> <span class="kw1">New</span> List<span class="br0">(</span>Of Animal<span class="br0">)</span>
            animals.<span class="me1">Add</span><span class="br0">(</span><span class="kw1">New</span> Animal<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>
            animals.<span class="me1">Add</span><span class="br0">(</span><span class="kw1">New</span> Wolf<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>
            animals.<span class="me1">Add</span><span class="br0">(</span><span class="kw1">New</span> Fish<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>
            animals.<span class="me1">Add</span><span class="br0">(</span><span class="kw1">New</span> Goldfish<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>
            animals.<span class="me1">Add</span><span class="br0">(</span><span class="kw1">New</span> OtherAnimal<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>
 
            <span class="kw1">For</span> Each currentAnimal <span class="kw1">As</span> Animal In animals
                currentAnimal.<span class="me1">eat</span><span class="br0">(</span><span class="br0">)</span>
            <span class="kw1">Next</span>
        <span class="kw1">End</span> <span class="kw1">Sub</span>
    <span class="kw1">End</span> Class
 
<span class="kw1">End</span> Namespace
</pre></div>
<p>Output:</p>
<pre>
I eat like a generic Animal.
I eat like a wolf!
I eat like a fish!
I eat like a goldfish!
I eat like a generic Animal.
</pre>
<p><br /></p>
<p><a name="Abstract_classes_and_pure_virtual_functions" id="Abstract_classes_and_pure_virtual_functions"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Virtual_function&amp;action=edit&amp;section=7" title="Edit section: Abstract classes and pure virtual functions">edit</a>]</span> <span class="mw-headline">Abstract classes and pure virtual functions</span></h2>
<p>A <b>pure virtual function</b> or <b>pure virtual method</b> is a virtual function that is required to be implemented by a derived class that is not abstract. Classes containing pure virtual methods are termed "abstract;" they cannot be instantiated directly, and a <a href="/wiki/Subclass_(computer_science)" title="Subclass (computer science)">subclass</a> of an abstract class can only be instantiated directly if all inherited pure virtual methods have been implemented by that class or a parent class. Pure virtual methods typically have a <a href="/wiki/Declaration_(computer_science)" title="Declaration (computer science)">declaration</a> (signature) and no definition (implementation).</p>
<p>As an example, an abstract base class "MathSymbol" may provide a pure virtual function <code>doOperation()</code>, and derived classes "Plus" and "Minus" implement <code>doOperation()</code> to provide concrete implementations. Implementing <code>doOperation()</code> would not make sense in the "MathSymbol" class as "MathSymbol" is an abstract concept whose behaviour is defined solely for each given kind (subclass) of "MathSymbol". Similarly, a given subclass of "MathSymbol" would not be complete without an implementation of <code>doOperation()</code>.</p>
<p>Although pure virtual methods typically have no implementation in the class that declares them, pure virtual methods in C++ are permitted to contain an implementation in their declaring class, providing fallback or default behaviour that a derived class can delegate to if appropriate.</p>
<p>Pure virtual functions are also used where the method declarations are being used to define an <a href="/wiki/Interface_(computer_science)" title="Interface (computer science)">interface</a> for which derived classes will supply all implementations. An abstract class serving as an interface contains only pure virtual functions, and no data members or ordinary methods. Use of purely abstract classes as interfaces works in C++ as it supports <a href="/wiki/Multiple_inheritance" title="Multiple inheritance">multiple inheritance</a>. Because many OO languages do not support multiple inheritance they often provide a separate interface mechanism. This is seen in <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a> for example.</p>
<p><a name="C.2B.2B_2" id="C.2B.2B_2"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Virtual_function&amp;action=edit&amp;section=8" title="Edit section: C++">edit</a>]</span> <span class="mw-headline">C++</span></h3>
<p>In <a href="/wiki/C%2B%2B" title="C++">C++</a>, pure virtual functions are declared using a special syntax [ <i>= 0</i> ] as demonstrated below.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
<span class="kw2">class</span> Abstract <span class="br0">{</span>
<span class="kw2">public</span>:
   <span class="kw2">virtual</span> <span class="kw4">void</span> pure_virtual<span class="br0">(</span><span class="br0">)</span> = <span class="nu0">0</span>;
<span class="br0">}</span>;
</pre></div>
<p>The pure virtual function declaration provides only the prototype of the method. Although an implementation of the pure virtual function is typically not provided in an abstract class, it may be included, although the definition may not be included at the point of declaration <sup id="cite_ref-0" class="reference"><a href="#cite_note-0" title=""><span>[</span>1<span>]</span></a></sup>. Every non-abstract child class is still required to override the method, but the implementation provided by the abstract class may be called in this way:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
 <span class="kw4">void</span> Abstract::<span class="me2">pure_virtual</span><span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
   <span class="co1">// do something</span>
 <span class="br0">}</span>
 
 <span class="kw2">class</span> Child : <span class="kw2">public</span> Abstract <span class="br0">{</span>
   <span class="kw2">virtual</span> <span class="kw4">void</span> pure_virtual<span class="br0">(</span><span class="br0">)</span>; <span class="co1">// no longer abstract, this class may be</span>
                                <span class="co1">// instantiated.</span>
 <span class="br0">}</span>;
 
 <span class="kw4">void</span> Child::<span class="me2">pure_virtual</span><span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
   Abstract::<span class="me2">pure_virtual</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">// the implementation in the abstract class </span>
                             <span class="co1">// is executed</span>
 <span class="br0">}</span>
</pre></div>
<p><a name="Java_.28and_C.23.29" id="Java_.28and_C.23.29"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Virtual_function&amp;action=edit&amp;section=9" title="Edit section: Java (and C#)">edit</a>]</span> <span class="mw-headline">Java (and C#)</span></h3>
<p>In Java (and C#), pure virtual methods are declared using the <i>abstract</i> keyword. Such a method cannot have a body. A class containing abstract methods (either directly, or inherited and not overridden) must itself be declared abstract. (But the converse is not true - an abstract class is not required to have any abstract methods.) An abstract class cannot be instantiated.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-java">
<span class="kw2">abstract</span> <span class="kw2">class</span> B <span class="br0">{</span>
    <span class="kw2">abstract</span> <span class="kw4">void</span> a_pure_virtual_function<span class="br0">(</span><span class="br0">)</span>;
<span class="br0">}</span>
</pre></div>
<p>Java also uses interfaces. All of the methods declared in an interface are implicitly abstract:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-java">
<span class="kw2">interface</span> C <span class="br0">{</span>
    <span class="kw4">void</span> a_pure_virtual_function<span class="br0">(</span><span class="br0">)</span>;
<span class="br0">}</span>
</pre></div>
<p><a name="Behavior_During_Construction_and_Destruction" id="Behavior_During_Construction_and_Destruction"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Virtual_function&amp;action=edit&amp;section=10" title="Edit section: Behavior During Construction and Destruction">edit</a>]</span> <span class="mw-headline">Behavior During Construction and Destruction</span></h2>
<p>Languages differ in their behaviour while the <a href="/wiki/Constructor_(computer_science)" title="Constructor (computer science)">constructor</a> or <a href="/wiki/Destructor_(computer_science)" title="Destructor (computer science)">destructor</a> of an object is running. For some languages, notably C++, the virtual dispatching mechanism has different semantics during construction and destruction of an object. While it is recommended that virtual function calls in constructors should be avoided for C++ <sup id="cite_ref-1" class="reference"><a href="#cite_note-1" title=""><span>[</span>2<span>]</span></a></sup>, in some other languages, for example Java and C#, the derived implementation can be called during construction and <a href="/wiki/Design_patterns" title="Design patterns" class="mw-redirect">design patterns</a> such as the <a href="/wiki/Abstract_Factory_Pattern" title="Abstract Factory Pattern" class="mw-redirect">Abstract Factory Pattern</a> actively promote this usage in languages supporting the ability.</p>
<p><a name="C.2B.2B_3" id="C.2B.2B_3"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Virtual_function&amp;action=edit&amp;section=11" title="Edit section: C++">edit</a>]</span> <span class="mw-headline">C++</span></h3>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
<span class="co2">#include &lt;iostream&gt;</span>
<span class="co2">#include &lt;string&gt;</span>
 
<span class="kw2">using</span> <span class="kw2">namespace</span> std;
 
<span class="kw4">struct</span> A
<span class="br0">{</span>
  <span class="kw2">virtual</span> string name<span class="br0">(</span><span class="br0">)</span> <span class="kw4">const</span> <span class="br0">{</span> <span class="kw1">return</span> <span class="st0">"A"</span>; <span class="br0">}</span> 
  <span class="kw2">virtual</span> ~A<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> <span class="kw3">cout</span> &lt;&lt; <span class="st0">"Destructing "</span> &lt;&lt; name<span class="br0">(</span><span class="br0">)</span>; <span class="br0">}</span>   
<span class="br0">}</span>;
 
<span class="kw4">struct</span> B : A
<span class="br0">{</span>
  B<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> <span class="kw3">cout</span> &lt;&lt; <span class="st0">"Constructing "</span> &lt;&lt; name<span class="br0">(</span><span class="br0">)</span> &lt;&lt; endl; <span class="br0">}</span>
  <span class="kw2">virtual</span> string name<span class="br0">(</span><span class="br0">)</span> <span class="kw4">const</span> <span class="br0">{</span> <span class="kw1">return</span> <span class="st0">"B"</span>; <span class="br0">}</span>
<span class="br0">}</span>;
 
<span class="kw4">struct</span> C : B
<span class="br0">{</span>
  <span class="kw2">virtual</span> string name<span class="br0">(</span><span class="br0">)</span> <span class="kw4">const</span> <span class="br0">{</span> <span class="kw1">return</span> <span class="st0">"C"</span>; <span class="br0">}</span>
<span class="br0">}</span>;
 
<span class="kw4">int</span> main<span class="br0">(</span><span class="br0">)</span>
<span class="br0">{</span>
  C c; <span class="co1">// Output: "Constructing B"</span>
 
<span class="br0">}</span> <span class="co1">// Output: "Destructing A"</span>
</pre></div>
<p><a name="Java_2" id="Java_2"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Virtual_function&amp;action=edit&amp;section=12" title="Edit section: Java">edit</a>]</span> <span class="mw-headline">Java</span></h3>
<div dir="ltr" style="text-align: left;">
<pre class="source-java">
<span class="kw2">public</span> <span class="kw2">class</span> Base <span class="br0">{</span>
  <span class="kw2">public</span> <span class="kw4">int</span> length<span class="br0">(</span><span class="br0">)</span>  <span class="br0">{</span> <span class="kw2">return</span> <span class="nu0">0</span>; <span class="br0">}</span>
  <span class="kw2">public</span> Base<span class="br0">(</span><span class="br0">)</span>
  <span class="br0">{</span>
    <span class="kw3">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span><span class="st0">"Constructing "</span> + length<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>;
  <span class="br0">}</span>
 
  <span class="kw2">static</span> <span class="kw2">class</span> Derived <span class="kw2">extends</span> Base <span class="br0">{</span>
    <span class="kw3">String</span> name_;
    <span class="kw2">public</span> Derived<span class="br0">(</span><span class="kw3">String</span> name<span class="br0">)</span> 
    <span class="br0">{</span>
      name_ = name != <span class="kw2">null</span> ? name : <span class="st0">""</span>; <span class="co1">// Class invariant name_ is not null</span>
    <span class="br0">}</span>
    <span class="kw2">public</span> <span class="kw4">int</span> length<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> <span class="kw2">return</span> name_.<span class="me1">length</span><span class="br0">(</span><span class="br0">)</span>; <span class="br0">}</span> <span class="co1">// Assume name_ is not null </span>
  <span class="br0">}</span>
 
  <span class="kw2">public</span> <span class="kw2">static</span> <span class="kw4">void</span>  main<span class="br0">(</span><span class="kw3">String</span><span class="br0">[</span><span class="br0">]</span> args<span class="br0">)</span> 
  <span class="br0">{</span>
    <span class="kw2">new</span> Derived<span class="br0">(</span><span class="st0">"Ooops"</span><span class="br0">)</span>;    <span class="co1">// NullPointerException, Derived.name_ has not been assigned to yet</span>
  <span class="br0">}</span>
<span class="br0">}</span>
</pre></div>
<p>This is because the constructor of Base is executed before the constructor of Derived. As the constructor of Base calls length(), a null pointer exception is thrown.</p>
<p><a name="Virtual_destructors" id="Virtual_destructors"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Virtual_function&amp;action=edit&amp;section=13" title="Edit section: Virtual destructors">edit</a>]</span> <span class="mw-headline">Virtual destructors</span></h2>
<p>Object-oriented languages typically manage memory allocation and deallocation automatically when objects are created and destroyed, however some object-oriented languages allow a custom destructor method to be implemented if desired. One such language is C++, and as illustrated in the following example, it is important for a C++ base class to have a virtual destructor to ensure that the destructor from the most derived class will always be called.</p>
<p>In the example below having no virtual destructor, while deleting an instance of class B will correctly call destructors for both B and A if the object is deleted as an instance of B, an instance of B deleted via a pointer to its base class A will produce <a href="/wiki/Undefined_behaviour" title="Undefined behaviour" class="mw-redirect">undefined behaviour</a>.<sup id="cite_ref-C.2B.2B03_5.3.5.2F3_2-0" class="reference"><a href="#cite_note-C.2B.2B03_5.3.5.2F3-2" title=""><span>[</span>3<span>]</span></a></sup> On many implementations, the destructor for B will not be called in this situation.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
 <span class="co2">#include &lt;iostream&gt;</span>
 <span class="kw2">using</span> <span class="kw2">namespace</span> std;
 
 <span class="kw2">class</span> A
 <span class="br0">{</span>
 <span class="kw2">public</span>:
 
   A<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> <span class="br0">}</span>
   ~A<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> <span class="kw3">cout</span> &lt;&lt; <span class="st0">"Destroy A"</span> &lt;&lt; endl; <span class="br0">}</span>
 <span class="br0">}</span>;
 
 <span class="kw2">class</span> B : <span class="kw2">public</span> A
 <span class="br0">{</span>
 <span class="kw2">public</span>:
 
   B<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> <span class="br0">}</span>
   ~B<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> <span class="kw3">cout</span> &lt;&lt; <span class="st0">"Destroy B"</span> &lt;&lt; endl; <span class="br0">}</span>
 <span class="br0">}</span>;
 
 <span class="kw4">int</span> main<span class="br0">(</span><span class="br0">)</span>
 <span class="br0">{</span>
   A* b1 = <span class="kw3">new</span> B;
   B* b2 = <span class="kw3">new</span> B;
 
   <span class="kw3">delete</span> b1; <span class="co1">// According to the C++ standard,</span>
              <span class="co1">// the behaviour of this is undefined.</span>
              <span class="co1">// Usually, only ~A() is called though b1 is an instance</span>
              <span class="co1">// of class B because ~A() is not declared virtual. </span>
   <span class="kw3">delete</span> b2; <span class="co1">// Calls destructors ~B() and ~A()</span>
 
   <span class="kw1">return</span> <span class="nu0">0</span>;
 <span class="br0">}</span>
</pre></div>
<p>Possible output:</p>
<pre>
Destroy A
Destroy B
Destroy A
</pre>
<p>Correctly declaring the destructor for class A as <code>virtual ~A()</code> will ensure that the destructor for class B is called in both cases with the example above.</p>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Virtual_function&amp;action=edit&amp;section=14" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<ul>
<li><a href="/wiki/Inheritance_(computer_science)" title="Inheritance (computer science)">Inheritance (computer science)</a></li>
<li><a href="/wiki/Superclass_(computer_science)" title="Superclass (computer science)">Superclass (computer science)</a></li>
<li><a href="/wiki/Virtual_inheritance" title="Virtual inheritance">Virtual inheritance</a></li>
</ul>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Virtual_function&amp;action=edit&amp;section=15" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<ol class="references">
<li id="cite_note-0"><b><a href="#cite_ref-0" title="">^</a></b> Standard C++ 98 - 10.4/2</li>
<li id="cite_note-1"><b><a href="#cite_ref-1" title="">^</a></b> <cite style="font-style:normal" class="web" id="CITEREFMeyers2005">Meyers, Scott (June 6, 2005). <a href="http://www.artima.com/cppsource/nevercall.html" class="external text" title="http://www.artima.com/cppsource/nevercall.html" rel="nofollow">"Never Call Virtual Functions during Construction or Destruction"</a><span class="printonly">. <a href="http://www.artima.com/cppsource/nevercall.html" class="external free" title="http://www.artima.com/cppsource/nevercall.html" rel="nofollow">http://www.artima.com/cppsource/nevercall.html</a></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Never+Call+Virtual+Functions+during+Construction+or+Destruction&amp;rft.atitle=&amp;rft.aulast=Meyers&amp;rft.aufirst=Scott&amp;rft.au=Meyers%2C+Scott&amp;rft.date=June+6%2C+2005&amp;rft_id=http%3A%2F%2Fwww.artima.com%2Fcppsource%2Fnevercall.html&amp;rfr_id=info:sid/en.wikipedia.org:Virtual_function"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-C.2B.2B03_5.3.5.2F3-2"><b><a href="#cite_ref-C.2B.2B03_5.3.5.2F3_2-0" title="">^</a></b> <a href="/wiki/ISO" title="ISO" class="mw-redirect">ISO</a>/<a href="/wiki/IEC" title="IEC">IEC</a> (2003). <i><a href="/wiki/ISO/IEC_14882" title="ISO/IEC 14882" class="mw-redirect">ISO/IEC 14882:2003(E): Programming Languages - C++</a> §5.3.5 Delete [expr.delete]</i> para. 3</li>
</ol>
<ul>
<li><a href="http://www.parashift.com/c++-faq-lite/virtual-functions.html" class="external text" title="http://www.parashift.com/c++-faq-lite/virtual-functions.html" rel="nofollow">C++ FAQ Lite</a> Copyright © 1991-2006, Marshall Cline.</li>
</ul>


<!-- 
NewPP limit report
Preprocessor node count: 573/1000000
Post-expand include size: 3272/2048000 bytes
Template argument size: 1305/2048000 bytes
Expensive parser function count: 0/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:374664-0!1!0!default!!en!2 and timestamp 20090407002038 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Virtual_function">http://en.wikipedia.org/wiki/Virtual_function</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Object-oriented_programming" title="Category:Object-oriented programming">Object-oriented programming</a></span> | <span dir='ltr'><a href="/wiki/Category:C%2B%2B" title="Category:C++">C++</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_example_C%2B%2B_code" title="Category:Articles with example C++ code">Articles with example C++ code</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Virtual_function" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Virtual_function" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Virtual_function&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Virtual_function&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Virtual_function" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Virtual_function" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Virtual_function" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Virtual_function&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Virtual_function&amp;oldid=282233163" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Virtual_function&amp;id=282233163">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-cs"><a href="http://cs.wikipedia.org/wiki/Virtu%C3%A1ln%C3%AD_funkce">Česky</a></li>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/Virtuelle_Methode">Deutsch</a></li>
				<li class="interwiki-es"><a href="http://es.wikipedia.org/wiki/Funci%C3%B3n_virtual">Español</a></li>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Fonction_virtuelle">Français</a></li>
				<li class="interwiki-it"><a href="http://it.wikipedia.org/wiki/Funzione_virtuale">Italiano</a></li>
				<li class="interwiki-pl"><a href="http://pl.wikipedia.org/wiki/Metoda_wirtualna">Polski</a></li>
				<li class="interwiki-ro"><a href="http://ro.wikipedia.org/wiki/Func%C5%A3ie_virtual%C4%83">Română</a></li>
				<li class="interwiki-ru"><a href="http://ru.wikipedia.org/wiki/%D0%92%D0%B8%D1%80%D1%82%D1%83%D0%B0%D0%BB%D1%8C%D0%BD%D1%8B%D0%B9_%D0%BC%D0%B5%D1%82%D0%BE%D0%B4">Русский</a></li>
				<li class="interwiki-sv"><a href="http://sv.wikipedia.org/wiki/Funktion_(programmering)#Virtuell_funktion">Svenska</a></li>
				<li class="interwiki-zh"><a href="http://zh.wikipedia.org/wiki/%E8%99%9A%E5%87%BD%E6%95%B0">中文</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 7 April 2009, at 00:20.</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv69 in 0.060 secs. --></body></html>
