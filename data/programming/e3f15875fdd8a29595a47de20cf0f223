<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Scope (programming),Articles needing additional references from December 2008,Algol programming language,Algorithm,Block (programming),C (programming language),C Sharp (programming language),Call stack,Closure (computer science),Common Lisp,Compile time" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Scope_(programming)&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Scope_(programming)&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Scope (programming) - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Scope_(programming)";
		var wgTitle = "Scope (programming)";
		var wgAction = "view";
		var wgArticleId = "62068";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 278247554;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
<style type="text/css">/*<![CDATA[*/
.source-csharp {line-height: normal;}
.source-csharp li, .source-csharp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for csharp
 * CSS class: source-csharp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-csharp .de1, .source-csharp .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-csharp  {}
.source-csharp .head {}
.source-csharp .foot {}
.source-csharp .imp {font-weight: bold; color: red;}
.source-csharp .ln-xtra {color: #cc0; background-color: #ffc;}
.source-csharp li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-csharp li.li2 {font-weight: bold;}
.source-csharp .kw1 {color: #0600FF;}
.source-csharp .kw2 {color: #FF8000; font-weight: bold;}
.source-csharp .kw3 {color: #008000;}
.source-csharp .kw4 {color: #FF0000;}
.source-csharp .kw5 {color: #000000;}
.source-csharp .co1 {color: #008080; font-style: italic;}
.source-csharp .co2 {color: #008080;}
.source-csharp .coMULTI {color: #008080; font-style: italic;}
.source-csharp .es0 {color: #008080; font-weight: bold;}
.source-csharp .br0 {color: #008000;}
.source-csharp .st0 {color: #808080;}
.source-csharp .nu0 {color: #FF0000;}
.source-csharp .me1 {color: #0000FF;}
.source-csharp .me2 {color: #0000FF;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-pascal {line-height: normal;}
.source-pascal li, .source-pascal pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for pascal
 * CSS class: source-pascal, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-pascal .de1, .source-pascal .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-pascal  {}
.source-pascal .head {}
.source-pascal .foot {}
.source-pascal .imp {font-weight: bold; color: red;}
.source-pascal .ln-xtra {color: #cc0; background-color: #ffc;}
.source-pascal li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-pascal li.li2 {font-weight: bold;}
.source-pascal .kw1 {color: #b1b100;}
.source-pascal .kw2 {color: #000000; font-weight: bold;}
.source-pascal .kw3 {}
.source-pascal .kw4 {color: #993333;}
.source-pascal .co1 {color: #808080; font-style: italic;}
.source-pascal .co2 {color: #339933;}
.source-pascal .coMULTI {color: #808080; font-style: italic;}
.source-pascal .es0 {color: #000099; font-weight: bold;}
.source-pascal .br0 {color: #66cc66;}
.source-pascal .st0 {color: #ff0000;}
.source-pascal .nu0 {color: #cc66cc;}
.source-pascal .me1 {color: #202020;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-c .de1, .source-c .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-c  {}
.source-c .head {}
.source-c .foot {}
.source-c .imp {font-weight: bold; color: red;}
.source-c .ln-xtra {color: #cc0; background-color: #ffc;}
.source-c li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-c li.li2 {font-weight: bold;}
.source-c .kw1 {color: #b1b100;}
.source-c .kw2 {color: #000000; font-weight: bold;}
.source-c .kw3 {color: #000066;}
.source-c .kw4 {color: #993333;}
.source-c .co1 {color: #808080; font-style: italic;}
.source-c .co2 {color: #339933;}
.source-c .coMULTI {color: #808080; font-style: italic;}
.source-c .es0 {color: #000099; font-weight: bold;}
.source-c .br0 {color: #66cc66;}
.source-c .st0 {color: #ff0000;}
.source-c .nu0 {color: #cc66cc;}
.source-c .me1 {color: #202020;}
.source-c .me2 {color: #202020;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-perl {line-height: normal;}
.source-perl li, .source-perl pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for perl
 * CSS class: source-perl, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-perl .de1, .source-perl .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-perl  {}
.source-perl .head {}
.source-perl .foot {}
.source-perl .imp {font-weight: bold; color: red;}
.source-perl .ln-xtra {color: #cc0; background-color: #ffc;}
.source-perl li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-perl li.li2 {font-weight: bold;}
.source-perl .kw1 {color: #b1b100;}
.source-perl .kw2 {color: #000000; font-weight: bold;}
.source-perl .kw3 {color: #000066;}
.source-perl .co1 {color: #808080; font-style: italic;}
.source-perl .coMULTI {color: #808080; font-style: italic;}
.source-perl .es0 {color: #000099; font-weight: bold;}
.source-perl .br0 {color: #66cc66;}
.source-perl .st0 {color: #ff0000;}
.source-perl .nu0 {color: #cc66cc;}
.source-perl .me1 {color: #006600;}
.source-perl .me2 {color: #006600;}
.source-perl .re0 {color: #0000ff;}
.source-perl .re4 {color: #009999;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style>		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Scope_programming skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Scope (programming)</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<table class="metadata plainlinks ambox ambox-content" style="">
<tr>
<td class="mbox-image">
<div style="width: 52px;"><a href="/wiki/File:Question_book-new.svg" class="image" title="Question book-new.svg"><img alt="" src="http://upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/50px-Question_book-new.svg.png" width="50" height="39" border="0" /></a></div>
</td>
<td class="mbox-text" style="">This article <b>needs additional <a href="/wiki/Wikipedia:Citing_sources" title="Wikipedia:Citing sources">citations</a> for <a href="/wiki/Wikipedia:Verifiability" title="Wikipedia:Verifiability">verification</a>.</b> Please help <a href="http://en.wikipedia.org/w/index.php?title=Scope_(programming)&amp;action=edit" class="external text" title="http://en.wikipedia.org/w/index.php?title=Scope_(programming)&amp;action=edit" rel="nofollow">improve this article</a> by adding <a href="/wiki/Wikipedia:Reliable_sources" title="Wikipedia:Reliable sources">reliable references</a> (ideally, using <i><a href="/wiki/Wikipedia:Footnotes" title="Wikipedia:Footnotes">inline citations</a></i>). Unsourced material may be <a href="/wiki/Template:Fact" title="Template:Fact">challenged</a> and <a href="/wiki/Wikipedia:BURDEN" title="Wikipedia:BURDEN" class="mw-redirect">removed</a>. <small><i>(December 2008)</i></small></td>
</tr>
</table>
<p>In <a href="/wiki/Computer_programming" title="Computer programming">computer programming</a>, <b>scope</b> is an enclosing context where values and expressions are associated. Various programming languages have various types of scopes. The type of scope determines what kind of entities it can contain and how it affects them -- or <a href="/wiki/Formal_semantics_of_programming_languages" title="Formal semantics of programming languages">semantics</a>. Typically, scope is used to define the visibility and reach of <a href="/wiki/Information_hiding" title="Information hiding">information hiding</a>. Scopes can:</p>
<ul>
<li>contain <a href="/wiki/Declaration_(computer_science)" title="Declaration (computer science)">declarations</a> or definitions of <a href="/wiki/Identifier" title="Identifier">identifiers</a>;</li>
<li>contain <a href="/wiki/Statement_(programming)" title="Statement (programming)">statements</a> and/or <a href="/wiki/Expression_(programming)" title="Expression (programming)">expressions</a> which define an executable <a href="/wiki/Algorithm" title="Algorithm">algorithm</a> or part thereof;</li>
<li>nest or be nested.</li>
</ul>
<p>A <a href="/wiki/Namespace_(programming)" title="Namespace (programming)" class="mw-redirect">namespace</a> is a scope that uses the enclosing nature of the scope to group logically related identifiers under a single identifier. Thus, scopes can affect the <a href="/wiki/Name_resolution" title="Name resolution">name resolution</a> for their contents.</p>
<p><a href="/wiki/Variable#Scope_and_extent" title="Variable">Variables are associated with scopes</a>. Different scoping types affect how local variables are <a href="/wiki/Name_binding" title="Name binding">bound</a>. This has different consequences depending if the language has <a href="#Static_versus_dynamic_scoping" title="">static (lexical) or dynamic scoping</a>.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#History"><span class="tocnumber">1</span> <span class="toctext">History</span></a></li>
<li class="toclevel-1"><a href="#Example"><span class="tocnumber">2</span> <span class="toctext">Example</span></a></li>
<li class="toclevel-1"><a href="#Static_versus_dynamic_scoping"><span class="tocnumber">3</span> <span class="toctext">Static versus dynamic scoping</span></a>
<ul>
<li class="toclevel-2"><a href="#Static_scoping_.28also_known_as_lexical_scoping.29"><span class="tocnumber">3.1</span> <span class="toctext">Static scoping (also known as lexical scoping)</span></a></li>
<li class="toclevel-2"><a href="#Dynamic_scoping"><span class="tocnumber">3.2</span> <span class="toctext">Dynamic scoping</span></a></li>
<li class="toclevel-2"><a href="#Example_2"><span class="tocnumber">3.3</span> <span class="toctext">Example</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">4</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">5</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">6</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="History" id="History"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Scope_(programming)&amp;action=edit&amp;section=1" title="Edit section: History">edit</a>]</span> <span class="mw-headline">History</span></h2>
<p>Static scoping (also known as lexical scoping) was first introduced in Lisp 1.5 (via the <a href="/w/index.php?title=FUNARG&amp;action=edit&amp;redlink=1" class="new" title="FUNARG (page does not exist)">FUNARG</a> device developed by <a href="/wiki/Steve_Russell" title="Steve Russell">Steve Russell</a>, working under <a href="/wiki/John_McCarthy_(computer_scientist)" title="John McCarthy (computer scientist)">John McCarthy</a>) and added later into <a href="/wiki/Algol_programming_language" title="Algol programming language" class="mw-redirect">Algol</a> 60 (also by Steve Russell), and has been picked up in other languages since then. Descendants of dynamically scoped languages often adopt static scoping. <a href="/wiki/Emacs_Lisp" title="Emacs Lisp">Emacs Lisp</a>, for example, uses dynamic scoping, <a href="/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a> has both dynamic and static scoping, and <a href="/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme</a> uses static scoping exclusively. The original Lisp used dynamic scoping. In other cases, languages which already had dynamic scoping have added static scoping afterwards, such as <a href="/wiki/Perl" title="Perl">Perl</a>. <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a> and <a href="/wiki/Pascal_programming_language" title="Pascal programming language" class="mw-redirect">Pascal</a> have always had static scoping, since they are both influenced by the ideas that went into Algol.</p>
<p><a name="Example" id="Example"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Scope_(programming)&amp;action=edit&amp;section=2" title="Edit section: Example">edit</a>]</span> <span class="mw-headline">Example</span></h2>
<p>The following example shows various scopes declared in the language <a href="/wiki/C_Sharp_(programming_language)" title="C Sharp (programming language)">C#</a>:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-csharp">
<span class="kw1">namespace</span> N
<span class="br0">{</span>                        <span class="co1">// namespace scope, merely groups identifiers</span>
   <span class="kw4">class</span> C
   <span class="br0">{</span>                     <span class="co1">// class scope, defines/declares member variables and functions</span>
      <span class="kw1">void</span> f <span class="br0">(</span><span class="kw4">bool</span> b<span class="br0">)</span>
      <span class="br0">{</span>                  <span class="co1">// outermost block (function) scope, contains executable statements</span>
         <span class="kw1">if</span> <span class="br0">(</span>b<span class="br0">)</span>
         <span class="br0">{</span>               <span class="co1">// inner block scope for conditionally executed statements</span>
                          <span class="co1">// (Note, both block scopes are unnamed.)</span>
           ...
         <span class="br0">}</span>
      <span class="br0">}</span>
   <span class="br0">}</span>
<span class="br0">}</span>
</pre></div>
<p><a name="Static_versus_dynamic_scoping" id="Static_versus_dynamic_scoping"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Scope_(programming)&amp;action=edit&amp;section=3" title="Edit section: Static versus dynamic scoping">edit</a>]</span> <span class="mw-headline">Static versus dynamic scoping</span></h2>
<p>One of the basic reasons for scoping is to keep variables in different parts of the program distinct from one another. Since there are only a small number of short variable names, and programmers share habits about the naming of variables (e.g., <code>i</code> for an array index), in any program of moderate size the same variable name will be used in multiple different scopes. The question of how to match various variable occurrences to the appropriate <a href="/wiki/Name_binding" title="Name binding">binding</a> sites is generally answered in one of two ways: <b>static scoping</b> and <b>dynamic scoping</b>.</p>
<p><a name="Static_scoping_.28also_known_as_lexical_scoping.29" id="Static_scoping_.28also_known_as_lexical_scoping.29"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Scope_(programming)&amp;action=edit&amp;section=4" title="Edit section: Static scoping (also known as lexical scoping)">edit</a>]</span> <span class="mw-headline">Static scoping (also known as lexical scoping)</span></h3>
<p>With static scope, a variable always refers to its top-level environment. This is a property of the program text and unrelated to the runtime <a href="/wiki/Call_stack" title="Call stack">call stack</a>. Because matching a variable to its binding only requires analysis of the program text, this type of scoping is sometimes also called <i>lexical</i> scoping. Static scope is standard in modern functional languages such as <a href="/wiki/ML_programming_language" title="ML programming language" class="mw-redirect">ML</a> and <a href="/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell</a> because it allows the programmer to reason as if variable bindings are carried out by substitution. Static scoping also makes it much easier to make modular code and reason about it, since its binding structure can be understood in isolation. In contrast, dynamic scope forces the programmer to anticipate all possible dynamic contexts in which the module's code may be invoked.</p>
<p>For example, consider the following program fragment (in Pascal):</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-pascal">
<span class="kw2">Program</span> A;
<span class="kw1">Var</span> I:<span class="kw4">Integer</span>;
    K:<span class="kw4">Char</span>;
    R:<span class="kw4">Real</span>;
 
    <span class="kw2">Procedure</span> B;
    <span class="kw1">Var</span> K:<span class="kw4">Real</span>;
        L:<span class="kw4">Integer</span>;
 
        <span class="kw2">Procedure</span> C;
        <span class="kw1">Var</span> M:<span class="kw4">Real</span>;
 
        <span class="kw1">Begin</span>
        <span class="co1">// (1)</span>
        <span class="kw1">End</span>;
 
    <span class="kw1">Begin</span>
    <span class="co1">// (2)</span>
    <span class="kw1">End</span>;
 
<span class="kw1">Begin</span>
<span class="co1">// (3)</span>
<span class="kw1">end</span>.
</pre></div>
<p>In the above code, the variable I is accessible as an Integer at points <code>(1)</code>, <code>(2)</code> and <code>(3)</code> in the program because its scope is global, and is not overridden by another variable of the same name. The variable K is accessible as a Real at points <code>(1)</code> and <code>(2)</code> and as a character at <code>(3)</code>. Also, because of the scope of K, the variable called K in C (at point <code>(1)</code>) and B (at point <code>(2)</code>) is not the same variable K in the main program at point <code>(3)</code>. Variable L is accessible only in procedure C at point <code>(1)</code> and procedure B at point <code>(2)</code>, and is not accessible from the main program. Variable M is only accessible in procedure C at point <code>(1)</code>, and is not accessible either from Procedure B or the main program. Also, procedure C can only be called from Procedure B; it cannot be called from the main program. Also, there could be yet another procedure C declared later in the program, and a reference to that procedure would be dependent upon where in the program code as to which procedure is being called, same as to which variable is being referenced in the above example.</p>
<p>Correct implementation of static scope in languages with first-class nested functions can be subtle, as it requires each function value to carry with it a record of the values of the variables that it depends on (the pair of the function and this environment is called a <a href="/wiki/Closure_(computer_science)" title="Closure (computer science)">closure</a>). When first-class nested functions are not used or not available (such as in C), this overhead is of course not incurred. Variable lookup is always very efficient with static scope, as the location of each value is known at <a href="/wiki/Compile_time" title="Compile time">compile time</a>.</p>
<p><a name="Dynamic_scoping" id="Dynamic_scoping"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Scope_(programming)&amp;action=edit&amp;section=5" title="Edit section: Dynamic scoping">edit</a>]</span> <span class="mw-headline">Dynamic scoping</span></h3>
<p>With dynamic scope, each identifier has a global <a href="/wiki/Stack" title="Stack">stack</a> of bindings. Introducing a local variable with name <i>x</i> pushes a binding onto the global <i>x</i> stack (which may have been empty), which is popped off when the <a href="/wiki/Control_flow" title="Control flow">control flow</a> leaves the scope. Evaluating <i>x</i> in any context always yields the top binding. In other words, a global identifier refers to the identifier associated with the most recent environment. Note that this cannot be done at compile time because the binding stack only exists at <a href="/wiki/Runtime" title="Runtime">runtime</a>, which is why this type of scoping is called <i>dynamic</i> scoping.</p>
<p>Generally, certain <a href="/wiki/Block_(programming)" title="Block (programming)" class="mw-redirect">blocks</a> are defined to create bindings whose lifetime is the execution time of the block; this adds some features of static scoping to the dynamic scoping process. However, since a section of code can be called from many different locations and situations, it can be difficult to determine at the outset what bindings will apply when a variable is used (or if one exists at all). This can be beneficial; application of the <a href="/wiki/Principle_of_least_knowledge" title="Principle of least knowledge" class="mw-redirect">principle of least knowledge</a> suggests that code avoid depending on the <i>reasons</i> for (or circumstances of) a variable's value, but simply use the value according to the variable's definition. This narrow interpretation of shared data can provide a very flexible system for adapting the behavior of a function to the current state (or policy) of the system. However, this benefit relies on careful documentation of all variables used this way as well as on careful avoidance of assumptions about a variable's behavior, and does not provide any mechanism to detect interference between different parts of a program. As such, dynamic scoping can be dangerous and almost no modern languages use it. Some languages, like <a href="/wiki/Perl" title="Perl">Perl</a> and <a href="/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a>, allow the programmer to choose static or dynamic scoping when (re)defining a variable. <a href="/wiki/Logo_(programming_language)" title="Logo (programming language)">Logo</a> and <a href="/wiki/Emacs_lisp" title="Emacs lisp" class="mw-redirect">Emacs lisp</a> are some of the few languages that use dynamic scoping.</p>
<p>Dynamic scoping is fairly easy to implement. To find an identifier's value, the program can traverse the runtime stack, checking each activation record (each function's stack frame) for a value for the identifier. This is known as <a href="/wiki/Deep_binding" title="Deep binding" class="mw-redirect">deep binding</a>. An alternate strategy that is usually more efficient is to maintain a stack of bindings for each identifier; the stack is modified whenever the variable is bound or unbound, and a variable's value is simply that of the top binding on the stack. This is called <a href="/wiki/Shallow_binding" title="Shallow binding" class="mw-redirect">shallow binding</a>. Note that both of these strategies assume a last-in-first-out (LIFO) ordering to bindings for any one variable; in practice all bindings are so ordered.</p>
<p><a name="Example_2" id="Example_2"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Scope_(programming)&amp;action=edit&amp;section=6" title="Edit section: Example">edit</a>]</span> <span class="mw-headline">Example</span></h3>
<p>This example compares the consequences of using static scope and dynamic scope. Observe the following code, in a C-like language:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">int</span> x = <span class="nu0">0</span>;
<span class="kw4">int</span> f<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> <span class="kw1">return</span> x; <span class="br0">}</span>
<span class="kw4">int</span> g<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> <span class="kw4">int</span> x = <span class="nu0">1</span>; <span class="kw1">return</span> f<span class="br0">(</span><span class="br0">)</span>; <span class="br0">}</span>
</pre></div>
<p>With static scoping, calling <i>g</i> will return 0 since it has been determined at compile time that the expression <i>x</i> in any invocation of <i>f</i> will yield the global <i>x</i> binding which is unaffected by the introduction of a local variable of the same name in <i>g</i>.</p>
<p>With dynamic scoping, the binding stack for the <i>x</i> identifier will contain two items when <i>f</i> is invoked from <i>g</i>: the global binding to 0, and the binding to 1 introduced in <i>g</i> (which is still present on the stack since the control flow hasn't left <i>g</i> yet). Since evaluating the identifier expression by definition always yields the top binding, the result is 1.</p>
<p>In the language <a href="/wiki/Perl" title="Perl">Perl</a>, variables can be defined with either static or dynamic scoping. Perl's keyword "<code>my</code>" defines a <i>statically</i> scoped local variable, while the keyword "<code>local</code>" defines <i>dynamically</i> scoped local variable<sup id="cite_ref-0" class="reference"><a href="#cite_note-0" title=""><span>[</span>1<span>]</span></a></sup>. This allows for further clarification with practical examples of each scoping model.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-perl">
<span class="re0">$x</span> = <span class="nu0">0</span>;
<span class="kw2">sub</span> f <span class="br0">{</span> <span class="kw3">return</span> <span class="re0">$x</span>; <span class="br0">}</span>
<span class="kw2">sub</span> g <span class="br0">{</span> <span class="kw1">my</span> <span class="re0">$x</span> = <span class="nu0">1</span>; <span class="kw3">return</span> f<span class="br0">(</span><span class="br0">)</span>; <span class="br0">}</span>
<span class="kw3">print</span> g<span class="br0">(</span><span class="br0">)</span>.<span class="st0">"<span class="es0">\n</span>"</span>;
</pre></div>
<p>The example above uses "<code>my</code>" for static scoping of g's local variable <i>$x</i>. As above, calling <i>g</i> returns 0 because <i>f</i> cannot see g's variable <i>$x</i>, so it looks for the global <i>$x</i>.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-perl">
<span class="re0">$x</span> = <span class="nu0">0</span>;
<span class="kw2">sub</span> f <span class="br0">{</span> <span class="kw3">return</span> <span class="re0">$x</span>; <span class="br0">}</span>
<span class="kw2">sub</span> g <span class="br0">{</span> <span class="kw3">local</span> <span class="re0">$x</span> = <span class="nu0">1</span>; <span class="kw3">return</span> f<span class="br0">(</span><span class="br0">)</span>; <span class="br0">}</span>
<span class="kw3">print</span> g<span class="br0">(</span><span class="br0">)</span>.<span class="st0">"<span class="es0">\n</span>"</span>;
</pre></div>
<p>In this alternative, "<code>local</code>" is used to make g's <i>$x</i> dynamically-scoped. Now, calling <i>g</i> yields 1 because <i>f</i> sees g's local variable by looking up the execution stack.</p>
<p>In other words, the dynamically-scoped variable <i>$x</i> is resolved in the environment of execution, rather than the environment of definition.</p>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Scope_(programming)&amp;action=edit&amp;section=7" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<ul>
<li><a href="/wiki/Harold_Abelson" title="Harold Abelson" class="mw-redirect">Harold Abelson</a> and <a href="/wiki/Gerald_Jay_Sussman" title="Gerald Jay Sussman">Gerald Jay Sussman</a>. <a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-35.html#%_sec_5.5.6" class="external text" title="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-35.html#%_sec_5.5.6" rel="nofollow">“Lexical addressing”</a>. <i><a href="/wiki/Structure_and_Interpretation_of_Computer_Programs" title="Structure and Interpretation of Computer Programs">Structure and Interpretation of Computer Programs</a></i>.</li>
</ul>
<div class="references-small">
<ol class="references">
<li id="cite_note-0"><b><a href="#cite_ref-0" title="">^</a></b> <a href="http://www.perl.com/doc/FAQs/FAQ/oldfaq-html/Q4.3.html" class="external text" title="http://www.perl.com/doc/FAQs/FAQ/oldfaq-html/Q4.3.html" rel="nofollow">Perl FAQ 4.3 What's the difference between dynamic and static (lexical) scoping?</a></li>
</ol>
</div>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Scope_(programming)&amp;action=edit&amp;section=8" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<ul>
<li><a href="/wiki/Closure_(computer_science)" title="Closure (computer science)">Closure (computer science)</a></li>
<li><a href="/wiki/Global_variable" title="Global variable">Global variable</a></li>
<li><a href="/wiki/Local_variable" title="Local variable">Local variable</a></li>
<li><a href="/wiki/Name_binding" title="Name binding">Name binding</a></li>
<li><a href="/wiki/Name_resolution" title="Name resolution">Name resolution</a></li>
<li><a href="/wiki/Variable#Scope_and_extent" title="Variable">Variables (scope and extent)</a></li>
<li><a href="/wiki/Information_hiding" title="Information hiding">Information hiding</a></li>
</ul>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Scope_(programming)&amp;action=edit&amp;section=9" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<ul>
<li><a href="http://blogs.msdn.com/kartikb/archive/2009/01/15/lexical-scoping.aspx" class="external text" title="http://blogs.msdn.com/kartikb/archive/2009/01/15/lexical-scoping.aspx" rel="nofollow">"Lexical Scoping in JavaScript"</a> A blogpost on Lexical scoping in Javascript by Kartik bansal</li>
</ul>


<!-- 
NewPP limit report
Preprocessor node count: 189/1000000
Post-expand include size: 3386/2048000 bytes
Template argument size: 1236/2048000 bytes
Expensive parser function count: 1/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:62068-0!1!0!default!!en!2 and timestamp 20090403093242 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Scope_(programming)">http://en.wikipedia.org/wiki/Scope_(programming)</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Programming_constructs" title="Category:Programming constructs">Programming constructs</a></span></div><div id="mw-hidden-catlinks" class="mw-hidden-cats-hidden">Hidden categories:&#32;<span dir='ltr'><a href="/wiki/Category:Articles_needing_additional_references_from_December_2008" title="Category:Articles needing additional references from December 2008">Articles needing additional references from December 2008</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Scope_(programming)" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Scope_(programming)" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Scope_(programming)&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Scope_(programming)&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Scope_(programming)" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Scope_(programming)" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Scope_(programming)" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Scope_(programming)&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Scope_(programming)&amp;oldid=278247554" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Scope_(programming)&amp;id=278247554">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/Variable_(Programmierung)#G.C3.BCltigkeitsbereich_von_Variablen_.28Scope.29">Deutsch</a></li>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Port%C3%A9e_(informatique)">Français</a></li>
				<li class="interwiki-it"><a href="http://it.wikipedia.org/wiki/Visibilit%C3%A0">Italiano</a></li>
				<li class="interwiki-nl"><a href="http://nl.wikipedia.org/wiki/Variabelenbereik">Nederlands</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%97">日本語</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 19 March 2009, at 01:48 (UTC).</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv192 in 0.074 secs. --></body></html>
