<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Name mangling,Application binary interface,Boost library,C++,C (programming language),C Sharp (programming language),Calling convention,Case insensitive,Class (computer science),Classloader,Compiler" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Name_mangling&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Name_mangling&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Name mangling - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Name_mangling";
		var wgTitle = "Name mangling";
		var wgAction = "view";
		var wgArticleId = "725961";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 283703413;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
<style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-c .de1, .source-c .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-c  {}
.source-c .head {}
.source-c .foot {}
.source-c .imp {font-weight: bold; color: red;}
.source-c .ln-xtra {color: #cc0; background-color: #ffc;}
.source-c li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-c li.li2 {font-weight: bold;}
.source-c .kw1 {color: #b1b100;}
.source-c .kw2 {color: #000000; font-weight: bold;}
.source-c .kw3 {color: #000066;}
.source-c .kw4 {color: #993333;}
.source-c .co1 {color: #808080; font-style: italic;}
.source-c .co2 {color: #339933;}
.source-c .coMULTI {color: #808080; font-style: italic;}
.source-c .es0 {color: #000099; font-weight: bold;}
.source-c .br0 {color: #66cc66;}
.source-c .st0 {color: #ff0000;}
.source-c .nu0 {color: #cc66cc;}
.source-c .me1 {color: #202020;}
.source-c .me2 {color: #202020;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-cpp {line-height: normal;}
.source-cpp li, .source-cpp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for cpp
 * CSS class: source-cpp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-cpp .de1, .source-cpp .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-cpp  {}
.source-cpp .head {}
.source-cpp .foot {}
.source-cpp .imp {font-weight: bold; color: red;}
.source-cpp .ln-xtra {color: #cc0; background-color: #ffc;}
.source-cpp li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-cpp li.li2 {font-weight: bold;}
.source-cpp .kw1 {color: #0000ff;}
.source-cpp .kw2 {color: #0000ff;}
.source-cpp .kw3 {color: #0000dd;}
.source-cpp .kw4 {color: #0000ff;}
.source-cpp .co1 {color: #ff0000;}
.source-cpp .co2 {color: #339900;}
.source-cpp .coMULTI {color: #ff0000; font-style: italic;}
.source-cpp .es0 {color: #666666; font-weight: bold;}
.source-cpp .br0 {color: #000000;}
.source-cpp .st0 {color: #666666;}
.source-cpp .nu0 {color: #0000dd;}
.source-cpp .me1 {color: #00eeff;}
.source-cpp .me2 {color: #00eeff;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-java {line-height: normal;}
.source-java li, .source-java pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for java
 * CSS class: source-java, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-java .de1, .source-java .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-java  {}
.source-java .head {}
.source-java .foot {}
.source-java .imp {font-weight: bold; color: red;}
.source-java .ln-xtra {color: #cc0; background-color: #ffc;}
.source-java li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-java li.li2 {font-weight: bold;}
.source-java .kw1 {color: #b1b100;}
.source-java .kw2 {color: #000000; font-weight: bold;}
.source-java .kw3 {color: #aaaadd; font-weight: bold;}
.source-java .kw4 {color: #993333;}
.source-java .co1 {color: #808080; font-style: italic;}
.source-java .co2 {color: #a1a100;}
.source-java .coMULTI {color: #808080; font-style: italic;}
.source-java .es0 {color: #000099; font-weight: bold;}
.source-java .br0 {color: #66cc66;}
.source-java .st0 {color: #ff0000;}
.source-java .nu0 {color: #cc66cc;}
.source-java .me1 {color: #006600;}
.source-java .me2 {color: #006600;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-python {line-height: normal;}
.source-python li, .source-python pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for python
 * CSS class: source-python, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-python .de1, .source-python .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-python  {}
.source-python .head {}
.source-python .foot {}
.source-python .imp {font-weight: bold; color: red;}
.source-python .ln-xtra {color: #cc0; background-color: #ffc;}
.source-python li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-python li.li2 {font-weight: bold;}
.source-python .kw1 {color: #ff7700;font-weight:bold;}
.source-python .kw2 {color: #008000;}
.source-python .kw3 {color: #dc143c;}
.source-python .kw4 {color: #0000cd;}
.source-python .co1 {color: #808080; font-style: italic;}
.source-python .coMULTI {color: #808080; font-style: italic;}
.source-python .es0 {color: #000099; font-weight: bold;}
.source-python .br0 {color: #66cc66;}
.source-python .st0 {color: #483d8b;}
.source-python .nu0 {color: #ff4500;}
.source-python .me1 {color: black;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-pascal {line-height: normal;}
.source-pascal li, .source-pascal pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for pascal
 * CSS class: source-pascal, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-pascal .de1, .source-pascal .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-pascal  {}
.source-pascal .head {}
.source-pascal .foot {}
.source-pascal .imp {font-weight: bold; color: red;}
.source-pascal .ln-xtra {color: #cc0; background-color: #ffc;}
.source-pascal li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-pascal li.li2 {font-weight: bold;}
.source-pascal .kw1 {color: #b1b100;}
.source-pascal .kw2 {color: #000000; font-weight: bold;}
.source-pascal .kw3 {}
.source-pascal .kw4 {color: #993333;}
.source-pascal .co1 {color: #808080; font-style: italic;}
.source-pascal .co2 {color: #339933;}
.source-pascal .coMULTI {color: #808080; font-style: italic;}
.source-pascal .es0 {color: #000099; font-weight: bold;}
.source-pascal .br0 {color: #66cc66;}
.source-pascal .st0 {color: #ff0000;}
.source-pascal .nu0 {color: #cc66cc;}
.source-pascal .me1 {color: #202020;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style>		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Name_mangling skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Name mangling</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<table class="metadata plainlinks ambox ambox-style" style="">
<tr>
<td class="mbox-image">
<div style="width: 52px;"><a href="/wiki/File:Ambox_style.png" class="image" title="Ambox style.png"><img alt="" src="http://upload.wikimedia.org/wikipedia/en/d/d6/Ambox_style.png" width="40" height="40" border="0" /></a></div>
</td>
<td class="mbox-text" style="">This article's <b>citation style may be unclear</b>. The references used may be clearer with a different or consistent style of <a href="/wiki/Wikipedia:Citing_sources" title="Wikipedia:Citing sources">citation</a>, <a href="/wiki/Wikipedia:Footnote" title="Wikipedia:Footnote" class="mw-redirect">footnoting</a>, or <a href="/wiki/Wikipedia:External_links" title="Wikipedia:External links">external linking</a>.</td>
</tr>
</table>
<div class="dablink">This article is about name mangling in computer languages.  For name mangling in file systems, see <a href="/wiki/Filename_mangling" title="Filename mangling">filename mangling</a>.</div>
<p>In <a href="/wiki/Software" title="Software" class="mw-redirect">software</a> <a href="/wiki/Compiler" title="Compiler">compiler</a> <a href="/wiki/Software_engineering" title="Software engineering">engineering</a>, <b>name mangling</b> (more properly called <b>name decoration</b>, although this term is less commonly used) is a technique used to solve various problems caused by the need to resolve unique names for programming entities in many modern <a href="/wiki/Programming_language" title="Programming language">programming languages</a>.</p>
<p>It provides a way of encoding additional information about the name of a <a href="/wiki/Function_(programming)" title="Function (programming)" class="mw-redirect">function</a>, <a href="/wiki/Structure" title="Structure">structure</a>, <a href="/wiki/Class_(computer_science)" title="Class (computer science)">class</a> or another <a href="/wiki/Datatype" title="Datatype" class="mw-redirect">datatype</a> in order to pass more semantic information from the <a href="/wiki/Compiler" title="Compiler">compilers</a> to <a href="/wiki/Linker" title="Linker">linkers</a>.</p>
<p>The need arises where the language allows different entities to be named with the same <a href="/wiki/Identifier" title="Identifier">identifier</a> as long as they occupy a different <a href="/wiki/Namespace_(computer_science)" title="Namespace (computer science)">namespace</a> (where a namespace is typically defined by a module, class, or explicit <i>namespace</i> directive).</p>
<p>Any <a href="/wiki/Object_code" title="Object code" class="mw-redirect">object code</a> produced by compilers is usually linked with other pieces of object code (produced by the same or another compiler) by a type of program called a <a href="/wiki/Linker" title="Linker">linker</a>. The linker needs a great deal of information on each program entity. For example, to correctly link a function it needs its name, the number of arguments and their types, and so on.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#C_name_decoration_in_Microsoft_Windows"><span class="tocnumber">1</span> <span class="toctext">C name decoration in Microsoft Windows</span></a></li>
<li class="toclevel-1"><a href="#Name_mangling_in_C.2B.2B"><span class="tocnumber">2</span> <span class="toctext">Name mangling in C++</span></a>
<ul>
<li class="toclevel-2"><a href="#Simple_example"><span class="tocnumber">2.1</span> <span class="toctext">Simple example</span></a></li>
<li class="toclevel-2"><a href="#Complex_example"><span class="tocnumber">2.2</span> <span class="toctext">Complex example</span></a></li>
<li class="toclevel-2"><a href="#How_different_compilers_mangle_the_same_functions"><span class="tocnumber">2.3</span> <span class="toctext">How different compilers mangle the same functions</span></a></li>
<li class="toclevel-2"><a href="#Handling_of_C_symbols_when_linking_from_C.2B.2B"><span class="tocnumber">2.4</span> <span class="toctext">Handling of C symbols when linking from C++</span></a></li>
<li class="toclevel-2"><a href="#Standardised_name_mangling_in_C.2B.2B"><span class="tocnumber">2.5</span> <span class="toctext">Standardised name mangling in C++</span></a></li>
<li class="toclevel-2"><a href="#Real-world_effects_of_C.2B.2B_name_mangling"><span class="tocnumber">2.6</span> <span class="toctext">Real-world effects of C++ name mangling</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Name_mangling_in_Java"><span class="tocnumber">3</span> <span class="toctext">Name mangling in Java</span></a>
<ul>
<li class="toclevel-2"><a href="#Creating_unique_names_for_inner_and_anonymous_classes"><span class="tocnumber">3.1</span> <span class="toctext">Creating unique names for inner and anonymous classes</span></a></li>
<li class="toclevel-2"><a href="#Handling_issues_with_the_java_to_native_interface"><span class="tocnumber">3.2</span> <span class="toctext">Handling issues with the java to native interface</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Name_mangling_in_Python"><span class="tocnumber">4</span> <span class="toctext">Name mangling in Python</span></a></li>
<li class="toclevel-1"><a href="#Name_mangling_in_Borland.27s_Turbo_Pascal_.2F_Delphi_range"><span class="tocnumber">5</span> <span class="toctext">Name mangling in Borland's Turbo Pascal / Delphi range</span></a></li>
<li class="toclevel-1"><a href="#Name_mangling_in_Objective-C"><span class="tocnumber">6</span> <span class="toctext">Name mangling in Objective-C</span></a></li>
<li class="toclevel-1"><a href="#Name_mangling_in_Fortran"><span class="tocnumber">7</span> <span class="toctext">Name mangling in Fortran</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">8</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="C_name_decoration_in_Microsoft_Windows" id="C_name_decoration_in_Microsoft_Windows"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Name_mangling&amp;action=edit&amp;section=1" title="Edit section: C name decoration in Microsoft Windows">edit</a>]</span> <span class="mw-headline">C name decoration in Microsoft Windows</span></h2>
<p>Although name mangling is not generally required or used by languages that do not support <a href="/wiki/Function_overloading" title="Function overloading" class="mw-redirect">function overloading</a> (such as C and classic Pascal), they use it in some cases to provide additional information about a function. For example, compilers targeted at Microsoft Windows platforms support a variety of <a href="/wiki/Calling_convention" title="Calling convention">calling conventions</a>, which determine the manner in which parameters are sent to subroutines and results returned. Because the different calling conventions are not compatible with one another, compilers mangle symbols with codes detailing which convention should be used.</p>
<p>The mangling scheme was established by Microsoft, and has been informally followed by other compilers including Digital Mars, Borland, and GNU gcc. The scheme even applies to other languages, such as <a href="/wiki/Pascal_programming_language" title="Pascal programming language" class="mw-redirect">Pascal</a>, <a href="/wiki/D_programming_language" title="D programming language" class="mw-redirect">D</a>, Delphi, <a href="/wiki/Fortran" title="Fortran">Fortran</a>, and <a href="/wiki/C_Sharp_(programming_language)" title="C Sharp (programming language)">C#</a>. This allows subroutines written in those languages to call, or be called by, existing Windows libraries using a calling convention different from their default.</p>
<p>When compiling the following C examples:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">int</span> _cdecl    f <span class="br0">(</span><span class="kw4">int</span> x<span class="br0">)</span> <span class="br0">{</span> <span class="kw1">return</span> <span class="nu0">0</span>; <span class="br0">}</span>
<span class="kw4">int</span> _stdcall  g <span class="br0">(</span><span class="kw4">int</span> y<span class="br0">)</span> <span class="br0">{</span> <span class="kw1">return</span> <span class="nu0">0</span>; <span class="br0">}</span>
<span class="kw4">int</span> _fastcall h <span class="br0">(</span><span class="kw4">int</span> z<span class="br0">)</span> <span class="br0">{</span> <span class="kw1">return</span> <span class="nu0">0</span>; <span class="br0">}</span>
</pre></div>
<p><code>_cdecl</code> is the default for C functions, if no calling convention is stated explicitly.</p>
<p>32 bit compilers emit, respectively:</p>
<pre>
_f
_g@4
@h@4
</pre>
<p>In the <tt>stdcall</tt> and <tt>fastcall</tt> mangling schemes, the function is encoded as <tt>_<b>name</b>@<b>X</b></tt> and <tt>@<b>name</b>@<b>X</b></tt>, for <tt>stdcall</tt> and <tt>fastcall</tt> respectively, where <b>X</b> is the number of bytes, in decimal, of the argument(s) in the parameter list (including those passed in registers, for fastcall).</p>
<p>Other common name decoration actions may involve adding prefixes, usually with an abundance of underscores (like <tt>__func__</tt>), or some standard capitalization.</p>
<p><br /></p>
<p><a name="Name_mangling_in_C.2B.2B" id="Name_mangling_in_C.2B.2B"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Name_mangling&amp;action=edit&amp;section=2" title="Edit section: Name mangling in C++">edit</a>]</span> <span class="mw-headline">Name mangling in C++</span></h2>
<p><a href="/wiki/C%2B%2B" title="C++">C++</a> compilers are the most widespread, and yet least standard, users of name mangling. The first C++ compilers were implemented as translators to <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a> source code, which would then be compiled by a C compiler to object code; because of this, symbol names had to conform to C identifier rules. Even later, with the emergence of compilers which produced machine code or assembly directly, the system's <a href="/wiki/Linker" title="Linker">linker</a> generally did not support C++ symbols, and mangling was still required.</p>
<p>The <a href="/wiki/C%2B%2B" title="C++">C++</a> language does not define a standard decoration scheme, so each compiler uses its own. Combined with the fact that C++ decoration can become fairly complex (storing information about classes, templates, namespaces, <a href="/wiki/Operator_overloading" title="Operator overloading">operator overloading</a>, etc), this means that object code produced by different compilers is not usually linkable.</p>
<p><a name="Simple_example" id="Simple_example"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Name_mangling&amp;action=edit&amp;section=3" title="Edit section: Simple example">edit</a>]</span> <span class="mw-headline">Simple example</span></h3>
<p>Consider the following two definitions of <tt>f()</tt> in a C++ program:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
<span class="kw4">int</span>  f <span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span> <span class="br0">{</span> <span class="kw1">return</span> <span class="nu0">1</span>; <span class="br0">}</span>
<span class="kw4">int</span>  f <span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span>  <span class="br0">{</span> <span class="kw1">return</span> <span class="nu0">0</span>; <span class="br0">}</span>
<span class="kw4">void</span> g <span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span> <span class="br0">{</span> <span class="kw4">int</span> i = f<span class="br0">(</span><span class="br0">)</span>, j = f<span class="br0">(</span><span class="nu0">0</span><span class="br0">)</span>; <span class="br0">}</span>
</pre></div>
<p>These are distinct functions, with no relation to each other apart from the name. If they were natively translated into C with no changes, the result would be an error — C does not permit two functions with the same name. The compiler therefore will encode the type information in the symbol name, the result being something resembling:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
<span class="kw4">int</span>  __f_v <span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span> <span class="br0">{</span> <span class="kw1">return</span> <span class="nu0">1</span>; <span class="br0">}</span>
<span class="kw4">int</span>  __f_i <span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span>  <span class="br0">{</span> <span class="kw1">return</span> <span class="nu0">0</span>; <span class="br0">}</span>
<span class="kw4">void</span> __g_v <span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span> <span class="br0">{</span> <span class="kw4">int</span> i = __f_v<span class="br0">(</span><span class="br0">)</span>, j = __f_i<span class="br0">(</span><span class="nu0">0</span><span class="br0">)</span>; <span class="br0">}</span>
</pre></div>
<p>Notice that <tt>g()</tt> is mangled even though there is no conflict; name mangling applies to <b>all</b> symbols.</p>
<p><a name="Complex_example" id="Complex_example"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Name_mangling&amp;action=edit&amp;section=4" title="Edit section: Complex example">edit</a>]</span> <span class="mw-headline">Complex example</span></h3>
<p>For a more complex example, we'll consider an example of a real-world name mangling implementation: that used by GNU GCC 3.<i>x</i>, and how it mangles the following example class. The mangled symbol is shown below the respective identifier name.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
<span class="kw2">namespace</span> wikipedia 
<span class="br0">{</span>
   <span class="kw2">class</span> article 
   <span class="br0">{</span>
   <span class="kw2">public</span>:
      std::<span class="me2">string</span> format <span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>; 
         <span class="coMULTI">/* = _ZN9wikipedia7article6formatEv */</span>
 
      <span class="kw4">bool</span> print_to <span class="br0">(</span>std::<span class="me2">ostream</span>&amp;<span class="br0">)</span>; 
         <span class="coMULTI">/* = _ZN9wikipedia7article8print_toERSo */</span>
 
      <span class="kw2">class</span> wikilink 
      <span class="br0">{</span>
      <span class="kw2">public</span>:
         wikilink <span class="br0">(</span>std::<span class="me2">string</span> const&amp; name<span class="br0">)</span>;
            <span class="coMULTI">/* = _ZN9wikipedia7article8wikilinkC1ERKSs */</span>
      <span class="br0">}</span>;
   <span class="br0">}</span>;
<span class="br0">}</span>
</pre></div>
<p>The name mangling scheme used here is relatively simple. All mangled symbols begin with <b>_Z</b> (note that an underscore followed by a capital is a <a href="/wiki/Reserved_identifier" title="Reserved identifier">reserved identifier</a> in C and C++, so conflict with user identifiers is avoided); for nested names (including both namespaces and classes), this is followed by <tt><b>N</b></tt>, then a series of &lt;length, id&gt; pairs (the length being the length of the next identifier), and finally <tt><b>E</b></tt>. For example, <tt>wikipedia::article::format</tt> becomes</p>
<pre>
_ZN·<i>9</i><b>wikipedia</b>·<i>7</i><b>article</b>·<i>6</i><b>format</b>·E  
</pre>
<p>For functions, this is then followed by the type information; as <tt>format()</tt> is a <tt>void</tt> function, this is simply <tt><b>v</b></tt>; hence:</p>
<pre>
_ZN·<i>9</i><b>wikipedia</b>·<i>7</i><b>article</b>·<i>6</i><b>format</b>·E·<b>v</b>
</pre>
<p>For <tt>print_to</tt>, a standard type <tt>std::ostream</tt> (or more properly <tt>std::basic_ostream&lt;char, char_traits&lt;char&gt; &gt;</tt>) is used, which has the special alias <tt><b>So</b></tt>; a reference to this type is therefore <tt><b>RSo</b></tt>, with the complete name for the function being:</p>
<pre>
_ZN·<i>9</i><b>wikipedia</b>·<i>7</i><b>article</b>·<i>8</i><b>print_to</b>·E·<b>RSo</b>
</pre>
<p><a name="How_different_compilers_mangle_the_same_functions" id="How_different_compilers_mangle_the_same_functions"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Name_mangling&amp;action=edit&amp;section=5" title="Edit section: How different compilers mangle the same functions">edit</a>]</span> <span class="mw-headline">How different compilers mangle the same functions</span></h3>
<p>There isn't a standard scheme by which even trivial C++ identifiers are mangled, and consequently different compiler vendors (or even different versions of the same compiler, or the same compiler on different platforms) mangle public symbols in radically different (and thus totally incompatible) ways. Consider how different C++ compilers mangle the same functions:</p>
<table class="wikitable">
<tr>
<th>Compiler</th>
<th><tt>void h(int)</tt></th>
<th><tt>void h (int, char)</tt></th>
<th><tt>void h(void)</tt></th>
</tr>
<tr>
<td>GNU GCC 3.<i>x</i> and 4.<i>x</i></td>
<td><tt>_Z1hi</tt></td>
<td><tt>_Z1hic</tt></td>
<td><tt>_Z1hv</tt></td>
</tr>
<tr>
<td>GNU GCC 2.9<i>x</i></td>
<td><tt>h__Fi</tt></td>
<td><tt>h__Fic</tt></td>
<td><tt>h__Fv</tt></td>
</tr>
<tr>
<td>Intel C++ 8.0 for Linux</td>
<td><tt>_Z1hi</tt></td>
<td><tt>_Z1hic</tt></td>
<td><tt>_Z1hv</tt></td>
</tr>
<tr>
<td><a href="/wiki/Microsoft_Visual_C%2B%2B_Name_Mangling" title="Microsoft Visual C++ Name Mangling">Microsoft VC++ v6/v7</a></td>
<td><tt>?h@@YAXH@Z</tt></td>
<td><tt>?h@@YAXHD@Z</tt></td>
<td><tt>?h@@YAXXZ</tt></td>
</tr>
<tr>
<td>Borland C++ v3.1</td>
<td><tt>@h$qi</tt></td>
<td><tt>@h$qizc</tt></td>
<td><tt>@h$qv</tt></td>
</tr>
<tr>
<td>OpenVMS C++ V6.5 (ARM mode)</td>
<td><tt>H__XI</tt></td>
<td><tt>H__XIC</tt></td>
<td><tt>H__XV</tt></td>
</tr>
<tr>
<td>OpenVMS C++ V6.5 (ANSI mode)</td>
<td><tt>CXX$__7H__FI0ARG51T</tt></td>
<td><tt>CXX$__7H__FIC26CDH77</tt></td>
<td><tt>CXX$__7H__FV2CB06E8</tt></td>
</tr>
<tr>
<td>OpenVMS C++ X7.1 IA-64</td>
<td><tt>CXX$_Z1HI2DSQ26A</tt></td>
<td><tt>CXX$_Z1HIC2NP3LI4</tt></td>
<td><tt>CXX$_Z1HV0BCA19V</tt></td>
</tr>
<tr>
<td><a href="/wiki/Digital_Mars" title="Digital Mars">Digital Mars</a> C++</td>
<td><tt>?h@@YAXH@Z</tt></td>
<td><tt>?h@@YAXHD@Z</tt></td>
<td><tt>?h@@YAXXZ</tt></td>
</tr>
<tr>
<td>SunPro CC</td>
<td><tt>__1cBh6Fi_v_</tt></td>
<td><tt>__1cBh6Fic_v_</tt></td>
<td><tt>__1cBh6F_v_</tt></td>
</tr>
<tr>
<td>HP aC++ A.05.55 IA-64</td>
<td><tt>_Z1hi</tt></td>
<td><tt>_Z1hic</tt></td>
<td><tt>_Z1hv</tt></td>
</tr>
<tr>
<td>HP aC++ A.03.45 PA-RISC</td>
<td><tt>h__Fi</tt></td>
<td><tt>h__Fic</tt></td>
<td><tt>h__Fv</tt></td>
</tr>
<tr>
<td>Tru64 C++ V6.5 (ARM mode)</td>
<td><tt>h__Xi</tt></td>
<td><tt>h__Xic</tt></td>
<td><tt>h__Xv</tt></td>
</tr>
<tr>
<td>Tru64 C++ V6.5 (ANSI mode)</td>
<td><tt>__7h__Fi</tt></td>
<td><tt>__7h__Fic</tt></td>
<td><tt>__7h__Fv</tt></td>
</tr>
</table>
<p>Notes:</p>
<ul>
<li>The Compaq C++ compiler on OpenVMS VAX and Alpha (but not IA-64) and Tru64 has two name mangling schemes. The original, pre-standard scheme is known as ARM model, and is based on the name mangling described in the C++ Annotated Reference Manual (ARM). With the advent of new features in standard C++, particularly <a href="/wiki/Template_(programming)" title="Template (programming)">templates</a>, the ARM scheme became more and more unsuitable — it could not encode certain function types, or produced identical mangled names for different functions. It was therefore replaced by the newer "ANSI" model, which supported all ANSI template features, but was not backwards compatible.</li>
<li>On IA-64, a standard <a href="/wiki/Application_binary_interface" title="Application binary interface">ABI</a> exists (see <a href="#External_links" title="">external links</a>), which defines (among other things) a standard name-mangling scheme, and which is used by all the IA-64 compilers. GNU GCC 3.<i>x</i>, in addition, has adopted the name mangling scheme defined in this standard for use on other, non-Intel platforms.</li>
</ul>
<p><a name="Handling_of_C_symbols_when_linking_from_C.2B.2B" id="Handling_of_C_symbols_when_linking_from_C.2B.2B"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Name_mangling&amp;action=edit&amp;section=6" title="Edit section: Handling of C symbols when linking from C++">edit</a>]</span> <span class="mw-headline">Handling of C symbols when linking from C++</span></h3>
<p>The job of the common C++ idiom:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
<span class="co2">#ifdef __cplusplus </span>
<span class="kw4">extern</span> <span class="st0">"C"</span> <span class="br0">{</span>
<span class="co2">#endif</span>
    <span class="coMULTI">/* ... */</span>
<span class="co2">#ifdef __cplusplus</span>
<span class="br0">}</span>
<span class="co2">#endif</span>
</pre></div>
<p>is to ensure that the symbols following are "unmangled" – that the compiler emits a binary file with their names undecorated, as a C compiler would do. As C language definitions are unmangled, the C++ compiler needs to avoid mangling references to these identifiers.</p>
<p>For example, the standard strings library, <tt>&lt;string.h&gt;</tt> usually contains something resembling:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
<span class="co2">#ifdef __cplusplus</span>
<span class="kw4">extern</span> <span class="st0">"C"</span> <span class="br0">{</span>
<span class="co2">#endif</span>
 
<span class="kw4">void</span> *<span class="kw3">memset</span> <span class="br0">(</span><span class="kw4">void</span> *, <span class="kw4">int</span>, <span class="kw4">size_t</span><span class="br0">)</span>;
<span class="kw4">char</span> *<span class="kw3">strcat</span> <span class="br0">(</span><span class="kw4">char</span> *, <span class="kw4">const</span> <span class="kw4">char</span> *<span class="br0">)</span>;
<span class="kw4">int</span>   <span class="kw3">strcmp</span> <span class="br0">(</span><span class="kw4">const</span> <span class="kw4">char</span> *, <span class="kw4">const</span> <span class="kw4">char</span> *<span class="br0">)</span>;
<span class="kw4">char</span> *<span class="kw3">strcpy</span> <span class="br0">(</span><span class="kw4">char</span> *, <span class="kw4">const</span> <span class="kw4">char</span> *<span class="br0">)</span>;
 
<span class="co2">#ifdef __cplusplus</span>
<span class="br0">}</span>
<span class="co2">#endif</span>
</pre></div>
<p>Thus, code such as:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
<span class="kw1">if</span> <span class="br0">(</span><span class="kw3">strcmp</span><span class="br0">(</span>argv<span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span>, <span class="st0">"-x"</span><span class="br0">)</span> == <span class="nu0">0</span><span class="br0">)</span> 
    <span class="kw3">strcpy</span><span class="br0">(</span>a, argv<span class="br0">[</span><span class="nu0">2</span><span class="br0">]</span><span class="br0">)</span>;
<span class="kw1">else</span> 
    <span class="kw3">memset</span> <span class="br0">(</span>a, <span class="nu0">0</span>, <span class="kw3">sizeof</span><span class="br0">(</span>a<span class="br0">)</span><span class="br0">)</span>;
</pre></div>
<p>uses the correct, unmangled <tt>strcmp</tt> and <tt>memset</tt>. If the <tt>extern</tt> had not been used, the C++ compiler would produce code equivalent to:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
<span class="kw1">if</span> <span class="br0">(</span>__1cGstrcmp6Fpkc1_i_<span class="br0">(</span>argv<span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span>, <span class="st0">"-x"</span><span class="br0">)</span> == <span class="nu0">0</span><span class="br0">)</span> 
    __1cGstrcpy6Fpcpkc_0_<span class="br0">(</span>a, argv<span class="br0">[</span><span class="nu0">2</span><span class="br0">]</span><span class="br0">)</span>;
<span class="kw1">else</span> 
    __1cGmemset6FpviI_0_ <span class="br0">(</span>a, <span class="nu0">0</span>, <span class="kw3">sizeof</span><span class="br0">(</span>a<span class="br0">)</span><span class="br0">)</span>;
</pre></div>
<p>Since those symbols do not exist in the C runtime library (<i>e.g.</i> <tt>libc</tt>), link errors would result.</p>
<p><br /></p>
<p><a name="Standardised_name_mangling_in_C.2B.2B" id="Standardised_name_mangling_in_C.2B.2B"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Name_mangling&amp;action=edit&amp;section=7" title="Edit section: Standardised name mangling in C++">edit</a>]</span> <span class="mw-headline">Standardised name mangling in C++</span></h3>
<p>While it is a relatively common belief that standardised name mangling in the C++ language would lead to greater interoperability between implementations, this is not really the case. Name mangling is only one of several <a href="/wiki/Application_binary_interface" title="Application binary interface">application binary interface</a> issues in a C++ implementation. Other ABI issues like <a href="/wiki/Exception_handling" title="Exception handling">exception handling</a>, <a href="/wiki/Virtual_table" title="Virtual table" class="mw-redirect">virtual table</a> layout, structure <a href="/wiki/Padding" title="Padding">padding</a>, <i>etc.</i> cause differing C++ implementations to be incompatible. Further, requiring a particular form of mangling would cause issues for systems where implementation limits (<i>e.g.</i> length of symbols) dictate a particular mangling scheme. A standardised <i>requirement</i> for name mangling would also prevent an implementation where mangling was not required at all — for example, a linker which understood the C++ language.</p>
<p>The <a href="/wiki/ISO/IEC_14882" title="ISO/IEC 14882" class="mw-redirect">C++ standard</a> therefore does not attempt to standardise name mangling. On the contrary, the <i>Annotated C++ Reference Manual</i> (also known as <i>ARM</i>, <a href="/wiki/Special:BookSources/0201514591" class="internal">ISBN 0-201-51459-1</a>, section 7.2.1c) actively encourages the use of different mangling schemes to prevent linking when other aspects of the ABI, such as <a href="/wiki/Exception_handling" title="Exception handling">exception handling</a> and <a href="/wiki/Virtual_table" title="Virtual table" class="mw-redirect">virtual table</a> layout, are incompatible.</p>
<p><a name="Real-world_effects_of_C.2B.2B_name_mangling" id="Real-world_effects_of_C.2B.2B_name_mangling"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Name_mangling&amp;action=edit&amp;section=8" title="Edit section: Real-world effects of C++ name mangling">edit</a>]</span> <span class="mw-headline">Real-world effects of C++ name mangling</span></h3>
<p>Because C++ symbols are routinely exported from <a href="/wiki/DLL" title="DLL">DLL</a> and <a href="/wiki/Shared_object" title="Shared object" class="mw-redirect">shared object</a> files, the name mangling scheme is not merely a compiler-internal matter. Different compilers (or different versions of the same compiler, in many cases) produce such binaries under different name decoration schemes, meaning that symbols are frequently unresolved if the compilers used to create the library and the program using it employed different schemes. For example, if a system with multiple C++ compilers installed (<i>e.g.</i> GNU GCC and the OS vendor's compiler) wished to install the <a href="/wiki/Boost_library" title="Boost library" class="mw-redirect">Boost library</a>, it would have to be compiled twice — once for the vendor compiler and once for GCC.</p>
<p>It is good for safety purposes that compilers producing incompatible object codes (codes based on different ABIs, regarding e.g. classes and exceptions) use different name mangling schemes. This guarantees that these incompatibilities are detected at the linking phase, not when executing the software.</p>
<p>For this reason name decoration is an important aspect of any C++-related <a href="/wiki/Application_binary_interface" title="Application binary interface">ABI</a>.</p>
<p><a name="Name_mangling_in_Java" id="Name_mangling_in_Java"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Name_mangling&amp;action=edit&amp;section=9" title="Edit section: Name mangling in Java">edit</a>]</span> <span class="mw-headline">Name mangling in Java</span></h2>
<p>The language, compiler, and .class file format were all designed together (and had object-orientation in mind from the start), so the primary problem solved by name mangling doesn't exist in implementations of the <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java runtime</a>. There are, however, cases where an analogous transformation and qualification of names is necessary.</p>
<p><a name="Creating_unique_names_for_inner_and_anonymous_classes" id="Creating_unique_names_for_inner_and_anonymous_classes"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Name_mangling&amp;action=edit&amp;section=10" title="Edit section: Creating unique names for inner and anonymous classes">edit</a>]</span> <span class="mw-headline">Creating unique names for inner and anonymous classes</span></h3>
<p>The scope of anonymous classes is confined to their parent class, so the compiler must produce a "qualified" public name for the inner class, to avoid conflict where other classes (inner or not) exist in the same namespace. Similarly, anonymous classes must have "fake" public names generated for them (as the concept of anonymous classes exists only in the compiler, not the runtime). So, compiling the following java program</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-java">
<span class="kw2">public</span> <span class="kw2">class</span> foo <span class="br0">{</span>
    <span class="kw2">class</span> bar <span class="br0">{</span>
        <span class="kw2">public</span> <span class="kw4">int</span> x;
    <span class="br0">}</span>
 
    <span class="kw2">public</span> <span class="kw4">void</span> zark <span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
        <span class="kw3">Object</span> f = <span class="kw2">new</span> <span class="kw3">Object</span> <span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
            <span class="kw2">public</span> <span class="kw3">String</span> toString<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
                <span class="kw2">return</span> <span class="st0">"hello"</span>;
            <span class="br0">}</span>
        <span class="br0">}</span>;
    <span class="br0">}</span>
<span class="br0">}</span>
</pre></div>
<p>will produce three <b>.class</b> files:</p>
<ul>
<li><b>foo.class</b>, containing the main (outer) class <i>foo</i></li>
<li><b>foo$bar.class</b>, containing the named inner class <i>foo.bar</i></li>
<li><b>foo$1.class</b>, containing the anonymous inner class (local to method <i>foo.zark</i>)</li>
</ul>
<p>All of these class names are valid (as $ symbols are permitted in the JVM specification) and these names are "safe" for the compiler to generate, as the Java language definition prohibits $ symbols in normal java class definitions.</p>
<p>Name resolution in Java is further complicated at runtime, as <a href="/wiki/Fully_qualified_name" title="Fully qualified name">fully qualified class names</a> are unique only inside a specific <a href="/wiki/Classloader" title="Classloader" class="mw-redirect">classloader</a> instance. Classloaders are ordered hierarchically and each Thread in the JVM has a so called context class loader, so in cases where two different classloader instances contain classes with the same name, the system first tries to load the class using the root (or system) classloader and then goes down the hierarchy to the context class loader.</p>
<p><a name="Handling_issues_with_the_java_to_native_interface" id="Handling_issues_with_the_java_to_native_interface"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Name_mangling&amp;action=edit&amp;section=11" title="Edit section: Handling issues with the java to native interface">edit</a>]</span> <span class="mw-headline">Handling issues with the java to native interface</span></h3>
<p>Java's native method support allows java language programs to call out to programs written in another language (generally either C or C++). There are two name-resolution concerns here, neither of which is implemented in a particularly standard manner.</p>
<p><a name="Name_mangling_in_Python" id="Name_mangling_in_Python"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Name_mangling&amp;action=edit&amp;section=12" title="Edit section: Name mangling in Python">edit</a>]</span> <span class="mw-headline">Name mangling in Python</span></h2>
<p>A <a href="/wiki/Python_(programming_language)" title="Python (programming language)">Python</a> programmer can explicitly designate that an identifier is a "private name" (its scope is confined to the class) by setting the first two characters of the identifier to be underscores. Mangling will not be performed if the identifier ends with more than one underscore, for example, __thing will be mangled, as will ___thing and __thing_, but __thing__ and __thing___ will not. On encountering these, the Python compiler or interpreter turns these private names into global symbols by prepending a string consisting of a single underscore and the name of the enclosing class.</p>
<p>So, for example,</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-python">
<span class="kw1">class</span> Test:
    <span class="kw1">def</span> __private_symbol<span class="br0">(</span><span class="kw2">self</span><span class="br0">)</span>:
        <span class="kw1">pass</span>
    <span class="kw1">def</span> normal_symbol<span class="br0">(</span><span class="kw2">self</span><span class="br0">)</span>:
        <span class="kw1">pass</span>
 
<span class="kw1">print</span> <span class="kw2">dir</span><span class="br0">(</span>Test<span class="br0">)</span>
</pre></div>
<p>will output:</p>
<pre>
['_Test__private_symbol', 
'__doc__', 
'__module__', 
'normal_symbol']
</pre>
<p><a name="Name_mangling_in_Borland.27s_Turbo_Pascal_.2F_Delphi_range" id="Name_mangling_in_Borland.27s_Turbo_Pascal_.2F_Delphi_range"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Name_mangling&amp;action=edit&amp;section=13" title="Edit section: Name mangling in Borland's Turbo Pascal / Delphi range">edit</a>]</span> <span class="mw-headline">Name mangling in Borland's Turbo Pascal / Delphi range</span></h2>
<p>To avoid name mangling in Pascal, use:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-pascal">
<span class="kw4">exports</span>
  myFunc <span class="kw1">name</span> <span class="st0">'myFunc'</span>, myProc <span class="kw1">name</span> <span class="st0">'myProc'</span>;
</pre></div>
<p><a name="Name_mangling_in_Objective-C" id="Name_mangling_in_Objective-C"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Name_mangling&amp;action=edit&amp;section=14" title="Edit section: Name mangling in Objective-C">edit</a>]</span> <span class="mw-headline">Name mangling in Objective-C</span></h2>
<p>Essentially two forms of method exist in Objective-C, the class ("static") method, and the instance method. A method declaration in Objective-C is of the following form</p>
<pre>
+ <i>method name</i>: <i>argument</i> <i>name</i><sub>1</sub>:<i>parameter</i><sub>1</sub> ...
- <i>method name</i>: <i>argument</i> <i>name</i><sub>1</sub>:<i>parameter</i><sub>1</sub> ...
</pre>
<p>Class methods are signified by +, instance methods use -. A typical class method declaration may then look like:</p>
<pre>
+ (id) initWithX: (int) number andY: (int) number;
+ (id) new;
</pre>
<p>with instance methods looking like</p>
<pre>
- (id) value;
- (id) setValue: (id) new_value;
</pre>
<p>Each of these method declarations have a specific internal representation. When compiled, each method is named according to the following scheme for class methods:</p>
<pre>
_c_<i>Class</i>_<i>methodname</i>_<i>name</i><sub>1</sub>_<i>name</i><sub>2</sub>_ ...
</pre>
<p>and this for instance methods:</p>
<pre>
_i_<i>Class</i>_<i>methodname</i>_<i>name</i><sub>1</sub>_<i>name</i><sub>2</sub>_ ...
</pre>
<p>The colons in the Objective-C syntax are translated to underscores. So, the Objective-C class method <tt>+ (id) initWithX: (int) number andY: (int) number;</tt>, if belonging to the <tt>Point</tt> class would translate as <tt>_c_Point_initWithX_andY_</tt>, and the instance method (belonging to the same class) <tt>- (id) value;</tt> would translate to <tt>_i_Point_value</tt>.</p>
<p>Each of the methods of a class are labeled in this way. However, in order to look up a method that a class may respond to would be tedious if all methods are represented in this fashion. Each of the methods is assigned a unique symbol (such as an integer). Such a symbol is known as a <i>selector</i>. In Objective-C, one can manage selectors directly — they have a specific type in Objective-C — <tt>SEL</tt>.</p>
<p>During compilation, a table is built that maps the textual representation (such as <tt>_i_Point_value</tt>) to selectors (which are given a type SEL). Managing selectors is more efficient than manipulating the textual representation of a method. Note that a selector only matches a method's name, not the class it belongs to — different classes can have different implementations of a method with the same name. Because of this, implementations of a method are given a specific identifier too — these are known as implementation pointers, and are given a type also, <tt>IMP</tt>.</p>
<p>Message sends are encoded by the compiler as calls to the <tt>id objc_msgSend (id receiver, SEL selector, ...)</tt> function, or one of its cousins, where <tt>receiver</tt> is the receiver of the message, and SEL determines the method to call. Each class has its own table that maps selectors to their implementations — the implementation pointer specifies where in memory the actual implementation of the method resides. There are separate tables for class and instance methods. Apart from being stored in the <tt>SEL</tt> to <tt>IMP</tt> lookup tables, the functions are essentially anonymous.</p>
<p>The <tt>SEL</tt> value for a selector does not vary between classes. This enables polymorphism.</p>
<p>The Objective-C runtime maintains information about the argument and return types of methods. However, this information is not part of the name of the method, and can vary from class to class.</p>
<p>Since Objective-C does not support <a href="/wiki/Namespace_(programming)" title="Namespace (programming)" class="mw-redirect">namespaces</a>, there is no need for mangling of class names (that do appear as symbols in generated binaries).</p>
<p><a name="Name_mangling_in_Fortran" id="Name_mangling_in_Fortran"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Name_mangling&amp;action=edit&amp;section=15" title="Edit section: Name mangling in Fortran">edit</a>]</span> <span class="mw-headline">Name mangling in Fortran</span></h2>
<p>Name mangling is also necessary in <a href="/wiki/Fortran" title="Fortran">Fortran</a> compilers, originally because the language is <a href="/wiki/Case_insensitive" title="Case insensitive" class="mw-redirect">case insensitive</a>. Further mangling requirements were imposed later in the evolution of the language because of the addition of <a href="/wiki/Module_(programming)" title="Module (programming)" class="mw-redirect">modules</a> and other features in the Fortran 90 standard. The case mangling, especially, is a common issue that must be dealt with in order to call Fortran libraries (such as <a href="/wiki/LAPACK" title="LAPACK">LAPACK</a>) from other languages (such as <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a>).</p>
<p>Because of the case insensitivity, the name of a subroutine or function "FOO" must be converted to a canonical case and format by the Fortran compiler so that it will be linked in the same way regardless of case. Different compilers have implemented this in various ways, and no standardization has occurred. The <a href="/wiki/IBM_AIX_(operating_system)" title="IBM AIX (operating system)" class="mw-redirect">AIX</a> and <a href="/wiki/HP-UX" title="HP-UX">HP-UX</a> Fortran compilers convert all identifiers to lower case ("foo"), while the <a href="/wiki/Cray" title="Cray">Cray</a> <a href="/wiki/Unicos" title="Unicos">Unicos</a> Fortran compilers converted identifiers all upper case ("FOO"). The <a href="/wiki/GNU" title="GNU">GNU</a> <a href="/wiki/GNU_Compiler_Collection" title="GNU Compiler Collection">g77</a> compiler converts identifiers to lower case plus an underscore ("foo_"), except that identifiers already containing an underscore ("FOO_BAR") has two underscores appended ("foo_bar__"), following a convention established by <a href="/wiki/F2c" title="F2c">f2c</a>. Many other compilers, including <a href="/wiki/Silicon_Graphics" title="Silicon Graphics">SGI</a>'s <a href="/wiki/IRIX" title="IRIX">IRIX</a> compilers, <a href="/wiki/Gfortran" title="Gfortran">gfortran</a>, and <a href="/wiki/Intel" title="Intel" class="mw-redirect">Intel</a>'s Fortran compiler, convert all identifiers to lower case plus an underscore ("foo_" and "foo_bar_").</p>
<p>Identifiers in Fortran 90 modules must be further mangled, because the same subroutine name may apply to different routines in different modules.</p>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Name_mangling&amp;action=edit&amp;section=16" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<ul>
<li><a href="http://www.codesourcery.com/cxx-abi/abi.html#mangling" class="external text" title="http://www.codesourcery.com/cxx-abi/abi.html#mangling" rel="nofollow">Linux Itanium ABI for C++</a>, including name mangling scheme.</li>
<li><a href="http://sources.redhat.com/binutils/docs-2.15/binutils/c--filt.html" class="external text" title="http://sources.redhat.com/binutils/docs-2.15/binutils/c--filt.html" rel="nofollow">c++filt</a> — filter to demangle encoded C++ symbols</li>
<li><a href="http://msdn2.microsoft.com/en-us/library/5x49w699.aspx" class="external text" title="http://msdn2.microsoft.com/en-us/library/5x49w699.aspx" rel="nofollow">undname</a> — msvc tool to demangle names.</li>
<li><a href="http://developer.apple.com/documentation/Cocoa/Conceptual/ObjectiveC/4objc_runtime_overview/chapter_4_section_1.html#//apple_ref/doc/uid/20001425=" class="external text" title="http://developer.apple.com/documentation/Cocoa/Conceptual/ObjectiveC/4objc_runtime_overview/chapter_4_section_1.html#//apple_ref/doc/uid/20001425=" rel="nofollow">The Objective-C Runtime System</a> — From Apple's <i><a href="http://developer.apple.com/documentation/Cocoa/Conceptual/ObjectiveC/" class="external text" title="http://developer.apple.com/documentation/Cocoa/Conceptual/ObjectiveC/" rel="nofollow">The Objective-C Programming Language</a></i></li>
<li><a href="http://www.kegel.com/mangle.html#operators" class="external text" title="http://www.kegel.com/mangle.html#operators" rel="nofollow">C++ Name Mangling/Demangling</a> Quite detailed explanation of Visual C++ compiler name mangling scheme</li>
<li><a href="http://sourceforge.net/projects/php-ms-demangle/" class="external text" title="http://sourceforge.net/projects/php-ms-demangle/" rel="nofollow">PHP UnDecorateSymbolName</a> a php script that demangles Microsoft Visual C's function names.</li>
<li><a href="http://www.agner.org/optimize/calling_conventions.pdf" class="external text" title="http://www.agner.org/optimize/calling_conventions.pdf" rel="nofollow">Calling conventions for different C++ compilers</a> contains detailed description of name mangling schemes for various x86 C++ compilers</li>
<li><a href="http://developer.apple.com/tools/mpw-tools/compilers/docs/abi_spec.pdf" class="external text" title="http://developer.apple.com/tools/mpw-tools/compilers/docs/abi_spec.pdf" rel="nofollow">Macintosh C/C++ ABI Standard Specification</a></li>
<li><a href="http://www.parashift.com/c++-faq-lite/mixing-c-and-cpp.html" class="external text" title="http://www.parashift.com/c++-faq-lite/mixing-c-and-cpp.html" rel="nofollow">Mixing C and C++ Code</a></li>
<li><a href="http://www.iecc.com/linker/linker05.html" class="external text" title="http://www.iecc.com/linker/linker05.html" rel="nofollow">Symbol management – 'Linkers and Loaders' by John R. Levine</a></li>
</ul>


<!-- 
NewPP limit report
Preprocessor node count: 205/1000000
Post-expand include size: 2632/2048000 bytes
Template argument size: 850/2048000 bytes
Expensive parser function count: 0/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:725961-0!1!0!default!!en!2 and timestamp 20090424184806 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Name_mangling">http://en.wikipedia.org/wiki/Name_mangling</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:C%2B%2B" title="Category:C++">C++</a></span> | <span dir='ltr'><a href="/wiki/Category:Computer_libraries" title="Category:Computer libraries">Computer libraries</a></span> | <span dir='ltr'><a href="/wiki/Category:Java_programming_language" title="Category:Java programming language">Java programming language</a></span> | <span dir='ltr'><a href="/wiki/Category:Compiler_theory" title="Category:Compiler theory">Compiler theory</a></span></div><div id="mw-hidden-catlinks" class="mw-hidden-cats-hidden">Hidden categories:&#32;<span dir='ltr'><a href="/wiki/Category:Wikipedia_references_cleanup" title="Category:Wikipedia references cleanup">Wikipedia references cleanup</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Name_mangling" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Name_mangling" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Name_mangling&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Name_mangling&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Name_mangling" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Name_mangling" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Name_mangling" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Name_mangling&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Name_mangling&amp;oldid=283703413" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Name_mangling&amp;id=283703413">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/%E5%90%8D%E5%89%8D%E4%BF%AE%E9%A3%BE">日本語</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 14 April 2009, at 02:30 (UTC).</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv204 in 0.051 secs. --></body></html>
