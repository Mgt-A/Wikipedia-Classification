<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Strategy pattern,Design Patterns Patterns,Abstract factory pattern,Adapter pattern,Algorithm,Bridge pattern,Builder pattern,C++ (programming language),C (programming language),C Sharp (programming language),Chain-of-responsibility pattern" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Strategy_pattern&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Strategy_pattern&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Strategy pattern - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Strategy_pattern";
		var wgTitle = "Strategy pattern";
		var wgAction = "view";
		var wgArticleId = "164865";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 283347777;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
<style type="text/css">/*<![CDATA[*/
.source-cpp {line-height: normal;}
.source-cpp li, .source-cpp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for cpp
 * CSS class: source-cpp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-cpp .de1, .source-cpp .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-cpp  {}
.source-cpp .head {}
.source-cpp .foot {}
.source-cpp .imp {font-weight: bold; color: red;}
.source-cpp .ln-xtra {color: #cc0; background-color: #ffc;}
.source-cpp li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-cpp li.li2 {font-weight: bold;}
.source-cpp .kw1 {color: #0000ff;}
.source-cpp .kw2 {color: #0000ff;}
.source-cpp .kw3 {color: #0000dd;}
.source-cpp .kw4 {color: #0000ff;}
.source-cpp .co1 {color: #ff0000;}
.source-cpp .co2 {color: #339900;}
.source-cpp .coMULTI {color: #ff0000; font-style: italic;}
.source-cpp .es0 {color: #666666; font-weight: bold;}
.source-cpp .br0 {color: #000000;}
.source-cpp .st0 {color: #666666;}
.source-cpp .nu0 {color: #0000dd;}
.source-cpp .me1 {color: #00eeff;}
.source-cpp .me2 {color: #00eeff;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-java {line-height: normal;}
.source-java li, .source-java pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for java
 * CSS class: source-java, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-java .de1, .source-java .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-java  {}
.source-java .head {}
.source-java .foot {}
.source-java .imp {font-weight: bold; color: red;}
.source-java .ln-xtra {color: #cc0; background-color: #ffc;}
.source-java li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-java li.li2 {font-weight: bold;}
.source-java .kw1 {color: #b1b100;}
.source-java .kw2 {color: #000000; font-weight: bold;}
.source-java .kw3 {color: #aaaadd; font-weight: bold;}
.source-java .kw4 {color: #993333;}
.source-java .co1 {color: #808080; font-style: italic;}
.source-java .co2 {color: #a1a100;}
.source-java .coMULTI {color: #808080; font-style: italic;}
.source-java .es0 {color: #000099; font-weight: bold;}
.source-java .br0 {color: #66cc66;}
.source-java .st0 {color: #ff0000;}
.source-java .nu0 {color: #cc66cc;}
.source-java .me1 {color: #006600;}
.source-java .me2 {color: #006600;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-python {line-height: normal;}
.source-python li, .source-python pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for python
 * CSS class: source-python, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-python .de1, .source-python .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-python  {}
.source-python .head {}
.source-python .foot {}
.source-python .imp {font-weight: bold; color: red;}
.source-python .ln-xtra {color: #cc0; background-color: #ffc;}
.source-python li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-python li.li2 {font-weight: bold;}
.source-python .kw1 {color: #ff7700;font-weight:bold;}
.source-python .kw2 {color: #008000;}
.source-python .kw3 {color: #dc143c;}
.source-python .kw4 {color: #0000cd;}
.source-python .co1 {color: #808080; font-style: italic;}
.source-python .coMULTI {color: #808080; font-style: italic;}
.source-python .es0 {color: #000099; font-weight: bold;}
.source-python .br0 {color: #66cc66;}
.source-python .st0 {color: #483d8b;}
.source-python .nu0 {color: #ff4500;}
.source-python .me1 {color: black;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-c .de1, .source-c .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-c  {}
.source-c .head {}
.source-c .foot {}
.source-c .imp {font-weight: bold; color: red;}
.source-c .ln-xtra {color: #cc0; background-color: #ffc;}
.source-c li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-c li.li2 {font-weight: bold;}
.source-c .kw1 {color: #b1b100;}
.source-c .kw2 {color: #000000; font-weight: bold;}
.source-c .kw3 {color: #000066;}
.source-c .kw4 {color: #993333;}
.source-c .co1 {color: #808080; font-style: italic;}
.source-c .co2 {color: #339933;}
.source-c .coMULTI {color: #808080; font-style: italic;}
.source-c .es0 {color: #000099; font-weight: bold;}
.source-c .br0 {color: #66cc66;}
.source-c .st0 {color: #ff0000;}
.source-c .nu0 {color: #cc66cc;}
.source-c .me1 {color: #202020;}
.source-c .me2 {color: #202020;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-csharp {line-height: normal;}
.source-csharp li, .source-csharp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for csharp
 * CSS class: source-csharp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-csharp .de1, .source-csharp .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-csharp  {}
.source-csharp .head {}
.source-csharp .foot {}
.source-csharp .imp {font-weight: bold; color: red;}
.source-csharp .ln-xtra {color: #cc0; background-color: #ffc;}
.source-csharp li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-csharp li.li2 {font-weight: bold;}
.source-csharp .kw1 {color: #0600FF;}
.source-csharp .kw2 {color: #FF8000; font-weight: bold;}
.source-csharp .kw3 {color: #008000;}
.source-csharp .kw4 {color: #FF0000;}
.source-csharp .kw5 {color: #000000;}
.source-csharp .co1 {color: #008080; font-style: italic;}
.source-csharp .co2 {color: #008080;}
.source-csharp .coMULTI {color: #008080; font-style: italic;}
.source-csharp .es0 {color: #008080; font-weight: bold;}
.source-csharp .br0 {color: #008000;}
.source-csharp .st0 {color: #808080;}
.source-csharp .nu0 {color: #FF0000;}
.source-csharp .me1 {color: #0000FF;}
.source-csharp .me2 {color: #0000FF;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-actionscript {line-height: normal;}
.source-actionscript li, .source-actionscript pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for actionscript
 * CSS class: source-actionscript, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-actionscript .de1, .source-actionscript .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-actionscript  {}
.source-actionscript .head {}
.source-actionscript .foot {}
.source-actionscript .imp {font-weight: bold; color: red;}
.source-actionscript .ln-xtra {color: #cc0; background-color: #ffc;}
.source-actionscript li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-actionscript li.li2 {font-weight: bold;}
.source-actionscript .kw1 {color: #b1b100;}
.source-actionscript .kw2 {color: #000000; font-weight: bold;}
.source-actionscript .kw3 {color: #0066CC;}
.source-actionscript .co1 {color: #808080; font-style: italic;}
.source-actionscript .co2 {color: #808080; font-style: italic;}
.source-actionscript .coMULTI {color: #808080; font-style: italic;}
.source-actionscript .es0 {color: #000099; font-weight: bold;}
.source-actionscript .br0 {color: #66cc66;}
.source-actionscript .st0 {color: #ff0000;}
.source-actionscript .nu0 {color: #cc66cc;}
.source-actionscript .me1 {color: #006600;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-php {line-height: normal;}
.source-php li, .source-php pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for php
 * CSS class: source-php, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-php .de1, .source-php .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-php  {}
.source-php .head {}
.source-php .foot {}
.source-php .imp {font-weight: bold; color: red;}
.source-php .ln-xtra {color: #cc0; background-color: #ffc;}
.source-php li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-php li.li2 {font-weight: bold;}
.source-php .kw1 {color: #b1b100;}
.source-php .kw2 {color: #000000; font-weight: bold;}
.source-php .kw3 {color: #000066;}
.source-php .co1 {color: #808080; font-style: italic;}
.source-php .co2 {color: #808080; font-style: italic;}
.source-php .coMULTI {color: #808080; font-style: italic;}
.source-php .es0 {color: #000099; font-weight: bold;}
.source-php .br0 {color: #66cc66;}
.source-php .st0 {color: #ff0000;}
.source-php .nu0 {color: #cc66cc;}
.source-php .me1 {color: #006600;}
.source-php .me2 {color: #006600;}
.source-php .sc0 {}
.source-php .sc1 {}
.source-php .sc2 {}
.source-php .sc3 {}
.source-php .re0 {color: #0000ff;}
.source-php .re1 {color: #ff0000}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-perl {line-height: normal;}
.source-perl li, .source-perl pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for perl
 * CSS class: source-perl, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-perl .de1, .source-perl .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-perl  {}
.source-perl .head {}
.source-perl .foot {}
.source-perl .imp {font-weight: bold; color: red;}
.source-perl .ln-xtra {color: #cc0; background-color: #ffc;}
.source-perl li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-perl li.li2 {font-weight: bold;}
.source-perl .kw1 {color: #b1b100;}
.source-perl .kw2 {color: #000000; font-weight: bold;}
.source-perl .kw3 {color: #000066;}
.source-perl .co1 {color: #808080; font-style: italic;}
.source-perl .coMULTI {color: #808080; font-style: italic;}
.source-perl .es0 {color: #000099; font-weight: bold;}
.source-perl .br0 {color: #66cc66;}
.source-perl .st0 {color: #ff0000;}
.source-perl .nu0 {color: #cc66cc;}
.source-perl .me1 {color: #006600;}
.source-perl .me2 {color: #006600;}
.source-perl .re0 {color: #0000ff;}
.source-perl .re4 {color: #009999;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style>		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Strategy_pattern skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Strategy pattern</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<div class="thumb tright">
<div class="thumbinner" style="width:302px;"><a href="/wiki/File:Strategy_Pattern_Diagram_ZP.svg" class="image" title="Strategy Pattern in UML"><img alt="" src="http://upload.wikimedia.org/wikipedia/en/thumb/4/4c/Strategy_Pattern_Diagram_ZP.svg/300px-Strategy_Pattern_Diagram_ZP.svg.png" width="300" height="172" border="0" class="thumbimage" /></a>
<div class="thumbcaption">
<div class="magnify"><a href="/wiki/File:Strategy_Pattern_Diagram_ZP.svg" class="internal" title="Enlarge"><img src="/skins-1.5/common/images/magnify-clip.png" width="15" height="11" alt="" /></a></div>
Strategy Pattern in <a href="/wiki/UML" title="UML">UML</a></div>
</div>
</div>
<div class="thumb tright">
<div class="thumbinner" style="width:302px;"><a href="/wiki/File:Strategy_pattern_in_LePUS3.gif" class="image" title="Strategy pattern in LePUS3 (legend)"><img alt="" src="http://upload.wikimedia.org/wikipedia/en/d/d9/Strategy_pattern_in_LePUS3.gif" width="300" height="82" border="0" class="thumbimage" /></a>
<div class="thumbcaption">
<div class="magnify"><a href="/wiki/File:Strategy_pattern_in_LePUS3.gif" class="internal" title="Enlarge"><img src="/skins-1.5/common/images/magnify-clip.png" width="15" height="11" alt="" /></a></div>
Strategy pattern in <a href="/wiki/Lepus3" title="Lepus3">LePUS3</a> (<a href="http://lepus.org.uk/ref/legend/legend.xml" class="external text" title="http://lepus.org.uk/ref/legend/legend.xml" rel="nofollow">legend</a>)</div>
</div>
</div>
<p>In <a href="/wiki/Computer_programming" title="Computer programming">computer programming</a>, the <b>strategy pattern</b> (also known as the <b>policy pattern</b>) is a particular <a href="/wiki/Design_pattern_(computer_science)" title="Design pattern (computer science)">software design pattern</a>, whereby <a href="/wiki/Algorithm" title="Algorithm">algorithms</a> can be selected at runtime.</p>
<p>In some programming languages, such as those without <a href="/wiki/Polymorphism_(computer_science)" title="Polymorphism (computer science)" class="mw-redirect">polymorphism</a>, the issues addressed by this pattern are handled through forms of <a href="/wiki/Reflection_(computer_science)" title="Reflection (computer science)">reflection</a>, such as the native function <a href="/wiki/Pointer" title="Pointer" class="mw-redirect">pointer</a> or function <a href="/wiki/Delegation_(programming)" title="Delegation (programming)">delegate</a> syntax.</p>
<p>This pattern is invisible in languages with <a href="/wiki/First-class_function" title="First-class function">first-class functions</a>. See <a href="#Python" title="">the Python code</a> for an example.</p>
<p>The strategy pattern is useful for situations where it is necessary to dynamically swap the algorithms used in an application. The strategy pattern is intended to provide a means to define a family of algorithms, encapsulate each one as an object, and make them interchangeable. The strategy pattern lets the algorithms vary independently from clients that use them.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Code_Examples"><span class="tocnumber">1</span> <span class="toctext">Code Examples</span></a>
<ul>
<li class="toclevel-2"><a href="#C.2B.2B"><span class="tocnumber">1.1</span> <span class="toctext">C++</span></a></li>
<li class="toclevel-2"><a href="#Java"><span class="tocnumber">1.2</span> <span class="toctext">Java</span></a></li>
<li class="toclevel-2"><a href="#Python"><span class="tocnumber">1.3</span> <span class="toctext">Python</span></a></li>
<li class="toclevel-2"><a href="#C"><span class="tocnumber">1.4</span> <span class="toctext">C</span></a></li>
<li class="toclevel-2"><a href="#C.23_3.0"><span class="tocnumber">1.5</span> <span class="toctext">C# 3.0</span></a></li>
<li class="toclevel-2"><a href="#C.23"><span class="tocnumber">1.6</span> <span class="toctext">C#</span></a></li>
<li class="toclevel-2"><a href="#ActionScript_3"><span class="tocnumber">1.7</span> <span class="toctext">ActionScript 3</span></a></li>
<li class="toclevel-2"><a href="#PHP"><span class="tocnumber">1.8</span> <span class="toctext">PHP</span></a></li>
<li class="toclevel-2"><a href="#Perl"><span class="tocnumber">1.9</span> <span class="toctext">Perl</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Strategy_versus_Bridge"><span class="tocnumber">2</span> <span class="toctext">Strategy versus Bridge</span></a></li>
<li class="toclevel-1"><a href="#Strategy_Pattern_and_Open_Closed_Principle"><span class="tocnumber">3</span> <span class="toctext">Strategy Pattern and Open Closed Principle</span></a></li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">4</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">5</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Code_Examples" id="Code_Examples"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Strategy_pattern&amp;action=edit&amp;section=1" title="Edit section: Code Examples">edit</a>]</span> <span class="mw-headline">Code Examples</span></h2>
<p><a name="C.2B.2B" id="C.2B.2B"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Strategy_pattern&amp;action=edit&amp;section=2" title="Edit section: C++">edit</a>]</span> <span class="mw-headline"><a href="/wiki/C%2B%2B_(programming_language)" title="C++ (programming language)" class="mw-redirect">C++</a></span></h3>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
<span class="co2">#include &lt;iostream&gt;</span>
 
<span class="kw2">using</span> <span class="kw2">namespace</span> std;
 
<span class="kw2">class</span> StrategyInterface
<span class="br0">{</span>
    <span class="kw2">public</span>:
        <span class="kw2">virtual</span> <span class="kw4">void</span> execute<span class="br0">(</span><span class="br0">)</span> = <span class="nu0">0</span>;
<span class="br0">}</span>;
 
<span class="kw2">class</span> ConcreteStrategyA: <span class="kw2">public</span> StrategyInterface
<span class="br0">{</span>
    <span class="kw2">public</span>:
        <span class="kw2">virtual</span> <span class="kw4">void</span> execute<span class="br0">(</span><span class="br0">)</span>
        <span class="br0">{</span>
            <span class="kw3">cout</span> &lt;&lt; <span class="st0">"Called ConcreteStrategyA execute method"</span> &lt;&lt; endl;
        <span class="br0">}</span>
<span class="br0">}</span>;
 
<span class="kw2">class</span> ConcreteStrategyB: <span class="kw2">public</span> StrategyInterface
<span class="br0">{</span>
    <span class="kw2">public</span>:
        <span class="kw2">virtual</span> <span class="kw4">void</span> execute<span class="br0">(</span><span class="br0">)</span>
        <span class="br0">{</span>
            <span class="kw3">cout</span> &lt;&lt; <span class="st0">"Called ConcreteStrategyB execute method"</span> &lt;&lt; endl;
        <span class="br0">}</span>
<span class="br0">}</span>;
 
<span class="kw2">class</span> ConcreteStrategyC: <span class="kw2">public</span> StrategyInterface
<span class="br0">{</span>
    <span class="kw2">public</span>:
        <span class="kw2">virtual</span> <span class="kw4">void</span> execute<span class="br0">(</span><span class="br0">)</span>
        <span class="br0">{</span>
            <span class="kw3">cout</span> &lt;&lt; <span class="st0">"Called ConcreteStrategyC execute method"</span> &lt;&lt; endl;
        <span class="br0">}</span>
<span class="br0">}</span>;
 
<span class="kw2">class</span> Context
<span class="br0">{</span>
    <span class="kw2">private</span>:
        StrategyInterface *_strategy;
 
    <span class="kw2">public</span>:
        Context<span class="br0">(</span>StrategyInterface *strategy<span class="br0">)</span>:_strategy<span class="br0">(</span>strategy<span class="br0">)</span>
        <span class="br0">{</span>
        <span class="br0">}</span>
 
        <span class="kw4">void</span> set_strategy<span class="br0">(</span>StrategyInterface *strategy<span class="br0">)</span>
        <span class="br0">{</span>
            _strategy = strategy;
        <span class="br0">}</span>
 
        <span class="kw4">void</span> execute<span class="br0">(</span><span class="br0">)</span>
        <span class="br0">{</span>
            _strategy-&gt;execute<span class="br0">(</span><span class="br0">)</span>;
        <span class="br0">}</span>
<span class="br0">}</span>;
 
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">int</span> argc, <span class="kw4">char</span> *argv<span class="br0">[</span><span class="br0">]</span><span class="br0">)</span>
<span class="br0">{</span>
    ConcreteStrategyA concreteStrategyA;
    ConcreteStrategyB concreteStrategyB;
    ConcreteStrategyC concreteStrategyC;
 
    Context contextA<span class="br0">(</span>&amp;concreteStrategyA<span class="br0">)</span>;
    Context contextB<span class="br0">(</span>&amp;concreteStrategyB<span class="br0">)</span>;
    Context contextC<span class="br0">(</span>&amp;concreteStrategyC<span class="br0">)</span>;
 
    contextA.<span class="me1">execute</span><span class="br0">(</span><span class="br0">)</span>;
    contextB.<span class="me1">execute</span><span class="br0">(</span><span class="br0">)</span>;
    contextC.<span class="me1">execute</span><span class="br0">(</span><span class="br0">)</span>;
 
    contextA.<span class="me1">set_strategy</span><span class="br0">(</span>&amp;concreteStrategyB<span class="br0">)</span>;
    contextA.<span class="me1">execute</span><span class="br0">(</span><span class="br0">)</span>;
    contextA.<span class="me1">set_strategy</span><span class="br0">(</span>&amp;concreteStrategyC<span class="br0">)</span>;
    contextA.<span class="me1">execute</span><span class="br0">(</span><span class="br0">)</span>;
 
    <span class="kw1">return</span> <span class="nu0">0</span>;
<span class="br0">}</span>
</pre></div>
<p><a name="Java" id="Java"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Strategy_pattern&amp;action=edit&amp;section=3" title="Edit section: Java">edit</a>]</span> <span class="mw-headline"><a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a></span></h3>
<div dir="ltr" style="text-align: left;">
<pre class="source-java">
<span class="co1">//StrategyExample test application</span>
 
<span class="kw2">class</span> StrategyExample <span class="br0">{</span>
 
    <span class="kw2">public</span> <span class="kw2">static</span> <span class="kw4">void</span> main<span class="br0">(</span><span class="kw3">String</span><span class="br0">[</span><span class="br0">]</span> args<span class="br0">)</span> <span class="br0">{</span>
 
        <span class="kw3">Context</span> context;
 
        <span class="co1">// Three contexts following different strategies</span>
        context = <span class="kw2">new</span> <span class="kw3">Context</span><span class="br0">(</span><span class="kw2">new</span> ConcreteStrategyAdd<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>;
        <span class="kw4">int</span> resultA = context.<span class="me1">execute</span><span class="br0">(</span><span class="nu0">3</span>,<span class="nu0">4</span><span class="br0">)</span>;
 
        context = <span class="kw2">new</span> <span class="kw3">Context</span><span class="br0">(</span><span class="kw2">new</span> ConcreteStrategySubtract<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>;
        <span class="kw4">int</span> resultB = context.<span class="me1">execute</span><span class="br0">(</span><span class="nu0">3</span>,<span class="nu0">4</span><span class="br0">)</span>;
 
        context = <span class="kw2">new</span> <span class="kw3">Context</span><span class="br0">(</span><span class="kw2">new</span> ConcreteStrategyMultiply<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>;
        <span class="kw4">int</span> resultC = context.<span class="me1">execute</span><span class="br0">(</span><span class="nu0">3</span>,<span class="nu0">4</span><span class="br0">)</span>;
 
    <span class="br0">}</span>
 
<span class="br0">}</span>
 
<span class="co1">// The classes that implement a concrete strategy should implement this</span>
 
<span class="co1">// The context class uses this to call the concrete strategy</span>
<span class="kw2">interface</span> Strategy <span class="br0">{</span>
 
    <span class="kw4">int</span> execute<span class="br0">(</span><span class="kw4">int</span> a, <span class="kw4">int</span> b<span class="br0">)</span>;
 
<span class="br0">}</span>
 
<span class="co1">// Implements the algorithm using the strategy interface</span>
<span class="kw2">class</span> ConcreteStrategyAdd <span class="kw2">implements</span> Strategy <span class="br0">{</span>
 
    <span class="kw2">public</span> <span class="kw4">int</span> execute<span class="br0">(</span><span class="kw4">int</span> a, <span class="kw4">int</span> b<span class="br0">)</span> <span class="br0">{</span>
        <span class="kw3">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span><span class="st0">"Called ConcreteStrategyA's execute()"</span><span class="br0">)</span>;
        <span class="kw2">return</span> <span class="br0">(</span>a + b<span class="br0">)</span>;  <span class="co1">// Do an addition with a and b</span>
    <span class="br0">}</span>
 
<span class="br0">}</span>
 
<span class="kw2">class</span> ConcreteStrategySubtract <span class="kw2">implements</span> Strategy <span class="br0">{</span>
 
    <span class="kw2">public</span> <span class="kw4">int</span> execute<span class="br0">(</span><span class="kw4">int</span> a, <span class="kw4">int</span> b<span class="br0">)</span> <span class="br0">{</span>
        <span class="kw3">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span><span class="st0">"Called ConcreteStrategyB's execute()"</span><span class="br0">)</span>;
        <span class="kw2">return</span> <span class="br0">(</span>a - b<span class="br0">)</span>;  <span class="co1">// Do a subtraction with a and b</span>
    <span class="br0">}</span>
 
<span class="br0">}</span>
 
<span class="kw2">class</span> ConcreteStrategyMultiply <span class="kw2">implements</span> Strategy <span class="br0">{</span>
 
    <span class="kw2">public</span> <span class="kw4">int</span> execute<span class="br0">(</span><span class="kw4">int</span> a, <span class="kw4">int</span> b<span class="br0">)</span> <span class="br0">{</span>
        <span class="kw3">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span><span class="st0">"Called ConcreteStrategyC's execute()"</span><span class="br0">)</span>;
        <span class="kw2">return</span> a  * b;   <span class="co1">// Do a multiply with a and b</span>
    <span class="br0">}</span>
 
<span class="br0">}</span>
 
<span class="co1">// Configured with a ConcreteStrategy object and maintains a reference to a Strategy object</span>
<span class="kw2">class</span> <span class="kw3">Context</span> <span class="br0">{</span>
 
    Strategy strategy;
 
    <span class="co1">// Constructor</span>
    <span class="kw2">public</span> <span class="kw3">Context</span><span class="br0">(</span>Strategy strategy<span class="br0">)</span> <span class="br0">{</span>
        <span class="kw2">this</span>.<span class="me1">strategy</span> = strategy;
    <span class="br0">}</span>
 
    <span class="kw2">public</span> <span class="kw4">int</span> execute<span class="br0">(</span><span class="kw4">int</span> a, <span class="kw4">int</span> b<span class="br0">)</span> <span class="br0">{</span>
        <span class="kw2">return</span> <span class="kw2">this</span>.<span class="me1">strategy</span>.<span class="me1">execute</span><span class="br0">(</span>a, b<span class="br0">)</span>;
    <span class="br0">}</span>
 
<span class="br0">}</span>
</pre></div>
<p><a name="Python" id="Python"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Strategy_pattern&amp;action=edit&amp;section=4" title="Edit section: Python">edit</a>]</span> <span class="mw-headline"><a href="/wiki/Python_(programming_language)" title="Python (programming language)">Python</a></span></h3>
<p>Python has <a href="/wiki/First-class_function" title="First-class function">first-class functions</a>, so there's no need to implement this pattern explicitly. However one loses information because the interface of the strategy is not made explicit. Here's an example you might encounter in GUI programming, using a callback function:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-python">
<span class="kw1">class</span> Button:
    <span class="st0">""</span><span class="st0">"A very basic button widget."</span><span class="st0">""</span>
    <span class="kw1">def</span> <span class="kw4">__init__</span><span class="br0">(</span><span class="kw2">self</span>, submit_func, label<span class="br0">)</span>:
        <span class="kw2">self</span>.<span class="me1">on_submit</span> = submit_func   <span class="co1"># Set the strategy function directly</span>
        <span class="kw2">self</span>.<span class="me1">label</span> = label
 
<span class="co1"># Create two instances with different strategies</span>
button1 = Button<span class="br0">(</span><span class="kw2">sum</span>, <span class="st0">"Add 'em"</span><span class="br0">)</span>
button2 = Button<span class="br0">(</span><span class="kw1">lambda</span> nums: <span class="st0">" "</span>.<span class="me1">join</span><span class="br0">(</span><span class="kw2">map</span><span class="br0">(</span><span class="kw2">str</span>, nums<span class="br0">)</span><span class="br0">)</span>, <span class="st0">"Join 'em"</span><span class="br0">)</span>
 
<span class="co1"># Test each button</span>
numbers = <span class="kw2">range</span><span class="br0">(</span><span class="nu0">1</span>, <span class="nu0">10</span><span class="br0">)</span>   <span class="co1"># A list of numbers 1 through 9</span>
<span class="kw1">print</span> button1.<span class="me1">on_submit</span><span class="br0">(</span>numbers<span class="br0">)</span>   <span class="co1"># displays "45"</span>
<span class="kw1">print</span> button2.<span class="me1">on_submit</span><span class="br0">(</span>numbers<span class="br0">)</span>   <span class="co1"># displays "1 2 3 4 5 6 7 8 9"</span>
</pre></div>
<p><a name="C" id="C"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Strategy_pattern&amp;action=edit&amp;section=5" title="Edit section: C">edit</a>]</span> <span class="mw-headline"><a href="/wiki/C_(programming_language)" title="C (programming language)">C</a></span></h3>
<p>A struct in C can be used to define a class, and the strategy can be set using a function pointer. The following mirrors the Python example, and uses C99 features:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="co2">#include &lt;stdio.h&gt;</span>
 
<span class="kw4">void</span> print_sum<span class="br0">(</span><span class="kw4">int</span> n, <span class="kw4">int</span> *array<span class="br0">)</span> <span class="br0">{</span>
  <span class="kw4">int</span> total = <span class="nu0">0</span>;
  <span class="kw1">for</span> <span class="br0">(</span><span class="kw4">int</span> i=<span class="nu0">0</span>; i&lt;n; i++<span class="br0">)</span> total += array<span class="br0">[</span>i<span class="br0">]</span>;
  <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"%d"</span>, total<span class="br0">)</span>;
<span class="br0">}</span>
 
<span class="kw4">void</span> print_array<span class="br0">(</span><span class="kw4">int</span> n, <span class="kw4">int</span> *array<span class="br0">)</span> <span class="br0">{</span>
  <span class="kw1">for</span> <span class="br0">(</span><span class="kw4">int</span> i=<span class="nu0">0</span>; i&lt;n; i++<span class="br0">)</span> <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"%d "</span>, array<span class="br0">[</span>i<span class="br0">]</span><span class="br0">)</span>;
<span class="br0">}</span>
 
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span> <span class="br0">{</span>
  <span class="kw4">typedef</span> <span class="kw4">struct</span> <span class="br0">{</span>
    <span class="kw4">void</span> <span class="br0">(</span>*submit_func<span class="br0">)</span><span class="br0">(</span><span class="kw4">int</span> n, <span class="kw4">int</span> *array<span class="br0">)</span>;
    <span class="kw4">char</span> *label;
  <span class="br0">}</span> Button;
 
  <span class="co1">// Create two instances with different strategies</span>
  Button button1 = <span class="br0">{</span>print_sum, <span class="st0">"Add 'em"</span><span class="br0">}</span>;
  Button button2 = <span class="br0">{</span>print_array, <span class="st0">"List 'em"</span><span class="br0">}</span>;
 
  <span class="kw4">int</span> n = <span class="nu0">10</span>, numbers<span class="br0">[</span>n<span class="br0">]</span>;
  <span class="kw1">for</span> <span class="br0">(</span><span class="kw4">int</span> i=<span class="nu0">0</span>; i&lt;n; i++<span class="br0">)</span> numbers<span class="br0">[</span>i<span class="br0">]</span> = i;
 
  button1.<span class="me1">submit_func</span><span class="br0">(</span>n, numbers<span class="br0">)</span>;
  button2.<span class="me1">submit_func</span><span class="br0">(</span>n, numbers<span class="br0">)</span>;
 
  <span class="kw1">return</span> <span class="nu0">0</span>;
<span class="br0">}</span>
</pre></div>
<p><a name="C.23_3.0" id="C.23_3.0"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Strategy_pattern&amp;action=edit&amp;section=6" title="Edit section: C# 3.0">edit</a>]</span> <span class="mw-headline"><a href="/wiki/C_Sharp_(programming_language)" title="C Sharp (programming language)">C# 3.0</a></span></h3>
<p>In C# 3.0, with lambda expressions we can do something similar to the Python example above.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-csharp">
<span class="kw1">using</span> <span class="kw5">System</span>;
<span class="kw1">using</span> <span class="kw5">System</span>.<span class="me1">Collections</span>.<span class="me1">Generic</span>;
<span class="kw1">using</span> <span class="kw5">System</span>.<span class="me1">Linq</span>;
 
<span class="kw4">class</span> Program
<span class="br0">{</span>
  <span class="kw1">static</span> <span class="kw1">void</span> Main<span class="br0">(</span><span class="kw4">string</span><span class="br0">[</span><span class="br0">]</span> args<span class="br0">)</span>
  <span class="br0">{</span>
    var button1 = <span class="kw3">new</span> MyButton<span class="br0">(</span><span class="br0">(</span>x<span class="br0">)</span> =&gt; x.<span class="me1">Sum</span><span class="br0">(</span><span class="br0">)</span>.<span class="me1">ToString</span><span class="br0">(</span><span class="br0">)</span>, <span class="st0">"Add them"</span><span class="br0">)</span>;
    var button2 = <span class="kw3">new</span> MyButton<span class="br0">(</span><span class="br0">(</span>x<span class="br0">)</span> =&gt; <span class="kw4">string</span>.<span class="me1">Join</span><span class="br0">(</span><span class="st0">" "</span>, x.<span class="me1">Select</span><span class="br0">(</span>y =&gt; y.<span class="me1">ToString</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>.<span class="me1">ToArray</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>, <span class="st0">"Join them"</span><span class="br0">)</span>;
 
    var numbers = Enumerable.<span class="me1">Range</span><span class="br0">(</span><span class="nu0">1</span>, <span class="nu0">10</span><span class="br0">)</span>;
    Console.<span class="me1">WriteLine</span><span class="br0">(</span>button1.<span class="me1">Submit</span><span class="br0">(</span>numbers<span class="br0">)</span><span class="br0">)</span>;
    Console.<span class="me1">WriteLine</span><span class="br0">(</span>button2.<span class="me1">Submit</span><span class="br0">(</span>numbers<span class="br0">)</span><span class="br0">)</span>;
 
    Console.<span class="me1">ReadLine</span><span class="br0">(</span><span class="br0">)</span>;
  <span class="br0">}</span>
 
  <span class="kw1">public</span> <span class="kw4">class</span> MyButton
  <span class="br0">{</span>
    <span class="kw1">private</span> <span class="kw1">readonly</span> Func&lt;IEnumerable&lt;int&gt;, string&gt; submitFunction;
    <span class="kw1">public</span> <span class="kw4">string</span> Label <span class="br0">{</span> get; <span class="kw1">private</span> set; <span class="br0">}</span>
 
    <span class="kw1">public</span> MyButton<span class="br0">(</span>Func&lt;IEnumerable&lt;int&gt;, string&gt; submitFunction, <span class="kw4">string</span> label<span class="br0">)</span>
    <span class="br0">{</span>
        <span class="kw1">this</span>.<span class="me1">submitFunction</span> = submitFunction;
        Label = label;
    <span class="br0">}</span>
 
    <span class="kw1">public</span> <span class="kw4">string</span> Submit<span class="br0">(</span>IEnumerable&lt;int&gt; data<span class="br0">)</span>
    <span class="br0">{</span>
        <span class="kw1">return</span> submitFunction<span class="br0">(</span>data<span class="br0">)</span>;
    <span class="br0">}</span>
  <span class="br0">}</span>
<span class="br0">}</span>
</pre></div>
<p><a name="C.23" id="C.23"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Strategy_pattern&amp;action=edit&amp;section=7" title="Edit section: C#">edit</a>]</span> <span class="mw-headline"><a href="/wiki/C_Sharp_(programming_language)" title="C Sharp (programming language)">C#</a></span></h3>
<div dir="ltr" style="text-align: left;">
<pre class="source-csharp">
<span class="kw1">using</span> <span class="kw5">System</span>;
 
<span class="kw1">namespace</span> Wikipedia.<span class="me1">Patterns</span>.<span class="me1">Strategy</span>
<span class="br0">{</span>
  <span class="co1">// MainApp test application</span>
  <span class="kw4">class</span> MainApp
  <span class="br0">{</span>
    <span class="kw1">static</span> <span class="kw1">void</span> Main<span class="br0">(</span><span class="br0">)</span>
    <span class="br0">{</span>
      Context anObject;
 
      <span class="co1">// Three contexts following different strategies</span>
      anObject= <span class="kw3">new</span> Context<span class="br0">(</span><span class="kw3">new</span> ConcreteStrategyA<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>;
      anObject.<span class="me1">Execute</span><span class="br0">(</span><span class="br0">)</span>;
 
      anObject.<span class="me1">UpdateContext</span><span class="br0">(</span><span class="kw3">new</span> ConcreteStrategyB<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>;
      anObject.<span class="me1">Execute</span><span class="br0">(</span><span class="br0">)</span>;
 
      anObject.<span class="me1">UpdateContext</span><span class="br0">(</span><span class="kw3">new</span> ConcreteStrategyC<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>;
      anObject.<span class="me1">Execute</span><span class="br0">(</span><span class="br0">)</span>;
 
    <span class="br0">}</span>
  <span class="br0">}</span>
 
  <span class="co1">// The classes that implement a concrete strategy must implement this Execute function.</span>
  <span class="co1">// The context class uses this to call the concrete strategy</span>
  <span class="kw4">interface</span> IStrategy
  <span class="br0">{</span>
    <span class="kw1">void</span> Execute<span class="br0">(</span><span class="br0">)</span>;
  <span class="br0">}</span>
 
  <span class="co1">// Implements the algorithm using the strategy interface</span>
  <span class="kw4">class</span> ConcreteStrategyA : IStrategy
  <span class="br0">{</span>
    <span class="kw1">public</span> <span class="kw1">void</span> Execute<span class="br0">(</span><span class="br0">)</span>
    <span class="br0">{</span>
      Console.<span class="me1">WriteLine</span><span class="br0">(</span> <span class="st0">"Called ConcreteStrategyA.Execute()"</span> <span class="br0">)</span>;
    <span class="br0">}</span>
  <span class="br0">}</span>
 
  <span class="kw4">class</span> ConcreteStrategyB : IStrategy
  <span class="br0">{</span>
    <span class="kw1">public</span> <span class="kw1">void</span> Execute<span class="br0">(</span><span class="br0">)</span>
    <span class="br0">{</span>
      Console.<span class="me1">WriteLine</span><span class="br0">(</span> <span class="st0">"Called ConcreteStrategyB.Execute()"</span> <span class="br0">)</span>;
    <span class="br0">}</span>
  <span class="br0">}</span>
 
  <span class="kw4">class</span> ConcreteStrategyC : IStrategy
  <span class="br0">{</span>
    <span class="kw1">public</span> <span class="kw1">void</span> Execute<span class="br0">(</span><span class="br0">)</span>
    <span class="br0">{</span>
      Console.<span class="me1">WriteLine</span><span class="br0">(</span> <span class="st0">"Called ConcreteStrategyC.Execute()"</span> <span class="br0">)</span>;
    <span class="br0">}</span>
  <span class="br0">}</span>
 
  <span class="co1">// Configured with a ConcreteStrategy object and maintains a reference to a Strategy object</span>
  <span class="kw4">class</span> Context
  <span class="br0">{</span>
    IStrategy strategy;
 
    <span class="co1">// Constructor</span>
    <span class="kw1">public</span> Context<span class="br0">(</span>IStrategy strategy<span class="br0">)</span>
    <span class="br0">{</span>
      <span class="kw1">this</span>.<span class="me1">strategy</span> = strategy;
    <span class="br0">}</span>
 
    <span class="kw1">public</span> <span class="kw1">void</span> UpdateContext<span class="br0">(</span>IStrategy strategy<span class="br0">)</span>
    <span class="br0">{</span>
      <span class="kw1">this</span>.<span class="me1">strategy</span> = strategy;
    <span class="br0">}</span>
 
    <span class="kw1">public</span> <span class="kw1">void</span> Execute<span class="br0">(</span><span class="br0">)</span>
    <span class="br0">{</span>
      strategy.<span class="me1">Execute</span><span class="br0">(</span><span class="br0">)</span>;
    <span class="br0">}</span>
  <span class="br0">}</span>
<span class="br0">}</span>
</pre></div>
<p><a name="ActionScript_3" id="ActionScript_3"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Strategy_pattern&amp;action=edit&amp;section=8" title="Edit section: ActionScript 3">edit</a>]</span> <span class="mw-headline">ActionScript 3</span></h3>
<div dir="ltr" style="text-align: left;">
<pre class="source-actionscript">
<span class="co1">//invoked from application.initialize</span>
<span class="kw3">private</span> <span class="kw2">function</span> init<span class="br0">(</span><span class="br0">)</span> : <span class="kw3">void</span>
<span class="br0">{</span>
    <span class="kw2">var</span> context:Context;
 
    context = <span class="kw2">new</span> Context<span class="br0">(</span> <span class="kw2">new</span> ConcreteStrategyA<span class="br0">(</span><span class="br0">)</span> <span class="br0">)</span>;
    context.<span class="me1">execute</span><span class="br0">(</span><span class="br0">)</span>;
 
    context = <span class="kw2">new</span> Context<span class="br0">(</span> <span class="kw2">new</span> ConcreteStrategyB<span class="br0">(</span><span class="br0">)</span> <span class="br0">)</span>;
    context.<span class="me1">execute</span><span class="br0">(</span><span class="br0">)</span>;
 
    context = <span class="kw2">new</span> Context<span class="br0">(</span> <span class="kw2">new</span> ConcreteStrategyC<span class="br0">(</span><span class="br0">)</span> <span class="br0">)</span>;
    context.<span class="me1">execute</span><span class="br0">(</span><span class="br0">)</span>;
<span class="br0">}</span>
 
package org.<span class="me1">wikipedia</span>.<span class="me1">patterns</span>.<span class="me1">strategy</span>
<span class="br0">{</span>
    <span class="kw3">public</span> <span class="kw3">interface</span> IStrategy
    <span class="br0">{</span>
	<span class="kw2">function</span> execute<span class="br0">(</span><span class="br0">)</span> : <span class="kw3">void</span> ;
    <span class="br0">}</span>
<span class="br0">}</span>
 
package org.<span class="me1">wikipedia</span>.<span class="me1">patterns</span>.<span class="me1">strategy</span>
<span class="br0">{</span>
    <span class="kw3">public</span> final <span class="kw2">class</span> ConcreteStrategyA <span class="kw3">implements</span> IStrategy
    <span class="br0">{</span>
	<span class="kw3">public</span> <span class="kw2">function</span> execute<span class="br0">(</span><span class="br0">)</span>:<span class="kw3">void</span>
	<span class="br0">{</span>
	     <span class="kw3">trace</span><span class="br0">(</span> <span class="st0">"ConcreteStrategyA.execute(); invoked"</span> <span class="br0">)</span>;
	<span class="br0">}</span>
    <span class="br0">}</span>
<span class="br0">}</span>
 
package org.<span class="me1">wikipedia</span>.<span class="me1">patterns</span>.<span class="me1">strategy</span>
<span class="br0">{</span>
    <span class="kw3">public</span> final <span class="kw2">class</span> ConcreteStrategyB <span class="kw3">implements</span> IStrategy
    <span class="br0">{</span>
	<span class="kw3">public</span> <span class="kw2">function</span> execute<span class="br0">(</span><span class="br0">)</span>:<span class="kw3">void</span>
	<span class="br0">{</span>
	     <span class="kw3">trace</span><span class="br0">(</span> <span class="st0">"ConcreteStrategyB.execute(); invoked"</span> <span class="br0">)</span>;
	<span class="br0">}</span>
    <span class="br0">}</span>
<span class="br0">}</span>
 
package org.<span class="me1">wikipedia</span>.<span class="me1">patterns</span>.<span class="me1">strategy</span>
<span class="br0">{</span>
    <span class="kw3">public</span> final <span class="kw2">class</span> ConcreteStrategyC <span class="kw3">implements</span> IStrategy
    <span class="br0">{</span>
	<span class="kw3">public</span> <span class="kw2">function</span> execute<span class="br0">(</span><span class="br0">)</span>:<span class="kw3">void</span>
	<span class="br0">{</span>
	     <span class="kw3">trace</span><span class="br0">(</span> <span class="st0">"ConcreteStrategyC.execute(); invoked"</span> <span class="br0">)</span>;
	<span class="br0">}</span>
    <span class="br0">}</span>
<span class="br0">}</span>
 
package org.<span class="me1">wikipedia</span>.<span class="me1">patterns</span>.<span class="me1">strategy</span>
<span class="br0">{</span>
   <span class="kw3">public</span> <span class="kw2">class</span> Context
   <span class="br0">{</span>
	<span class="kw3">private</span> <span class="kw2">var</span> strategy:IStrategy;
 
	<span class="kw3">public</span> <span class="kw2">function</span> Context<span class="br0">(</span>strategy:IStrategy<span class="br0">)</span>
	<span class="br0">{</span>
	     <span class="kw3">this</span>.<span class="me1">strategy</span> = strategy;
	<span class="br0">}</span>
 
	<span class="kw3">public</span> <span class="kw2">function</span> execute<span class="br0">(</span><span class="br0">)</span> : <span class="kw3">void</span>
	<span class="br0">{</span>  
             strategy.<span class="me1">execute</span><span class="br0">(</span><span class="br0">)</span>;
	<span class="br0">}</span>
    <span class="br0">}</span>
<span class="br0">}</span>
</pre></div>
<p><a name="PHP" id="PHP"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Strategy_pattern&amp;action=edit&amp;section=9" title="Edit section: PHP">edit</a>]</span> <span class="mw-headline"><a href="/wiki/PHP_(programming_language)" title="PHP (programming language)" class="mw-redirect">PHP</a></span></h3>
<div dir="ltr" style="text-align: left;">
<pre class="source-php">
<span class="kw2">&lt;?php</span>
<span class="kw2">class</span> StrategyExample <span class="br0">{</span>
    <span class="kw2">public</span> <span class="kw2">function</span> __construct<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
        <span class="re0">$context</span> = <span class="kw2">new</span> Context<span class="br0">(</span><span class="kw2">new</span> ConcreteStrategyA<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>;
        <span class="re0">$context</span>-&gt;<span class="me1">execute</span><span class="br0">(</span><span class="br0">)</span>;
 
        <span class="re0">$context</span> = <span class="kw2">new</span> Context<span class="br0">(</span><span class="kw2">new</span> ConcreteStrategyB<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>;
        <span class="re0">$context</span>-&gt;<span class="me1">execute</span><span class="br0">(</span><span class="br0">)</span>;
 
        <span class="re0">$context</span> = <span class="kw2">new</span> Context<span class="br0">(</span><span class="kw2">new</span> ConcreteStrategyC<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>;
        <span class="re0">$context</span>-&gt;<span class="me1">execute</span><span class="br0">(</span><span class="br0">)</span>;
    <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="kw2">interface</span> IStrategy <span class="br0">{</span>
    <span class="kw2">public</span> <span class="kw2">function</span> execute<span class="br0">(</span><span class="br0">)</span>;
<span class="br0">}</span>
 
<span class="kw2">class</span> ConcreteStrategyA implements IStrategy <span class="br0">{</span>
    <span class="kw2">public</span> <span class="kw2">function</span> execute<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
        <span class="kw3">echo</span> <span class="st0">"Called ConcreteStrategyA execute method<span class="es0">\n</span>"</span>;
    <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="kw2">class</span> ConcreteStrategyB implements IStrategy <span class="br0">{</span>
    <span class="kw2">public</span> <span class="kw2">function</span> execute<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
        <span class="kw3">echo</span> <span class="st0">"Called ConcreteStrategyB execute method<span class="es0">\n</span>"</span>;
    <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="kw2">class</span> ConcreteStrategyC implements IStrategy <span class="br0">{</span>
    <span class="kw2">public</span> <span class="kw2">function</span> execute<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
        <span class="kw3">echo</span> <span class="st0">"Called ConcreteStrategyC execute method<span class="es0">\n</span>"</span>;
    <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="kw2">class</span> Context <span class="br0">{</span>
    <span class="kw2">private</span> <span class="re0">$strategy</span>;
 
    <span class="kw2">public</span> <span class="kw2">function</span> __construct<span class="br0">(</span>IStrategy <span class="re0">$strategy</span><span class="br0">)</span> <span class="br0">{</span>
        <span class="re0">$this</span>-&gt;<span class="me1">strategy</span> = <span class="re0">$strategy</span>;
    <span class="br0">}</span>
 
    <span class="kw2">public</span> <span class="kw2">function</span> execute<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
        <span class="re0">$this</span>-&gt;<span class="me1">strategy</span>-&gt;<span class="me1">execute</span><span class="br0">(</span><span class="br0">)</span>;
    <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="kw2">new</span> StrategyExample<span class="br0">(</span><span class="br0">)</span>;
<span class="kw2">?&gt;</span>
</pre></div>
<p><a name="Perl" id="Perl"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Strategy_pattern&amp;action=edit&amp;section=10" title="Edit section: Perl">edit</a>]</span> <span class="mw-headline"><a href="/wiki/Perl" title="Perl">Perl</a></span></h3>
<p>Perl has <a href="/wiki/First-class_function" title="First-class function">first-class functions</a>, so it doesn't require this pattern coded explicitly:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-perl">
<span class="kw3">sort</span> <span class="br0">{</span> <span class="kw3">lc</span><span class="br0">(</span><span class="re0">$a</span><span class="br0">)</span> <span class="kw1">cmp</span> <span class="kw3">lc</span><span class="br0">(</span><span class="re0">$b</span><span class="br0">)</span> <span class="br0">}</span> <span class="re0">@items</span>
</pre></div>
<p>The strategy pattern can be formally implemented with <a href="/wiki/Moose_(Perl)" title="Moose (Perl)">Moose</a>:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-perl">
<span class="kw3">package</span> Strategy;
<span class="kw2">use</span> Moose::<span class="me2">Role</span>;
requires <span class="st0">'execute'</span>;
 
 
<span class="kw3">package</span> FirstStrategy;
<span class="kw2">use</span> Moose;
with <span class="st0">'Strategy'</span>;
 
<span class="kw2">sub</span> execute <span class="br0">{</span>
    <span class="kw3">print</span> <span class="st0">"Called FirstStrategy-&gt;execute()<span class="es0">\n</span>"</span>;
<span class="br0">}</span>
 
 
<span class="kw3">package</span> SecondStrategy;
<span class="kw2">use</span> Moose;
with <span class="st0">'Strategy'</span>;
 
<span class="kw2">sub</span> execute <span class="br0">{</span>
    <span class="kw3">print</span> <span class="st0">"Called SecondStrategy-&gt;execute()<span class="es0">\n</span>"</span>;
<span class="br0">}</span>
 
 
<span class="kw3">package</span> ThirdStrategy;
<span class="kw2">use</span> Moose;
with <span class="st0">'Strategy'</span>;
 
<span class="kw2">sub</span> execute <span class="br0">{</span>
    <span class="kw3">print</span> <span class="st0">"Called ThirdStrategy-&gt;execute()<span class="es0">\n</span>"</span>;
<span class="br0">}</span>
 
 
<span class="kw3">package</span> Context;
<span class="kw2">use</span> Moose;
 
has <span class="st0">'strategy'</span> =&gt; <span class="br0">(</span>
    is =&gt; <span class="st0">'rw'</span>,
    does =&gt; <span class="st0">'Strategy'</span>,
    handles =&gt; <span class="br0">[</span> <span class="st0">'execute'</span> <span class="br0">]</span>,  <span class="co1"># automatic delegation</span>
<span class="br0">)</span>;
 
 
<span class="kw3">package</span> StrategyExample;
<span class="kw2">use</span> Moose;
 
<span class="co1"># Moose's constructor</span>
<span class="kw2">sub</span> BUILD <span class="br0">{</span>
    <span class="kw1">my</span> <span class="re0">$context</span>;
 
    <span class="re0">$context</span> = Context-&gt;<span class="me1">new</span><span class="br0">(</span>strategy =&gt; <span class="st0">'FirstStrategy'</span><span class="br0">)</span>;
    <span class="re0">$context</span>-&gt;<span class="me1">execute</span>;
 
    <span class="re0">$context</span> = Context-&gt;<span class="me1">new</span><span class="br0">(</span>strategy =&gt; <span class="st0">'SecondStrategy'</span><span class="br0">)</span>;
    <span class="re0">$context</span>-&gt;<span class="me1">execute</span>;
 
    <span class="re0">$context</span> = Context-&gt;<span class="me1">new</span><span class="br0">(</span>strategy =&gt; <span class="st0">'ThirdStrategy'</span><span class="br0">)</span>;
    <span class="re0">$context</span>-&gt;<span class="me1">execute</span>;
<span class="br0">}</span>
 
 
<span class="kw3">package</span> main;
 
StrategyExample-&gt;<span class="me1">new</span>;
</pre></div>
<p><a name="Strategy_versus_Bridge" id="Strategy_versus_Bridge"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Strategy_pattern&amp;action=edit&amp;section=11" title="Edit section: Strategy versus Bridge">edit</a>]</span> <span class="mw-headline">Strategy versus Bridge</span></h2>
<p>The <a href="/wiki/Unified_Modeling_Language" title="Unified Modeling Language">UML</a> class diagram for the Strategy pattern is the same as the diagram for the <a href="/wiki/Bridge_pattern" title="Bridge pattern">Bridge pattern</a>. However, these two design patterns aren't the same in their <i>intent</i>. While the Strategy pattern is meant for <i>behavior</i>, the <a href="/wiki/Bridge_pattern" title="Bridge pattern">Bridge pattern</a> is meant for <i>structure</i>.</p>
<p>The coupling between the context and the strategies is tighter than the coupling between the abstraction and the implementation in the Bridge pattern.</p>
<p><a name="Strategy_Pattern_and_Open_Closed_Principle" id="Strategy_Pattern_and_Open_Closed_Principle"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Strategy_pattern&amp;action=edit&amp;section=12" title="Edit section: Strategy Pattern and Open Closed Principle">edit</a>]</span> <span class="mw-headline">Strategy Pattern and Open Closed Principle</span></h2>
<div class="thumb tright">
<div class="thumbinner" style="width:402px;"><a href="/wiki/File:Strategy.JPG" class="image" title="Strategy.JPG"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/a/aa/Strategy.JPG/400px-Strategy.JPG" width="400" height="233" border="0" class="thumbimage" /></a>
<div class="thumbcaption">
<div class="magnify"><a href="/wiki/File:Strategy.JPG" class="internal" title="Enlarge"><img src="/skins-1.5/common/images/magnify-clip.png" width="15" height="11" alt="" /></a></div>
</div>
</div>
</div>
<p>According to Strategy pattern, the behaviors of a class should not be inherited, instead they should be encapsulated using interfaces. As an example, consider a car class. Two possible behaviors of car are brake and accelerate.</p>
<p>Since accelerate and brake behaviors change frequently between models, a common approach is to implement these behaviors in subclasses. This approach has significant drawbacks: accelerate and brake behaviors must be declared in each new Car model. This may not be a concern when there are only a small number of models, but the work of managing these behaviors increases greatly as the number of models increases, and requires code to be duplicated across models. Additionally, it is not easy to determine the exact nature of the behavior for each model without investigating the code in each.</p>
<p>The strategy pattern uses composition instead of inheritance. In the strategy pattern behaviors are defined as separate interfaces and specific classes that implement these interfaces. Specific classes encapsulate these interfaces. This allows better decoupling between the behavior and the class that uses the behavior. The behavior can be changed without breaking the classes that use it, and the classes can switch between behaviors by changing the specific implementation used without requiring any significant code changes. Behaviors can also be changed at run-time as well as at design-time. For instance, a car object’s brake behavior can be changed from <code>BrakeWithABS()</code> to <code>Brake()</code> by changing the <code>brakeBehavior</code> member to:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
brakeBehavior = <span class="kw3">new</span> Brake<span class="br0">(</span><span class="br0">)</span>;
</pre></div>
<p>This gives greater flexibility in design and is in harmony with the <a href="/wiki/Open/closed_principle" title="Open/closed principle">Open/closed principle</a> (OCP) that states classes should be open for extension but closed for modification.</p>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Strategy_pattern&amp;action=edit&amp;section=13" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<ul>
<li><a href="/wiki/Mixin" title="Mixin">Mixin</a></li>
<li><a href="/wiki/Policy-based_design" title="Policy-based design">Policy-based design</a></li>
<li><a href="/wiki/First-class_function" title="First-class function">First-class function</a></li>
<li><a href="/wiki/Template_method_pattern" title="Template method pattern">Template method pattern</a></li>
<li><a href="/wiki/Bridge_pattern" title="Bridge pattern">Bridge pattern</a></li>
<li><a href="/wiki/Open/closed_principle" title="Open/closed principle">Open/closed principle</a></li>
<li><a href="/wiki/Factory_Pattern" title="Factory Pattern" class="mw-redirect">Factory Pattern</a></li>
<li><a href="/wiki/List_of_object-oriented_programming_terms" title="List of object-oriented programming terms">List of object-oriented programming terms</a></li>
</ul>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Strategy_pattern&amp;action=edit&amp;section=14" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<ul>
<li><a href="http://www.netobjectivesrepository.com/TheStrategyPattern" class="external text" title="http://www.netobjectivesrepository.com/TheStrategyPattern" rel="nofollow">The Strategy Pattern from the Net Objectives Repository</a></li>
<li><a href="http://www.javaworld.com/javaworld/jw-04-2002/jw-0426-designpatterns.html" class="external text" title="http://www.javaworld.com/javaworld/jw-04-2002/jw-0426-designpatterns.html" rel="nofollow">Strategy Pattern for Java article</a></li>
<li><a href="http://www.lepus.org.uk/ref/companion/Strategy.xml" class="external text" title="http://www.lepus.org.uk/ref/companion/Strategy.xml" rel="nofollow">Strategy pattern in UML and in LePUS3</a> (a formal modelling notation)</li>
<li><a href="http://www.dofactory.com/Patterns/PatternStrategy.aspx" class="external text" title="http://www.dofactory.com/Patterns/PatternStrategy.aspx" rel="nofollow">Data &amp; object factory</a></li>
<li><a href="http://www.refactoring.com/catalog/replaceTypeCodeWithStateStrategy.html" class="external text" title="http://www.refactoring.com/catalog/replaceTypeCodeWithStateStrategy.html" rel="nofollow">Refactoring: Replace Type Code with State/Strategy</a></li>
<li><a href="http://www.fsw.com/Jt/Jt.htm" class="external text" title="http://www.fsw.com/Jt/Jt.htm" rel="nofollow">Jt</a> J2EE Pattern Oriented Framework</li>
<li><a href="http://anirudhvyas.com/root/2008/04/02/a-much-better-strategy-pattern/" class="external text" title="http://anirudhvyas.com/root/2008/04/02/a-much-better-strategy-pattern/" rel="nofollow">Strategy Pattern with a twist!</a></li>
</ul>
<table class="navbox" cellspacing="0" style=";">
<tr>
<td style="padding:2px;">
<table cellspacing="0" class="nowraplinks collapsible autocollapse" style="width:100%;background:transparent;color:inherit;;">
<tr>
<th style=";" colspan="2" class="navbox-title">
<div style="float:left; width:6em;text-align:left;">
<div class="noprint plainlinksneverexpand navbar" style="background:none; padding:0; font-weight:normal;;;border:none;; font-size:xx-small;"><a href="/wiki/Template:Design_Patterns_Patterns" title="Template:Design Patterns Patterns"><span title="View this template" style=";;border:none;">v</span></a>&#160;<span style="font-size:80%;">•</span>&#160;<a href="/w/index.php?title=Template_talk:Design_Patterns_Patterns&amp;action=edit&amp;redlink=1" class="new" title="Template talk:Design Patterns Patterns (page does not exist)"><span title="Discussion about this template" style=";;border:none;">d</span></a>&#160;<span style="font-size:80%;">•</span>&#160;<a href="http://en.wikipedia.org/w/index.php?title=Template:Design_Patterns_Patterns&amp;action=edit" class="external text" title="http://en.wikipedia.org/w/index.php?title=Template:Design_Patterns_Patterns&amp;action=edit" rel="nofollow"><span title="Edit this template" style=";;border:none;;">e</span></a></div>
</div>
<span style="font-size:110%;"><a href="/wiki/Design_pattern_(computer_science)" title="Design pattern (computer science)">Design patterns</a> in the book <i><a href="/wiki/Design_Patterns_(book)" title="Design Patterns (book)">Design Patterns</a></i></span></th>
</tr>
<tr style="height:2px;">
<td></td>
</tr>
<tr>
<td class="navbox-group" style=";;">Creational</td>
<td style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<div style="padding:0em 0.25em"><a href="/wiki/Abstract_factory_pattern" title="Abstract factory pattern">Abstract factory</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Builder_pattern" title="Builder pattern">Builder</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Factory_method_pattern" title="Factory method pattern">Factory</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Prototype_pattern" title="Prototype pattern">Prototype</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Singleton_pattern" title="Singleton pattern">Singleton</a></div>
</td>
</tr>
<tr style="height:2px">
<td></td>
</tr>
<tr>
<td class="navbox-group" style=";;">Structural</td>
<td style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<div style="padding:0em 0.25em"><a href="/wiki/Adapter_pattern" title="Adapter pattern">Adapter</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Bridge_pattern" title="Bridge pattern">Bridge</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Composite_pattern" title="Composite pattern">Composite</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Decorator_pattern" title="Decorator pattern">Decorator</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Facade_pattern" title="Facade pattern">Facade</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Flyweight_pattern" title="Flyweight pattern">Flyweight</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Proxy_pattern" title="Proxy pattern">Proxy</a></div>
</td>
</tr>
<tr style="height:2px">
<td></td>
</tr>
<tr>
<td class="navbox-group" style=";;">Behavioral</td>
<td style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<div style="padding:0em 0.25em"><a href="/wiki/Chain-of-responsibility_pattern" title="Chain-of-responsibility pattern">Chain of responsibility</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Command_pattern" title="Command pattern">Command</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Interpreter_pattern" title="Interpreter pattern">Interpreter</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Iterator_pattern" title="Iterator pattern">Iterator</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Mediator_pattern" title="Mediator pattern">Mediator</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Memento_pattern" title="Memento pattern">Memento</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Observer_pattern" title="Observer pattern">Observer</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/State_pattern" title="State pattern">State</a><span style="font-weight:bold;">&#160;·</span> <strong class="selflink">Strategy</strong><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Template_method_pattern" title="Template method pattern">Template method</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Visitor_pattern" title="Visitor pattern">Visitor</a></div>
</td>
</tr>
</table>
</td>
</tr>
</table>


<!-- 
NewPP limit report
Preprocessor node count: 449/1000000
Post-expand include size: 14153/2048000 bytes
Template argument size: 5823/2048000 bytes
Expensive parser function count: 0/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:164865-0!1!0!default!!en!2 and timestamp 20090417022720 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Strategy_pattern">http://en.wikipedia.org/wiki/Strategy_pattern</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Software_design_patterns" title="Category:Software design patterns">Software design patterns</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_example_C_Sharp_code" title="Category:Articles with example C Sharp code">Articles with example C Sharp code</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_example_Java_code" title="Category:Articles with example Java code">Articles with example Java code</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_example_Python_code" title="Category:Articles with example Python code">Articles with example Python code</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_example_C%2B%2B_code" title="Category:Articles with example C++ code">Articles with example C++ code</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Strategy_pattern" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Strategy_pattern" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Strategy_pattern&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Strategy_pattern&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Strategy_pattern" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Strategy_pattern" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Strategy_pattern" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Strategy_pattern&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Strategy_pattern&amp;oldid=283347777" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Strategy_pattern&amp;id=283347777">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-ca"><a href="http://ca.wikipedia.org/wiki/Patr%C3%B3_estrat%C3%A8gia">Català</a></li>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/Strategie_(Entwurfsmuster)">Deutsch</a></li>
				<li class="interwiki-es"><a href="http://es.wikipedia.org/wiki/Strategy_(patr%C3%B3n_de_dise%C3%B1o)">Español</a></li>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Strat%C3%A9gie_(patron_de_conception)">Français</a></li>
				<li class="interwiki-it"><a href="http://it.wikipedia.org/wiki/Strategy_pattern">Italiano</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/Strategy_%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3">日本語</a></li>
				<li class="interwiki-pl"><a href="http://pl.wikipedia.org/wiki/Strategia_(wzorzec_projektowy)">Polski</a></li>
				<li class="interwiki-pt"><a href="http://pt.wikipedia.org/wiki/Strategy">Português</a></li>
				<li class="interwiki-ru"><a href="http://ru.wikipedia.org/wiki/%D0%A1%D1%82%D1%80%D0%B0%D1%82%D0%B5%D0%B3%D0%B8%D1%8F_(%D1%88%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD_%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)">Русский</a></li>
				<li class="interwiki-vi"><a href="http://vi.wikipedia.org/wiki/Strategy_pattern">Tiếng Việt</a></li>
				<li class="interwiki-zh"><a href="http://zh.wikipedia.org/wiki/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F">中文</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 12 April 2009, at 11:58 (UTC).</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv189 in 0.055 secs. --></body></html>
