<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Prototype-based programming,Special:Search/Prototype-based programming,ABCL/1,ABCL/R,ABCL/R2,ABCL/c plus,Abductive logic programming,ActionScript,Actor-Based Concurrent Language,Adobe Flash,Adobe Flex" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Prototype-based_programming&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Prototype-based_programming&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Prototype-based programming - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Prototype-based_programming";
		var wgTitle = "Prototype-based programming";
		var wgAction = "view";
		var wgArticleId = "61003";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 277949945;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
<style type="text/css">/*<![CDATA[*/
.source-javascript {line-height: normal;}
.source-javascript li, .source-javascript pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for javascript
 * CSS class: source-javascript, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-javascript .de1, .source-javascript .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-javascript  {}
.source-javascript .head {}
.source-javascript .foot {}
.source-javascript .imp {font-weight: bold; color: red;}
.source-javascript .ln-xtra {color: #cc0; background-color: #ffc;}
.source-javascript li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-javascript li.li2 {font-weight: bold;}
.source-javascript .kw1 {color: #000066; font-weight: bold;}
.source-javascript .kw2 {color: #003366; font-weight: bold;}
.source-javascript .kw3 {color: #000066;}
.source-javascript .co1 {color: #009900; font-style: italic;}
.source-javascript .coMULTI {color: #009900; font-style: italic;}
.source-javascript .es0 {color: #000099; font-weight: bold;}
.source-javascript .br0 {color: #66cc66;}
.source-javascript .st0 {color: #3366CC;}
.source-javascript .nu0 {color: #CC0000;}
.source-javascript .me1 {color: #006600;}
.source-javascript .sc0 {}
.source-javascript .sc1 {}
.source-javascript .sc2 {}
.source-javascript .sc3 {}
.source-javascript .re0 {color: #0066FF;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style>		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Prototype-based_programming skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Prototype-based programming</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<table class="navbox" style="float:right; background-color:rgb(248,248,255); clear:right; margin: 1ex 0 0.5em 1em; width: 20em">
<tr>
<th><a href="/wiki/Programming_paradigm" title="Programming paradigm">Programming paradigms</a></th>
</tr>
<tr>
<td style="text-align:left">
<ul>
<li><a href="/wiki/Software_agent" title="Software agent">Agent-oriented</a></li>
<li><a href="/wiki/Component-based_software_engineering" title="Component-based software engineering">Component-based</a>
<ul>
<li><a href="/wiki/Flow-based_programming" title="Flow-based programming">Flow-based</a></li>
<li><a href="/wiki/Pipeline_programming" title="Pipeline programming">Pipeline</a></li>
</ul>
</li>
<li><a href="/wiki/Concatenative_programming_language" title="Concatenative programming language">Concatenative</a></li>
<li><a href="/wiki/Concurrent_computing" title="Concurrent computing">Concurrent computing</a></li>
<li><a href="/w/index.php?title=Context-oriented_programming&amp;action=edit&amp;redlink=1" class="new" title="Context-oriented programming (page does not exist)">Context-oriented</a></li>
<li><a href="/wiki/Declarative_programming" title="Declarative programming">Declarative</a> (Contrast: <a href="/wiki/Imperative_programming" title="Imperative programming">Imperative</a>)
<ul>
<li><a href="/wiki/Functional_programming" title="Functional programming">Functional</a>
<ul>
<li><a href="/wiki/Dataflow" title="Dataflow">Dataflow</a>
<ul>
<li><a href="/wiki/Spreadsheet" title="Spreadsheet">Cell-oriented (spreadsheets)</a></li>
<li><a href="/wiki/Reactive_programming" title="Reactive programming">Reactive</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="/w/index.php?title=Goal-directed_programming&amp;action=edit&amp;redlink=1" class="new" title="Goal-directed programming (page does not exist)">Goal-directed</a>
<ul>
<li><a href="/wiki/Constraint_programming" title="Constraint programming">Constraint</a></li>
<li><a href="/wiki/Constraint_logic_programming" title="Constraint logic programming">Constraint logic</a></li>
<li><a href="/wiki/Logic_programming" title="Logic programming">Logic</a>
<ul>
<li><a href="/wiki/Abductive_logic_programming" title="Abductive logic programming">Abductive logic</a></li>
<li><a href="/wiki/Inductive_logic_programming" title="Inductive logic programming">Inductive logic</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><a href="/wiki/Event-driven_programming" title="Event-driven programming">Event-driven</a></li>
<li><a href="/wiki/Feature_Oriented_Programming" title="Feature Oriented Programming">Feature-oriented</a></li>
<li><a href="/wiki/Function-level_programming" title="Function-level programming">Function-level</a> (Contrast: <a href="/wiki/Value-level_programming" title="Value-level programming">Value-level</a>)</li>
<li><a href="/wiki/Imperative_programming" title="Imperative programming">Imperative</a> (Contrast: <a href="/wiki/Declarative_programming" title="Declarative programming">Declarative</a>)
<ul>
<li>Advanced separation of concerns
<ul>
<li><a href="/wiki/Aspect-oriented_programming" title="Aspect-oriented programming">Aspect-oriented</a></li>
<li><a href="/wiki/Subject-oriented_programming" title="Subject-oriented programming">Subject-oriented</a></li>
</ul>
</li>
<li><a href="/wiki/Array_programming" title="Array programming">Array</a> (Contrast: <a href="/wiki/Scalar_programming" title="Scalar programming">Scalar</a>)</li>
<li><a href="/wiki/Automata-based_programming" title="Automata-based programming">Automata-based</a></li>
<li><a href="/wiki/Object-oriented_programming" title="Object-oriented programming">Object-oriented</a>
<ul>
<li><a href="/wiki/Class-based_programming" title="Class-based programming">Class-based</a></li>
<li><strong class="selflink">Prototype-based</strong></li>
</ul>
</li>
<li><a href="/wiki/Procedural_programming" title="Procedural programming">Procedural</a>
<ul>
<li><a href="/wiki/Structured_programming" title="Structured programming">Structured</a></li>
</ul>
</li>
<li><a href="/wiki/Role-oriented_programming" title="Role-oriented programming">Role-oriented</a></li>
<li><a href="/wiki/Scalar_programming" title="Scalar programming">Scalar</a> (Contrast: <a href="/wiki/Array_programming" title="Array programming">Array</a>)</li>
</ul>
</li>
<li><a href="/wiki/Iteration" title="Iteration">Iterative</a> (Contrast: <a href="/wiki/Recursion_(computer_science)" title="Recursion (computer science)">Recursive</a>)</li>
<li><a href="/wiki/Metaprogramming" title="Metaprogramming">Metaprogramming</a>
<ul>
<li><a href="/wiki/Attribute-Oriented_Programming" title="Attribute-Oriented Programming">Attribute-oriented</a></li>
<li><a href="/wiki/Automatic_programming" title="Automatic programming">Automatic</a>
<ul>
<li><a href="/wiki/Generic_programming" title="Generic programming">Generic</a>
<ul>
<li><a href="/wiki/Template_metaprogramming" title="Template metaprogramming">Template</a>
<ul>
<li><a href="/wiki/Policy-based_design" title="Policy-based design">Policy-based</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="/wiki/Language-oriented_programming" title="Language-oriented programming">Language-oriented</a>
<ul>
<li><a href="/wiki/Grammar-oriented_programming" title="Grammar-oriented programming">Grammar-oriented</a>
<ul>
<li><a href="/wiki/Dialecting" title="Dialecting">Dialecting</a></li>
</ul>
</li>
<li><a href="/wiki/Intentional_programming" title="Intentional programming">Intentional</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="/wiki/Reflection_(computer_science)" title="Reflection (computer science)">Reflective</a></li>
</ul>
</li>
<li><a href="/wiki/Modular_programming" title="Modular programming">Modular</a></li>
<li><a href="/wiki/Nondeterministic_programming" title="Nondeterministic programming">Nondeterministic</a></li>
<li><a href="/wiki/Parallel_computing" title="Parallel computing">Parallel computing</a>
<ul>
<li><a href="/wiki/Process-oriented_programming" title="Process-oriented programming">Process-oriented</a></li>
</ul>
</li>
<li><a href="/wiki/Programming_in_the_large_and_programming_in_the_small" title="Programming in the large and programming in the small">Programming in the large and programming in the small</a></li>
<li><a href="/wiki/Recursion_(computer_science)" title="Recursion (computer science)">Recursive</a> (Contrast: <a href="/wiki/Iteration" title="Iteration">Iterative</a>)</li>
<li><a href="/wiki/Tree_programming" title="Tree programming">Tree</a></li>
<li><a href="/wiki/Value-level_programming" title="Value-level programming">Value-level</a> (Contrast: <a href="/wiki/Function-level_programming" title="Function-level programming">Function-level</a>)</li>
</ul>
<hr />
<div class="noprint plainlinksneverexpand navbar" style="background:none; padding:0; font-weight:normal;; font-size:xx-small; text-align:center;">This box: <a href="/wiki/Template:Programming_paradigms" title="Template:Programming paradigms"><span title="View this template" style="">view</span></a>&#160;<span style="font-size:80%;">•</span>&#160;<a href="/wiki/Template_talk:Programming_paradigms" title="Template talk:Programming paradigms"><span title="Discussion about this template" style="">talk</span></a>&#160;<span style="font-size:80%;">•</span>&#160;<a href="http://en.wikipedia.org/w/index.php?title=Template:Programming_paradigms&amp;action=edit" class="external text" title="http://en.wikipedia.org/w/index.php?title=Template:Programming_paradigms&amp;action=edit" rel="nofollow"><span title="Edit this template" style=";">edit</span></a></div>
</td>
</tr>
</table>
<p><b>Prototype-based programming</b> is a style of <a href="/wiki/Object-oriented_programming" title="Object-oriented programming">object-oriented programming</a> in which <a href="/wiki/Class_(programming)" title="Class (programming)" class="mw-redirect">classes</a> are not present, and behavior reuse (known as <a href="/wiki/Inheritance_(programming)" title="Inheritance (programming)" class="mw-redirect">inheritance</a> in class-based languages) is performed via a process of <a href="/wiki/Cloning_(programming)" title="Cloning (programming)">cloning</a> existing <a href="/wiki/Object_(programming)" title="Object (programming)" class="mw-redirect">objects</a> that serve as <a href="/wiki/Prototype" title="Prototype">prototypes</a>. This model can also be known as <i>class-less</i>, <i>prototype-oriented</i> or <i>instance-based</i> programming.</p>
<p>The original (and most canonical) example of a prototype-based language is the programming language <a href="/wiki/Self_(programming_language)" title="Self (programming language)">Self</a> developed by <a href="/wiki/David_Ungar" title="David Ungar">David Ungar</a> and <a href="/wiki/Randall_Smith" title="Randall Smith">Randall Smith</a>. However, the classless programming style has recently grown increasingly popular, and has been adopted for the <a href="/wiki/Programming_language" title="Programming language">programming languages</a> <a href="/wiki/JavaScript" title="JavaScript">JavaScript</a>, <a href="/wiki/Cecil_(programming_language)" title="Cecil (programming language)">Cecil</a>, <a href="/wiki/NewtonScript" title="NewtonScript">NewtonScript</a>, <a href="/wiki/Io_(programming_language)" title="Io (programming language)">Io</a>, <a href="/wiki/MOO_(programming_language)" title="MOO (programming language)">MOO</a>, <a href="/wiki/REBOL" title="REBOL">REBOL</a>, <a href="/wiki/Lisaac" title="Lisaac">Lisaac</a> and several others.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Comparison_with_class-based_models"><span class="tocnumber">1</span> <span class="toctext">Comparison with class-based models</span></a></li>
<li class="toclevel-1"><a href="#Object_construction"><span class="tocnumber">2</span> <span class="toctext">Object construction</span></a></li>
<li class="toclevel-1"><a href="#Delegation"><span class="tocnumber">3</span> <span class="toctext">Delegation</span></a></li>
<li class="toclevel-1"><a href="#Concatenation"><span class="tocnumber">4</span> <span class="toctext">Concatenation</span></a></li>
<li class="toclevel-1"><a href="#Criticism"><span class="tocnumber">5</span> <span class="toctext">Criticism</span></a></li>
<li class="toclevel-1"><a href="#Languages"><span class="tocnumber">6</span> <span class="toctext">Languages</span></a></li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">7</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1"><a href="#Further_reading"><span class="tocnumber">8</span> <span class="toctext">Further reading</span></a></li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">9</span> <span class="toctext">See also</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Comparison_with_class-based_models" id="Comparison_with_class-based_models"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Prototype-based_programming&amp;action=edit&amp;section=1" title="Edit section: Comparison with class-based models">edit</a>]</span> <span class="mw-headline">Comparison with class-based models</span></h2>
<p>With class-based languages, <a href="/wiki/Object_(computer_science)" title="Object (computer science)">objects</a> come in two general types. <i><a href="/wiki/Class_(computer_science)" title="Class (computer science)">Classes</a></i> define the basic layout and functionality of objects, and <i><a href="/wiki/Instance" title="Instance" class="mw-redirect">instances</a></i> are "usable" objects based on the patterns of a particular class. In this model, <i>classes</i> act as collections of behavior (<a href="/wiki/Method_(computer_science)" title="Method (computer science)">methods</a>) and structure that are the same for all instances, whereas <i>instances</i> carry the objects' data. The role distinction is thus primarily based on a distinction between structure and behavior on the one hand, and <i><a href="/wiki/State_(computer_science)" title="State (computer science)">state</a></i> on the other.</p>
<p>Advocates of prototype-based programming often argue that class-based languages encourage a model of development that focuses first on the taxonomy and relationships between classes. In contrast, prototype-based programming is seen as encouraging the programmer to focus on the behavior of some set of examples and only later worry about classifying these objects into archetypal objects that are later used in a fashion similar to classes. As such, many prototype-based systems encourage the alteration of prototypes during <a href="/wiki/Runtime" title="Runtime">runtime</a>, whereas only very few class-based object-oriented systems (such as the first dynamic object-oriented system, <a href="/wiki/Smalltalk" title="Smalltalk">Smalltalk</a>) allow classes to be altered during the execution of a program.</p>
<p>While the vast majority of prototype-based systems are based around interpreted and <a href="/wiki/Dynamically_typed" title="Dynamically typed" class="mw-redirect">dynamically typed</a> programming languages, it is important to point out that <a href="/wiki/Statically_typed" title="Statically typed" class="mw-redirect">statically typed</a> systems based around prototypes are technically feasible. The <a href="/wiki/Omega_programming_language" title="Omega programming language" class="mw-redirect">Omega programming language</a> discussed in <i>Prototype-Based Programming</i> <sup id="cite_ref-0" class="reference"><a href="#cite_note-0" title=""><span>[</span>1<span>]</span></a></sup> is an example of such a system, though according to Omega's website even Omega is not exclusively static but rather its "compiler may choose to use static binding where this is possible and may improve the efficiency of a program."</p>
<p><a name="Object_construction" id="Object_construction"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Prototype-based_programming&amp;action=edit&amp;section=2" title="Edit section: Object construction">edit</a>]</span> <span class="mw-headline">Object construction</span></h2>
<p>In class-based languages a new instance is constructed through the class's <a href="/wiki/Constructor_(computer_science)" title="Constructor (computer science)">constructor</a> and an optional set of constructor <a href="/wiki/Parameter_(computer_science)" title="Parameter (computer science)">arguments</a>. The resulting instance is modeled on the layout and behavior dictated by the chosen class.</p>
<p>In prototype-based systems there are two methods of constructing new objects, through <i>cloning</i> of an existing object, and through <i><a href="/wiki/Ex_nihilo" title="Ex nihilo">ex nihilo</a></i> ("from nothing") object creation. While most systems support a variety of cloning, <i>ex nihilo</i> object creation is not as prominent.<sup id="cite_ref-1" class="reference"><a href="#cite_note-1" title=""><span>[</span>2<span>]</span></a></sup></p>
<p>Systems that support <i>ex nihilo</i> object creation allow new objects to be created from scratch without cloning from an existing prototype. Such systems provide a special syntax for specifying the properties and behaviors of new objects without referencing existing objects. In many prototype languages, there is often a basic <i>Object</i> prototype that carries commonly needed methods and is used as a master prototype for all other objects. One useful aspect of <i>ex nihilo</i> object creation is to ensure that a new object's slot names do not have <a href="/wiki/Namespace_(computer_science)" title="Namespace (computer science)">namespace</a> collisions with the top-level <i>Object</i> object. (In the Mozilla <a href="/wiki/JavaScript" title="JavaScript">JavaScript</a> implementation, one can accomplish this by setting a newly constructed object's <i>__proto__</i> property to null.)</p>
<p><i>Cloning</i> refers to a process whereby a new object is constructed by copying the behavior of an existing object (its prototype). The new object then carries all the qualities of the original. From this point on, the new object can be modified. In some systems the resulting child object maintains an explicit link (via <a href="/wiki/Delegation_(programming)" title="Delegation (programming)"><i>delegation</i></a> or <a href="/w/index.php?title=Resemblance_(programing)&amp;action=edit&amp;redlink=1" class="new" title="Resemblance (programing) (page does not exist)"><i>resemblance</i></a>) to its prototype, and changes in the prototype cause corresponding changes to be apparent in its clone. Other systems, such as the <a href="/wiki/Forth_(programming_language)" title="Forth (programming language)">Forth</a>-like programming language <a href="/w/index.php?title=Kevo_(programming_language)&amp;action=edit&amp;redlink=1" class="new" title="Kevo (programming language) (page does not exist)">Kevo</a>, do not propagate change from the prototype in this fashion, and instead follow a more <i>concatenative</i> model where changes in cloned objects do not automatically propagate across descendants.<sup id="cite_ref-2" class="reference"><a href="#cite_note-2" title=""><span>[</span>3<span>]</span></a></sup></p>
<div dir="ltr" style="text-align: left;">
<pre class="source-javascript">
<span class="co1">//Example of true prototypal inheritance style in javascript.</span>
 
<span class="co1">//"ex nihilo" object creation employing the literal object notation {}.</span>
<span class="kw2">var</span> foo = <span class="br0">{</span>one: <span class="nu0">1</span>, two: <span class="nu0">2</span><span class="br0">}</span>;
<span class="co1">//another "ex nihilo" object.</span>
<span class="kw2">var</span> bar = <span class="br0">{</span>three: <span class="nu0">3</span><span class="br0">}</span>;
 
<span class="co1">//Gecko and Webkit can directly manipulate the hidden __proto__ link.</span>
<span class="co1">//IE, Opera et al may need to use the object, clone or Object.beget functions</span>
<span class="co1">//to make a new object and set its __proto__ to the parent object and return</span>
<span class="co1">//the newly created child object.</span>
 
bar.__proto__ = foo; <span class="co1">// bar is now the child of foo.</span>
 
<span class="co1">//If we try to access foo's properties from bar from now on, we'll succeed. </span>
<span class="kw3">alert</span><span class="br0">(</span>bar.<span class="me1">one</span><span class="br0">)</span>; <span class="co1">//alerts 1.</span>
 
<span class="co1">//The child objects properties are also accessible.</span>
<span class="kw3">alert</span><span class="br0">(</span>bar.<span class="me1">three</span><span class="br0">)</span>; <span class="co1">//alerts 3.</span>
</pre></div>
<p><a name="Delegation" id="Delegation"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Prototype-based_programming&amp;action=edit&amp;section=3" title="Edit section: Delegation">edit</a>]</span> <span class="mw-headline">Delegation</span></h2>
<p>In prototype-based languages that use <i>delegation</i>, the language runtime is capable of <a href="/wiki/Dynamic_dispatch" title="Dynamic dispatch">dispatching</a> the correct method or finding the right piece of data simply by following a series of delegation pointers (from object to its prototype) until a match is found. All that is required to establish this behavior-sharing between objects is the delegation pointer. Unlike the relationship between class and instance in class-based object-oriented languages, the relationship between the prototype and its offshoots does not require that the child object have a memory or structural similarity to the prototype beyond this link. As such, the child object can continue to be modified and amended over time without rearranging the structure of its associated prototype as in class-based systems. It is also important to note that not only data but also methods can be added or changed. For this reason, most prototype-based languages refer to both data and methods as "slots".</p>
<p><a name="Concatenation" id="Concatenation"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Prototype-based_programming&amp;action=edit&amp;section=4" title="Edit section: Concatenation">edit</a>]</span> <span class="mw-headline">Concatenation</span></h2>
<p>Under pure prototyping, which is also referred to as <i>concatenative</i> prototypes, and is exemplified in the Kevo language, there are no visible pointers or links to the original prototype from which an object is cloned. The prototype object is copied exactly, but given a different name (or reference). Behavior and attributes are simply duplicated as-is.</p>
<p>Advantages to this approach include the fact that object authors can alter the copy without worrying about side-effects across other children of the parent. A further advantage is that the computational cost of method lookup during dispatch is drastically reduced when compared to delegation, where an exhaustive search must be made of the entire delegation chain before failure to find a method or slot can be admitted.</p>
<p>Disadvantages to the concatenative approach include the organizational difficulty of propagating changes through the system; if a change occurs in a prototype, it is not immediately or automatically available on its clones. However, Kevo does provide additional primitives for publishing changes across sets of objects based on their similarity (so-called <i>family resemblances</i>) rather than through taxonomic origin, as is typical in the delegation model.</p>
<p>Another disadvantage is that, in the most naive implementations of this model, additional memory is wasted (versus the delegation model) on each clone for the parts that have stayed the same between prototype and clone. However, it is possible to provide concatenative behavior to the programming while sharing implementation and data behind-the-scenes; such an approach is indeed followed by Kevo.<sup id="cite_ref-3" class="reference"><a href="#cite_note-3" title=""><span>[</span>4<span>]</span></a></sup>.</p>
<p>An alternative quasi-solution to the problem of clones interfering with the behavior of the parent is to provide a means whereby the potential parent is flagged as being clonable or not. In <a href="/wiki/MOO_programming_language" title="MOO programming language" class="mw-redirect">MOO</a>, this is achieved with the "f" flag. Only objects with the "f" flag can be cloned. In practice, this leads to certain objects serving as <i>surrogate classes</i>; their properties are kept constant to serve as initial values for their children. These children then tend to have the "f" flag not set.</p>
<p><a name="Criticism" id="Criticism"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Prototype-based_programming&amp;action=edit&amp;section=5" title="Edit section: Criticism">edit</a>]</span> <span class="mw-headline">Criticism</span></h2>
<p>Advocates of class-based object models who criticize prototype-based systems often have concerns that could be seen as similar to those concerns that proponents of static type systems for programming languages have of dynamic type systems (see <a href="/wiki/Datatype" title="Datatype" class="mw-redirect">Datatype</a>). Usually, such concerns involve: <a href="/wiki/Correctness" title="Correctness">correctness</a>, <a href="/wiki/Safety" title="Safety">safety</a>, <a href="/wiki/Predictability" title="Predictability">predictability</a>, and <a href="/wiki/Algorithmic_efficiency" title="Algorithmic efficiency">efficiency</a>.</p>
<p>On the first three points, classes are often seen as analogous to types (in most statically typed object-oriented languages they serve that role) and are proposed to provide contractual guarantees to their instances, and to users of their instances, that they will behave in some given fashion.</p>
<p>On the last point, efficiency, the declaration of classes simplifies many <a href="/wiki/Compiler" title="Compiler">compiler</a> optimizations that allow developing efficient method and instance variable lookup. For the <a href="/wiki/Self_(programming_language)" title="Self (programming language)">Self</a> language, much development time was spent on developing, compiling, and interpreting techniques to improve the performance of prototype-based systems versus class-based systems. For example, the <a href="/wiki/Lisaac" title="Lisaac">Lisaac</a> compiler produces code almost as fast as C. Tests have been run with an MPEG-2 codec written in Lisaac, copied from a C version. These tests show the Lisaac version is 1.9% slower than the C version with 37% fewer lines of code<sup id="cite_ref-4" class="reference"><a href="#cite_note-4" title=""><span>[</span>5<span>]</span></a></sup>.</p>
<p>The most common criticism made against prototype-based languages is that the community of <a href="/wiki/Software_developer" title="Software developer">software developers</a> is not familiar with them, despite the popularity and market permeation of <a href="/wiki/JavaScript" title="JavaScript">JavaScript</a>. This knowledge level of prototype based systems seems to be changing with the proliferation of <a href="/wiki/JavaScript_framework" title="JavaScript framework" class="mw-redirect">JavaScript frameworks</a> and increases in the complex use of <a href="/wiki/JavaScript" title="JavaScript">JavaScript</a> as "<a href="/wiki/Web_2.0" title="Web 2.0">Web 2.0</a>" matures.</p>
<p><a name="Languages" id="Languages"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Prototype-based_programming&amp;action=edit&amp;section=6" title="Edit section: Languages">edit</a>]</span> <span class="mw-headline">Languages</span></h2>
<ul>
<li><a href="/wiki/Actor-Based_Concurrent_Language" title="Actor-Based Concurrent Language">Actor-Based Concurrent Language (ABCL)</a>: <a href="/wiki/ABCL/1" title="ABCL/1" class="mw-redirect">ABCL/1</a>, <a href="/wiki/ABCL/R" title="ABCL/R" class="mw-redirect">ABCL/R</a>, <a href="/wiki/ABCL/R2" title="ABCL/R2" class="mw-redirect">ABCL/R2</a>, <a href="/wiki/ABCL/c_plus" title="ABCL/c plus" class="mw-redirect">ABCL/c+</a></li>
<li><a href="/wiki/Agora_(programming_language)" title="Agora (programming language)">Agora</a></li>
<li><a href="/wiki/Cecil_(programming_language)" title="Cecil (programming language)">Cecil</a></li>
<li><a href="/wiki/Cel_(programming_language)" title="Cel (programming language)">Cel</a></li>
<li><a href="/wiki/ColdC" title="ColdC">ColdC</a></li>
<li><a href="/wiki/ECMAScript" title="ECMAScript">ECMAScript</a>
<ul>
<li><a href="/wiki/ActionScript" title="ActionScript">ActionScript</a> (Used by <a href="/wiki/Adobe_Flash" title="Adobe Flash">Adobe Flash</a> and <a href="/wiki/Adobe_Flex" title="Adobe Flex">Adobe Flex</a>)</li>
<li><a href="/w/index.php?title=DMDScript&amp;action=edit&amp;redlink=1" class="new" title="DMDScript (page does not exist)">DMDScript</a></li>
<li><a href="/wiki/E4X" title="E4X" class="mw-redirect">E4X</a></li>
<li><a href="/wiki/JavaScript" title="JavaScript">JavaScript</a> (first named <b>Mocha</b>, then <b>LiveScript</b>)</li>
<li><a href="/wiki/JScript" title="JScript">JScript</a></li>
</ul>
</li>
<li><a href="/wiki/Falcon_(programming_language)" title="Falcon (programming language)">Falcon</a></li>
<li><a href="http://www.ozonehouse.com/mark/codeworks.html" class="external text" title="http://www.ozonehouse.com/mark/codeworks.html" rel="nofollow">Glyphic Script</a></li>
<li><a href="/w/index.php?title=Hula_(programming_language)&amp;action=edit&amp;redlink=1" class="new" title="Hula (programming language) (page does not exist)">Hula</a></li>
<li><a href="/wiki/Io_(programming_language)" title="Io (programming language)">Io</a></li>
<li><a href="/wiki/Ioke_(programming_language)" title="Ioke (programming language)">Ioke</a></li>
<li><a href="/w/index.php?title=Kevo_(programming_language)&amp;action=edit&amp;redlink=1" class="new" title="Kevo (programming language) (page does not exist)">Kevo</a></li>
<li><a href="/wiki/Lisaac" title="Lisaac">Lisaac</a></li>
<li><a href="/wiki/Logtalk" title="Logtalk">Logtalk</a></li>
<li><a href="/wiki/Lua_(programming_language)" title="Lua (programming language)">Lua</a></li>
<li><a href="/wiki/LPC_(programming_language)" title="LPC (programming language)">LPC</a></li>
<li><a href="/wiki/MOO_(programming_language)" title="MOO (programming language)">MOO</a></li>
<li><a href="/wiki/Neko_(programming_language)" title="Neko (programming language)">Neko</a></li>
<li><a href="/wiki/NewtonScript" title="NewtonScript">NewtonScript</a></li>
<li><a href="/wiki/Obliq" title="Obliq">Obliq</a></li>
<li><a href="/wiki/Object_Lisp" title="Object Lisp">Object Lisp</a> by Gary Drescher of <a href="/wiki/Lisp_Machines" title="Lisp Machines">Lisp Machines</a>, Inc., 1985</li>
<li><a href="/wiki/Omega_(programming_language)" title="Omega (programming language)">Omega</a></li>
<li><a href="/wiki/OpenLaszlo" title="OpenLaszlo">OpenLaszlo</a></li>
<li><a href="/wiki/Perl" title="Perl">Perl</a>, with the <a href="http://search.cpan.org/dist/Class-Prototyped/lib/Class/Prototyped.pm" class="external text" title="http://search.cpan.org/dist/Class-Prototyped/lib/Class/Prototyped.pm" rel="nofollow">Class::Prototyped</a> module</li>
<li><a href="/wiki/REBOL" title="REBOL">REBOL</a></li>
<li><a href="/wiki/Self_(programming_language)" title="Self (programming language)">Self</a></li>
<li><a href="/wiki/Slate_(programming_language)" title="Slate (programming language)">Slate</a></li>
<li><a href="/wiki/SmartFrog" title="SmartFrog">SmartFrog</a></li>
<li><a href="/wiki/TADS" title="TADS">TADS</a></li>
<li><a href="/wiki/Tcl" title="Tcl">Tcl</a> with the <a href="/wiki/Snit" title="Snit">snit</a> extension.</li>
</ul>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Prototype-based_programming&amp;action=edit&amp;section=7" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<div class="references-small">
<ol class="references">
<li id="cite_note-0"><b><a href="#cite_ref-0" title="">^</a></b> Section 2.8 (pg.177). Günther Blaschek, <i>Omega: Statically Typed Prototypes</i></li>
<li id="cite_note-1"><b><a href="#cite_ref-1" title="">^</a></b> Section 1.2 (pg.17). Chistophe Dony, Jacques Malenfan, Daniel Bardou, <i>Classifying Prototype-based Programming Languages</i></li>
<li id="cite_note-2"><b><a href="#cite_ref-2" title="">^</a></b> Section 1.1 (pg.14). Antero Taivalsaari, <i>Classes vs. Prototypes: Some Philosophical and Historical Observations</i></li>
<li id="cite_note-3"><b><a href="#cite_ref-3" title="">^</a></b> Antero Taivalsaari. <a href="/w/index.php?title=Kevo&amp;action=edit&amp;redlink=1" class="new" title="Kevo (page does not exist)">Kevo</a>, a prototype-based object-oriented programming language based on concatenation and module operations. Technical Report Report LACIR 92-02, University of Victoria, 1992.</li>
<li id="cite_note-4"><b><a href="#cite_ref-4" title="">^</a></b> <cite style="font-style:normal" class="web"><a href="http://isaacproject.u-strasbg.fr/li_benchs.html" class="external text" title="http://isaacproject.u-strasbg.fr/li_benchs.html" rel="nofollow">"Isaac project benchmarks"</a><span class="printonly">. <a href="http://isaacproject.u-strasbg.fr/li_benchs.html" class="external free" title="http://isaacproject.u-strasbg.fr/li_benchs.html" rel="nofollow">http://isaacproject.u-strasbg.fr/li_benchs.html</a></span><span class="reference-accessdate">. Retrieved on 2007-07-24</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Isaac+project+benchmarks&amp;rft.atitle=&amp;rft_id=http%3A%2F%2Fisaacproject.u-strasbg.fr%2Fli_benchs.html&amp;rfr_id=info:sid/en.wikipedia.org:Prototype-based_programming"><span style="display: none;">&#160;</span></span></li>
</ol>
</div>
<p><a name="Further_reading" id="Further_reading"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Prototype-based_programming&amp;action=edit&amp;section=8" title="Edit section: Further reading">edit</a>]</span> <span class="mw-headline">Further reading</span></h2>
<table class="metadata plainlinks mbox-small" style="border:1px solid #aaa; background-color:#f9f9f9;">
<tr>
<td class="mbox-image"><a href="http://en.wikibooks.org/wiki/Special:Search/Prototype-based_programming" title="b:Special:Search/Prototype-based programming"><img alt="Sister project" src="http://upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/40px-Wikibooks-logo-en-noslogan.svg.png" width="40" height="40" border="0" /></a></td>
<td class="mbox-text" style="">The <a href="/wiki/Wikibooks" title="Wikibooks">Wikibook</a> <i><a href="http://en.wikibooks.org/wiki/Computer_programming" class="extiw" title="wikibooks:Computer programming">Computer programming</a></i> has a page on the topic of
<div style="margin-left:10px;"><i><b><a href="http://en.wikibooks.org/wiki/Computer_programming/Object_oriented_programming" class="extiw" title="wikibooks:Computer programming/Object oriented programming">Object oriented programming</a></b></i></div>
</td>
</tr>
</table>
<ul>
<li><cite style="font-style:normal" class="book" id="CITEREFJames_Noble_.28ed..29.2C_Antero_Taivalsaari_.28ed..29.2C_Ivan_Moore_.28ed..291999">James Noble (ed.), Antero Taivalsaari (ed.), Ivan Moore (ed.), ed (1999). <i>Prototype-Based Programming: Concepts, Languages and Applications</i>. Springer-Verlag. <a href="/wiki/Special:BookSources/9814021253" class="internal">ISBN 981-4021-25-3</a>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Prototype-Based+Programming%3A+Concepts%2C+Languages+and+Applications&amp;rft.date=1999&amp;rft.pub=Springer-Verlag&amp;rft.isbn=981-4021-25-3&amp;rfr_id=info:sid/en.wikipedia.org:Prototype-based_programming"><span style="display: none;">&#160;</span></span></li>
<li><cite style="font-style:normal" class="book" id="CITEREFAbadi.5B.5BLuca_Cardelli.5D.5D"><a href="/wiki/Martin_Abadi" title="Martin Abadi" class="mw-redirect">Abadi, Martin</a>; <a href="/wiki/Luca_Cardelli" title="Luca Cardelli">Luca Cardelli</a>. <i>A Theory of Objects</i>. Springer-Verlag. <a href="/wiki/Special:BookSources/0387947752" class="internal">ISBN 0-387-94775-2</a>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=A+Theory+of+Objects&amp;rft.aulast=Abadi&amp;rft.aufirst=Martin&amp;rft.au=Abadi%2C+Martin&amp;rft.au=%5B%5BLuca+Cardelli%5D%5D&amp;rft.pub=Springer-Verlag&amp;rft.isbn=0-387-94775-2&amp;rfr_id=info:sid/en.wikipedia.org:Prototype-based_programming"><span style="display: none;">&#160;</span></span></li>
<li><a href="http://www.laputan.org/reflection/warfare.html" class="external text" title="http://www.laputan.org/reflection/warfare.html" rel="nofollow">Class Warfare: Classes vs. Prototypes</a>, by Brian Foote</li>
<li><a href="http://web.media.mit.edu/~lieber/Lieberary/OOP/Delegation/Delegation.html" class="external text" title="http://web.media.mit.edu/~lieber/Lieberary/OOP/Delegation/Delegation.html" rel="nofollow">Using Prototypical Objects to Implement Shared Behavior in Object Oriented Systems</a>, by Henry Lieberman, 1986</li>
<li><a href="http://www.forcix.cx/software/prometheus.html" class="external text" title="http://www.forcix.cx/software/prometheus.html" rel="nofollow">Prometheus Object System</a> for <a href="/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme</a></li>
</ul>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Prototype-based_programming&amp;action=edit&amp;section=9" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<ul>
<li><a href="/wiki/Class-based_programming" title="Class-based programming">Class-based programming</a> (contrast)</li>
<li><a href="/wiki/Programming_paradigm" title="Programming paradigm">Programming paradigms</a></li>
<li><a href="/wiki/Differential_inheritance" title="Differential inheritance">Differential inheritance</a></li>
</ul>
<table class="navbox" cellspacing="0" style=";">
<tr>
<td style="padding:2px;">
<table cellspacing="0" class="nowraplinks collapsible autocollapse" style="width:100%;background:transparent;color:inherit;;">
<tr>
<th style=";" colspan="2" class="navbox-title">
<div style="float:left; width:6em;text-align:left;">
<div class="noprint plainlinksneverexpand navbar" style="background:none; padding:0; font-weight:normal;;;border:none;; font-size:xx-small;"><a href="/wiki/Template:Programming_language" title="Template:Programming language"><span title="View this template" style=";;border:none;">v</span></a>&#160;<span style="font-size:80%;">•</span>&#160;<a href="/wiki/Template_talk:Programming_language" title="Template talk:Programming language"><span title="Discussion about this template" style=";;border:none;">d</span></a>&#160;<span style="font-size:80%;">•</span>&#160;<a href="http://en.wikipedia.org/w/index.php?title=Template:Programming_language&amp;action=edit" class="external text" title="http://en.wikipedia.org/w/index.php?title=Template:Programming_language&amp;action=edit" rel="nofollow"><span title="Edit this template" style=";;border:none;;">e</span></a></div>
</div>
<span style="font-size:110%;"><a href="/wiki/Programming_paradigm" title="Programming paradigm">Types of programming languages</a></span></th>
</tr>
<tr style="height:2px;">
<td></td>
</tr>
<tr>
<td colspan="2" style="width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<div style="padding:0em 0.25em"><a href="/wiki/Array_programming" title="Array programming">Array</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Aspect-oriented_programming" title="Aspect-oriented programming">Aspect-oriented</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Assembly_language" title="Assembly language">Assembly</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Class-based_programming" title="Class-based programming">Class-based</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Compiled_language" title="Compiled language">Compiled</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Concurrent_computing" title="Concurrent computing">Concurrent</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Curly_bracket_programming_language" title="Curly bracket programming language">Curly bracket</a><span style="font-weight:bold;">&#160;·</span> <a href="/w/index.php?title=Data-oriented_language&amp;action=edit&amp;redlink=1" class="new" title="Data-oriented language (page does not exist)">Data-oriented</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Data-structured_language" title="Data-structured language">Data-structured</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Dataflow_programming" title="Dataflow programming">Dataflow</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Declarative_programming" title="Declarative programming">Declarative</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Domain-specific_programming_language" title="Domain-specific programming language" class="mw-redirect">Domain-specific</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Dynamic_programming_language" title="Dynamic programming language">Dynamic</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Esoteric_programming_language" title="Esoteric programming language">Esoteric</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Event-driven_programming" title="Event-driven programming">Event-driven</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Extensible_programming" title="Extensible programming">Extensible</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Functional_programming" title="Functional programming">Functional</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/High-level_programming_language" title="High-level programming language">High-level</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Imperative_programming" title="Imperative programming">Imperative</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Interpreted_language" title="Interpreted language">Interpreted</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Logic_programming" title="Logic programming">Logic</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Low-level_programming_language" title="Low-level programming language">Low-level</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Machine_code" title="Machine code">Machine</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Macro_(computer_science)" title="Macro (computer science)">Macro</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Metaprogramming" title="Metaprogramming">Metaprogramming</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Multi-paradigm_programming_language" title="Multi-paradigm programming language">Multi-paradigm</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Non-English-based_programming_languages" title="Non-English-based programming languages">Non-English-based</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Object-oriented_programming_language" title="Object-oriented programming language">Object-oriented</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Off-side_rule" title="Off-side rule">Off-side rule</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Pipeline_programming" title="Pipeline programming">Pipeline</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Procedural_programming" title="Procedural programming">Procedural</a><span style="font-weight:bold;">&#160;·</span> <strong class="selflink">Prototype-based</strong><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Reflection_(computer_science)" title="Reflection (computer science)">Reflective</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Rule-based_language" title="Rule-based language" class="mw-redirect">Rule-based</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Scripting_language" title="Scripting language">Scripting</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Synchronous_programming_language" title="Synchronous programming language">Synchronous</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Visual_programming_language" title="Visual programming language">Visual</a></div>
</td>
</tr>
</table>
</td>
</tr>
</table>


<!-- 
NewPP limit report
Preprocessor node count: 1984/1000000
Post-expand include size: 31370/2048000 bytes
Template argument size: 10508/2048000 bytes
Expensive parser function count: 0/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:61003-0!1!0!default!!en!2 and timestamp 20090417033356 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Prototype-based_programming">http://en.wikipedia.org/wiki/Prototype-based_programming</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Programming_paradigms" title="Category:Programming paradigms">Programming paradigms</a></span> | <span dir='ltr'><a href="/wiki/Category:Object-oriented_programming" title="Category:Object-oriented programming">Object-oriented programming</a></span> | <span dir='ltr'><a href="/wiki/Category:Type_theory" title="Category:Type theory">Type theory</a></span> | <span dir='ltr'><a href="/wiki/Category:Prototype-based_programming_languages" title="Category:Prototype-based programming languages">Prototype-based programming languages</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Prototype-based_programming" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Prototype-based_programming" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Prototype-based_programming&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Prototype-based_programming&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Prototype-based_programming" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Prototype-based_programming" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Prototype-based_programming" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Prototype-based_programming&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Prototype-based_programming&amp;oldid=277949945" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Prototype-based_programming&amp;id=277949945">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/Prototypenbasierte_Programmierung">Deutsch</a></li>
				<li class="interwiki-es"><a href="http://es.wikipedia.org/wiki/Programaci%C3%B3n_basada_en_prototipos">Español</a></li>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Programmation_orient%C3%A9e_prototype">Français</a></li>
				<li class="interwiki-ko"><a href="http://ko.wikipedia.org/wiki/%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85_%EA%B8%B0%EB%B0%98_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D">한국어</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/%E3%83%97%E3%83%AD%E3%83%88%E3%82%BF%E3%82%A4%E3%83%97%E3%83%99%E3%83%BC%E3%82%B9">日本語</a></li>
				<li class="interwiki-ru"><a href="http://ru.wikipedia.org/wiki/%D0%9F%D1%80%D0%BE%D1%82%D0%BE%D1%82%D0%B8%D0%BF%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5">Русский</a></li>
				<li class="interwiki-th"><a href="http://th.wikipedia.org/wiki/%E0%B8%81%E0%B8%B2%E0%B8%A3%E0%B9%80%E0%B8%82%E0%B8%B5%E0%B8%A2%E0%B8%99%E0%B9%82%E0%B8%9B%E0%B8%A3%E0%B9%81%E0%B8%81%E0%B8%A3%E0%B8%A1%E0%B9%81%E0%B8%9A%E0%B8%9A%E0%B9%82%E0%B8%9E%E0%B8%A3%E0%B9%82%E0%B8%97%E0%B9%84%E0%B8%97%E0%B8%9B%E0%B9%8C">ไทย</a></li>
				<li class="interwiki-tr"><a href="http://tr.wikipedia.org/wiki/Prototip-tabanl%C4%B1_programlama">Türkçe</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 17 March 2009, at 20:56 (UTC).</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv136 in 0.072 secs. --></body></html>
