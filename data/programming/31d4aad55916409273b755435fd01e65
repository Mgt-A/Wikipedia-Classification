<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Objective-C,Wikipedia articles needing copy edit from August 2008,Articles with unsourced statements since February 2007,Articles with unsourced statements since December 2008,C libraries,C programming language,Special:Search/Objective-C,2006,Adapter pattern,Apple Inc.,August 22" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Objective-C&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Objective-C&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Objective-C - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Objective-C";
		var wgTitle = "Objective-C";
		var wgAction = "view";
		var wgArticleId = "22802";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 279425290;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
<style type="text/css">/*<![CDATA[*/
.source-cpp {line-height: normal;}
.source-cpp li, .source-cpp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for cpp
 * CSS class: source-cpp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-cpp .de1, .source-cpp .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-cpp  {}
.source-cpp .head {}
.source-cpp .foot {}
.source-cpp .imp {font-weight: bold; color: red;}
.source-cpp .ln-xtra {color: #cc0; background-color: #ffc;}
.source-cpp li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-cpp li.li2 {font-weight: bold;}
.source-cpp .kw1 {color: #0000ff;}
.source-cpp .kw2 {color: #0000ff;}
.source-cpp .kw3 {color: #0000dd;}
.source-cpp .kw4 {color: #0000ff;}
.source-cpp .co1 {color: #ff0000;}
.source-cpp .co2 {color: #339900;}
.source-cpp .coMULTI {color: #ff0000; font-style: italic;}
.source-cpp .es0 {color: #666666; font-weight: bold;}
.source-cpp .br0 {color: #000000;}
.source-cpp .st0 {color: #666666;}
.source-cpp .nu0 {color: #0000dd;}
.source-cpp .me1 {color: #00eeff;}
.source-cpp .me2 {color: #00eeff;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-objc {line-height: normal;}
.source-objc li, .source-objc pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for objc
 * CSS class: source-objc, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-objc .de1, .source-objc .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-objc  {}
.source-objc .head {}
.source-objc .foot {}
.source-objc .imp {font-weight: bold; color: red;}
.source-objc .ln-xtra {color: #cc0; background-color: #ffc;}
.source-objc li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-objc li.li2 {font-weight: bold;}
.source-objc .kw1 {color: #0000ff;}
.source-objc .kw2 {color: #0000ff;}
.source-objc .kw3 {color: #0000dd;}
.source-objc .kw4 {color: #0000ff;}
.source-objc .kw5 {color: #0000ff;}
.source-objc .kw6 {color: #0000ff;}
.source-objc .co1 {color: #ff0000;}
.source-objc .co2 {color: #339900;}
.source-objc .coMULTI {color: #ff0000; font-style: italic;}
.source-objc .es0 {color: #666666; font-weight: bold;}
.source-objc .br0 {color: #002200;}
.source-objc .st0 {color: #666666;}
.source-objc .nu0 {color: #0000dd;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-c .de1, .source-c .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-c  {}
.source-c .head {}
.source-c .foot {}
.source-c .imp {font-weight: bold; color: red;}
.source-c .ln-xtra {color: #cc0; background-color: #ffc;}
.source-c li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-c li.li2 {font-weight: bold;}
.source-c .kw1 {color: #b1b100;}
.source-c .kw2 {color: #000000; font-weight: bold;}
.source-c .kw3 {color: #000066;}
.source-c .kw4 {color: #993333;}
.source-c .co1 {color: #808080; font-style: italic;}
.source-c .co2 {color: #339933;}
.source-c .coMULTI {color: #808080; font-style: italic;}
.source-c .es0 {color: #000099; font-weight: bold;}
.source-c .br0 {color: #66cc66;}
.source-c .st0 {color: #ff0000;}
.source-c .nu0 {color: #cc66cc;}
.source-c .me1 {color: #202020;}
.source-c .me2 {color: #202020;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style>		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Objective-C skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Objective-C</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<table class="metadata plainlinks ambox ambox-style" style="">
<tr>
<td class="mbox-image">
<div style="width: 52px;"><a href="/wiki/File:Acap.svg" class="image" title="Acap.svg"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/5/52/Acap.svg/36px-Acap.svg.png" width="36" height="40" border="0" /></a></div>
</td>
<td class="mbox-text" style="">This article <b>may require <a href="/wiki/Wikipedia:How_to_copy-edit" title="Wikipedia:How to copy-edit">copy-editing</a> for grammar, style, cohesion, tone or spelling</b>. You can assist by <a href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;action=edit" class="external text" title="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;action=edit" rel="nofollow">editing it</a> now. A how-to <a href="/wiki/Wikipedia:How_to_copy-edit" title="Wikipedia:How to copy-edit">guide</a> is available.<small><i>&#160;(August 2008)</i></small></td>
</tr>
</table>
<table class="infobox vevent" cellspacing="5" style="width: 22em; text-align: left; font-size: 88%; line-height: 1.5em;">
<caption class="summary" style="font-size: 125%; font-weight: bold;">Objective-C</caption>
<tr>
<th style=""><a href="/wiki/Programming_paradigm" title="Programming paradigm">Paradigm</a></th>
<td class="" style=""><a href="/wiki/Reflection_(computer_science)" title="Reflection (computer science)">reflective</a>, <a href="/wiki/Object-oriented_programming" title="Object-oriented programming">object oriented</a></td>
</tr>
<tr>
<th style="">Appeared in</th>
<td class="" style="">1986</td>
</tr>
<tr>
<th style="">Designed by</th>
<td class="organiser" style=""><a href="/wiki/Brad_Cox" title="Brad Cox">Brad Cox</a> and <a href="/w/index.php?title=Tom_Love&amp;action=edit&amp;redlink=1" class="new" title="Tom Love (page does not exist)">Tom Love</a></td>
</tr>
<tr>
<th style=""><a href="/wiki/Software_developer" title="Software developer">Developer</a></th>
<td class="" style=""><a href="/wiki/Apple_Inc." title="Apple Inc.">Apple Inc.</a></td>
</tr>
<tr>
<th style=""><a href="/wiki/Type_system" title="Type system">Typing discipline</a></th>
<td class="" style=""><a href="/wiki/Duck_typing" title="Duck typing">duck</a>, <a href="/wiki/Static_typing" title="Static typing" class="mw-redirect">static</a>, <a href="/wiki/Weak_typing" title="Weak typing">weak</a></td>
</tr>
<tr>
<th style=""><a href="/wiki/Programming_language_implementation" title="Programming language implementation">Major implementations</a></th>
<td class="" style=""><a href="/wiki/GNU_Compiler_Collection" title="GNU Compiler Collection">gcc</a>, <a href="/wiki/Apple_Inc." title="Apple Inc.">Apple</a></td>
</tr>
<tr>
<th style="">Influenced by</th>
<td class="" style=""><a href="/wiki/Smalltalk" title="Smalltalk">Smalltalk</a>, <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a></td>
</tr>
<tr>
<th style="">Influenced</th>
<td class="" style=""><a href="/wiki/TOM_(object-oriented_programming_language)" title="TOM (object-oriented programming language)">TOM</a>, <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a>, <a href="/wiki/Objective-J" title="Objective-J">Objective-J</a></td>
</tr>
</table>
<p><b>Objective-C</b> is a <a href="/wiki/Reflection_(computer_science)" title="Reflection (computer science)">reflective</a>, <a href="/wiki/Object-oriented_programming" title="Object-oriented programming">object-oriented</a> <a href="/wiki/Programming_language" title="Programming language">programming language</a> which adds <a href="/wiki/Smalltalk" title="Smalltalk">Smalltalk</a>-style <a href="/wiki/Message_passing" title="Message passing">messaging</a> to <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a>.</p>
<p>Today it is used primarily on <a href="/wiki/Mac_OS_X" title="Mac OS X">Mac OS X</a>, <a href="/wiki/IPhone_OS" title="IPhone OS">iPhone OS</a>, and <a href="/wiki/GNUstep" title="GNUstep">GNUstep</a>, three environments based on the <a href="/wiki/OpenStep" title="OpenStep">OpenStep</a> standard, and is the primary language used for the <a href="/wiki/NEXTSTEP" title="NEXTSTEP" class="mw-redirect">NeXTSTEP</a>, <a href="/wiki/OpenStep#OPENSTEP" title="OpenStep">OPENSTEP</a>, and <a href="/wiki/Cocoa_(API)" title="Cocoa (API)">Cocoa</a> application frameworks. Generic Objective-C programs which do not make use of these libraries can also be compiled for any system supported by <a href="/wiki/GNU_Compiler_Collection" title="GNU Compiler Collection">gcc</a>, which includes an Objective-C compiler.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#History"><span class="tocnumber">1</span> <span class="toctext">History</span></a>
<ul>
<li class="toclevel-2"><a href="#Popularization_through_NeXT"><span class="tocnumber">1.1</span> <span class="toctext">Popularization through NeXT</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Syntax"><span class="tocnumber">2</span> <span class="toctext">Syntax</span></a>
<ul>
<li class="toclevel-2"><a href="#Messages"><span class="tocnumber">2.1</span> <span class="toctext">Messages</span></a></li>
<li class="toclevel-2"><a href="#Interfaces_and_implementations"><span class="tocnumber">2.2</span> <span class="toctext">Interfaces and implementations</span></a>
<ul>
<li class="toclevel-3"><a href="#Interface"><span class="tocnumber">2.2.1</span> <span class="toctext">Interface</span></a></li>
<li class="toclevel-3"><a href="#Implementation"><span class="tocnumber">2.2.2</span> <span class="toctext">Implementation</span></a></li>
<li class="toclevel-3"><a href="#Instantiation"><span class="tocnumber">2.2.3</span> <span class="toctext">Instantiation</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#Protocols"><span class="tocnumber">2.3</span> <span class="toctext">Protocols</span></a></li>
<li class="toclevel-2"><a href="#Dynamic_typing"><span class="tocnumber">2.4</span> <span class="toctext">Dynamic typing</span></a></li>
<li class="toclevel-2"><a href="#Forwarding"><span class="tocnumber">2.5</span> <span class="toctext">Forwarding</span></a>
<ul>
<li class="toclevel-3"><a href="#Example"><span class="tocnumber">2.5.1</span> <span class="toctext">Example</span></a></li>
<li class="toclevel-3"><a href="#Notes"><span class="tocnumber">2.5.2</span> <span class="toctext">Notes</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#Categories"><span class="tocnumber">2.6</span> <span class="toctext">Categories</span></a>
<ul>
<li class="toclevel-3"><a href="#Example_usage_of_categories"><span class="tocnumber">2.6.1</span> <span class="toctext">Example usage of categories</span></a></li>
<li class="toclevel-3"><a href="#Notes_2"><span class="tocnumber">2.6.2</span> <span class="toctext">Notes</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#Posing"><span class="tocnumber">2.7</span> <span class="toctext">Posing</span></a></li>
<li class="toclevel-2"><a href="#.23import"><span class="tocnumber">2.8</span> <span class="toctext">#import</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Other_features"><span class="tocnumber">3</span> <span class="toctext">Other features</span></a></li>
<li class="toclevel-1"><a href="#Language_variants"><span class="tocnumber">4</span> <span class="toctext">Language variants</span></a>
<ul>
<li class="toclevel-2"><a href="#Objective-C.2B.2B"><span class="tocnumber">4.1</span> <span class="toctext">Objective-C++</span></a></li>
<li class="toclevel-2"><a href="#Objective-C_2.0"><span class="tocnumber">4.2</span> <span class="toctext">Objective-C 2.0</span></a>
<ul>
<li class="toclevel-3"><a href="#Garbage_collection"><span class="tocnumber">4.2.1</span> <span class="toctext">Garbage collection</span></a></li>
<li class="toclevel-3"><a href="#Properties"><span class="tocnumber">4.2.2</span> <span class="toctext">Properties</span></a></li>
<li class="toclevel-3"><a href="#Fast_enumeration"><span class="tocnumber">4.2.3</span> <span class="toctext">Fast enumeration</span></a></li>
<li class="toclevel-3"><a href="#Implications_for_Cocoa_development"><span class="tocnumber">4.2.4</span> <span class="toctext">Implications for Cocoa development</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-1"><a href="#Today"><span class="tocnumber">5</span> <span class="toctext">Today</span></a>
<ul>
<li class="toclevel-2"><a href="#Portable_Object_Compiler"><span class="tocnumber">5.1</span> <span class="toctext">Portable Object Compiler</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Analysis_of_the_language"><span class="tocnumber">6</span> <span class="toctext">Analysis of the language</span></a>
<ul>
<li class="toclevel-2"><a href="#Philosophical_differences_between_Objective-C_and_C.2B.2B"><span class="tocnumber">6.1</span> <span class="toctext">Philosophical differences between Objective-C and C++</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">7</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#Notes_3"><span class="tocnumber">8</span> <span class="toctext">Notes</span></a></li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">9</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">10</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="History" id="History"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=1" title="Edit section: History">edit</a>]</span> <span class="mw-headline">History</span></h2>
<p>In the early 1980s, common <a href="/wiki/Software_engineering" title="Software engineering">software engineering</a> practice was based on <a href="/wiki/Structured_programming" title="Structured programming">structured programming</a>. Structured programming was implemented in order to help "break down" programs into smaller parts, primarily to make them easier to work on as they grew increasingly large. However, as the problems being solved grew in size, structured programming became less useful as more and more procedures had to be written, leading to complex control structures and a low level of code reuse.</p>
<p>Many saw <a href="/wiki/Object-oriented_programming" title="Object-oriented programming">object-oriented programming</a> as a potential solution to the problem. In fact, <a href="/wiki/Smalltalk" title="Smalltalk">Smalltalk</a> had already addressed many of these engineering issues; some of the most complex systems in the world were Smalltalk environments.<sup class="noprint Template-Fact"><span title="This claim needs references to reliable sources&#160;since February 2007" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</span></sup> On the downside, Smalltalk used a <a href="/wiki/Virtual_machine" title="Virtual machine">virtual machine</a>. The virtual machine interpreted an object memory called an image, containing all development tools. The Smalltalk image was very large and tended to require huge amounts of <a href="/wiki/Memory_(computers)" title="Memory (computers)" class="mw-redirect">memory</a> for the time and ran very slowly, partly due to the lack of useful hardware VM/container support.</p>
<p>Objective-C was created primarily by <a href="/wiki/Brad_Cox" title="Brad Cox">Brad Cox</a> and Tom Love in the early 1980s at their company <a href="/wiki/Stepstone" title="Stepstone">Stepstone</a>. Both had been introduced to Smalltalk while at <a href="/wiki/ITT_Corporation" title="ITT Corporation">ITT</a>’s Programming Technology Center in 1981. Cox had become interested in the problems of true reusability in <a href="/wiki/Software_engineering" title="Software engineering">software design</a> and programming. He realized that a language like Smalltalk would be invaluable in building powerful development environments for system developers at ITT. Cox began by modifying the C compiler to add some of the capabilities of Smalltalk. He soon had a working implementation of an object-oriented extension to the C language which he called "OOPC" for Object-Oriented Programming in C. Love, meanwhile, was hired by Schlumberger Research in 1982 and had the opportunity to acquire the first commercial copy of Smalltalk-80, which further influenced development of their brainchild.</p>
<p>In order to demonstrate that real progress could be made, Cox showed that making interchangeable <a href="/wiki/Software_component" title="Software component" class="mw-redirect">software components</a> really needed only a few practical changes to existing tools. Specifically, they needed to support objects in a flexible manner, come supplied with a usable set of libraries, and allow for the code (and any resources needed by the code) to be bundled into a single cross-platform format.</p>
<p>Love and Cox eventually formed a new venture, <a href="/wiki/Stepstone" title="Stepstone">Productivity Products International (PPI)</a>, to commercialize their product, which coupled an Objective-C compiler with powerful class libraries.</p>
<p>In 1986, Cox published the main description of Objective-C in its original form in the book <i>Object-Oriented Programming, An Evolutionary Approach</i>. Although he was careful to point out that there is more to the problem of reusability than just the language, Objective-C often found itself compared feature for feature with other languages.</p>
<p><a name="Popularization_through_NeXT" id="Popularization_through_NeXT"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=2" title="Edit section: Popularization through NeXT">edit</a>]</span> <span class="mw-headline">Popularization through NeXT</span></h3>
<p>In 1988, <a href="/wiki/NeXT" title="NeXT">NeXT</a>, the company started by <a href="/wiki/Steve_Jobs" title="Steve Jobs">Steve Jobs</a> after he left Apple, licensed Objective-C from StepStone (the owner of the Objective-C trademark) and released their own Objective-C compiler and libraries on which the <a href="/wiki/NeXTstep" title="NeXTstep" class="mw-redirect">NeXTstep</a> user interface and interface builder were based. Although the NeXT workstations failed to make much of an impact in the marketplace, the tools were widely lauded in the industry. This led NeXT to drop hardware production and focus on software tools, selling NeXTstep (and OpenStep) as a platform for custom programming.</p>
<p>The GNU project started work on their free clone of NeXTStep, named <a href="/wiki/GNUstep" title="GNUstep">GNUstep</a>, based on the <a href="/wiki/OpenStep" title="OpenStep">OpenStep</a> standard. Dennis Glatting wrote the first gnu-objc <a href="/wiki/Runtime" title="Runtime">runtime</a> in 1992. The GNU Objective-C runtime which has been in use since 1993 is the one developed by Kresten Krab Thorup when he was a university student in Denmark. Kresten also worked at NeXT from 1993 to 1996.</p>
<p>After acquiring NeXT in 1996, <a href="/wiki/Apple_Inc." title="Apple Inc.">Apple</a> used OpenStep in its new operating system, <a href="/wiki/Mac_OS_X" title="Mac OS X">Mac OS X</a>. This included Objective-C and NeXT's Objective-C based developer tool, <a href="/wiki/Xcode" title="Xcode">Project Builder</a> (later replaced by <a href="/wiki/Xcode" title="Xcode">Xcode</a>), as well as its interface design tool, <a href="/wiki/Interface_Builder" title="Interface Builder">Interface Builder</a>. Most of Apple's present-day <a href="/wiki/Cocoa_(API)" title="Cocoa (API)">Cocoa API</a> is based on OpenStep interface objects, and is the most significant Objective-C environment being used for active development.</p>
<p><a name="Syntax" id="Syntax"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=3" title="Edit section: Syntax">edit</a>]</span> <span class="mw-headline">Syntax</span></h2>
<p>Objective-C is a very thin layer on top of C. Objective-C is a <i>strict</i> <a href="/wiki/Superset" title="Superset" class="mw-redirect">superset</a> of C. That is, it is possible to compile any C program with an Objective-C compiler. Objective-C derives its syntax from both C and Smalltalk. Most of the syntax (including preprocessing, expressions, function declarations, and function calls) is inherited from C, while the syntax for object-oriented features was created to enable Smalltalk-style messaging.</p>
<p><a name="Messages" id="Messages"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=4" title="Edit section: Messages">edit</a>]</span> <span class="mw-headline">Messages</span></h3>
<p>Objective-C syntax offers alternatives to a few "<a href="/wiki/Kludge" title="Kludge">kludges</a>" in C syntax but more importantly supports <a href="/wiki/Object-oriented_programming" title="Object-oriented programming">object-oriented programming</a> (OOP). The Objective-C model of object-oriented programming is based on sending <a href="/wiki/Message_passing" title="Message passing">messages</a> to sovereign (even self-correcting) objects. This is unlike the <a href="/wiki/Simula" title="Simula">Simula</a>-style programming model used by <a href="/wiki/C%2B%2B" title="C++">C++</a> and this distinction is semantically important. The basic difference is that in Objective-C one does not <i>call a method</i>; one <i>sends a message</i>. In Objective-C the "receiver" of a message can opt to refuse it. Both styles carry their own strengths and weaknesses. Simula-style OOP allows multiple inheritance and faster execution by using compile-time binding whenever possible but does not support dynamic binding by default. It also forces all methods to have a corresponding implementation unless they are virtual (an implementation is still required for the method to be called). Smalltalk-style OOP allows messages to go unimplemented and is <a href="/wiki/Dynamic_binding" title="Dynamic binding">dynamically bound</a>, but in some cases runs slower and some programmers (especially ones from Simula based languages) feel that it is a hassle to debug.<sup class="noprint Template-Fact"><span title="This claim needs references to reliable sources&#160;since December 2008" style="white-space: nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed">citation needed</a></i>]</span></sup></p>
<p>An object with method <tt>method</tt> is said to "respond" to the message <tt>method</tt>. Sending the message <tt>method</tt> to the object pointed to by the pointer <tt>obj</tt> would require the following code in C++:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
obj-&gt;method<span class="br0">(</span>parameter<span class="br0">)</span>;
</pre></div>
<p>which in Objective-C is written as follows:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-objc">
<span class="br0">[</span>obj method:parameter<span class="br0">]</span>;
</pre></div>
<p>This mechanism allows messages to be sent to an object defined first at runtime — something <a href="/wiki/Dynamic_typing#Static_and_dynamic_typing" title="Dynamic typing" class="mw-redirect">statically typed</a> languages such as C++ are incapable of per the current standards for such languages. C++ will be able to support messaging per ANSI Standard if the <a href="/wiki/Boost_library" title="Boost library" class="mw-redirect">Boost library</a> is standardized. <a href="/wiki/Qt_(toolkit)" title="Qt (toolkit)">Qt</a> provides this capability to C++ and other languages (but Objective-C is poorly supported) by adding the "connect" function as well as a large array of classes that afford and support this functionality. (See the <a href="#Dynamic_typing" title="">dynamic typing</a> section below for more advantages of dynamic (late) binding).</p>
<p>Objective-C has a few features in message-passing that relate to how it handles OOP. Objective-C messages do not need to execute because they are dynamically bound. If a message is implemented by an object, it will execute. If not, it will not execute, yet the code will still compile and run. So for example, every object is sent an "awakeFromNib" message, but those objects don't necessarily have to implement "awakeFromNib" to compile – if an object does implement "awakeFromNib", then that code will be executed when the message is sent, otherwise the message is ignored. Messages can also be sent to the object that implements them or to the <a href="/wiki/Superclass" title="Superclass">superclass</a> that an object is derived from. These can be accessed using the "self" and "super" object pointers. Also, messages can be sent to <a href="/wiki/Nil" title="Nil">nil</a> objects.</p>
<p><a name="Interfaces_and_implementations" id="Interfaces_and_implementations"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=5" title="Edit section: Interfaces and implementations">edit</a>]</span> <span class="mw-headline">Interfaces and implementations</span></h3>
<p>Objective-C requires the interface and implementation of a class be in separately declared code blocks. By convention, the interface is put in a header file and the implementation in a code file; the header files, normally suffixed .h, are similar to C header files; the implementation (method) files, normally suffixed .m, can be very similar to C code files.</p>
<p><a name="Interface" id="Interface"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=6" title="Edit section: Interface">edit</a>]</span> <span class="mw-headline">Interface</span></h4>
<p>The interface of the class is usually defined in a header file. A common convention is to name the header file after the name of the class. The interface for class <tt>Class</tt> would thus be found in the file <tt>Class.h</tt>.</p>
<p>The interface declaration of the form:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-objc">
<span class="kw4">@interface</span> classname : superclassname <span class="br0">{</span>
    <span class="co1">// instance variables</span>
<span class="br0">}</span>
+classMethod1;
+<span class="br0">(</span>return_type<span class="br0">)</span>classMethod2;
+<span class="br0">(</span>return_type<span class="br0">)</span>classMethod3:<span class="br0">(</span>param1_type<span class="br0">)</span>parameter_varName;
 
-<span class="br0">(</span>return_type<span class="br0">)</span>instanceMethod1:<span class="br0">(</span>param1_type<span class="br0">)</span>param1_varName :<span class="br0">(</span>param2_type<span class="br0">)</span>param2_varName;
-<span class="br0">(</span>return_type<span class="br0">)</span>instanceMethod2WithParameter:<span class="br0">(</span>param1_type<span class="br0">)</span>param1_varName andOtherParameter:<span class="br0">(</span>param2_type<span class="br0">)</span>param2_varName;
<span class="kw4">@end</span>
</pre></div>
<p>Plus signs denote <a href="/wiki/Class_method" title="Class method" class="mw-redirect">class methods</a>, minus signs denote <a href="/wiki/Instance_method" title="Instance method" class="mw-redirect">instance methods</a>. Class methods have no access to instance variables.</p>
<p>If you are translating from C++/C97 the above code is somewhat equivalent to:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
<span class="kw4">struct</span> classname : superclassname <span class="br0">{</span>
  <span class="co1">// instance variables</span>
 
  <span class="co1">// Class (static) functions</span>
  <span class="kw4">static</span> <span class="kw4">void</span> classMethod1<span class="br0">(</span><span class="br0">)</span>;
  <span class="kw4">static</span> return_type classMethod2<span class="br0">(</span><span class="br0">)</span>;
  <span class="kw4">static</span> return_type classMethod3<span class="br0">(</span>param1_type parameter_varName<span class="br0">)</span>;
 
  <span class="co1">// Instance (member) functions</span>
  return_type instanceMethod1<span class="br0">(</span>param1_type param1_varName, param2_type param2_varName<span class="br0">)</span>;
  return_type instanceMethod2WithParameter<span class="br0">(</span>param1_type param1_varName, param2_type param2_varName=<span class="kw1">default</span><span class="br0">)</span>;
<span class="br0">}</span>;
</pre></div>
<p>Note that instanceMethod2 demonstrates Objective C's named parameter capability for which there is no direct equivalent in C/C++.</p>
<p>Return types can be any standard C type, a pointer to a generic Objective-C object, or a pointer to a specific type of object such as NSArray *, NSImage *, or NSString *. The default return type is the generic Objective-C type <tt>id</tt>.</p>
<p>Method arguments begin with a colon followed by the expected argument type in parentheses followed by the argument name. In some cases (e.g. when writing system APIs) it is useful to add descriptive text before each parameter.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-objc">
-<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span> setRange:<span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span>start :<span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span>end;
-<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span> importDocumentWithName:<span class="br0">(</span><span class="kw5">NSString</span> *<span class="br0">)</span>name withSpecifiedPreferences:<span class="br0">(</span>Preferences *<span class="br0">)</span>prefs beforePage:<span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span>insertPage;
</pre></div>
<p><a name="Implementation" id="Implementation"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=7" title="Edit section: Implementation">edit</a>]</span> <span class="mw-headline">Implementation</span></h4>
<p>The interface only declares the class interface and not the methods themselves; the actual code is written in the implementation. Implementation (method) files normally have the file extension .m.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-objc">
<span class="kw4">@implementation</span> classname
+classMethod <span class="br0">{</span>
    <span class="co1">// implementation</span>
<span class="br0">}</span>
-instanceMethod <span class="br0">{</span>
    <span class="co1">// implementation</span>
<span class="br0">}</span>
<span class="kw4">@end</span>
</pre></div>
<p>Methods are written as with their interface declarations. Comparing Objective-C and C:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-objc">
-<span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span>method:<span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span>i <span class="br0">{</span>
    <span class="kw1">return</span> <span class="br0">[</span>self square_root: i<span class="br0">]</span>;
<span class="br0">}</span>
</pre></div>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">int</span> <span class="kw2">function</span><span class="br0">(</span><span class="kw4">int</span> i<span class="br0">)</span> <span class="br0">{</span>
    <span class="kw1">return</span> square_root<span class="br0">(</span>i<span class="br0">)</span>;
<span class="br0">}</span>
</pre></div>
<p>The syntax allows pseudo-<a href="/wiki/Named_parameter" title="Named parameter">naming of arguments</a>.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-objc">
-<span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span>changeColorToRed:<span class="br0">(</span><span class="kw4">float</span><span class="br0">)</span>red green:<span class="br0">(</span><span class="kw4">float</span><span class="br0">)</span>green blue:<span class="br0">(</span><span class="kw4">float</span><span class="br0">)</span>blue
 
<span class="br0">[</span>myColor changeColorToRed:<span class="nu0">5.0</span> green:<span class="nu0">2.0</span> blue:<span class="nu0">6.0</span><span class="br0">]</span>;
</pre></div>
<p>Internal representations of this method vary between different implementations of Objective-C. If myColor is of the class <tt>Color</tt>, internally, instance method <tt>-changeColorToRed:green:blue:</tt> might be labeled <tt>_i_Color_changeColorToRed_green_blue</tt>. The <tt>i</tt> is to refer to an instance method, with the class and then method names appended, colons translated to underscores. As the order of parameters is part of the method name, it cannot be changed to suit coding style or expression as in true named parameters.</p>
<p>However, internal names of the function are rarely used directly, and generally messages are converted to function calls defined in the Objective-C runtime library – it's not necessarily known at link time which method will be called: the class of the receiver (the object being sent the message) need not be known until runtime.</p>
<p><a name="Instantiation" id="Instantiation"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=8" title="Edit section: Instantiation">edit</a>]</span> <span class="mw-headline">Instantiation</span></h4>
<p>Once an Objective-C class is written, it can be instantiated. This is done by first allocating the memory for a new object and then by initializing it. An object isn't fully functional until both steps have been completed. These steps are typically accomplished with a single line of code:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-objc">
MyObject * o = <span class="br0">[</span><span class="br0">[</span>MyObject alloc<span class="br0">]</span> init<span class="br0">]</span>;
</pre></div>
<p>The alloc call allocates enough memory to hold all the instance variables for an object, and the init call can be overridden to set instance variables to specific values on creation. The init method is often written as follows:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-objc">
-<span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span> init <span class="br0">{</span>
    self = <span class="br0">[</span>super init<span class="br0">]</span>;
    <span class="kw1">if</span> <span class="br0">(</span>self<span class="br0">)</span> <span class="br0">{</span>
        ivar1 = value1;
        ivar2 = value2;
        .
        .
        .
    <span class="br0">}</span>
    <span class="kw1">return</span> self;
<span class="br0">}</span>
</pre></div>
<p><a name="Protocols" id="Protocols"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=9" title="Edit section: Protocols">edit</a>]</span> <span class="mw-headline">Protocols</span></h3>
<p>Objective-C was extended at <a href="/wiki/NeXT" title="NeXT">NeXT</a> to introduce the concept of <a href="/wiki/Multiple_inheritance" title="Multiple inheritance">multiple inheritance</a> of specification, but not implementation, through the introduction of protocols. This is a pattern achievable either as an abstract multiply-inherited base class in C++, or as an "interface" (as in Java and C#). Objective-C makes use of ad-hoc protocols, called <i>informal protocols</i>, and compiler enforced protocols called <i>formal protocols</i>.</p>
<p>An informal protocol is a list of methods which a class can implement. It is specified in the documentation, since it has no presence in the language. Informal protocols often include optional methods, where implementing the method can change the behavior of a class. For example, a text field class might have a delegate which should implement an informal protocol with an optional autocomplete method. The text field discovers whether the delegate implements that method (via <a href="/wiki/Reflection_(computer_science)" title="Reflection (computer science)">reflection</a>), and, if so, calls it to support autocomplete.</p>
<p>A formal protocol is similar to an interface in Java or C#. It is a list of methods which any class can declare itself to implement. Versions of Objective-C before 2.0 required that a class must implement all methods in a protocol it declares itself as adopting; the compiler will emit an error if the class does not implement every method of its declared protocols. However, Objective-C 2.0 added support for marking certain methods in a protocol optional; the compiler will not enforce that such methods are implemented.</p>
<p>The Objective-C concept of protocols is different from the Java or C# concept of interfaces in that a class may implement a protocol without being declared to implement that protocol. The difference is not detectable from outside code. Formal protocols cannot provide any implementations, they simply assure callers that classes which conform to the protocol will provide implementations. In the NeXT/Apple library, protocols are frequently used by the Distributed Objects system to represent the capabilities of an object executing on a remote system.</p>
<p>The syntax</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-objc">
<span class="kw4">@protocol</span> Locking
- <span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>lock;
- <span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>unlock;
<span class="kw4">@end</span>
</pre></div>
<p>denotes that there is the abstract idea of locking which is useful, and when stated in a class definition</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-objc">
<span class="kw4">@interface</span> SomeClass : SomeSuperClass &lt;Locking&gt;
<span class="kw4">@end</span>
</pre></div>
<p>denotes that instances of SomeClass will provide an implementation for the two instance methods using whatever means they want. This abstract specification is particularly useful to describe the desired behaviors of plug-ins for example, without constraining at all what the implementation hierarchy should be.</p>
<p><a name="Dynamic_typing" id="Dynamic_typing"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=10" title="Edit section: Dynamic typing">edit</a>]</span> <span class="mw-headline">Dynamic typing</span></h3>
<p>Objective-C, like Smalltalk, can use <a href="/wiki/Dynamic_typing" title="Dynamic typing" class="mw-redirect">dynamic typing</a>: an object can be sent a message that is not specified in its interface. This can allow for increased flexibility — in Objective-C an object can "capture" this message, and depending on the object, can send the message off again to a different object (who can respond to the message correctly and appropriately, or likewise send the message on again). This behavior is known as <i>message forwarding</i> or <i>delegation</i> (see below). Alternatively, an error handler can be used instead, in case the message cannot be forwarded. If the object does not forward the message, handle the error, or respond to it, a <a href="/wiki/Runtime" title="Runtime">runtime</a> error occurs.</p>
<p>Static typing information may also optionally be added to variables. This information is then checked at compile time. In the following statements, increasingly specific type information is provided. The statements are equivalent at runtime, but the additional information allows the compiler to warn the programmer if the passed argument does not match the type specified. In the first statement, the object may be of any class. In the second statement, the object must conform to the <i>aProtocol</i> protocol, and in the third, it must be a member of the NSNumber class.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-objc">
- setMyValue:<span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span> foo;
- setMyValue:<span class="br0">(</span><span class="kw4">id</span> &lt;aProtocol&gt;<span class="br0">)</span> foo;
- setMyValue:<span class="br0">(</span><span class="kw5">NSNumber</span>*<span class="br0">)</span>foo;
</pre></div>
<p>Dynamic typing can be a powerful feature. When implementing container classes using statically-typed languages without generics like pre-1.5 Java, the programmer is forced to write a <a href="/wiki/Container_(data_structure)" title="Container (data structure)">container class</a> for a generic type of object, and then cast back and forth between the abstract generic type and the real type. <a href="/wiki/Type_conversion" title="Type conversion">Casting</a> however breaks the discipline of <a href="/wiki/Type_system#Static_and_dynamic_typing" title="Type system">static typing</a> – if you put in an <a href="/wiki/Integer" title="Integer">Integer</a> and read out a <a href="/wiki/String_(computer_science)" title="String (computer science)">String</a>, you get an error. One way of alleviating the problem is to resort to <a href="/wiki/Generic_programming" title="Generic programming">generic programming</a>, but then container classes must be homogeneous in type. This need not be the case with dynamic typing.</p>
<p><a name="Forwarding" id="Forwarding"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=11" title="Edit section: Forwarding">edit</a>]</span> <span class="mw-headline">Forwarding</span></h3>
<p>Since Objective-C permits the sending of a message to an object which might not respond to it, the object has a number of things it can do with the message. One of these things could be to forward the message on to an object which can respond to it. Forwarding can be used to implement certain <a href="/wiki/Design_pattern_(computer_science)" title="Design pattern (computer science)">design patterns</a>, such as the <a href="/wiki/Observer_pattern" title="Observer pattern">Observer pattern</a> or the <a href="/wiki/Proxy_pattern" title="Proxy pattern">Proxy pattern</a> very simply.</p>
<p>The Objective-C runtime specifies a pair of methods in <tt>Object</tt></p>
<ul>
<li>forwarding methods:</li>
</ul>
<div dir="ltr" style="text-align: left;">
<pre class="source-objc">
- <span class="br0">(</span>retval_t<span class="br0">)</span> forward:<span class="br0">(</span><span class="kw4">SEL</span><span class="br0">)</span> <span class="kw4">sel</span> :<span class="br0">(</span>arglist_t<span class="br0">)</span> args; <span class="co1">// with GCC</span>
- <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span> forward:<span class="br0">(</span><span class="kw4">SEL</span><span class="br0">)</span> <span class="kw4">sel</span> :<span class="br0">(</span>marg_list<span class="br0">)</span> args; <span class="co1">// with NeXT/Apple systems</span>
</pre></div>
<ul>
<li>action methods:</li>
</ul>
<div dir="ltr" style="text-align: left;">
<pre class="source-objc">
- <span class="br0">(</span>retval_t<span class="br0">)</span> performv:<span class="br0">(</span><span class="kw4">SEL</span><span class="br0">)</span> <span class="kw4">sel</span> :<span class="br0">(</span>arglist_t<span class="br0">)</span> args;  <span class="co1">// with GCC</span>
- <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span> performv:<span class="br0">(</span><span class="kw4">SEL</span><span class="br0">)</span> <span class="kw4">sel</span> :<span class="br0">(</span>marg_list<span class="br0">)</span> args; <span class="co1">// with NeXT/Apple systems</span>
</pre></div>
<p>and as such an object wishing to implement forwarding needs only to override the forwarding method to define the forwarding behaviour. The action methods <tt>performv::</tt> need not be overridden as this method merely performs the method based on the selector and arguments.</p>
<p><a name="Example" id="Example"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=12" title="Edit section: Example">edit</a>]</span> <span class="mw-headline">Example</span></h4>
<p>Here is an example of a program which demonstrates the basics of forwarding.</p>
<dl>
<dt><i>Forwarder.h</i></dt>
</dl>
<div dir="ltr" style="text-align: left;">
<pre class="source-objc">
<span class="co2">#import &lt;objc/Object.h&gt;</span>
 
<span class="kw4">@interface</span> Forwarder : Object
<span class="br0">{</span>
    <span class="kw4">id</span> recipient; <span class="co1">//The object we want to forward the message to. </span>
<span class="br0">}</span>
 
<span class="co1">//Accessor methods</span>
- <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span> recipient;
- <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span> setRecipient:<span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span> _recipient; 
 
<span class="kw4">@end</span>
</pre></div>
<dl>
<dt><i>Forwarder.m</i></dt>
</dl>
<div dir="ltr" style="text-align: left;">
<pre class="source-objc">
<span class="co2">#import "Forwarder.h"</span>
 
<span class="kw4">@implementation</span> Forwarder
 
- <span class="br0">(</span>retval_t<span class="br0">)</span> forward: <span class="br0">(</span><span class="kw4">SEL</span><span class="br0">)</span> <span class="kw4">sel</span> : <span class="br0">(</span>arglist_t<span class="br0">)</span> args
<span class="br0">{</span>
    <span class="coMULTI">/*
     * Check whether the recipient actually responds to the message. 
     * This may or may not be desirable, for example, if a recipient
     * in turn does not respond to the message, it might do forwarding
     * itself.
     */</span>
    <span class="kw1">if</span><span class="br0">(</span><span class="br0">[</span>recipient respondsTo:<span class="kw4">sel</span><span class="br0">]</span><span class="br0">)</span> 
       <span class="kw1">return</span> <span class="br0">[</span>recipient performv: <span class="kw4">sel</span> : args<span class="br0">]</span>;
    <span class="kw1">else</span>
       <span class="kw1">return</span> <span class="br0">[</span>self error:<span class="st0">"Recipient does not respond"</span><span class="br0">]</span>;
<span class="br0">}</span>
 
- <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span> setRecipient: <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span> _recipient
<span class="br0">{</span>
    recipient = _recipient;
    <span class="kw1">return</span> self;
<span class="br0">}</span>
 
- <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span> recipient
<span class="br0">{</span>
    <span class="kw1">return</span> recipient;
<span class="br0">}</span>
 <span class="kw4">@end</span>
</pre></div>
<dl>
<dt><i>Recipient.h</i></dt>
</dl>
<div dir="ltr" style="text-align: left;">
<pre class="source-objc">
<span class="co2">#import &lt;objc/Object.h&gt;</span>
 
<span class="co1">// A simple Recipient object.</span>
<span class="kw4">@interface</span> Recipient : Object
- <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span> hello;
<span class="kw4">@end</span>
</pre></div>
<dl>
<dt><i>Recipient.m</i></dt>
</dl>
<div dir="ltr" style="text-align: left;">
<pre class="source-objc">
<span class="co2">#import "Recipient.h"</span>
 
<span class="kw4">@implementation</span> Recipient
 
- <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span> hello
<span class="br0">{</span>
    <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"Recipient says hello!<span class="es0">\n</span>"</span><span class="br0">)</span>;
 
    <span class="kw1">return</span> self;
<span class="br0">}</span>
 
<span class="kw4">@end</span>
</pre></div>
<dl>
<dt><i>main.m</i></dt>
</dl>
<div dir="ltr" style="text-align: left;">
<pre class="source-objc">
<span class="co2">#import "Forwarder.h"</span>
<span class="co2">#import "Recipient.h"</span>
 
<span class="kw4">int</span>
main<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>
<span class="br0">{</span>
    Forwarder *forwarder = <span class="br0">[</span>Forwarder new<span class="br0">]</span>;
    Recipient *recipient = <span class="br0">[</span>Recipient new<span class="br0">]</span>;
 
    <span class="br0">[</span>forwarder setRecipient:recipient<span class="br0">]</span>; <span class="co1">//Set the recipient. </span>
    <span class="coMULTI">/* 
     * Observe forwarder does not respond to a hello message! It will
     * be forwarded. All unrecognized methods will be forwarded to
     * the recipient 
     * (if the recipient responds to them, as written in the Forwarder)
     */</span>
    <span class="br0">[</span>forwarder hello<span class="br0">]</span>; 
 
    <span class="kw1">return</span> <span class="nu0">0</span>;
<span class="br0">}</span>
</pre></div>
<p><a name="Notes" id="Notes"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=13" title="Edit section: Notes">edit</a>]</span> <span class="mw-headline">Notes</span></h4>
<p>If we were to compile the program, the compiler would report</p>
<pre>
$ gcc -x objective-c -Wno-import Forwarder.m Recipient.m main.m -lobjc
main.m: In function `main':
main.m:12: warning: `Forwarder' does not respond to `hello'
$
</pre>
<p>The compiler is reporting the point made earlier, that <tt>Forwarder</tt> does not respond to hello messages. In certain circumstances, such a warning can help us find errors, but in this circumstance, we can safely ignore this warning, since we have implemented forwarding. If we were to run the program</p>
<pre>
$ ./a.out
Recipient says hello!
</pre>
<p><a name="Categories" id="Categories"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=14" title="Edit section: Categories">edit</a>]</span> <span class="mw-headline">Categories</span></h3>
<p>Cox’s main concern was the maintainability of large code bases. Experience from the structured programming world had shown that one of the main ways to improve code was to break it down into smaller pieces. Objective-C borrowed and extended the concept of <i>Categories</i> to help with this process from Smalltalk implementations (e.g., see <sup id="cite_ref-0" class="reference"><a href="#cite_note-0" title=""><span>[</span>1<span>]</span></a></sup>).</p>
<p>A category collects method implementations into separate files. The programmer can place groups of related methods into a category to make them more readable. For instance, one could create a "SpellChecking" category "on" the String object, collecting all of the methods related to spell checking into a single place.</p>
<p>Furthermore, the methods within a category are added to a class at <a href="/wiki/Runtime" title="Runtime">runtime</a>. Thus, categories permit the programmer to add methods to an existing class without the need to recompile that class or even have access to its source code. For example, if the system you are supplied with does not contain a <a href="/wiki/Spell_checker" title="Spell checker">spell checker</a> in its String implementation, you can add it without modifying the String source code.</p>
<p>Methods within categories become indistinguishable from the methods in a class when the program is run. A category has full access to all of the instance variables within the class, including private variables.</p>
<p>Categories provide an elegant solution to the <a href="/wiki/Fragile_base_class" title="Fragile base class">fragile base class</a> problem for methods.</p>
<p>If you declare a method in a category with the same <a href="/wiki/Method_signature" title="Method signature">method signature</a> as an existing method in a class, the category’s method is adopted. Thus categories can not only add methods to a class, but also replace existing methods. This feature can be used to fix bugs in other classes by rewriting their methods, or to cause a global change to a class’ behavior within a program. If two categories have methods with the same method signature, it is undefined which category’s method is adopted.</p>
<p>Other languages have attempted to add this feature in a variety of ways. <a href="/wiki/TOM_(object-oriented_programming_language)" title="TOM (object-oriented programming language)">TOM</a> took the Objective-C system a step further and allowed for the addition of variables as well. Other languages have instead used <a href="/wiki/Prototype-based_programming" title="Prototype-based programming">prototype oriented</a> solutions, the most notable being <a href="/wiki/Self_programming_language" title="Self programming language" class="mw-redirect">Self</a>.</p>
<p><a name="Example_usage_of_categories" id="Example_usage_of_categories"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=15" title="Edit section: Example usage of categories">edit</a>]</span> <span class="mw-headline">Example usage of categories</span></h4>
<p>This example builds up an <tt>Integer</tt> class, by defining first a basic class with only <a href="/wiki/Method_(computer_science)" title="Method (computer science)">accessor methods</a> implemented, and adding two categories, <tt>Arithmetic</tt> and <tt>Display</tt>, which extend the basic class. Whilst categories can access the base class’ private data members, it is often good practice to access these private data members through the accessor methods, which helps keep categories more independent from the base class. This is one typical usage of categories—the other is to use categories to add or replace certain methods in the base class (however it is not regarded as good practice to use categories for subclass overriding, also known as <a href="/wiki/Monkey_patch" title="Monkey patch">monkey patching</a>).</p>
<dl>
<dt><i>Integer.h</i></dt>
</dl>
<div dir="ltr" style="text-align: left;">
<pre class="source-objc">
<span class="co2">#import &lt;objc/Object.h&gt;</span>
 
<span class="kw4">@interface</span> Integer : Object
<span class="br0">{</span>
    <span class="kw4">int</span> integer;
<span class="br0">}</span>
 
- <span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span> integer;
- <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span> integer: <span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span> _integer;
<span class="kw4">@end</span>
</pre></div>
<dl>
<dt><i>Integer.m</i></dt>
</dl>
<div dir="ltr" style="text-align: left;">
<pre class="source-objc">
<span class="co2">#import "Integer.h"</span>
 
<span class="kw4">@implementation</span> Integer
- <span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span> integer
<span class="br0">{</span>
    <span class="kw1">return</span> integer;
<span class="br0">}</span>
 
- <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span> integer: <span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span> _integer
<span class="br0">{</span>
    integer = _integer;
 
    <span class="kw1">return</span> self;
<span class="br0">}</span>
<span class="kw4">@end</span>
</pre></div>
<dl>
<dt><i>Arithmetic.h</i></dt>
</dl>
<div dir="ltr" style="text-align: left;">
<pre class="source-objc">
<span class="co2">#import "Integer.h"</span>
 
<span class="kw4">@interface</span> Integer <span class="br0">(</span>Arithmetic<span class="br0">)</span>
- <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span> add: <span class="br0">(</span>Integer *<span class="br0">)</span> addend;
- <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span> sub: <span class="br0">(</span>Integer *<span class="br0">)</span> subtrahend;
<span class="kw4">@end</span>
</pre></div>
<dl>
<dt><i>Arithmetic.m</i></dt>
</dl>
<div dir="ltr" style="text-align: left;">
<pre class="source-objc">
<span class="co2">#import "Arithmetic.h"</span>
 
<span class="kw4">@implementation</span> Integer <span class="br0">(</span>Arithmetic<span class="br0">)</span> 
- <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span> add: <span class="br0">(</span>Integer *<span class="br0">)</span> addend
<span class="br0">{</span>
    <span class="kw1">return</span> <span class="br0">[</span>self integer: <span class="br0">[</span>self integer<span class="br0">]</span> + <span class="br0">[</span>addend integer<span class="br0">]</span><span class="br0">]</span>;
<span class="br0">}</span>
 
- <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span> sub: <span class="br0">(</span>Integer *<span class="br0">)</span> subtrahend
<span class="br0">{</span>
    <span class="kw1">return</span> <span class="br0">[</span>self integer: <span class="br0">[</span>self integer<span class="br0">]</span> - <span class="br0">[</span>subtrahend integer<span class="br0">]</span><span class="br0">]</span>;
<span class="br0">}</span>
<span class="kw4">@end</span>
</pre></div>
<dl>
<dt><i>Display.h</i></dt>
</dl>
<div dir="ltr" style="text-align: left;">
<pre class="source-objc">
<span class="co2">#import "Integer.h"</span>
 
<span class="kw4">@interface</span> Integer <span class="br0">(</span>Display<span class="br0">)</span>
- <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span> showstars;
- <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span> showint;
<span class="kw4">@end</span>
</pre></div>
<dl>
<dt><i>Display.m</i></dt>
</dl>
<div dir="ltr" style="text-align: left;">
<pre class="source-objc">
<span class="co2">#import "Display.h"</span>
 
<span class="kw4">@implementation</span> Integer <span class="br0">(</span>Display<span class="br0">)</span> 
- <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span> showstars
<span class="br0">{</span>
    <span class="kw4">int</span> i, x = <span class="br0">[</span>self integer<span class="br0">]</span>;
    <span class="kw1">for</span><span class="br0">(</span>i=<span class="nu0">0</span>; i &lt; x; i++<span class="br0">)</span>
       <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"*"</span><span class="br0">)</span>;
    <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"<span class="es0">\n</span>"</span><span class="br0">)</span>;
 
    <span class="kw1">return</span> self;
<span class="br0">}</span>
 
- <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span> showint
<span class="br0">{</span>
    <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"%d<span class="es0">\n</span>"</span>, <span class="br0">[</span>self integer<span class="br0">]</span><span class="br0">)</span>;
 
    <span class="kw1">return</span> self;
<span class="br0">}</span>
<span class="kw4">@end</span>
</pre></div>
<dl>
<dt><i>main.m</i></dt>
</dl>
<div dir="ltr" style="text-align: left;">
<pre class="source-objc">
<span class="co2">#import "Integer.h"</span>
<span class="co2">#import "Arithmetic.h" </span>
<span class="co2">#import "Display.h"</span>
 
<span class="kw4">int</span>
main<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>
<span class="br0">{</span>
    Integer *num1 = <span class="br0">[</span>Integer new<span class="br0">]</span>, *num2 = <span class="br0">[</span>Integer new<span class="br0">]</span>;
    <span class="kw4">int</span> x;
    <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"Enter an integer: "</span><span class="br0">)</span>;
    <span class="kw3">scanf</span><span class="br0">(</span><span class="st0">"%d"</span>, &amp;x<span class="br0">)</span>;
    <span class="br0">[</span>num1 integer:x<span class="br0">]</span>;
    <span class="br0">[</span>num1 showstars<span class="br0">]</span>;
    <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"Enter an integer: "</span><span class="br0">)</span>;
    <span class="kw3">scanf</span><span class="br0">(</span><span class="st0">"%d"</span>, &amp;x<span class="br0">)</span>;
    <span class="br0">[</span>num2 integer:x<span class="br0">]</span>;
    <span class="br0">[</span>num2 showstars<span class="br0">]</span>;
 
    <span class="br0">[</span>num1 add:num2<span class="br0">]</span>;
    <span class="br0">[</span>num1 showint<span class="br0">]</span>;
<span class="br0">}</span>
</pre></div>
<p><a name="Notes_2" id="Notes_2"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=16" title="Edit section: Notes">edit</a>]</span> <span class="mw-headline">Notes</span></h4>
<p>Compilation is performed, for example, by</p>
<pre>
gcc -x objective-c main.m Integer.m Arithmetic.m Display.m -lobjc
</pre>
<p>One can experiment by omitting the <tt>#import "Arithmetic.h"</tt> and <tt>[num1 add:num2]</tt> lines and omit <tt>Arithmetic.m</tt> in compilation. The program will still run. This means that it is possible to "mix-and-match" added categories if necessary – if one does not need to have some capability provided in a category, one can simply not compile it in.</p>
<p><a name="Posing" id="Posing"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=17" title="Edit section: Posing">edit</a>]</span> <span class="mw-headline">Posing</span></h3>
<p>Objective-C permits a class to wholly replace another class within a program. The replacing class is said to "pose as" the target class.</p>
<p>Note: Class posing was declared deprecated with <a href="/wiki/Mac_OS_X_v10.5" title="Mac OS X v10.5">Mac OS X v10.5</a> and unavailable in the 64-bit runtime.</p>
<p>For the versions still supporting posing: All messages sent to the target class are instead received by the posing class. There are several restrictions:</p>
<ul>
<li>A class may only pose as one of its direct or indirect superclasses</li>
<li>The posing class must not define any new instance variables which are absent from the target class (though it may define or override methods).</li>
<li>The target class may not have received any messages prior to the posing.</li>
</ul>
<p>Posing, similarly to categories, allows globally augmenting existing classes. Posing permits two features absent from categories:</p>
<ul>
<li>A posing class can call overridden methods through super, thus incorporating the implementation of the target class.</li>
<li>A posing class can override methods defined in categories.</li>
</ul>
<p>For example,</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-objc">
<span class="kw4">@interface</span> CustomNSApplication : <span class="kw6">NSApplication</span>
<span class="kw4">@end</span>
 
<span class="kw4">@implementation</span> CustomNSApplication
- <span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span> setMainMenu: <span class="br0">(</span><span class="kw6">NSMenu</span>*<span class="br0">)</span> menu
<span class="br0">{</span>
     <span class="co1">// do something with menu</span>
<span class="br0">}</span>
<span class="kw4">@end</span>
 
class_poseAs <span class="br0">(</span><span class="br0">[</span>CustomNSApplication <span class="kw4">class</span><span class="br0">]</span>, <span class="br0">[</span><span class="kw6">NSApplication</span> <span class="kw4">class</span><span class="br0">]</span><span class="br0">)</span>;
</pre></div>
<p>This intercepts every invocation of setMainMenu to NSApplication.</p>
<p><a name=".23import" id=".23import"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=18" title="Edit section: #import">edit</a>]</span> <span class="mw-headline"><code>#import</code></span></h3>
<p>In the C language, the <code>#include</code> pre-compile directive allows for the insertion of entire files before any compilation actually begins. Objective-C adds the <code>#import</code> directive, which does the same thing, except that it knows not to insert a file which has already been inserted.</p>
<p>For example, if file A includes files X and Y, but X and Y each include the file Q, then Q will be inserted twice into the resultant file, causing "duplicate definition" compile errors. But if file Q is included using the <code>#import</code> directive, only the first inclusion of Q will occur—all others will be ignored.</p>
<p>A few compilers, including <a href="/wiki/GNU_Compiler_Collection" title="GNU Compiler Collection">GCC</a>, support <code>#import</code> for C programs too; its use is discouraged on the basis that the <i>user</i> of the header file has to distinguish headers which should be included only once, from headers designed to be used multiple times. It is argued that this burden should be placed on the implementor; to this end, the implementor may place the directive <code>#<a href="/wiki/Pragma_once" title="Pragma once">pragma once</a></code> in the header file, or use the traditional <a href="/wiki/Include_guard" title="Include guard"><code>#include</code> guard</a> technique:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-objc">
<span class="co2">#ifndef HEADER_H</span>
<span class="co2">#define HEADER_H</span>
... contents of header.h ...
<span class="co2">#endif</span>
</pre></div>
<p>If a header file uses guards or <code>#pragma once</code>, it makes no difference whether it is <code>#include</code>d or <code>#import</code>ed. The same objection to <code>#import</code> actually applies to Objective-C as well, and many Objective-C programs also use guards in their headers.</p>
<p><a name="Other_features" id="Other_features"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=19" title="Edit section: Other features">edit</a>]</span> <span class="mw-headline">Other features</span></h2>
<p>Objective-C's features often allow for flexible, and often easy, solutions to programming issues.</p>
<ul>
<li>Delegating methods to other objects and <a href="/wiki/Remote_procedure_call" title="Remote procedure call">remote invocation</a> can be easily implemented using categories and message forwarding.</li>
<li><a href="/wiki/Pointer_swizzling" title="Pointer swizzling">Swizzling</a> of the <var>isa</var> pointer allows for classes to change at runtime. Typically used for <a href="/wiki/Debugging" title="Debugging">debugging</a> where freed objects are swizzled into zombie objects, whose only purpose is to report an error when someone calls them. Swizzling was also used in <a href="/wiki/Enterprise_Objects_Framework" title="Enterprise Objects Framework">EOF</a> to create database faults. Swizzling is used today by Apple’s Foundation Framework to implement <a href="/w/index.php?title=Key-Value_Observing&amp;action=edit&amp;redlink=1" class="new" title="Key-Value Observing (page does not exist)">Key-Value Observing</a>.</li>
<li><a href="/wiki/Serialization" title="Serialization">Serialization</a>, commonly called archival in Objective-C, can be done by overriding write and read methods.</li>
</ul>
<p><a name="Language_variants" id="Language_variants"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=20" title="Edit section: Language variants">edit</a>]</span> <span class="mw-headline">Language variants</span></h2>
<p><a name="Objective-C.2B.2B" id="Objective-C.2B.2B"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=21" title="Edit section: Objective-C++">edit</a>]</span> <span class="mw-headline">Objective-C++</span></h3>
<p>Objective-C++ is a front-end to the <a href="/wiki/GNU_Compiler_Collection" title="GNU Compiler Collection">GNU Compiler Collection</a> which can compile source files which use a combination of C++ and Objective-C syntax. Objective-C++ adds to C++ the extensions Objective-C adds to C. As nothing is done to unify the semantics behind the various language features, certain restrictions apply:</p>
<ul>
<li>A C++ class cannot derive from an Objective-C class and vice versa.</li>
<li>C++ namespaces cannot be declared inside an Objective-C declaration.</li>
<li>Objective-C classes cannot have instance variables of C++ classes which do not have a default constructor or which have one or more virtual methods, but pointers to C++ objects can be used as instance variables without restriction (allocate them with new in the -init method).</li>
<li>C++ "by value" semantics cannot be applied to Objective-C objects, which are only accessible through pointers.</li>
<li>An Objective-C declaration cannot be within a C++ template declaration and vice versa. Objective-C types, (e.g., Classname *) can be used as C++ template parameters, however.</li>
<li>Objective-C and C++ exception handling is distinct; the handlers of each cannot handle exceptions of the other type.</li>
<li>Care must be taken since the destructor calling conventions of Objective-C and C++’s exception run-time models do not match (i.e., a C++ destructor will not be called when an Objective-C exception exits the C++ object’s scope).</li>
</ul>
<p><a name="Objective-C_2.0" id="Objective-C_2.0"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=22" title="Edit section: Objective-C 2.0">edit</a>]</span> <span class="mw-headline">Objective-C 2.0</span></h3>
<p>At the 2006 <a href="/wiki/Worldwide_Developers_Conference" title="Worldwide Developers Conference" class="mw-redirect">Worldwide Developers Conference</a>, Apple announced the forthcoming release of "Objective-C 2.0," a revision of the Objective-C language to include "modern garbage collection, syntax enhancements<sup id="cite_ref-1" class="reference"><a href="#cite_note-1" title=""><span>[</span>2<span>]</span></a></sup>, runtime performance improvements<sup id="cite_ref-2" class="reference"><a href="#cite_note-2" title=""><span>[</span>3<span>]</span></a></sup>, and 64-bit support". <a href="/wiki/Mac_OS_X_v10.5" title="Mac OS X v10.5">Mac OS X v10.5</a>, released in October 2007, included an Objective-C 2.0 compiler. It is not yet known when these language improvements will be available in the GNU runtime.</p>
<p><a name="Garbage_collection" id="Garbage_collection"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=23" title="Edit section: Garbage collection">edit</a>]</span> <span class="mw-headline">Garbage collection</span></h4>
<p>Objective-C 2.0 provides an optional conservative yet generational garbage collector. When run in <a href="/wiki/Backwards-compatible" title="Backwards-compatible" class="mw-redirect">backwards-compatible</a> mode, the runtime turns <a href="/wiki/Reference_counting" title="Reference counting">reference counting</a> operations such as "retain" and "release" into <a href="/wiki/No-op" title="No-op" class="mw-redirect">no-ops</a>. All objects are subject to garbage collection when garbage collection is enabled. Regular C pointers may be qualified with "__strong" to also trigger the underlying write-barrier compiler intercepts and thus participate in garbage collection. A zero-ing weak subsystem is also provided such that pointers marked as "__weak" are set to zero when the object (or more simply GC memory) is collected. The garbage collector does not exist on the iPhone implementation of Objective-C 2.0.</p>
<p><a name="Properties" id="Properties"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=24" title="Edit section: Properties">edit</a>]</span> <span class="mw-headline">Properties</span></h4>
<p>Objective-C 2.0 introduces a new syntax to declare instance variables as <a href="/wiki/Property_(programming)" title="Property (programming)">properties</a>, with optional attributes to configure the generation of accessor methods. Properties are, in a sense, public instance variables; that is, declaring an instance variable as a property provides external classes with access (possibly limited, e.g. readonly) to that property. A property may be declared as "readonly", and may be provided with storage semantics such as "assign", "copy" or "retain". By default, properties are considered atomic, which results in a lock preventing multiple threads from accessing them at the same time. A property can be declared as "nonatomic" which removes this lock.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-objc">
<span class="kw4">@interface</span> Person : <span class="kw5">NSObject</span> <span class="br0">{</span>
    <span class="kw4">@public</span> <span class="kw5">NSString</span> *name;
    <span class="kw4">@private</span> <span class="kw4">int</span> age;
<span class="br0">}</span>
@property<span class="br0">(</span>copy<span class="br0">)</span> <span class="kw5">NSString</span> *name;
@property<span class="br0">(</span>readonly<span class="br0">)</span> <span class="kw4">int</span> age;
-<span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span>initWithAge:<span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span>age;
<span class="kw4">@end</span>
</pre></div>
<p>Properties are implemented by way of the @synthesize keyword, which generates getter and setter methods according to the property declaration. Alternately, the @dynamic keyword can be used to indicate that accessor methods will be provided by other means.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-objc">
<span class="kw4">@implementation</span> Person
@synthesize name;
@dynamic age;
-<span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span>initWithAge:<span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span>initAge
<span class="br0">{</span>
    age = initAge; <span class="co1">// NOTE: direct instance variable assignment, not property setter</span>
    <span class="kw1">return</span> self;
<span class="br0">}</span>
-<span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span>age
<span class="br0">{</span>
    <span class="kw1">return</span> <span class="nu0">29</span>; <span class="co1">// NOTE: lying about age</span>
<span class="br0">}</span>
<span class="kw4">@end</span>
</pre></div>
<p>Properties can be accessed using the traditional message passing syntax, dot notation, or by name via the "valueForKey:"/"setValue:forKey:" methods.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-objc">
Person *aPerson = <span class="br0">[</span><span class="br0">[</span>Person alloc<span class="br0">]</span> initWithAge: <span class="nu0">53</span><span class="br0">]</span>;
aPerson.name = @<span class="st0">"Steve"</span>; <span class="co1">// NOTE: dot notation, uses synthesized setter, equivalent to [aPerson setName: @"Steve"];</span>
NSLog<span class="br0">(</span>@<span class="st0">"Access by message (%@), dot notation(%@), property name(%@) and direct instance variable access (%@)"</span>,
      <span class="br0">[</span>aPerson name<span class="br0">]</span>, aPerson.name, <span class="br0">[</span>aPerson valueForKey:@<span class="st0">"name"</span><span class="br0">]</span>, aPerson-&gt;name<span class="br0">)</span>;
</pre></div>
<p>In order to use dot notation to invoke property accessors within an instance method, the "self" keyword should be used:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-objc">
-<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span> introduceMyselfWithProperties:<span class="br0">(</span><span class="kw4">BOOL</span><span class="br0">)</span>useGetter
<span class="br0">{</span>
    NSLog<span class="br0">(</span>@<span class="st0">"Hi, my name is %@."</span>, <span class="br0">(</span>useGetter ? self.name : name<span class="br0">)</span><span class="br0">)</span>; <span class="co1">// NOTE: getter vs. ivar access</span>
<span class="br0">}</span>
</pre></div>
<p>A class or protocol's properties may be dynamically <a href="/wiki/Type_introspection" title="Type introspection">introspected</a>.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-objc">
<span class="kw4">int</span> i, propertyCount = <span class="nu0">0</span>;
objc_property_t *propertyList = class_copyPropertyList<span class="br0">(</span><span class="br0">[</span>aPerson <span class="kw4">class</span><span class="br0">]</span>, &amp;propertyCount<span class="br0">)</span>;
<span class="kw1">for</span> <span class="br0">(</span>i=<span class="nu0">0</span>; i&lt;propertyCount; i++<span class="br0">)</span> <span class="br0">{</span>
    objc_property_t *thisProperty = propertyList + i;
    <span class="kw4">const</span> <span class="kw4">char</span>* propertyName = property_getName<span class="br0">(</span>*thisProperty<span class="br0">)</span>;
    NSLog<span class="br0">(</span>@<span class="st0">"Person has a property: '%s'"</span>, propertyName<span class="br0">)</span>;
<span class="br0">}</span>
</pre></div>
<p><a name="Fast_enumeration" id="Fast_enumeration"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=25" title="Edit section: Fast enumeration">edit</a>]</span> <span class="mw-headline">Fast enumeration</span></h4>
<p>Instead of using an Enumerator object to iterate through a collection, Objective-C 2.0 offers the fast enumeration syntax. The following two loops are equivalent in Objective-C 2.0.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-objc">
<span class="kw1">for</span> <span class="br0">(</span><span class="kw4">int</span> i=<span class="nu0">0</span>; i&lt;<span class="br0">[</span>thePeople count<span class="br0">]</span>; i++<span class="br0">)</span> <span class="br0">{</span>
    Person *p = <span class="br0">[</span>thePeople objectAtIndex:i<span class="br0">]</span>;
    NSLog<span class="br0">(</span>@<span class="st0">"%@ is %i years old."</span>, <span class="br0">[</span>p getName<span class="br0">]</span>, <span class="br0">[</span>p getAge<span class="br0">]</span><span class="br0">)</span>;
<span class="br0">}</span>
 
<span class="kw1">for</span> <span class="br0">(</span>Person *p in thePeople<span class="br0">)</span>
    NSLog<span class="br0">(</span>@<span class="st0">"%@ is %i years old."</span>, <span class="br0">[</span>p getName<span class="br0">]</span>, <span class="br0">[</span>p getAge<span class="br0">]</span><span class="br0">)</span>;
</pre></div>
<p>Fast enumeration generates more efficient code than standard enumeration because methods calls to enumerate over objects are replaced by pointer arithmetic using the NSFastEnumeration protocol.<sup id="cite_ref-3" class="reference"><a href="#cite_note-3" title=""><span>[</span>4<span>]</span></a></sup></p>
<p><a name="Implications_for_Cocoa_development" id="Implications_for_Cocoa_development"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=26" title="Edit section: Implications for Cocoa development">edit</a>]</span> <span class="mw-headline">Implications for Cocoa development</span></h4>
<p>All Objective-C applications developed for Mac OS X that make use of the above improvements for Objective-C 2.0 are incompatible with all operating systems prior to 10.5 (Leopard). Even using fast enumeration, which one might expect to generate the exact same binaries as standard enumeration, will cause an application to crash on OS X version 10.4 or earlier.</p>
<p><a name="Today" id="Today"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=27" title="Edit section: Today">edit</a>]</span> <span class="mw-headline">Today</span></h2>
<p>Objective-C today is often used in tandem with a fixed library of standard objects (often known as a "kit" or "framework"), such as Cocoa or GNUstep. These libraries often come with the operating system: the GNUstep libraries often come with <a href="/wiki/Linux_distribution" title="Linux distribution">Linux distributions</a> and Cocoa comes with Mac OS X. The programmer is not forced to inherit functionality from the existing base class (NSObject). Objective-C allows for the declaration of new root classes which do not inherit any existing functionality. Originally, Objective-C based programming environments typically offered an Object class as the base class from which almost all other classes inherited. With the introduction of OpenStep, NeXT created a new base class named NSObject which offered additional features over Object (an emphasis on using object references and reference counting instead of raw pointers, for example). Almost all classes in Cocoa inherit from NSObject.</p>
<p>Not only did the renaming serve to differentiate the new default behavior of classes within the OpenStep API, but it allowed code which used Object — the original base class used on NeXTSTEP (and, more or less, other Objective-C class libraries) — to co-exist in the same runtime with code which used NSObject (with some limitations). As well, the introduction of the two letter prefix became a sort of simplistic form of namespaces, which Objective-C lacks. Using a prefix to create an informal packaging identifier became an informal coding standard in the Objective-C community, and continues to this day.</p>
<p><a name="Portable_Object_Compiler" id="Portable_Object_Compiler"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=28" title="Edit section: Portable Object Compiler">edit</a>]</span> <span class="mw-headline">Portable Object Compiler</span></h3>
<p>Besides the <a href="/wiki/GNU_Compiler_Collection" title="GNU Compiler Collection">GCC</a>/<a href="/wiki/NeXT" title="NeXT">NeXT</a>/<a href="/wiki/Apple_Inc." title="Apple Inc.">Apple</a> implementation, which added several extensions to the original <a href="/wiki/Stepstone" title="Stepstone">Stepstone</a> implementation, there exists another <a href="/wiki/Free_and_open_source_software" title="Free and open source software">free open-source</a> Objective-C implementation, which implements a slightly different set of extensions: The Portable Object Compiler <sup id="cite_ref-4" class="reference"><a href="#cite_note-4" title=""><span>[</span>5<span>]</span></a></sup> implements, among other things, also <a href="/wiki/Smalltalk" title="Smalltalk">Smalltalk</a>-like blocks for Objective-C.</p>
<p><a name="Analysis_of_the_language" id="Analysis_of_the_language"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=29" title="Edit section: Analysis of the language">edit</a>]</span> <span class="mw-headline">Analysis of the language</span></h2>
<p>Objective-C implementations use a thin <a href="/wiki/Runtime" title="Runtime">runtime</a> written in C which adds little to the size of the application. In contrast, most OO systems at the time that it was created used large <a href="/wiki/Virtual_machine" title="Virtual machine">virtual machine</a> runtimes. Programs written in Objective-C tend to be not much larger than the size of their code and that of the libraries (which generally do not need to be included in the <a href="/wiki/Software_distribution" title="Software distribution">software distribution</a>), in contrast to Smalltalk systems where a large amount of memory was used just to open a window. Objective-C applications tend to be larger than similar C or C++ applications because Objective-C dynamic typing does not allow methods to be stripped or inlined.</p>
<p>Likewise, the language can be implemented on top of existing C compilers (in <a href="/wiki/GNU_Compiler_Collection" title="GNU Compiler Collection">GCC</a>, first as a preprocessor, then as a module) rather than as a new compiler. This allows Objective-C to leverage the huge existing collection of C code, libraries, tools, and mindshare. Existing C libraries can be wrapped in Objective-C <a href="/wiki/Adapter_pattern" title="Adapter pattern">wrappers</a> to provide an OO-style interface.</p>
<p>All of these practical changes lowered the <a href="/wiki/Barriers_to_entry" title="Barriers to entry">barrier to entry</a>, likely the biggest problem for the widespread acceptance of Smalltalk in the 1980s.</p>
<p>The first versions of Objective-C did not support <a href="/wiki/Garbage_collection_(computer_science)" title="Garbage collection (computer science)">garbage collection</a>. At the time this decision was a matter of some debate, and many people considered long "dead times" (when Smalltalk did collection) to render the entire system unusable. Some 3rd party implementations have added this feature (most notably GNUstep) and Apple have implemented it as of <a href="/wiki/Mac_OS_X_v10.5" title="Mac OS X v10.5">Mac OS X v10.5</a>.<sup id="cite_ref-5" class="reference"><a href="#cite_note-5" title=""><span>[</span>6<span>]</span></a></sup></p>
<p>Another common criticism is that Objective-C does not have language support for <a href="/wiki/Namespace_(computer_science)" title="Namespace (computer science)">namespaces</a>. Instead, programmers are forced to add prefixes to their class names, which are traditionally shorter than namespace names and thus more prone to collisions. As of 2007, all Mac OS X classes and functions in the <a href="/wiki/Cocoa_(software)" title="Cocoa (software)" class="mw-redirect">Cocoa</a> programming environment are prefixed with "NS" (e.g. NSObject, NSButton) to identify them as belonging to the Mac OS X core; the "NS" derives from the names of the classes as defined during the development of <a href="/wiki/NeXTstep" title="NeXTstep" class="mw-redirect">NeXTstep</a>.</p>
<p>Since Objective-C is a strict superset of C, it does not treat C primitive types as <a href="/wiki/First-class_object" title="First-class object">first-class objects</a> either.</p>
<p>Unlike <a href="/wiki/C%2B%2B" title="C++">C++</a>, Objective-C does not support <a href="/wiki/Operator_overloading" title="Operator overloading">operator overloading</a>. Also unlike C++, Objective-C allows an object to directly inherit only from one class (forbidding <a href="/wiki/Multiple_inheritance" title="Multiple inheritance">multiple inheritance</a>). However, categories and protocols may be used as alternative functionality to multiple inheritance.</p>
<p>Because Objective-C uses dynamic runtime typing and because all method calls are function calls (or, in some cases, syscalls), many common performance optimizations cannot be applied to Objective-C methods (for example: inlining, constant propagation, interprocedural optimizations, and scalar replacement of aggregates). This limits the performance of Objective-C abstractions relative to similar abstractions in languages such as C++. Proponents of Objective-C claim that it should not be used for low level abstraction in the way that C++ or Java are used, because Objective-C is known to have a high runtime cost.</p>
<p><a name="Philosophical_differences_between_Objective-C_and_C.2B.2B" id="Philosophical_differences_between_Objective-C_and_C.2B.2B"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=30" title="Edit section: Philosophical differences between Objective-C and C++">edit</a>]</span> <span class="mw-headline">Philosophical differences between Objective-C and C++</span></h3>
<p>The design and implementation of <a href="/wiki/C%2B%2B" title="C++">C++</a> and Objective-C represent different approaches to extending C.</p>
<p>In addition to C’s style of procedural programming, C++ directly supports <a href="/wiki/Object-oriented_programming" title="Object-oriented programming">object-oriented programming</a>, <a href="/wiki/Generic_programming" title="Generic programming">generic programming</a>, and <a href="/wiki/Metaprogramming" title="Metaprogramming">metaprogramming</a>. C++ also comes with a large standard library which includes several <a href="/wiki/Container_(data_structure)" title="Container (data structure)">container classes</a>. Objective-C, on the other hand, adds only object-oriented features to C. Objective-C in its purest fashion does not contain the same number of standard library features, but in most places where Objective-C is used, it is used with an <a href="/wiki/OpenStep" title="OpenStep">OpenStep</a>-like library such as <a href="/wiki/OPENSTEP" title="OPENSTEP" class="mw-redirect">OPENSTEP</a>, <a href="/wiki/Cocoa_(API)" title="Cocoa (API)">Cocoa</a>, or <a href="/wiki/GNUstep" title="GNUstep">GNUstep</a> which provide similar functionality to some of C++’s standard library.</p>
<p>One notable difference is that Objective-C provides runtime support for some <a href="/wiki/Reflection_(computer_science)" title="Reflection (computer science)">reflective</a> features, whereas C++ adds only a small amount of runtime support to C. In Objective-C, an object can be queried about its own properties, for example whether it will respond to a certain message. In C++ this is not possible without the use of external libraries.</p>
<p>The use of reflection is part of the wider distinction between dynamic (run-time) features versus static (compile-time) features of a language. Although Objective-C and C++ each employ a mix of both features, Objective-C is decidedly geared toward run-time decisions while C++ is geared toward compile-time decisions. The tension between dynamic and static programming involves many of the classic trade-offs in programming.</p>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=31" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<ul>
<li><a href="/wiki/Comparison_of_programming_languages" title="Comparison of programming languages">Comparison of programming languages</a></li>
</ul>
<p><a name="Notes_3" id="Notes_3"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=32" title="Edit section: Notes">edit</a>]</span> <span class="mw-headline">Notes</span></h2>
<div class="references-small">
<ol class="references">
<li id="cite_note-0"><b><a href="#cite_ref-0" title="">^</a></b> <a href="http://video.google.com/videoplay?docid=-7466310348707586940&amp;ei=0dr7SIe6L46qrgLk7dHsDg&amp;q=Smalltalk-80" class="external free" title="http://video.google.com/videoplay?docid=-7466310348707586940&amp;ei=0dr7SIe6L46qrgLk7dHsDg&amp;q=Smalltalk-80" rel="nofollow">http://video.google.com/videoplay?docid=-7466310348707586940&amp;ei=0dr7SIe6L46qrgLk7dHsDg&amp;q=Smalltalk-80</a></li>
<li id="cite_note-1"><b><a href="#cite_ref-1" title="">^</a></b> <a href="http://lists.apple.com/archives/Objc-language/2006/Aug/msg00039.html" class="external free" title="http://lists.apple.com/archives/Objc-language/2006/Aug/msg00039.html" rel="nofollow">http://lists.apple.com/archives/Objc-language/2006/Aug/msg00039.html</a></li>
<li id="cite_note-2"><b><a href="#cite_ref-2" title="">^</a></b> <a href="http://lists.apple.com/archives/Objc-language/2006/Aug/msg00018.html" class="external free" title="http://lists.apple.com/archives/Objc-language/2006/Aug/msg00018.html" rel="nofollow">http://lists.apple.com/archives/Objc-language/2006/Aug/msg00018.html</a></li>
<li id="cite_note-3"><b><a href="#cite_ref-3" title="">^</a></b> <cite style="font-style:normal" class="web" id="CITEREFApple.2C_Inc.2007">Apple, Inc. (2007). <a href="http://developer.apple.com/documentation/Cocoa/Conceptual/ObjectiveC/Articles/chapter_8_section_1.html" class="external text" title="http://developer.apple.com/documentation/Cocoa/Conceptual/ObjectiveC/Articles/chapter_8_section_1.html" rel="nofollow">"Fast Enumeration"</a><span class="printonly">. <a href="http://developer.apple.com/documentation/Cocoa/Conceptual/ObjectiveC/Articles/chapter_8_section_1.html" class="external free" title="http://developer.apple.com/documentation/Cocoa/Conceptual/ObjectiveC/Articles/chapter_8_section_1.html" rel="nofollow">http://developer.apple.com/documentation/Cocoa/Conceptual/ObjectiveC/Articles/chapter_8_section_1.html</a></span><span class="reference-accessdate">. Retrieved on 2008-06-09</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Fast+Enumeration&amp;rft.atitle=&amp;rft.aulast=Apple%2C+Inc.&amp;rft.au=Apple%2C+Inc.&amp;rft.date=2007&amp;rft_id=http%3A%2F%2Fdeveloper.apple.com%2Fdocumentation%2FCocoa%2FConceptual%2FObjectiveC%2FArticles%2Fchapter_8_section_1.html&amp;rfr_id=info:sid/en.wikipedia.org:Objective-C"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-4"><b><a href="#cite_ref-4" title="">^</a></b> <a href="http://users.pandora.be/stes/compiler.html" class="external free" title="http://users.pandora.be/stes/compiler.html" rel="nofollow">http://users.pandora.be/stes/compiler.html</a></li>
<li id="cite_note-5"><b><a href="#cite_ref-5" title="">^</a></b> <cite style="font-style:normal" class="web" id="CITEREFApple.2C_Inc.">Apple, Inc. (<span class="mw-formatted-date" title="2006-08-22"><span class="mw-formatted-date" title="08-22"><a href="/wiki/August_22" title="August 22">August 22</a></span>, <a href="/wiki/2006" title="2006">2006</a></span>). <a href="http://www.apple.com/macosx/developertools/xcode.html" class="external text" title="http://www.apple.com/macosx/developertools/xcode.html" rel="nofollow">"Mac OS X Leopard – Xcode 3.0"</a><span class="printonly">. <a href="http://www.apple.com/macosx/developertools/xcode.html" class="external free" title="http://www.apple.com/macosx/developertools/xcode.html" rel="nofollow">http://www.apple.com/macosx/developertools/xcode.html</a></span><span class="reference-accessdate">. Retrieved on 2006-08-22</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Mac+OS+X+Leopard+%E2%80%93+Xcode+3.0&amp;rft.atitle=&amp;rft.aulast=Apple%2C+Inc.&amp;rft.au=Apple%2C+Inc.&amp;rft.date=%5B%5BAugust+22%5D%5D+%5B%5B2006%5D%5D&amp;rft_id=http%3A%2F%2Fwww.apple.com%2Fmacosx%2Fdevelopertools%2Fxcode.html&amp;rfr_id=info:sid/en.wikipedia.org:Objective-C"><span style="display: none;">&#160;</span></span></li>
</ol>
</div>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=33" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<ul>
<li><cite style="font-style:normal" class="book" id="CITEREFCox1991">Cox, Brad J. (1991). <i>Object Oriented Programming: An Evolutionary Approach</i>. Addison Wesley. <a href="/wiki/Special:BookSources/0201548348" class="internal">ISBN 0-201-54834-8</a>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Object+Oriented+Programming%3A+An+Evolutionary+Approach&amp;rft.aulast=Cox&amp;rft.aufirst=Brad+J.&amp;rft.au=Cox%2C+Brad+J.&amp;rft.date=1991&amp;rft.pub=Addison+Wesley&amp;rft.isbn=0-201-54834-8&amp;rfr_id=info:sid/en.wikipedia.org:Objective-C"><span style="display: none;">&#160;</span></span></li>
</ul>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Objective-C&amp;action=edit&amp;section=34" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<table class="metadata plainlinks mbox-small" style="border:1px solid #aaa; background-color:#f9f9f9;">
<tr>
<td class="mbox-image"><a href="http://en.wikibooks.org/wiki/Special:Search/Objective-C" title="b:Special:Search/Objective-C"><img alt="Sister project" src="http://upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/40px-Wikibooks-logo-en-noslogan.svg.png" width="40" height="40" border="0" /></a></td>
<td class="mbox-text" style=""><a href="/wiki/Wikibooks" title="Wikibooks">Wikibooks</a> has a book on the topic of
<div style="margin-left:10px;"><i><b><a href="http://en.wikibooks.org/wiki/Programming:Objective-C" class="extiw" title="wikibooks:Programming:Objective-C">Programming:Objective-C</a></b></i></div>
</td>
</tr>
</table>
<ul>
<li><a href="http://developer.apple.com/documentation/Cocoa/Conceptual/ObjectiveC/" class="external text" title="http://developer.apple.com/documentation/Cocoa/Conceptual/ObjectiveC/" rel="nofollow">Introduction to The Objective-C Programming Language (Apple Developer Connection)</a></li>
<li><i><a href="http://developer.apple.com/documentation/Cocoa/Conceptual/ObjectiveC/ObjC.pdf" class="external text" title="http://developer.apple.com/documentation/Cocoa/Conceptual/ObjectiveC/ObjC.pdf" rel="nofollow">The Objective-C 2.0 Programming Language</a></i>, PDF download from Apple</li>
<li><a href="http://www.gnu.org/software/gnustep/resources/documentation/Developer/Base/ProgrammingManual/manual_toc.html" class="external text" title="http://www.gnu.org/software/gnustep/resources/documentation/Developer/Base/ProgrammingManual/manual_toc.html" rel="nofollow">Objective-C GNUstep Base Programming Manual</a></li>
<li><a href="http://www.toodarkpark.org/computers/objc/" class="external text" title="http://www.toodarkpark.org/computers/objc/" rel="nofollow">Object-Oriented Programming and The Objective-C Language</a></li>
<li><a href="http://www.otierney.net/objective-c.html" class="external text" title="http://www.otierney.net/objective-c.html" rel="nofollow">Beginner’s Guide to Objective-C</a></li>
<li><a href="http://objectivelib.sourceforge.net/" class="external text" title="http://objectivelib.sourceforge.net/" rel="nofollow">ObjectiveLib: variant of a Standard Template Library</a></li>
<li><a href="http://virtualschool.edu/objectivec/" class="external text" title="http://virtualschool.edu/objectivec/" rel="nofollow">Objective-C by Brad Cox</a></li>
<li><a href="http://www.cs.indiana.edu/classes/c304/oop-intro.html" class="external text" title="http://www.cs.indiana.edu/classes/c304/oop-intro.html" rel="nofollow">Object Oriented Programming in Objective-C</a></li>
<li><a href="http://www.faqs.org/faqs/computer-lang/Objective-C/faq/" class="external text" title="http://www.faqs.org/faqs/computer-lang/Objective-C/faq/" rel="nofollow">Objective-C FAQ</a></li>
<li><a href="http://thaesofereode.info/clocFAQ/" class="external text" title="http://thaesofereode.info/clocFAQ/" rel="nofollow">comp.lang.objective-C FAQ</a></li>
<li><a href="http://www.foldr.org/~michaelw/objective-c/" class="external text" title="http://www.foldr.org/~michaelw/objective-c/" rel="nofollow">Objective-C: Links, Resources, Stuff</a></li>
<li><a href="news://comp.lang.objective-c" class="external text" title="news://comp.lang.objective-c" rel="nofollow">Objective-C mailing list</a></li>
<li><a href="http://code.google.com/p/nobjectiveast/" class="external text" title="http://code.google.com/p/nobjectiveast/" rel="nofollow">AST for Objective-C in C#</a></li>
</ul>
<table class="navbox" cellspacing="0" style=";">
<tr>
<td style="padding:2px;">
<table cellspacing="0" class="nowraplinks collapsible autocollapse" style="width:100%;background:transparent;color:inherit;;">
<tr>
<th style=";" colspan="2" class="navbox-title">
<div style="float:left; width:6em;text-align:left;">
<div class="noprint plainlinksneverexpand navbar" style="background:none; padding:0; font-weight:normal;;;border:none;; font-size:xx-small;"><a href="/wiki/Template:CProLang" title="Template:CProLang"><span title="View this template" style=";;border:none;">v</span></a>&#160;<span style="font-size:80%;">•</span>&#160;<a href="/wiki/Template_talk:CProLang" title="Template talk:CProLang"><span title="Discussion about this template" style=";;border:none;">d</span></a>&#160;<span style="font-size:80%;">•</span>&#160;<a href="http://en.wikipedia.org/w/index.php?title=Template:CProLang&amp;action=edit" class="external text" title="http://en.wikipedia.org/w/index.php?title=Template:CProLang&amp;action=edit" rel="nofollow"><span title="Edit this template" style=";;border:none;;">e</span></a></div>
</div>
<span style="font-size:110%;"><a href="/wiki/C_(programming_language)" title="C (programming language)">C programming language</a></span></th>
</tr>
<tr style="height:2px;">
<td></td>
</tr>
<tr>
<td class="navbox-group" style=";;">Libraries</td>
<td style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<div style="padding:0em 0.25em"><a href="/wiki/C_standard_library" title="C standard library">C standard library</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/GNU_C_Library" title="GNU C Library">glibc</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Dietlibc" title="Dietlibc">Dietlibc</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/UClibc" title="UClibc">uClibc</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Newlib" title="Newlib">Newlib</a><span style="font-weight:bold;">&#160;·</span> <i><a href="/wiki/Category:C_libraries" title="Category:C libraries">more</a></i></div>
</td>
</tr>
<tr style="height:2px">
<td></td>
</tr>
<tr>
<td class="navbox-group" style=";;">Features</td>
<td style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<div style="padding:0em 0.25em"><a href="/wiki/C_string" title="C string">String</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/C_syntax" title="C syntax">Syntax</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/C_preprocessor" title="C preprocessor">Preprocessor</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/C_variable_types_and_declarations" title="C variable types and declarations">Variable types and declarations</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/List_of_C_functions" title="List of C functions">Functions</a></div>
</td>
</tr>
<tr style="height:2px">
<td></td>
</tr>
<tr>
<td class="navbox-group" style=";;">Descendants</td>
<td style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<div style="padding:0em 0.25em"><a href="/wiki/C%2B%2B" title="C++">C++</a><span style="font-weight:bold;">&#160;·</span> <strong class="selflink">Objective-C</strong><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/D_(programming_language)" title="D (programming language)">D</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/C_Sharp_(programming_language)" title="C Sharp (programming language)">C#</a></div>
</td>
</tr>
<tr style="height:2px">
<td></td>
</tr>
<tr>
<td class="navbox-group" style=";;">C and Other Languages</td>
<td style="text-align:left;border-left:2px solid #fdfdfd;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<div style="padding:0em 0.25em">C and C++ (<a href="/wiki/Compatibility_of_C_and_C%2B%2B" title="Compatibility of C and C++">Compatibility</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Operators_in_C_and_C%2B%2B" title="Operators in C and C++">Operators</a>)<span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Comparison_of_Pascal_and_C" title="Comparison of Pascal and C">Comparison of Pascal and C</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/C_to_Java_byte-code_compiler" title="C to Java byte-code compiler" class="mw-redirect">C to Java byte-code compiler</a></div>
</td>
</tr>
<tr style="height:2px;">
<td></td>
</tr>
<tr>
<td class="navbox-abovebelow" style=";" colspan="2"><b><a href="/wiki/Category:C_programming_language" title="Category:C programming language">Category</a></b></td>
</tr>
</table>
</td>
</tr>
</table>


<!-- 
NewPP limit report
Preprocessor node count: 3185/1000000
Post-expand include size: 35094/2048000 bytes
Template argument size: 12661/2048000 bytes
Expensive parser function count: 3/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:22802-0!1!0!default!!en!2 and timestamp 20090403225906 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Objective-C">http://en.wikipedia.org/wiki/Objective-C</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:C_programming_language_family" title="Category:C programming language family">C programming language family</a></span> | <span dir='ltr'><a href="/wiki/Category:Object-oriented_programming_languages" title="Category:Object-oriented programming languages">Object-oriented programming languages</a></span> | <span dir='ltr'><a href="/wiki/Category:Dynamically-typed_programming_languages" title="Category:Dynamically-typed programming languages">Dynamically-typed programming languages</a></span> | <span dir='ltr'><a href="/wiki/Category:Class-based_programming_languages" title="Category:Class-based programming languages">Class-based programming languages</a></span> | <span dir='ltr'><a href="/wiki/Category:NeXT" title="Category:NeXT">NeXT</a></span> | <span dir='ltr'><a href="/wiki/Category:GNUstep" title="Category:GNUstep">GNUstep</a></span> | <span dir='ltr'><a href="/wiki/Category:Curly_bracket_programming_languages" title="Category:Curly bracket programming languages">Curly bracket programming languages</a></span> | <span dir='ltr'><a href="/wiki/Category:Objective-C" title="Category:Objective-C">Objective-C</a></span></div><div id="mw-hidden-catlinks" class="mw-hidden-cats-hidden">Hidden categories:&#32;<span dir='ltr'><a href="/wiki/Category:Wikipedia_articles_needing_copy_edit_from_August_2008" title="Category:Wikipedia articles needing copy edit from August 2008">Wikipedia articles needing copy edit from August 2008</a></span> | <span dir='ltr'><a href="/wiki/Category:All_articles_needing_copy_edit" title="Category:All articles needing copy edit">All articles needing copy edit</a></span> | <span dir='ltr'><a href="/wiki/Category:All_articles_with_unsourced_statements" title="Category:All articles with unsourced statements">All articles with unsourced statements</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_unsourced_statements_since_February_2007" title="Category:Articles with unsourced statements since February 2007">Articles with unsourced statements since February 2007</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_unsourced_statements_since_December_2008" title="Category:Articles with unsourced statements since December 2008">Articles with unsourced statements since December 2008</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Objective-C" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Objective-C" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Objective-C&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Objective-C&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Objective-C" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Objective-C" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Objective-C" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Objective-C&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Objective-C&amp;oldid=279425290" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Objective-C&amp;id=279425290">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-bn"><a href="http://bn.wikipedia.org/wiki/%E0%A6%85%E0%A6%AC%E0%A6%9C%E0%A7%87%E0%A6%95%E0%A7%8D%E0%A6%9F%E0%A6%BF%E0%A6%AD_%E0%A6%B8%E0%A6%BF">বাংলা</a></li>
				<li class="interwiki-bg"><a href="http://bg.wikipedia.org/wiki/Objective-C">Български</a></li>
				<li class="interwiki-cs"><a href="http://cs.wikipedia.org/wiki/Objective-C">Česky</a></li>
				<li class="interwiki-da"><a href="http://da.wikipedia.org/wiki/Objective-C">Dansk</a></li>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/Objective-C">Deutsch</a></li>
				<li class="interwiki-es"><a href="http://es.wikipedia.org/wiki/Objective-C">Español</a></li>
				<li class="interwiki-eo"><a href="http://eo.wikipedia.org/wiki/Objective-C">Esperanto</a></li>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Objective-C">Français</a></li>
				<li class="interwiki-gl"><a href="http://gl.wikipedia.org/wiki/Objective-C">Galego</a></li>
				<li class="interwiki-ko"><a href="http://ko.wikipedia.org/wiki/%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8B%B0%EB%B8%8C-C">한국어</a></li>
				<li class="interwiki-it"><a href="http://it.wikipedia.org/wiki/Objective_C">Italiano</a></li>
				<li class="interwiki-hu"><a href="http://hu.wikipedia.org/wiki/Objective-C">Magyar</a></li>
				<li class="interwiki-nl"><a href="http://nl.wikipedia.org/wiki/Objective-C">Nederlands</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/Objective-C">日本語</a></li>
				<li class="interwiki-no"><a href="http://no.wikipedia.org/wiki/Objective-C">‪Norsk (bokmål)‬</a></li>
				<li class="interwiki-pl"><a href="http://pl.wikipedia.org/wiki/Objective-C">Polski</a></li>
				<li class="interwiki-pt"><a href="http://pt.wikipedia.org/wiki/Objective-C">Português</a></li>
				<li class="interwiki-ru"><a href="http://ru.wikipedia.org/wiki/Objective-C">Русский</a></li>
				<li class="interwiki-simple"><a href="http://simple.wikipedia.org/wiki/Objective-C">Simple English</a></li>
				<li class="interwiki-sk"><a href="http://sk.wikipedia.org/wiki/Objective-C">Slovenčina</a></li>
				<li class="interwiki-fi"><a href="http://fi.wikipedia.org/wiki/Objective-C">Suomi</a></li>
				<li class="interwiki-sv"><a href="http://sv.wikipedia.org/wiki/Objective-C">Svenska</a></li>
				<li class="interwiki-th"><a href="http://th.wikipedia.org/wiki/%E0%B8%A0%E0%B8%B2%E0%B8%A9%E0%B8%B2%E0%B8%AD%E0%B9%87%E0%B8%AD%E0%B8%9A%E0%B9%80%E0%B8%88%E0%B8%81%E0%B8%97%E0%B8%B5%E0%B8%9F-%E0%B8%8B%E0%B8%B5">ไทย</a></li>
				<li class="interwiki-tg"><a href="http://tg.wikipedia.org/wiki/Objective-C">Тоҷикӣ</a></li>
				<li class="interwiki-tr"><a href="http://tr.wikipedia.org/wiki/Objective-C">Türkçe</a></li>
				<li class="interwiki-uk"><a href="http://uk.wikipedia.org/wiki/Objective_C">Українська</a></li>
				<li class="interwiki-zh"><a href="http://zh.wikipedia.org/wiki/Objective-C">中文</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 24 March 2009, at 19:38.</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv124 in 0.057 secs. --></body></html>
