<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Memory leak,Articles lacking sources from July 2008,Ada (programming language),AmigaOS,BoundsChecker,Buffer overflow,C++,C (programming language),C Sharp programming language,Cache,Computer multitasking" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Memory_leak&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Memory_leak&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Memory leak - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Memory_leak";
		var wgTitle = "Memory leak";
		var wgAction = "view";
		var wgArticleId = "19609";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 280812806;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
<style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-c .de1, .source-c .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-c  {}
.source-c .head {}
.source-c .foot {}
.source-c .imp {font-weight: bold; color: red;}
.source-c .ln-xtra {color: #cc0; background-color: #ffc;}
.source-c li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-c li.li2 {font-weight: bold;}
.source-c .kw1 {color: #b1b100;}
.source-c .kw2 {color: #000000; font-weight: bold;}
.source-c .kw3 {color: #000066;}
.source-c .kw4 {color: #993333;}
.source-c .co1 {color: #808080; font-style: italic;}
.source-c .co2 {color: #339933;}
.source-c .coMULTI {color: #808080; font-style: italic;}
.source-c .es0 {color: #000099; font-weight: bold;}
.source-c .br0 {color: #66cc66;}
.source-c .st0 {color: #ff0000;}
.source-c .nu0 {color: #cc66cc;}
.source-c .me1 {color: #202020;}
.source-c .me2 {color: #202020;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-cpp {line-height: normal;}
.source-cpp li, .source-cpp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for cpp
 * CSS class: source-cpp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-cpp .de1, .source-cpp .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-cpp  {}
.source-cpp .head {}
.source-cpp .foot {}
.source-cpp .imp {font-weight: bold; color: red;}
.source-cpp .ln-xtra {color: #cc0; background-color: #ffc;}
.source-cpp li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-cpp li.li2 {font-weight: bold;}
.source-cpp .kw1 {color: #0000ff;}
.source-cpp .kw2 {color: #0000ff;}
.source-cpp .kw3 {color: #0000dd;}
.source-cpp .kw4 {color: #0000ff;}
.source-cpp .co1 {color: #ff0000;}
.source-cpp .co2 {color: #339900;}
.source-cpp .coMULTI {color: #ff0000; font-style: italic;}
.source-cpp .es0 {color: #666666; font-weight: bold;}
.source-cpp .br0 {color: #000000;}
.source-cpp .st0 {color: #666666;}
.source-cpp .nu0 {color: #0000dd;}
.source-cpp .me1 {color: #00eeff;}
.source-cpp .me2 {color: #00eeff;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-vb {line-height: normal;}
.source-vb li, .source-vb pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for vb
 * CSS class: source-vb, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-vb .de1, .source-vb .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-vb  {}
.source-vb .head {}
.source-vb .foot {}
.source-vb .imp {font-weight: bold; color: red;}
.source-vb .ln-xtra {color: #cc0; background-color: #ffc;}
.source-vb li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-vb li.li2 {font-weight: bold;}
.source-vb .kw1 {color: #b1b100;}
.source-vb .co1 {color: #808080;}
.source-vb .es0 {color: #000099;}
.source-vb .br0 {color: #66cc66;}
.source-vb .st0 {color: #ff0000;}
.source-vb .nu0 {color: #cc66cc;}
.source-vb .me1 {color: #66cc66;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style>		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Memory_leak skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Memory leak</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<table class="metadata plainlinks ambox ambox-content" style="">
<tr>
<td class="mbox-image">
<div style="width: 52px;"><a href="/wiki/File:Question_book-new.svg" class="image" title="Question book-new.svg"><img alt="" src="http://upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/50px-Question_book-new.svg.png" width="50" height="39" border="0" /></a></div>
</td>
<td class="mbox-text" style="">This article <b>does not <a href="/wiki/Wikipedia:Citing_sources" title="Wikipedia:Citing sources">cite</a> any <a href="/wiki/Wikipedia:Verifiability" title="Wikipedia:Verifiability">references or sources</a></b>. Please help <a href="http://en.wikipedia.org/w/index.php?title=Memory_leak&amp;action=edit" class="external text" title="http://en.wikipedia.org/w/index.php?title=Memory_leak&amp;action=edit" rel="nofollow">improve this article</a> by adding citations to <a href="/wiki/Wikipedia:Reliable_sources" title="Wikipedia:Reliable sources">reliable sources</a> (ideally, using <i><a href="/wiki/Wikipedia:Footnotes" title="Wikipedia:Footnotes">inline citations</a></i>). Unsourced material may be <a href="/wiki/Template:Fact" title="Template:Fact">challenged</a> and <a href="/wiki/Wikipedia:BURDEN" title="Wikipedia:BURDEN" class="mw-redirect">removed</a>. <small><i>(July 2008)</i></small></td>
</tr>
</table>
<p>In <a href="/wiki/Computer_science" title="Computer science">computer science</a>, a <b>memory leak</b> is a particular type of unintentional memory consumption by a <a href="/wiki/Computer_program" title="Computer program">computer program</a> where the program fails to release <a href="/wiki/Dynamic_memory" title="Dynamic memory" class="mw-redirect">memory</a> when no longer needed. This condition is normally the result of a bug in a program that prevents it from freeing up memory that it no longer needs.</p>
<p>This term has the potential to be confusing, since memory is not physically lost from the computer. Rather, memory is allocated to a program, and that program subsequently loses the ability to access it due to program logic flaws.</p>
<p>A memory leak has symptoms similar to a number of other problems (see below) and generally can only be diagnosed by a programmer with access to the program <a href="/wiki/Source_code" title="Source code">source code</a>; however, many people refer to <i>any</i> unwanted increase in memory usage as a memory leak, even if this is not strictly accurate.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Consequences"><span class="tocnumber">1</span> <span class="toctext">Consequences</span></a></li>
<li class="toclevel-1"><a href="#A_layman.27s_example"><span class="tocnumber">2</span> <span class="toctext">A layman's example</span></a></li>
<li class="toclevel-1"><a href="#Programming_issues"><span class="tocnumber">3</span> <span class="toctext">Programming issues</span></a></li>
<li class="toclevel-1"><a href="#RAII"><span class="tocnumber">4</span> <span class="toctext">RAII</span></a></li>
<li class="toclevel-1"><a href="#Reference_counting_and_cyclic_references"><span class="tocnumber">5</span> <span class="toctext">Reference counting and cyclic references</span></a></li>
<li class="toclevel-1"><a href="#Effects"><span class="tocnumber">6</span> <span class="toctext">Effects</span></a></li>
<li class="toclevel-1"><a href="#Other_memory_consumers"><span class="tocnumber">7</span> <span class="toctext">Other memory consumers</span></a></li>
<li class="toclevel-1"><a href="#Simple_C_example"><span class="tocnumber">8</span> <span class="toctext">Simple C example</span></a></li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">9</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">10</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">11</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Consequences" id="Consequences"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Memory_leak&amp;action=edit&amp;section=1" title="Edit section: Consequences">edit</a>]</span> <span class="mw-headline">Consequences</span></h2>
<p>A memory leak can diminish the performance of the computer by reducing the amount of available memory. Eventually, in the worst case, too much of the available memory may become allocated and all or part of the system or device stops working correctly, the application fails, or the system slows down unacceptably due to <a href="/wiki/Thrash_(computer_science)" title="Thrash (computer science)">thrashing</a>.</p>
<p>Memory leaks may not be serious or even detectable by normal means. In modern operating systems, normal memory used by an application is released when the application terminates. This means that a memory leak in a program that only runs for a short time is rarely serious.</p>
<p>Cases where leaks are much more serious include:</p>
<ul>
<li>where the program is left running, and consumes more and more memory over time (such as background tasks, on servers, but especially in <a href="/wiki/Embedded_system" title="Embedded system">embedded devices</a> which may be left running for many years);</li>
<li>where new memory is allocated frequently, such as when rendering the frames of a computer game or animated video</li>
<li>where the program is able to request memory (e.g. <a href="/wiki/Shared_memory" title="Shared memory">shared memory</a>) that is not released, even when the program terminates;</li>
<li>where the leak is happening inside the operating system</li>
<li>where the leak is happening in a system critical driver</li>
<li>where memory is very limited e.g. in an <a href="/wiki/Embedded_system" title="Embedded system">embedded system</a> or portable device</li>
<li>where running on operating systems (such as <a href="/wiki/AmigaOS" title="AmigaOS">AmigaOS</a>) where memory may not be automatically released on termination, and if lost can only be reclaimed by a reboot</li>
</ul>
<p><a name="A_layman.27s_example" id="A_layman.27s_example"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Memory_leak&amp;action=edit&amp;section=2" title="Edit section: A layman's example">edit</a>]</span> <span class="mw-headline">A layman's example</span></h2>
<p>This example, written in <a href="/wiki/Pseudocode" title="Pseudocode">pseudocode</a>, is intended to show how a memory leak can come about, and its effects, without needing any programming knowledge.</p>
<p>The program in this case is part of some very simple software designed to control a lift (<a href="/wiki/Elevator" title="Elevator">elevator</a>). This part of the program is run whenever anyone inside the lift presses the button for a floor.</p>
<pre>
When a button is pressed:
  Get some memory, which will be used to remember the floor number
  Put the floor number into the memory
  Are we already on the target floor?
    If so, we have nothing to do: finished
    Otherwise:
      Wait until the lift is idle
      Go to the required floor
      Release the memory we used to remember the floor number
</pre>
<p>The memory leak would occur if the floor's number pressed is the same floor that the lift is on; the condition for releasing the memory would be skipped. Each time this case occurs, more memory would be leaked.</p>
<p>Cases like this wouldn't usually have any immediate effects. People do not often press the button for the floor they are already on, and in any case, the lift might have enough spare memory that this could happen a hundred or a thousand times. However, the lift will eventually run out of memory. This could take months or years, so it might never be discovered by even relatively thorough testing.</p>
<p>The consequences in this case would be unpleasant; at the very least, the lift would stop responding to requests to move to another floor. If the program needs memory to open the lift door, then someone may also be trapped inside, since there is no memory available for that door to open.</p>
<p>The memory leak would only last as long as the program was running. For example: if the lift's power were turned off the program would stop running. When power was turned on again, the program would restart and all the memory would be available again, and the slow process of leaking would start again.</p>
<p><a name="Programming_issues" id="Programming_issues"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Memory_leak&amp;action=edit&amp;section=3" title="Edit section: Programming issues">edit</a>]</span> <span class="mw-headline">Programming issues</span></h2>
<p>Memory leaks are a common error in <a href="/wiki/Programming" title="Programming" class="mw-redirect">programming</a>, especially when using <a href="/wiki/Programming_language" title="Programming language">languages</a> that have no built-in automatic <a href="/wiki/Garbage_collection_(computer_science)" title="Garbage collection (computer science)">garbage collection</a>, such as <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a> and <a href="/wiki/C%2B%2B" title="C++">C++</a>. Typically, a memory leak occurs because <a href="/wiki/Dynamic_memory_allocation" title="Dynamic memory allocation">dynamically allocated</a> memory has become <a href="/wiki/Unreachable_memory" title="Unreachable memory">unreachable</a>. The prevalence of memory leak <a href="/wiki/Software_bug" title="Software bug">bugs</a> has led to the development of a number of <a href="/wiki/Debugging" title="Debugging">debugging</a> <a href="/wiki/Programming_tool" title="Programming tool">tools</a> to detect unreachable memory. <i><a href="/wiki/IBM_Rational_Purify" title="IBM Rational Purify">IBM Rational Purify</a></i>, <i><a href="/wiki/BoundsChecker" title="BoundsChecker">BoundsChecker</a></i>, <i><a href="/wiki/Valgrind" title="Valgrind">Valgrind</a></i>, <i><a href="/wiki/Insure%2B%2B" title="Insure++">Insure++</a></i> and <i><a href="/wiki/Memwatch" title="Memwatch">memwatch</a></i> are some of the more popular <a href="/wiki/Memory_debugger" title="Memory debugger">memory debuggers</a> for C and C++ programs. Garbage collection capabilities can be added to any programming language that lacks it as a built-in feature, and libraries for doing this are available for C and C++ programs.</p>
<p>Languages that provide automatic memory management, like <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a>, <a href="/wiki/C_Sharp_programming_language" title="C Sharp programming language" class="mw-redirect">C#</a>, <a href="/wiki/Visual_Basic_.NET" title="Visual Basic .NET">VB.NET</a> or <a href="/wiki/LISP_programming_language" title="LISP programming language" class="mw-redirect">LISP</a>, are not immune to memory leaks. For example, a program could continue to add entries to a list, but then forget to remove them when done. The memory manager would not know if the entry will be referenced again, unless the program does something to indicate it is no longer needed. Normally, this is done by removing any <a href="/wiki/Reference_(computer_science)" title="Reference (computer science)">reference</a> to the item in question. This is similar to people placing items on a pile or in a drawer, and then forgetting about them.</p>
<p>Although the <a href="/wiki/Memory_manager" title="Memory manager">memory manager</a> can recover memory that has become unreachable and therefore logically useless, it cannot free memory that is still reachable and therefore potentially still useful. Modern memory managers therefore provide techniques for programmers to semantically mark memory with varying levels of usefulness, which correspond to varying levels of <i>reachability</i>. The <a href="/wiki/Memory_manager" title="Memory manager">memory manager</a> does <b>not</b> free an object that is strongly reachable. An object is strongly reachable if it is reachable either directly by a strong reference or indirectly by a chain of strong references. (A <i>strong reference</i> is a reference that, unlike a <a href="/wiki/Weak_reference" title="Weak reference">weak reference</a>, prevents an object from being garbage collected.) To prevent this type of memory leak, the developer is responsible for cleaning up references after use, typically by setting the reference to <a href="/wiki/Null_(computer_programming)" title="Null (computer programming)">null</a> once it is no longer needed and, if necessary, by unregistering any <a href="/wiki/Event_listener" title="Event listener" class="mw-redirect">event listeners</a> that maintain strong references to the object.</p>
<p>In general, automatic memory management is more robust and convenient for developers, as they don't need to implement freeing routines or worry about the sequence in which cleanup is performed or be concerned about whether or not an object is still referenced. It is easier for a programmer to know when a reference is no longer needed than to know when an object is no longer referenced. However, automatic memory management can impose a performance overhead, and it does not eliminate all of the programming errors that cause memory leaks.</p>
<p><a name="RAII" id="RAII"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Memory_leak&amp;action=edit&amp;section=4" title="Edit section: RAII">edit</a>]</span> <span class="mw-headline">RAII</span></h2>
<div class="rellink noprint relarticle mainarticle">Main article: <a href="/wiki/Resource_Acquisition_Is_Initialization" title="Resource Acquisition Is Initialization">Resource Acquisition Is Initialization</a></div>
<p><b>RAII</b>, short for <a href="/wiki/Resource_Acquisition_Is_Initialization" title="Resource Acquisition Is Initialization">Resource Acquisition Is Initialization</a>, is an approach to the problem commonly taken in <a href="/wiki/C%2B%2B" title="C++">C++</a>, <a href="/wiki/D_programming_language" title="D programming language" class="mw-redirect">D</a>, and <a href="/wiki/Ada_(programming_language)" title="Ada (programming language)">Ada</a>. It involves associating scoped objects with the acquired resources, and automatically releasing the resources once the objects are out of scope. Compare the following C and C++ examples:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="coMULTI">/* C version */</span>
<span class="co2">#include &lt;stdlib.h&gt;</span>
 
<span class="kw4">void</span> f<span class="br0">(</span><span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw4">int</span> *array = calloc<span class="br0">(</span><span class="nu0">1024</span>, <span class="kw4">sizeof</span><span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span><span class="br0">)</span>;
    <span class="coMULTI">/* Do some work with array here */</span>
    free<span class="br0">(</span>array<span class="br0">)</span>;
<span class="br0">}</span>
</pre></div>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
<span class="co1">// C++ version</span>
<span class="co2">#include &lt;vector&gt;</span>
 
<span class="kw4">void</span> f<span class="br0">(</span><span class="br0">)</span>
<span class="br0">{</span>
    std::<span class="me2">vector</span>&lt;int&gt; array<span class="br0">(</span><span class="nu0">1024</span><span class="br0">)</span>;
    <span class="co1">// Do some work with array here</span>
<span class="br0">}</span>
</pre></div>
<p>The C version, as implemented in the example, requires explicit deallocation; the array is <a href="/wiki/Dynamic_memory_allocation" title="Dynamic memory allocation">allocated from the heap</a>, and continues to exist until explicitly freed. It should be noted, however, that this is only an example. C has the concept of automatic storage duration, and it would be perfectly possible, for example, to declare the <code>array</code> as a local array of integers, which would be deallocated automatically when leaving the function.</p>
<p>The C++ version requires no explicit deallocation; it will always occur automatically as soon as the object <code>array</code> goes out of scope. This avoids the overhead of <a href="/wiki/Garbage_collection" title="Garbage collection">garbage collection</a> schemes, and can even be applied to resources other than memory such as file handles, which mark-and-sweep garbage collection does not handle as gracefully. However, using RAII correctly is not as easy as garbage collection and it has its own pitfalls. For instance, in C++, if one is not careful, it is possible to create <a href="/wiki/Dangling_pointer" title="Dangling pointer">dangling pointers</a> (or references) by returning data by reference, only to have that data be deleted when its containing object goes out of scope.</p>
<p>D uses a combination of RAII and garbage collection, employing automatic destruction when it is clear that an object cannot be accessed outside its original scope, and garbage collection otherwise.</p>
<p><a name="Reference_counting_and_cyclic_references" id="Reference_counting_and_cyclic_references"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Memory_leak&amp;action=edit&amp;section=5" title="Edit section: Reference counting and cyclic references">edit</a>]</span> <span class="mw-headline">Reference counting and cyclic references</span></h2>
<p>More modern garbage collection schemes are often based on a notion of reachability - if you don't have a usable reference to the memory in question, it can be collected. Other garbage collection schemes can be based on <a href="/wiki/Reference_counting" title="Reference counting">reference counting</a>, where an object is responsible for keeping track of how many references are pointing to it. If the number goes down to zero, the object is expected to release itself and allow its memory to be reclaimed. The flaw with this model is that it doesn't cope with cyclic references, and this is why nowadays we are prepared to accept the burden of the more costly mark and sweep type of systems.</p>
<p>The following code illustrates the canonical reference-counting memory leak.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-vb">
<span class="kw1">Dim</span> A, B
<span class="kw1">Set</span> A = <span class="kw1">CreateObject</span><span class="br0">(</span><span class="st0">"Some.Thing"</span><span class="br0">)</span>
<span class="kw1">Set</span> B = <span class="kw1">CreateObject</span><span class="br0">(</span><span class="st0">"Some.Thing"</span><span class="br0">)</span>
<span class="co1">' At this point, the two objects each have one reference,</span>
<span class="kw1">Set</span> A.<span class="me1">member</span> = B
<span class="kw1">Set</span> B.<span class="me1">member</span> = A
<span class="co1">' Now they each have two references. </span>
<span class="kw1">Set</span> A = <span class="kw1">Nothing</span>
<span class="co1">' You could still get out of it...</span>
<span class="kw1">Set</span> B = <span class="kw1">Nothing</span>
<span class="co1">' You now have a memory leak.</span>
</pre></div>
<p>In practice, this trivial example would be spotted straight away and fixed. In most real examples, the cycle of references spans more than two objects, and is more difficult to detect.</p>
<p>A well-known example of this kind of leak came to prominence with the rise of AJAX programming techniques in web browsers. Javascript code which associated a DOM element with an event handler and failed to remove the reference before exiting, would leak memory. (AJAX web pages keep a given DOM alive for a lot longer than traditional web pages, so this leak was much more apparent.)</p>
<p><a name="Effects" id="Effects"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Memory_leak&amp;action=edit&amp;section=6" title="Edit section: Effects">edit</a>]</span> <span class="mw-headline">Effects</span></h2>
<p>If a program has a memory leak and its memory usage is steadily increasing, there will not usually be an immediate symptom. Every physical system has a finite amount of memory, and if the memory leak is not contained (for example, by restarting the program with the leak) it will sooner or later start to cause problems.</p>
<p>Most modern consumer desktop <a href="/wiki/Operating_systems" title="Operating systems" class="mw-redirect">operating systems</a> have both <a href="/wiki/Main_memory" title="Main memory" class="mw-redirect">main memory</a> which is physically housed in RAM microchips, and <a href="/wiki/Secondary_storage" title="Secondary storage" class="mw-redirect">secondary storage</a> such as a <a href="/wiki/Hard_drive" title="Hard drive" class="mw-redirect">hard drive</a>. Memory allocation is dynamic - each process gets as much memory as it requests. Active <a href="/wiki/Paging" title="Paging">pages</a> are transferred into main memory for fast access; inactive pages are pushed out to secondary storage to make room, as needed. When a single process starts consuming a large amount of memory, it usually occupies more and more of main memory, pushing other programs out to secondary storage - usually significantly slowing performance of the system. Even if the leaking program is terminated, it may take some time for other programs to swap back into main memory, and for performance to return to normal.</p>
<p>When all the memory on a system is exhausted (whether there is virtual memory or only main memory, such as on an embedded system) any attempt to allocate more memory will fail. This usually causes the program attempting to allocate the memory to terminate itself, or to generate a <a href="/wiki/Segmentation_fault" title="Segmentation fault">segmentation fault</a>. Some programs are designed to recover from this situation (possibly by falling back on pre-reserved memory). The first program to experience the out-of-memory may or may not be the program that has the memory leak.</p>
<p>Some <a href="/wiki/Computer_multitasking" title="Computer multitasking">multi-tasking</a> operating systems have special mechanisms to deal with an out-of-memory condition, such as killing processes at random (which may affect "innocent" processes), or killing the largest process in memory (which presuambly is the one causing the problem). Some operating systems have a per-process memory limit, to prevent any one program from hogging all of the memory on the system. The disadvantage to this arrangement is that the operating system sometimes must be re-configured to allow proper operation of programs that legitimately require large amounts of memory, such as those dealing with graphics, video, or scientific calculations.</p>
<p>If the memory leak is in the <a href="/wiki/Kernel_(computer_science)" title="Kernel (computer science)" class="mw-redirect">kernel</a>, the operating system itself will likely fail. Computers without sophisticated memory management, such as embedded systems, may also completely fail from a persistent memory leak.</p>
<p>Publicly accessible systems such as <a href="/wiki/Web_server" title="Web server">web servers</a> or <a href="/wiki/Router" title="Router">routers</a> are prone to <a href="/wiki/Dos_attack" title="Dos attack" class="mw-redirect">denial-of-service attacks</a> if an attacker discovers a sequence of operations which can trigger a leak. Such a sequence is known as an <a href="/wiki/Exploit_(computer_security)" title="Exploit (computer security)">exploit</a>.</p>
<p><a name="Other_memory_consumers" id="Other_memory_consumers"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Memory_leak&amp;action=edit&amp;section=7" title="Edit section: Other memory consumers">edit</a>]</span> <span class="mw-headline">Other memory consumers</span></h2>
<p>Note that constantly increasing memory usage is not necessarily evidence of a memory leak. Some applications will store ever increasing amounts of information in memory (e.g. as a <a href="/wiki/Cache" title="Cache">cache</a>). If the cache can grow so large as to cause problems, this may be a programming or design error, but is not a memory leak as the information remains nominally in use. In other cases, programs may require an unreasonably large amount of memory because the programmer has assumed memory is always sufficient for a particular task; for example, a graphics file processor might start by reading the entire contents of an image file and storing it all into memory, something that is not viable where a very large image exceeds available memory.</p>
<p>To put it another way, a memory leak arises from a particular kind of programming error, and without access to the program code, someone seeing symptoms can only guess that there <i>might</i> be a memory leak. It would be better to use terms such as "constantly increasing memory use" where no such inside knowledge exists.</p>
<p><a name="Simple_C_example" id="Simple_C_example"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Memory_leak&amp;action=edit&amp;section=8" title="Edit section: Simple C example">edit</a>]</span> <span class="mw-headline">Simple C example</span></h2>
<p>The following C function deliberately leaks memory by losing the pointer to the allocated memory. Since the program loops forever calling the defective function, <code>malloc()</code> will eventually fail (returning <code>NULL</code>) when no more memory is available to the program. The address of each allocation is stored in a local variable that only exists inside the function; this address is lost when the function returns, so it is impossible to free any of the previously allocated blocks.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="co2">#include &lt;stdio.h&gt;</span>
<span class="co2">#include &lt;stdlib.h&gt;</span>
 
<span class="kw4">void</span> f<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>
<span class="br0">{</span>
     <span class="kw4">void</span>* s;
     s = malloc<span class="br0">(</span><span class="nu0">50</span><span class="br0">)</span>; <span class="coMULTI">/* get memory */</span>
     <span class="kw1">return</span>;         <span class="coMULTI">/* memory leak - see note below */</span> 
     <span class="coMULTI">/* 
      * Memory was available and pointed to by s, but not saved.
      * After this function returns, the pointer is destroyed, 
      * and the allocated memory becomes unreachable.
      *
      * To "fix" this code, either the f() function itself
      * needs to add "free(s)" somewhere or the s needs
      * to be returned from the f() and the caller of f() needs
      * to do the free().
      */</span>
<span class="br0">}</span>
 
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>
<span class="br0">{</span>
     <span class="coMULTI">/* this is an infinite loop calling the above function */</span>
     <span class="kw1">while</span> <span class="br0">(</span><span class="nu0">1</span><span class="br0">)</span> f<span class="br0">(</span><span class="br0">)</span>; <span class="coMULTI">/* Malloc will return NULL sooner or later, due to lack of memory */</span>
     <span class="kw1">return</span> <span class="nu0">0</span>;
<span class="br0">}</span>
</pre></div>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Memory_leak&amp;action=edit&amp;section=9" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<ul>
<li><a href="/wiki/Buffer_overflow" title="Buffer overflow">Buffer overflow</a></li>
<li><a href="/wiki/Memory_management" title="Memory management">Memory management</a></li>
<li><a href="/wiki/Memory_debugger" title="Memory debugger">Memory debugger</a></li>
</ul>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Memory_leak&amp;action=edit&amp;section=10" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<table class="metadata plainlinks ambox ambox-style" style="">
<tr>
<td class="mbox-image">
<div style="width: 52px;"><a href="/wiki/File:Text_document_with_red_question_mark.svg" class="image" title="Text document with red question mark.svg"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/a/a4/Text_document_with_red_question_mark.svg/40px-Text_document_with_red_question_mark.svg.png" width="40" height="40" border="0" /></a></div>
</td>
<td class="mbox-text" style="">This article includes a <a href="/wiki/Wikipedia:Citing_sources" title="Wikipedia:Citing sources">list of references</a> or <a href="/wiki/Wikipedia:External_links" title="Wikipedia:External links">external links</a>, but <b>its sources remain unclear because it lacks <a href="/wiki/Wikipedia:Citing_sources#Inline_citations" title="Wikipedia:Citing sources">inline citations</a>.</b> Please <a href="/wiki/Wikipedia:WikiProject_Fact_and_Reference_Check" title="Wikipedia:WikiProject Fact and Reference Check">improve</a> this article by introducing more precise citations <a href="/wiki/Wikipedia:When_to_cite" title="Wikipedia:When to cite">where appropriate</a>. <small><i>(September 2007)</i></small></td>
</tr>
</table>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Memory_leak&amp;action=edit&amp;section=11" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<ul>
<li><a href="http://msdn2.microsoft.com/en-us/library/Aa293901(VS.60).aspx" class="external text" title="http://msdn2.microsoft.com/en-us/library/Aa293901(VS.60).aspx" rel="nofollow">Detecting a Memory Leak</a> (Using MFC Debugging Support)</li>
<li>Article "<a href="http://linuxjournal.com/article.php?sid=6556" class="external text" title="http://linuxjournal.com/article.php?sid=6556" rel="nofollow">Memory Leak Detection in C++</a>" by Cal Erickson</li>
<li>Article "<a href="http://linuxjournal.com/article.php?sid=6059" class="external text" title="http://linuxjournal.com/article.php?sid=6059" rel="nofollow">Memory Leak Detection in Embedded Systems</a>" by Cal Erickson</li>
<li><a href="http://jb2works.com/memoryleak/index.html" class="external text" title="http://jb2works.com/memoryleak/index.html" rel="nofollow">Why doesn't my application release the memory?</a> (Java FAQ)</li>
<li>Article "<a href="http://developer.kde.org/documentation/other/memoryleaks.html" class="external text" title="http://developer.kde.org/documentation/other/memoryleaks.html" rel="nofollow">Fixing Memory Leaks in KDE</a>" by <a href="/wiki/Harri_Porten" title="Harri Porten">Harri Porten</a></li>
<li>Article "<a href="http://bravobug.com/news/?p=116" class="external text" title="http://bravobug.com/news/?p=116" rel="nofollow">Finding and Fixing Memory Leaks</a> on <a href="/wiki/Mac_OS_X" title="Mac OS X">Mac OS X</a>"</li>
</ul>


<!-- 
NewPP limit report
Preprocessor node count: 327/1000000
Post-expand include size: 7004/2048000 bytes
Template argument size: 2655/2048000 bytes
Expensive parser function count: 1/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:19609-0!1!0!default!!en!2 and timestamp 20090408205924 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Memory_leak">http://en.wikipedia.org/wiki/Memory_leak</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Programming_bugs" title="Category:Programming bugs">Programming bugs</a></span> | <span dir='ltr'><a href="/wiki/Category:Software_anomalies" title="Category:Software anomalies">Software anomalies</a></span></div><div id="mw-hidden-catlinks" class="mw-hidden-cats-hidden">Hidden categories:&#32;<span dir='ltr'><a href="/wiki/Category:Articles_lacking_sources_from_July_2008" title="Category:Articles lacking sources from July 2008">Articles lacking sources from July 2008</a></span> | <span dir='ltr'><a href="/wiki/Category:All_articles_lacking_sources" title="Category:All articles lacking sources">All articles lacking sources</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_lacking_in-text_citations_from_September_2007" title="Category:Articles lacking in-text citations from September 2007">Articles lacking in-text citations from September 2007</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Memory_leak" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Memory_leak" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Memory_leak&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Memory_leak&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Memory_leak" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Memory_leak" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Memory_leak" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Memory_leak&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Memory_leak&amp;oldid=280812806" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Memory_leak&amp;id=280812806">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-zh-yue"><a href="http://zh-yue.wikipedia.org/wiki/%E6%BC%8F%E8%A8%98%E6%86%B6">粵語</a></li>
				<li class="interwiki-ar"><a href="http://ar.wikipedia.org/wiki/%D8%AA%D8%B3%D8%B1%D8%A8_%D8%A7%D9%84%D8%B0%D8%A7%D9%83%D8%B1%D8%A9">العربية</a></li>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/Speicherleck">Deutsch</a></li>
				<li class="interwiki-es"><a href="http://es.wikipedia.org/wiki/Fuga_de_memoria">Español</a></li>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Fuite_de_m%C3%A9moire">Français</a></li>
				<li class="interwiki-ko"><a href="http://ko.wikipedia.org/wiki/%EB%A9%94%EB%AA%A8%EB%A6%AC_%EB%88%84%EC%88%98">한국어</a></li>
				<li class="interwiki-it"><a href="http://it.wikipedia.org/wiki/Memory_leak">Italiano</a></li>
				<li class="interwiki-he"><a href="http://he.wikipedia.org/wiki/%D7%93%D7%9C%D7%99%D7%A4%D7%AA_%D7%96%D7%99%D7%9B%D7%A8%D7%95%D7%9F">עברית</a></li>
				<li class="interwiki-lt"><a href="http://lt.wikipedia.org/wiki/Atminties_nutek%C4%97jimas">Lietuvių</a></li>
				<li class="interwiki-nl"><a href="http://nl.wikipedia.org/wiki/Geheugenlek">Nederlands</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/%E3%83%A1%E3%83%A2%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%AF">日本語</a></li>
				<li class="interwiki-pl"><a href="http://pl.wikipedia.org/wiki/Wyciek_pami%C4%99ci">Polski</a></li>
				<li class="interwiki-pt"><a href="http://pt.wikipedia.org/wiki/Vazamento_de_mem%C3%B3ria">Português</a></li>
				<li class="interwiki-ru"><a href="http://ru.wikipedia.org/wiki/%D0%A3%D1%82%D0%B5%D1%87%D0%BA%D0%B0_%D0%BF%D0%B0%D0%BC%D1%8F%D1%82%D0%B8">Русский</a></li>
				<li class="interwiki-sk"><a href="http://sk.wikipedia.org/wiki/Memory_leak">Slovenčina</a></li>
				<li class="interwiki-fi"><a href="http://fi.wikipedia.org/wiki/Muistivuoto">Suomi</a></li>
				<li class="interwiki-zh"><a href="http://zh.wikipedia.org/wiki/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F">中文</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 31 March 2009, at 06:38 (UTC).</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv61 in 0.101 secs. --></body></html>
