<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Covariance and contravariance (computer science),Array,C++,C Sharp (programming language),Category (mathematics),Category theory,Class hierarchy,Compiler,Covariance and contravariance of vectors,D (programming language),Eiffel" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Covariance_and_contravariance_(computer_science)&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Covariance_and_contravariance_(computer_science)&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Covariance and contravariance (computer science) - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Covariance_and_contravariance_(computer_science)";
		var wgTitle = "Covariance and contravariance (computer science)";
		var wgAction = "view";
		var wgArticleId = "1104704";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 287616456;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Covariance_and_contravariance_computer_science skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Covariance and contravariance (computer science)</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<p>Within the <a href="/wiki/Type_system" title="Type system">type system</a> of a <a href="/wiki/Programming_language" title="Programming language">programming language</a>, an operator from types to types is <b>covariant</b> if it preserves the <a href="/wiki/Subtype" title="Subtype">ordering, ≤, of types</a>, which orders types from more specific ones to more generic ones; it is <b>contravariant</b> if it reverses this ordering. If neither of these apply, the operator is <i>invariant</i>. These terms come from <a href="/wiki/Category_theory" title="Category theory">category theory</a>, which has a general definition of covariance and contravariance that unifies the computer science definition of these terms with the definition used in <a href="/wiki/Covariance_and_contravariance_of_vectors" title="Covariance and contravariance of vectors">vector spaces</a>.</p>
<p>This distinction is important in considering argument and return types of methods in <a href="/wiki/Class_hierarchy" title="Class hierarchy">class hierarchies</a>. In <a href="/wiki/Object-oriented_languages" title="Object-oriented languages" class="mw-redirect">object-oriented languages</a> such as C++, if class <i>B</i> is a subtype of class <i>A</i>, then all member functions of <i>B</i> must return the same or narrower set of types as <i>A</i>; the return type is said to be covariant. On the other hand, the member functions of <i>B</i> must take the same or broader set of arguments compared with the member functions of <i>A</i>; the argument type is said to be contravariant. The problem for instances of B is how to be perfectly <a href="/wiki/Liskov_substitution_principle" title="Liskov substitution principle">substitutable</a> for instances of A. The only way to guarantee type safety and substitutability is to be equally or more liberal than A on inputs, and to be equally or more strict than A on outputs. Note that not all programming languages guarantee both properties in every context, and that some are unnecessarily strict; they are said not to support covariance or contravariance <i>in a given context</i>; the behavior of some programming languages is discussed below.</p>
<p>Typical examples:</p>
<ul>
<li>The operator which constructs <a href="/wiki/Array" title="Array">array types</a> from element types is usually covariant on the base type: since <i>String</i> ≤ <i>Object</i> then <i>ArrayOf(String)</i> ≤ <i>ArrayOf(Object)</i>. Note that this is only correct (i.e. <a href="/wiki/Type_safe" title="Type safe" class="mw-redirect">type safe</a>) if the array is immutable; if insert and remove operators are permitted, then the insert operator is covariant (e.g. one can insert a <i>String</i> into an <i>ArrayOf(Object)</i>) and the remove operator is contravariant (e.g. one can remove an <i>Object</i> from an <i>ArrayOf(String)</i>). Since the mutators have conflicting variance, mutable arrays should be <i>invariant</i> on the base type.</li>
<li>A function with a parameter of type <i>T</i> (defined as <i>fun f</i> (<i>x&#160;: T</i>)&#160;: <i>Integer</i>) can be replaced by a function <i>g</i> (defined as <i>fun g</i> (<i>x&#160;: S</i>)&#160;: <i>Integer</i>) if <i>T</i> ≤ <i>S</i>. In other words, if <i>g</i> <i>cares less</i> about the type of its parameter, then it can replace <i>f</i> anywhere, since both return an <i>Integer</i>. So, in a language accepting function arguments, <i>g</i> ≤ <i>f</i> and the type of the parameter to <i>f</i> is said to be contravariant.</li>
<li>In the general case, the type of the result is covariant.</li>
</ul>
<p>In <a href="/wiki/Object-oriented_programming" title="Object-oriented programming">object-oriented programming</a>, substitution is also implicitly invoked by <i><a href="/wiki/Method_overriding_(programming)" title="Method overriding (programming)">overriding</a></i> <a href="/wiki/Method_(computer_science)" title="Method (computer science)">methods</a> in <a href="/wiki/Subclass_(computer_science)" title="Subclass (computer science)">subclasses</a>: the new method can be used where the old method was invoked in the original code. Programming languages vary widely on their allowed forms of overriding, and on the variance of overridden methods' types.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Origin_of_the_terms"><span class="tocnumber">1</span> <span class="toctext">Origin of the terms</span></a></li>
<li class="toclevel-1"><a href="#Need_for_covariant_argument_types.3F"><span class="tocnumber">2</span> <span class="toctext">Need for covariant argument types?</span></a></li>
<li class="toclevel-1"><a href="#Avoiding_the_need_for_covariant_argument_types"><span class="tocnumber">3</span> <span class="toctext">Avoiding the need for covariant argument types</span></a></li>
<li class="toclevel-1"><a href="#Overview_of_covariance.2Fcontravariance_in_some_programming_languages"><span class="tocnumber">4</span> <span class="toctext">Overview of covariance/contravariance in some programming languages</span></a>
<ul>
<li class="toclevel-2"><a href="#C.2B.2B"><span class="tocnumber">4.1</span> <span class="toctext">C++</span></a></li>
<li class="toclevel-2"><a href="#Arrays_in_C.23_and_Java"><span class="tocnumber">4.2</span> <span class="toctext">Arrays in C# and Java</span></a></li>
<li class="toclevel-2"><a href="#C.23"><span class="tocnumber">4.3</span> <span class="toctext">C#</span></a></li>
<li class="toclevel-2"><a href="#D"><span class="tocnumber">4.4</span> <span class="toctext">D</span></a></li>
<li class="toclevel-2"><a href="#Java"><span class="tocnumber">4.5</span> <span class="toctext">Java</span></a></li>
<li class="toclevel-2"><a href="#Eiffel"><span class="tocnumber">4.6</span> <span class="toctext">Eiffel</span></a></li>
<li class="toclevel-2"><a href="#Nemerle"><span class="tocnumber">4.7</span> <span class="toctext">Nemerle</span></a></li>
<li class="toclevel-2"><a href="#REALbasic"><span class="tocnumber">4.8</span> <span class="toctext">REALbasic</span></a></li>
<li class="toclevel-2"><a href="#Scala"><span class="tocnumber">4.9</span> <span class="toctext">Scala</span></a></li>
<li class="toclevel-2"><a href="#Sather"><span class="tocnumber">4.10</span> <span class="toctext">Sather</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">5</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">6</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">7</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Origin_of_the_terms" id="Origin_of_the_terms"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Covariance_and_contravariance_(computer_science)&amp;action=edit&amp;section=1" title="Edit section: Origin of the terms">edit</a>]</span> <span class="mw-headline">Origin of the terms</span></h2>
<p>The origin of these terms is in <a href="/wiki/Category_(mathematics)" title="Category (mathematics)">category theory</a>, where the types in the <a href="/wiki/Type_system" title="Type system">type system</a> form a category <i>C</i>, with arrows representing the subtype relationship. The subtype relationship supposedly reflects the <i>substitution principle</i>: that any expression of type <i>t</i> can be substituted by an expression of type <i>s</i> if <i>s</i> ≤ <i>t</i>.</p>
<p>Defining a function that accepts type <i>p</i> and returns type <i>r</i> creates a new type <i>p</i> → <i>r</i> in the type system which the new function name is associated with. This <i>function definition</i> operator is actually a <a href="/wiki/Functor" title="Functor">functor</a> <i>F</i>&#160;: <i>C</i> × <i>C</i> → <i>C</i> that creates the said type. From the substitution principle above, this functor must be <a href="/wiki/Functor#Covariance_and_contravariance" title="Functor">contravariant</a> in the first argument and <a href="/wiki/Functor#Covariance_and_contravariance" title="Functor">covariant</a> in the second.<sup id="cite_ref-0" class="reference"><a href="#cite_note-0" title=""><span>[</span>1<span>]</span></a></sup></p>
<p><a name="Need_for_covariant_argument_types.3F" id="Need_for_covariant_argument_types.3F"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Covariance_and_contravariance_(computer_science)&amp;action=edit&amp;section=2" title="Edit section: Need for covariant argument types?">edit</a>]</span> <span class="mw-headline">Need for covariant argument types?</span></h2>
<p>In many strictly-typed languages (with the notable exception of <a href="/wiki/Eiffel" title="Eiffel">Eiffel</a>, see <a href="#Eiffel" title="">below</a>), subclassing must allow for substitution. That is, a child class can always stand in for a parent class. This places restrictions on the sorts of relationships that subclassing can represent. In particular, it means that arguments to member functions can only be contravariant and return types can only be covariant, as explained in previous section.</p>
<p>This creates problems in some situations, where argument types should be covariant to model real-life requirements. Suppose you have a class representing a person. A person can see the doctor, so this class might have a method <code>virtual void Person::see(Doctor d)</code>. Now suppose you want to make a subclass of the <code>Person</code> class, <code>Child</code>. That is, a <code>Child</code> is a <code>Person</code>. One might then like to make a subclass of <code>Doctor</code>, <code>Pediatrician</code>. If children only visit pediatricians, we would like to enforce that in the type system. However, a naive implementation fails: because a <code>Child</code> is a <code>Person</code>, <code>Child::see(d)</code> must take any <code>Doctor</code>, not just a <code>Pediatrician</code>.</p>
<p>We could try moving the <code>see()</code> method to the <code>Doctor</code> class hierarchy, but we would have the same problem: If a <code>Doctor</code> could see a <code>Person</code> and a <code>Child</code> is a <code>Person</code>, then there is still no way to enforce that a <code>Child</code> must see a <code>Pediatrician</code> and that a <code>Person</code> who is not a <code>Child</code> cannot see a <code>Pediatrician</code> and must see another <code>Doctor</code>.</p>
<p>In this case, the <a href="/wiki/Visitor_pattern" title="Visitor pattern">visitor pattern</a> could be used to enforce this relationship. Another way to solve the problems, in <a href="/wiki/C%2B%2B" title="C++">C++</a>, is using generic programming (see <a href="#C.2B.2B" title="">below</a>).</p>
<p><a name="Avoiding_the_need_for_covariant_argument_types" id="Avoiding_the_need_for_covariant_argument_types"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Covariance_and_contravariance_(computer_science)&amp;action=edit&amp;section=3" title="Edit section: Avoiding the need for covariant argument types">edit</a>]</span> <span class="mw-headline">Avoiding the need for covariant argument types</span></h2>
<p>The problem arises since different object oriented languages have different strategies to select the actual code used in a particular context and the first parameter is the object itself (which is <i>not</i> contravariant).</p>
<p>However, Castagna<sup id="cite_ref-1" class="reference"><a href="#cite_note-1" title=""><span>[</span>2<span>]</span></a></sup> showed that all depends on the correct method fetching algorithm: types used for runtime selection of the right method are covariant; types not used for runtime selection of the method are contravariant. In Castagna's work, examples which would suggest the usage of covariance for parameter types are treated with the usage of <a href="/wiki/Multiple_dispatch" title="Multiple dispatch">multiple dispatch</a>, i.e. overriding where the right method is selected also based on the type of some arguments; applying the rule, covariance is allowed for those argument types. However, this solution cannot be applied to most programming languages, since they do not support <a href="/wiki/Multiple_dispatch" title="Multiple dispatch">multiple dispatch</a></p>
<p>Note that for (static) overload resolution, the opposite rule applies: types used for compile-time method selection (i.e. parameter types) are contravariant; types not used to select the method are covariant.</p>
<p>These terms are also used in the context of modern programming languages that offer other <i>functors</i> to create new types with type variables, e.g., <a href="/wiki/Generic_programming" title="Generic programming">generic programming</a> or <a href="/wiki/Parametric_polymorphism" title="Parametric polymorphism" class="mw-redirect">parametric polymorphism</a>, and <a href="/wiki/Exception_handling" title="Exception handling">exception handling</a> where method definitions are enriched with annotations that indicate possible failures.</p>
<p><a name="Overview_of_covariance.2Fcontravariance_in_some_programming_languages" id="Overview_of_covariance.2Fcontravariance_in_some_programming_languages"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Covariance_and_contravariance_(computer_science)&amp;action=edit&amp;section=4" title="Edit section: Overview of covariance/contravariance in some programming languages">edit</a>]</span> <span class="mw-headline">Overview of covariance/contravariance in some programming languages</span></h2>
<p>Both the <a href="/wiki/Subtype" title="Subtype">subtype</a> and method overriding concepts are defined differently between programming languages. They do not necessarily follow the substitution principle above, sometimes adding runtime checking instead. What follows is a simple comparison of how overriding methods behave in some common programming languages.</p>
<p><a name="C.2B.2B" id="C.2B.2B"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Covariance_and_contravariance_(computer_science)&amp;action=edit&amp;section=5" title="Edit section: C++">edit</a>]</span> <span class="mw-headline">C++</span></h3>
<p><a href="/wiki/C%2B%2B" title="C++">C++</a> supports covariant <a href="/wiki/Return_type" title="Return type">return types</a> in overridden <a href="/wiki/Virtual_function" title="Virtual function">virtual functions</a>. Adding the covariant return type was the first modification of the C++ language approved by the standards committee in 1998. See <cite style="font-style:normal" class="news" id="CITEREFAllison">Allison, Chuck. <a href="http://www.freshsources.com/newcpp.html" class="external text" title="http://www.freshsources.com/newcpp.html" rel="nofollow">"What's New in Standard C++?"</a><span class="printonly">. <a href="http://www.freshsources.com/newcpp.html" class="external free" title="http://www.freshsources.com/newcpp.html" rel="nofollow">http://www.freshsources.com/newcpp.html</a></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=What%27s+New+in+Standard+C%2B%2B%3F&amp;rft.atitle=&amp;rft.aulast=Allison&amp;rft.aufirst=Chuck&amp;rft.au=Allison%2C+Chuck&amp;rft_id=http%3A%2F%2Fwww.freshsources.com%2Fnewcpp.html&amp;rfr_id=info:sid/en.wikipedia.org:Covariance_and_contravariance_(computer_science)"><span style="display: none;">&#160;</span></span></p>
<p>With <a href="/wiki/Generic_programming" title="Generic programming">generic programming</a>, C++ allows for what amounts to covariance in argument and return type alike. For example, the argument and return types of member functions of the <code><a href="/wiki/Std::vector" title="Std::vector" class="mw-redirect">std::vector</a>&lt;T&gt;</code> class vary with <code>T</code>. The <code>push_back</code> method takes a <code>const T&amp;</code>, so one pushes an int onto a <code>vector&lt;int&gt;</code> but a <code><a href="/wiki/Std::string" title="Std::string" class="mw-redirect">std::string</a></code> onto a <code>vector&lt;string&gt;</code>. This is done at compile time (statically) and, strictly speaking, is <a href="/wiki/Parametric_polymorphism" title="Parametric polymorphism" class="mw-redirect">parametric polymorphism</a>, because neither of <code>vector&lt;int&gt;</code> and <code>vector&lt;string&gt;</code> is a subtype of the other; this allows offering covariance for argument types without the undesirable effects discussed in the introduction.</p>
<p><a name="Arrays_in_C.23_and_Java" id="Arrays_in_C.23_and_Java"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Covariance_and_contravariance_(computer_science)&amp;action=edit&amp;section=6" title="Edit section: Arrays in C# and Java">edit</a>]</span> <span class="mw-headline">Arrays in C# and Java</span></h3>
<p>In the above discussion we have shown that type safety requires invariance of array types. However, arrays of reference types are covariant in both languages, and this leads to lack of static type safety: for instance, in C# <code>string[]</code> is a subtype of <code>object[]</code>, and in Java <code><a href="http://java.sun.com/javase/6/docs/api/java/lang/String.html" class="external text" title="http://java.sun.com/javase/6/docs/api/java/lang/String.html" rel="nofollow">String</a></code><code>[]</code> is a subtype of <code><a href="http://java.sun.com/javase/6/docs/api/java/lang/Object.html" class="external text" title="http://java.sun.com/javase/6/docs/api/java/lang/Object.html" rel="nofollow">Object</a></code><code>[]</code>, although with some caveats. For instance, in C#, we have:</p>
<pre>
// a is a single-element array of System.String
string[] a = new string[1];

// b is an array of System.Object
object[] b = a;

// Assign an integer to b. This would be possible if b really were
// an array of objects, but since it really is an array of strings,
// we will get an ArrayTypeMismatchException with the following message:
// "Attempted to store an element of the incorrect type into the array".
b[0] = 1;
</pre>
<p>The same problem exists in Java, too:</p>
<pre>
// a is a single-element array of String
String[] a = new String[1];

// b is an array of Object
Object[] b = a;

// Assign an Integer to b. This would be possible if b really were
// an array of Object, but since it really is an array of String,
// we will get a java.lang.ArrayStoreException.
b[0] = 1;
</pre>
<p><b>Note</b>: In the above cases you can <b>read</b> from b without problem. It is only when trying to <b>write</b> to the array that you must know its real type.</p>
<p>Arrays of primitive types are invariant: <code>int[]</code> is not a subtype of <code>double[]</code>, although <code>int</code> is in some sense a subtype of <code>double</code>.</p>
<p><a name="C.23" id="C.23"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Covariance_and_contravariance_(computer_science)&amp;action=edit&amp;section=7" title="Edit section: C#">edit</a>]</span> <span class="mw-headline">C#</span></h3>
<p>In <a href="/wiki/C_Sharp_(programming_language)" title="C Sharp (programming language)">C#</a> it is possible to store an object which is an instance of an equal or smaller type in that storage location.<sup id="cite_ref-2" class="reference"><a href="#cite_note-2" title=""><span>[</span>3<span>]</span></a></sup></p>
<p>Ever since C# 1.0, arrays where the element type is a reference type are covariant.<sup id="cite_ref-3" class="reference"><a href="#cite_note-3" title=""><span>[</span>4<span>]</span></a></sup></p>
<p>Method group to delegate conversions are contravariant in their argument types.<sup id="cite_ref-4" class="reference"><a href="#cite_note-4" title=""><span>[</span>5<span>]</span></a></sup></p>
<p>Generic delegate types are always invariant in C# 3.0<sup id="cite_ref-5" class="reference"><a href="#cite_note-5" title=""><span>[</span>6<span>]</span></a></sup></p>
<p>A variant interface which inherits from another variant interface must do so in a manner which does not introduce problems in the type system<sup id="cite_ref-6" class="reference"><a href="#cite_note-6" title=""><span>[</span>7<span>]</span></a></sup></p>
<p>C# 4.0 is planned to allow co- and contravariance on parameterized interface and delegate types <sup id="cite_ref-7" class="reference"><a href="#cite_note-7" title=""><span>[</span>8<span>]</span></a></sup></p>
<p><a name="D" id="D"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Covariance_and_contravariance_(computer_science)&amp;action=edit&amp;section=8" title="Edit section: D">edit</a>]</span> <span class="mw-headline">D</span></h3>
<p>The <a href="/wiki/D_(programming_language)" title="D (programming language)">D Programming Language</a> supports covariance for method overriding:</p>
<pre>
interface IFactory {
    Object Create();
}

class X { }

class XFactory : IFactory {
    // This method implements IFactory.Create
    X Create() {
        return new X();
    }
}
</pre>
<p><a name="Java" id="Java"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Covariance_and_contravariance_(computer_science)&amp;action=edit&amp;section=9" title="Edit section: Java">edit</a>]</span> <span class="mw-headline">Java</span></h3>
<p>Return type covariance is implemented in the <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a> programming language version <a href="/wiki/Java_Platform,_Standard_Edition" title="Java Platform, Standard Edition">J2SE 5.0</a>. Parameter types have to be exactly the same (invariant) for <a href="/wiki/Method_overriding_(programming)" title="Method overriding (programming)">method overriding</a>, otherwise the method is <a href="/wiki/Type_polymorphism" title="Type polymorphism">overloaded</a> with a parallel definition instead.</p>
<p><a href="/wiki/Generics_in_Java" title="Generics in Java">Generics</a> were introduced in Java in Java 5.0 to allow type-safe generic programming. Unlike arrays, generic classes are neither covariant nor contravariant. For example, neither <code>List&lt;String&gt;</code> nor <code>List&lt;Object&gt;</code> is a subtype of the other:</p>
<pre>
// a is a single-element List of String
List&lt;String&gt; a = new ArrayList&lt;String&gt;();
a.add("foo");

// b is a List of Object
List&lt;Object&gt; b = a; // This is a compile-time error
</pre>
<p>However, generic type parameters can contain wildcards (a shortcut for an extra type parameter that is only used once). Example: Given a requirement for a method which operates on Lists, of any object, then the only operations that can be performed on the object are those for which the type relationships can be guaranteed to be safe.</p>
<pre>
// a is a single-element List of String
List&lt;String&gt; a = new ArrayList&lt;String&gt;();
a.add("foo");

// b is a List of anything
List&lt;?&gt; b = a;

// retrieve the first element
Object c = b.get(0);
// This is legal, because we can guarantee
// that the return type "?" is a subtype of Object

// Add an Integer to b.
b.add(new Integer (1)); 
// This is a compile-time error; 
// we cannot guarantee that Integer is
// a subtype of the parameter type "?"
</pre>
<p>Wildcards can also be bound, e.g. "<code>? extends Foo</code>" or "<code>? super Foo</code>" for upper and lower bounds, respectively. This allows to refine permitted performance. Example: given a <code>List&lt;? extends Foo&gt;</code>, then an element can be retrieved and safely assigned to a <code>Foo</code> type (contravariance). Given a <code>List&lt;? super Foo&gt;</code>, then a <code>Foo</code> object can be safely added as an element (covariance).</p>
<p><a name="Eiffel" id="Eiffel"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Covariance_and_contravariance_(computer_science)&amp;action=edit&amp;section=10" title="Edit section: Eiffel">edit</a>]</span> <span class="mw-headline">Eiffel</span></h3>
<p><a href="/wiki/Eiffel_(programming_language)" title="Eiffel (programming language)">Eiffel</a> allows covariant return and parameter types in overriding methods. This is possible because Eiffel does not require subclasses to be <a href="/wiki/Substitutability" title="Substitutability">substitutable</a> for superclasses — that is, subclasses are not necessarily subtypes.</p>
<p>However, this can lead to surprises if subclasses with such covariant parameter types are operated upon presuming they were a more general class (<a href="/wiki/Polymorphism_(computer_science)" title="Polymorphism (computer science)" class="mw-redirect">polymorphism</a>), leading to the possibility of <a href="/wiki/Compiler" title="Compiler">compiler</a> errors.</p>
<p><a name="Nemerle" id="Nemerle"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Covariance_and_contravariance_(computer_science)&amp;action=edit&amp;section=11" title="Edit section: Nemerle">edit</a>]</span> <span class="mw-headline">Nemerle</span></h3>
<p><a href="/wiki/Nemerle" title="Nemerle">Nemerle</a> supports declarations of covariance and contravariance.</p>
<p><a name="REALbasic" id="REALbasic"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Covariance_and_contravariance_(computer_science)&amp;action=edit&amp;section=12" title="Edit section: REALbasic">edit</a>]</span> <span class="mw-headline">REALbasic</span></h3>
<p><a href="/wiki/REALbasic" title="REALbasic">REALbasic</a> added support for return type covariance in version 5.5. Like with Java, the parameter types of the overriding method must be the same.</p>
<p><a name="Scala" id="Scala"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Covariance_and_contravariance_(computer_science)&amp;action=edit&amp;section=13" title="Edit section: Scala">edit</a>]</span> <span class="mw-headline">Scala</span></h3>
<p><a href="/wiki/Scala_(programming_language)" title="Scala (programming language)">Scala</a> supports use-site declarations of covariance and contravariance. Its arrays are invariant in the base type.</p>
<p><a name="Sather" id="Sather"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Covariance_and_contravariance_(computer_science)&amp;action=edit&amp;section=14" title="Edit section: Sather">edit</a>]</span> <span class="mw-headline">Sather</span></h3>
<p><a href="/wiki/Sather" title="Sather">Sather</a> supports both covariance and contravariance. Calling convention for overridden methods are covariant with <i>out</i> arguments and return values, and contravariant with normal arguments (with the mode <i>in</i>).</p>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Covariance_and_contravariance_(computer_science)&amp;action=edit&amp;section=15" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<ul>
<li><a href="/wiki/Polymorphism_(computer_science)" title="Polymorphism (computer science)" class="mw-redirect">Polymorphism (computer science)</a></li>
<li><a href="/wiki/Inheritance_(computer_science)" title="Inheritance (computer science)">Inheritance (computer science)</a></li>
</ul>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Covariance_and_contravariance_(computer_science)&amp;action=edit&amp;section=16" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<ol class="references">
<li id="cite_note-0"><b><a href="#cite_ref-0" title="">^</a></b> <a href="/wiki/Luca_Cardelli" title="Luca Cardelli">Luca Cardelli</a>, "A semantics of multiple inheritance", Inf. Comput. 76, pp. 138–164, 1988</li>
<li id="cite_note-1"><b><a href="#cite_ref-1" title="">^</a></b> G. Castagna, <a href="http://portal.acm.org/citation.cfm?id=203096&amp;dl=ACM&amp;coll=&amp;CFID=15151515&amp;CFTOKEN=6184618" class="external text" title="http://portal.acm.org/citation.cfm?id=203096&amp;dl=ACM&amp;coll=&amp;CFID=15151515&amp;CFTOKEN=6184618" rel="nofollow">Covariance and contravariance: conflict without a cause</a>, ACM Transactions on Programming Languages and Systems (TOPLAS), Volume 17, Issue 3, May 1995, pages 431-447.</li>
<li id="cite_note-2"><b><a href="#cite_ref-2" title="">^</a></b> <a href="http://blogs.msdn.com/ericlippert/archive/2007/10/16/covariance-and-contravariance-in-c-part-one.aspx" class="external autonumber" title="http://blogs.msdn.com/ericlippert/archive/2007/10/16/covariance-and-contravariance-in-c-part-one.aspx" rel="nofollow">[1]</a></li>
<li id="cite_note-3"><b><a href="#cite_ref-3" title="">^</a></b> <a href="http://blogs.msdn.com/ericlippert/archive/2007/10/17/covariance-and-contravariance-in-c-part-two-array-covariance.aspx" class="external autonumber" title="http://blogs.msdn.com/ericlippert/archive/2007/10/17/covariance-and-contravariance-in-c-part-two-array-covariance.aspx" rel="nofollow">[2]</a></li>
<li id="cite_note-4"><b><a href="#cite_ref-4" title="">^</a></b> <a href="http://blogs.msdn.com/ericlippert/archive/2007/10/19/covariance-and-contravariance-in-c-part-three-member-group-conversion-variance.aspx" class="external autonumber" title="http://blogs.msdn.com/ericlippert/archive/2007/10/19/covariance-and-contravariance-in-c-part-three-member-group-conversion-variance.aspx" rel="nofollow">[3]</a></li>
<li id="cite_note-5"><b><a href="#cite_ref-5" title="">^</a></b> <a href="http://blogs.msdn.com/ericlippert/archive/2007/10/22/covariance-and-contravariance-in-c-part-four-real-delegate-variance.aspx" class="external autonumber" title="http://blogs.msdn.com/ericlippert/archive/2007/10/22/covariance-and-contravariance-in-c-part-four-real-delegate-variance.aspx" rel="nofollow">[4]</a></li>
<li id="cite_note-6"><b><a href="#cite_ref-6" title="">^</a></b> <a href="http://blogs.msdn.com/ericlippert/archive/2007/10/29/covariance-and-contravariance-in-c-part-seven-why-do-we-need-a-syntax-at-all.aspx" class="external autonumber" title="http://blogs.msdn.com/ericlippert/archive/2007/10/29/covariance-and-contravariance-in-c-part-seven-why-do-we-need-a-syntax-at-all.aspx" rel="nofollow">[5]</a></li>
<li id="cite_note-7"><b><a href="#cite_ref-7" title="">^</a></b> <a href="http://www.buunguyen.net/blog/new-features-of-csharp-4.html" class="external autonumber" title="http://www.buunguyen.net/blog/new-features-of-csharp-4.html" rel="nofollow">[6]</a></li>
</ol>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Covariance_and_contravariance_(computer_science)&amp;action=edit&amp;section=17" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<ul>
<li><a href="http://blogs.msdn.com/ericlippert/archive/tags/Covariance+and+Contravariance/default.aspx" class="external text" title="http://blogs.msdn.com/ericlippert/archive/tags/Covariance+and+Contravariance/default.aspx" rel="nofollow">Fabulous Adventures in Coding</a>: An article series about implementation concerns surrounding co/contravariance in C#</li>
<li><a href="http://c2.com/cgi/wiki?ContraVsCoVariance" class="external text" title="http://c2.com/cgi/wiki?ContraVsCoVariance" rel="nofollow">Contra Vs Co Variance</a> (note this article is not updated about C++)</li>
<li><a href="http://www.javac.info/closures-v05.html" class="external text" title="http://www.javac.info/closures-v05.html" rel="nofollow">Closures for the Java 7 Programming Language (v0.5)</a></li>
<li><a href="http://codebetter.com/blogs/raymond.lewallen/archive/2006/12/28/Covariance-and-Contravariance.aspx" class="external text" title="http://codebetter.com/blogs/raymond.lewallen/archive/2006/12/28/Covariance-and-Contravariance.aspx" rel="nofollow">Concise explanation of Covariance and Contravariance in C#</a></li>
</ul>


<!-- 
NewPP limit report
Preprocessor node count: 668/1000000
Post-expand include size: 2880/2048000 bytes
Template argument size: 740/2048000 bytes
Expensive parser function count: 0/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:1104704-0!1!0!default!!en!2 and timestamp 20090503101301 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)">http://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Object-oriented_programming" title="Category:Object-oriented programming">Object-oriented programming</a></span> | <span dir='ltr'><a href="/wiki/Category:Type_theory" title="Category:Type theory">Type theory</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Covariance_and_contravariance_(computer_science)" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Covariance_and_contravariance_(computer_science)" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Covariance_and_contravariance_(computer_science)&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Covariance_and_contravariance_(computer_science)&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Covariance_and_contravariance_(computer_science)" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Covariance_and_contravariance_(computer_science)" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Covariance_and_contravariance_(computer_science)" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Covariance_and_contravariance_(computer_science)&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Covariance_and_contravariance_(computer_science)&amp;oldid=287616456" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Covariance_and_contravariance_(computer_science)&amp;id=287616456">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/Kovarianz_und_Kontravarianz">Deutsch</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 3 May 2009, at 10:12 (UTC).</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv221 in 0.043 secs. --></body></html>
