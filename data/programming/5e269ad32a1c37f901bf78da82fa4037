<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Lambda calculus,Algorithm,Alonzo Church,American Journal of Mathematics,Anonymous recursion,Applicative computing systems,Big O notation,Boost C++ Libraries,C++,C (programming language),C Sharp (programming language)" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Lambda_calculus&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Lambda_calculus&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Lambda calculus - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Lambda_calculus";
		var wgTitle = "Lambda calculus";
		var wgAction = "view";
		var wgArticleId = "18203";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281420097;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
<style type="text/css">/*<![CDATA[*/
.source-lisp {line-height: normal;}
.source-lisp li, .source-lisp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for lisp
 * CSS class: source-lisp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-lisp .de1, .source-lisp .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-lisp  {}
.source-lisp .head {}
.source-lisp .foot {}
.source-lisp .imp {font-weight: bold; color: red;}
.source-lisp .ln-xtra {color: #cc0; background-color: #ffc;}
.source-lisp li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-lisp li.li2 {font-weight: bold;}
.source-lisp .kw1 {color: #b1b100;}
.source-lisp .co1 {color: #808080; font-style: italic;}
.source-lisp .coMULTI {color: #808080; font-style: italic;}
.source-lisp .es0 {color: #000099; font-weight: bold;}
.source-lisp .br0 {color: #66cc66;}
.source-lisp .st0 {color: #ff0000;}
.source-lisp .nu0 {color: #cc66cc;}
.source-lisp .me0 {color: #555;}
.source-lisp .me1 {color: #555;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-eiffel {line-height: normal;}
.source-eiffel li, .source-eiffel pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for eiffel
 * CSS class: source-eiffel, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-eiffel .de1, .source-eiffel .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-eiffel  {}
.source-eiffel .head {}
.source-eiffel .foot {}
.source-eiffel .imp {font-weight: bold; color: red;}
.source-eiffel .ln-xtra {color: #cc0; background-color: #ffc;}
.source-eiffel li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-eiffel li.li2 {font-weight: bold;}
.source-eiffel .kw1 {color: #0600FF; font-weight: bold;}
.source-eiffel .kw2 {color: #0600FF; font-weight: bold;}
.source-eiffel .kw3 {color: #800080;}
.source-eiffel .kw4 {color: #800000}
.source-eiffel .kw5 {color: #603000;}
.source-eiffel .co1 {color: #008000; font-style: italic;}
.source-eiffel .coMULTI {}
.source-eiffel .es0 {color: #005070; font-weight: bold;}
.source-eiffel .br0 {color: #600000;}
.source-eiffel .st0 {color: #0080A0;}
.source-eiffel .nu0 {color: #FF0000;}
.source-eiffel .me1 {color: #000060;}
.source-eiffel .me2 {color: #000050;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-python {line-height: normal;}
.source-python li, .source-python pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for python
 * CSS class: source-python, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-python .de1, .source-python .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-python  {}
.source-python .head {}
.source-python .foot {}
.source-python .imp {font-weight: bold; color: red;}
.source-python .ln-xtra {color: #cc0; background-color: #ffc;}
.source-python li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-python li.li2 {font-weight: bold;}
.source-python .kw1 {color: #ff7700;font-weight:bold;}
.source-python .kw2 {color: #008000;}
.source-python .kw3 {color: #dc143c;}
.source-python .kw4 {color: #0000cd;}
.source-python .co1 {color: #808080; font-style: italic;}
.source-python .coMULTI {color: #808080; font-style: italic;}
.source-python .es0 {color: #000099; font-weight: bold;}
.source-python .br0 {color: #66cc66;}
.source-python .st0 {color: #483d8b;}
.source-python .nu0 {color: #ff4500;}
.source-python .me1 {color: black;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-smalltalk {line-height: normal;}
.source-smalltalk li, .source-smalltalk pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for smalltalk
 * CSS class: source-smalltalk, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-smalltalk .de1, .source-smalltalk .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-smalltalk  {}
.source-smalltalk .head {}
.source-smalltalk .foot {}
.source-smalltalk .imp {font-weight: bold; color: red;}
.source-smalltalk .ln-xtra {color: #cc0; background-color: #ffc;}
.source-smalltalk li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-smalltalk li.li2 {font-weight: bold;}
.source-smalltalk .kw1 {color: #7f007f;}
.source-smalltalk .coMULTI {color: #007f00; font-style: italic;}
.source-smalltalk .es0 {}
.source-smalltalk .br0 {color: #000066; font-weight:bold;}
.source-smalltalk .st0 {color: #7f0000;}
.source-smalltalk .nu0 {color: #7f0000;}
.source-smalltalk .me0 {}
.source-smalltalk .sc0 {}
.source-smalltalk .re0 {color: #0000ff;}
.source-smalltalk .re1 {color: #7f0000;}
.source-smalltalk .re2 {color: #7f0000;}
.source-smalltalk .re3 {color: #00007f;}
.source-smalltalk .re4 {color: #7f007f;}
.source-smalltalk .re5 {color: #00007f;}
.source-smalltalk .re6 {color: #00007f;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-cpp {line-height: normal;}
.source-cpp li, .source-cpp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for cpp
 * CSS class: source-cpp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-cpp .de1, .source-cpp .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-cpp  {}
.source-cpp .head {}
.source-cpp .foot {}
.source-cpp .imp {font-weight: bold; color: red;}
.source-cpp .ln-xtra {color: #cc0; background-color: #ffc;}
.source-cpp li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-cpp li.li2 {font-weight: bold;}
.source-cpp .kw1 {color: #0000ff;}
.source-cpp .kw2 {color: #0000ff;}
.source-cpp .kw3 {color: #0000dd;}
.source-cpp .kw4 {color: #0000ff;}
.source-cpp .co1 {color: #ff0000;}
.source-cpp .co2 {color: #339900;}
.source-cpp .coMULTI {color: #ff0000; font-style: italic;}
.source-cpp .es0 {color: #666666; font-weight: bold;}
.source-cpp .br0 {color: #000000;}
.source-cpp .st0 {color: #666666;}
.source-cpp .nu0 {color: #0000dd;}
.source-cpp .me1 {color: #00eeff;}
.source-cpp .me2 {color: #00eeff;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-csharp {line-height: normal;}
.source-csharp li, .source-csharp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for csharp
 * CSS class: source-csharp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-csharp .de1, .source-csharp .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-csharp  {}
.source-csharp .head {}
.source-csharp .foot {}
.source-csharp .imp {font-weight: bold; color: red;}
.source-csharp .ln-xtra {color: #cc0; background-color: #ffc;}
.source-csharp li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-csharp li.li2 {font-weight: bold;}
.source-csharp .kw1 {color: #0600FF;}
.source-csharp .kw2 {color: #FF8000; font-weight: bold;}
.source-csharp .kw3 {color: #008000;}
.source-csharp .kw4 {color: #FF0000;}
.source-csharp .kw5 {color: #000000;}
.source-csharp .co1 {color: #008080; font-style: italic;}
.source-csharp .co2 {color: #008080;}
.source-csharp .coMULTI {color: #008080; font-style: italic;}
.source-csharp .es0 {color: #008080; font-weight: bold;}
.source-csharp .br0 {color: #008000;}
.source-csharp .st0 {color: #808080;}
.source-csharp .nu0 {color: #FF0000;}
.source-csharp .me1 {color: #0000FF;}
.source-csharp .me2 {color: #0000FF;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style>		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Lambda_calculus skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Lambda calculus</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<p>In <a href="/wiki/Mathematical_logic" title="Mathematical logic">mathematical logic</a> and <a href="/wiki/Computer_science" title="Computer science">computer science</a>, <b>lambda calculus</b>, also written as <b>λ-calculus</b>, is a <a href="/wiki/Formal_system" title="Formal system">formal system</a> designed to investigate <a href="/wiki/Function_(mathematics)" title="Function (mathematics)">function</a> definition, function application and <a href="/wiki/Recursion" title="Recursion">recursion</a>. It was introduced by <a href="/wiki/Alonzo_Church" title="Alonzo Church">Alonzo Church</a> and <a href="/wiki/Stephen_Cole_Kleene" title="Stephen Cole Kleene">Stephen Cole Kleene</a> in the 1930s as part of an investigation into the <a href="/wiki/Foundations_of_mathematics" title="Foundations of mathematics">foundations of mathematics</a>, but has emerged as a useful tool in the investigation of problems in <a href="/wiki/Recursion_theory" title="Recursion theory">computability or recursion theory</a>, and forms the basis of a paradigm of computer programming called <a href="/wiki/Functional_programming" title="Functional programming">functional programming</a>.<sup id="cite_ref-0" class="reference"><a href="#cite_note-0" title=""><span>[</span>1<span>]</span></a></sup></p>
<p>In the lambda calculus, functions are first-class entities: they are passed as arguments, and returned as results. Thus lambda expressions are a <a href="/wiki/Reification_(computer_science)" title="Reification (computer science)">reification</a> of the concept of an unnamed procedure without <a href="/wiki/Side_effects" title="Side effects" class="mw-redirect">side effects</a>. The lambda calculus can be thought of as an idealized, minimalistic programming language. It is capable of expressing any <a href="/wiki/Algorithm" title="Algorithm">algorithm</a>, and it is this fact that makes the model of <a href="/wiki/Functional_programming" title="Functional programming">functional programming</a> an important one. Functional programs are stateless and deal exclusively with functions that accept and return data (including other functions), but they produce no <a href="/wiki/Side_effect_(computer_science)" title="Side effect (computer science)">side effects</a> in 'state' and thus make no alterations to incoming data. Modern functional languages, building on the lambda calculus, include <a href="/wiki/Erlang_(programming_language)" title="Erlang (programming language)">Erlang</a>, <a href="/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell</a>, <a href="/wiki/Lisp_(programming_language)" title="Lisp (programming language)">Lisp</a>, <a href="/wiki/ML_(programming_language)" title="ML (programming language)">ML</a>, and <a href="/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme</a>, as well as more recent languages like <a href="/wiki/Clojure" title="Clojure">Clojure</a>, <a href="/wiki/F_Sharp_(programming_language)" title="F Sharp (programming language)">F#</a>, <a href="/wiki/Nemerle" title="Nemerle">Nemerle</a>, and <a href="/wiki/Scala_(programming_language)" title="Scala (programming language)">Scala</a>.</p>
<p>The lambda calculus continues to play an important role in <a href="/wiki/Foundations_of_mathematics" title="Foundations of mathematics">mathematical foundations</a>, through the <a href="/wiki/Curry-Howard_correspondence" title="Curry-Howard correspondence" class="mw-redirect">Curry-Howard correspondence</a>. However, as a naïve foundation for mathematics, the untyped lambda calculus is unable to avoid set-theoretic paradoxes (see the <a href="/wiki/Kleene-Rosser_paradox" title="Kleene-Rosser paradox">Kleene-Rosser paradox</a>).</p>
<p>This article deals with the "untyped lambda calculus" as originally conceived by Church. Most modern applications concern <a href="/wiki/Typed_lambda_calculus" title="Typed lambda calculus">typed lambda calculi</a>.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Informal_description"><span class="tocnumber">1</span> <span class="toctext">Informal description</span></a></li>
<li class="toclevel-1"><a href="#Formal_definition"><span class="tocnumber">2</span> <span class="toctext">Formal definition</span></a>
<ul>
<li class="toclevel-2"><a href="#Definition"><span class="tocnumber">2.1</span> <span class="toctext">Definition</span></a></li>
<li class="toclevel-2"><a href="#Notation"><span class="tocnumber">2.2</span> <span class="toctext">Notation</span></a></li>
<li class="toclevel-2"><a href="#Free_and_bound_variables"><span class="tocnumber">2.3</span> <span class="toctext">Free and bound variables</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Reduction"><span class="tocnumber">3</span> <span class="toctext">Reduction</span></a>
<ul>
<li class="toclevel-2"><a href="#.CE.B1-conversion"><span class="tocnumber">3.1</span> <span class="toctext">α-conversion</span></a>
<ul>
<li class="toclevel-3"><a href="#Substitution"><span class="tocnumber">3.1.1</span> <span class="toctext">Substitution</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#.CE.B2-reduction"><span class="tocnumber">3.2</span> <span class="toctext">β-reduction</span></a></li>
<li class="toclevel-2"><a href="#.CE.B7-conversion"><span class="tocnumber">3.3</span> <span class="toctext">η-conversion</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Encoding_datatypes"><span class="tocnumber">4</span> <span class="toctext">Encoding datatypes</span></a>
<ul>
<li class="toclevel-2"><a href="#Arithmetic_in_lambda_calculus"><span class="tocnumber">4.1</span> <span class="toctext">Arithmetic in lambda calculus</span></a></li>
<li class="toclevel-2"><a href="#Logic_and_predicates"><span class="tocnumber">4.2</span> <span class="toctext">Logic and predicates</span></a></li>
<li class="toclevel-2"><a href="#Pairs"><span class="tocnumber">4.3</span> <span class="toctext">Pairs</span></a></li>
<li class="toclevel-2"><a href="#Recursion_and_fixed_points"><span class="tocnumber">4.4</span> <span class="toctext">Recursion and fixed points</span></a></li>
<li class="toclevel-2"><a href="#Standard_combinators"><span class="tocnumber">4.5</span> <span class="toctext">Standard combinators</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Computable_functions_and_lambda_calculus"><span class="tocnumber">5</span> <span class="toctext">Computable functions and lambda calculus</span></a></li>
<li class="toclevel-1"><a href="#Undecidability_of_equivalence"><span class="tocnumber">6</span> <span class="toctext">Undecidability of equivalence</span></a></li>
<li class="toclevel-1"><a href="#Lambda_calculus_and_programming_languages"><span class="tocnumber">7</span> <span class="toctext">Lambda calculus and programming languages</span></a>
<ul>
<li class="toclevel-2"><a href="#Reduction_strategies"><span class="tocnumber">7.1</span> <span class="toctext">Reduction strategies</span></a></li>
<li class="toclevel-2"><a href="#A_note_about_complexity"><span class="tocnumber">7.2</span> <span class="toctext">A note about complexity</span></a></li>
<li class="toclevel-2"><a href="#Parallelism_and_concurrency"><span class="tocnumber">7.3</span> <span class="toctext">Parallelism and concurrency</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Semantics"><span class="tocnumber">8</span> <span class="toctext">Semantics</span></a></li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">9</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">10</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1"><a href="#Further_reading"><span class="tocnumber">11</span> <span class="toctext">Further reading</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">12</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Informal_description" id="Informal_description"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Lambda_calculus&amp;action=edit&amp;section=1" title="Edit section: Informal description">edit</a>]</span> <span class="mw-headline">Informal description</span></h2>
<p>The key concept of lambda-calculus is a <b>lambda expression</b>. A lambda expression represents an anonymous function and defines the transformation that the function performs to its argument. For instance, a numeric "add-two" function, which adds 2 to its argument, can be expressed in lambda calculus as <tt>&#160;λ <i>x</i>. <i>x</i> + 2&#160;</tt>. The variable <i>x</i> is specific to this lambda expression, thus can be equivalently expressed as <tt>&#160;λ <i>y</i>. <i>y</i> + 2</tt>;&#160; the name of the argument is immaterial (see <a href="#.CE.B1-conversion" title="">α-conversion</a>). In a more conventional mathematical notation this function can be expressed as <i>f</i> such that <tt>&#160;<i>f</i>(<i>x</i>) = <i>x</i> + 2&#160;</tt>.</p>
<p>In lambda-calculus the <i>application</i> of this function to a number "3" can be written as <tt>&#160;(λ <i>x</i>. <i>x</i> + 2) 3</tt>. In a more conventional mathematical notation, the application of function with the name "f" to a number "3" is expressed as <tt><i>f</i>(3)</tt>.</p>
<p>Note that part of what makes this description "informal" is that neither the number 2, nor the <tt>+</tt> operator, are part of core lambda calculus. Instead, numbers and arithmetic are fully <i>defined</i> in lambda calculus (see <a href="#Arithmetic_in_lambda_calculus" title="">arithmetic in lambda calculus</a>).</p>
<p>In lambda-calculus all functions are anonymous. A lambda expression can be used as any other expression: a lambda expression can be returned as the result of some function, or can be used as an argument to another function.</p>
<p>In lambda calculus, every function is a <a href="/wiki/Unary_function" title="Unary function">unary function</a>, i.e. a function with only one input (known as its argument). When an expression is applied to another expression (which corresponds to a function 'call' with the other expression as its argument), it returns a single value (known as its result). Function application is <a href="/wiki/Left_associative_operator" title="Left associative operator" class="mw-redirect">left associative</a>: <tt>&#160;<i>f</i> <i>x</i> <i>y</i> = (<i>f</i> <i>x</i>) <i>y</i></tt>.&#160; Consider the function which takes a function as an argument and applies it to the number <tt>3</tt> as follows:<tt>&#160;λ <i>f</i>. <i>f</i> 3</tt>.&#160; This latter function could be applied to our earlier "add-two" function as follows: <tt>&#160;(λ <i>f</i>. <i>f</i> 3) (λ <i>x</i>. <i>x</i> + 2)</tt>.&#160; The three expressions:</p>
<dl>
<dd><tt>(λ <i>f</i>. <i>f</i> 3) (λ <i>x</i>. <i>x</i> + 2)</tt></dd>
<dd><tt>(λ <i>x</i>. <i>x</i> + 2) 3</tt></dd>
<dd><tt>3 + 2</tt></dd>
</dl>
<p>are equivalent.</p>
<p>A function of two variables is expressed in lambda calculus as a function of one argument which returns a function of one argument (see <a href="/wiki/Currying" title="Currying">currying</a>). For instance, the function <tt>&#160;<i>f</i>(<i>x</i>, <i>y</i>) = <i>x</i> - <i>y</i>&#160;</tt> would be written as <tt>&#160;λ <i>x</i>. λ <i>y</i>. <i>x</i> - <i>y</i></tt>. A common convention is to abbreviate curried functions as, in this example, <tt>&#160;λ <i>x</i> <i>y</i>. <i>x</i> - <i>y</i></tt>.</p>
<p>The following expression in the lambda calculus is particularly notable:</p>
<dl>
<dd><tt>(λ <i>x</i>. <i>x</i> <i>x</i>) (λ <i>x</i>. <i>x</i> <i>x</i>)</tt></dd>
</dl>
<p>This expression is an application of a lambda expression <tt>(λ <i>x</i>. <i>x</i> <i>x</i>)</tt> (first sub-expression) to an argument <tt>(λ <i>x</i>. <i>x</i> <i>x</i>)</tt> (second sub-expression). The sub-expression <b>x x</b> is also an application. It means that a function (represented by a variable <b>x</b> ) is applied to its argument (also represented by the variable <b>x</b>).</p>
<p>When the above application is evaluated (the sub-expression <tt>(λ <i>x</i>. <i>x</i> <i>x</i>)</tt> is substituted for the argument <i>x</i> in the lambda expression) it reproduces itself:</p>
<dl>
<dd><tt>(λ <i>x</i>. <i>x</i> <i>x</i>) (λ <i>x</i>. <i>x</i> <i>x</i>)</tt></dd>
</dl>
<p>So, the process of evaluation the above expression never terminates.</p>
<p>A similar situation arises with:</p>
<dl>
<dd><tt>(λ <i>x</i>. <i>x</i> <i>x</i> <i>x</i>) (λ <i>x</i>. <i>x</i> <i>x</i> <i>x</i>)</tt></dd>
</dl>
<p><tt>&#160;(λ <i>x</i>. <i>x</i> <i>x</i>)&#160;</tt> is also known as the ω <a href="/wiki/Combinator" title="Combinator" class="mw-redirect">combinator</a>; <tt>&#160;((λ <i>x</i>. <i>x</i> <i>x</i>) (λ <i>x</i>. <i>x</i> <i>x</i>))&#160;</tt> is known as Ω, <tt>&#160;((λ <i>x</i>. <i>x</i> <i>x</i> <i>x</i>) (λ <i>x</i>. <i>x</i> <i>x</i> <i>x</i>))&#160;</tt> as Ω<sub>2</sub>, etc.</p>
<p>Lambda calculus expressions may contain <i>free variables</i>, i.e. variables not bound by any <tt>λ</tt>. For example, the variable <tt>&#160;<i>y</i>&#160;</tt> is free in the expression <tt>&#160;(λ <i>x</i>. <i>y</i>)&#160;</tt>, representing a function which always produces the result <tt><i>y</i></tt>. Occasionally, this necessitates the renaming of formal arguments. For example, in the formula below, the letter <tt><i>y</i></tt> is used first as a formal parameter, then as a free variable:</p>
<dl>
<dd><tt>(λ <i>x</i> <i>y</i>. <i>y</i> <i>x</i>) (λ <i>x</i>. <i><b>y</b></i>)</tt>.</dd>
</dl>
<p>To reduce the expression, we rename the first identifier <i>z</i> so that the reduction does not mix up the names:</p>
<dl>
<dd><tt>(λ <i>x</i> <i>z</i>. <i>z</i> <i>x</i>) (λ <i>x</i>. <i>y</i>)</tt></dd>
</dl>
<p>the reduction is then</p>
<dl>
<dd><tt>λ <i>z</i>. <i>z</i> (λ <i>x</i>. <i>y</i>)</tt>.</dd>
</dl>
<p>If one only formalizes the notion of function application and replaces the use of lambda expressions by the use of <i>combinators</i>, one obtains <a href="/wiki/Combinatory_logic" title="Combinatory logic">combinatory logic</a>.</p>
<p><a name="Formal_definition" id="Formal_definition"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Lambda_calculus&amp;action=edit&amp;section=2" title="Edit section: Formal definition">edit</a>]</span> <span class="mw-headline">Formal definition</span></h2>
<p><a name="Definition" id="Definition"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Lambda_calculus&amp;action=edit&amp;section=3" title="Edit section: Definition">edit</a>]</span> <span class="mw-headline">Definition</span></h3>
<p>Lambda expressions are composed of</p>
<dl>
<dd>variables v<sub>1</sub>, v<sub>2</sub>, . . . v<sub>n</sub></dd>
<dd>the abstraction symbols λ and .</dd>
<dd>parentheses ( )</dd>
</dl>
<p>The set of lambda expressions, Λ, can be defined <a href="/wiki/Recursion" title="Recursion">recursively</a>:</p>
<ol>
<li>If x is a variable, then x ∈ Λ</li>
<li>If x is a variable and M ∈ Λ, then ( λ x . M ) ∈ Λ</li>
<li>If M, N ∈ Λ, then ( M N ) ∈ Λ</li>
</ol>
<p>Instances of 2 are known as abstractions and instances of 3, applications.<sup id="cite_ref-1" class="reference"><a href="#cite_note-1" title=""><span>[</span>2<span>]</span></a></sup></p>
<p><a name="Notation" id="Notation"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Lambda_calculus&amp;action=edit&amp;section=4" title="Edit section: Notation">edit</a>]</span> <span class="mw-headline">Notation</span></h3>
<p>To keep the notation of lambda expressions uncluttered, the following conventions are usually applied.</p>
<ul>
<li>Outermost parentheses are dropped: M N instead of (M N).</li>
<li>Applications are assumed to be left associative: M N P means (M N) P.</li>
<li>The body of an abstraction extends as far right as possible: λ x . M N means λ x . (M N) and not (λ x . M) N</li>
<li>A sequence of abstractions are contracted: λ x . λ y . λ z . N is abbreviated as λ x y z . N<sup id="cite_ref-Selinger_2-0" class="reference"><a href="#cite_note-Selinger-2" title=""><span>[</span>3<span>]</span></a></sup></li>
</ul>
<p><a name="Free_and_bound_variables" id="Free_and_bound_variables"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Lambda_calculus&amp;action=edit&amp;section=5" title="Edit section: Free and bound variables">edit</a>]</span> <span class="mw-headline">Free and bound variables</span></h3>
<p>The abstraction operator, λ, is said to bind its variable wherever it occurs in the body of the abstraction. Variables that fall within the scope of a lambda are said to be <i>bound</i>. All other variables are called <i>free</i>. For example in the following expression y is a bound variable and x is free:</p>
<dl>
<dd>λ y . x x y</dd>
</dl>
<p>Also note that a variable binds to its "nearest" lambda. In the following expression one single occurrence of x is bound by the second lambda:</p>
<dl>
<dd>λ x . y (λ x . z x)</dd>
</dl>
<p>The set of <i>free variables</i> of a lambda expression, M, is denoted as FV(M) and is defined by recursion on the structure of the terms, as follows:</p>
<ol>
<li>FV( x ) = {x}, where x is a variable</li>
<li>FV ( λ x . M ) = FV ( M ) - {x}</li>
<li>FV ( M N ) = FV ( M ) <img class="tex" alt="\cup" src="http://upload.wikimedia.org/math/4/3/2/432c1df69e11aba7c5c5070e7578609f.png" /> FV ( N )<sup id="cite_ref-BarendregtBarendsen_3-0" class="reference"><a href="#cite_note-BarendregtBarendsen-3" title=""><span>[</span>4<span>]</span></a></sup></li>
</ol>
<p>An expression which contains no free variables is said to be <i>closed</i>. Closed lambda expressions are also known as combinators and are equivalent to terms in <a href="/wiki/Combinatory_logic" title="Combinatory logic">combinatory logic</a>.</p>
<p><a name="Reduction" id="Reduction"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Lambda_calculus&amp;action=edit&amp;section=6" title="Edit section: Reduction">edit</a>]</span> <span class="mw-headline">Reduction</span></h2>
<p>We formalize what lambda expressions mean by defining how expressions can be reduced.</p>
<p>There are three kinds of reduction:</p>
<ul>
<li><b>α-conversion</b>: changing bound variables;</li>
<li><b>β-conversion</b>: applying functions to their arguments;</li>
<li><b>η-conversion</b>: which captures a notion of extensionality.</li>
</ul>
<p>We also speak of the resulting equivalences: two expression are <i>β-equivalent</i> if they can be β-converted into the same expression, and α/η-equivalence are defined similarly.</p>
<p><a name=".CE.B1-conversion" id=".CE.B1-conversion"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Lambda_calculus&amp;action=edit&amp;section=7" title="Edit section: α-conversion">edit</a>]</span> <span class="mw-headline">α-conversion</span></h3>
<p>Alpha-conversion allows bound variable names to be changed. For example, an alpha-conversion of <tt>&#160;λ<i>x</i>.<i>x</i>&#160;</tt> would be <tt>&#160;λ<i>y</i>.<i>y</i>&#160;</tt>. Frequently in uses of lambda calculus, terms that differ only by alpha-conversion are considered to be equivalent.</p>
<p>The precise rules for alpha-conversion are not completely trivial. First, when alpha-converting an abstraction, the only variable occurrences that are renamed are those that are bound to the same abstraction. For example, an alpha-conversion of <tt>&#160;λ<i>x</i>.λ<i>x</i>.<i>x</i>&#160;</tt> could result in <tt>&#160;λ<i>y</i>.λ<i>x</i>.<i>x</i>&#160;</tt>, but it could <em>not</em> result in <tt>&#160;λ<i>y</i>.λ<i>x</i>.<i>y</i>&#160;</tt>. The latter has a different meaning from the original.</p>
<p>Second, alpha-conversion is not possible if it would result in a variable getting captured by a different abstraction. For example, if we replace <tt><i>x</i></tt> with <tt><i>y</i></tt> in <tt>λ<i>x</i>.λ<i>y</i>.<i>x</i></tt>, we get <tt>λ<i>y</i>.λ<i>y</i>.<i>y</i></tt>, which is not at all the same.</p>
<p><a name="Substitution" id="Substitution"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Lambda_calculus&amp;action=edit&amp;section=8" title="Edit section: Substitution">edit</a>]</span> <span class="mw-headline">Substitution</span></h4>
<p>Substitution, written <tt>E[V&#160;:= E′]</tt>, is the process of replacing all occurrences of the variable <tt>V</tt> by expression <tt>E′</tt>. Substitution on terms of the λ-calculus is defined by recursion on the structure of terms, as follows.</p>
<dl>
<dd><tt>x[x&#160;:= N] &#160;&#160;&#160;&#160;&#160;&#160; ≡ N</tt></dd>
<dd><tt>y[x&#160;:= N] &#160;&#160;&#160;&#160;&#160;&#160; ≡ y, if x ≠ y</tt></dd>
<dd><tt>(M<sub>1</sub> M<sub>2</sub>)[x&#160;:= N]&#160; ≡ (M<sub>1</sub>[x&#160;:= N]) (M<sub>2</sub>[x&#160;:= N])</tt></dd>
<dd><tt>(λ y. M)[x&#160;:= N] ≡ λ y. (M[x&#160;:= N]), if x ≠ y and y∉fv(N)</tt></dd>
</dl>
<p>To substitute into a lambda abstraction, it is sometimes necessary to α-convert the expression. For example, it is not correct for <tt>(λ x.y)[y&#160;:= x]</tt> to result in <tt>(λ x.x)</tt>, because the substituted <tt>x</tt> was supposed to be free but ended up being bound. The correct substitution in this case is <tt>(λ z.x)</tt>, up-to α-equivalence. Notice that substitution is defined uniquely up-to α-equivalence.</p>
<p><a name=".CE.B2-reduction" id=".CE.B2-reduction"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Lambda_calculus&amp;action=edit&amp;section=9" title="Edit section: β-reduction">edit</a>]</span> <span class="mw-headline">β-reduction</span></h3>
<p>Beta-reduction captures the idea of function application. Beta-reduction is defined in terms of substitution: the beta-reduction of <tt>&#160;((λ <i>V</i>. <i>E</i>) <i>E′</i>)&#160;</tt> is <tt>&#160;<i>E</i>[<i>V</i>&#160;:= <i>E′</i>]&#160;</tt>.</p>
<p>For example, assuming some encoding of <tt>2,7,*</tt>, we have the following β-reductions: <tt>&#160;((λ <i>n</i>. <i>n</i>*2) 7 &#160;</tt>→<tt>&#160;(<i>n</i>*2)[<i>n</i>:= 7] &#160;</tt>→<tt>&#160; 7*2</tt>.</p>
<p><a name=".CE.B7-conversion" id=".CE.B7-conversion"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Lambda_calculus&amp;action=edit&amp;section=10" title="Edit section: η-conversion">edit</a>]</span> <span class="mw-headline">η-conversion</span></h3>
<p>Eta-conversion expresses the idea of <a href="/wiki/Extensionality" title="Extensionality">extensionality</a>, which in this context is that two functions are the same <a href="/wiki/If_and_only_if" title="If and only if">if and only if</a> they give the same result for all arguments. Eta-conversion converts between <tt>&#160;λ <i>x</i>. <i>f</i> <i>x</i>&#160;</tt> and <tt>&#160;<i>f</i>&#160;</tt> whenever <tt><i>x</i></tt> does not appear free in <tt><i>f</i></tt>.</p>
<p>This conversion is not always appropriate when lambda expressions are interpreted as programs. Evaluation of <tt>&#160;λ <i>x</i>. <i>f</i> <i>x</i>&#160;</tt> can terminate even when evaluation of <i>f</i> does not.</p>
<p><a name="Encoding_datatypes" id="Encoding_datatypes"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Lambda_calculus&amp;action=edit&amp;section=11" title="Edit section: Encoding datatypes">edit</a>]</span> <span class="mw-headline">Encoding datatypes</span></h2>
<div class="rellink noprint relarticle mainarticle">Main articles: <a href="/wiki/Church_encoding" title="Church encoding">Church encoding</a> and <a href="/wiki/Mogensen-Scott_encoding" title="Mogensen-Scott encoding">Mogensen-Scott encoding</a></div>
<p>The basic lambda calculus may be used to model booleans, arithmetic, data structures and recursion, as illustrated in the following sub-sections.</p>
<p><a name="Arithmetic_in_lambda_calculus" id="Arithmetic_in_lambda_calculus"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Lambda_calculus&amp;action=edit&amp;section=12" title="Edit section: Arithmetic in lambda calculus">edit</a>]</span> <span class="mw-headline">Arithmetic in lambda calculus</span></h3>
<p>There are several possible ways to define the <a href="/wiki/Natural_number" title="Natural number">natural numbers</a> in lambda calculus, but by far the most common are the <a href="/wiki/Church_numeral" title="Church numeral" class="mw-redirect">Church numerals</a>, which can be defined as follows:</p>
<dl>
<dd><tt>0&#160;:= λ <i>f</i> <i>x</i>. <i>x</i></tt></dd>
<dd><tt>1&#160;:= λ <i>f</i> <i>x</i>. <i>f</i> <i>x</i></tt></dd>
<dd><tt>2&#160;:= λ <i>f</i> <i>x</i>. <i>f</i> (<i>f</i> <i>x</i>)</tt></dd>
<dd><tt>3&#160;:= λ <i>f</i> <i>x</i>. <i>f</i> (<i>f</i> (<i>f</i> <i>x</i>))</tt></dd>
</dl>
<p>and so on. A Church numeral is a <a href="/wiki/Higher-order_function" title="Higher-order function">higher-order function</a>—it takes a single-argument function <tt><i>f</i></tt>, and returns another single-argument function. The Church numeral <tt><i>n</i></tt> is a function that takes a function <tt><i>f</i></tt> as argument and returns the <tt><i>n</i></tt>-th composition of <tt><i>f</i></tt>, i.e. the function <tt><i>f</i></tt> composed with itself <tt><i>n</i></tt> times. This is denoted <tt><i>f</i><sup>(<i>n</i>)</sup></tt> and is in fact the <tt><i>n</i></tt>-th power of <tt><i>f</i></tt> (considered as an operator); <tt><i>f</i><sup>(0)</sup></tt> is defined to be the identity function. Such repeated compositions (of a single function <tt><i>f</i></tt>) obey the <a href="/wiki/Exponentiation#Identities_and_properties" title="Exponentiation">laws of exponents</a>, which is why these numerals can be used for arithmetic. Note that <tt>0</tt> returns <tt><i>x</i></tt> itself, i.e. it is essentially the identity function, and <tt>1</tt> <i>returns</i> the identity function. (Also note that in Church's original lambda calculus, the formal parameter of a lambda expression was required to occur at least once in the function body, which made the above definition of <tt>0</tt> impossible.)</p>
<p>We can define a successor function, which takes a number <tt><i>n</i></tt> and returns <tt><i>n</i> + 1</tt> by adding an additional application of <tt><i>f</i></tt>:</p>
<dl>
<dd><tt>SUCC&#160;:= λ <i>n</i> <i>f</i> <i>x</i>. <i>f</i> (<i>n</i> <i>f</i> <i>x</i>)</tt></dd>
</dl>
<p>Because the <tt><i>m</i></tt>-th composition of <tt><i>f</i></tt> composed with the <tt><i>n</i></tt>-th composition of <tt><i>f</i></tt> gives the <tt><i>m+n</i></tt>-th composition of <tt><i>f</i></tt>, addition can be defined as follows:</p>
<dl>
<dd><tt>PLUS&#160;:= λ <i>m</i> <i>n</i> <i>f</i> <i>x</i>. <i>n</i> <i>f</i> (<i>m</i> <i>f</i> <i>x</i>)</tt></dd>
</dl>
<p><tt>PLUS</tt> can be thought of as a function taking two natural numbers as arguments and returning a natural number; it can be verified that</p>
<dl>
<dd><tt>PLUS 2 3 &#160;&#160;</tt> and <tt>&#160;&#160; 5</tt></dd>
</dl>
<p>are equivalent lambda expressions. Since adding <tt><i>m</i></tt> to a number <tt><i>n</i></tt> can be accomplished by adding 1 <tt><i>m</i></tt> times, an equivalent definition is:</p>
<dl>
<dd><tt>PLUS&#160;:= λ <i>n</i> <i>m</i>. <i>m</i> SUCC <i>n</i></tt><sup id="cite_ref-4" class="reference"><a href="#cite_note-4" title=""><span>[</span>5<span>]</span></a></sup></dd>
</dl>
<p>Similarly, multiplication can be defined as</p>
<dl>
<dd><tt>MULT&#160;:= λ <i>m</i> <i>n</i> <i>f</i> . <i>m</i> (<i>n</i> <i>f</i>)</tt><sup id="cite_ref-5" class="reference"><a href="#cite_note-5" title=""><span>[</span>6<span>]</span></a></sup></dd>
</dl>
<p>Alternatively</p>
<dl>
<dd><tt>MULT&#160;:= λ <i>m</i> <i>n</i>. <i>m</i> (PLUS <i>n</i>) 0</tt>,</dd>
</dl>
<p>since multiplying <tt><i>m</i></tt> and <tt><i>n</i></tt> is the same as repeating the "add <tt><i>n</i></tt>" function <tt><i>m</i></tt> times and then applying it to zero. The predecessor function defined by <tt>&#160;PRED <i>n</i> = <i>n</i> - 1&#160;</tt> for a positive integer <tt><i>n</i></tt> and <tt>&#160;PRED 0 = 0&#160;</tt> is considerably more difficult. The formula</p>
<dl>
<dd><tt>PRED&#160;:= λ <i>n</i> <i>f</i> <i>x</i>. <i>n</i> (λ <i>g</i> <i>h</i>. <i>h</i> (<i>g</i> <i>f</i>)) (λ <i>u</i>. <i>x</i>) (λ <i>u</i>. <i>u</i>)&#160;</tt></dd>
</dl>
<p>can be validated by showing inductively that if <tt>T</tt> denotes <tt>(λ <i>g</i> <i>h</i>. <i>h</i> (<i>g</i> <i>f</i>))</tt>, then <tt>T<sup>(<i>n</i>)</sup>(λ <i>u</i>. <i>x</i>) = (λ <i>h</i>. <i>h</i>(<i>f</i><sup>(<i>n</i>-1)</sup>(<i>x</i>)) )</tt> for <tt><i>n</i> &gt; 0</tt>. Two other definitions of <tt>PRED</tt> are given below, one using <a href="#Logic_and_predicates" title="">conditionals</a> and the other using <a href="#Pairs" title="">pairs</a>. With the predecessor function, subtraction is straightforward. Defining</p>
<dl>
<dd><tt>SUB&#160;:= λ <i>m</i> <i>n</i>. <i>n</i> PRED <i>m</i></tt>,</dd>
</dl>
<p><tt>SUB <i>m</i> <i>n</i></tt> yields <tt><i>m</i> - <i>n</i></tt> when <tt><i>m</i> &gt; <i>n</i></tt> and <tt>0</tt> otherwise.</p>
<p><a name="Logic_and_predicates" id="Logic_and_predicates"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Lambda_calculus&amp;action=edit&amp;section=13" title="Edit section: Logic and predicates">edit</a>]</span> <span class="mw-headline">Logic and predicates</span></h3>
<p>By convention, the following two definitions (known as Church booleans) are used for the boolean values <tt>TRUE</tt> and <tt>FALSE</tt>:</p>
<dl>
<dd><tt>TRUE&#160;:= λ <i>x</i> <i>y</i>. <i>x</i></tt></dd>
<dd><tt>FALSE&#160;:= λ <i>x</i> <i>y</i>. <i>y</i></tt>
<dl>
<dd>(Note that <tt>FALSE</tt> is equivalent to the Church numeral zero defined above)</dd>
</dl>
</dd>
</dl>
<p>Then, with these two λ-terms, we can define some logic operators (these are just possible formulations; other expressions are equally correct):</p>
<dl>
<dd><tt>AND&#160;:= λ <i>p q</i>. <i>p q p</i></tt></dd>
<dd><tt>OR&#160;:= λ <i>p q</i>. <i>p p q</i></tt></dd>
<dd><tt>NOT&#160;:= λ <i>p a b</i>. <i>p b a</i></tt></dd>
<dd><tt>IFTHENELSE&#160;:= λ <i>p a b</i>. <i>p a b</i></tt></dd>
</dl>
<p>We are now able to compute some logic functions, for example:</p>
<dl>
<dd><tt>AND TRUE FALSE</tt>
<dl>
<dd><tt>≡ (λ <i>p q</i>. <i>p q p</i>) TRUE FALSE →<sub>β</sub> TRUE FALSE TRUE</tt></dd>
<dd><tt><tt>≡ (λ <i>x y</i>. <i>x</i>) FALSE TRUE →<sub>β</sub> FALSE</tt></tt></dd>
</dl>
</dd>
</dl>
<p>and we see that <tt>AND TRUE FALSE</tt> is equivalent to <tt>FALSE</tt>.</p>
<p>A <i>predicate</i> is a function which returns a boolean value. The most fundamental predicate is <tt>ISZERO</tt> which returns <tt>TRUE</tt> if its argument is the Church numeral <tt>0</tt>, and <tt>FALSE</tt> if its argument is any other Church numeral:</p>
<dl>
<dd><tt>ISZERO&#160;:= λ <i>n</i>. <i>n</i> (λ <i>x</i>. FALSE) TRUE</tt></dd>
</dl>
<p>The following predicate tests whether the first argument is less-than-or-equal-to the second:</p>
<dl>
<dd><tt>LEQ&#160;:= λ <i>m n</i>. ISZERO (SUB <i>m n</i>)</tt>,</dd>
</dl>
<p>and since <tt><i>m</i> = <i>n</i></tt> iff <tt>LEQ <i>m n</i></tt> and <tt>LEQ <i>n m</i></tt>, it is straightforward to build a predicate for numerical equality.</p>
<p>The availability of predicates and the above definition of <tt>TRUE</tt> and <tt>FALSE</tt> make it convenient to write "if-then-else" expressions in lambda calculus. For example, the predecessor function can be defined as' '</p>
<dl>
<dd><tt>PRED&#160;:= λ <i>n</i>. <i>n</i> (λ <i>g k</i>. ISZERO (<i>g</i> 1) k (PLUS (<i>g k</i>) 1) ) (λ <i>v</i>. 0) 0</tt></dd>
</dl>
<p>which can be verified by showing inductively that <tt><i>n</i> (λ <i>g k</i>. ISZERO (<i>g</i> 1) k (PLUS (<i>g k</i>) 1) ) (λ <i>v</i>. 0)</tt> is the "add <tt><i>n</i></tt> - 1" function for <tt><i>n</i></tt> &gt; 0.</p>
<p><a name="Pairs" id="Pairs"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Lambda_calculus&amp;action=edit&amp;section=14" title="Edit section: Pairs">edit</a>]</span> <span class="mw-headline">Pairs</span></h3>
<p>A pair (2-tuple) can be defined in terms of <tt>TRUE</tt> and <tt>FALSE</tt>, by using the <a href="/wiki/Church_encoding#Church_pairs" title="Church encoding">Church encoding for pairs</a>. For example, <tt>PAIR</tt> encapsulates the pair (<tt><i>x</i></tt>,<tt><i>y</i></tt>), <tt>FIRST</tt> returns the first element of the pair, and <tt>SECOND</tt> returns the second.</p>
<dl>
<dd><tt>PAIR&#160;:= λ <i>x</i> <i>y</i> <i>f</i>. <i>f</i> <i>x</i> <i>y</i></tt></dd>
<dd><tt>FIRST&#160;:= λ <i>p</i>. <i>p</i> TRUE</tt></dd>
<dd><tt>SECOND&#160;:= λ <i>p</i>. <i>p</i> FALSE</tt></dd>
<dd><tt>NIL&#160;:= λ x. TRUE</tt></dd>
<dd><tt>NULL&#160;:= λp. p (λx y.FALSE)</tt></dd>
</dl>
<p>A linked list can be defined as either NIL for the empty list, or the <tt>PAIR</tt> of an element and a smaller list. The predicate <tt>NULL</tt> tests for the value <tt>NIL</tt>.</p>
<p>As an example of the use of pairs, the shift-and-increment function that maps <tt>(<i>m</i>, <i>n</i>)</tt> to <tt>(<i>n</i>, <i>n</i>+1)</tt> can be defined as</p>
<dl>
<dd><tt>Φ&#160;:= λ <i>x</i>. PAIR (SECOND x) (SUCC (SECOND <i>x</i>))</tt></dd>
</dl>
<p>which allows us to give perhaps the most transparent version of the predecessor function:</p>
<dl>
<dd><tt>PRED&#160;:= λ <i>n</i>. FIRST (<i>n</i> Φ (PAIR 0 0))</tt></dd>
</dl>
<p><a name="Recursion_and_fixed_points" id="Recursion_and_fixed_points"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Lambda_calculus&amp;action=edit&amp;section=15" title="Edit section: Recursion and fixed points">edit</a>]</span> <span class="mw-headline">Recursion and fixed points</span></h3>
<div class="rellink noprint relarticle mainarticle">Main article: <a href="/wiki/Fixed_point_combinator" title="Fixed point combinator">Fixed point combinator</a></div>
<p><a href="/wiki/Recursion" title="Recursion">Recursion</a> is the definition of a function using the function itself; on the face of it, lambda calculus does not allow this. However, this impression is misleading. Consider for instance the <a href="/wiki/Factorial" title="Factorial">factorial</a> function <tt><i>f</i>(<i>n</i>)</tt> recursively defined by</p>
<dl>
<dd><tt><i>f</i>(<i>n</i>) = 1, if <i>n</i> = 0; and <i>n</i>·<i>f</i>(<i>n</i>-1), if <i>n</i>&gt;0</tt>.</dd>
</dl>
<p>In lambda calculus, one cannot define a function which includes itself. To get around this, one may start by defining a function, here called <tt><i>g</i></tt>, which takes a function <tt><i>f</i></tt> as an argument and returns another function that takes <tt><i>n</i></tt> as an argument:</p>
<dl>
<dd><tt><i>g</i>&#160;:= λ <i>f</i> <i>n</i>. (1, if <i>n</i> = 0; and <i>n</i>·<i>f</i>(<i>n</i>-1), if <i>n</i>&gt;0)</tt>.</dd>
</dl>
<p>The function that <tt><i>g</i></tt> returns is either the constant <tt>1</tt>, or <i>n</i> times the application of the function <tt><i>f</i></tt> to <tt><i>n</i>-1</tt>. Using the <tt>ISZERO</tt> predicate, and boolean and algebraic definitions described above, the function <tt><i>g</i></tt> can be defined in lambda calculus.</p>
<p>However, <tt><i>g</i></tt> by itself is still not recursive; in order to use <tt><i>g</i></tt> to create the recursive factorial function, the function passed to <tt><i>g</i></tt> as <tt><i>f</i></tt> must have specific properties. Namely, the function passed as <tt><i>f</i></tt> must expand to the function <tt><i>g</i></tt> called with one argument -- and that argument must be the function that was passed as <tt><i>f</i></tt> again!</p>
<p>In other words, <tt><i>f</i></tt> must expand to <tt><i>g</i>(<i>f</i>)</tt>. This call to <tt><i>g</i></tt> will then expand to the above factorial function and calculate down to another level of recursion. In that expansion the function <tt><i>f</i></tt> will appear again, and will again expand to <tt><i>g</i>(<i>f</i>)</tt> and continue the recursion. This kind of function, where <tt><i>f</i> = <i>g</i>(<i>f</i>)</tt>, is called a <i>fixed-point</i> of <tt><i>g</i></tt>, and it turns out that it can be implemented in the lambda calculus using what is known as the <i>paradoxical operator</i> or <i>fixed-point operator</i> and is represented as <tt><i>Y</i></tt> -- the <a href="/wiki/Fixed_point_combinator" title="Fixed point combinator">Y combinator</a>:</p>
<dl>
<dd><tt><i>Y</i> = λ <i>g</i>. (λ <i>x</i>. <i>g</i> (<i>x</i> <i>x</i>)) (λ <i>x</i>. <i>g</i> (<i>x</i> <i>x</i>))</tt></dd>
</dl>
<p>In the lambda calculus, <tt><i>Y g</i></tt> is a fixed-point of <tt><i>g</i></tt>, as it expands to:</p>
<dl>
<dd><tt><i>Y g</i></tt></dd>
<dd><tt>λ <i>h</i>. ((λ <i>x</i>. <i>h</i> (<i>x</i> <i>x</i>)) (λ <i>x</i>. <i>h</i> (<i>x</i> <i>x</i>))) g</tt></dd>
<dd><tt>(λ <i>x</i>. <i>g</i> (<i>x</i> <i>x</i>)) (λ <i>x</i>. <i>g</i> (<i>x</i> <i>x</i>))</tt></dd>
<dd><tt><i>g</i> ((λ <i>x</i>. <i>g</i> (<i>x</i> <i>x</i>)) (λ <i>x</i>. <i>g</i> (<i>x</i> <i>x</i>))</tt> - Compare with the previous step</dd>
<dd><tt><i>g</i> (<i>Y</i> <i>g</i>)</tt>.</dd>
</dl>
<p>Now, to complete our recursive call to the factorial function, we would simply call <tt>&#160;<i>g</i> (<i>Y</i> <i>g</i>) <i>n</i></tt>,&#160; where <i>n</i> is the number we are calculating the factorial of.</p>
<p>Given <i>n</i> = 5, for example, this expands to:</p>
<dl>
<dd><tt>(λ <i>n</i>.(1, if <i>n</i> = 0; and <i>n</i>·((<i>Y g</i>)(<i>n</i>-1)), if <i>n</i>&gt;0)) 5</tt></dd>
<dd><tt>1, if 5 = 0; and 5·(<i>g</i>(<i>Y g</i>)(5-1)), if 5&gt;0</tt></dd>
<dd><tt>5·(<i>g</i>(<i>Y g</i>) 4)</tt></dd>
<dd><tt>5·(λ <i>n</i>. (1, if <i>n</i> = 0; and <i>n</i>·((<i>Y g</i>)(<i>n</i>-1)), if <i>n</i>&gt;0) 4)</tt></dd>
<dd><tt>5·(1, if 4 = 0; and 4·(<i>g</i>(<i>Y g</i>)(4-1)), if 4&gt;0)</tt></dd>
<dd><tt>5·(4·(<i>g</i>(<i>Y g</i>) 3))</tt></dd>
<dd><tt>5·(4·(λ <i>n</i>. (1, if <i>n</i> = 0; and <i>n</i>·((<i>Y g</i>)(<i>n</i>-1)), if <i>n</i>&gt;0) 3))</tt></dd>
<dd><tt>5·(4·(1, if 3 = 0; and 3·(<i>g</i>(<i>Y g</i>)(3-1)), if 3&gt;0))</tt></dd>
<dd><tt>5·(4·(3·(<i>g</i>(<i>Y g</i>) 2)))</tt></dd>
<dd><tt>...</tt></dd>
</dl>
<p>And so on, evaluating the structure of the algorithm recursively. Every recursively defined function can be seen as a fixed point of some other suitable function, and therefore, using <tt><i>Y</i></tt>, every recursively defined function can be expressed as a lambda expression. In particular, we can now cleanly define the subtraction, multiplication and comparison predicate of natural numbers recursively.</p>
<p><a name="Standard_combinators" id="Standard_combinators"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Lambda_calculus&amp;action=edit&amp;section=16" title="Edit section: Standard combinators">edit</a>]</span> <span class="mw-headline">Standard combinators</span></h3>
<p>Certain combinators have commonly accepted names:</p>
<dl>
<dd><span id="I"></span> <tt><b>I</b>&#160;:= λ <i>x</i> . <i>x</i></tt></dd>
<dd><span id="K"></span> <tt><b>K</b>&#160;:= λ <i>x</i> <i>y</i> . <i>x</i></tt></dd>
<dd><span id="S"></span> <tt><b>S</b>&#160;:= λ <i>x</i> <i>y</i> <i>z</i> . (<i>x</i> <i>z</i>) (<i>y</i> <i>z</i>)</tt></dd>
</dl>
<p><a name="Computable_functions_and_lambda_calculus" id="Computable_functions_and_lambda_calculus"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Lambda_calculus&amp;action=edit&amp;section=17" title="Edit section: Computable functions and lambda calculus">edit</a>]</span> <span class="mw-headline">Computable functions and lambda calculus</span></h2>
<p>A function <i>F</i>: <b>N</b> → <b>N</b> of <a href="/wiki/Natural_number" title="Natural number">natural numbers</a> is a <a href="/wiki/Computable_function" title="Computable function">computable function</a> <a href="/wiki/If_and_only_if" title="If and only if">if and only if</a> there exists a lambda expression <i>f</i> such that for every pair of <i>x</i>, <i>y</i> in <b>N</b>, <i>F</i>(<i>x</i>)=<i>y</i> if and only if <i>f</i> <tt>x</tt>&#160;=<sub>β</sub>&#160;<tt>y</tt>,&#160; where <tt>x</tt> and <tt>y</tt> are the Church numerals corresponding to <i>x</i> and <i>y</i>, respectively and =<sub>β</sub> meaning equivalence with beta reduction. This is one of the many ways to define <a href="/wiki/Computability" title="Computability" class="mw-redirect">computability</a>; see the <a href="/wiki/Church-Turing_thesis" title="Church-Turing thesis" class="mw-redirect">Church-Turing thesis</a> for a discussion of other approaches and their equivalence.</p>
<p><a name="Undecidability_of_equivalence" id="Undecidability_of_equivalence"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Lambda_calculus&amp;action=edit&amp;section=18" title="Edit section: Undecidability of equivalence">edit</a>]</span> <span class="mw-headline">Undecidability of equivalence</span></h2>
<p>There is no algorithm which takes as input two lambda expressions and outputs <tt>TRUE</tt> or <tt>FALSE</tt> depending on whether or not the two expressions are equivalent. This was historically the first problem for which undecidability could be proven. As is common for a proof of undecidability, the proof shows that no <a href="/wiki/Computable_function" title="Computable function">computable function</a> can decide the equivalence. <a href="/wiki/Church%27s_thesis" title="Church's thesis" class="mw-redirect">Church's thesis</a> is then invoked to show that no algorithm can do so.</p>
<p>Church's proof first reduces the problem to determining whether a given lambda expression has a <i>normal form</i>. A normal form is an equivalent expression which cannot be reduced any further. Then he assumes that this predicate is computable, and can hence be expressed in lambda calculus. Building on earlier work by Kleene and constructing a <a href="/wiki/G%C3%B6del_numbering" title="Gödel numbering" class="mw-redirect">Gödel numbering</a> for lambda expressions, he constructs a lambda expression <tt><i>e</i></tt> which closely follows the proof of <a href="/wiki/G%C3%B6del%27s_incompleteness_theorem" title="Gödel's incompleteness theorem" class="mw-redirect">Gödel's first incompleteness theorem</a>. If <tt><i>e</i></tt> is applied to its own <a href="/wiki/G%C3%B6del_number" title="Gödel number">Gödel number</a>, a contradiction results.</p>
<p><a name="Lambda_calculus_and_programming_languages" id="Lambda_calculus_and_programming_languages"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Lambda_calculus&amp;action=edit&amp;section=19" title="Edit section: Lambda calculus and programming languages">edit</a>]</span> <span class="mw-headline">Lambda calculus and programming languages</span></h2>
<p>As pointed out by <a href="/wiki/Peter_Landin" title="Peter Landin" class="mw-redirect">Peter Landin</a>'s 1965 paper <cite><a href="http://portal.acm.org/citation.cfm?id=363749&amp;coll=portal&amp;dl=ACM" class="external text" title="http://portal.acm.org/citation.cfm?id=363749&amp;coll=portal&amp;dl=ACM" rel="nofollow">A Correspondence between ALGOL 60 and Church's Lambda-notation</a></cite>, sequential <a href="/wiki/Procedural_programming" title="Procedural programming">procedural programming languages</a> can be understood in terms of the lambda calculus, which provides the basic mechanisms for procedural abstraction and procedure (subprogram) application.</p>
<p>Lambda calculus <a href="/wiki/Reification_(computer_science)" title="Reification (computer science)">reifies</a> "functions" and makes them <a href="/wiki/First-class_object" title="First-class object">first-class objects</a>, which raises implementation complexity when implementing lambda calculus. A particular challenge is related to the support of <a href="/wiki/Higher-order_functions" title="Higher-order functions" class="mw-redirect">higher-order functions</a>, also known as the <a href="/wiki/Funarg_problem" title="Funarg problem">Funarg problem</a>. Lambda calculus is usually implemented using a <a href="/wiki/Virtual_machine" title="Virtual machine">virtual machine</a> approach. The first practical implementation of lambda calculus was provided in 1963 by <a href="/wiki/Peter_Landin" title="Peter Landin" class="mw-redirect">Peter Landin</a>, and is know as the <a href="/wiki/SECD_machine" title="SECD machine">SECD machine</a>. Since then, several optimized abstract machines for lambda calculus were suggested, such as the <a href="/w/index.php?title=G-machine&amp;action=edit&amp;redlink=1" class="new" title="G-machine (page does not exist)">G-machine</a><sup id="cite_ref-6" class="reference"><a href="#cite_note-6" title=""><span>[</span>7<span>]</span></a></sup> and the <a href="/wiki/Categorical_abstract_machine" title="Categorical abstract machine">Categorical abstract machine</a>.</p>
<p>The most prominent counterparts to lambda calculus in programming are <a href="/wiki/Functional_programming_language" title="Functional programming language" class="mw-redirect">functional programming languages</a>, which essentially implement the calculus augmented with some <a href="/wiki/Constant" title="Constant">constants</a> and <a href="/wiki/Datatype" title="Datatype" class="mw-redirect">datatypes</a>. <a href="/wiki/Lisp_programming_language" title="Lisp programming language" class="mw-redirect">Lisp</a> uses a variant of lambda notation for defining functions, but only its purely functional subset ("<a href="/wiki/Lispkit_Lisp" title="Lispkit Lisp">Pure Lisp</a>") is really equivalent to lambda calculus.</p>
<p>An example of a lambda function in <a href="/wiki/Lisp_(programming_language)" title="Lisp (programming language)">Lisp</a>:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-lisp">
<span class="br0">(</span><span class="kw1">lambda</span> <span class="br0">(</span>x<span class="br0">)</span> <span class="br0">(</span>* x x<span class="br0">)</span><span class="br0">)</span>
</pre></div>
<p>Above Lisp example evaluates to a first class function. The symbol lambda introduces the function. Next is a list of arguments. This function has only one argument: x. Next are expressions that are executed. Here we have one expression (* x x) which multiplies x by x.</p>
<p>Functional languages are not the only ones to support functions as <a href="/wiki/First-class_object" title="First-class object">first-class objects</a>. Numerous <a href="/wiki/Imperative_programming" title="Imperative programming">imperative languages</a>, e.g. <a href="/wiki/Pascal_(programming_language)" title="Pascal (programming language)">Pascal</a>, have long supported passing subprograms as arguments to other subprograms. In <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a> and the C-like subset of <a href="/wiki/C%2B%2B" title="C++">C++</a> the equivalent result is obtained by passing <i>pointers</i> to the code of functions (subprograms). Such mechanisms are limited to subprograms written explicitly in the code, and do not directly support higher-level functions. Some imperative <a href="/wiki/Object-oriented_language" title="Object-oriented language" class="mw-redirect">object-oriented languages</a> have notations that represent functions of any order; such mechanisms are available in <a href="/wiki/C%2B%2B" title="C++">C++</a>, <a href="/wiki/Smalltalk" title="Smalltalk">Smalltalk</a> and more recently in <a href="/wiki/Eiffel_(programming_language)" title="Eiffel (programming language)">Eiffel</a> ("agents") and <a href="/wiki/C_Sharp_(programming_language)" title="C Sharp (programming language)">C#</a> ("delegates"). As an example, the Eiffel "inline agent" expression</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-eiffel">
<span class="kw2">agent</span> <span class="br0">(</span>x: <span class="kw4">REAL</span><span class="br0">)</span>: <span class="kw4">REAL</span> <span class="kw2">do</span> <span class="kw3">Result</span> := x * x <span class="kw2">end</span>
</pre></div>
<p>denotes an object corresponding to the lambda expression λ x . x*x (with call by value). It can be treated like any other expression, e.g. assigned to a variable or passed around to routines. If the value of <var>square</var> is the above agent expression, then the result of applying <var>square</var> to a value a (β-reduction) is expressed as <var>square</var>.item ([a]), where the argument is passed as a <a href="/wiki/Tuple" title="Tuple">tuple</a>.</p>
<p>A <a href="/wiki/Python_(programming_language)" title="Python (programming language)">Python</a> example of this uses the <a href="http://docs.python.org/ref/lambdas.html#lambda" class="external text" title="http://docs.python.org/ref/lambdas.html#lambda" rel="nofollow">lambda</a> form of functions:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-python">
func = <span class="kw1">lambda</span> x: x ** <span class="nu0">2</span>
</pre></div>
<p>This creates a new anonymous function and names it <b>func</b> which can be passed to other functions, stored in variables, etc. Python can also treat any other function created with the standard <a href="http://docs.python.org/ref/function.html" class="external text" title="http://docs.python.org/ref/function.html" rel="nofollow">def</a> statement as <a href="/wiki/First-class_object" title="First-class object">first-class objects</a>.</p>
<p>The same holds for Smalltalk expression</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-smalltalk">
<span class="br0">[</span> :<span class="re5">x</span> | x * <span class="re5">x</span> <span class="br0">]</span>
</pre></div>
<p>This is first-class object (block closure), which can be stored in variables, passed as arguments, etc.</p>
<p>A similar C++ example (using the <a href="/wiki/Boost_C%2B%2B_Libraries" title="Boost C++ Libraries">Boost</a>.Lambda library):</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
std::<span class="me2">for_each</span><span class="br0">(</span>c.<span class="me1">begin</span><span class="br0">(</span><span class="br0">)</span>, c.<span class="me1">end</span><span class="br0">(</span><span class="br0">)</span>, std::<span class="kw3">cout</span> &lt;&lt; _1 * _1 &lt;&lt; std::<span class="me2">endl</span><span class="br0">)</span>;
</pre></div>
<p>Here the standard library function <b>for_each</b> iterates over all members of container 'c', and prints the square of each element. The _1 notation is Boost.Lambda's convention (originally derived from Boost.Bind) for representing the first placeholder element (the first argument), represented as <b>x</b> elsewhere.</p>
<p>A simple C# <a href="/wiki/Delegate_(.NET)" title="Delegate (.NET)">delegate</a> taking a variable and returning the square. This function variable can then be passed to other methods (or function delegates)</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-csharp">
<span class="co1">//Declare a delegate signature</span>
<span class="kw4">delegate</span> <span class="kw4">double</span> MathDelegate<span class="br0">(</span><span class="kw4">double</span> i<span class="br0">)</span>;
<span class="co1">//Create a delegate instance</span>
MathDelegate f = <span class="kw4">delegate</span><span class="br0">(</span><span class="kw4">double</span> i<span class="br0">)</span> <span class="br0">{</span> <span class="kw1">return</span> Math.<span class="me1">Pow</span><span class="br0">(</span>i, <span class="nu0">2</span><span class="br0">)</span>; <span class="br0">}</span>;
</pre></div>
<div dir="ltr" style="text-align: left;">
<pre class="source-csharp">
<span class="coMULTI">/* Passing 'f' function variable to another method, executing,
   and returning the result of the function
 */</span>
<span class="kw4">double</span> Execute<span class="br0">(</span>MathDelegate f<span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw1">return</span> f<span class="br0">(</span><span class="nu0">100</span><span class="br0">)</span>;
<span class="br0">}</span>
</pre></div>
<p>In C# 3.0, the language has lambda expressions in a form similar to python or lisp. The expression resolves to a delegate like in the previous example but the above can be simplified to below.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-csharp">
<span class="co1">//Create a delegate instance</span>
MathDelegate f = i =&gt; i * i;
Execute<span class="br0">(</span>f<span class="br0">)</span>;
<span class="co1">// or more simply put</span>
Execute<span class="br0">(</span>i =&gt; i * i<span class="br0">)</span>;
</pre></div>
<p><a name="Reduction_strategies" id="Reduction_strategies"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Lambda_calculus&amp;action=edit&amp;section=20" title="Edit section: Reduction strategies">edit</a>]</span> <span class="mw-headline">Reduction strategies</span></h3>
<div class="rellink boilerplate seealso">For more details on this topic, see <a href="/wiki/Evaluation_strategy" title="Evaluation strategy">Evaluation strategy</a>.</div>
<p>Whether a term is normalising or not, and how much work needs to be done in normalising it if it is, depends to a large extent on the reduction strategy used. The distinction between reduction strategies relates to the distinction in functional programming languages between <a href="/wiki/Eager_evaluation" title="Eager evaluation">eager evaluation</a> and <a href="/wiki/Lazy_evaluation" title="Lazy evaluation">lazy evaluation</a>.</p>
<p>The following uses the term 'redex', short for 'reducible expression'. For example, <tt>(λ x. M) N</tt> is a beta-redex; <tt>λ x. M x</tt> is an eta-redex if <tt>x</tt> is not free in <tt>M</tt>. The expression to which a redex reduces is called its reduct; using the previous example, the reducts of these expressions are respectively <tt>M[x:=N]</tt> and <tt>M</tt>.</p>
<dl>
<dt>Full beta reductions</dt>
<dd>Any redex can be reduced at any time. This means essentially the lack of any particular reduction strategy — with regard to reducibility, "all bets are off".</dd>
<dt>Applicative order</dt>
<dd>The rightmost, innermost redex is always reduced first. Intuitively this means a function's arguments are always reduced before the function itself. Applicative order always attempts to apply functions to normal forms, even when this is not possible.</dd>
<dd>Most programming languages (including <a href="/wiki/Lisp_(programming_language)" title="Lisp (programming language)">Lisp</a>, <a href="/wiki/ML" title="ML">ML</a> and imperative languages like <a href="/wiki/C_programming_language" title="C programming language" class="mw-redirect">C</a> and <a href="/wiki/Java_programming_language" title="Java programming language" class="mw-redirect">Java</a>) are described as "strict", meaning that functions applied to non-normalising arguments are non-normalising. This is done essentially using applicative order, call by value reduction (<a href="#Call_by_value" title="">see below</a>), but usually called "eager evaluation".</dd>
<dt>Normal order</dt>
<dd>The leftmost, outermost redex is always reduced first. That is, whenever possible the arguments are substituted into the body of an abstraction before the arguments are reduced.</dd>
<dt>Call by name</dt>
<dd>As normal order, but no reductions are performed inside abstractions. For example <tt>λ x.(λ x.x)x</tt> is in normal form according to this strategy, although it contains the redex <tt>(λ x.x)x</tt>.</dd>
<dt>Call by value</dt>
<dd>Only the outermost redexes are reduced: a redex is reduced only when its right hand side has reduced to a value (variable or lambda abstraction).</dd>
<dt>Call by need</dt>
<dd>As normal order, but function applications that would duplicate terms instead name the argument, which is then reduced only "when it is needed". Called in practical contexts "lazy evaluation". In implementations this "name" takes the form of a pointer, with the redex represented by a <a href="/wiki/Thunk#Thunk_as_delayed_computation" title="Thunk">thunk</a>.</dd>
</dl>
<p>Applicative order is not a normalising strategy. The usual counterexample is as follows: define <tt>Ω = ωω</tt> where <tt>ω = λ x. xx</tt>. This entire expression contains only one redex, namely the whole expression; its reduct is again <tt>Ω</tt>. Since this is the only available reduction, <tt>Ω</tt> has no normal form (under any evaluation strategy). Using applicative order, the expression <tt>KIΩ = (λ x y . x)(λ x.x)Ω</tt> is reduced by first reducing <tt>Ω</tt> to normal form (since it is the rightmost redex), but since <tt>Ω</tt> has no normal form, applicative order fails to find a normal form for <tt>KIΩ</tt>.</p>
<p>In contrast, normal order is so called because it always finds a normalising reduction if one exists. In the above example, <tt>KIΩ</tt> reduces under normal order to <tt>I</tt>, a normal form. A drawback is that redexes in the arguments may be copied, resulting in duplicated computation (for example, <tt>(λ x.xx)((λ x.x)y)</tt> reduces to <tt>((λx.x)y)((λx.x)y)</tt> using this strategy; now there are two redexes, so full evaluation needs two more steps, but if the argument had been reduced first, there would now be none).</p>
<p>The positive tradeoff of using applicative order is that it does not cause unnecessary computation if all arguments are used, because it never substitutes arguments containing redexes and hence never needs to copy them (which would duplicate work). In the above example, in applicative order <tt>(λ x.xx)((λ x.x)y)</tt> reduces first to <tt>(λ x.xx)y</tt> and then to the normal order <tt>yy</tt>, taking two steps instead of three.</p>
<p>Most <i>purely</i> functional programming languages (notably <a href="/wiki/Miranda" title="Miranda">Miranda</a> and its descendents, including <a href="/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell</a>), and the proof languages of <a href="/wiki/Theorem_prover" title="Theorem prover" class="mw-redirect">theorem provers</a>, use <i><a href="/wiki/Lazy_evaluation" title="Lazy evaluation">lazy evaluation</a></i>, which is essentially the same as call by need. This is like normal order reduction, but call by need manages to avoid the duplication of work inherent in normal order reduction using <i>sharing</i>. In the example given above, <tt>(λ x.xx)((λ x.x)y)</tt> reduces to <tt>((λx.x)y)((λx.x)y)</tt>, which has two redexes, but in call by need they are represented using the same object rather than copied, so when one is reduced the other is too.</p>
<p><a name="A_note_about_complexity" id="A_note_about_complexity"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Lambda_calculus&amp;action=edit&amp;section=21" title="Edit section: A note about complexity">edit</a>]</span> <span class="mw-headline">A note about complexity</span></h3>
<p>While the idea of beta reduction seems simple enough, it is not an atomic step, in that it must have a non-trivial cost when estimating <a href="/wiki/Computational_complexity" title="Computational complexity" class="mw-redirect">computational complexity</a>. <sup id="cite_ref-7" class="reference"><a href="#cite_note-7" title=""><span>[</span>8<span>]</span></a></sup> To be precise, one must somehow find the location of all of the occurrences of the bound variable <tt><i>V</i></tt> in the expression <tt><i>E</i></tt>, implying a time cost, or one must keep track of these locations in some way, implying a space cost. A naïve search for the locations of <tt><i>V</i></tt> in <tt><i>E</i></tt> is <a href="/wiki/Big_O_notation" title="Big O notation"><i>O</i>(<i>n</i>)</a> in the length <i>n</i> of <tt><i>E</i></tt>. This has led to the study of systems which use <a href="/wiki/Explicit_substitution" title="Explicit substitution">explicit substitution</a>. Sinot's <a href="/wiki/Director_string" title="Director string">director strings</a> <sup id="cite_ref-8" class="reference"><a href="#cite_note-8" title=""><span>[</span>9<span>]</span></a></sup> offer a way of tracking the locations of free variables in expressions.</p>
<p><a name="Parallelism_and_concurrency" id="Parallelism_and_concurrency"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Lambda_calculus&amp;action=edit&amp;section=22" title="Edit section: Parallelism and concurrency">edit</a>]</span> <span class="mw-headline">Parallelism and concurrency</span></h3>
<p>The <a href="/wiki/Church-Rosser" title="Church-Rosser" class="mw-redirect">Church-Rosser</a> property of the lambda calculus means that evaluation (β-reduction) can be carried out in <i>any order</i>, even in parallel. This means that various <a href="/wiki/Evaluation_strategy#Nondeterministic_strategies" title="Evaluation strategy">nondeterministic evaluation strategies</a> are relevant. However, the lambda calculus does not offer any explicit constructs for <a href="/wiki/Parallel_computing" title="Parallel computing">parallelism</a>. One can add constructs such as <a href="/wiki/Futures_and_promises" title="Futures and promises">Futures</a> to the lambda-calculus. Other <a href="/wiki/Process_calculi" title="Process calculi" class="mw-redirect">process calculi</a> have been developed for describing communication and concurrency.</p>
<p><a name="Semantics" id="Semantics"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Lambda_calculus&amp;action=edit&amp;section=23" title="Edit section: Semantics">edit</a>]</span> <span class="mw-headline">Semantics</span></h2>
<p>The fact that lambda calculus terms act as functions on other lambda calculus terms, and even on themselves, led to questions about the semantics of the lambda calculus. Could a sensible meaning be assigned to lambda calculus terms? The natural semantics was to find a set <i>D</i> isomorphic to the function space <i>D</i> → <i>D</i>, of functions on itself. However, no nontrivial such <i>D</i> can exist, by <a href="/wiki/Cardinality" title="Cardinality">cardinality</a> constraints because the set of all functions from <i>D</i> into <i>D</i> has greater cardinality than <i>D</i>.</p>
<p>In the 1970s, <a href="/wiki/Dana_Scott" title="Dana Scott">Dana Scott</a> showed that, if only <a href="/wiki/Scott_continuity" title="Scott continuity">continuous functions</a> were considered, a set or <a href="/wiki/Domain_theory" title="Domain theory">domain</a> <i>D</i> with the required property could be found, thus providing a <a href="/wiki/Model_theory" title="Model theory">model</a> for the lambda calculus.</p>
<p>This work also formed the basis for the <a href="/wiki/Denotational_semantics" title="Denotational semantics">denotational semantics</a> of programming languages.</p>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Lambda_calculus&amp;action=edit&amp;section=24" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<div style="-moz-column-count:2; column-count:2;">
<ul>
<li><a href="/wiki/Anonymous_recursion" title="Anonymous recursion">Anonymous recursion</a> — Definition of <a href="/wiki/Recursion_(computer_science)" title="Recursion (computer science)">recursive</a> functions without naming them</li>
<li><a href="/wiki/Applicative_computing_systems" title="Applicative computing systems">Applicative computing systems</a> — Treatment of <a href="/wiki/Object_(computer_science)" title="Object (computer science)">objects</a> in the style of the lambda calculus</li>
<li><a href="/wiki/Calculus_of_constructions" title="Calculus of constructions">Calculus of constructions</a> — A typed lambda calculus with <a href="/wiki/Type_system" title="Type system">types</a> as first-class values</li>
<li><a href="/wiki/Cartesian_closed_category" title="Cartesian closed category">Cartesian closed category</a> — A setting for lambda calculus in <a href="/wiki/Category_theory" title="Category theory">category theory</a></li>
<li><a href="/wiki/Categorical_abstract_machine" title="Categorical abstract machine">Categorical abstract machine</a> — A <a href="/wiki/Model_of_computation" title="Model of computation">model of computation</a> applicable to lambda calculus</li>
<li><a href="/wiki/Combinatory_logic" title="Combinatory logic">Combinatory logic</a> — A notation for <a href="/wiki/Mathematical_logic" title="Mathematical logic">mathematical logic</a> without variables</li>
<li><a href="/wiki/Curry-Howard_isomorphism" title="Curry-Howard isomorphism" class="mw-redirect">Curry-Howard isomorphism</a> — The formal correspondence between programs and <a href="/wiki/Mathematical_proof" title="Mathematical proof">proofs</a></li>
<li><a href="/wiki/Domain_theory" title="Domain theory">Domain theory</a> — Study of certain <a href="/wiki/Partially_ordered_sets" title="Partially ordered sets" class="mw-redirect">posets</a> giving <a href="/wiki/Denotational_semantics" title="Denotational semantics">denotational semantics</a> for lambda calculus</li>
<li><a href="/wiki/Evaluation_strategy" title="Evaluation strategy">Evaluation strategy</a> — Rules for the evaluation of expressions in <a href="/wiki/Programming_language" title="Programming language">programming languages</a></li>
<li><a href="/wiki/Explicit_substitution" title="Explicit substitution">Explicit substitution</a> — The theory of substitution, as used in <a href="#.CE.B2-reduction" title="">β-reduction</a></li>
<li><a href="/wiki/Kleene-Rosser_paradox" title="Kleene-Rosser paradox">Kleene-Rosser paradox</a> — A demonstration that some form of lambda calculus is inconsistent</li>
<li><a href="/wiki/Knights_of_the_Lambda_Calculus" title="Knights of the Lambda Calculus">Knights of the Lambda Calculus</a> — A semi-fictional organization of <a href="/wiki/Lisp_programming_language" title="Lisp programming language" class="mw-redirect">LISP</a> and <a href="/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme</a> <a href="/wiki/Hacker_(computing)" title="Hacker (computing)">hackers</a></li>
<li><a href="/wiki/Lambda_cube" title="Lambda cube">Lambda cube</a> — A framework for some extensions of typed lambda calculus</li>
<li><a href="/wiki/Lambda-mu_calculus" title="Lambda-mu calculus">Lambda-mu calculus</a> — An extension of the lambda calculus for treating <a href="/wiki/Classical_logic" title="Classical logic">classical logic</a></li>
<li><a href="/wiki/Rewriting" title="Rewriting">Rewriting</a> — Transformation of formulæ in formal systems</li>
<li><a href="/wiki/SECD_machine" title="SECD machine">SECD machine</a> — A <a href="/wiki/Virtual_machine" title="Virtual machine">virtual machine</a> designed for the lambda calculus</li>
<li><a href="/wiki/SKI_combinator_calculus" title="SKI combinator calculus">SKI combinator calculus</a> — A computational system based on the <b><a href="#S" title="">S</a></b>, <b><a href="#K" title="">K</a></b> and <b><a href="#I" title="">I</a></b> combinators</li>
<li><a href="/wiki/System_F" title="System F">System F</a> — A typed lambda calculus with <a href="/wiki/Type_system" title="Type system">type</a>-variables</li>
<li><a href="/wiki/Typed_lambda_calculus" title="Typed lambda calculus">Typed lambda calculus</a> — Lambda calculus with <a href="/wiki/Type_system" title="Type system">typed</a> variables (and functions)</li>
<li><a href="/wiki/Unlambda" title="Unlambda">Unlambda</a> — An <a href="/wiki/Esoteric_programming_language" title="Esoteric programming language">esoteric</a> <a href="/wiki/Functional_programming_language" title="Functional programming language" class="mw-redirect">functional</a> <a href="/wiki/Programming_language" title="Programming language">programming language</a> based on combinatory logic</li>
</ul>
</div>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Lambda_calculus&amp;action=edit&amp;section=25" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<div class="references-small references-column-count references-column-count-2" style="-moz-column-count:2; column-count:2;">
<ol class="references">
<li id="cite_note-0"><b><a href="#cite_ref-0" title="">^</a></b> Henk Barendregt, <a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.26.7908" class="external text" title="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.26.7908" rel="nofollow"><i>The Impact of the Lambda Calculus in Logic and Computer Science.</i></a> <i>The Bulletin of Symbolic Logic</i>, Volume <b>3</b>, Number 2, June 1997.</li>
<li id="cite_note-1"><b><a href="#cite_ref-1" title="">^</a></b> <cite style="font-style:normal" class="" id="CITEREFBarendregt1984">Barendregt, Hendrik Pieter (1984), <i><a href="http://www.elsevier.com/wps/find/bookdescription.cws_home/501727/description" class="external text" title="http://www.elsevier.com/wps/find/bookdescription.cws_home/501727/description" rel="nofollow">The Lambda Calculus: Its Syntax and Semantics</a></i>, Studies in Logic and the Foundations of Mathematics, <b>103</b> (Revised edition ed.), North Holland, Amsterdam. <a href="ftp://ftp.cs.ru.nl/pub/CompMath.Found/ErrataLCalculus.pdf" class="external text" title="ftp://ftp.cs.ru.nl/pub/CompMath.Found/ErrataLCalculus.pdf" rel="nofollow">Corrections</a>, <a href="/wiki/Special:BookSources/0444875085" class="internal">ISBN 0-444-87508-5</a><span class="printonly">, <a href="http://www.elsevier.com/wps/find/bookdescription.cws_home/501727/description" class="external free" title="http://www.elsevier.com/wps/find/bookdescription.cws_home/501727/description" rel="nofollow">http://www.elsevier.com/wps/find/bookdescription.cws_home/501727/description</a></span></cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=The+Lambda+Calculus%3A+Its+Syntax+and+Semantics&amp;rft.aulast=Barendregt&amp;rft.aufirst=Hendrik+Pieter&amp;rft.au=Barendregt%2C+Hendrik+Pieter&amp;rft.date=1984&amp;rft.series=Studies+in+Logic+and+the+Foundations+of+Mathematics&amp;rft.volume=103&amp;rft.edition=Revised+edition&amp;rft.pub=North+Holland%2C+Amsterdam.+%5Bftp%3A%2F%2Fftp.cs.ru.nl%2Fpub%2FCompMath.Found%2FErrataLCalculus.pdf+Corrections%5D&amp;rft.isbn=0-444-87508-5&amp;rft_id=http%3A%2F%2Fwww.elsevier.com%2Fwps%2Ffind%2Fbookdescription.cws_home%2F501727%2Fdescription&amp;rfr_id=info:sid/en.wikipedia.org:Lambda_calculus"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-Selinger-2"><b><a href="#cite_ref-Selinger_2-0" title="">^</a></b> <cite style="font-style:normal" class="" id="CITEREFSelinger">Selinger, Peter, <i><a href="http://www.mathstat.dal.ca/~selinger/papers/lambdanotes.pdf" class="external text" title="http://www.mathstat.dal.ca/~selinger/papers/lambdanotes.pdf" rel="nofollow">Lecture Notes on the Lambda Calculus</a></i>, Department of Mathematics and Statistics, University of Ottawa, pp.&#160;9<span class="printonly">, <a href="http://www.mathstat.dal.ca/~selinger/papers/lambdanotes.pdf" class="external free" title="http://www.mathstat.dal.ca/~selinger/papers/lambdanotes.pdf" rel="nofollow">http://www.mathstat.dal.ca/~selinger/papers/lambdanotes.pdf</a></span></cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Lecture+Notes+on+the+Lambda+Calculus&amp;rft.aulast=Selinger&amp;rft.aufirst=Peter&amp;rft.au=Selinger%2C+Peter&amp;rft.pages=pp.%26nbsp%3B9&amp;rft.pub=Department+of+Mathematics+and+Statistics%2C+University+of+Ottawa&amp;rft_id=http%3A%2F%2Fwww.mathstat.dal.ca%2F%7Eselinger%2Fpapers%2Flambdanotes.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Lambda_calculus"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-BarendregtBarendsen-3"><b><a href="#cite_ref-BarendregtBarendsen_3-0" title="">^</a></b> <cite style="font-style:normal" class="" id="CITEREFBarendregtBarendsenMarch_2000">Barendregt, Henk; Barendsen, Erik (March 2000), <i><a href="ftp://ftp.cs.ru.nl/pub/CompMath.Found/lambda.pdf" class="external text" title="ftp://ftp.cs.ru.nl/pub/CompMath.Found/lambda.pdf" rel="nofollow">Introduction to Lambda Calculus</a></i><span class="printonly">, <a href="ftp://ftp.cs.ru.nl/pub/CompMath.Found/lambda.pdf" class="external free" title="ftp://ftp.cs.ru.nl/pub/CompMath.Found/lambda.pdf" rel="nofollow">ftp://ftp.cs.ru.nl/pub/CompMath.Found/lambda.pdf</a></span></cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Introduction+to+Lambda+Calculus&amp;rft.aulast=Barendregt&amp;rft.aufirst=Henk&amp;rft.au=Barendregt%2C+Henk&amp;rft.au=Barendsen%2C+Erik&amp;rft.date=March+2000&amp;rft_id=ftp%3A%2F%2Fftp.cs.ru.nl%2Fpub%2FCompMath.Found%2Flambda.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Lambda_calculus"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-4"><b><a href="#cite_ref-4" title="">^</a></b> <cite style="font-style:normal" class="book" id="CITEREFFelleisenMatthew_Flatt2009">Felleisen, Matthias; Matthew Flatt (2006). <i><a href="http://www.cs.utah.edu/plt/publications/pllc.pdf" class="external text" title="http://www.cs.utah.edu/plt/publications/pllc.pdf" rel="nofollow">Programming Languages and Lambda Calculi</a></i>. pp.&#160;26<span class="printonly">. <a href="http://www.cs.utah.edu/plt/publications/pllc.pdf" class="external free" title="http://www.cs.utah.edu/plt/publications/pllc.pdf" rel="nofollow">http://www.cs.utah.edu/plt/publications/pllc.pdf</a></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Programming+Languages+and+Lambda+Calculi&amp;rft.aulast=Felleisen&amp;rft.aufirst=Matthias&amp;rft.au=Felleisen%2C+Matthias&amp;rft.au=Matthew+Flatt&amp;rft.date=2006&amp;rft.pages=pp.%26nbsp%3B26&amp;rft_id=http%3A%2F%2Fwww.cs.utah.edu%2Fplt%2Fpublications%2Fpllc.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Lambda_calculus"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-5"><b><a href="#cite_ref-5" title="">^</a></b> <cite style="font-style:normal" class="" id="CITEREFSelinger">Selinger, Peter, <i><a href="http://www.mathstat.dal.ca/~selinger/papers/lambdanotes.pdf" class="external text" title="http://www.mathstat.dal.ca/~selinger/papers/lambdanotes.pdf" rel="nofollow">Lecture Notes on the Lambda Calculus</a></i>, Department of Mathematics and Statistics, University of Ottawa, pp.&#160;16<span class="printonly">, <a href="http://www.mathstat.dal.ca/~selinger/papers/lambdanotes.pdf" class="external free" title="http://www.mathstat.dal.ca/~selinger/papers/lambdanotes.pdf" rel="nofollow">http://www.mathstat.dal.ca/~selinger/papers/lambdanotes.pdf</a></span></cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Lecture+Notes+on+the+Lambda+Calculus&amp;rft.aulast=Selinger&amp;rft.aufirst=Peter&amp;rft.au=Selinger%2C+Peter&amp;rft.pages=pp.%26nbsp%3B16&amp;rft.pub=Department+of+Mathematics+and+Statistics%2C+University+of+Ottawa&amp;rft_id=http%3A%2F%2Fwww.mathstat.dal.ca%2F%7Eselinger%2Fpapers%2Flambdanotes.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Lambda_calculus"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-6"><b><a href="#cite_ref-6" title="">^</a></b> Simon Peyton-Jones, Implementation of Functional Programming Languages, Prentice Hall, 1987</li>
<li id="cite_note-7"><b><a href="#cite_ref-7" title="">^</a></b> R. Statman, "<a href="http://ieeexplore.ieee.org/xpl/freeabs_all.jsp?arnumber=4567929" class="external text" title="http://ieeexplore.ieee.org/xpl/freeabs_all.jsp?arnumber=4567929" rel="nofollow">The typed λ-calculus is not elementary recursive.</a>" <i>Theoretical Computer Science</i>, (1979) <b>9</b> pp73-81.</li>
<li id="cite_note-8"><b><a href="#cite_ref-8" title="">^</a></b> F.-R. Sinot. "<a href="http://www.lsv.ens-cachan.fr/~sinot/publis.php?onlykey=sinot-jlc05" class="external text" title="http://www.lsv.ens-cachan.fr/~sinot/publis.php?onlykey=sinot-jlc05" rel="nofollow">Director Strings Revisited: A Generic Approach to the Efficient Representation of Free Variables in Higher-order Rewriting.</a>" <i>Journal of Logic and Computation</i> <b>15</b>(2), pages 201-218, 2005.</li>
</ol>
</div>
<p><a name="Further_reading" id="Further_reading"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Lambda_calculus&amp;action=edit&amp;section=26" title="Edit section: Further reading">edit</a>]</span> <span class="mw-headline">Further reading</span></h2>
<ul>
<li>Abelson, Harold &amp; Gerald Jay Sussman. <a href="/wiki/Structure_and_Interpretation_of_Computer_Programs" title="Structure and Interpretation of Computer Programs">Structure and Interpretation of Computer Programs</a>. <a href="/wiki/The_MIT_Press" title="The MIT Press" class="mw-redirect">The MIT Press</a>. <a href="/wiki/Special:BookSources/0262510871" class="internal">ISBN 0-262-51087-1</a>.</li>
<li>Hendrik Pieter Barendregt <a href="http://citeseer.ist.psu.edu/barendregt94introduction.html" class="external text" title="http://citeseer.ist.psu.edu/barendregt94introduction.html" rel="nofollow"><i>Introduction to Lambda Calculus</i></a>.</li>
<li><a href="/wiki/Hendrik_Pieter_Barendregt" title="Hendrik Pieter Barendregt" class="mw-redirect">Barendregt, Hendrik Pieter</a>, <i>The Type Free Lambda Calculus</i> pp1091-1132 of <i>Handbook of Mathematical Logic</i>, <a href="/wiki/North-Holland" title="North-Holland" class="mw-redirect">North-Holland</a> (1977) <a href="/wiki/Special:BookSources/072042285X" class="internal">ISBN 0-7204-2285-X</a></li>
<li>Church, Alonzo, <i>An unsolvable problem of elementary number theory</i>, <a href="/wiki/American_Journal_of_Mathematics" title="American Journal of Mathematics">American Journal of Mathematics</a>, 58 (1936), pp. 345–363. This paper contains the proof that the equivalence of lambda expressions is in general not decidable.</li>
<li>Kleene, Stephen, <i>A theory of positive integers in formal logic</i>, <a href="/wiki/American_Journal_of_Mathematics" title="American Journal of Mathematics">American Journal of Mathematics</a>, 57 (1935), pp. 153–173 and 219–244. Contains the lambda calculus definitions of several familiar functions.</li>
<li><a href="/wiki/Peter_Landin" title="Peter Landin" class="mw-redirect">Landin, Peter</a>, <i>A Correspondence Between ALGOL 60 and Church's Lambda-Notation</i>, <a href="/wiki/Communications_of_the_ACM" title="Communications of the ACM">Communications of the ACM</a>, vol. 8, no. 2 (1965), pages 89-101. Available from the <a href="http://portal.acm.org/citation.cfm?id=363749&amp;coll=portal&amp;dl=ACM" class="external text" title="http://portal.acm.org/citation.cfm?id=363749&amp;coll=portal&amp;dl=ACM" rel="nofollow">ACM site</a>. A classic paper highlighting the importance of lambda-calculus as a basis for programming languages.</li>
<li>Larson, Jim, <a href="http://www.jetcafe.org/~jim/lambda.html" class="external text" title="http://www.jetcafe.org/~jim/lambda.html" rel="nofollow"><i>An Introduction to Lambda Calculus and Scheme</i></a>. A gentle introduction for programmers.</li>
<li>Schalk, A. and Simmons, H. (2005) <i><a href="http://www.cs.man.ac.uk/~hsimmons/BOOKS/lcalculus.pdf" class="external text" title="http://www.cs.man.ac.uk/~hsimmons/BOOKS/lcalculus.pdf" rel="nofollow">An introduction to λ-calculi and arithmetic with a decent selection of exercises</a>. Notes for a course in the Mathematical Logic MSc at Manchester University.</i></li>
</ul>
<p><i>Some parts of this article are based on material from <a href="/wiki/Free_On-line_Dictionary_of_Computing" title="Free On-line Dictionary of Computing">FOLDOC</a>, used with <a href="/wiki/Wikipedia:Foldoc_license" title="Wikipedia:Foldoc license">permission</a>.</i></p>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Lambda_calculus&amp;action=edit&amp;section=27" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<ul>
<li>Henk Barendregt, Erik Barendsen <a href="http://www.cs.ru.nl/E.Barendsen/onderwijs/sl2/materiaal/lambda.pdf" class="external text" title="http://www.cs.ru.nl/E.Barendsen/onderwijs/sl2/materiaal/lambda.pdf" rel="nofollow"><i>Introduction to Lambda Calculus</i></a>-(<a href="/wiki/Portable_Document_Format" title="Portable Document Format">PDF</a>)</li>
<li>Achim Jung, <i><a href="http://www.cs.bham.ac.uk/~axj/pub/papers/lambda-calculus.pdf" class="external text" title="http://www.cs.bham.ac.uk/~axj/pub/papers/lambda-calculus.pdf" rel="nofollow">A Short Introduction to the Lambda Calculus</a></i>-(<a href="/wiki/Portable_Document_Format" title="Portable Document Format">PDF</a>)</li>
<li>David C. Keenan, <i><a href="http://users.bigpond.net.au/d.keenan/Lambda/" class="external text" title="http://users.bigpond.net.au/d.keenan/Lambda/" rel="nofollow">To Dissect a Mockingbird: A Graphical Notation for the Lambda Calculus with Animated Reduction</a></i></li>
<li>Raúl Rojas, <i><a href="http://www.inf.fu-berlin.de/lehre/WS03/alpi/lambda.pdf" class="external text" title="http://www.inf.fu-berlin.de/lehre/WS03/alpi/lambda.pdf" rel="nofollow">A Tutorial Introduction to the Lambda Calculus</a></i>-(<a href="/wiki/Portable_Document_Format" title="Portable Document Format">PDF</a>)</li>
<li>Peter Selinger, <i><a href="http://www.mscs.dal.ca/~selinger/papers/proto.pdf" class="external text" title="http://www.mscs.dal.ca/~selinger/papers/proto.pdf" rel="nofollow">Lecture Notes on the Lambda Calculus</a></i>-(<a href="/wiki/Portable_Document_Format" title="Portable Document Format">PDF</a>)</li>
<li>L. Allison, <i><a href="http://www.allisons.org/ll/FP/Lambda/Examples/" class="external text" title="http://www.allisons.org/ll/FP/Lambda/Examples/" rel="nofollow">Some executable λ-calculus examples</a></i></li>
<li>Chris Barker, <i><a href="http://homepages.nyu.edu/~cb125/Lambda/" class="external text" title="http://homepages.nyu.edu/~cb125/Lambda/" rel="nofollow">Some executable (Javascript) simple examples, and text.</a></i></li>
<li>Georg P. Loczewski, <a href="http://www.lambda-bound.com/book/lambdacalc/lcalconl.html" class="external text" title="http://www.lambda-bound.com/book/lambdacalc/lcalconl.html" rel="nofollow"><i>The Lambda Calculus and A++</i></a></li>
<li>Bret Victor, <i><a href="http://worrydream.com/AlligatorEggs/" class="external text" title="http://worrydream.com/AlligatorEggs/" rel="nofollow">Alligator Eggs: A Puzzle Game Based on Lambda Calculus</a></i></li>
<li><i><a href="http://www.safalra.com/science/lambda-calculus/" class="external text" title="http://www.safalra.com/science/lambda-calculus/" rel="nofollow">Lambda Calculus</a></i> on <a href="http://www.safalra.com/" class="external text" title="http://www.safalra.com/" rel="nofollow">Safalra’s Website</a></li>
<li><i><a href="http://planetmath.org/?op=getobj&amp;from=objects&amp;id=2788" class="external text" title="http://planetmath.org/?op=getobj&amp;from=objects&amp;id=2788" rel="nofollow">Lambda Calculus</a> on <a href="/wiki/PlanetMath" title="PlanetMath">PlanetMath</a></i></li>
<li><a href="http://lci.sourceforge.net/" class="external text" title="http://lci.sourceforge.net/" rel="nofollow">LCI Lambda Interpreter</a> a simple yet powerful pure calculus interpreter</li>
<li><a href="http://lambda-the-ultimate.org/classic/lc.html" class="external text" title="http://lambda-the-ultimate.org/classic/lc.html" rel="nofollow">Lambda Calculus links on Lambda-the-Ultimate</a></li>
<li>Mike Thyer, <a href="http://thyer.name/lambda-animator/" class="external text" title="http://thyer.name/lambda-animator/" rel="nofollow">Lambda Animator</a>, a graphical Java applet demonstrating alternative reduction strategies.</li>
<li><a href="http://www.jetcafe.org/~jim/lambda.html" class="external text" title="http://www.jetcafe.org/~jim/lambda.html" rel="nofollow">An Introduction to Lambda Calculus and Scheme</a>, by Jim Larson</li>
</ul>


<!-- 
NewPP limit report
Preprocessor node count: 3005/1000000
Post-expand include size: 24895/2048000 bytes
Template argument size: 7111/2048000 bytes
Expensive parser function count: 0/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:18203-0!1!0!default!!en!2 and timestamp 20090403021505 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Lambda_calculus">http://en.wikipedia.org/wiki/Lambda_calculus</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Computational_models" title="Category:Computational models">Computational models</a></span> | <span dir='ltr'><a href="/wiki/Category:Lambda_calculus" title="Category:Lambda calculus">Lambda calculus</a></span> | <span dir='ltr'><a href="/wiki/Category:Theoretical_computer_science" title="Category:Theoretical computer science">Theoretical computer science</a></span> | <span dir='ltr'><a href="/wiki/Category:Formal_methods" title="Category:Formal methods">Formal methods</a></span> | <span dir='ltr'><a href="/wiki/Category:Recursion_theory" title="Category:Recursion theory">Recursion theory</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_example_code" title="Category:Articles with example code">Articles with example code</a></span> | <span dir='ltr'><a href="/wiki/Category:American_inventions" title="Category:American inventions">American inventions</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Lambda_calculus" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Lambda_calculus" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Lambda_calculus&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Lambda_calculus&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Lambda_calculus" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Lambda_calculus" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Lambda_calculus" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Lambda_calculus&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Lambda_calculus&amp;oldid=281420097" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Lambda_calculus&amp;id=281420097">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-bn"><a href="http://bn.wikipedia.org/wiki/%E0%A6%B2%E0%A7%8D%E0%A6%AF%E0%A6%BE%E0%A6%AE%E0%A7%8D%E2%80%8C%E0%A6%A1%E0%A6%BE_%E0%A6%95%E0%A7%8D%E0%A6%AF%E0%A6%BE%E0%A6%B2%E0%A6%95%E0%A7%81%E0%A6%B2%E0%A6%BE%E0%A6%B8">বাংলা</a></li>
				<li class="interwiki-ca"><a href="http://ca.wikipedia.org/wiki/C%C3%A0lcul_lambda">Català</a></li>
				<li class="interwiki-cs"><a href="http://cs.wikipedia.org/wiki/Lambda_kalkul">Česky</a></li>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/Lambda-Kalk%C3%BCl">Deutsch</a></li>
				<li class="interwiki-el"><a href="http://el.wikipedia.org/wiki/%CE%9B%CE%BF%CE%B3%CE%B9%CF%83%CE%BC%CF%8C%CF%82_%CE%BB%CE%AC%CE%BC%CE%B4%CE%B1">Ελληνικά</a></li>
				<li class="interwiki-es"><a href="http://es.wikipedia.org/wiki/C%C3%A1lculo_lambda">Español</a></li>
				<li class="interwiki-eo"><a href="http://eo.wikipedia.org/wiki/Lambda-kalkulo">Esperanto</a></li>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Lambda-calcul">Français</a></li>
				<li class="interwiki-hr"><a href="http://hr.wikipedia.org/wiki/Lambda_ra%C4%8Dun">Hrvatski</a></li>
				<li class="interwiki-it"><a href="http://it.wikipedia.org/wiki/Lambda_calcolo">Italiano</a></li>
				<li class="interwiki-he"><a href="http://he.wikipedia.org/wiki/%D7%AA%D7%97%D7%A9%D7%99%D7%91_%D7%9C%D7%9E%D7%91%D7%93%D7%90">עברית</a></li>
				<li class="interwiki-hu"><a href="http://hu.wikipedia.org/wiki/Lambda-kalkulus">Magyar</a></li>
				<li class="interwiki-nl"><a href="http://nl.wikipedia.org/wiki/Lambdacalculus">Nederlands</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/%E3%83%A9%E3%83%A0%E3%83%80%E8%A8%88%E7%AE%97">日本語</a></li>
				<li class="interwiki-pl"><a href="http://pl.wikipedia.org/wiki/Rachunek_lambda">Polski</a></li>
				<li class="interwiki-pt"><a href="http://pt.wikipedia.org/wiki/C%C3%A1lculo_lambda">Português</a></li>
				<li class="interwiki-ru"><a href="http://ru.wikipedia.org/wiki/%D0%9B%D1%8F%D0%BC%D0%B1%D0%B4%D0%B0-%D0%B8%D1%81%D1%87%D0%B8%D1%81%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5">Русский</a></li>
				<li class="interwiki-simple"><a href="http://simple.wikipedia.org/wiki/Lambda_calculus">Simple English</a></li>
				<li class="interwiki-sk"><a href="http://sk.wikipedia.org/wiki/Lambda_kalkul">Slovenčina</a></li>
				<li class="interwiki-sv"><a href="http://sv.wikipedia.org/wiki/Lambdakalkyl">Svenska</a></li>
				<li class="interwiki-uk"><a href="http://uk.wikipedia.org/wiki/%D0%9B%D1%8F%D0%BC%D0%B1%D0%B4%D0%B0-%D1%87%D0%B8%D1%81%D0%BB%D0%B5%D0%BD%D0%BD%D1%8F">Українська</a></li>
				<li class="interwiki-zh"><a href="http://zh.wikipedia.org/wiki/%CE%9B%E6%BC%94%E7%AE%97">中文</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 3 April 2009, at 02:12.</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv190 in 0.718 secs. --></body></html>
