<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Resource Acquisition Is Initialization,Cleanup from March 2007,Special:Search/Resource Acquisition Is Initialization,Ada (programming language),Auto ptr,Bjarne Stroustrup,Boost,Boost library,C++,C++0x,C (programming language)" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Resource_Acquisition_Is_Initialization&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Resource_Acquisition_Is_Initialization&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Resource Acquisition Is Initialization - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Resource_Acquisition_Is_Initialization";
		var wgTitle = "Resource Acquisition Is Initialization";
		var wgAction = "view";
		var wgArticleId = "693532";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 282839483;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
<style type="text/css">/*<![CDATA[*/
.source-cpp {line-height: normal;}
.source-cpp li, .source-cpp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for cpp
 * CSS class: source-cpp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-cpp .de1, .source-cpp .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-cpp  {}
.source-cpp .head {}
.source-cpp .foot {}
.source-cpp .imp {font-weight: bold; color: red;}
.source-cpp .ln-xtra {color: #cc0; background-color: #ffc;}
.source-cpp li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-cpp li.li2 {font-weight: bold;}
.source-cpp .kw1 {color: #0000ff;}
.source-cpp .kw2 {color: #0000ff;}
.source-cpp .kw3 {color: #0000dd;}
.source-cpp .kw4 {color: #0000ff;}
.source-cpp .co1 {color: #ff0000;}
.source-cpp .co2 {color: #339900;}
.source-cpp .coMULTI {color: #ff0000; font-style: italic;}
.source-cpp .es0 {color: #666666; font-weight: bold;}
.source-cpp .br0 {color: #000000;}
.source-cpp .st0 {color: #666666;}
.source-cpp .nu0 {color: #0000dd;}
.source-cpp .me1 {color: #00eeff;}
.source-cpp .me2 {color: #00eeff;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-java {line-height: normal;}
.source-java li, .source-java pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for java
 * CSS class: source-java, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-java .de1, .source-java .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-java  {}
.source-java .head {}
.source-java .foot {}
.source-java .imp {font-weight: bold; color: red;}
.source-java .ln-xtra {color: #cc0; background-color: #ffc;}
.source-java li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-java li.li2 {font-weight: bold;}
.source-java .kw1 {color: #b1b100;}
.source-java .kw2 {color: #000000; font-weight: bold;}
.source-java .kw3 {color: #aaaadd; font-weight: bold;}
.source-java .kw4 {color: #993333;}
.source-java .co1 {color: #808080; font-style: italic;}
.source-java .co2 {color: #a1a100;}
.source-java .coMULTI {color: #808080; font-style: italic;}
.source-java .es0 {color: #000099; font-weight: bold;}
.source-java .br0 {color: #66cc66;}
.source-java .st0 {color: #ff0000;}
.source-java .nu0 {color: #cc66cc;}
.source-java .me1 {color: #006600;}
.source-java .me2 {color: #006600;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-ruby {line-height: normal;}
.source-ruby li, .source-ruby pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for ruby
 * CSS class: source-ruby, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-ruby .de1, .source-ruby .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-ruby  {}
.source-ruby .head {}
.source-ruby .foot {}
.source-ruby .imp {font-weight: bold; color: red;}
.source-ruby .ln-xtra {color: #cc0; background-color: #ffc;}
.source-ruby li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-ruby li.li2 {font-weight: bold;}
.source-ruby .kw1 {color:#9966CC; font-weight:bold;}
.source-ruby .kw2 {color:#0000FF; font-weight:bold;}
.source-ruby .kw3 {color:#CC0066; font-weight:bold;}
.source-ruby .kw4 {color:#CC00FF; font-weight:bold;}
.source-ruby .co1 {color:#008000; font-style:italic;}
.source-ruby .coMULTI {color:#000080; font-style:italic;}
.source-ruby .es0 {color:#000099;}
.source-ruby .br0 {color:#006600; font-weight:bold;}
.source-ruby .st0 {color:#996600;}
.source-ruby .nu0 {color:#006666;}
.source-ruby .me1 {color:#9900CC;}
.source-ruby .sc0 {}
.source-ruby .sc1 {}
.source-ruby .sc2 {}
.source-ruby .re0 {color:#ff6633; font-weight:bold;}
.source-ruby .re1 {color:#0066ff; font-weight:bold;}
.source-ruby .re2 {color:#6666ff; font-weight:bold;}
.source-ruby .re3 {color:#ff3333; font-weight:bold;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-c .de1, .source-c .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-c  {}
.source-c .head {}
.source-c .foot {}
.source-c .imp {font-weight: bold; color: red;}
.source-c .ln-xtra {color: #cc0; background-color: #ffc;}
.source-c li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-c li.li2 {font-weight: bold;}
.source-c .kw1 {color: #b1b100;}
.source-c .kw2 {color: #000000; font-weight: bold;}
.source-c .kw3 {color: #000066;}
.source-c .kw4 {color: #993333;}
.source-c .co1 {color: #808080; font-style: italic;}
.source-c .co2 {color: #339933;}
.source-c .coMULTI {color: #808080; font-style: italic;}
.source-c .es0 {color: #000099; font-weight: bold;}
.source-c .br0 {color: #66cc66;}
.source-c .st0 {color: #ff0000;}
.source-c .nu0 {color: #cc66cc;}
.source-c .me1 {color: #202020;}
.source-c .me2 {color: #202020;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style>		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Resource_Acquisition_Is_Initialization skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Resource Acquisition Is Initialization</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<table class="metadata plainlinks ambox ambox-style" style="">
<tr>
<td class="mbox-image">
<div style="width: 52px;"><a href="/wiki/File:Ambox_style.png" class="image" title="Ambox style.png"><img alt="" src="http://upload.wikimedia.org/wikipedia/en/d/d6/Ambox_style.png" width="40" height="40" border="0" /></a></div>
</td>
<td class="mbox-text" style="">This article <b>may require <a href="/wiki/Wikipedia:Cleanup" title="Wikipedia:Cleanup">cleanup</a> to meet Wikipedia's <a href="/wiki/Wikipedia:Manual_of_Style" title="Wikipedia:Manual of Style">quality standards</a>.</b> Please <a href="http://en.wikipedia.org/w/index.php?title=Resource_Acquisition_Is_Initialization&amp;action=edit" class="external text" title="http://en.wikipedia.org/w/index.php?title=Resource_Acquisition_Is_Initialization&amp;action=edit" rel="nofollow">improve this article</a> if you can. <small><i>(March 2007)</i></small></td>
</tr>
</table>
<p><b>Resource Acquisition Is Initialization</b>, often referred to by the acronym <b>RAII</b>, is a popular <a href="/wiki/Design_pattern_(computer_science)" title="Design pattern (computer science)">design pattern</a> in several <a href="/wiki/Object-oriented_programming_language" title="Object-oriented programming language">object oriented programming languages</a> like <a href="/wiki/C%2B%2B" title="C++">C++</a>, <a href="/wiki/D_(programming_language)" title="D (programming language)">D</a> and <a href="/wiki/Ada_(programming_language)" title="Ada (programming language)">Ada</a>. The technique, invented by <a href="/wiki/Bjarne_Stroustrup" title="Bjarne Stroustrup">Bjarne Stroustrup</a><sup id="cite_ref-Stroustrup-RAII-invention_0-0" class="reference"><a href="#cite_note-Stroustrup-RAII-invention-0" title=""><span>[</span>1<span>]</span></a></sup>, ensures that when resources are acquired they are properly released by tying them to the lifespan of suitable objects: resources are acquired during the initialization of objects, when there is no chance of using them before the resource is available, and released with the destruction of the same objects, which is guaranteed to take place even in case of errors.</p>
<p>In C++, objects residing on the <a href="/wiki/Stack_(data_structure)" title="Stack (data structure)">stack</a> are automatically destroyed when the enclosing <a href="/wiki/Scope_(programming)" title="Scope (programming)">scope</a> is exited, including the case of <a href="/wiki/Exception_handling" title="Exception handling">exceptions</a> <sup id="cite_ref-Stroustrup-exception_1-0" class="reference"><a href="#cite_note-Stroustrup-exception-1" title=""><span>[</span>2<span>]</span></a></sup>; their destructor is called before the exception propagates.</p>
<p>RAII helps in writing exception-safe code: to release resources before permitting exceptions to propagate (in order to avoid resource leaks) one can write appropriate destructors once rather than dispersing and duplicating cleanup logic between exception handling blocks.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Language_Support"><span class="tocnumber">1</span> <span class="toctext">Language Support</span></a></li>
<li class="toclevel-1"><a href="#Typical_uses"><span class="tocnumber">2</span> <span class="toctext">Typical uses</span></a></li>
<li class="toclevel-1"><a href="#Mutability_.28C.2B.2B.29"><span class="tocnumber">3</span> <span class="toctext">Mutability (C++)</span></a></li>
<li class="toclevel-1"><a href="#C.2B.2B_example"><span class="tocnumber">4</span> <span class="toctext">C++ example</span></a></li>
<li class="toclevel-1"><a href="#Resource_management_without_RAII"><span class="tocnumber">5</span> <span class="toctext">Resource management without RAII</span></a></li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">6</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">7</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Language_Support" id="Language_Support"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Resource_Acquisition_Is_Initialization&amp;action=edit&amp;section=1" title="Edit section: Language Support">edit</a>]</span> <span class="mw-headline">Language Support</span></h2>
<p><a href="/wiki/C%2B%2B" title="C++">C++</a> and <a href="/wiki/D_programming_language" title="D programming language" class="mw-redirect">D</a> allow objects to be allocated on the <a href="/wiki/Call_stack" title="Call stack">stack</a> and their scoping rules ensure that destructors are called when a local object's scope ends. By putting the resource release logic in the destructor, C++'s and D's scoping provide direct support for RAII.</p>
<p><a name="Typical_uses" id="Typical_uses"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Resource_Acquisition_Is_Initialization&amp;action=edit&amp;section=2" title="Edit section: Typical uses">edit</a>]</span> <span class="mw-headline">Typical uses</span></h2>
<p>The RAII technique is often used for controlling thread locks in multi-threaded applications. In that use, the object releases the lock, if held, when destroyed. Another typical example is file management, wherein the file class closes the associated file, if open, when destroyed.</p>
<p>The ownership of dynamically allocated memory (such as memory allocated with <tt>new</tt> in C++ code) can be controlled with RAII, such that the memory is released when the RAII object is destroyed. For this purpose, the C++ Standard Library defines the <a href="/wiki/Smart_pointer" title="Smart pointer">smart pointer</a> class <a href="/wiki/Auto_ptr" title="Auto ptr">std::auto_ptr</a>. Furthermore, smart pointer with shared-ownership semantics such as <code>boost::shared_ptr</code> (defined in C++ by <a href="/wiki/Boost_library" title="Boost library" class="mw-redirect">Boost</a> and marked for inclusion in the new <a href="/wiki/C%2B%2B0x" title="C++0x">C++0x</a> standard), or policy based smart pointers such as <code>Loki::SmartPtr</code> (from <a href="/wiki/Loki_(C%2B%2B)" title="Loki (C++)">Loki</a>), can also be used to manage lifetime of shared objects.</p>
<p><a name="Mutability_.28C.2B.2B.29" id="Mutability_.28C.2B.2B.29"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Resource_Acquisition_Is_Initialization&amp;action=edit&amp;section=3" title="Edit section: Mutability (C++)">edit</a>]</span> <span class="mw-headline">Mutability (C++)</span></h2>
<p>In C++, an important consideration of classes that implement RAII is their mutability<sup id="cite_ref-Wilson-MutableRAII_2-0" class="reference"><a href="#cite_note-Wilson-MutableRAII-2" title=""><span>[</span>3<span>]</span></a></sup>. A class exhibiting <i>mutable RAII</i> provides facilities for instances to be assigned a new resource; one that exhibits <i>immutable RAII</i> does not. An example of the former is <a href="/wiki/Auto_ptr" title="Auto ptr">std::auto_ptr</a>; examples of the latter are the <a href="/wiki/STLSoft" title="STLSoft" class="mw-redirect">STLSoft</a> library's <code>stlsoft::scoped_handle</code> and <a href="/wiki/Boost" title="Boost">Boost.SmartPtr</a>'s <code>boost::scoped_ptr</code>.</p>
<p>Classes exhibiting <i>immutable RAII</i> are considerably easier to implement in C++, since the design need not account for assignment (including copy-assignment), except to explicitly prohibit it. Consider the following RAII class template that illustrates the simplicity of implementing <i>immutable RAII</i>. Compare this with the implementation of <a href="/wiki/Auto_ptr" title="Auto ptr">std::auto_ptr</a> or another <i>mutable RAII</i> smart pointer, which will have many more member functions and logic to handle premature release in cases of self-assignment.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
<span class="kw2">template</span> &lt;typename T&gt;
<span class="kw2">class</span> immutable_scoped_ptr
<span class="br0">{</span>
<span class="kw2">public</span>:
    <span class="kw2">explicit</span> immutable_scoped_ptr<span class="br0">(</span>T* t<span class="br0">)</span> throw<span class="br0">(</span><span class="br0">)</span>
        : t_<span class="br0">(</span>t<span class="br0">)</span>
    <span class="br0">{</span> <span class="br0">}</span>
 
    ~immutable_scoped_ptr<span class="br0">(</span><span class="br0">)</span> throw<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> <span class="kw3">delete</span> t_; <span class="br0">}</span>
 
    T&amp; operator *<span class="br0">(</span><span class="br0">)</span> <span class="kw4">const</span> throw<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> <span class="kw1">return</span> *t_; <span class="br0">}</span>
 
    T* operator -&gt;<span class="br0">(</span><span class="br0">)</span> <span class="kw4">const</span> throw<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> <span class="kw1">return</span> t_; <span class="br0">}</span>
 
<span class="kw2">private</span>:
    T* <span class="kw4">const</span> t_;
 
    <span class="co1">// prevent copying and assignment; not implemented</span>
    immutable_scoped_ptr<span class="br0">(</span><span class="kw4">const</span> immutable_scoped_ptr&amp;<span class="br0">)</span>;
    immutable_scoped_ptr&amp; operator= <span class="br0">(</span><span class="kw4">const</span> immutable_scoped_ptr&amp;<span class="br0">)</span>;
<span class="br0">}</span>;
</pre></div>
<p><a name="C.2B.2B_example" id="C.2B.2B_example"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Resource_Acquisition_Is_Initialization&amp;action=edit&amp;section=4" title="Edit section: C++ example">edit</a>]</span> <span class="mw-headline">C++ example</span></h2>
<p>The following RAII class is a lightweight wrapper of the <a href="/wiki/C_standard_library" title="C standard library">C standard library</a> file system calls.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
<span class="co2">#include &lt;cstdio&gt;</span>
<span class="co2">#include &lt;stdexcept&gt; // std::runtime_error</span>
<span class="kw2">class</span> <span class="kw4">file</span>
<span class="br0">{</span>
<span class="kw2">public</span>:
    <span class="kw4">file</span> <span class="br0">(</span><span class="kw4">const</span> <span class="kw4">char</span>* filename<span class="br0">)</span>
        : file_<span class="br0">(</span>std::<span class="kw3">fopen</span><span class="br0">(</span>filename, <span class="st0">"w+"</span><span class="br0">)</span><span class="br0">)</span>
    <span class="br0">{</span>
        <span class="kw1">if</span> <span class="br0">(</span>!file_<span class="br0">)</span>
            throw std::<span class="me2">runtime_error</span><span class="br0">(</span><span class="st0">"file open failure"</span><span class="br0">)</span>;
    <span class="br0">}</span>
 
    ~<span class="kw4">file</span><span class="br0">(</span><span class="br0">)</span>
    <span class="br0">{</span>
        <span class="kw1">if</span> <span class="br0">(</span><span class="nu0">0</span> != std::<span class="kw3">fclose</span><span class="br0">(</span>file_<span class="br0">)</span><span class="br0">)</span> <span class="co1">// failed to flush latest changes?</span>
        <span class="br0">{</span>
            <span class="co1">// handle it</span>
        <span class="br0">}</span>
    <span class="br0">}</span>
 
    <span class="kw4">void</span> write <span class="br0">(</span><span class="kw4">const</span> <span class="kw4">char</span>* str<span class="br0">)</span>
    <span class="br0">{</span>
        <span class="kw1">if</span> <span class="br0">(</span><span class="kw2">EOF</span> == std::<span class="kw3">fputs</span><span class="br0">(</span>str, file_<span class="br0">)</span><span class="br0">)</span>
            throw std::<span class="me2">runtime_error</span><span class="br0">(</span><span class="st0">"file write failure"</span><span class="br0">)</span>;
    <span class="br0">}</span>
 
<span class="kw2">private</span>:
    std::<span class="kw4">FILE</span>* file_;
 
    <span class="co1">// prevent copying and assignment; not implemented</span>
    <span class="kw4">file</span> <span class="br0">(</span><span class="kw4">const</span> <span class="kw4">file</span> &amp;<span class="br0">)</span>;
    <span class="kw4">file</span> &amp; operator= <span class="br0">(</span><span class="kw4">const</span> <span class="kw4">file</span> &amp;<span class="br0">)</span>;
<span class="br0">}</span>;
</pre></div>
<p>Class <code>file</code> can then be used as follows:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-cpp">
<span class="kw4">void</span> example_usage<span class="br0">(</span><span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw4">file</span> logfile<span class="br0">(</span><span class="st0">"logfile.txt"</span><span class="br0">)</span>; <span class="co1">// open file (acquire resource)</span>
    logfile.<span class="me1">write</span><span class="br0">(</span><span class="st0">"hello logfile!"</span><span class="br0">)</span>;
    <span class="co1">// continue using logfile ...</span>
    <span class="co1">// throw exceptions or return without worrying about closing the log;</span>
    <span class="co1">// it is closed automatically when logfile goes out of scope</span>
<span class="br0">}</span>
</pre></div>
<p>This works because the class <code>file</code> encapsulates the management of the <code>FILE*</code> file handle. When objects <code>file</code> are local to a function, C++ guarantees that they are destroyed at the end of the enclosing scope (the function in the example), and the <code>file</code> destructor releases the file by calling <code>std::fclose(file_)</code>. Furthermore, <code>file</code> instances guarantee that a file is available by throwing an exception if the file could not be opened when creating the object.</p>
<p>Local variables easily manage multiple resources within a single function: They are destroyed in the reverse order of their construction, and an object is only destroyed if fully constructed. That is, if no exception propagates from its constructor.</p>
<p>Using RAII-enabled resources simplifies and reduces overall code size and helps ensure program correctness.</p>
<p><a name="Resource_management_without_RAII" id="Resource_management_without_RAII"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Resource_Acquisition_Is_Initialization&amp;action=edit&amp;section=5" title="Edit section: Resource management without RAII">edit</a>]</span> <span class="mw-headline">Resource management without RAII</span></h2>
<p>In <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a>, objects are not allocated on the stack and must be accessed through references; hence you cannot have automatic variables of objects that "go out of scope." Instead, all objects are <a href="/wiki/Dynamic_memory_allocation" title="Dynamic memory allocation">dynamically allocated</a>. In principle, dynamic allocation does not make RAII unfeasible per se; it could still be feasible if there were a guarantee that a "destructor" ("finalize") method would be called as soon as an object were pointed to by no references (i.e., if the object lifetime management were performed according to <a href="/wiki/Reference_counting" title="Reference counting">reference counting</a>).</p>
<p>However, Java objects have indefinite lifetimes which cannot be controlled by the programmer, because, according to the <a href="/wiki/Java_Virtual_Machine" title="Java Virtual Machine">Java Virtual Machine</a> specification, it is unpredictable when the <a href="/wiki/Garbage_collection_(computer_science)" title="Garbage collection (computer science)">garbage collector</a> will act. Indeed, the garbage collector may even never act at all to collect objects pointed to by no references. Hence the "finalize" method of an unreferenced object might be never called or called only long after the object became unreferenced. Resources must thus be closed manually by the programmer.</p>
<p>The preceding example would be written like this:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-java">
<span class="kw4">void</span> java_example<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
    <span class="co1">// open file (acquire resource)</span>
    <span class="kw2">final</span> LogFile logfile = <span class="kw2">new</span> LogFile<span class="br0">(</span><span class="st0">"logfile.txt"</span><span class="br0">)</span>;
 
    <span class="kw2">try</span> <span class="br0">{</span>
        logfile.<span class="me1">write</span><span class="br0">(</span><span class="st0">"hello logfile!"</span><span class="br0">)</span>;
 
        <span class="co1">// continue using logfile ...</span>
        <span class="co1">// throw exceptions or return without worrying about closing the log;</span>
        <span class="co1">// it is closed automatically when exiting this block</span>
    <span class="br0">}</span> <span class="kw2">finally</span> <span class="br0">{</span>
        <span class="co1">// explicitly release the resource</span>
        logfile.<span class="me1">close</span><span class="br0">(</span><span class="br0">)</span>;
    <span class="br0">}</span>
<span class="br0">}</span>
</pre></div>
<p>The burden of releasing resources falls on the programmer each time a resource is used.</p>
<p><a href="/wiki/Ruby_(programming_language)" title="Ruby (programming language)">Ruby</a> and <a href="/wiki/Smalltalk" title="Smalltalk">Smalltalk</a> do not support RAII, but have a simpler and more flexible pattern that makes use of methods that pass resources to closure blocks. Here is an example in Ruby:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-ruby">
<span class="kw4">File</span>.<span class="kw3">open</span><span class="br0">(</span><span class="st0">"logfile.txt"</span>, <span class="st0">"w+"</span><span class="br0">)</span> <span class="kw1">do</span> |logfile|
   logfile.<span class="me1">write</span><span class="br0">(</span><span class="st0">"hello logfile!"</span><span class="br0">)</span>
<span class="kw1">end</span>
</pre></div>
<p>The <code>open</code> method ensures that the file handle is closed without special precautions by the code writing to the file. This is similar to <a href="/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a>'s <a href="http://www.lispworks.com/documentation/HyperSpec/Body/s_unwind.htm" class="external text" title="http://www.lispworks.com/documentation/HyperSpec/Body/s_unwind.htm" rel="nofollow">'unwind-protect'</a>-based macros.</p>
<p><a href="/wiki/Python_(programming_language)" title="Python (programming language)">Python</a>'s <a href="http://www.python.org/dev/peps/pep-0343/" class="external text" title="http://www.python.org/dev/peps/pep-0343/" rel="nofollow">'with' statement</a> and the <a href="http://en.wikibooks.org/wiki/C_Sharp_Programming/Object_Lifetime" class="extiw" title="b:C Sharp Programming/Object Lifetime">'using' statement</a> in <a href="/wiki/C_Sharp_(programming_language)" title="C Sharp (programming language)">C#</a> and <a href="/wiki/Visual_Basic_.NET" title="Visual Basic .NET">Visual Basic 2005</a> provide deterministic resource management within a block and do away with the requirement for explicit <code>finally</code>-based cleanup and release.</p>
<p><a href="/wiki/Perl_(programming_language)" title="Perl (programming language)" class="mw-redirect">Perl</a> manages object lifetime by reference counting, making it possible to use RAII in a limited form. Objects that are no longer referenced are immediately released, so a destructor can release the resource at that time. However, object lifetime isn't necessarily bound to any lexical scope. One can store a reference to an object in a global variable, for example, thus keeping the object (and resource) alive indeterminately long. This makes it possible to accidentally leak resources that should have been released at the end of some scope.</p>
<p><a href="/wiki/C_(programming_language)" title="C (programming language)">C</a> requires significant administrative code since it doesn't support exceptions, try-finally blocks or RAII of any kind. A typical approach is to separate releasing of resources at the end of the function and jump there with gotos in the case of error. This way the cleanup code need not be duplicated.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">int</span> c_example<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
    <span class="kw4">int</span> retval = <span class="nu0">0</span>; <span class="co1">// return value 0 is success</span>
    FILE *f = fopen<span class="br0">(</span><span class="st0">"logfile.txt"</span>, <span class="st0">"w+"</span><span class="br0">)</span>;
    <span class="kw1">if</span> <span class="br0">(</span>!f<span class="br0">)</span> <span class="br0">{</span>
        retval = <span class="nu0">-1</span>;
        <span class="kw1">goto</span> bailout1;
    <span class="br0">}</span>
    <span class="kw1">if</span> <span class="br0">(</span>fputs<span class="br0">(</span><span class="st0">"hello logfile!"</span>, f<span class="br0">)</span> == EOF<span class="br0">)</span> <span class="br0">{</span>
        retval = <span class="nu0">-2</span>;
        <span class="kw1">goto</span> bailout2;
    <span class="br0">}</span>
 
    <span class="co1">// continue using the file resource</span>
 
    <span class="co1">// Releasing resources (in reverse order)</span>
  bailout2:
    <span class="kw1">if</span> <span class="br0">(</span>fclose<span class="br0">(</span>f<span class="br0">)</span> == EOF<span class="br0">)</span> <span class="br0">{</span>
        retval = <span class="nu0">-3</span>;
    <span class="br0">}</span>
 
  bailout1:
    <span class="kw1">return</span> retval;
<span class="br0">}</span>
</pre></div>
<p>Variations exist, but the example illustrates the general approach.</p>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Resource_Acquisition_Is_Initialization&amp;action=edit&amp;section=6" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<div class="references-small">
<ol class="references">
<li id="cite_note-Stroustrup-RAII-invention-0"><b><a href="#cite_ref-Stroustrup-RAII-invention_0-0" title="">^</a></b> <cite style="font-style:normal" class="book" id="CITEREFStroustrup1994"><a href="/wiki/Bjarne_Stroustrup" title="Bjarne Stroustrup">Stroustrup, Bjarne</a> (1994). <i>The Design and Evolution of C++</i>. Addison-Wesley. <a href="/wiki/Special:BookSources/0201543303" class="internal">ISBN 0-201-54330-3</a>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=The+Design+and+Evolution+of+C%2B%2B&amp;rft.aulast=Stroustrup&amp;rft.aufirst=Bjarne&amp;rft.au=Stroustrup%2C+Bjarne&amp;rft.date=1994&amp;rft.pub=Addison-Wesley&amp;rft.isbn=0-201-54330-3&amp;rfr_id=info:sid/en.wikipedia.org:Resource_Acquisition_Is_Initialization"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-Stroustrup-exception-1"><b><a href="#cite_ref-Stroustrup-exception_1-0" title="">^</a></b> <cite style="font-style:normal" class="" id="CITEREFBjarne_Stroustrup2001">Bjarne Stroustrup (April 2001) (<a href="/wiki/PDF" title="PDF" class="mw-redirect">PDF</a>). <i><a href="http://www.research.att.com/~bs/except.pdf" class="external text" title="http://www.research.att.com/~bs/except.pdf" rel="nofollow">Exception Safety: Concepts and Techniques</a></i><span class="printonly">. <a href="http://www.research.att.com/~bs/except.pdf" class="external free" title="http://www.research.att.com/~bs/except.pdf" rel="nofollow">http://www.research.att.com/~bs/except.pdf</a></span><span class="reference-accessdate">. Retrieved on 2007-09-02</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Exception+Safety%3A+Concepts+and+Techniques&amp;rft.aulast=Bjarne+Stroustrup&amp;rft.au=Bjarne+Stroustrup&amp;rft.date=April+2001&amp;rft_id=http%3A%2F%2Fwww.research.att.com%2F%7Ebs%2Fexcept.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Resource_Acquisition_Is_Initialization"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-Wilson-MutableRAII-2"><b><a href="#cite_ref-Wilson-MutableRAII_2-0" title="">^</a></b> <cite style="font-style:normal" class="book" id="CITEREFWilson2004"><a href="/wiki/Matthew_Wilson_(author)" title="Matthew Wilson (author)">Wilson, Matthew</a> (2004). <i>Imperfect C++</i>. Addison-Wesley. <a href="/wiki/Special:BookSources/0321228774" class="internal">ISBN 0-321-22877-4</a>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Imperfect+C%2B%2B&amp;rft.aulast=Wilson&amp;rft.aufirst=Matthew&amp;rft.au=Wilson%2C+Matthew&amp;rft.date=2004&amp;rft.pub=Addison-Wesley&amp;rft.isbn=0-321-22877-4&amp;rfr_id=info:sid/en.wikipedia.org:Resource_Acquisition_Is_Initialization"><span style="display: none;">&#160;</span></span></li>
</ol>
</div>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Resource_Acquisition_Is_Initialization&amp;action=edit&amp;section=7" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<table class="metadata plainlinks mbox-small" style="border:1px solid #aaa; background-color:#f9f9f9;">
<tr>
<td class="mbox-image"><a href="http://en.wikibooks.org/wiki/Special:Search/Resource_Acquisition_Is_Initialization" title="b:Special:Search/Resource Acquisition Is Initialization"><img alt="Sister project" src="http://upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/40px-Wikibooks-logo-en-noslogan.svg.png" width="40" height="40" border="0" /></a></td>
<td class="mbox-text" style="">The <a href="/wiki/Wikibooks" title="Wikibooks">Wikibook</a> <i><a href="http://en.wikibooks.org/wiki/Visual_Basic" class="extiw" title="wikibooks:Visual Basic">Visual Basic</a></i> has a page on the topic of
<div style="margin-left:10px;"><i><b><a href="http://en.wikibooks.org/wiki/Visual_Basic/Idioms#Resource_Acquisition_Is_Initialization_-_RAII" class="extiw" title="wikibooks:Visual Basic/Idioms">RAII in VB6</a></b></i></div>
</td>
</tr>
</table>
<table class="metadata plainlinks mbox-small" style="border:1px solid #aaa; background-color:#f9f9f9;">
<tr>
<td class="mbox-image"><a href="http://en.wikibooks.org/wiki/Special:Search/Resource_Acquisition_Is_Initialization" title="b:Special:Search/Resource Acquisition Is Initialization"><img alt="Sister project" src="http://upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/40px-Wikibooks-logo-en-noslogan.svg.png" width="40" height="40" border="0" /></a></td>
<td class="mbox-text" style="">The <a href="/wiki/Wikibooks" title="Wikibooks">Wikibook</a> <i><a href="http://en.wikibooks.org/wiki/More_C%2B%2B_Idioms" class="extiw" title="wikibooks:More C++ Idioms">More C++ Idioms</a></i> has a page on the topic of
<div style="margin-left:10px;"><i><b><a href="http://en.wikibooks.org/wiki/More_C%2B%2B_Idioms/Resource_Acquisition_Is_Initialization" class="extiw" title="wikibooks:More C++ Idioms/Resource Acquisition Is Initialization">Resource Acquisition Is Initialization</a></b></i></div>
</td>
</tr>
</table>
<ul>
<li>Article "<a href="http://www.hackcraft.net/raii/" class="external text" title="http://www.hackcraft.net/raii/" rel="nofollow">The RAII Programming Idiom</a>" by <a href="/wiki/Wikipedia_editor" title="Wikipedia editor" class="mw-redirect">Wikipedia editor</a> Jon Hanna (Talliesin)</li>
<li>Wiki <a href="http://c2.com/cgi/wiki?ResourceAcquisitionIsInitialization" class="external text" title="http://c2.com/cgi/wiki?ResourceAcquisitionIsInitialization" rel="nofollow">"Resource Acquisition Is Initialization"</a> from the Portland Pattern Repository</li>
<li>Sample Chapter "<a href="http://www.informit.com/articles/article.aspx?p=30642&amp;seqNum=8" class="external text" title="http://www.informit.com/articles/article.aspx?p=30642&amp;seqNum=8" rel="nofollow">Gotcha #67: Failure to Employ Resource Acquisition Is Initialization</a>" by Stephen Dewhurst</li>
<li>Interview "<a href="http://artima.com/intv/modern3.html" class="external text" title="http://artima.com/intv/modern3.html" rel="nofollow">A Conversation with Bjarne Stroustrup</a>" by Bill Venners</li>
<li>Article "<a href="http://artima.com/cppsource/bigtwo3.html" class="external text" title="http://artima.com/cppsource/bigtwo3.html" rel="nofollow">The Law of The Big Two</a>" by Bjorn Karlsson and Matthew Wilson</li>
<li>Blog Entry "<a href="http://jrdodds.blogs.com/blog/2004/08/raii_in_c.html" class="external text" title="http://jrdodds.blogs.com/blog/2004/08/raii_in_c.html" rel="nofollow">RAII in C++</a>" by Jonathan Dodds</li>
<li>Article "<a href="http://gethelp.devx.com/techtips/cpp_pro/10min/2001/november/10min1101.asp" class="external text" title="http://gethelp.devx.com/techtips/cpp_pro/10min/2001/november/10min1101.asp" rel="nofollow">Implementing the 'Resource Acquisition is Initialization' Idiom</a>" by Danny Kalev</li>
<li>Article "<a href="http://sourceforge.net/docman/display_doc.php?docid=8673&amp;group_id=9028" class="external text" title="http://sourceforge.net/docman/display_doc.php?docid=8673&amp;group_id=9028" rel="nofollow">RAII</a>" by Mike Nordell</li>
<li>Article "<a href="http://www.codeproject.com/KB/cpp/RAIIFactory.aspx" class="external text" title="http://www.codeproject.com/KB/cpp/RAIIFactory.aspx" rel="nofollow">RAII, Dynamic Objects, and Factories in C++</a>" by Roland Pibinger</li>
<li>Article "<a href="http://www.ddj.com/184409895" class="external text" title="http://www.ddj.com/184409895" rel="nofollow">Managing Dynamic Objects in C++</a>" by Tom Cargill</li>
<li>Blog "<a href="http://tombarta.wordpress.com/tag/raii/" class="external text" title="http://tombarta.wordpress.com/tag/raii/" rel="nofollow">tombarta RAII</a>"</li>
<li>Blog Entry "<a href="http://waelchatila.com/2005/10/06/1128588184677.html" class="external text" title="http://waelchatila.com/2005/10/06/1128588184677.html" rel="nofollow">RAII C++ Anti-Pattern</a>"</li>
<li>Article "<a href="http://www.onlamp.com/pub/a/onlamp/2006/05/04/smart-pointers.html" class="external text" title="http://www.onlamp.com/pub/a/onlamp/2006/05/04/smart-pointers.html" rel="nofollow">Smart pointers in C++</a>" by Julio M. Merino Vidal</li>
<li>Blog Entry "<a href="http://beautifulcode.oreillynet.com/2008/04/resource_management_a_critical.php" class="external text" title="http://beautifulcode.oreillynet.com/2008/04/resource_management_a_critical.php" rel="nofollow">Resource Management: A Critical Look at RAII</a>" by Michael Feathers</li>
</ul>


<!-- 
NewPP limit report
Preprocessor node count: 1922/1000000
Post-expand include size: 14899/2048000 bytes
Template argument size: 4843/2048000 bytes
Expensive parser function count: 1/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:693532-0!1!0!default!!en!2 and timestamp 20090409205039 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization">http://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Object-oriented_programming" title="Category:Object-oriented programming">Object-oriented programming</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_example_C%2B%2B_code" title="Category:Articles with example C++ code">Articles with example C++ code</a></span></div><div id="mw-hidden-catlinks" class="mw-hidden-cats-hidden">Hidden categories:&#32;<span dir='ltr'><a href="/wiki/Category:Cleanup_from_March_2007" title="Category:Cleanup from March 2007">Cleanup from March 2007</a></span> | <span dir='ltr'><a href="/wiki/Category:All_pages_needing_cleanup" title="Category:All pages needing cleanup">All pages needing cleanup</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Resource_Acquisition_Is_Initialization" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Resource_Acquisition_Is_Initialization" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Resource_Acquisition_Is_Initialization&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Resource_Acquisition_Is_Initialization&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Resource_Acquisition_Is_Initialization" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Resource_Acquisition_Is_Initialization" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Resource_Acquisition_Is_Initialization" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Resource_Acquisition_Is_Initialization&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Resource_Acquisition_Is_Initialization&amp;oldid=282839483" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Resource_Acquisition_Is_Initialization&amp;id=282839483">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/Ressourcenbelegung_ist_Initialisierung">Deutsch</a></li>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/RAII">Français</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/RAII">日本語</a></li>
				<li class="interwiki-pl"><a href="http://pl.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization">Polski</a></li>
				<li class="interwiki-pt"><a href="http://pt.wikipedia.org/wiki/Aquisi%C3%A7%C3%A3o_de_Recurso_%C3%A9_Inicializa%C3%A7%C3%A3o">Português</a></li>
				<li class="interwiki-ru"><a href="http://ru.wikipedia.org/wiki/%D0%9F%D0%BE%D0%BB%D1%83%D1%87%D0%B5%D0%BD%D0%B8%D0%B5_%D1%80%D0%B5%D1%81%D1%83%D1%80%D1%81%D0%B0_%D0%B5%D1%81%D1%82%D1%8C_%D0%B8%D0%BD%D0%B8%D1%86%D0%B8%D0%B0%D0%BB%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F">Русский</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 9 April 2009, at 20:30 (UTC).</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv203 in 0.041 secs. --></body></html>
