<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Common Lisp,Special:Search/Common Lisp,ACL2,ALGOL 68,ANSI Common Lisp,ASCII,AXIOM,Abstract syntax tree,Ada programming language,Addressing mode,Allegro Common Lisp" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Common_Lisp&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Common_Lisp&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Common Lisp - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Common_Lisp";
		var wgTitle = "Common Lisp";
		var wgAction = "view";
		var wgArticleId = "6068";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 277272064;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
<style type="text/css">/*<![CDATA[*/
.source-lisp {line-height: normal;}
.source-lisp li, .source-lisp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for lisp
 * CSS class: source-lisp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-lisp .de1, .source-lisp .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-lisp  {}
.source-lisp .head {}
.source-lisp .foot {}
.source-lisp .imp {font-weight: bold; color: red;}
.source-lisp .ln-xtra {color: #cc0; background-color: #ffc;}
.source-lisp li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-lisp li.li2 {font-weight: bold;}
.source-lisp .kw1 {color: #b1b100;}
.source-lisp .co1 {color: #808080; font-style: italic;}
.source-lisp .coMULTI {color: #808080; font-style: italic;}
.source-lisp .es0 {color: #000099; font-weight: bold;}
.source-lisp .br0 {color: #66cc66;}
.source-lisp .st0 {color: #ff0000;}
.source-lisp .nu0 {color: #cc66cc;}
.source-lisp .me0 {color: #555;}
.source-lisp .me1 {color: #555;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style>		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Common_Lisp skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Common Lisp</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<table class="infobox vevent" cellspacing="5" style="width: 22em; text-align: left; font-size: 88%; line-height: 1.5em;">
<caption class="summary" style="font-size: 125%; font-weight: bold;">Common Lisp</caption>
<tr>
<th style=""><a href="/wiki/Programming_paradigm" title="Programming paradigm">Paradigm</a></th>
<td class="" style=""><a href="/wiki/Multi-paradigm_programming_language" title="Multi-paradigm programming language">Multi-paradigm</a></td>
</tr>
<tr>
<th style="">Appeared in</th>
<td class="" style="">1984, 1994 for ANSI Common Lisp</td>
</tr>
<tr>
<th style=""><a href="/wiki/Software_developer" title="Software developer">Developer</a></th>
<td class="" style="">ANSI X3J13 committee</td>
</tr>
<tr>
<th style=""><a href="/wiki/Type_system" title="Type system">Typing discipline</a></th>
<td class="" style="">Dynamic, <a href="/wiki/Strongly-typed_programming_language" title="Strongly-typed programming language">strong</a></td>
</tr>
<tr>
<th style=""><a href="/wiki/Programming_language_implementation" title="Programming language implementation">Major implementations</a></th>
<td class="" style=""><a href="/wiki/Allegro_Common_Lisp" title="Allegro Common Lisp">Allegro CL</a>, <a href="/wiki/Armed_Bear_Common_Lisp" title="Armed Bear Common Lisp">ABCL</a>, <a href="/wiki/CLISP" title="CLISP">CLISP</a>, <a href="/wiki/Clozure_CL" title="Clozure CL">Clozure CL</a>, <a href="/wiki/CMUCL" title="CMUCL" class="mw-redirect">CMUCL</a>, <a href="/wiki/Embeddable_Common_Lisp" title="Embeddable Common Lisp">ECL</a>, <a href="/wiki/GNU_Common_Lisp" title="GNU Common Lisp">GCL</a>, <a href="/wiki/LispWorks" title="LispWorks">LispWorks</a>, <a href="/wiki/Movitz" title="Movitz">Movitz</a>, <a href="/wiki/Scieneer_Common_Lisp" title="Scieneer Common Lisp">Scieneer CL</a>, <a href="/wiki/SBCL" title="SBCL" class="mw-redirect">SBCL</a></td>
</tr>
<tr>
<th style=""><a href="/wiki/Programming_language_dialect" title="Programming language dialect" class="mw-redirect">Dialects</a></th>
<td class="" style="">CLtL1, CLtL2, <a href="/wiki/ANSI_Common_Lisp" title="ANSI Common Lisp" class="mw-redirect">ANSI Common Lisp</a></td>
</tr>
<tr>
<th style="">Influenced by</th>
<td class="" style=""><a href="/wiki/Lisp_(programming_language)" title="Lisp (programming language)">Lisp</a>, <a href="/wiki/Lisp_Machine_Lisp" title="Lisp Machine Lisp">Lisp Machine Lisp</a>, <a href="/wiki/MacLisp" title="MacLisp" class="mw-redirect">MacLisp</a>, <a href="/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme</a>, <a href="/wiki/InterLisp" title="InterLisp" class="mw-redirect">InterLisp</a></td>
</tr>
<tr>
<th style="">Influenced</th>
<td class="" style=""><a href="/wiki/Clojure" title="Clojure">Clojure</a>, <a href="/wiki/Dylan_programming_language" title="Dylan programming language" class="mw-redirect">Dylan</a>, <a href="/wiki/Eulisp" title="Eulisp" class="mw-redirect">Eulisp</a>, <a href="/wiki/ISLisp" title="ISLisp" class="mw-redirect">ISLisp</a>, <a href="/wiki/Cadence_SKILL" title="Cadence SKILL">SKILL</a>, Stella, <a href="/wiki/SubL" title="SubL">SubL</a></td>
</tr>
<tr>
<th style=""><a href="/wiki/Operating_system" title="Operating system">OS</a></th>
<td class="" style=""><a href="/wiki/Cross-platform" title="Cross-platform">Cross-platform</a></td>
</tr>
<tr>
<th style="">Family</th>
<td class="" style=""><a href="/wiki/Lisp_(programming_language)" title="Lisp (programming language)">Lisp</a></td>
</tr>
</table>
<p><b>Common Lisp</b>, commonly abbreviated <b>CL</b>, is a dialect of the <a href="/wiki/Lisp_(programming_language)" title="Lisp (programming language)">Lisp</a> <a href="/wiki/Programming_language" title="Programming language">programming language</a>, published in <a href="/wiki/American_National_Standards_Institute" title="American National Standards Institute">ANSI</a> standard document <i>Information Technology - Programming Language - Common Lisp</i>, formerly <i>X3.226-1994 (R1999)</i>.<sup id="cite_ref-0" class="reference"><a href="#cite_note-0" title=""><span>[</span>1<span>]</span></a></sup> Developed to standardize the divergent variants of Lisp which predated it, it is not an implementation but rather a language <a href="/wiki/Specification" title="Specification" class="mw-redirect">specification</a>. Several implementations of the Common Lisp standard are available, including proprietary products and <a href="/wiki/Open_source_software" title="Open source software">open source software</a>.</p>
<p>Common Lisp is a general-purpose, <a href="/wiki/Multi-paradigm_programming_language" title="Multi-paradigm programming language">multi-paradigm programming language</a>. It supports a combination of <a href="/wiki/Procedural_programming" title="Procedural programming">procedural</a>, <a href="/wiki/Functional_programming" title="Functional programming">functional</a> and <a href="/wiki/Object-oriented" title="Object-oriented" class="mw-redirect">object-oriented</a> programming paradigms. As a <a href="/wiki/Dynamic_programming_language" title="Dynamic programming language">dynamic programming language</a>, it facilitates rapid development, with iterative <a href="/wiki/Compiler" title="Compiler">compilation</a> into efficient run-time programs.</p>
<p>Common Lisp includes <a href="/wiki/Common_Lisp_Object_System" title="Common Lisp Object System">CLOS</a>, an <a href="/wiki/Object_system" title="Object system" class="mw-redirect">object system</a> that supports <a href="/wiki/Multimethods" title="Multimethods" class="mw-redirect">multimethods</a> and method combinations. It is extensible through standard features such as Lisp macros (compile-time code rearrangement accomplished by the program itself) and reader macros (extension of syntax to give special meaning to characters reserved for users for this purpose).</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Syntax"><span class="tocnumber">1</span> <span class="toctext">Syntax</span></a></li>
<li class="toclevel-1"><a href="#Data_types"><span class="tocnumber">2</span> <span class="toctext">Data types</span></a>
<ul>
<li class="toclevel-2"><a href="#Scalar_types"><span class="tocnumber">2.1</span> <span class="toctext">Scalar types</span></a></li>
<li class="toclevel-2"><a href="#Data_structures"><span class="tocnumber">2.2</span> <span class="toctext">Data structures</span></a></li>
<li class="toclevel-2"><a href="#Functions"><span class="tocnumber">2.3</span> <span class="toctext">Functions</span></a>
<ul>
<li class="toclevel-3"><a href="#Defining_functions"><span class="tocnumber">2.3.1</span> <span class="toctext">Defining functions</span></a></li>
<li class="toclevel-3"><a href="#Defining_generic_functions_and_methods"><span class="tocnumber">2.3.2</span> <span class="toctext">Defining generic functions and methods</span></a></li>
<li class="toclevel-3"><a href="#The_function_namespace"><span class="tocnumber">2.3.3</span> <span class="toctext">The function namespace</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#Other_types"><span class="tocnumber">2.4</span> <span class="toctext">Other types</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Scope"><span class="tocnumber">3</span> <span class="toctext">Scope</span></a>
<ul>
<li class="toclevel-2"><a href="#Determiners_of_Scope"><span class="tocnumber">3.1</span> <span class="toctext">Determiners of Scope</span></a></li>
<li class="toclevel-2"><a href="#Kinds_of_Environment"><span class="tocnumber">3.2</span> <span class="toctext">Kinds of Environment</span></a>
<ul>
<li class="toclevel-3"><a href="#Global"><span class="tocnumber">3.2.1</span> <span class="toctext">Global</span></a></li>
<li class="toclevel-3"><a href="#Dynamic"><span class="tocnumber">3.2.2</span> <span class="toctext">Dynamic</span></a></li>
<li class="toclevel-3"><a href="#Lexical"><span class="tocnumber">3.2.3</span> <span class="toctext">Lexical</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-1"><a href="#Macros"><span class="tocnumber">4</span> <span class="toctext">Macros</span></a>
<ul>
<li class="toclevel-2"><a href="#Variable_capture_and_shadowing"><span class="tocnumber">4.1</span> <span class="toctext">Variable capture and shadowing</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Common_Lisp_Object_System"><span class="tocnumber">5</span> <span class="toctext">Common Lisp Object System</span></a></li>
<li class="toclevel-1"><a href="#Comparison_with_other_Lisps"><span class="tocnumber">6</span> <span class="toctext">Comparison with other Lisps</span></a></li>
<li class="toclevel-1"><a href="#Implementations"><span class="tocnumber">7</span> <span class="toctext">Implementations</span></a>
<ul>
<li class="toclevel-2"><a href="#List_of_implementations"><span class="tocnumber">7.1</span> <span class="toctext">List of implementations</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Applications"><span class="tocnumber">8</span> <span class="toctext">Applications</span></a></li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">9</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">10</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">11</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Syntax" id="Syntax"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Common_Lisp&amp;action=edit&amp;section=1" title="Edit section: Syntax">edit</a>]</span> <span class="mw-headline">Syntax</span></h2>
<p>Common Lisp is a dialect of Lisp; it uses <a href="/wiki/S-expression" title="S-expression">S-expressions</a> to denote both code and data structure. Function and macro calls are written as lists, with the name of the function first, as in these examples:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-lisp">
 <span class="br0">(</span>+ <span class="nu0">2</span> <span class="nu0">2</span><span class="br0">)</span>           <span class="co1">; adds 2 and 2, yielding 4.</span>
</pre></div>
<div dir="ltr" style="text-align: left;">
<pre class="source-lisp">
 <span class="br0">(</span>defvar *x*<span class="br0">)</span>      <span class="co1">; Ensures that a variable *x* exists,</span>
                   <span class="co1">; without giving it a value. The asterisks are part of</span>
                   <span class="co1">; the name. The symbol *x* is also hereby endowed with</span>
                   <span class="co1">; the property that subsequent bindings of it are dynamic,</span>
                   <span class="co1">; rather than lexical.</span>
 <span class="br0">(</span><span class="kw1">setf</span> *x* <span class="nu0">42.1</span><span class="br0">)</span>   <span class="co1">; sets the variable *x* to the floating-point value 42.1</span>
</pre></div>
<div dir="ltr" style="text-align: left;">
<pre class="source-lisp">
 <span class="co1">;; Define a function that squares a number:</span>
 <span class="br0">(</span><span class="kw1">defun</span> square <span class="br0">(</span>x<span class="br0">)</span> 
   <span class="br0">(</span>* x x<span class="br0">)</span><span class="br0">)</span>
</pre></div>
<div dir="ltr" style="text-align: left;">
<pre class="source-lisp">
 <span class="co1">;; Execute the function:</span>
 <span class="br0">(</span>square <span class="nu0">3</span><span class="br0">)</span>        <span class="co1">; Returns 9</span>
</pre></div>
<div dir="ltr" style="text-align: left;">
<pre class="source-lisp">
 <span class="co1">;; the 'let' construct creates a scope for local variables. Here</span>
 <span class="co1">;; the variable 'a' is bound to 6 and the variable 'b' is bound</span>
 <span class="co1">;; to 4. Inside the 'let' is a 'body', where the last computed value is returned.</span>
 <span class="co1">;; Here the result of adding a and b is returned from the 'let' expression.</span>
 <span class="co1">;; The variables a and b have lexical scope, unless the symbols have been</span>
 <span class="co1">;; marked as special variables (for instance by a prior DEFVAR). </span>
 <span class="br0">(</span><span class="kw1">let</span> <span class="br0">(</span><span class="br0">(</span>a <span class="nu0">6</span><span class="br0">)</span>
       <span class="br0">(</span>b <span class="nu0">4</span><span class="br0">)</span><span class="br0">)</span> 
   <span class="br0">(</span>+ a b<span class="br0">)</span><span class="br0">)</span>        <span class="co1">; returns 10</span>
</pre></div>
<p><a name="Data_types" id="Data_types"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Common_Lisp&amp;action=edit&amp;section=2" title="Edit section: Data types">edit</a>]</span> <span class="mw-headline">Data types</span></h2>
<p>Common Lisp has many data types, more than many other languages.</p>
<p><a name="Scalar_types" id="Scalar_types"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Common_Lisp&amp;action=edit&amp;section=3" title="Edit section: Scalar types">edit</a>]</span> <span class="mw-headline">Scalar types</span></h3>
<p><i>Number</i> types include <a href="/wiki/Integer" title="Integer">integers</a>, <a href="/wiki/Ratio" title="Ratio">ratios</a>, <a href="/wiki/Floating_point" title="Floating point">floating-point numbers</a>, and <a href="/wiki/Complex_number" title="Complex number">complex numbers</a>.<sup id="cite_ref-reddy_1-0" class="reference"><a href="#cite_note-reddy-1" title=""><span>[</span>2<span>]</span></a></sup> Common Lisp uses <a href="/wiki/Arbitrary-precision_arithmetic" title="Arbitrary-precision arithmetic">bignums</a> to represent numerical values of arbitrary size and precision. The ratio type represents fractions exactly, a facility not available in many languages. Common Lisp automatically coerces numeric values among these types as appropriate.</p>
<p>The Common Lisp <i><a href="/wiki/Character_(computing)" title="Character (computing)">character</a></i> type is not limited to <a href="/wiki/ASCII" title="ASCII">ASCII</a> characters. Most modern implementations allow <a href="/wiki/Unicode" title="Unicode">Unicode</a> characters.<sup id="cite_ref-2" class="reference"><a href="#cite_note-2" title=""><span>[</span>3<span>]</span></a></sup></p>
<p>The <i><a href="/wiki/Symbol" title="Symbol">symbol</a></i> type is common to Lisp languages, but largely unknown outside them. A symbol is a unique, named data object with several parts: name, value, function, property list and package. Of these, <i>value cell</i> and <i>function cell</i> are the most important. Symbols in Lisp are often used similarly to identifiers in other languages: to hold value of a variable; however there are many other uses. Normally, when a symbol is evaluated, its value is returned. Some symbols evaluate to themselves, for example all symbols in keyword package are self-evaluating. Boolean values in Common Lisp are represented by the self-evaluating symbols T and NIL. Common Lisp has namespaces for symbols, called 'packages'.</p>
<p><a name="Data_structures" id="Data_structures"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Common_Lisp&amp;action=edit&amp;section=4" title="Edit section: Data structures">edit</a>]</span> <span class="mw-headline">Data structures</span></h3>
<p><i>Sequence</i> types in Common Lisp include lists, vectors, bit-vectors, and strings. There are many operations which can work on any sequence type.</p>
<p>As in almost all other Lisp dialects, <i>lists</i> in Common Lisp are composed of <i>conses</i>, sometimes called <i>cons cells</i> or <i>pairs</i>. A cons is a data structure with two slots, called its <i>car</i> and <i>cdr</i>. A list is a linked chain of conses. Each cons's car refers to a member of the list (possibly another list). Each cons's cdr refers to the next cons -- except for the last cons, whose cdr refers to the <tt>nil</tt> value. Conses can also easily be used to implement trees and other complex data structures; though it is usually advised to use structure or class instances instead. It is also possible to create circular data structures with conses.</p>
<p>Common Lisp supports multidimensional <i>arrays</i>, and can dynamically resize arrays if required. Multidimensional arrays can be used for matrix mathematics. A <i>vector</i> is a one-dimensional array. Arrays can carry any type as members (even mixed types in the same array) or can be specialized to contain a specific type of members, as in a vector of integers. Many implementations can optimize array functions when the array used is type-specialized. Two type-specialized array types are standard: a <i>string</i> is a vector of characters, while a <i>bit-vector</i> is a vector of <a href="/wiki/Bit" title="Bit">bits</a>.</p>
<p><i><a href="/wiki/Hash_table" title="Hash table">Hash tables</a></i> store associations between data objects. Any object may be used as key or value. Hash tables, like arrays, are automatically resized as needed.</p>
<p><i>Packages</i> are collections of symbols, used chiefly to separate the parts of a program into <a href="/wiki/Namespace_(computer_science)" title="Namespace (computer science)">namespaces</a>. A package may <i>export</i> some symbols, marking them as part of a public interface. Packages can use other packages.</p>
<p><i>Structures</i>, similar in use to <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a> structs and <a href="/wiki/Pascal_programming_language" title="Pascal programming language" class="mw-redirect">Pascal</a> records, represent arbitrary complex data structures with any number and type of fields (called <i>slots</i>). Structures allow single-inheritance.</p>
<p><i>Classes</i> are similar to structures, but offer more dynamic features and multiple-inheritance. (See <a href="/wiki/Common_Lisp_Object_System" title="Common Lisp Object System">CLOS</a>.) Classes have been added late to Common Lisp and there is some conceptual overlap with structures. Objects created of classes are called <i>Instances</i>. A special case are Generic Functions. Generic Functions are both functions and instances.</p>
<p><a name="Functions" id="Functions"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Common_Lisp&amp;action=edit&amp;section=5" title="Edit section: Functions">edit</a>]</span> <span class="mw-headline">Functions</span></h3>
<p>Common Lisp supports <a href="/wiki/First-class_function" title="First-class function">first-class functions</a>. For instance, it is possible to write functions that take other functions as arguments or return functions as well. This makes it possible to describe very general operations.</p>
<p>The Common Lisp library relies heavily on such higher-order functions. For example, the <code>sort</code> function takes a <a href="/wiki/Relational_operator" title="Relational operator">relational operator</a> as an argument and key function as an optional keyword argument. This can be used not only to sort any type of data, but also to sort data structures according to a key.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-lisp">
 <span class="br0">(</span>sort <span class="br0">(</span><span class="kw1">list</span> <span class="nu0">5</span> <span class="nu0">2</span> <span class="nu0">6</span> <span class="nu0">3</span> <span class="nu0">1</span> <span class="nu0">4</span><span class="br0">)</span> #'&gt;<span class="br0">)</span>
 <span class="co1">; Sorts the list using the &gt; function as the relational operator.</span>
 <span class="co1">; Returns (6 5 4 3 2 1).</span>
</pre></div>
<div dir="ltr" style="text-align: left;">
<pre class="source-lisp">
 <span class="br0">(</span>sort <span class="br0">(</span><span class="kw1">list</span> '<span class="br0">(</span><span class="nu0">9</span> A<span class="br0">)</span> '<span class="br0">(</span><span class="nu0">3</span> B<span class="br0">)</span> '<span class="br0">(</span><span class="nu0">4</span> C<span class="br0">)</span><span class="br0">)</span> #'&lt; :<span class="me1">key</span> #'first<span class="br0">)</span>
 <span class="co1">; Sorts the list according to the first element of each sub-list.</span>
 <span class="co1">; Returns ((3 B) (4 C) (9 A)).</span>
</pre></div>
<p>The evaluation model for functions is very simple. When the evaluator encounters a form <code>(F A1 A2...)</code> then it is to assume that the symbol named F is one of the following:</p>
<ol>
<li>A special operator (easily checked against a fixed list)</li>
<li>A macro operator (must have been defined previously)</li>
<li>The name of a function (default), which may either be a symbol, or a sub-form beginning with the symbol <code>lambda</code>.</li>
</ol>
<p>If F is the name of a function, then the arguments A1, A2, ..., An are evaluated in left-to-right order, and the function is found and invoked with those values supplied as parameters.</p>
<p><a name="Defining_functions" id="Defining_functions"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Common_Lisp&amp;action=edit&amp;section=6" title="Edit section: Defining functions">edit</a>]</span> <span class="mw-headline">Defining functions</span></h4>
<p>The macro <code>defun</code> defines functions. A function definition gives the name of the function, the names of any arguments, and a function body:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-lisp">
 <span class="br0">(</span><span class="kw1">defun</span> square <span class="br0">(</span>x<span class="br0">)</span>
   <span class="br0">(</span>* x x<span class="br0">)</span><span class="br0">)</span>
</pre></div>
<p>Function definitions may include <i>declarations</i>, which provide hints to the compiler about optimization settings or the data types of arguments. They may also include <i>documentation strings</i> (docstrings), which the Lisp system may use to provide interactive documentation:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-lisp">
 <span class="br0">(</span><span class="kw1">defun</span> square <span class="br0">(</span>x<span class="br0">)</span>
   <span class="st0">"Calculates the square of the single-float x."</span>
   <span class="br0">(</span>declare <span class="br0">(</span>single-<span class="kw1">float</span> x<span class="br0">)</span> <span class="br0">(</span>optimize <span class="br0">(</span>speed <span class="nu0">3</span><span class="br0">)</span> <span class="br0">(</span>debug <span class="nu0">0</span><span class="br0">)</span> <span class="br0">(</span>safety <span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>
   <span class="br0">(</span>* x x<span class="br0">)</span><span class="br0">)</span>
</pre></div>
<p>Anonymous functions (<a href="/wiki/Function_literal" title="Function literal" class="mw-redirect">function literals</a>) are defined using <code>lambda</code> expressions, e.g. <code>(lambda&#160;(x)&#160;(*&#160;x&#160;x))</code> for a function that squares its argument. Lisp programming style frequently uses higher-order functions for which it is useful to provide anonymous functions as arguments.</p>
<p>Local functions can be defined with <code>flet</code> and <code>labels</code>.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-lisp">
 <span class="br0">(</span>flet <span class="br0">(</span><span class="br0">(</span>square <span class="br0">(</span>x<span class="br0">)</span>
          <span class="br0">(</span>* x x<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>
   <span class="br0">(</span>square <span class="nu0">3</span><span class="br0">)</span><span class="br0">)</span>
</pre></div>
<p>There are a number of other operators related to the definition and manipulation of functions. For instance, a function may be recompiled with the <code>compile</code> operator. (Some Lisp systems run functions in an interpreter by default unless instructed to compile; others compile every entered function on the fly.)</p>
<p><a name="Defining_generic_functions_and_methods" id="Defining_generic_functions_and_methods"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Common_Lisp&amp;action=edit&amp;section=7" title="Edit section: Defining generic functions and methods">edit</a>]</span> <span class="mw-headline">Defining generic functions and methods</span></h4>
<p>The macro <code>defgeneric</code> defines generic functions. The macro <code>defmethod</code> defines methods. Generic functions are a collection of methods.</p>
<p>Methods can specialize their parameters over classes or objects.</p>
<p>When a generic function is called, multiple-dispatch will determine the correct method to use.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-lisp">
 <span class="br0">(</span>defgeneric add <span class="br0">(</span>a b<span class="br0">)</span><span class="br0">)</span>
</pre></div>
<div dir="ltr" style="text-align: left;">
<pre class="source-lisp">
 <span class="br0">(</span>defmethod add <span class="br0">(</span><span class="br0">(</span>a number<span class="br0">)</span> <span class="br0">(</span>b number<span class="br0">)</span><span class="br0">)</span>
    <span class="br0">(</span>+ a b<span class="br0">)</span><span class="br0">)</span>
</pre></div>
<div dir="ltr" style="text-align: left;">
<pre class="source-lisp">
 <span class="br0">(</span>defmethod add <span class="br0">(</span><span class="br0">(</span>a vector<span class="br0">)</span> <span class="br0">(</span>b number<span class="br0">)</span><span class="br0">)</span>
    <span class="br0">(</span>map 'vector <span class="br0">(</span><span class="kw1">lambda</span> <span class="br0">(</span>n<span class="br0">)</span> <span class="br0">(</span>+ n b<span class="br0">)</span><span class="br0">)</span> a<span class="br0">)</span><span class="br0">)</span>
</pre></div>
<div dir="ltr" style="text-align: left;">
<pre class="source-lisp">
 <span class="br0">(</span>add #<span class="br0">(</span><span class="nu0">1</span> <span class="nu0">2</span> <span class="nu0">3</span> <span class="nu0">4</span><span class="br0">)</span> <span class="nu0">7</span><span class="br0">)</span>        <span class="co1">; returns #(8 9 10 11)</span>
 <span class="br0">(</span>add <span class="nu0">2</span> <span class="nu0">3</span><span class="br0">)</span>                 <span class="co1">; returns 5</span>
</pre></div>
<p>Generic Functions are also a first class data type. There are many more features to Generic Functions and Methods than described above.</p>
<p><a name="The_function_namespace" id="The_function_namespace"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Common_Lisp&amp;action=edit&amp;section=8" title="Edit section: The function namespace">edit</a>]</span> <span class="mw-headline">The function namespace</span></h4>
<p>The namespace for function names is separate from the namespace for data variables. This is a key difference between Common Lisp and <a href="/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme</a>. Operators which define names in the function namespace include <code>defun</code>, <code>flet</code>, <code>labels</code>, <code>defmethod</code> and <code>defgeneric</code>.</p>
<p>To pass a function by name as an argument to another function, one must use the <code>function</code> special operator, commonly abbreviated as <code>#'</code>. The first <code>sort</code> example above refers to the function named by the symbol <code>&gt;</code> in the function namespace, with the code <code>#'&gt;</code>.</p>
<p><a href="/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme's</a> evaluation model is simpler: there is only one namespace, and all positions in the form are evaluated (in any order) -- not just the arguments. Code written in one dialect is therefore sometimes confusing to programmers more experienced in the other. For instance, many Common Lisp programmers like to use descriptive variable names such as <i>list</i> or <i>string</i> which could cause problems in Scheme as they would locally shadow function names.</p>
<p>Whether a separate namespace for functions is an advantage is a source of contention in the Lisp community. It is usually referred to as the <i>Lisp-1 vs. Lisp-2 debate</i>. Lisp-1 refers to Scheme's model and Lisp-2 refers to Common Lisp's model. These names were coined in a 1988 paper by <a href="/wiki/Richard_P._Gabriel" title="Richard P. Gabriel">Richard P. Gabriel</a> and <a href="/wiki/Kent_Pitman" title="Kent Pitman">Kent Pitman</a>, which extensively compares the two approaches. <a href="http://www.nhplace.com/kent/Papers/Technical-Issues.html" class="external autonumber" title="http://www.nhplace.com/kent/Papers/Technical-Issues.html" rel="nofollow">[1]</a></p>
<p><a name="Other_types" id="Other_types"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Common_Lisp&amp;action=edit&amp;section=9" title="Edit section: Other types">edit</a>]</span> <span class="mw-headline">Other types</span></h3>
<p>Other data types in Common Lisp include:</p>
<ul>
<li><i>Pathnames</i> represent files and directories in the <a href="/wiki/Filesystem" title="Filesystem" class="mw-redirect">filesystem</a>. The Common Lisp pathname facility is more general than most operating systems' file naming conventions, making Lisp programs' access to files broadly portable across diverse systems.</li>
<li>Input and output <i>streams</i> represent sources and sinks of binary or textual data, such as the terminal or open files.</li>
<li>Common Lisp has a built-in <a href="/wiki/Pseudo-random_number_generator" title="Pseudo-random number generator" class="mw-redirect">pseudo-random number generator</a> (PRNG). <i>Random state</i> objects represent reusable sources of pseudo-random numbers, allowing the user to seed the PRNG or cause it to replay a sequence.</li>
<li><i>Conditions</i> are a type used to represent errors, exceptions, and other "interesting" events to which a program may respond.</li>
<li><i>Classes</i> are first-class objects, and are themselves instances of classes called <a href="/wiki/Metaclasses" title="Metaclasses" class="mw-redirect">metaclasses</a>.</li>
<li><i>Readtables</i> are a type of object which control how Common Lisp's reader parses the text of source code. By controlling which readtable is in use when code is read in, the programmer can change or extend the language's syntax.</li>
</ul>
<p><a name="Scope" id="Scope"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Common_Lisp&amp;action=edit&amp;section=10" title="Edit section: Scope">edit</a>]</span> <span class="mw-headline">Scope</span></h2>
<p>Like programs in many other programming languages, Common Lisp programs make use of names to refer to variables, functions, and many other kinds of entities. Named references are subject to scope.</p>
<p>The association between a name and the entity which the name refers to is called a binding.</p>
<p>Scope refers to the set of circumstances in which a name is determined to have a particular binding.</p>
<p><a name="Determiners_of_Scope" id="Determiners_of_Scope"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Common_Lisp&amp;action=edit&amp;section=11" title="Edit section: Determiners of Scope">edit</a>]</span> <span class="mw-headline">Determiners of Scope</span></h3>
<p>The circumstances which determine scope in Common Lisp include:</p>
<ul>
<li>the location of a reference within an expression. If it's the leftmost position of a compound, it refers to a special operator or a macro or function binding, otherwise to a variable binding or something else.</li>
</ul>
<ul>
<li>the kind of expression in which the reference takes place. For instance, (GO X) means transfer control to label X, whereas (PRINT X) refers to the variable X. Both scopes of X can be active in the same region of program text, since tagbody labels are in a separate namespace from variable names. A special form or macro form has complete control over the meanings of all symbols in its syntax. For instance in (defclass x (a b) ()), a class definition, the (a b) is a list of base classes, so these names are looked up in the space of class names, and x isn't a reference to an existing binding, but the name of a new class being derived from a and b. These facts emerge purely from the semantics of defclass. The only generic fact about this expression is that defclass refers to a macro binding; everything else is up to defclass.</li>
</ul>
<ul>
<li>the location of the reference within the program text. For instance, if a reference to variable X is enclosed in a binding construct such as a LET which defines a binding for X, then the reference is in the scope created by that binding.</li>
</ul>
<ul>
<li>for a variable reference, whether or not a variable symbol has been, locally or globally, declared special. This determines whether the reference is resolved within a lexical environment, or within a dynamic environment.</li>
</ul>
<ul>
<li>the specific instance of the environment in which the reference is resolved. An environment is a run-time dictionary which maps symbols to bindings. Each kind of reference uses its own kind of environment. References to lexical variables are resolved in a lexical environment, et cetera. More than one environment can be associated with the same reference. For instance, thanks to recursion or the use of multiple threads, multiple activations of the same function can exist at the same time. These activations share the same program text, but each has its own lexical environment instance.</li>
</ul>
<p>To understand what a symbol refers to, the Common Lisp programmer must know what kind of reference is being expressed, what kind of scope it is uses if it is a variable reference (dynamic versus lexical scope), and also the run-time situation: in what environment is the reference resolved, where was the binding introduced into the environment, et cetera.</p>
<p><a name="Kinds_of_Environment" id="Kinds_of_Environment"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Common_Lisp&amp;action=edit&amp;section=12" title="Edit section: Kinds of Environment">edit</a>]</span> <span class="mw-headline">Kinds of Environment</span></h3>
<p><a name="Global" id="Global"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Common_Lisp&amp;action=edit&amp;section=13" title="Edit section: Global">edit</a>]</span> <span class="mw-headline">Global</span></h4>
<p>Some environments in Lisp are globally pervasive. For instance, if a new type is defined, it is known everywhere thereafter. References to that type look it up in this global environment.</p>
<p><a name="Dynamic" id="Dynamic"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Common_Lisp&amp;action=edit&amp;section=14" title="Edit section: Dynamic">edit</a>]</span> <span class="mw-headline">Dynamic</span></h4>
<p>One type of environment in Common Lisp is the dynamic environment. Bindings established in this environment have dynamic extent, which means that a binding is established at the start of the execution of some construct, such as a LET block, and disappears when that construct finishes executing: its lifetime is tied to the dynamic activation and deactivation of a block. However, a dynamic binding is not just visible within that block; it is also visible to all functions invoked from that block. This type of visibility is known as indefinite scope. Bindings which exhibit dynamic extent (lifetime tied to the activation and deactivation of a block) and indefinite scope (visible to all functions which are called from that block) are said to have dynamic scope. Common Lisp has support for dynamically scoped variables, which are also called special variables. Certain other kinds of bindings are necessarily dynamically scoped also, such as restarts and catch tags. Function bindings cannot be dynamically scoped (but, in recognition of the usefulness of dynamically scoped function bindings, a portable library exists now which provides them).</p>
<p>Dynamic scope is extremely useful because it adds referential clarity and discipline to <a href="/wiki/Global_variable" title="Global variable">global variables</a>. Global variables are frowned upon in computer science as potential sources of error, because they can give rise to ad-hoc, covert channels of communication among modules that lead to unwanted, surprising interactions.</p>
<p>In Common Lisp, a special variable which has only a top-level binding behaves just like a global variable in other programming languages. A new value can be stored into it, and that value simply replaces what is in the top-level binding. Careless replacement of the value of a global variable is at the heart of bugs caused by use of global variables. However, another way to work with a special variable is to give it a new, local binding within an expression. This is sometimes referred to as "rebinding" the variable. Binding a dynamically scoped variable temporarily creates a new memory location for that variable, and associates the name with that location. While that binding is in effect, all references to that variable refer to the new binding; the previous binding is hidden. When execution of the binding expression terminates, the temporary memory location is gone, and the old binding is revealed, with the original value intact. Of course, multiple dynamic bindings for the same variable can be nested.</p>
<p>In Common Lisp implementations which support multithreading, dynamic scopes are specific to each thread of execution. Thus special variables serve as an abstraction for thread local storage. If one thread rebinds a special variable, this rebinding has no effect on that variable in other threads. The value stored in a binding can only be retrieved by the thread which created that binding. If each thread binds some special variable *X*, then *X* behaves like thread-local storage. Among threads which do not rebind *X*, it behaves like an ordinary global: all of these threads refer to the same top-level binding of *X*.</p>
<p>Dynamic variables can be used to extend the execution context with additional context information which is implicitly passed from function to function without having to appear as an extra function parameter. This is especially useful when the control transfer has to pass through layers of unrelated code, which simply cannot be extended with extra parameters to pass the additional data. A situation like this usually calls for a global variable. That global variable must be saved and restored, so that the scheme doesn't break under recursion: dynamic variable rebinding take care of this. And that variable must be made thread-local (or else a big mutex must be used) so the scheme doesn't break under threads: dynamic scope implementations can take care of this also.</p>
<p>In the Common Lisp library, there are many standard special variables. For instance, the all standard I/O streams are stored in the top-level bindings of well-known special variables. The standard output stream is stored in *standard-output*.</p>
<p>Suppose a function foo writes to standard output:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-lisp">
  <span class="br0">(</span><span class="kw1">defun</span> foo <span class="br0">(</span><span class="br0">)</span>
    <span class="br0">(</span>format t <span class="st0">"Hello, world"</span><span class="br0">)</span><span class="br0">)</span>
</pre></div>
<p>It would be nice to capture its output in a character string. No problem, just rebind *standard-output* to a string stream and call it:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-lisp">
  <span class="br0">(</span>with-output-to-string <span class="br0">(</span>*standard-output*<span class="br0">)</span>
    <span class="br0">(</span>foo<span class="br0">)</span><span class="br0">)</span>
</pre></div>
<pre>
 -&gt; "Hello, world" ; gathered output returned as a string
</pre>
<p><a name="Lexical" id="Lexical"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Common_Lisp&amp;action=edit&amp;section=15" title="Edit section: Lexical">edit</a>]</span> <span class="mw-headline">Lexical</span></h4>
<p>Common Lisp supports lexical environments. Formally, the bindings in a lexical environment have <a href="/wiki/Lexical_scope" title="Lexical scope" class="mw-redirect">lexical scope</a> and may have either indefinite extent or dynamic extent, depending on the type of namespace. <a href="/wiki/Lexical_scope" title="Lexical scope" class="mw-redirect">Lexical scope</a> means that visibility is physically restricted to the block in which the binding is established. References which are not textually (i.e. lexically) embedded in that block simply do not see that binding.</p>
<p>The tags in a TAGBODY have lexical scope. The expression (GO X) is erroneous if it is not actually embedded in a TAGBODY which contains a label X. However, the label bindings disappear when the TAGBODY terminates its execution, because they have dynamic extent. If that block of code is re-entered by the invocation of a lexical closure, it is invalid for the body of that closure to try to transfer control to a tag via GO:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-lisp">
  <span class="br0">(</span>defvar *stashed*<span class="br0">)</span> <span class="co1">;; will hold a function</span>
 
  <span class="br0">(</span>tagbody
    <span class="br0">(</span><span class="kw1">setf</span> *stashed* <span class="br0">(</span><span class="kw1">lambda</span> <span class="br0">(</span><span class="br0">)</span> <span class="br0">(</span><span class="kw1">go</span> some-label<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>
    <span class="br0">(</span><span class="kw1">go</span> end-label<span class="br0">)</span> <span class="co1">;; skip the (print "Hello")</span>
   some-label
    <span class="br0">(</span>print <span class="st0">"Hello"</span><span class="br0">)</span>
   end-label<span class="br0">)</span>
  -&gt; <span class="kw1">NIL</span>
</pre></div>
<p>When the TAGBODY is executed, it first evaluates the setf form which stores a function in the special variable *stashed*. Then the (go end-label) transfers control to end-label, skipping the code (print "Hello"). Since end-label is at the end of the tagbody, the tagbody terminates, yielding NIL. Suppose that the previously remembered function is now called:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-lisp">
  <span class="br0">(</span><span class="kw1">funcall</span> *stashed*<span class="br0">)</span> <span class="co1">;; Error!</span>
</pre></div>
<p>This situation is erroneous. One implementation's response is an error condition containing the message, "GO: tagbody for tag SOME-LABEL has already been left". The function tried to evaluate (go some-label), which is lexically embedded in the tagbody, and resolves to the label. However, the tagbody isn't executing (its extent has ended), and so the control transfer cannot take place.</p>
<p>Local function bindings in Lisp have <a href="/wiki/Lexical_scope" title="Lexical scope" class="mw-redirect">lexical scope</a>, and variable bindings also have lexical scope by default. By contrast with GO labels, both of these have indefinite extent. When a lexical function or variable binding is established, that binding continues to exist for as long as references to it are possible, even after the construct which established that binding has terminated. References to a lexical variables and functions after the termination of their establishing construct are possible thanks to <a href="/wiki/Lexical_closure" title="Lexical closure" class="mw-redirect">lexical closures</a>.</p>
<p>Lexical binding is the default binding mode for Common Lisp variables. For an individual symbol, it can be switched to dynamic scope, either by a local declaration, by a global declaration. The latter may occur implicitly through the use of a construct like DEFVAR or DEFPARAMETER. It is an important convention in Common Lisp programming that special (i.e. dynamically scoped) variables have names which begin and end with an asterisk. If adhered to, this convention effectively creates a separate namespace for special variables, so that variables intended to be lexical are not accidentally made special.</p>
<p><a href="/wiki/Lexical_scope" title="Lexical scope" class="mw-redirect">Lexical scope</a> is useful for several reasons.</p>
<p>Firstly, references to variables and functions can be compiled to efficient machine code, because the run-time environment structure is relatively simple. In many cases it can be optimized to stack storage, so opening and closing lexical scopes has minimal overhead. Even in cases where full closures must be generated, access to the closure's environment is still efficient; typically each variable becomes an offset into a vector of bindings, and so a variable reference becomes a simple load or store instruction with a base-plus-offset <a href="/wiki/Addressing_mode" title="Addressing mode">addressing mode</a>.</p>
<p>Secondly, lexical scope (combined with indefinite extent) gives rise to the <a href="/wiki/Lexical_closure" title="Lexical closure" class="mw-redirect">lexical closure</a>, which in turn creates a whole paradigm of programming centered around the use of functions being first-class objects, which is at the root of functional programming.</p>
<p>Thirdly, perhaps most importantly, even if lexical closures are not exploited, the use of lexical scope isolates program modules from unwanted interactions. Due to their restricted visibility, lexical variables are private. If one module A binds a lexical variable X, and calls another module B, references to X in B will not accidentally resolve to the X bound in A. B simply has no access to X. For situations in which disciplined interactions through a variable are desirable, Common Lisp provides special variables. Special variables allow for a module A to set up a binding for a variable X which is visible to another module B, called from A. Being able to do this is an advantage, and being able to prevent it from happening is also an advantage; consequently, Common Lisp supports both lexical and <a href="/wiki/Dynamic_scope" title="Dynamic scope" class="mw-redirect">dynamic scope</a>.</p>
<p><a name="Macros" id="Macros"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Common_Lisp&amp;action=edit&amp;section=16" title="Edit section: Macros">edit</a>]</span> <span class="mw-headline">Macros</span></h2>
<p>A <i><a href="/wiki/Macro_(computer_science)" title="Macro (computer science)">macro</a></i> in Lisp superficially resembles a function in usage. However, rather than representing an expression which is evaluated, it represents a transformation of the program source code.</p>
<p>Macros allow Lisp programmers to create new syntactic forms in the language. For instance, this macro provides the <code>until</code> loop form, which may be familiar from languages such as <a href="/wiki/Perl" title="Perl">Perl</a>:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-lisp">
 <span class="br0">(</span><span class="kw1">defmacro</span> until <span class="br0">(</span>test &amp;body body<span class="br0">)</span>
   `<span class="br0">(</span><span class="kw1">do</span> <span class="br0">(</span><span class="br0">)</span>
        <span class="br0">(</span>,test<span class="br0">)</span>
      ,@body<span class="br0">)</span><span class="br0">)</span>
 
 <span class="co1">;; example</span>
 <span class="br0">(</span>until <span class="br0">(</span>= <span class="br0">(</span><span class="kw1">random</span> <span class="nu0">10</span><span class="br0">)</span> <span class="nu0">0</span><span class="br0">)</span> 
   <span class="br0">(</span>write-line <span class="st0">"Hello"</span><span class="br0">)</span><span class="br0">)</span>
</pre></div>
<p>All macros must be expanded before the source code containing them can be evaluated or compiled normally. Macros can be considered functions that accept and return <a href="/wiki/Abstract_syntax_tree" title="Abstract syntax tree">abstract syntax trees</a> (Lisp S-expressions). These functions are invoked before the evaluator or compiler to produce the final source code. Macros are written in normal Common Lisp, and may use any Common Lisp (or third-party) operator available. The backquote notation used above is provided by Common Lisp specifically to simplify the common case of substitution into a code template.</p>
<p><a name="Variable_capture_and_shadowing" id="Variable_capture_and_shadowing"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Common_Lisp&amp;action=edit&amp;section=17" title="Edit section: Variable capture and shadowing">edit</a>]</span> <span class="mw-headline">Variable capture and shadowing</span></h4>
<p>Common Lisp macros are capable of what is commonly called <i>variable capture</i>, where symbols in the macro-expansion body coincide with those in the calling context, allowing the programmer to create macros wherein various symbols have special meaning. The term <i>variable capture</i> is somewhat misleading, because all namespaces are vulnerable to unwanted capture, including the operator and function namespace, the tagbody label namespace, catch tag, condition handler and restart namespaces.</p>
<p><i>Variable capture</i> can introduce software defects. This happens in one of the following two ways:</p>
<ul>
<li>In the first way, a macro expansion can inadvertently make a symbolic reference which the macro writer assumed will resolve in a global namespace, but the code where the macro is expanded happens to provide a local, shadowing definition it which steals that reference. Let this be referred to as type 1 capture.</li>
</ul>
<ul>
<li>The second way, type 2 capture, is just the opposite: some of the arguments of the macro are pieces of code supplied by the macro caller, and those pieces of code are written such that they make references to surrounding bindings. However, the macro inserts these pieces of code into an expansion which defines its own bindings that accidentally captures some of these references.</li>
</ul>
<p>The Scheme dialect of Lisp provides a macro-writing system which provides the referential transparency that eliminates both types of capture problem. This type of macro system is sometimes called "hygienic", in particular by its proponents (who regard macro systems which do not automatically solve this problem as unhygienic).</p>
<p>In Common Lisp, macro hygiene is ensured one of two different ways.</p>
<p>One approach is to use <a href="/w/index.php?title=Gensym&amp;action=edit&amp;redlink=1" class="new" title="Gensym (page does not exist)">gensyms</a>: guaranteed-unique symbols which can be used in a macro-expansion without threat of capture. The use of gensyms in a macro definition is a manual chore, but macros can be written which simplify the instantiation and use of gensyms. Gensyms solve type 2 capture easily, but they are not applicable to type 1 capture in the same way, because the macro expansion cannot rename the interfering symbols in the surrounding code which capture its references. Gensyms could be used to provide stable aliases for the global symbols which the macro expansion needs. The macro expansion would use these secret aliases rather than the well-known names, so redefinition of the well-known names would have no ill effect on the macro.</p>
<p>Another approach is to use packages. A macro defined in its own package can simply use internal symbols in that package in its expansion. The use of packages deals with type 1 and type 2 capture.</p>
<p>However, packages don't solve the type 1 capture of references to standard Common Lisp functions and operators. The reason is that the use of packages to solve capture problems revolves around the use of private symbols (symbols in one package, which are not imported into, or otherwise made visible in other packages). Whereas the Common Lisp library symbols are external, and frequently imported into or made visible in user-defined packages.</p>
<p>The following is an example of unwanted capture in the operator namespace, occurring in the expansion of a macro:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-lisp">
 <span class="co1">;; expansion of UNTIL makes liberal use of DO</span>
 <span class="br0">(</span><span class="kw1">defmacro</span> until <span class="br0">(</span>expression &amp;body body<span class="br0">)</span>
   `<span class="br0">(</span><span class="kw1">do</span> <span class="br0">(</span><span class="br0">)</span> <span class="br0">(</span>,expression<span class="br0">)</span> ,@body<span class="br0">)</span><span class="br0">)</span>
 
 <span class="co1">;; macrolet establishes lexical operator binding for DO</span>
 <span class="br0">(</span>macrolet <span class="br0">(</span><span class="br0">(</span><span class="kw1">do</span> <span class="br0">(</span>...<span class="br0">)</span> ... something else ...<span class="br0">)</span><span class="br0">)</span>
   <span class="br0">(</span>until <span class="br0">(</span>= <span class="br0">(</span><span class="kw1">random</span> <span class="nu0">10</span><span class="br0">)</span> <span class="nu0">0</span><span class="br0">)</span> <span class="br0">(</span>write-line <span class="st0">"Hello"</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>
</pre></div>
<p>The <code>UNTIL</code> macro will expand into a form which calls <code>DO</code> which is intended to refer to the standard Common Lisp macro <code>DO</code>. However, in this context, <code>DO</code> may have a completely different meaning, so <code>UNTIL</code> may not work properly.</p>
<p>Common Lisp solves the problem of the shadowing of standard operators and functions by forbidding their redefinition. Because it redefines the standard operator <code>DO</code>, the preceding is actually a fragment of non-conforming Common Lisp, which allows implementations to diagnose and reject it.</p>
<p><a name="Common_Lisp_Object_System" id="Common_Lisp_Object_System"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Common_Lisp&amp;action=edit&amp;section=18" title="Edit section: Common Lisp Object System">edit</a>]</span> <span class="mw-headline">Common Lisp Object System</span></h2>
<div class="rellink noprint relarticle mainarticle">Main article: <a href="/wiki/Common_Lisp_Object_System" title="Common Lisp Object System">Common Lisp Object System</a></div>
<p>Common Lisp includes a toolkit for <a href="/wiki/Object-oriented_programming" title="Object-oriented programming">object-oriented programming</a>, the Common Lisp Object System or <a href="/wiki/Common_Lisp_Object_System" title="Common Lisp Object System">CLOS</a>, which is one of the most powerful object systems available in any language. Originally proposed as an add-on, CLOS was adopted as part of the ANSI standard for Common Lisp. CLOS is a <a href="/wiki/Dynamic_programming_language" title="Dynamic programming language">dynamic</a> object system with <a href="/wiki/Multiple_dispatch" title="Multiple dispatch">multiple dispatch</a> and <a href="/wiki/Multiple_inheritance" title="Multiple inheritance">multiple inheritance</a>, and differs radically from the OOP facilities found in static languages such as <a href="/wiki/C%2B%2B" title="C++">C++</a> or <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a>. As a dynamic object system, CLOS allows changes at runtime to generic functions and classes. Methods can be added and removed, classes can be added and redefined, objects can be updated for class changes and the class of objects can be changed.</p>
<p>CLOS has been integrated into ANSI Common Lisp. Generic Functions can be used like normal functions and are a first-class data type. Every CLOS class is integrated into the Common Lisp type system. Many Common Lisp types have a corresponding class. There is more potential use of CLOS for Common Lisp. The specification does not say whether conditions are implemented with CLOS. Pathnames and streams could be implemented with CLOS. These further usage possibilities of CLOS for ANSI Common Lisp are not part of the standard. Actual Common Lisp implementations are using CLOS for pathnames, streams, input/output, conditions, the implementation of CLOS itself and more.</p>
<p><a name="Comparison_with_other_Lisps" id="Comparison_with_other_Lisps"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Common_Lisp&amp;action=edit&amp;section=19" title="Edit section: Comparison with other Lisps">edit</a>]</span> <span class="mw-headline">Comparison with other Lisps</span></h2>
<p>Common Lisp is most frequently compared with, and contrasted to, <a href="/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme</a>—if only because they are the two most popular Lisp dialects. Scheme predates CL, and comes not only from the same Lisp tradition but from some of the same engineers—<a href="/wiki/Guy_L._Steele,_Jr." title="Guy L. Steele, Jr.">Guy L. Steele</a>, with whom <a href="/wiki/Gerald_Jay_Sussman" title="Gerald Jay Sussman">Gerald Jay Sussman</a> designed Scheme, chaired the standards committee for Common Lisp.</p>
<p>Common Lisp is a general-purpose programming language, in contrast to Lisp variants such as <a href="/wiki/Emacs_Lisp" title="Emacs Lisp">Emacs Lisp</a> and <a href="/wiki/AutoLISP" title="AutoLISP">AutoLISP</a> which are embedded extension languages in particular products. Unlike many earlier Lisps, Common Lisp (like <a href="/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme</a>) uses lexical variable <a href="/wiki/Scope_(programming)" title="Scope (programming)">scope</a>.</p>
<p>Most of the Lisp systems whose designs contributed to Common Lisp—such as <a href="/wiki/ZetaLisp" title="ZetaLisp">ZetaLisp</a> and Franz Lisp—used dynamically <a href="/wiki/Scope_(programming)" title="Scope (programming)">scoped</a> variables in their interpreters and lexically scoped variables in their compilers. Scheme introduced the sole use of lexically-scoped variables to Lisp; an inspiration from <a href="/wiki/ALGOL_68" title="ALGOL 68">ALGOL 68</a> which was widely recognized as a good idea. CL supports dynamically-scoped variables as well, but they must be explicitly declared as "special". There are no differences in scoping between ANSI CL interpreters and compilers.</p>
<p>Common Lisp is sometimes termed a <i>Lisp-2</i> and Scheme a <i>Lisp-1</i>, referring to CL's use of separate namespaces for functions and variables. (In fact, CL has <i>many</i> namespaces, such as those for go tags, block names, and <code>loop</code> keywords.) There is a long-standing controversy between CL and Scheme advocates over the tradeoffs involved in multiple namespaces. In Scheme, it is (broadly) necessary to avoid giving variables names which clash with functions; Scheme functions frequently have arguments named <code>lis</code>, <code>lst</code>, or <code>lyst</code> so as not to conflict with the system function <code>list</code>. However, in CL it is necessary to explicitly refer to the function namespace when passing a function as an argument -- which is also a common occurrence, as in the <code>sort</code> example above.</p>
<p>CL also differs from Scheme in its handling of boolean values. Scheme uses the special values #t and #f to represent truth and falsity. CL follows the older Lisp convention of using the symbols T and NIL, with NIL standing also for the empty list. In CL, <i>any</i> non-NIL value is treated as true by conditionals such as <code>if</code> as are non-#f values in Scheme. This allows some operators to serve both as predicates (answering a boolean-valued question) and as returning a useful value for further computation.</p>
<p>Lastly, the Scheme standards documents require <a href="/wiki/Tail_recursion" title="Tail recursion">tail-call optimization</a>, which the CL standard does not. Most CL implementations do offer tail-call optimization, although often only when the programmer uses an optimization directive. Nonetheless, common CL coding style does not favor the ubiquitous use of recursion that Scheme style prefers -- what a Scheme programmer would express with tail recursion, a CL user would usually express with an iterative expression in <code>do</code>, <code>dolist</code>, <code>loop</code>, or (more recently) with the <code>iterate</code> package.</p>
<p><a name="Implementations" id="Implementations"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Common_Lisp&amp;action=edit&amp;section=20" title="Edit section: Implementations">edit</a>]</span> <span class="mw-headline">Implementations</span></h2>
<p>See the Category <a href="/wiki/Category:Common_Lisp_implementations" title="Category:Common Lisp implementations">Common Lisp implementations</a>.</p>
<p>Common Lisp is defined by a specification (like <a href="/wiki/Ada_programming_language" title="Ada programming language" class="mw-redirect">Ada</a> and <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a>) rather than by a single implementation (like <a href="/wiki/Perl" title="Perl">Perl</a> prior to version 6). There are many implementations, and the standard spells out areas in which they may validly differ.</p>
<p>In addition, implementations tend to come with library packages, which provide functionality not covered in the standard. <a href="/wiki/Free_Software" title="Free Software" class="mw-redirect">Free Software</a> libraries have been created to support such features in a portable way, most notably <a href="http://common-lisp.net/" class="external text" title="http://common-lisp.net/" rel="nofollow">Common-Lisp.net</a> and the <a href="http://clocc.sourceforge.net/" class="external text" title="http://clocc.sourceforge.net/" rel="nofollow">Common Lisp Open Code Collection</a> project.</p>
<p>Common Lisp implementations may use any mix of native code compilation, byte code compilation or interpretion. Common Lisp has been designed to support <a href="/wiki/Incremental_compiler" title="Incremental compiler">incremental compilers</a>, file compilers and block compilers. Standard declarations to optimize compilation (such as function inlining) are proposed in the language specification. Most Common Lisp implementations compile source code to native <a href="/wiki/Machine_code" title="Machine code">machine code</a>. Some implementations can create (optimized) stand-alone applications. Others compile to <a href="/wiki/Bytecode" title="Bytecode">bytecode</a>, which reduces speed but eases binary-code portability. There are also compilers that compile Common Lisp code to C code. The misconception that Lisp is a purely-interpreted language is most likely due to the fact that Lisp environments provide an interactive prompt and that code is compiled one-by-one, in an incremental way. With Common Lisp incremental compilation is widely used.</p>
<p>Some <a href="/wiki/Unix" title="Unix">Unix</a>-based implementations (<a href="/wiki/CLISP" title="CLISP">CLISP</a>, <a href="/wiki/SBCL" title="SBCL" class="mw-redirect">SBCL</a>) can be used as <a href="http://clisp.cons.org/impnotes/quickstart.html#quickstart-unix" class="external text" title="http://clisp.cons.org/impnotes/quickstart.html#quickstart-unix" rel="nofollow">script interpreters</a>; that is, invoked by the system transparently in the way that a <a href="/wiki/Perl" title="Perl">Perl</a> or <a href="/wiki/Unix_shell" title="Unix shell">Unix shell</a> interpreter is.</p>
<p><a name="List_of_implementations" id="List_of_implementations"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Common_Lisp&amp;action=edit&amp;section=21" title="Edit section: List of implementations">edit</a>]</span> <span class="mw-headline">List of implementations</span></h3>
<p>Commercial implementations include:</p>
<ul>
<li><a href="/wiki/Allegro_Common_Lisp" title="Allegro Common Lisp">Allegro Common Lisp</a></li>
<li><a href="/wiki/LispWorks" title="LispWorks">LispWorks</a></li>
<li><a href="/wiki/Corman_Common_Lisp" title="Corman Common Lisp">Corman Common Lisp</a>, which is particularly adapted to Microsoft Windows</li>
<li><a href="/wiki/Scieneer_Common_Lisp" title="Scieneer Common Lisp">Scieneer Common Lisp</a>, which is designed for high-performance scientific computing.</li>
</ul>
<p>Freely redistributable implementations include:</p>
<ul>
<li><a href="/wiki/CMUCL" title="CMUCL" class="mw-redirect">CMUCL</a>, originally from <a href="/wiki/Carnegie_Mellon_University" title="Carnegie Mellon University">Carnegie Mellon University</a>, now maintained as <a href="/wiki/Free_Software" title="Free Software" class="mw-redirect">Free Software</a> by a group of volunteers. CMUCL uses a fast native-code compiler. It is available on <a href="/wiki/Linux" title="Linux">Linux</a> and <a href="/wiki/Berkeley_Software_Distribution" title="Berkeley Software Distribution">BSD</a> for Intel x86; <a href="/wiki/Linux" title="Linux">Linux</a> for Alpha; <a href="/wiki/Mac_OS_X" title="Mac OS X">Mac OS X</a> for Intel x86 and PowerPC; and Solaris, IRIX, and HP-UX on their native platforms.</li>
<li><a href="/wiki/Steel_Bank_Common_Lisp" title="Steel Bank Common Lisp">Steel Bank Common Lisp</a> (SBCL), a branch from CMUCL. "Broadly speaking, SBCL is distinguished from CMU CL by a greater emphasis on maintainability."<sup id="cite_ref-3" class="reference"><a href="#cite_note-3" title=""><span>[</span>4<span>]</span></a></sup> SBCL runs on the platforms CMUCL does, except HP/UX; in addition, it runs on Linux for AMD64, PowerPC, SPARC, and MIPS<sup id="cite_ref-4" class="reference"><a href="#cite_note-4" title=""><span>[</span>5<span>]</span></a></sup> , and has experimental support for running on Windows. SBCL does not use an interpreter by default; all expressions are compiled to native code unless the user switches the interpreter on.</li>
<li><a href="/wiki/CLISP" title="CLISP">CLISP</a>, a bytecode-compiling implementation, portable and runs on a number of Unix and Unix-like systems (including <a href="/wiki/Mac_OS_X" title="Mac OS X">Mac OS X</a>), as well as Microsoft Windows and several other systems.</li>
<li><a href="/wiki/GNU_Common_Lisp" title="GNU Common Lisp">GNU Common Lisp</a> (GCL), the <a href="/wiki/GNU" title="GNU">GNU</a> Project's Lisp compiler. Not yet fully ANSI-compliant, GCL is however the implementation of choice for several large projects including the mathematical tools <a href="/wiki/Maxima_(software)" title="Maxima (software)">Maxima</a>, <a href="/wiki/AXIOM" title="AXIOM" class="mw-redirect">AXIOM</a> and <a href="/wiki/ACL2" title="ACL2">ACL2</a>. GCL runs on <a href="/wiki/Linux" title="Linux">Linux</a> under eleven different architectures, and also under Windows, Solaris, and <a href="/wiki/FreeBSD" title="FreeBSD">FreeBSD</a>.</li>
<li><a href="/wiki/Embeddable_Common_Lisp" title="Embeddable Common Lisp">Embeddable Common Lisp</a> (ECL), designed to be embedded in <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a> programs.</li>
<li><a href="/wiki/Clozure_CL" title="Clozure CL">Clozure CL</a><sup id="cite_ref-5" class="reference"><a href="#cite_note-5" title=""><span>[</span>6<span>]</span></a></sup>, previously “OpenMCL”, a <a href="/wiki/Free_software" title="Free software">free software</a> / <a href="/wiki/Open-source_software" title="Open-source software" class="mw-redirect">open source</a> fork of Macintosh Common Lisp. As the name implies, OpenMCL was originally native to the Macintosh. The renamed Clozure CL now runs on <a href="/wiki/Mac_OS_X" title="Mac OS X">Mac OS X</a>, <a href="/wiki/Darwin_(operating_system)" title="Darwin (operating system)">Darwin</a>, <a href="/wiki/FreeBSD" title="FreeBSD">FreeBSD</a>, and <a href="/wiki/Linux" title="Linux">Linux</a> for PowerPC and Intel x86-64. A port to Intel x86-32 for the preceding operating systems is in progress, as well as a port to 64-bit Windows.</li>
<li><a href="/wiki/Movitz" title="Movitz">Movitz</a> implements a Lisp environment for <a href="/wiki/X86" title="X86">x86</a> computers without relying on any underlying OS.</li>
<li><a href="/wiki/Macintosh_Common_Lisp" title="Macintosh Common Lisp">Macintosh Common Lisp</a> 5.2 for Apple Macintosh computers with a PowerPC processor running Mac OS X.</li>
<li>The <a href="/wiki/Poplog" title="Poplog">Poplog</a> system implements a version of CL, with <a href="/wiki/POP-11" title="POP-11">POP-11</a>, and optionally <a href="/wiki/Prolog" title="Prolog">Prolog</a>, and <a href="/wiki/Standard_ML" title="Standard ML">Standard ML</a> (SML), allowing mixed language programming. For all, the implementation language is POP-11, which is compiled incrementally. It also has an integrated <a href="/wiki/Emacs" title="Emacs">Emacs</a>-like editor that communicates with the compiler.</li>
<li><a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a>-oriented
<ul>
<li><a href="/wiki/Armed_Bear_Common_Lisp" title="Armed Bear Common Lisp">Armed Bear Common Lisp</a> is a CL implementation that runs on the <a href="/wiki/Java_Virtual_Machine" title="Java Virtual Machine">Java Virtual Machine</a>.<sup id="cite_ref-6" class="reference"><a href="#cite_note-6" title=""><span>[</span>7<span>]</span></a></sup> It includes a compiler to <a href="/wiki/Java_byte_code" title="Java byte code" class="mw-redirect">Java byte code</a>, and allows access to Java libraries from CL. Armed Bear CL is a component of the <a href="http://armedbear.org/j.html" class="external text" title="http://armedbear.org/j.html" rel="nofollow">Armed Bear J Editor</a>, though it can be used independently.</li>
<li><a href="/wiki/CLforJava" title="CLforJava">CLforJava</a> is a CL implementation in Java that is actively developed at the <a href="/wiki/College_of_Charleston" title="College of Charleston">College of Charleston</a>.</li>
</ul>
</li>
</ul>
<p>Historical implementations include <a href="/wiki/Vax_Common_Lisp" title="Vax Common Lisp">Vax Common Lisp</a> - <a href="/wiki/Digital_Equipment_Corporation" title="Digital Equipment Corporation">Digital Equipment Corporation</a>'s implementation that ran on <a href="/wiki/VAX" title="VAX">VAX</a> systems running <a href="/wiki/OpenVMS" title="OpenVMS">VMS</a> or <a href="/wiki/ULTRIX" title="ULTRIX" class="mw-redirect">ULTRIX</a>.</p>
<p><a name="Applications" id="Applications"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Common_Lisp&amp;action=edit&amp;section=22" title="Edit section: Applications">edit</a>]</span> <span class="mw-headline">Applications</span></h2>
<p>See the Category <a href="/wiki/Category:Common_Lisp_software" title="Category:Common Lisp software">Common Lisp software</a>.</p>
<p>Common Lisp is used in many commercial applications, including the <a href="/wiki/Yahoo!" title="Yahoo!">Yahoo!</a> Store web-commerce site, which originally involved <a href="/wiki/Paul_Graham" title="Paul Graham">Paul Graham</a> and was later rewritten in C++ and Perl. <sup id="cite_ref-doubt-not-corporate-foolishness_7-0" class="reference"><a href="#cite_note-doubt-not-corporate-foolishness-7" title=""><span>[</span>8<span>]</span></a></sup> Other notable examples include:</p>
<ul>
<li><a href="/wiki/Jak_and_Daxter" title="Jak and Daxter" class="mw-redirect">Jak and Daxter</a> video games for Playstation2</li>
<li><a href="/wiki/OpenMusic" title="OpenMusic">OpenMusic</a> is an object-oriented visual programming environment based on Common Lisp, used in <a href="/wiki/Computer_assisted_composition" title="Computer assisted composition">Computer assisted composition</a>.</li>
<li><a href="/wiki/ITA_Software" title="ITA Software">ITA Software</a>'s low fare search engine, used by travel websites such as <a href="/wiki/Orbitz" title="Orbitz">Orbitz</a> and <a href="/wiki/Kayak.com" title="Kayak.com">Kayak.com</a> and airlines such as <a href="/wiki/American_Airlines" title="American Airlines">American Airlines</a>, <a href="/wiki/Continental_Airlines" title="Continental Airlines">Continental Airlines</a> and <a href="/wiki/US_Airways" title="US Airways">US Airways</a>.</li>
</ul>
<p>There also exist open-source applications written in Common Lisp, such as:</p>
<ul>
<li><a href="/wiki/ACL2" title="ACL2">ACL2</a>, a full-featured <a href="/wiki/Theorem_prover" title="Theorem prover" class="mw-redirect">theorem prover</a> for an <a href="/wiki/Applicative_programming_language" title="Applicative programming language">applicative</a> variant of Common Lisp.</li>
<li><a href="/wiki/Maxima_(software)" title="Maxima (software)">Maxima</a>, a sophisticated <a href="/wiki/Computer_algebra_system" title="Computer algebra system">computer algebra system</a>.</li>
<li><a href="/wiki/Stumpwm" title="Stumpwm">Stumpwm</a>, a tiling, keyboard driven X11 Window Manager written entirely in Common Lisp.</li>
</ul>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Common_Lisp&amp;action=edit&amp;section=23" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<div class="noprint tright portal" style="border:solid #aaa 1px;margin:0.5em 0 0.5em 0.5em;">
<table style="background:#f9f9f9; font-size:85%; line-height:110%;">
<tr>
<td><a href="/wiki/File:Internet_map_1024.jpg" class="image" title="Internet map 1024.jpg"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/d/d2/Internet_map_1024.jpg/28px-Internet_map_1024.jpg" width="28" height="28" border="0" /></a></td>
<td style="padding:0 0.2em;"><i><b><a href="/wiki/Portal:Computer_Science" title="Portal:Computer Science" class="mw-redirect">Computer Science portal</a></b></i></td>
</tr>
</table>
</div>
<ul>
<li><i><a href="/wiki/Common_Lisp_the_Language" title="Common Lisp the Language">Common Lisp the Language</a></i></li>
<li><i><a href="/wiki/On_Lisp" title="On Lisp">On Lisp</a></i></li>
<li><i><a href="/wiki/Practical_Common_Lisp" title="Practical Common Lisp">Practical Common Lisp</a></i></li>
</ul>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Common_Lisp&amp;action=edit&amp;section=24" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<div class="references-small references-column-count references-column-count-2" style="-moz-column-count:2; column-count:2;">
<ol class="references">
<li id="cite_note-0"><b><a href="#cite_ref-0" title="">^</a></b> <a href="http://webstore.ansi.org/RecordDetail.aspx?sku=ANSI+INCITS+226-1994+(R1999)" class="external text" title="http://webstore.ansi.org/RecordDetail.aspx?sku=ANSI+INCITS+226-1994+(R1999)" rel="nofollow">Document page</a> at ANSI website</li>
<li id="cite_note-reddy-1"><b><a href="#cite_ref-reddy_1-0" title="">^</a></b> <cite style="font-style:normal" class="web" id="CITEREFReddy2008">Reddy, Abhishek (2008-08-22). <a href="http://abhishek.geek.nz/docs/features-of-common-lisp" class="external text" title="http://abhishek.geek.nz/docs/features-of-common-lisp" rel="nofollow">"Features of Common Lisp"</a><span class="printonly">. <a href="http://abhishek.geek.nz/docs/features-of-common-lisp" class="external free" title="http://abhishek.geek.nz/docs/features-of-common-lisp" rel="nofollow">http://abhishek.geek.nz/docs/features-of-common-lisp</a></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Features+of+Common+Lisp&amp;rft.atitle=&amp;rft.aulast=Reddy&amp;rft.aufirst=Abhishek&amp;rft.au=Reddy%2C+Abhishek&amp;rft.date=2008-08-22&amp;rft_id=http%3A%2F%2Fabhishek.geek.nz%2Fdocs%2Ffeatures-of-common-lisp&amp;rfr_id=info:sid/en.wikipedia.org:Common_Lisp"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-2"><b><a href="#cite_ref-2" title="">^</a></b> <cite style="font-style:normal" class="web"><a href="http://www.cliki.net/Unicode%20Support" class="external text" title="http://www.cliki.net/Unicode%20Support" rel="nofollow">"Unicode support"</a>. <i>The Common Lisp Wiki</i><span class="printonly">. <a href="http://www.cliki.net/Unicode%20Support" class="external free" title="http://www.cliki.net/Unicode%20Support" rel="nofollow">http://www.cliki.net/Unicode%20Support</a></span><span class="reference-accessdate">. Retrieved on 2008-08-21</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Unicode+support&amp;rft.atitle=The+Common+Lisp+Wiki&amp;rft_id=http%3A%2F%2Fwww.cliki.net%2FUnicode%2520Support&amp;rfr_id=info:sid/en.wikipedia.org:Common_Lisp"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-3"><b><a href="#cite_ref-3" title="">^</a></b> <cite style="font-style:normal" class="web"><a href="http://sbcl.sourceforge.net/history.html" class="external text" title="http://sbcl.sourceforge.net/history.html" rel="nofollow">"History and Copyright"</a>. <i>Steel Bank Common Lisp</i><span class="printonly">. <a href="http://sbcl.sourceforge.net/history.html" class="external free" title="http://sbcl.sourceforge.net/history.html" rel="nofollow">http://sbcl.sourceforge.net/history.html</a></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=History+and+Copyright&amp;rft.atitle=Steel+Bank+Common+Lisp&amp;rft_id=http%3A%2F%2Fsbcl.sourceforge.net%2Fhistory.html&amp;rfr_id=info:sid/en.wikipedia.org:Common_Lisp"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-4"><b><a href="#cite_ref-4" title="">^</a></b> <cite style="font-style:normal" class="web"><a href="http://www.sbcl.org/platform-table.html" class="external text" title="http://www.sbcl.org/platform-table.html" rel="nofollow">"Platform Table"</a>. <i>Steel Bank Common Lisp</i><span class="printonly">. <a href="http://www.sbcl.org/platform-table.html" class="external free" title="http://www.sbcl.org/platform-table.html" rel="nofollow">http://www.sbcl.org/platform-table.html</a></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Platform+Table&amp;rft.atitle=Steel+Bank+Common+Lisp&amp;rft_id=http%3A%2F%2Fwww.sbcl.org%2Fplatform-table.html&amp;rfr_id=info:sid/en.wikipedia.org:Common_Lisp"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-5"><b><a href="#cite_ref-5" title="">^</a></b> <cite style="font-style:normal" class="web"><a href="http://trac.clozure.com/openmcl" class="external text" title="http://trac.clozure.com/openmcl" rel="nofollow">"Clozure CL"</a><span class="printonly">. <a href="http://trac.clozure.com/openmcl" class="external free" title="http://trac.clozure.com/openmcl" rel="nofollow">http://trac.clozure.com/openmcl</a></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Clozure+CL&amp;rft.atitle=&amp;rft_id=http%3A%2F%2Ftrac.clozure.com%2Fopenmcl&amp;rfr_id=info:sid/en.wikipedia.org:Common_Lisp"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-6"><b><a href="#cite_ref-6" title="">^</a></b> <cite style="font-style:normal" class="web"><a href="http://armedbear.org/abcl.html" class="external text" title="http://armedbear.org/abcl.html" rel="nofollow">"Armed Bear Common Lisp"</a><span class="printonly">. <a href="http://armedbear.org/abcl.html" class="external free" title="http://armedbear.org/abcl.html" rel="nofollow">http://armedbear.org/abcl.html</a></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Armed+Bear+Common+Lisp&amp;rft.atitle=&amp;rft_id=http%3A%2F%2Farmedbear.org%2Fabcl.html&amp;rfr_id=info:sid/en.wikipedia.org:Common_Lisp"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-doubt-not-corporate-foolishness-7"><b><a href="#cite_ref-doubt-not-corporate-foolishness_7-0" title="">^</a></b> "In January 2003, Yahoo released a new version of the editor written in C++ and Perl. It's hard to say whether the program is no longer written in Lisp, though, because to translate this program into C++ they literally had to write a Lisp interpreter: the source files of all the page-generating templates are still, as far as I know, Lisp code." <a href="/wiki/Paul_Graham" title="Paul Graham">Paul Graham</a>, <a href="http://www.paulgraham.com/avg.html" class="external text" title="http://www.paulgraham.com/avg.html" rel="nofollow">Beating the Averages</a></li>
</ol>
</div>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Common_Lisp&amp;action=edit&amp;section=25" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<table class="metadata plainlinks mbox-small" style="border:1px solid #aaa; background-color:#f9f9f9;">
<tr>
<td class="mbox-image"><a href="http://en.wikibooks.org/wiki/Special:Search/Common_Lisp" title="b:Special:Search/Common Lisp"><img alt="Sister project" src="http://upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/40px-Wikibooks-logo-en-noslogan.svg.png" width="40" height="40" border="0" /></a></td>
<td class="mbox-text" style=""><a href="/wiki/Wikibooks" title="Wikibooks">Wikibooks</a> has more on the topic of
<div style="margin-left:10px;"><i><b><a href="http://en.wikibooks.org/wiki/Special:Search/Common_Lisp" class="extiw" title="wikibooks:Special:Search/Common Lisp">Common Lisp</a></b></i></div>
</td>
</tr>
</table>
<ul>
<li>The <a href="http://www.cliki.net/" class="external text" title="http://www.cliki.net/" rel="nofollow">CLiki</a>, a Wiki for <a href="/wiki/Free_Software" title="Free Software" class="mw-redirect">Free Software</a> Common Lisp systems running on Unix-like systems.</li>
<li><a href="http://www.common-lisp.net/" class="external text" title="http://www.common-lisp.net/" rel="nofollow">Common Lisp software repository</a>.</li>
<li><a href="http://www.cl-user.net/" class="external text" title="http://www.cl-user.net/" rel="nofollow">The Common Lisp directory - information repository for all things Common Lisp</a>.</li>
<li><cite style="font-style:normal" class="web"><a href="http://www.lispworks.com/documentation/HyperSpec/Body/01_ab.htm" class="external text" title="http://www.lispworks.com/documentation/HyperSpec/Body/01_ab.htm" rel="nofollow">"History"</a>. <i><a href="/wiki/Common_Lisp_HyperSpec" title="Common Lisp HyperSpec">Common Lisp HyperSpec</a></i><span class="printonly">. <a href="http://www.lispworks.com/documentation/HyperSpec/Body/01_ab.htm" class="external free" title="http://www.lispworks.com/documentation/HyperSpec/Body/01_ab.htm" rel="nofollow">http://www.lispworks.com/documentation/HyperSpec/Body/01_ab.htm</a></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=History&amp;rft.atitle=%5B%5BCommon+Lisp+HyperSpec%5D%5D&amp;rft_id=http%3A%2F%2Fwww.lispworks.com%2Fdocumentation%2FHyperSpec%2FBody%2F01_ab.htm&amp;rfr_id=info:sid/en.wikipedia.org:Common_Lisp"><span style="display: none;">&#160;</span></span></li>
<li><a href="http://www.flownet.com/gat/jpl-lisp.html" class="external text" title="http://www.flownet.com/gat/jpl-lisp.html" rel="nofollow">Lisping at JPL</a></li>
<li><a href="http://www.defmacro.org/ramblings/lisp.html" class="external text" title="http://www.defmacro.org/ramblings/lisp.html" rel="nofollow">The Nature of Lisp</a> Essay that examines Lisp by comparison with XML.</li>
<li><a href="http://common-lisp.net/~dlw/LispSurvey.html" class="external text" title="http://common-lisp.net/~dlw/LispSurvey.html" rel="nofollow">Common Lisp Implementations: A Survey</a> Survey of maintained Common Lisp implementations.</li>
</ul>


<!-- 
NewPP limit report
Preprocessor node count: 3908/1000000
Post-expand include size: 26035/2048000 bytes
Template argument size: 8888/2048000 bytes
Expensive parser function count: 0/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:6068-0!1!0!default!!en!2 and timestamp 20090403161451 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Common_Lisp">http://en.wikipedia.org/wiki/Common_Lisp</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Common_Lisp" title="Category:Common Lisp">Common Lisp</a></span> | <span dir='ltr'><a href="/wiki/Category:Functional_languages" title="Category:Functional languages">Functional languages</a></span> | <span dir='ltr'><a href="/wiki/Category:Object-oriented_programming_languages" title="Category:Object-oriented programming languages">Object-oriented programming languages</a></span> | <span dir='ltr'><a href="/wiki/Category:Procedural_programming_languages" title="Category:Procedural programming languages">Procedural programming languages</a></span> | <span dir='ltr'><a href="/wiki/Category:Lisp_programming_language_family" title="Category:Lisp programming language family">Lisp programming language family</a></span> | <span dir='ltr'><a href="/wiki/Category:Lisp_programming_language" title="Category:Lisp programming language">Lisp programming language</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_example_Lisp_code" title="Category:Articles with example Lisp code">Articles with example Lisp code</a></span> | <span dir='ltr'><a href="/wiki/Category:Extensible_syntax_programming_languages" title="Category:Extensible syntax programming languages">Extensible syntax programming languages</a></span> | <span dir='ltr'><a href="/wiki/Category:Cross-platform_software" title="Category:Cross-platform software">Cross-platform software</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Common_Lisp" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Common_Lisp" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Common_Lisp&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Common_Lisp&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Common_Lisp" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Common_Lisp" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Common_Lisp" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Common_Lisp&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Common_Lisp&amp;oldid=277272064" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Common_Lisp&amp;id=277272064">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/Common_Lisp">Deutsch</a></li>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Common_Lisp">Français</a></li>
				<li class="interwiki-gl"><a href="http://gl.wikipedia.org/wiki/Common_Lisp">Galego</a></li>
				<li class="interwiki-ko"><a href="http://ko.wikipedia.org/wiki/%EC%BB%A4%EB%A8%BC_%EB%A6%AC%EC%8A%A4%ED%94%84">한국어</a></li>
				<li class="interwiki-hr"><a href="http://hr.wikipedia.org/wiki/Common_Lisp">Hrvatski</a></li>
				<li class="interwiki-it"><a href="http://it.wikipedia.org/wiki/Common_LISP">Italiano</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/Common_Lisp">日本語</a></li>
				<li class="interwiki-pl"><a href="http://pl.wikipedia.org/wiki/Common_Lisp">Polski</a></li>
				<li class="interwiki-pt"><a href="http://pt.wikipedia.org/wiki/Common_Lisp">Português</a></li>
				<li class="interwiki-ru"><a href="http://ru.wikipedia.org/wiki/Common_Lisp">Русский</a></li>
				<li class="interwiki-fi"><a href="http://fi.wikipedia.org/wiki/Common_Lisp">Suomi</a></li>
				<li class="interwiki-sv"><a href="http://sv.wikipedia.org/wiki/Common_Lisp">Svenska</a></li>
				<li class="interwiki-uk"><a href="http://uk.wikipedia.org/wiki/Common_Lisp">Українська</a></li>
				<li class="interwiki-zh"><a href="http://zh.wikipedia.org/wiki/Common_Lisp">中文</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 14 March 2009, at 22:29.</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv206 in 0.052 secs. --></body></html>
