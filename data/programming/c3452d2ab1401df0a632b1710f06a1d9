<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Computability theory (computer science),Abstract machine,Alan Turing,Alonzo Church,Automata theory,Christos Papadimitriou,Church-Turing thesis,Computability logic,Computational complexity theory,Computer science,Concurrency (computer science)" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="http://en.wikipedia.org/w/index.php?title=Computability_theory_(computer_science)&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="http://en.wikipedia.org/w/index.php?title=Computability_theory_(computer_science)&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="http://en.wikipedia.org/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="http://en.wikipedia.org/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Computability theory (computer science) - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?206xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?206xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?206xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?206xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?206xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?206xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?206xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?206xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?206xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Computability_theory_(computer_science)";
		var wgTitle = "Computability theory (computer science)";
		var wgAction = "view";
		var wgArticleId = "442136";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = "265352464";
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?206xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?206xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?206xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?206xx"></script>
		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Computability_theory_computer_science skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Computability theory (computer science)</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<div class="dablink">For the branch of mathematical logic called computability theory, see <a href="/wiki/Recursion_theory" title="Recursion theory">Recursion theory</a>.</div>
<p>In <a href="/wiki/Computer_science" title="Computer science">computer science</a>, <b>computability theory</b> is the branch of the <a href="/wiki/Theory_of_computation" title="Theory of computation">theory of computation</a> that studies which problems are computationally solvable using different <a href="/wiki/Model_of_computation" title="Model of computation">models of computation</a>.</p>
<p>Computability theory differs from the related discipline of <a href="/wiki/Computational_complexity_theory" title="Computational complexity theory">computational complexity theory</a>, which deals with the question of how efficiently a problem can be solved, rather than whether it is solvable at all.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Introduction"><span class="tocnumber">1</span> <span class="toctext">Introduction</span></a></li>
<li class="toclevel-1"><a href="#Formal_models_of_computation"><span class="tocnumber">2</span> <span class="toctext">Formal models of computation</span></a></li>
<li class="toclevel-1"><a href="#Power_of_automata"><span class="tocnumber">3</span> <span class="toctext">Power of automata</span></a>
<ul>
<li class="toclevel-2"><a href="#Power_of_finite_state_machines"><span class="tocnumber">3.1</span> <span class="toctext">Power of finite state machines</span></a></li>
<li class="toclevel-2"><a href="#Power_of_pushdown_automata"><span class="tocnumber">3.2</span> <span class="toctext">Power of pushdown automata</span></a></li>
<li class="toclevel-2"><a href="#Power_of_Turing_machines"><span class="tocnumber">3.3</span> <span class="toctext">Power of Turing machines</span></a>
<ul>
<li class="toclevel-3"><a href="#The_halting_problem"><span class="tocnumber">3.3.1</span> <span class="toctext">The halting problem</span></a></li>
<li class="toclevel-3"><a href="#Beyond_recursive_languages"><span class="tocnumber">3.3.2</span> <span class="toctext">Beyond recursive languages</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-1"><a href="#Concurrency-based_models"><span class="tocnumber">4</span> <span class="toctext">Concurrency-based models</span></a></li>
<li class="toclevel-1"><a href="#Unreasonable_models_of_computation"><span class="tocnumber">5</span> <span class="toctext">Unreasonable models of computation</span></a>
<ul>
<li class="toclevel-2"><a href="#Infinite_execution"><span class="tocnumber">5.1</span> <span class="toctext">Infinite execution</span></a></li>
<li class="toclevel-2"><a href="#Oracle_machines"><span class="tocnumber">5.2</span> <span class="toctext">Oracle machines</span></a></li>
<li class="toclevel-2"><a href="#Limits_of_hyper-computation"><span class="tocnumber">5.3</span> <span class="toctext">Limits of hyper-computation</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#History_of_computability_theory"><span class="tocnumber">6</span> <span class="toctext">History of computability theory</span></a></li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">7</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">8</span> <span class="toctext">References</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Introduction" id="Introduction"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Computability_theory_(computer_science)&amp;action=edit&amp;section=1" title="Edit section: Introduction">edit</a>]</span> <span class="mw-headline">Introduction</span></h2>
<p>A central question of computer science is to address the limits of computing devices. One approach to addressing this question is understanding the problems we can use computers to solve. Modern computing devices often seem to possess infinite capacity for calculation, and it's easy to imagine that, given enough time, we might use computers to solve any problem. However, it is possible to show clear limits to the ability of computers, even given arbitrarily vast computational resources, to solve even seemingly simple problems. Problems are formally expressed as a decision problem which is to construct a mathematical function that for each input returns either <tt>0</tt> or <tt>1</tt>. If the value of the function on the input is <tt>0</tt> then the answer is "no" and otherwise the answer is "yes".</p>
<p>To explore this area, computer scientists invented <a href="/wiki/Automata_theory" title="Automata theory">automata theory</a> which addresses problems such as the following: Given a <a href="/wiki/Formal_language" title="Formal language">formal language</a>, and a string, is the string a member of that language? This is a somewhat esoteric way of asking this question, so an example is illuminating. We might define our language as the set of all strings of digits which represent a <a href="/wiki/Prime_number" title="Prime number">prime number</a>. To ask whether an input string is a member of this language is equivalent to asking whether the number represented by that input string is prime. Similarly, we define a language as the set of all <a href="/wiki/Palindrome" title="Palindrome">palindromes</a>, or the set of all strings consisting only of the letter 'a'. In these examples, it is easy to see that constructing a computer to solve one problem is easier in some cases than in others.</p>
<p>But in what real sense is this observation true? Can we define a formal sense in which we can understand how hard a particular problem is to solve on a computer? It is the goal of computability theory of automata to answer just this question.</p>
<p><a name="Formal_models_of_computation" id="Formal_models_of_computation"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Computability_theory_(computer_science)&amp;action=edit&amp;section=2" title="Edit section: Formal models of computation">edit</a>]</span> <span class="mw-headline">Formal models of computation</span></h2>
<p>In order to begin to answer the central question of automata theory, it is necessary to define in a formal way what an automaton is. There are a number of useful models of automata. Some widely known models are:</p>
<dl>
<dt><a href="/wiki/Deterministic_finite_state_machine" title="Deterministic finite state machine" class="mw-redirect">Deterministic finite state machine</a></dt>
<dd>Also called a deterministic finite automaton (DFA), or simply a finite state machine. All real computing devices in existence today can be modeled as a finite state machine, as all real computers operate on finite resources. Such a machine has a set of states, and a set of state transitions which are affected by the input stream. Certain states are defined to be accepting states. An input stream is fed into the machine one character at a time, and the state transitions for the current state are compared to the input stream, and if there is a matching transition the machine may enter a new state. If at the end of the input stream the machine is in an accepting state, then the whole input stream is accepted.</dd>
</dl>
<dl>
<dt><a href="/wiki/Nondeterministic_finite_state_machine" title="Nondeterministic finite state machine">Nondeterministic finite state machine</a></dt>
<dd>Similarly called a nondeterministic finite automaton (NFA), it is another simple model of computation, although its processing sequence is not uniquely determined. It can be interpreted as taking multiple paths of computation simultaneously through a finite number of states. However, it is possible to prove that any NFA is reducible to an equivalent DFA.</dd>
</dl>
<dl>
<dt><a href="/wiki/Pushdown_automaton" title="Pushdown automaton">Pushdown automaton</a></dt>
<dd>Similar to the finite state machine, except that it has available an execution stack, which is allowed to grow to arbitrary size. The state transitions additionally specify whether to add a symbol to the stack, or to remove a symbol from the stack. It is more powerful than a DFA due to its infinite-memory stack, although only some information in the stack is ever freely accessible.</dd>
</dl>
<dl>
<dt><a href="/wiki/Turing_machine" title="Turing machine">Turing machine</a></dt>
<dd>Also similar to the finite state machine, except that the input is provided on an execution "tape", which the Turing machine can read from, write to, or move back and forth past its read/write "head". The tape is allowed to grow to arbitrary size. The Turing machine is capable of performing complex calculations which can have arbitrary duration. This model is perhaps the most important model of computation in computer science, as it simulates computation in the absence of predefined resource limits.</dd>
</dl>
<dl>
<dt><a href="/wiki/Multi-tape_Turing_machine" title="Multi-tape Turing machine" class="mw-redirect">Multi-tape Turing machine</a></dt>
<dd>Here, there may be more than one tape; moreover there may be multiple heads per tape. Surprisingly, any computation that can be performed by this sort of machine can also be performed by an ordinary Turing machine, although the latter may be slower or require a larger total region of its tape.</dd>
</dl>
<p><a name="Power_of_automata" id="Power_of_automata"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Computability_theory_(computer_science)&amp;action=edit&amp;section=3" title="Edit section: Power of automata">edit</a>]</span> <span class="mw-headline">Power of automata</span></h2>
<p>With these computational models in hand, we can determine what their limits are. That is, what classes of <a href="/wiki/Formal_language" title="Formal language">languages</a> can they accept?</p>
<p><a name="Power_of_finite_state_machines" id="Power_of_finite_state_machines"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Computability_theory_(computer_science)&amp;action=edit&amp;section=4" title="Edit section: Power of finite state machines">edit</a>]</span> <span class="mw-headline">Power of finite state machines</span></h3>
<p>Computer scientists call any language that can be accepted by a finite state machine a <b><a href="/wiki/Regular_language" title="Regular language">regular language</a></b>. Because of the restriction that the number of possible states in a finite state machine is finite, we can see that to find a language that is not regular, we must construct a language that would require an infinite number of states.</p>
<p>An example of such a language is the set of all strings consisting of the letters 'a' and 'b' which contain an equal number of the letter 'a' and 'b'. To see why this language cannot be correctly recognized by a finite state machine, assume first that such a machine <span class="texhtml"><i>M</i></span> exists. <span class="texhtml"><i>M</i></span> must have some number of states <span class="texhtml"><i>n</i></span>. Now consider the string <span class="texhtml"><i>x</i></span> consisting of <span class="texhtml">(<i>n</i> + 1)</span> 'a's followed by <span class="texhtml">(<i>n</i> + 1)</span> 'b's.</p>
<p>As <span class="texhtml"><i>M</i></span> reads in <span class="texhtml"><i>x</i></span>, there must be some state in the machine that is repeated as it reads in the first series of 'a's, since there are <span class="texhtml">(<i>n</i> + 1)</span> 'a's and only <span class="texhtml"><i>n</i></span> states by the <a href="/wiki/Pigeonhole_principle" title="Pigeonhole principle">pigeonhole principle</a>. Call this state <span class="texhtml"><i>S</i></span>, and further let <span class="texhtml"><i>d</i></span> be the number of 'a's that our machine read in order to get from the first occurrence of <span class="texhtml"><i>S</i></span> to some subsequent occurrence during the 'a' sequence. We know, then, that at that second occurrence of <span class="texhtml"><i>S</i></span>, we can add in an additional <span class="texhtml"><i>d</i></span> (where <span class="texhtml"><i>d</i> &gt; 0</span>) 'a's and we will be again at state <span class="texhtml"><i>S</i></span>. This means that we know that a string of <span class="texhtml">(<i>n</i> + <i>d</i> + 1)</span> 'a's must end up in the same state as the string of <span class="texhtml">(<i>n</i> + 1)</span> 'a's. This implies that if our machine accepts <span class="texhtml"><i>x</i></span>, it must also accept the string of <span class="texhtml">(<i>n</i> + <i>d</i> + 1)</span> 'a's followed by <span class="texhtml">(<i>n</i> + 1)</span> 'b's, which is not in the language of strings containing an equal number of 'a's and 'b's. In other words, <span class="texhtml"><i>M</i></span> cannot correctly distinguish between a string of equal number of 'a's and 'b's and a string with <span class="texhtml">(<i>n</i> + <i>d</i> + 1)</span> 'a's and <span class="texhtml"><i>n</i> + 1</span> 'b's.</p>
<p>We know, therefore, that this language cannot be accepted correctly by any finite state machine, and is thus not a regular language. A more general form of this result is called the <a href="/wiki/Pumping_lemma_for_regular_languages" title="Pumping lemma for regular languages">Pumping lemma for regular languages</a>, which can be used to show that broad classes of languages cannot be recognized by a finite state machine.</p>
<p><a name="Power_of_pushdown_automata" id="Power_of_pushdown_automata"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Computability_theory_(computer_science)&amp;action=edit&amp;section=5" title="Edit section: Power of pushdown automata">edit</a>]</span> <span class="mw-headline">Power of pushdown automata</span></h3>
<p>Computer scientists define a language that can be accepted by a <a href="/wiki/Pushdown_automaton" title="Pushdown automaton">pushdown automaton</a> as a <b><a href="/wiki/Context-free_language" title="Context-free language">Context-free language</a></b>, which can be specified as a <b><a href="/wiki/Context-free_grammar" title="Context-free grammar">Context-free grammar</a></b>. The language consisting of strings with equal numbers of 'a's and 'b's, which we showed was not a regular language, can be decided by a push-down automaton. Also, in general, a push-down automaton can behave just like a finite-state machine, so it can decide any language which is regular. This model of computation is thus strictly more powerful than finite state machines.</p>
<p>However, it turns out there are languages that cannot be decided by push-down automaton either. The result is similar to that for regular expressions, and won't be detailed here. There exists a <a href="/wiki/Pumping_lemma_for_context-free_languages" title="Pumping lemma for context-free languages">Pumping lemma for context-free languages</a>. An example of such a language is the set of prime numbers.</p>
<p><a name="Power_of_Turing_machines" id="Power_of_Turing_machines"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Computability_theory_(computer_science)&amp;action=edit&amp;section=6" title="Edit section: Power of Turing machines">edit</a>]</span> <span class="mw-headline">Power of Turing machines</span></h3>
<p><a href="/wiki/Turing_machine" title="Turing machine">Turing machines</a> can decide any context-free language, in addition to languages not decidable by a push-down automaton, such as the language consisting of prime numbers. It is therefore a strictly more powerful model of computation.</p>
<p>Because Turing machines have the ability to "back up" in their input tape, it is possible for a Turing machine to run for a long time in a way that is not possible with the other computation models previously described. It is possible to construct a Turing machine that will never finish running (halt) on some inputs. We say that a Turing machine can decide a language if it eventually will halt on all inputs and give an answer. A language that can be so decided is called a <b><a href="/wiki/Recursive_language" title="Recursive language">recursive language</a></b>. We can further describe Turing machines that will eventually halt and give an answer for any input in a language, but which may run forever for input strings which are not in the language. Such Turing machines could tell us that a given string is in the language, but we may never be sure based on its behavior that a given string is not in a language, since it may run forever in such a case. A language which is accepted by such a Turing machine is called a <b><a href="/wiki/Recursively_enumerable_language" title="Recursively enumerable language">recursively enumerable language</a></b>.</p>
<p>The Turing machine, it turns out, is an exceedingly powerful model of automata. Attempts to amend the definition of a Turing machine to produce a more powerful machine are surprisingly met with failure. For example, adding an extra tape to the Turing machine, giving it a 2-dimensional (or 3 or any-dimensional) infinite surface to work with can all be simulated by a Turing machine with the basic 1-dimensional tape. These models are thus not more powerful. In fact, a consequence of the <a href="/wiki/Church-Turing_thesis" title="Church-Turing thesis" class="mw-redirect">Church-Turing thesis</a> is that there is no reasonable model of computation which can decide languages that cannot be decided by a Turing machine.</p>
<p>The question to ask then is: do there exist languages which are recursively enumerable, but not recursive? And, furthermore, are there languages which are not even recursively enumerable?</p>
<p><a name="The_halting_problem" id="The_halting_problem"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Computability_theory_(computer_science)&amp;action=edit&amp;section=7" title="Edit section: The halting problem">edit</a>]</span> <span class="mw-headline">The halting problem</span></h4>
<div class="rellink noprint relarticle mainarticle" style="font-style:italic; padding-left:2em;">Main article: <a href="/wiki/Halting_problem" title="Halting problem">Halting problem</a></div>
<p>The halting problem is one of the most famous problems in computer science, because it has profound implications on the theory of computability and on how we use computers in everyday practice. The problem can be phrased:</p>
<dl>
<dd><i>Given a description of a Turing machine and its initial input, determine whether the program, when executed on this input, ever halts (completes). The alternative is that it runs forever without halting.</i></dd>
</dl>
<p>Here we are asking not a simple question about a prime number or a palindrome, but we are instead turning the tables and asking a Turing machine to answer a question about another Turing machine. It can be shown (See main article: <a href="/wiki/Halting_problem" title="Halting problem">Halting problem</a>) that it is not possible to construct a Turing machine that can answer this question in all cases.</p>
<p>That is, the only general way to know for sure if a given program will halt on a particular input in all cases is simply to run it and see if it halts. If it does halt, then you know it halts. If it doesn't halt, however, you may never know if it will eventually halt. The language consisting of all Turing machine descriptions paired with all possible input streams on which those Turing machines will eventually halt, is not recursive. The halting problem is therefore called non-computable or <b><a href="/wiki/Undecidable" title="Undecidable">undecidable</a></b>.</p>
<p>An extension of the halting problem is called <a href="/wiki/Rice%27s_Theorem" title="Rice's Theorem" class="mw-redirect">Rice's Theorem</a>, which states that it is undecidable (in general) whether a given language possesses any specific nontrivial property.</p>
<p><a name="Beyond_recursive_languages" id="Beyond_recursive_languages"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Computability_theory_(computer_science)&amp;action=edit&amp;section=8" title="Edit section: Beyond recursive languages">edit</a>]</span> <span class="mw-headline">Beyond recursive languages</span></h4>
<p>The halting problem is easy to solve, however, if we allow that the Turing machine that decides it may run forever when given input which is a representation of a Turing machine that does not itself halt. The halting language is therefore recursively enumerable. It is possible to construct languages which are not even recursively enumerable, however.</p>
<p>A simple example of such a language is the complement of the halting language; that is the language consisting of all Turing machines paired with input strings where the Turing machines do <i>not</i> halt on their input. To see that this language is not recursively enumerable, imagine that we construct a Turing machine <span class="texhtml"><i>M</i></span> which is able to give a definite answer for all such Turing machines, but that it may run forever on any Turing machine that does eventually halt. We can then construct another Turing machine <span class="texhtml"><i>M</i>'</span> that simulates the operation of this machine, along with simulating directly the execution of the machine given in the input as well, by interleaving the execution of the two programs. Since the direct simulation will eventually halt if the program it is simulating halts, and since by assumption the simulation of <span class="texhtml"><i>M</i></span> will eventually halt if the input program would never halt, we know that <span class="texhtml"><i>M</i>'</span> will eventually have one of its parallel versions halt. <span class="texhtml"><i>M</i>'</span> is thus a decider for the halting problem. We have previously shown, however, that the halting problem is undecidable. We have a contradiction, and we have thus shown that our assumption that <span class="texhtml"><i>M</i></span> exists is incorrect. The complement of the halting language is therefore not recursively enumerable.</p>
<p><a name="Concurrency-based_models" id="Concurrency-based_models"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Computability_theory_(computer_science)&amp;action=edit&amp;section=9" title="Edit section: Concurrency-based models">edit</a>]</span> <span class="mw-headline">Concurrency-based models</span></h2>
<p>A number of computational models based on <a href="/wiki/Concurrency_(computer_science)" title="Concurrency (computer science)">concurrency</a> have been developed, including the <a href="/wiki/Parallel_Random_Access_Machine" title="Parallel Random Access Machine">Parallel Random Access Machine</a> and the <a href="/wiki/Petri_net" title="Petri net">Petri net</a>. These models of concurrent computation still do not implement any mathematical functions that cannot be implemented by Turing machines.</p>
<p><a name="Unreasonable_models_of_computation" id="Unreasonable_models_of_computation"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Computability_theory_(computer_science)&amp;action=edit&amp;section=10" title="Edit section: Unreasonable models of computation">edit</a>]</span> <span class="mw-headline">Unreasonable models of computation</span></h2>
<p>The <a href="/wiki/Church-Turing_thesis" title="Church-Turing thesis" class="mw-redirect">Church-Turing thesis</a> conjectures that there is no reasonable model of computing that can compute more mathematical functions than a Turing machine. In this section we will explore some of the "unreasonable" ideas for computational models which violate this conjecture. Computer scientists have imagined many varieties of <b><a href="/wiki/Hypercomputer" title="Hypercomputer" class="mw-redirect">hypercomputers</a></b>.</p>
<p><a name="Infinite_execution" id="Infinite_execution"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Computability_theory_(computer_science)&amp;action=edit&amp;section=11" title="Edit section: Infinite execution">edit</a>]</span> <span class="mw-headline">Infinite execution</span></h3>
<div class="rellink noprint relarticle mainarticle" style="font-style:italic; padding-left:2em;">Main article: <a href="/wiki/Zeno_machine" title="Zeno machine">Zeno machine</a></div>
<p>Imagine a machine where each step of the computation requires half the time of the previous step. If we normalize to 1 time unit the amount of time required for the first step, the execution would require</p>
<dl>
<dd><img class="tex" alt="1 + {1 \over 2} + {1 \over 4} + \cdots" src="http://upload.wikimedia.org/math/5/2/5/5254134790a91115b3dbd14185e719c0.png" /></dd>
</dl>
<p>time to run. This infinite series converges to 2 time units, which means that this Turing machine can run an infinite execution in 2 time units. This machine is capable of deciding the halting problem by directly simulating the execution of the machine in question. By extension, any convergent series would work. Assuming that the series converges to a value <span class="texhtml"><i>n</i></span>, the Turing machine would complete an infinite execution in <span class="texhtml"><i>n</i></span> time units.</p>
<p><a name="Oracle_machines" id="Oracle_machines"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Computability_theory_(computer_science)&amp;action=edit&amp;section=12" title="Edit section: Oracle machines">edit</a>]</span> <span class="mw-headline">Oracle machines</span></h3>
<div class="rellink noprint relarticle mainarticle" style="font-style:italic; padding-left:2em;">Main article: <a href="/wiki/Oracle_machine" title="Oracle machine">Oracle machine</a></div>
<p>So-called Oracle machines have access to various "oracles" which provide the solution to specific undecidable problems. For example, the Turing machine may have a "halting oracle" which answers immediately whether a given Turing machine will ever halt on a given input. These machines are a central topic of study in <a href="/wiki/Recursion_theory" title="Recursion theory">recursion theory</a>.</p>
<p><a name="Limits_of_hyper-computation" id="Limits_of_hyper-computation"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Computability_theory_(computer_science)&amp;action=edit&amp;section=13" title="Edit section: Limits of hyper-computation">edit</a>]</span> <span class="mw-headline">Limits of hyper-computation</span></h3>
<p>Even these machines, which seemingly represent the limit of automata that we could imagine, run into their own limitations. While each of them can solve the halting problem for a Turing machine, they cannot solve their own version of the halting problem. For example, an Oracle machine cannot answer the question of whether a given Oracle machine will ever halt.</p>
<p><a name="History_of_computability_theory" id="History_of_computability_theory"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Computability_theory_(computer_science)&amp;action=edit&amp;section=14" title="Edit section: History of computability theory">edit</a>]</span> <span class="mw-headline">History of computability theory</span></h2>
<p>The <a href="/wiki/Lambda_calculus" title="Lambda calculus">lambda calculus</a>, an important precursor to formal computability theory, was developed by <a href="/wiki/Alonzo_Church" title="Alonzo Church">Alonzo Church</a> and <a href="/wiki/Stephen_Cole_Kleene" title="Stephen Cole Kleene">Stephen Cole Kleene</a>. <a href="/wiki/Alan_Turing" title="Alan Turing">Alan Turing</a> is most often considered the father of modern computer science, and laid many of the important foundations of computability and complexity theory, including the first description of the <a href="/wiki/Turing_machine" title="Turing machine">Turing machine</a> (in <a href="http://web.comlab.ox.ac.uk/oucl/research/areas/ieg/e-library/sources/tp2-ie.pdf" class="external autonumber" title="http://web.comlab.ox.ac.uk/oucl/research/areas/ieg/e-library/sources/tp2-ie.pdf" rel="nofollow">[1]</a>, 1936) as well as many of the important early results.</p>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Computability_theory_(computer_science)&amp;action=edit&amp;section=15" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<ul>
<li><a href="/wiki/Automata_theory" title="Automata theory">Automata theory</a></li>
<li><a href="/wiki/Abstract_machine" title="Abstract machine">Abstract machine</a></li>
<li><a href="/wiki/List_of_undecidable_problems" title="List of undecidable problems">List of undecidable problems</a></li>
<li><a href="/wiki/Computational_complexity_theory" title="Computational complexity theory">Computational complexity theory</a></li>
<li><a href="/wiki/Computability_logic" title="Computability logic">Computability logic</a></li>
<li><a href="/wiki/List_of_important_publications_in_computer_science#Computability" title="List of important publications in computer science">Important publications in computability</a></li>
</ul>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Computability_theory_(computer_science)&amp;action=edit&amp;section=16" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<ul>
<li><cite style="font-style:normal" class="book" id="CITEREF.5B.5BMichael_Sipser.5D.5D1997"><a href="/wiki/Michael_Sipser" title="Michael Sipser">Michael Sipser</a> (1997). <i>Introduction to the Theory of Computation</i>. PWS Publishing. <a href="/wiki/Special:BookSources/053494728X" class="internal">ISBN 0-534-94728-X</a>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Introduction+to+the+Theory+of+Computation&amp;rft.aulast=%5B%5BMichael+Sipser%5D%5D&amp;rft.au=%5B%5BMichael+Sipser%5D%5D&amp;rft.date=1997&amp;rft.pub=PWS+Publishing&amp;rft.isbn=0-534-94728-X&amp;rfr_id=info:sid/en.wikipedia.org:Computability_theory_(computer_science)"><span style="display: none;">&#160;</span></span> Part Two: Computability Theory, chapters 3–6, pp.123–222.</li>
<li><cite style="font-style:normal" class="book" id="CITEREF.5B.5BChristos_Papadimitriou.5D.5D1993"><a href="/wiki/Christos_Papadimitriou" title="Christos Papadimitriou">Christos Papadimitriou</a> (1993). <i>Computational Complexity</i> (1st edition ed.). Addison Wesley. <a href="/wiki/Special:BookSources/0201530821" class="internal">ISBN 0-201-53082-1</a>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Computational+Complexity&amp;rft.aulast=%5B%5BChristos+Papadimitriou%5D%5D&amp;rft.au=%5B%5BChristos+Papadimitriou%5D%5D&amp;rft.date=1993&amp;rft.edition=1st+edition&amp;rft.pub=Addison+Wesley&amp;rft.isbn=0-201-53082-1&amp;rfr_id=info:sid/en.wikipedia.org:Computability_theory_(computer_science)"><span style="display: none;">&#160;</span></span> Chapter 3: Computability, pp.57–70.</li>
</ul>


<!-- 
NewPP limit report
Preprocessor node count: 1202/1000000
Post-expand include size: 6139/2048000 bytes
Template argument size: 1858/2048000 bytes
Expensive parser function count: 0/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:442136-0!1!0!default!!en!2 and timestamp 20090315111715 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Computability_theory_(computer_science)">http://en.wikipedia.org/wiki/Computability_theory_(computer_science)</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Theory_of_computation" title="Category:Theory of computation">Theory of computation</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Computability_theory_(computer_science)" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Computability_theory_(computer_science)" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Computability_theory_(computer_science)&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Computability_theory_(computer_science)&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Computability_theory_(computer_science)" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/wiki/Special:Search" id="searchform"><div>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Computability_theory_(computer_science)" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Computability_theory_(computer_science)" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Computability_theory_(computer_science)&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Computability_theory_(computer_science)&amp;oldid=265352464" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Computability_theory_(computer_science)&amp;id=265352464">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-ar"><a href="http://ar.wikipedia.org/wiki/%D9%86%D8%B8%D8%B1%D9%8A%D8%A9_%D8%A7%D9%84%D8%AD%D8%A7%D8%B3%D9%88%D8%A8%D9%8A%D8%A9">العربية</a></li>
				<li class="interwiki-ca"><a href="http://ca.wikipedia.org/wiki/Teoria_de_la_computabilitat">Català</a></li>
				<li class="interwiki-cs"><a href="http://cs.wikipedia.org/wiki/Teorie_vy%C4%8D%C3%ADslitelnosti">Česky</a></li>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/Berechenbarkeitstheorie">Deutsch</a></li>
				<li class="interwiki-es"><a href="http://es.wikipedia.org/wiki/Teor%C3%ADa_de_la_computabilidad">Español</a></li>
				<li class="interwiki-fa"><a href="http://fa.wikipedia.org/wiki/%D9%86%D8%B8%D8%B1%DB%8C%D9%87_%D9%85%D8%AD%D8%A7%D8%B3%D8%A8%D9%87%E2%80%8C%D9%BE%D8%B0%DB%8C%D8%B1%DB%8C">فارسی</a></li>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Calculabilit%C3%A9">Français</a></li>
				<li class="interwiki-ko"><a href="http://ko.wikipedia.org/wiki/%EA%B3%84%EC%82%B0_%EA%B0%80%EB%8A%A5%EC%84%B1_%EC%9D%B4%EB%A1%A0">한국어</a></li>
				<li class="interwiki-hr"><a href="http://hr.wikipedia.org/wiki/Teorija_izra%C4%8Dunljivosti_(ra%C4%8Dunarstvo)">Hrvatski</a></li>
				<li class="interwiki-it"><a href="http://it.wikipedia.org/wiki/Teoria_della_calcolabilit%C3%A0">Italiano</a></li>
				<li class="interwiki-he"><a href="http://he.wikipedia.org/wiki/%D7%97%D7%99%D7%A9%D7%95%D7%91%D7%99%D7%95%D7%AA">עברית</a></li>
				<li class="interwiki-nl"><a href="http://nl.wikipedia.org/wiki/Berekenbaarheid">Nederlands</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/%E8%A8%88%E7%AE%97%E5%8F%AF%E8%83%BD%E6%80%A7%E7%90%86%E8%AB%96">日本語</a></li>
				<li class="interwiki-pl"><a href="http://pl.wikipedia.org/wiki/Teoria_obliczalno%C5%9Bci">Polski</a></li>
				<li class="interwiki-pt"><a href="http://pt.wikipedia.org/wiki/Computabilidade">Português</a></li>
				<li class="interwiki-ru"><a href="http://ru.wikipedia.org/wiki/%D0%A2%D0%B5%D0%BE%D1%80%D0%B8%D1%8F_%D0%B2%D1%8B%D1%87%D0%B8%D1%81%D0%BB%D0%B8%D0%BC%D0%BE%D1%81%D1%82%D0%B8">Русский</a></li>
				<li class="interwiki-simple"><a href="http://simple.wikipedia.org/wiki/Computability_theory">Simple English</a></li>
				<li class="interwiki-th"><a href="http://th.wikipedia.org/wiki/%E0%B8%97%E0%B8%A4%E0%B8%A9%E0%B8%8E%E0%B8%B5%E0%B8%81%E0%B8%B2%E0%B8%A3%E0%B8%84%E0%B8%B3%E0%B8%99%E0%B8%A7%E0%B8%93%E0%B9%84%E0%B8%94%E0%B9%89">ไทย</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 20 January 2009, at 21:02.</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv171 in 0.055 secs. --></body></html>
