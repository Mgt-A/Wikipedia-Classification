<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="C syntax,C syntax,ASCII,Basic Multilingual Plane,Bit field,Bracing style,Branch (computer science),C++,C89 (C version),C99,C (programming language)" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=C_syntax&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=C_syntax&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>C syntax - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "C_syntax";
		var wgTitle = "C syntax";
		var wgAction = "view";
		var wgArticleId = "456820";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 289043246;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
<style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-c .de1, .source-c .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-c  {}
.source-c .head {}
.source-c .foot {}
.source-c .imp {font-weight: bold; color: red;}
.source-c .ln-xtra {color: #cc0; background-color: #ffc;}
.source-c li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-c li.li2 {font-weight: bold;}
.source-c .kw1 {color: #b1b100;}
.source-c .kw2 {color: #000000; font-weight: bold;}
.source-c .kw3 {color: #000066;}
.source-c .kw4 {color: #993333;}
.source-c .co1 {color: #808080; font-style: italic;}
.source-c .co2 {color: #339933;}
.source-c .coMULTI {color: #808080; font-style: italic;}
.source-c .es0 {color: #000099; font-weight: bold;}
.source-c .br0 {color: #66cc66;}
.source-c .st0 {color: #ff0000;}
.source-c .nu0 {color: #cc66cc;}
.source-c .me1 {color: #202020;}
.source-c .me2 {color: #202020;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style>		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-C_syntax skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">C syntax</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<p>The <b><a href="/wiki/Syntax" title="Syntax">syntax</a> of the <a href="/wiki/C_(programming_language)" title="C (programming language)">C programming language</a></b> is a set of rules that specifies whether the sequence of characters in a file is conforming C <a href="/wiki/Source_code" title="Source code">source code</a>. The rules specify how the character sequences are to be chunked into <a href="/wiki/Tokens" title="Tokens" class="mw-redirect">tokens</a> (the <a href="/wiki/Lexical_grammar" title="Lexical grammar">lexical grammar</a>), the permissible sequences of these tokens and some of the meaning to be attributed to these permissible token sequences (additional meaning is assigned by the <a href="/wiki/Semantics" title="Semantics">semantics</a> of the language).</p>
<p>C syntax makes use of the <a href="/wiki/Maximal_munch" title="Maximal munch">maximal munch</a> principle.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Data_structures"><span class="tocnumber">1</span> <span class="toctext">Data structures</span></a>
<ul>
<li class="toclevel-2"><a href="#Primitive_data_types"><span class="tocnumber">1.1</span> <span class="toctext">Primitive data types</span></a>
<ul>
<li class="toclevel-3"><a href="#Integral_types"><span class="tocnumber">1.1.1</span> <span class="toctext">Integral types</span></a></li>
<li class="toclevel-3"><a href="#Enumerated_type"><span class="tocnumber">1.1.2</span> <span class="toctext">Enumerated type</span></a></li>
<li class="toclevel-3"><a href="#Floating_point_types"><span class="tocnumber">1.1.3</span> <span class="toctext">Floating point types</span></a></li>
<li class="toclevel-3"><a href="#Storage_duration_specifiers"><span class="tocnumber">1.1.4</span> <span class="toctext">Storage duration specifiers</span></a></li>
<li class="toclevel-3"><a href="#Type_qualifiers"><span class="tocnumber">1.1.5</span> <span class="toctext">Type qualifiers</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#Pointers"><span class="tocnumber">1.2</span> <span class="toctext">Pointers</span></a>
<ul>
<li class="toclevel-3"><a href="#Referencing"><span class="tocnumber">1.2.1</span> <span class="toctext">Referencing</span></a></li>
<li class="toclevel-3"><a href="#Dereferencing"><span class="tocnumber">1.2.2</span> <span class="toctext">Dereferencing</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#Arrays"><span class="tocnumber">1.3</span> <span class="toctext">Arrays</span></a>
<ul>
<li class="toclevel-3"><a href="#Array_declaration"><span class="tocnumber">1.3.1</span> <span class="toctext">Array declaration</span></a></li>
<li class="toclevel-3"><a href="#Accessing_elements"><span class="tocnumber">1.3.2</span> <span class="toctext">Accessing elements</span></a></li>
<li class="toclevel-3"><a href="#Dynamic_arrays"><span class="tocnumber">1.3.3</span> <span class="toctext">Dynamic arrays</span></a></li>
<li class="toclevel-3"><a href="#Multidimensional_arrays"><span class="tocnumber">1.3.4</span> <span class="toctext">Multidimensional arrays</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#Strings"><span class="tocnumber">1.4</span> <span class="toctext">Strings</span></a>
<ul>
<li class="toclevel-3"><a href="#Backslash_escapes"><span class="tocnumber">1.4.1</span> <span class="toctext">Backslash escapes</span></a></li>
<li class="toclevel-3"><a href="#String_literal_concatenation"><span class="tocnumber">1.4.2</span> <span class="toctext">String literal concatenation</span></a></li>
<li class="toclevel-3"><a href="#Character_constants"><span class="tocnumber">1.4.3</span> <span class="toctext">Character constants</span></a></li>
<li class="toclevel-3"><a href="#Wide_character_strings"><span class="tocnumber">1.4.4</span> <span class="toctext">Wide character strings</span></a></li>
<li class="toclevel-3"><a href="#Variable_width_strings"><span class="tocnumber">1.4.5</span> <span class="toctext">Variable width strings</span></a></li>
<li class="toclevel-3"><a href="#Library_functions"><span class="tocnumber">1.4.6</span> <span class="toctext">Library functions</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#Structures_and_unions"><span class="tocnumber">1.5</span> <span class="toctext">Structures and unions</span></a>
<ul>
<li class="toclevel-3"><a href="#Structures"><span class="tocnumber">1.5.1</span> <span class="toctext">Structures</span></a></li>
<li class="toclevel-3"><a href="#Unions"><span class="tocnumber">1.5.2</span> <span class="toctext">Unions</span></a></li>
<li class="toclevel-3"><a href="#Declaration"><span class="tocnumber">1.5.3</span> <span class="toctext">Declaration</span></a></li>
<li class="toclevel-3"><a href="#Accessing_members"><span class="tocnumber">1.5.4</span> <span class="toctext">Accessing members</span></a></li>
<li class="toclevel-3"><a href="#Initialization"><span class="tocnumber">1.5.5</span> <span class="toctext">Initialization</span></a></li>
<li class="toclevel-3"><a href="#Assignment"><span class="tocnumber">1.5.6</span> <span class="toctext">Assignment</span></a></li>
<li class="toclevel-3"><a href="#Other_operations"><span class="tocnumber">1.5.7</span> <span class="toctext">Other operations</span></a></li>
<li class="toclevel-3"><a href="#Bit_fields"><span class="tocnumber">1.5.8</span> <span class="toctext">Bit fields</span></a></li>
<li class="toclevel-3"><a href="#Incomplete_types"><span class="tocnumber">1.5.9</span> <span class="toctext">Incomplete types</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-1"><a href="#Operators"><span class="tocnumber">2</span> <span class="toctext">Operators</span></a></li>
<li class="toclevel-1"><a href="#Control_structures"><span class="tocnumber">3</span> <span class="toctext">Control structures</span></a>
<ul>
<li class="toclevel-2"><a href="#Compound_statements"><span class="tocnumber">3.1</span> <span class="toctext">Compound statements</span></a></li>
<li class="toclevel-2"><a href="#Selection_statements"><span class="tocnumber">3.2</span> <span class="toctext">Selection statements</span></a></li>
<li class="toclevel-2"><a href="#Iteration_statements"><span class="tocnumber">3.3</span> <span class="toctext">Iteration statements</span></a></li>
<li class="toclevel-2"><a href="#Jump_statements"><span class="tocnumber">3.4</span> <span class="toctext">Jump statements</span></a>
<ul>
<li class="toclevel-3"><a href="#Storing_the_address_of_a_label"><span class="tocnumber">3.4.1</span> <span class="toctext">Storing the address of a label</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-1"><a href="#Functions"><span class="tocnumber">4</span> <span class="toctext">Functions</span></a>
<ul>
<li class="toclevel-2"><a href="#Syntax"><span class="tocnumber">4.1</span> <span class="toctext">Syntax</span></a>
<ul>
<li class="toclevel-3"><a href="#Function_Pointers"><span class="tocnumber">4.1.1</span> <span class="toctext">Function Pointers</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#Global_structure"><span class="tocnumber">4.2</span> <span class="toctext">Global structure</span></a></li>
<li class="toclevel-2"><a href="#Argument_passing"><span class="tocnumber">4.3</span> <span class="toctext">Argument passing</span></a>
<ul>
<li class="toclevel-3"><a href="#Array_parameters"><span class="tocnumber">4.3.1</span> <span class="toctext">Array parameters</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-1"><a href="#Miscellaneous"><span class="tocnumber">5</span> <span class="toctext">Miscellaneous</span></a>
<ul>
<li class="toclevel-2"><a href="#Reserved_keywords"><span class="tocnumber">5.1</span> <span class="toctext">Reserved keywords</span></a></li>
<li class="toclevel-2"><a href="#Case_sensitivity"><span class="tocnumber">5.2</span> <span class="toctext">Case sensitivity</span></a></li>
<li class="toclevel-2"><a href="#Comments"><span class="tocnumber">5.3</span> <span class="toctext">Comments</span></a></li>
<li class="toclevel-2"><a href="#Command-line_arguments"><span class="tocnumber">5.4</span> <span class="toctext">Command-line arguments</span></a></li>
<li class="toclevel-2"><a href="#Evaluation_order"><span class="tocnumber">5.5</span> <span class="toctext">Evaluation order</span></a></li>
<li class="toclevel-2"><a href="#Undefined_behavior"><span class="tocnumber">5.6</span> <span class="toctext">Undefined behavior</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">6</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">7</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">8</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Data_structures" id="Data_structures"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=1" title="Edit section: Data structures">edit</a>]</span> <span class="mw-headline">Data structures</span></h2>
<p><a name="Primitive_data_types" id="Primitive_data_types"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=2" title="Edit section: Primitive data types">edit</a>]</span> <span class="mw-headline">Primitive data types</span></h3>
<p>The C language represents numbers in three forms: <i>integral</i>, <i>real</i> and <i>complex</i>. This distinction reflects similar distinctions in the <a href="/wiki/Instruction_set" title="Instruction set">instruction set</a> architecture of most <a href="/wiki/Central_processing_unit" title="Central processing unit">central processing units</a>. <i>Integral</i> data types store numbers in the set of <a href="/wiki/Integers" title="Integers" class="mw-redirect">integers</a>, while <i>real</i> and <i>complex</i> numbers represent numbers (or pair of numbers) in the set of <a href="/wiki/Real_numbers" title="Real numbers" class="mw-redirect">real numbers</a> in <a href="/wiki/Floating_point" title="Floating point">floating point</a> form.</p>
<p>All C integer types have <code>signed</code> and <code>unsigned</code> variants. If <code>signed</code> or <code>unsigned</code> is not specified explicitly, in most circumstances <code>signed</code> is assumed. However, for historic reasons plain <code>char</code> is a type distinct from both <code>signed char</code> and <code>unsigned char</code>. It may be a signed type or an unsigned type, depending on the compiler and the character set (C guarantees that members of the C basic character set have positive values). Also, <a href="/wiki/Bit_field" title="Bit field">bit field</a> types specified as plain <code>int</code> may be signed or unsigned, depending on the compiler.</p>
<p><a name="Integral_types" id="Integral_types"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=3" title="Edit section: Integral types">edit</a>]</span> <span class="mw-headline">Integral types</span></h4>
<p>The integral types come in different sizes, with varying amounts of memory usage and range of representable numbers. Modifiers are used to designate the size: <code>short</code>, <code>long</code> and <code>long long</code><sup id="cite_ref-long_long_0-0" class="reference"><a href="#cite_note-long_long-0" title=""><span>[</span>1<span>]</span></a></sup>. The character type, whose specifier is <code>char</code>, represents the smallest addressable storage unit, which is most often an 8-bit byte (its size must be at least 7-bit to store the basic character set, or larger) The standard header <a href="/wiki/Limits.h" title="Limits.h">limits.h</a> defines the minimum and maximum values of the integral primitive data types, amongst other limits.</p>
<p>The following table provides a list of the integral types and their <i>typical</i> storage sizes and acceptable ranges of values, which may vary from one compiler and platform to another. <a href="/wiki/ISO_C" title="ISO C" class="mw-redirect">ISO C</a> defines different limits in section 5.2.4.2.1 of the standard. For integral types of <i>guaranteed</i> sizes, the standard provides the <a href="/wiki/Stdint.h" title="Stdint.h">stdint.h</a> header.</p>
<table class="wikitable">
<caption>Typical limits of integral types</caption>
<tr>
<th>Implicit specifier(s)</th>
<th>Explicit specifier</th>
<th style="width: 4.0em">Bits</th>
<th style="width: 3.5em">Bytes</th>
<th>Minimum value</th>
<th>Maximum value</th>
</tr>
<tr>
<td><code>signed char</code></td>
<td><i>same</i></td>
<td style="text-align: center">8</td>
<td style="text-align: center">1</td>
<td style="text-align: right">−128</td>
<td style="text-align: right">+127</td>
</tr>
<tr>
<td><code>unsigned char</code></td>
<td><i>same</i></td>
<td style="text-align: center">8</td>
<td style="text-align: center">1</td>
<td style="text-align: right">0</td>
<td style="text-align: right">255</td>
</tr>
<tr>
<td><code>char</code></td>
<td><i>one of the above</i></td>
<td style="text-align: center">8</td>
<td style="text-align: center">1</td>
<td style="text-align: right">−128 <i>or</i> 0</td>
<td style="text-align: right">+127 <i>or</i> 255</td>
</tr>
<tr bgcolor="#F0F7F7">
<td><code>short</code></td>
<td><code>signed short int</code></td>
<td style="text-align: center">16</td>
<td style="text-align: center">2</td>
<td style="text-align: right">−32,768</td>
<td style="text-align: right">+32,767</td>
</tr>
<tr bgcolor="#F0F7F7">
<td><code>unsigned short</code></td>
<td><code>unsigned short int</code></td>
<td style="text-align: center">16</td>
<td style="text-align: center">2</td>
<td style="text-align: right">0</td>
<td style="text-align: right">65,535</td>
</tr>
<tr>
<td><code>int</code></td>
<td><code>signed int</code></td>
<td style="text-align: center">16 <i>or</i> 32</td>
<td style="text-align: center">2 <i>or</i> 4</td>
<td style="text-align: right">−32,768 <i>or</i><br />
−2,147,483,648</td>
<td style="text-align: right">+32,767 <i>or</i><br />
+2,147,483,647</td>
</tr>
<tr>
<td><code>unsigned</code></td>
<td><code>unsigned int</code></td>
<td style="text-align: center">16 <i>or</i> 32</td>
<td style="text-align: center">2 <i>or</i> 4</td>
<td style="text-align: right">0</td>
<td style="text-align: right">65,535 <i>or</i><br />
4,294,967,295</td>
</tr>
<tr bgcolor="#F0F7F7">
<td><code>long</code></td>
<td><code>signed long int</code></td>
<td style="text-align: center">32</td>
<td style="text-align: center">4</td>
<td style="text-align: right">−2,147,483,648</td>
<td style="text-align: right">+2,147,483,647</td>
</tr>
<tr bgcolor="#F0F7F7">
<td><code>unsigned long</code></td>
<td><code>unsigned long int</code></td>
<td style="text-align: center">32</td>
<td style="text-align: center">4</td>
<td style="text-align: right">0</td>
<td style="text-align: right">4,294,967,295</td>
</tr>
<tr>
<td><code>long long</code><sup id="cite_ref-long_long_0-1" class="reference"><a href="#cite_note-long_long-0" title=""><span>[</span>1<span>]</span></a></sup></td>
<td><code>signed long long int</code></td>
<td style="text-align: center">64</td>
<td style="text-align: center">8</td>
<td style="text-align: right">−9,223,372,036,854,775,808</td>
<td style="text-align: right">+9,223,372,036,854,775,807</td>
</tr>
<tr>
<td><code>unsigned long long</code><sup id="cite_ref-long_long_0-2" class="reference"><a href="#cite_note-long_long-0" title=""><span>[</span>1<span>]</span></a></sup></td>
<td><code>unsigned long long int</code></td>
<td style="text-align: center">64</td>
<td style="text-align: center">8</td>
<td style="text-align: right">0</td>
<td style="text-align: right">18,446,744,073,709,551,615</td>
</tr>
</table>
<p>The size and limits of the plain <code>int</code> type (without the <code>short</code>, <code>long</code>, or <code>long long</code> modifiers) vary much more than the other integral types among C implementations. The <a href="/wiki/Single_UNIX_Specification" title="Single UNIX Specification">Single UNIX Specification</a> specifies that the <code>int</code> type must be at least 32 bits, but the <a href="/wiki/ISO_C" title="ISO C" class="mw-redirect">ISO C</a> standard only requires 16 bits. Refer to <a href="/wiki/Limits.h" title="Limits.h">limits.h</a> for guaranteed constraints on these data types. On most existing implementations, two of the five integral types have the same bit widths.</p>
<p>Integral type literal constants may be represented in one of two ways, by an <a href="/wiki/Integer" title="Integer">integer type</a> number, or by a single <a href="/wiki/Character_(computing)" title="Character (computing)">character</a> surrounded by single quotes. Integers may be represented in three bases: decimal (<code>48</code> or <code>-293</code>), <a href="/wiki/Octal" title="Octal">octal</a> with a "0" prefix (<code>0177</code>), or <a href="/wiki/Hexadecimal" title="Hexadecimal">hexadecimal</a> with a "0x" prefix (<code>0x3FE</code>). A character in single quotes (<code>'F'</code>), called a "character constant," represents the value of that character in the execution character set (often <a href="/wiki/ASCII" title="ASCII">ASCII</a>). In C, character constants have type <code>int</code> (in <a href="/wiki/C%2B%2B" title="C++">C++</a>, they have type <code>char</code>).</p>
<p><a name="Enumerated_type" id="Enumerated_type"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=4" title="Edit section: Enumerated type">edit</a>]</span> <span class="mw-headline">Enumerated type</span></h4>
<p>The <a href="/wiki/Enumerated_type" title="Enumerated type">enumerated type</a> in C, specified with the <code>enum</code> keyword, and often just called an "enum," is a type designed to represent values across a series of named constants. Each of the enumerated constants has type <code>int</code>. Each <code>enum</code> type itself is compatible with <code>char</code> or a signed or unsigned integer type, but each implementation defines its own rules for choosing a type.</p>
<p>Some compilers warn if an object with enumerated type is assigned a value that is not one of its constants. However, such an object can be assigned any values in the range of their compatible type, and <code>enum</code> constants can be used anywhere an integer is expected. For this reason, <code>enum</code> values are often used in place of the preprocessor <code>#define</code> directives to create a series of named constants.</p>
<p>An enumerated type is declared with the <code>enum</code> specifier, an optional name for the enum, a list of one or more constants contained within curly braces and separated by commas, and an optional list of variable names. Subsequent references to a specific enumerated type use the <code>enum</code> keyword and the name of the enum. By default, the first constant in an enumeration is assigned value zero, and each subsequent value is incremented by one over the previous constant. Specific values may also be assigned to constants in the declaration, and any subsequent constants without specific values will be given incremented values from that point onward.</p>
<p>For example, consider the following declaration:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw2">enum</span> colors <span class="br0">{</span> RED, GREEN, BLUE = <span class="nu0">5</span>, YELLOW <span class="br0">}</span> paint_color;
</pre></div>
<p>Which declares the <code>enum colors</code> type; the <code>int</code> constants <code>RED</code> (whose value is zero), <code>GREEN</code> (whose value is one greater than <code>RED</code>, one), <code>BLUE</code> (whose value is the given value, five), and <code>YELLOW</code> (whose value is one greater than <code>BLUE</code>, six); and the <code>enum colors</code> variable <code>paint_color</code>. The constants may be used outside of the context of the enum, and values other than the constants may be assigned to <code>paint_color</code>, or any other variable of type <code>enum colors</code>.</p>
<p><a name="Floating_point_types" id="Floating_point_types"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=5" title="Edit section: Floating point types">edit</a>]</span> <span class="mw-headline">Floating point types</span></h4>
<p>The floating-point form is used to represent numbers with a fractional component. They do not however represent most rational numbers exactly; they are a close approximation instead. There are three types of real values, denoted by their specifier: single-precision (specifier <code>float</code>), double-precision (<code>double</code>) and double-extended-precision (<code>long double</code>). Each of these may represent values in a different form, often one of the <a href="/wiki/IEEE_floating-point" title="IEEE floating-point" class="mw-redirect">IEEE floating point</a> formats.</p>
<p>Floating-point constants may be written in decimal notation, e.g. 1.23. Scientific notation may be used by adding <code>e</code> or <code>E</code> followed by a decimal exponent, e.g. 1.23e2 (which has the value 123). Either a decimal point or an exponent is required (otherwise, the number is an integer constant). <a href="/wiki/C99" title="C99">C99</a> introduced hexadecimal floating-point constants, which follow similar rules except that they must be prefixed by <code>0x</code> and use <code>p</code> to specify a hexadecimal exponent. Both decimal and hexadecimal floating-point constants may be suffixed by <code>f</code> or <code>F</code> to indicate a constant of type <code>float</code>, by <code>l</code> or <code>L</code> to indicate type <code>long double</code>, or left unsuffixed for a <code>double</code> constant.</p>
<p>The standard header file <code>float.h</code> defines the minimum and maximum values of the floating-point types <code>float</code>, <code>double</code>, and <code>long double</code>. It also defines other limits that are relevant to the processing of floating-point numbers.</p>
<p><a name="Storage_duration_specifiers" id="Storage_duration_specifiers"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=6" title="Edit section: Storage duration specifiers">edit</a>]</span> <span class="mw-headline">Storage duration specifiers</span></h4>
<p>Every object has a storage class, which may be automatic, static, or allocated. Variables declared within a block by default have automatic storage, as do those explicitly declared with the <code>auto</code> or <code>register</code> storage class specifiers. The <code>auto</code> and <code>register</code> specifiers may only be used within functions and function argument declarations; as such, the <code>auto</code> specifier is always redundant. Objects declared outside of all blocks and those explicitly declared with the <code>static</code> storage class specifier have static storage duration.</p>
<p>Objects with automatic storage are local to the block in which they were declared and are discarded when the block is exited. Additionally, objects declared with the <code>register</code> storage class may be given higher priority by the compiler for access to <a href="/wiki/Register_(computing)" title="Register (computing)" class="mw-redirect">registers</a>; although they may not actually be stored in registers, objects with this storage class may not be used with the address-of (<code>&amp;</code>) unary operator. Objects with static storage persist upon exit from the block in which they were declared. In this way, the same object can be accessed by a function across multiple calls. Objects with allocated storage duration are created and destroyed explicitly with <a href="/wiki/Malloc" title="Malloc"><code>malloc</code></a>, <code>free</code>, and related functions.</p>
<p>The <code>extern</code> storage class specifier indicates that the storage for an object has been defined elsewhere. When used inside a block, it indicates that the storage has been defined by a declaration outside of that block. When used outside of all blocks, it indicates that the storage has been defined outside of the file. The <code>extern</code> storage class specifier is redundant when used on a function declaration. It indicates that the declared function has been defined outside of the file.</p>
<p><a name="Type_qualifiers" id="Type_qualifiers"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=7" title="Edit section: Type qualifiers">edit</a>]</span> <span class="mw-headline">Type qualifiers</span></h4>
<p>Objects can be qualified to indicate special properties of the data they contain. The <code>const</code> type qualifier indicates that the value of an object should not change once it has been initialized. Attempting to modify an object qualified with <code>const</code> yields undefined behavior, so some C implementations store them in read-only segments of memory. The <code>volatile</code> type qualifier indicates that the value of an object may be changed externally without any action by the program (see <a href="/wiki/Volatile_variable" title="Volatile variable">volatile variable</a>); it may be completely ignored by the compiler.</p>
<p><a name="Pointers" id="Pointers"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=8" title="Edit section: Pointers">edit</a>]</span> <span class="mw-headline">Pointers</span></h3>
<p>In declarations the asterisk modifier (<code>*</code>) specifies a pointer type. For example, where the specifier <code>int</code> would refer to the integer type, the specifier <code>int</code>&#160;<code>*</code> refers to the type "pointer to integer". Pointer values associate two pieces of information: a memory address and a data type. The following line of code declares a pointer-to-integer variable called <code>ptr</code>:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">int</span> *ptr;
</pre></div>
<p><a name="Referencing" id="Referencing"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=9" title="Edit section: Referencing">edit</a>]</span> <span class="mw-headline">Referencing</span></h4>
<p>When a non-static pointer is declared, it has an unspecified value associated with it. The address associated with such a pointer must be changed by assignment prior to using it. In the following example, <code>ptr</code> is set so that it points to the data associated with the variable <code>a</code>:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">int</span> *ptr;
<span class="kw4">int</span> a;
 
ptr = &amp;a;
</pre></div>
<p>In order to accomplish this, the "address-of" operator (unary <code>&amp;</code>) is used. It produces the memory location of the data object that follows.</p>
<p><a name="Dereferencing" id="Dereferencing"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=10" title="Edit section: Dereferencing">edit</a>]</span> <span class="mw-headline">Dereferencing</span></h4>
<p>The pointed-to data can be accessed through a pointer value. In the following example, the integral variable <code>b</code> is set to the value <code>10</code>:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">int</span> *ptr;
<span class="kw4">int</span> a, b;
 
a = <span class="nu0">10</span>;
ptr = &amp;a;
b = *ptr;
</pre></div>
<p>In order to accomplish that task, the dereference operator (unary <code>*</code>) is used. It returns the data to which its operand—which must be of pointer type—points. Thus, the expression <code>*ptr</code> denotes the same value as <code>a</code>.</p>
<p><a name="Arrays" id="Arrays"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=11" title="Edit section: Arrays">edit</a>]</span> <span class="mw-headline">Arrays</span></h3>
<p><a name="Array_declaration" id="Array_declaration"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=12" title="Edit section: Array declaration">edit</a>]</span> <span class="mw-headline">Array declaration</span></h4>
<p>Arrays are used in C to represent structures of consecutive elements of the same type. The declaration of a (fixed-size) array has the following syntax:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">int</span> array<span class="br0">[</span><span class="nu0">100</span><span class="br0">]</span>;
</pre></div>
<p>which defines an array named <code>array</code> to hold <code>100</code> values of the primitive type <code>int</code>. When using a C99-conforming compiler, the array dimension may also be a non-constant expression (if declared within a function), in which case memory for the specified number of elements will be allocated. In most contexts in later use, a mention of the variable <code>array</code> is converted to a pointer to the first item in the array. The <code>sizeof</code> operator is an exception: <code>sizeof array</code> yields the size of the entire array (that is, 100 times the size of an <code>int</code>).</p>
<p><a name="Accessing_elements" id="Accessing_elements"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=13" title="Edit section: Accessing elements">edit</a>]</span> <span class="mw-headline">Accessing elements</span></h4>
<p>The primary facility for accessing the values of the elements of an array is the array subscript operator. To access the <code>i</code>-indexed element of <code>array</code>, the syntax would be <code>array[i]</code>, which refers to the value stored in that array element.</p>
<p>Array subscript numbering begins at 0. The largest allowed array subscript is therefore equal to the number of elements in the array minus 1. To illustrate this, consider an array <code>a</code> declared as having 10 elements; the first element would be <code>a[0]</code> and the last element would be <code>a[9]</code>. C provides no facility for automatic <i>bounds checking</i> for array usage. Though logically the last subscript in an array of 10 elements would be 9, subscripts 10, 11, and so forth could accidentally be specified, with undefined results.</p>
<p>Due to array↔pointer interchangeability, the addresses of each of the array elements can be expressed in equivalent <a href="/wiki/Pointer_arithmetic" title="Pointer arithmetic" class="mw-redirect">pointer arithmetic</a>. The following table illustrates both methods for the existing array:</p>
<table class="wikitable" style="margin-left: auto; margin-right: auto; text-align: center">
<caption>Array subscripts vs. pointer arithmetic</caption>
<tr>
<th style="text-align: left">Element index</th>
<th style="width: 9em">0</th>
<th style="width: 9em">1</th>
<th style="width: 9em">2</th>
<th style="width: 9em">n</th>
</tr>
<tr>
<th style="text-align: left">Array subscript</th>
<td><code>array[0]</code></td>
<td><code>array[1]</code></td>
<td><code>array[2]</code></td>
<td><code>array[n]</code></td>
</tr>
<tr>
<th style="text-align: left">Dereferenced pointer</th>
<td><code>*array</code></td>
<td><code>*(array + 1)</code></td>
<td><code>*(array + 2)</code></td>
<td><code>*(array + n)</code></td>
</tr>
</table>
<p><a name="Dynamic_arrays" id="Dynamic_arrays"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=14" title="Edit section: Dynamic arrays">edit</a>]</span> <span class="mw-headline">Dynamic arrays</span></h4>
<p>Recall that a constant is required for the dimension in a declaration of a static array. Often we would prefer to determine the array length as a run-time variable:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">int</span> a<span class="br0">[</span>n<span class="br0">]</span>;
a<span class="br0">[</span><span class="nu0">3</span><span class="br0">]</span> = <span class="nu0">10</span>;
</pre></div>
<p>This behavior can be imitated with the help of the <a href="/wiki/C_standard_library" title="C standard library">C standard library</a>. The <code><a href="/wiki/Malloc" title="Malloc">malloc</a></code> function provides a simple method for allocating memory. It takes one parameter: the amount of memory to allocate in bytes. Upon successful allocation, <code>malloc</code> returns a generic (void *) pointer value, pointing to the beginning of the allocated space. The pointer value returned is converted to an appropriate type implicitly by assignment. If the allocation could not be completed, <code>malloc</code> returns a <a href="/wiki/Null_pointer" title="Null pointer" class="mw-redirect">null pointer</a>. The following segment is therefore similar in function to the above desired declaration:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="co2">#include &lt;stdlib.h&gt; /* declares malloc */</span>
…
<span class="kw4">int</span> *a;
a = malloc<span class="br0">(</span>n * <span class="kw4">sizeof</span><span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span><span class="br0">)</span>;
a<span class="br0">[</span><span class="nu0">3</span><span class="br0">]</span> = <span class="nu0">10</span>;
</pre></div>
<p>The result is a "pointer to <code>int</code>" variable (<code>a</code>) that points to the first of <code>n</code> contiguous <code>int</code> objects; due to array↔pointer equivalence this can be used in place of an actual array name, as shown in the last line. The advantage in using this <i>dynamic allocation</i> is that the amount of memory that is allocated to it can be limited to what is actually needed at run time, and this can be changed as needed (using the standard library function <code><a href="/wiki/Realloc" title="Realloc" class="mw-redirect">realloc</a></code>).</p>
<p>When the dynamically-allocated memory is no longer needed, it should be released back to the run-time system. This is done with a call to the <code>free</code> function. It takes a single parameter: a pointer to previously allocated memory. This is the value that was returned by a previous call to <code>malloc</code>. It is considered good practice to then set the pointer variable to <code>NULL</code> so that further attempts to access the memory to which it points will fail. If this is not done, the variable becomes a <a href="/wiki/Dangling_pointer" title="Dangling pointer">dangling pointer</a>, and such errors in the code (or manipulations by an attacker) might be very hard to detect and lead to obscure and potentially dangerous malfunction caused by memory corruption.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
free<span class="br0">(</span>a<span class="br0">)</span>;
a = <span class="kw2">NULL</span>;
</pre></div>
<p>Standard C also supports <a href="/wiki/Variable-length_array" title="Variable-length array">variable-length arrays</a> (VLAs) with block scope. Such array variables are allocated based on the value of an integer value at runtime upon entry to a block, and are deallocated at the end of the block.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">float</span> read_and_process<span class="br0">(</span><span class="kw4">int</span> sz<span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw4">float</span>   vals<span class="br0">[</span>sz<span class="br0">]</span>;   <span class="co1">// VLA, size determined at runtime</span>
 
    <span class="kw1">for</span> <span class="br0">(</span><span class="kw4">int</span> i = <span class="nu0">0</span>; i &lt; sz; i++<span class="br0">)</span>
        vals<span class="br0">[</span>i<span class="br0">]</span> = read_value<span class="br0">(</span><span class="br0">)</span>;
    <span class="kw1">return</span> process<span class="br0">(</span>vals, sz<span class="br0">)</span>;
<span class="br0">}</span>
</pre></div>
<p><a name="Multidimensional_arrays" id="Multidimensional_arrays"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=15" title="Edit section: Multidimensional arrays">edit</a>]</span> <span class="mw-headline">Multidimensional arrays</span></h4>
<p>In addition, C supports arrays of multiple dimensions, which are stored in <a href="/wiki/Row-major_order" title="Row-major order">row-major order</a>. Technically, C multidimensional arrays are just one-dimensional arrays whose elements are arrays. The syntax for declaring multidimensional arrays is as follows:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">int</span> array2d<span class="br0">[</span>ROWS<span class="br0">]</span><span class="br0">[</span>COLUMNS<span class="br0">]</span>;
</pre></div>
<p>(where <code>ROWS</code> and <code>COLUMNS</code> are constants); this defines a two-dimensional array. Reading the subscripts from left to right, <code>array2d</code> is an array of length <code>ROWS</code>, each element of which is an array of <code>COLUMNS</code> <code>int</code>s.</p>
<p>To access an integer element in this multidimensional array, one would use</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
array2d<span class="br0">[</span><span class="nu0">4</span><span class="br0">]</span><span class="br0">[</span><span class="nu0">3</span><span class="br0">]</span>
</pre></div>
<p>Again, reading from left to right, this accesses the 5th row, 4th element in that row (<code>array2d[4]</code> is an array, which we are then subscripting with the <code>[3]</code> to access the fourth integer).</p>
<p>Higher-dimensional arrays can be declared in a similar manner.</p>
<p>A multidimensional array should not be confused with an array of references to arrays (also known as <a href="/wiki/Iliffe_vector" title="Iliffe vector">Iliffe vectors</a> or sometimes <i>array of arrays</i>). The former is always rectangular (all subarrays must be the same size), and occupies a contiguous region of memory. The latter is a one-dimensional array of pointers, each of which may point to the first element of a subarray in a different place in memory, and the sub-arrays do not have to be the same size. The latter can be created by multiple use of <code>malloc</code>.</p>
<p><a name="Strings" id="Strings"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=16" title="Edit section: Strings">edit</a>]</span> <span class="mw-headline">Strings</span></h3>
<p>In C, string literals (constants) are surrounded by double quotes (<code>"</code>), e.g. <code>"Hello world!"</code> and are compiled to an array of the specified <code>char</code> values with an additional <a href="/wiki/Null_terminating_character" title="Null terminating character" class="mw-redirect">null terminating character</a> (0-valued) code to mark the end of the string.</p>
<p>String literals may not contain embedded newlines; this proscription somewhat simplifies parsing of the language. To include a newline in a string, the <a href="#Backslash_escapes" title="">backslash escape</a> <code>\n</code> may be used, as below.</p>
<p>There are several standard library functions for operating with string data (not necessarily constant) organized as array of <code>char</code> using this null-terminated format; see <a href="#Library_functions" title="">below</a>.</p>
<p>C's string-literal syntax has been very influential, and has made its way into many other languages, such as C++, Perl, Python, PHP, Java, Javascript, C#, Ruby. Nowadays, almost all new languages adopt or build upon C-style string syntax; languages which lack this syntax tend to precede C.</p>
<p><a name="Backslash_escapes" id="Backslash_escapes"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=17" title="Edit section: Backslash escapes">edit</a>]</span> <span class="mw-headline">Backslash escapes</span></h4>
<p>If you wish to include a double quote inside the string, that can be done by escaping it with a backslash (<code>\</code>), for example, <code>"This string contains \"double quotes\"."</code>. To insert a literal backslash, one must double it, e.g. <code>"A backslash looks like this: \\"</code>.</p>
<p>Backslashes may be used to enter control characters, etc., into a string:</p>
<table>
<tr>
<th align="left">Escape</th>
<th align="left">Meaning</th>
</tr>
<tr>
<td><code>\\</code></td>
<td>Literal backslash</td>
</tr>
<tr>
<td><code>\"</code></td>
<td>Double quote</td>
</tr>
<tr>
<td><code>\'</code></td>
<td>Single quote</td>
</tr>
<tr>
<td><code>\n</code></td>
<td>Newline (line feed)</td>
</tr>
<tr>
<td><code>\r</code></td>
<td>Carriage return</td>
</tr>
<tr>
<td><code>\b</code></td>
<td>Backspace</td>
</tr>
<tr>
<td><code>\t</code></td>
<td>Horizontal tab</td>
</tr>
<tr>
<td><code>\f</code></td>
<td>Form feed</td>
</tr>
<tr>
<td><code>\a</code></td>
<td>Alert (bell)</td>
</tr>
<tr>
<td><code>\v</code></td>
<td>Vertical tab</td>
</tr>
<tr>
<td><code>\?</code></td>
<td>Question mark (used to escape <a href="/wiki/C_trigraph" title="C trigraph" class="mw-redirect">trigraphs</a>)</td>
</tr>
<tr>
<td><code>\</code><i>nnn</i></td>
<td>Character with octal value <i>nnn</i></td>
</tr>
<tr>
<td><code>\x</code><i>hh</i></td>
<td>Character with hexadecimal value <i>hh</i></td>
</tr>
</table>
<p>The use of other backslash escapes is not defined by the C standard, although compiler vendors often provide additional escape codes as language extensions.</p>
<p><a name="String_literal_concatenation" id="String_literal_concatenation"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=18" title="Edit section: String literal concatenation">edit</a>]</span> <span class="mw-headline">String literal concatenation</span></h4>
<p>Adjacent string literals are concatenated at compile time; this allows long strings to be split over multiple lines, and also allows string literals resulting from <a href="/wiki/C_preprocessor" title="C preprocessor">C preprocessor</a> defines and macros to be appended to strings at compile time:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
    <span class="kw3">printf</span><span class="br0">(</span>__FILE__ <span class="st0">": %d: Hello "</span>
           <span class="st0">"world<span class="es0">\n</span>"</span>, __LINE__<span class="br0">)</span>;
</pre></div>
<p>will expand to</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
    <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"helloworld.c"</span> <span class="st0">": %d: Hello "</span>
           <span class="st0">"world<span class="es0">\n</span>"</span>, <span class="nu0">10</span><span class="br0">)</span>;
</pre></div>
<p>which is syntactically equivalent to</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
    <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"helloworld.c: %d: Hello world<span class="es0">\n</span>"</span>, <span class="nu0">10</span><span class="br0">)</span>;
</pre></div>
<p><a name="Character_constants" id="Character_constants"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=19" title="Edit section: Character constants">edit</a>]</span> <span class="mw-headline">Character constants</span></h4>
<p>Individual character constants are represented by single-quotes, e.g. <code>'A'</code>, and have type <code>int</code> (not <code>char</code>). The difference is that <code>"A"</code> represents a pointer to the first element of a null-terminated array, whereas <code>'A'</code> directly represents the code value (65 if ASCII is used). The same backslash-escapes are supported as for strings, except that (of course) <code>"</code> can validly be used as a character without being escaped, whereas <code>'</code> must now be escaped. A character constant cannot be empty (i.e. <code>''</code> is invalid syntax), although a string may be (it still has the null terminating character). Multi-character constants (e.g. <code>'xy'</code>) are valid, although rarely useful — they let one store several characters in an integer (e.g. 4 ASCII characters can fit in a 32-bit integer, 8 in a 64-bit one). Since the order in which the characters are packed into one <code>int</code> is not specified, portable use of multi-character constants is difficult.</p>
<p><a name="Wide_character_strings" id="Wide_character_strings"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=20" title="Edit section: Wide character strings">edit</a>]</span> <span class="mw-headline">Wide character strings</span></h4>
<p>Since type <code>char</code> is usually 1 byte wide, a single <code>char</code> value typically can represent at most 255 distinct character codes, not nearly enough for all the characters in use worldwide. To provide better support for international characters, the first C standard (C89) introduced <a href="/wiki/Wide_character" title="Wide character">wide characters</a> (encoded in type <code>wchar_t</code>) and wide character strings, which are written as <code>L"Hello world!"</code></p>
<p>Wide characters are most commonly either 2 bytes (using a 2-byte encoding such as <a href="/wiki/UTF-16" title="UTF-16" class="mw-redirect">UTF-16</a>) or 4 bytes (usually <a href="/wiki/UTF-32" title="UTF-32" class="mw-redirect">UTF-32</a>), but Standard C does not specify the width for <code>wchar_t</code>, leaving the choice to the implementor. <a href="/wiki/Microsoft_Windows" title="Microsoft Windows">Microsoft Windows</a> generally uses UTF-16, thus the above string would be 26 bytes long for a Microsoft compiler; the <a href="/wiki/Unix" title="Unix">Unix</a> world prefers UTF-32, thus compilers such as GCC would generate a 52-byte string. A 2-byte wide <code>wchar_t</code> suffers the same limitation as <code>char</code>, in that certain characters (those outside the <a href="/wiki/Basic_Multilingual_Plane" title="Basic Multilingual Plane" class="mw-redirect">BMP</a>) cannot be represented in a single <code>wchar_t</code>; but must be represented using <a href="/wiki/Surrogate_pair" title="Surrogate pair" class="mw-redirect">surrogate pairs</a>.</p>
<p>The original C standard specified only minimal functions for operating with wide character strings; in 1995 the standard was modified to include much more extensive support, comparable to that for <code>char</code> strings. The relevant functions are mostly named after their <code>char</code> equivalents, with the addition of a "w" or the replacement of "str" with "wcs"; they are specified in <code>&lt;wchar.h&gt;</code>, with <code>&lt;wctype.h&gt;</code> containing wide-character classification and mapping functions.</p>
<p><a name="Variable_width_strings" id="Variable_width_strings"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=21" title="Edit section: Variable width strings">edit</a>]</span> <span class="mw-headline">Variable width strings</span></h4>
<p>A common alternative to <code>wchar_t</code> is to use a <a href="/wiki/Variable-width_encoding" title="Variable-width encoding">variable-width encoding</a>, whereby a logical character may extend over multiple positions of the string. Variable-width strings may be encoded into literals verbatim, at the risk of confusing the compiler, or using numerical backslash escapes (e.g. <code>"\xc3\xa9"</code> for "é" in UTF-8). The <a href="/wiki/UTF-8" title="UTF-8">UTF-8</a> encoding was specifically designed (under <a href="/wiki/Plan_9_from_Bell_Labs" title="Plan 9 from Bell Labs">Plan 9</a>) for compatibility with the standard library string functions; supporting features of the encoding include a lack of embedded nulls, no valid interpretations for subsequences, and trivial resynchronisation. Encodings lacking these features are likely to prove incompatible with the standard library functions; encoding-aware string functions are often used in such case.</p>
<p><a name="Library_functions" id="Library_functions"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=22" title="Edit section: Library functions">edit</a>]</span> <span class="mw-headline">Library functions</span></h4>
<p><a href="/wiki/String_(computer_science)" title="String (computer science)">strings</a>, both constant and variable, may be manipulated without using the <a href="/wiki/Standard_library" title="Standard library">standard library</a>. However, the library contains many useful functions for working with null-terminated strings. It is the programmer's responsibility to ensure that enough storage has been allocated to hold the resulting strings.</p>
<p>The most commonly used string functions are:</p>
<ul>
<li><code>strcat(dest, source)</code> - appends the string <code>source</code> to the end of string <code>dest</code></li>
<li><code>strchr(s, c)</code> - finds the first instance of character <code>c</code> in string <code>s</code> and returns a pointer to it or a null pointer if <code>c</code> is not found</li>
<li><code>strcmp(a, b)</code> - compares strings <code>a</code> and <code>b</code> (<a href="/wiki/Lexicographical_order" title="Lexicographical order">lexicographical ordering</a>); returns negative if <code>a</code> is less than <code>b</code>, 0 if equal, positive if greater.</li>
<li><code>strcpy(dest, source)</code> - copies the string <code>source</code> onto the string <code>dest</code></li>
<li><code>strlen(st)</code> - return the length of string <code>st</code></li>
<li><code>strncat(dest, source, n)</code> - appends a maximum of <code>n</code> characters from the string <code>source</code> to the end of string <code>dest</code> and null terminates the string at the end of input or at index <code>n+1</code> when the max length is reached</li>
<li><code>strncmp(a, b, n)</code> - compares a maximum of <code>n</code> characters from strings <code>a</code> and <code>b</code> (lexical ordering); returns negative if <code>a</code> is less than <code>b</code>, 0 if equal, positive if greater</li>
<li><code>strrchr(s, c)</code> - finds the last instance of character <code>c</code> in string <code>s</code> and returns a pointer to it or a null pointer if <code>c</code> is not found</li>
</ul>
<p>Other standard string functions include:</p>
<ul>
<li><code>strcoll(s1, s2)</code> - compare two strings according to a locale-specific collating sequence</li>
<li><code>strcspn(s1, s2)</code> - returns the index of the first character in <code>s1</code> that matches any character in <code>s2</code></li>
<li><code>strerror(errno)</code> - returns a string with an error message corresponding to the code in <code>errno</code></li>
<li><code>strncpy(dest, source, n)</code> - copies <code>n</code> characters from the string <code>source</code> onto the string <code>dest</code>, substituting null bytes once past the end of <code>source</code>; does not null terminate if max length is reached</li>
<li><code>strpbrk(s1, s2)</code> - returns a pointer to the first character in <code>s1</code> that matches any character in <code>s2</code> or a null pointer if not found</li>
<li><code>strspn(s1, s2)</code> - returns the index of the first character in <code>s1</code> that matches no character in <code>s2</code></li>
<li><code>strstr(st, subst)</code> - returns a pointer to the first occurrence of the string <code>subst</code> in <code>st</code> or a null pointer if no such substring exists</li>
<li><code>strtok(s1, s2)</code> - returns a pointer to a token within <code>s1</code> delimited by the characters in <code>s2</code></li>
<li><code>strxfrm(s1, s2, n)</code> - transforms <code>s2</code> onto <code>s1</code>, such that <code>s1</code> used with <code>strcmp</code> gives the same results as <code>s2</code> used with <code>strcoll</code></li>
</ul>
<p>There is a similar set of functions for handling wide character strings.</p>
<p><a name="Structures_and_unions" id="Structures_and_unions"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=23" title="Edit section: Structures and unions">edit</a>]</span> <span class="mw-headline">Structures and unions</span></h3>
<p><a name="Structures" id="Structures"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=24" title="Edit section: Structures">edit</a>]</span> <span class="mw-headline">Structures</span></h4>
<p>Structures in C are defined as data containers consisting of a sequence of named members of various types. They are similar to records in other programming languages. The members of a structure are stored in consecutive locations in memory, although the compiler is allowed to insert padding between or after members (but not before the first member) for efficiency. The size of a structure is equal to the sum of the sizes of its members, plus the size of the padding.</p>
<p><a name="Unions" id="Unions"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=25" title="Edit section: Unions">edit</a>]</span> <span class="mw-headline">Unions</span></h4>
<p>Unions in C are related to structures and are defined as objects that may hold (at different times) objects of different types and sizes. They are analogous to variant records in other programming languages. Unlike structures, the components of a union all refer to the same location in memory. In this way, a union can be used at various times to hold different types of objects, without the need to create a separate object for each new type. The size of a union is equal to the size of its largest component type.</p>
<p><a name="Declaration" id="Declaration"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=26" title="Edit section: Declaration">edit</a>]</span> <span class="mw-headline">Declaration</span></h4>
<p>Structures are declared with the <code>struct</code> keyword and unions are declared with the <code>union</code> keyword. The specifier keyword is followed by an optional identifier name, which is used to identify the form of the structure or union. The identifier is followed by the declaration of the structure or union's body: a list of member declarations, contained within curly braces, with each declaration terminated by a semicolon. Finally, the declaration concludes with an optional list of identifier names, which are declared as instances of the structure or union.</p>
<p>For example, the following statement declares a structure named <code>s</code> that contains three members; it will also declare an instance of the structure known as <code>t</code>:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">struct</span> s
<span class="br0">{</span>
    <span class="kw4">int</span>   x;
    <span class="kw4">float</span> y;
    <span class="kw4">char</span>  *z;
<span class="br0">}</span> t;
</pre></div>
<p>And the following statement will declare a similar union named <code>u</code> and an instance of it named <code>n</code>:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">union</span> u
<span class="br0">{</span>
    <span class="kw4">int</span>   x;
    <span class="kw4">float</span> y;
    <span class="kw4">char</span>  *z;
<span class="br0">}</span> n;
</pre></div>
<p>Once a structure or union body has been declared and given a name, it can be considered a new data type using the specifier <code>struct</code> or <code>union</code>, as appropriate, and the name. For example, the following statement, given the above structure declaration, declares a new instance of the structure <code>s</code> named <code>r</code>:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">struct</span> s r;
</pre></div>
<p>It is also common to use the <code>typedef</code> specifier to eliminate the need for the <code>struct</code> or <code>union</code> keyword in later references to the structure. The first identifier after the body of the structure is taken as the new name for the structure type. For example, the following statement will declare a new type known as <code>s_type</code> that will contain some structure:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">typedef</span> <span class="kw4">struct</span> <span class="br0">{</span>…<span class="br0">}</span> s_type;
</pre></div>
<p>Future statements can then use the specifier <code>s_type</code> (instead of the expanded <code>struct …</code> specifier) to refer to the structure.</p>
<p><a name="Accessing_members" id="Accessing_members"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=27" title="Edit section: Accessing members">edit</a>]</span> <span class="mw-headline">Accessing members</span></h4>
<p>Members are accessed using the name of the instance of a structure or union, a period (<code>.</code>), and the name of the member. For example, given the declaration of <code>t</code> from above, the member known as <code>y</code> (of type <code>float</code>) can be accessed using the following syntax:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
t.<span class="me1">y</span>
</pre></div>
<p>Structures are commonly accessed through pointers. Consider the following example that defines a pointer to <code>t</code>, known as <code>ptr_to_t</code>:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">struct</span> s *ptr_to_t = &amp;t;
</pre></div>
<p>Member <code>y</code> of <code>t</code> can then be accessed by dereferencing <code>ptr_to_t</code> and using the result as the left operand:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="br0">(</span>*ptr_to_t<span class="br0">)</span>.<span class="me1">y</span>
</pre></div>
<p>Which is identical to the simpler <code>t.y</code> above as long as <code>ptr_to_t</code> points to <code>t</code>. Because this operation is common, C provides an abbreviated syntax for accessing a member directly from a pointer. With this syntax, the name of the instance is replaced with the name of the pointer and the period is replaced with the character sequence <code>-&gt;</code>. Thus, the following method of accessing <code>y</code> is identical to the previous two:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
ptr_to_t-&gt;y
</pre></div>
<p>Members of unions are accessed in the same way.</p>
<p><a name="Initialization" id="Initialization"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=28" title="Edit section: Initialization">edit</a>]</span> <span class="mw-headline">Initialization</span></h4>
<p>A structure can be initialized in its declarations using an initializer list, similar to arrays. If a structure is not initialized, the values of its members are undefined until assigned. The components of the initializer list must agree, in type and number, with the components of the structure itself.</p>
<p>The following statement will initialize a new instance of the structure <code>s</code> from above known as <code>pi</code>:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">struct</span> s pi = <span class="br0">{</span> <span class="nu0">3</span>, <span class="nu0">3.1415</span>, <span class="st0">"Pi"</span> <span class="br0">}</span>;
</pre></div>
<p><a href="/wiki/C99" title="C99">C99</a> introduces a more flexible initialization syntax for structures, which allows members to be initialized by name. The following initialization using this syntax is equivalent to the previous one. Initialization using this syntax may initialize members in any order:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">struct</span> s pi = <span class="br0">{</span> .<span class="me1">x</span> = <span class="nu0">3</span>, .<span class="me1">y</span> = <span class="nu0">3.1415</span>, .<span class="me1">z</span> = <span class="st0">"Pi"</span> <span class="br0">}</span>;
</pre></div>
<p>In <a href="/wiki/C89_(C_version)" title="C89 (C version)" class="mw-redirect">C89</a>, a union can only be initialized with a value of the type of its first member. That is, the union <code>u</code> from above can only be initialized with a value of type <code>int</code>.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">union</span> u value = <span class="br0">{</span> <span class="nu0">3</span> <span class="br0">}</span>;
</pre></div>
<p>In C99, any one member of a union may be initialized using the new syntax described above.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">union</span> u value = <span class="br0">{</span> .<span class="me1">y</span> = <span class="nu0">3.1415</span> <span class="br0">}</span>; <span class="co1">// C99</span>
</pre></div>
<p><a name="Assignment" id="Assignment"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=29" title="Edit section: Assignment">edit</a>]</span> <span class="mw-headline">Assignment</span></h4>
<p>Assigning values to individual members of structures and unions is syntactically identical to assigning values to any other object. The only difference is that the <i>lvalue</i> of the assignment is the name of the member, as accessed by the syntax mentioned above.</p>
<p>A structure can also be assigned as a unit to another structure of the same type. Structures (and pointers to structures) may also be used as function parameter and return types.</p>
<p>For example, the following statement assigns the value of <code>74</code> (the ASCII code point for the letter 't') to the member named <code>x</code> in the structure <code>t</code>, from above:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
t.<span class="me1">x</span> = <span class="nu0">74</span>;
</pre></div>
<p>And the same assignment, using <code>ptr_to_t</code> in place of <code>t</code>, would look like:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
ptr_to_t-&gt;x = <span class="nu0">74</span>;
</pre></div>
<p>Assignment with members of unions is identical, except that each new assignment changes the current type of the union, and the previous type and value are lost.</p>
<p><a name="Other_operations" id="Other_operations"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=30" title="Edit section: Other operations">edit</a>]</span> <span class="mw-headline">Other operations</span></h4>
<p>According to the C standard, the only legal operations that can be performed on a structure are copying it, assigning to it as a unit (or initializing it), taking its address with the address-of (<code>&amp;</code>) unary operator, and accessing its members. Unions have the same restrictions. One of the operations implicitly forbidden is comparison: structures and unions cannot be compared using C's standard comparison facilities (<code>==</code>, <code>&gt;</code>, <code>&lt;</code>, etc.).</p>
<p><a name="Bit_fields" id="Bit_fields"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=31" title="Edit section: Bit fields">edit</a>]</span> <span class="mw-headline">Bit fields</span></h4>
<p>C also provides a special type of structure member known as a <a href="/wiki/Bit_field" title="Bit field">bit field</a>, which is an integer with an explicitly specified number of bits. A bit field is declared as a structure member of type <code>int</code>, <code>signed int</code>, <code>unsigned int</code>, or (in C99 only) <code>_Bool</code>, following the member name by a colon (<code>:</code>) and the number of bits it should occupy. The total number of bits in a single bit field must not exceed the total number of bits in its declared type.</p>
<p>As a special exception to the usual C syntax rules, it is implementation-defined whether a bit field declared as type <code>int</code>, without specifying <code>signed</code> or <code>unsigned</code>, is signed or unsigned. Thus, it is recommended to explicitly specify <code>signed</code> or <code>unsigned</code> on all structure members for portability.</p>
<p>Empty entries consisting of just a colon followed by a number of bits are also allowed; these indicate padding.</p>
<p>The members of bit fields do not have addresses, and as such cannot be used with the address-of (<code>&amp;</code>) unary operator. The <code>sizeof</code> operator may not be applied to bit fields.</p>
<p>The following declaration declares a new structure type known as <code>f</code> and an instance of it known as <code>g</code>. Comments provide a description of each of the members:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">struct</span> f
<span class="br0">{</span>
    <span class="kw4">unsigned</span> <span class="kw4">int</span>  flag : <span class="nu0">1</span>;  <span class="coMULTI">/* a bit flag: can either be on (1) or off (0) */</span>
    <span class="kw4">signed</span> <span class="kw4">int</span>    num  : <span class="nu0">4</span>;  <span class="coMULTI">/* a signed 4-bit field; range -7...7 or -8...7 */</span>
    : <span class="nu0">3</span>;                     <span class="coMULTI">/* 3 bits of padding to round out 8 bits */</span>
<span class="br0">}</span> g;
</pre></div>
<p><a name="Incomplete_types" id="Incomplete_types"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=32" title="Edit section: Incomplete types">edit</a>]</span> <span class="mw-headline">Incomplete types</span></h4>
<p>The body of a <code>struct</code> or <code>union</code> declaration, or a <code>typedef</code> thereof, may be omitted, yielding an <i>incomplete type</i>. Such a type may not be instantiated (its size is not known), nor may its members be accessed (they, too, are unknown); however, the derived pointer type may be used (but not dereferenced).</p>
<p>Incomplete types are used to implement <a href="/wiki/Recursive" title="Recursive">recursive</a> structures; the body of the type declaration may be deferred to later in the translation unit:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">typedef</span> <span class="kw4">struct</span> Bert Bert;
<span class="kw4">typedef</span> <span class="kw4">struct</span> Wilma Wilma;
 
<span class="kw4">struct</span> Bert
<span class="br0">{</span>
    Wilma *wilma;
<span class="br0">}</span>;
 
<span class="kw4">struct</span> Wilma
<span class="br0">{</span>
    Bert *bert;
<span class="br0">}</span>;
</pre></div>
<p>Incomplete types are also used for <a href="/wiki/Data_hiding" title="Data hiding" class="mw-redirect">data hiding</a>; the incomplete type is defined in a <a href="/wiki/Header_file" title="Header file">header file</a>, and the body only within the relevant source file.</p>
<p><a name="Operators" id="Operators"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=33" title="Edit section: Operators">edit</a>]</span> <span class="mw-headline">Operators</span></h2>
<div class="rellink noprint relarticle mainarticle">Main article: <a href="/wiki/Operators_in_C_and_C%2B%2B" title="Operators in C and C++">Operators in C and C++</a></div>
<p><a name="Control_structures" id="Control_structures"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=34" title="Edit section: Control structures">edit</a>]</span> <span class="mw-headline">Control structures</span></h2>
<p>C is a <a href="/wiki/Free-form_language" title="Free-form language">free-form language</a>.</p>
<p><a href="/wiki/Bracing_style" title="Bracing style" class="mw-redirect">Bracing style</a> varies from <a href="/wiki/Computer_programming" title="Computer programming">programmer</a> to programmer and can be the subject of debate. See <a href="/wiki/Indent_style" title="Indent style">Indent style</a> for more details.</p>
<p><a name="Compound_statements" id="Compound_statements"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=35" title="Edit section: Compound statements">edit</a>]</span> <span class="mw-headline">Compound statements</span></h3>
<p>In the items in this section, any &lt;statement&gt; can be replaced with a <b>compound statement</b>. In C89, compound statements in C have the form:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="br0">{</span>
    &lt;optional-declaration-list&gt;
    &lt;optional-statement-list&gt;
<span class="br0">}</span>
</pre></div>
<p>and are used as the body of a function or anywhere that a single statement is expected. The declaration-list declares variables to be used in that <a href="/wiki/Scope_(programming)" title="Scope (programming)">scope</a>, and the statement-list are the actions to be performed. Brackets define their own scope, and variables defined inside those brackets will be automatically deallocated at the closing bracket. C99 extends this syntax to allow declarations and statements to be freely intermixed within a compound statement (as does <a href="/wiki/C%2B%2B" title="C++">C++</a>).</p>
<p><a name="Selection_statements" id="Selection_statements"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=36" title="Edit section: Selection statements">edit</a>]</span> <span class="mw-headline">Selection statements</span></h3>
<p>C has two types of <a href="/w/index.php?title=Selection_statement&amp;action=edit&amp;redlink=1" class="new" title="Selection statement (page does not exist)">selection statements</a>: the <code>if</code> statement and the <code>switch</code> statement.</p>
<p>The <code>if</code> statement is in the form:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw1">if</span> <span class="br0">(</span>&lt;expression&gt;<span class="br0">)</span>
    &lt;statement1&gt;
<span class="kw1">else</span>
    &lt;statement2&gt;
</pre></div>
<p>In the <code>if</code> statement, if the &lt;expression&gt; in parentheses is nonzero (true), control passes to &lt;statement1&gt;. If the <code>else</code> clause is present and the &lt;expression&gt; is zero (false), control will pass to &lt;statement2&gt;. The "else &lt;statement2&gt; part is optional, and if absent, a false &lt;expression&gt; will simply result in skipping over the &lt;statement1&gt;. An <code>else</code> always matches the nearest previous unmatched <code>if</code>; braces may be used to override this when necessary, or for clarity.</p>
<p>The <code>switch</code> statement causes control to be transferred to one of several statements depending on the value of an <a href="/wiki/Expression_(mathematics)" title="Expression (mathematics)">expression</a>, which must have <a href="/wiki/Integral_type" title="Integral type" class="mw-redirect">integral type</a>. The substatement controlled by a switch is typically compound. Any statement within the substatement may be labeled with one or more <code>case</code> labels, which consist of the keyword <code>case</code> followed by a constant expression and then a colon (:). The syntax is as follows:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw1">switch</span> <span class="br0">(</span>&lt;expression&gt;<span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw1">case</span> &lt;label1&gt; :
        &lt;statements <span class="nu0">1</span>&gt;
    <span class="kw1">case</span> &lt;label2&gt; :
        &lt;statements <span class="nu0">2</span>&gt;
        <span class="kw2">break</span>;
    <span class="kw1">default</span> :
        &lt;statements <span class="nu0">3</span>&gt;
<span class="br0">}</span>
</pre></div>
<p>No two of the case constants associated with the same switch may have the same value. There may be at most one <code>default</code> label associated with a switch - if none of the case labels are equal to the expression in the parentheses following <code>switch</code>, control passes to the <code>default</code> label, or if there is no <code>default</code> label, execution resumes just beyond the entire construct. Switches may be nested; a <code>case</code> or <code>default</code> label is associated with the innermost switch that contains it. Switch statements can "fall through", that is, when one case section has completed its execution, statements will continue to be executed downward until a <code>break;</code> statement is encountered. Fall-through is useful in some circumstances, but is usually not desired. In the preceding example, if &lt;label2&gt; is reached, the statements &lt;statements 2&gt; are executed and nothing more inside the braces. However if &lt;label1&gt; is reached, both &lt;statements 1&gt; and &lt;statements 2&gt; are executed since there is no <code>break</code> to separate the two case statements.</p>
<p><a name="Iteration_statements" id="Iteration_statements"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=37" title="Edit section: Iteration statements">edit</a>]</span> <span class="mw-headline">Iteration statements</span></h3>
<p>C has three forms of <a href="/w/index.php?title=Iteration_statement&amp;action=edit&amp;redlink=1" class="new" title="Iteration statement (page does not exist)">iteration statement</a>:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw1">do</span>
    &lt;statement&gt;
<span class="kw1">while</span> <span class="br0">(</span> &lt;expression&gt; <span class="br0">)</span> ;
 
<span class="kw1">while</span> <span class="br0">(</span> &lt;expression&gt; <span class="br0">)</span>
    &lt;statement&gt;
 
<span class="kw1">for</span> <span class="br0">(</span> &lt;expression&gt; ; &lt;expression&gt; ; &lt;expression&gt; <span class="br0">)</span>
    &lt;statement&gt;
</pre></div>
<p>In the <code><a href="/wiki/While_loop" title="While loop">while</a></code> and <code>do</code> statements, the substatement is executed repeatedly so long as the value of the expression remains nonzero (true). With <code>while</code>, the test, including all side effects from the expression, occurs before each <a href="/wiki/Execution_(computers)" title="Execution (computers)" class="mw-redirect">execution</a> of the statement; with <code>do</code>, the test follows each <a href="/wiki/Iteration" title="Iteration">iteration</a>. Thus, a <code>do</code> statement always executes its substatement at least once, whereas <code>while</code> may not execute the substatement at all.</p>
<p>If all three expressions are present in a <code>for</code>, the statement</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw1">for</span> <span class="br0">(</span>e1; e2; e3<span class="br0">)</span>
    s;
</pre></div>
<p>is equivalent to</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
e1;
<span class="kw1">while</span> <span class="br0">(</span>e2<span class="br0">)</span>
<span class="br0">{</span>
    s;
    e3;
<span class="br0">}</span>
</pre></div>
<p>except for the behavior of a <code>continue;</code> statement (which in the for loop jumps to <code>e3</code> instead of <code>e2</code>).</p>
<p>Any of the three expressions in the <code>for</code> loop may be omitted. A missing second expression makes the <code>while</code> test always nonzero, creating a potentially infinite loop.</p>
<p>C99 generalizes the <code>for</code> loop by allowing the first expression to take the form of a declaration (typically including an initializer). The declaration's scope is limited to the extent of the <code>for</code> loop.</p>
<p><a name="Jump_statements" id="Jump_statements"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=38" title="Edit section: Jump statements">edit</a>]</span> <span class="mw-headline">Jump statements</span></h3>
<p>Jump statements transfer control unconditionally. There are four types of <a href="/wiki/Branch_(computer_science)" title="Branch (computer science)">jump statements</a> in C: <code><a href="/wiki/GOTO" title="GOTO" class="mw-redirect">goto</a></code>, <code>continue</code>, <code>break</code>, and <code><a href="/wiki/Return_statement" title="Return statement">return</a></code>.</p>
<p>The <code>goto</code> statement looks like this:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw1">goto</span> &lt;identifier&gt; ;
</pre></div>
<p>The <a href="/wiki/Identifier" title="Identifier">identifier</a> must be a <a href="/wiki/Label_(programming_language)" title="Label (programming language)">label</a> (followed by a colon) located in the current function. Control transfers to the labeled statement.</p>
<p>A <code>continue</code> statement may appear only within an <a href="/w/index.php?title=Iteration_statement&amp;action=edit&amp;redlink=1" class="new" title="Iteration statement (page does not exist)">iteration statement</a> and causes control to pass to the loop-continuation portion of the innermost enclosing iteration statement. That is, within each of the statements</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw1">while</span> <span class="br0">(</span>expression<span class="br0">)</span>
<span class="br0">{</span>
    <span class="coMULTI">/* ... */</span>
    cont: ;
<span class="br0">}</span>
 
<span class="kw1">do</span>
<span class="br0">{</span>
    <span class="coMULTI">/* ... */</span>
    cont: ;
<span class="br0">}</span> <span class="kw1">while</span> <span class="br0">(</span>expression<span class="br0">)</span>;
 
<span class="kw1">for</span> <span class="br0">(</span>expr1; expr2; expr3<span class="br0">)</span> <span class="br0">{</span>
     <span class="coMULTI">/* ... */</span>
     cont: ;
<span class="br0">}</span>
</pre></div>
<p>a <code>continue</code> not contained within a nested iteration statement is the same as <code>goto cont</code>.</p>
<p>The <code>break</code> statement is used to end a <code>for</code> loop, <code>while</code> loop, <code>do</code> loop, or <code>switch</code> statement. Control passes to the statement following the terminated statement.</p>
<p>A function returns to its caller by the <code>return</code> statement. When <code>return</code> is followed by an expression, the value is returned to the caller as the value of the function. Encountering the end of the function is equivalent to a <code>return</code> with no expression. In that case, if the function is declared as returning a value and the caller tries to use the returned value, the result is undefined.</p>
<p><a name="Storing_the_address_of_a_label" id="Storing_the_address_of_a_label"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=39" title="Edit section: Storing the address of a label">edit</a>]</span> <span class="mw-headline">Storing the address of a label</span></h4>
<p><a href="/wiki/GNU_Compiler_Collection" title="GNU Compiler Collection">GCC</a> extends the C language with a unary <code>&amp;&amp;</code> operator that returns the address of a label. This address can be stored in a void* variable type and may be used later in a goto instruction. For example, the following prints "hi " in an infinite loop:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
    <span class="kw4">void</span> *ptr = &amp;&amp;J1;
 
J1: <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"hi "</span><span class="br0">)</span>;
    <span class="kw1">goto</span> *ptr;
</pre></div>
<p>This feature can be used to implement a <a href="/wiki/Jump_table" title="Jump table" class="mw-redirect">jump table</a>.</p>
<p><a name="Functions" id="Functions"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=40" title="Edit section: Functions">edit</a>]</span> <span class="mw-headline">Functions</span></h2>
<p><a name="Syntax" id="Syntax"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=41" title="Edit section: Syntax">edit</a>]</span> <span class="mw-headline">Syntax</span></h3>
<p>A C function definition consists of a <a href="/wiki/Return_type" title="Return type">return type</a> (<code>void</code> if no value is returned), a unique name, a list of parameters in parentheses (<code>void</code> if there are none), and various statements. A function with non-<code>void</code> return type should include at least one <code>return</code> statement:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
&lt;return-type&gt; functionName<span class="br0">(</span> &lt;parameter-list&gt; <span class="br0">)</span>
<span class="br0">{</span>
    &lt;statements&gt;
    <span class="kw1">return</span> &lt;expression of type return-type&gt;;
<span class="br0">}</span>
</pre></div>
<p>where <code>&lt;parameter-list&gt;</code> of <code>n</code> variables is declared as data type and variable name separated by a comma:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
    &lt;data-type&gt; var1, &lt;data-type&gt; var2, ... &lt;data-type&gt; varN
</pre></div>
<p>It is possible to define a function as taking a variable number of parameters by providing the <code>...</code> keyword as the last parameter instead of a data type and variable name. A commonly used function that does this is the standard library function <code>printf</code>, which has the declaration:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">int</span> <span class="kw3">printf</span> <span class="br0">(</span><span class="kw4">const</span> <span class="kw4">char</span>*, ...<span class="br0">)</span>;
</pre></div>
<p>Manipulation of these parameters can be done by using the routines in the standard library header <code><a href="/wiki/Stdarg.h" title="Stdarg.h">&lt;stdarg.h&gt;</a></code>.</p>
<p><a name="Function_Pointers" id="Function_Pointers"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=42" title="Edit section: Function Pointers">edit</a>]</span> <span class="mw-headline">Function Pointers</span></h4>
<p>A pointer to a function can be declared as follows:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
&lt;return-type&gt; <span class="br0">(</span>*functionName<span class="br0">)</span><span class="br0">(</span>&lt;parameter-list&gt;<span class="br0">)</span>;
</pre></div>
<p>The following program shows use of a function pointer for selecting between addition and subtraction:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="co2">#include &lt;stdio.h&gt;</span>
 
<span class="kw4">int</span> <span class="br0">(</span>*operation<span class="br0">)</span><span class="br0">(</span><span class="kw4">int</span> x, <span class="kw4">int</span> y<span class="br0">)</span>;
 
<span class="kw4">int</span> add<span class="br0">(</span><span class="kw4">int</span> x, <span class="kw4">int</span> y<span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw1">return</span> x + y;
<span class="br0">}</span>
 
<span class="kw4">int</span> subtract<span class="br0">(</span><span class="kw4">int</span> x, <span class="kw4">int</span> y<span class="br0">)</span> 
<span class="br0">{</span>
    <span class="kw1">return</span> x - y;
<span class="br0">}</span>
 
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">int</span> argc, <span class="kw4">char</span>* args<span class="br0">[</span><span class="br0">]</span><span class="br0">)</span>
<span class="br0">{</span>
   <span class="kw4">int</span>  foo = <span class="nu0">1</span>, bar = <span class="nu0">1</span>;
 
   operation = add;
   <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"%d + %d = %d<span class="es0">\n</span>"</span>, foo, bar, operation<span class="br0">(</span>foo, bar<span class="br0">)</span><span class="br0">)</span>;
   operation = subtract;
   <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"%d - %d = %d<span class="es0">\n</span>"</span>, foo, bar, operation<span class="br0">(</span>foo, bar<span class="br0">)</span><span class="br0">)</span>;
   <span class="kw1">return</span> <span class="nu0">0</span>;
<span class="br0">}</span>
</pre></div>
<p><a name="Global_structure" id="Global_structure"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=43" title="Edit section: Global structure">edit</a>]</span> <span class="mw-headline">Global structure</span></h3>
<p>After preprocessing, at the highest level a <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a> <a href="/wiki/Computer_program" title="Computer program">program</a> consists of a sequence of declarations at file scope. These may be partitioned into several separate source files, which may be compiled separately; the resulting object modules are then <a href="/wiki/Linker" title="Linker">linked</a> along with implementation-provided run-time support modules to produce an executable image.</p>
<p>The declarations introduce <a href="/wiki/Function_(programming)" title="Function (programming)" class="mw-redirect">functions</a>, <a href="/wiki/Variable_(programming)" title="Variable (programming)">variables</a> and <a href="/wiki/Type" title="Type">types</a>. C functions are akin to the subroutines of <a href="/wiki/Fortran_programming_language" title="Fortran programming language" class="mw-redirect">Fortran</a> or the procedures of <a href="/wiki/Pascal_programming_language" title="Pascal programming language" class="mw-redirect">Pascal</a>.</p>
<p>A definition is a special type of declaration. A variable definition sets aside storage and possibly initializes it, a function definition provides its body.</p>
<p>An implementation of C providing all of the standard library functions is called a <i>hosted implementation</i>. Programs written for hosted implementations are required to define a special function called <code><a href="/wiki/Main_function_(programming)" title="Main function (programming)">main</a></code>, which is the first function called when execution of the program begins.</p>
<p>Hosted implementations of C start program execution by invoking the <code>main</code> function, which must be defined in a fashion compatible with one of the following prototypes:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">int</span> argc, <span class="kw4">char</span> *argv<span class="br0">[</span><span class="br0">]</span><span class="br0">)</span>
</pre></div>
<p>In particular, the function <code>main</code> must be declared as having an <code>int</code> <a href="/wiki/Return_type" title="Return type">return type</a> according to the <a href="/wiki/C_Standard" title="C Standard" class="mw-redirect">C Standard</a>. The C standard defines return values 0 and <code>EXIT_SUCCESS</code> as indicating success and <code>EXIT_FAILURE</code> as indicating failure. (<code>EXIT_SUCCESS</code> and <code>EXIT_FAILURE</code> are defined in <a href="/wiki/Stdlib.h" title="Stdlib.h"><code>&lt;stdlib.h&gt;</code></a>). Other return values have implementation defined meanings; for example, under <a href="/wiki/Linux" title="Linux">Linux</a> a program killed by a <a href="/wiki/Signal" title="Signal">signal</a> yields a return code of the numerical value of the signal plus 128.</p>
<p>Here is a minimal C program:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw1">return</span> <span class="nu0">0</span>;
<span class="br0">}</span>
</pre></div>
<p>The <code>main</code> function will usually call other functions to help it perform its job.</p>
<p>Some implementations are not hosted, usually because they are not intended to be used with an <a href="/wiki/Operating_system" title="Operating system">operating system</a>. Such implementations are called <i>free-standing</i> in the C standard. A free-standing implementation is free to specify how it handles program startup; in particular it need not require a program to define a <code>main</code> function.</p>
<p>Functions may be written by the programmer or provided by existing libraries. Interfaces for the latter are usually declared by including header files—with the <code>#include</code> <a href="/wiki/Preprocessing_directive" title="Preprocessing directive" class="mw-redirect">preprocessing directive</a>—and the library objects are linked into the final executable image. Certain library functions, such as <code><a href="/wiki/Printf" title="Printf">printf</a></code>, are defined by the C standard; these are referred to as the <a href="/wiki/ISO_C_standard_library" title="ISO C standard library" class="mw-redirect">standard library</a> functions.</p>
<p>A function may return a value to the environment that called it. This is usually another C function; however, the calling environment of the <code>main</code> function is the parent process in <a href="/wiki/Unix-like" title="Unix-like">Unix-like</a> systems or the <a href="/wiki/Operating_system" title="Operating system">operating system</a> itself in other cases. By definition, the return value zero (or the value of the <code>EXIT_SUCCESS</code> macro) from <code>main</code> signifies successful completion of the program. (There is also an <code>EXIT_FAILURE</code> macro to signify failure.) The <code>printf</code> function mentioned above returns how many characters were printed, but this value is often ignored.</p>
<p><a name="Argument_passing" id="Argument_passing"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=44" title="Edit section: Argument passing">edit</a>]</span> <span class="mw-headline">Argument passing</span></h3>
<p>In C, arguments are passed to functions <b>by value</b> while other languages may pass variables <b>by reference</b>. This means that the receiving function gets copies of the values and has no direct way of altering the original variables. For a function to alter a variable passed from another function, the caller must pass its <i>address</i> (a <i>pointer</i> to it), which can then be dereferenced in the receiving function (see <a href="/wiki/C_syntax#Pointers" title="C syntax">Pointers</a> for more info):</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">void</span> incInt<span class="br0">(</span><span class="kw4">int</span> *y<span class="br0">)</span>
<span class="br0">{</span>
    <span class="br0">(</span>*y<span class="br0">)</span>++;  <span class="co1">// Increase the value of 'x', in main, by one</span>
<span class="br0">}</span>
 
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw4">int</span> x = <span class="nu0">0</span>;
    incInt<span class="br0">(</span>&amp;x<span class="br0">)</span>;  <span class="co1">// pass a reference to the var 'x'</span>
    <span class="kw1">return</span> <span class="nu0">0</span>;
<span class="br0">}</span>
</pre></div>
<p>The function <a href="/wiki/Scanf" title="Scanf">scanf</a> works the same way:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">int</span>  x;
scanf<span class="br0">(</span><span class="st0">"%d"</span>, &amp;x<span class="br0">)</span>;
</pre></div>
<p>In order to pass an editable pointer to a function you have to pass a pointer to <i>that</i> pointer; its address:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="co2">#include &lt;stdio.h&gt;</span>
<span class="co2">#include &lt;stdlib.h&gt;</span>
 
<span class="kw4">void</span> setInt<span class="br0">(</span><span class="kw4">int</span> **p, <span class="kw4">int</span> n<span class="br0">)</span>
<span class="br0">{</span>
    *p = malloc<span class="br0">(</span><span class="kw4">sizeof</span><span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span><span class="br0">)</span>;    <span class="co1">// allocate a memory area, saving the pointer in the</span>
                                 <span class="co1">// location pointed to by the parameter "p"</span>
    <span class="kw1">if</span> <span class="br0">(</span>*p == <span class="kw2">NULL</span><span class="br0">)</span>
    <span class="br0">{</span>
        perror<span class="br0">(</span><span class="st0">"malloc"</span><span class="br0">)</span>;
        exit<span class="br0">(</span>EXIT_FAILURE<span class="br0">)</span>;
    <span class="br0">}</span>
 
    <span class="co1">// dereference the given pointer that has been assigned an address</span>
    <span class="co1">// of dynamically allocated memory and set the int to the value of n (42)    </span>
    **p = n;                             
<span class="br0">}</span>
 
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw4">int</span>  *p;           <span class="co1">// create a pointer to an integer</span>
    setInt<span class="br0">(</span>&amp;p, <span class="nu0">42</span><span class="br0">)</span>;    <span class="co1">// pass the address of 'p'</span>
    free<span class="br0">(</span>p<span class="br0">)</span>;
    <span class="kw1">return</span> <span class="nu0">0</span>;
<span class="br0">}</span>
</pre></div>
<p><code>int **p</code> defines a pointer to a pointer, which is the address to the pointer <code>p</code> in this case.</p>
<p><a name="Array_parameters" id="Array_parameters"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=45" title="Edit section: Array parameters">edit</a>]</span> <span class="mw-headline">Array parameters</span></h4>
<p>Function parameters of array type may at first glance appear to be an exception to C's pass-by-value rule. The following program will print 2, not 1:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="co2">#include &lt;stdio.h&gt;</span>
 
<span class="kw4">void</span> setArray<span class="br0">(</span><span class="kw4">int</span> array<span class="br0">[</span><span class="br0">]</span>, <span class="kw4">int</span> index, <span class="kw4">int</span> value<span class="br0">)</span>
<span class="br0">{</span>
    array<span class="br0">[</span>index<span class="br0">]</span> = value;
<span class="br0">}</span>
 
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw4">int</span>  a<span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span> = <span class="br0">{</span><span class="nu0">1</span><span class="br0">}</span>;
    setArray<span class="br0">(</span>a, <span class="nu0">0</span>, <span class="nu0">2</span><span class="br0">)</span>;
    <span class="kw3">printf</span> <span class="br0">(</span><span class="st0">"a[0]=%d<span class="es0">\n</span>"</span>, a<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span><span class="br0">)</span>;
    <span class="kw1">return</span> <span class="nu0">0</span>;
<span class="br0">}</span>
</pre></div>
<p>However, there is a different reason for this behavior. In fact, a function parameter declared with an array type is treated almost exactly like one declared to be a pointer. That is, the preceding declaration of <code>setArray</code> is equivalent to the following:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="kw4">void</span> setArray<span class="br0">(</span><span class="kw4">int</span> *array, <span class="kw4">int</span> index, <span class="kw4">int</span> value<span class="br0">)</span>
</pre></div>
<p>At the same time, C rules for the use of arrays in expressions cause the value of <code>a</code> in the call to <code>setArray</code> to be converted to a pointer to the first element of array <code>a</code>. Thus, in fact this is still an example of pass-by-value, with the caveat that it is the address of the first element of the array being passed by value, not the contents of the array.</p>
<p><a name="Miscellaneous" id="Miscellaneous"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=46" title="Edit section: Miscellaneous">edit</a>]</span> <span class="mw-headline">Miscellaneous</span></h2>
<p><a name="Reserved_keywords" id="Reserved_keywords"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=47" title="Edit section: Reserved keywords">edit</a>]</span> <span class="mw-headline">Reserved keywords</span></h3>
<p>The following words are reserved, and may not be used as identifiers:</p>
<table cellspacing="0" cellpadding="0" class="multicol" style="background:transparent; width:100%;">
<tr>
<td width="20%" align="left" valign="top">
<dl>
<dd><tt>auto</tt></dd>
<dd><tt>_Bool</tt></dd>
<dd><tt>break</tt></dd>
<dd><tt>case</tt></dd>
<dd><tt>char</tt></dd>
<dd><tt>_Complex</tt></dd>
<dd><tt>const</tt></dd>
<dd><tt>continue</tt></dd>
<dd><tt>default</tt></dd>
<dd><tt>do</tt></dd>
</dl>
</td>
<td width="20%" align="left" valign="top">
<dl>
<dd><tt>double</tt></dd>
<dd><tt>else</tt></dd>
<dd><tt>enum</tt></dd>
<dd><tt>extern</tt></dd>
<dd><tt>float</tt></dd>
<dd><tt>for</tt></dd>
<dd><tt>goto</tt></dd>
<dd><tt>if</tt></dd>
<dd><tt>_Imaginary</tt></dd>
<dd><tt>inline</tt></dd>
</dl>
</td>
<td width="20%" align="left" valign="top">
<dl>
<dd><tt>int</tt></dd>
<dd><tt>long</tt></dd>
<dd><tt>register</tt></dd>
<dd><tt>restrict</tt></dd>
<dd><tt>return</tt></dd>
<dd><tt>short</tt></dd>
<dd><tt>signed</tt></dd>
<dd><tt>sizeof</tt></dd>
<dd><tt>static</tt></dd>
<dd><tt>struct</tt></dd>
</dl>
</td>
<td align="left" valign="top">
<dl>
<dd><tt>switch</tt></dd>
<dd><tt>typedef</tt></dd>
<dd><tt>union</tt></dd>
<dd><tt>unsigned</tt></dd>
<dd><tt>void</tt></dd>
<dd><tt>volatile</tt></dd>
<dd><tt>while</tt></dd>
</dl>
</td>
</tr>
</table>
<p>Implementations may reserve other keywords, such as <tt>asm</tt>, although implementations typically provide non-standard keywords that begin with one or two underscores.</p>
<p><a name="Case_sensitivity" id="Case_sensitivity"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=48" title="Edit section: Case sensitivity">edit</a>]</span> <span class="mw-headline">Case sensitivity</span></h3>
<p>C identifiers are case sensitive (e.g., <code>foo</code>, <code>FOO</code>, and <code>Foo</code> are the names of different objects). Some linkers may map external identifiers to a single case, although this is uncommon in most modern linkers.</p>
<p><a name="Comments" id="Comments"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=49" title="Edit section: Comments">edit</a>]</span> <span class="mw-headline">Comments</span></h3>
<p>Text starting with <code>/*</code> is treated as a <a href="/wiki/Comment_(computer_programming)" title="Comment (computer programming)">comment</a> and ignored. The comment ends at the next <code>*/</code>; it can occur within expressions, and can span multiple lines. Accidental omission of the comment terminator is problematic in that the next comment's properly constructed comment terminator will be used to terminate the initial comment, and all code in between the comments will be considered as a comment. C-style comments do not "nest".</p>
<p>The <a href="/wiki/C99" title="C99">C99</a> standard introduced <a href="/wiki/C%2B%2B" title="C++">C++</a> style line comments. These start with <code>//</code> and extend to the end of the line.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="co1">// this line will be ignored by the compiler (C99)</span>
 
<span class="coMULTI">/* these lines
   will be ignored
   by the compiler */</span>
 
x = *p<span class="coMULTI">/*q;  /* note: this comment starts after the 'p' */</span>
</pre></div>
<p><a name="Command-line_arguments" id="Command-line_arguments"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=50" title="Edit section: Command-line arguments">edit</a>]</span> <span class="mw-headline">Command-line arguments</span></h3>
<p>The <a href="/wiki/Parameter" title="Parameter">parameters</a> given on a <a href="/wiki/Command_line" title="Command line" class="mw-redirect">command line</a> are passed to a C program with two predefined variables - the count of the command-line arguments in <code>argc</code> and the individual <a href="/wiki/Parameter" title="Parameter">arguments</a> as <a href="/wiki/Character_string" title="Character string" class="mw-redirect">character strings</a> in the pointer array <code>argv</code>. So the command</p>
<pre>
 myFilt p1 p2 p3
</pre>
<p>results in something like</p>
<table class="wikitable">
<tr>
<td><code>m</code></td>
<td><code>y</code></td>
<td><code>F</code></td>
<td><code>i</code></td>
<td><code>l</code></td>
<td><code>t</code></td>
<td style="background:#CCC;"><code>\0</code></td>
<td><code>p</code></td>
<td><code>1</code></td>
<td style="background:#CCC;"><code>\0</code></td>
<td><code>p</code></td>
<td><code>2</code></td>
<td style="background:#CCC;"><code>\0</code></td>
<td><code>p</code></td>
<td><code>3</code></td>
<td style="background:#CCC;"><code>\0</code></td>
</tr>
<tr>
<td colspan="7" align="center"><code>argv[0]</code></td>
<td colspan="3" align="center"><code>argv[1]</code></td>
<td colspan="3" align="center"><code>argv[2]</code></td>
<td colspan="3" align="center"><code>argv[3]</code></td>
</tr>
</table>
<p>(Note: While individual strings are contiguous arrays of <code>char</code>, there is no <a href="/wiki/Guarantee" title="Guarantee" class="mw-redirect">guarantee</a> that the <a href="/wiki/String_(computer_science)" title="String (computer science)">strings</a> are stored as a contiguous group.)</p>
<p>The name of the program, <code>argv[0]</code>, may be useful when printing diagnostic messages or for making one binary serve multiple purposes. The individual values of the parameters may be accessed with <code>argv[1]</code>, <code>argv[2]</code>, and <code>argv[3]</code>, as shown in the following program:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="co2">#include &lt;stdio.h&gt;</span>
 
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">int</span> argc, <span class="kw4">char</span> *argv<span class="br0">[</span><span class="br0">]</span><span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw4">int</span>  i;
 
    <span class="kw3">printf</span> <span class="br0">(</span><span class="st0">"argc<span class="es0">\t</span>= %d<span class="es0">\n</span>"</span>, argc<span class="br0">)</span>;
    <span class="kw1">for</span> <span class="br0">(</span>i = <span class="nu0">0</span>; i &lt; argc; i++<span class="br0">)</span>
        <span class="kw3">printf</span> <span class="br0">(</span><span class="st0">"argv[%i]<span class="es0">\t</span>= %s<span class="es0">\n</span>"</span>, i, argv<span class="br0">[</span>i<span class="br0">]</span><span class="br0">)</span>;
    <span class="kw1">return</span> <span class="nu0">0</span>;
<span class="br0">}</span>
</pre></div>
<p><a name="Evaluation_order" id="Evaluation_order"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=51" title="Edit section: Evaluation order">edit</a>]</span> <span class="mw-headline">Evaluation order</span></h3>
<p>In any reasonably complex expression, there arises a choice as to the order in which to evaluate the parts of the expression: <code>(1+1)+(3+3)</code> may be evaluated in the order <code>(1+1)+(3+3) → (2)+(3+3) → (2)+(6) → 8</code> or in the order <code>(1+1)+(3+3) → (1+1)+(6) → (2)+(6) → 8</code>. Formally, a conforming C compiler may evaluate expressions in <i>any</i> order between <i><a href="/wiki/Sequence_point" title="Sequence point">sequence points</a></i>. Sequence points are defined by:</p>
<ul>
<li><i>Statement ends</i> at semicolons.</li>
<li>The <i>sequencing operator</i>: a comma. However, commas that delimit function arguments are not sequence points.</li>
<li>The <i>short-circuit operators</i>: logical <i>and</i> (<code>&amp;&amp;</code>) and logical <i>or</i> (<code>||</code>).</li>
<li>The <i>conditional operator</i> (<code>?:</code>): This operator evaluates its first sub-expression first, and then its second or third (never both of them) based on the value of the first.</li>
<li>Entry to and exit from a <i>function call</i> (but not between evaluations of the arguments).</li>
</ul>
<p>Expressions before a sequence point are always evaluated before those after a sequence point. In the case of short-circuit evaluation, the second expression may not be evaluated depending on the result of the first expression. For example, in the expression <code>(a() || b())</code>, if the first argument evaluates to nonzero (true), the result of the entire expression will also be true, so <code>b()</code> is not evaluated.</p>
<p>The arguments to a function call may be evaulated in any order, as long as they are all evaluated by the time the function call takes place. The following expression, for example, has undefined behaviour:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
 <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"%s %s<span class="es0">\n</span>"</span>, argv<span class="br0">[</span>i = <span class="nu0">0</span><span class="br0">]</span>, argv<span class="br0">[</span>++i<span class="br0">]</span><span class="br0">)</span>;
</pre></div>
<p><a name="Undefined_behavior" id="Undefined_behavior"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=52" title="Edit section: Undefined behavior">edit</a>]</span> <span class="mw-headline">Undefined behavior</span></h3>
<p>An aspect of the C standard (not unique to C) is that the behavior of certain code is said to be "undefined". In practice, this means that the program produced from this code can do anything, from working as the programmer intended, to crashing every time it is run.</p>
<p>For example, the following code produces undefined behavior, because the variable <code>b</code> is modified more than once with no intervening sequence point:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
<span class="co2">#include &lt;stdio.h&gt;</span>
 
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw4">int</span>  a, b = <span class="nu0">1</span>;
 
    a = b++ + b++;
    <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"%d<span class="es0">\n</span>"</span>, a<span class="br0">)</span>;
    <span class="kw1">return</span> <span class="nu0">0</span>;
<span class="br0">}</span>
</pre></div>
<p>Because there is no sequence point between the modifications of <code>b</code> in <code>b++ + b++</code>, it is possible to perform the evaluation steps in more than one order, resulting in an ambiguous statement. This can be fixed by rewriting the code to insert a sequence point:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-c">
a = b++;
a += b++;
</pre></div>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=53" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<ul>
<li><a href="/wiki/C_(programming_language)" title="C (programming language)">C programming language</a></li>
<li><a href="/wiki/C_variable_types_and_declarations" title="C variable types and declarations">C variable types and declarations</a></li>
<li><a href="/wiki/Operators_in_C_and_C_Plus_Plus" title="Operators in C and C Plus Plus" class="mw-redirect">Operators in C and C++</a></li>
</ul>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=54" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<div class="references-small" style="margin-left:1.5em;">
<ul>
<li><cite style="font-style:normal" class="book" id="CITEREFKernighanRitchie.2C_Dennis_M.1988">Kernighan, Brian W.; Ritchie, Dennis M. (1988). <i>The C Programming Language</i> (2nd Edition ed.). Upper Saddle River, New Jersey: Prentice Hall PTR. <a href="/wiki/Special:BookSources/0131103709" class="internal">ISBN 0131103709</a>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=The+C+Programming+Language&amp;rft.aulast=Kernighan&amp;rft.aufirst=Brian+W.&amp;rft.au=Kernighan%2C+Brian+W.&amp;rft.au=Ritchie%2C+Dennis+M.&amp;rft.date=1988&amp;rft.edition=2nd+Edition&amp;rft.place=Upper+Saddle+River%2C+New+Jersey&amp;rft.pub=Prentice+Hall+PTR&amp;rft.isbn=0131103709&amp;rfr_id=info:sid/en.wikipedia.org:C_syntax"><span style="display: none;">&#160;</span></span></li>
<li>American National Standard for Information Systems - Programming Language - C - ANSI X3.159-1989</li>
</ul>
</div>
<div class="references-small">
<ol class="references">
<li id="cite_note-long_long-0">^ <a href="#cite_ref-long_long_0-0" title=""><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-long_long_0-1" title=""><sup><i><b>b</b></i></sup></a> <a href="#cite_ref-long_long_0-2" title=""><sup><i><b>c</b></i></sup></a> The <code>long long</code> modifier was introduced in the C99 standard; some compilers had already supported it.</li>
</ol>
</div>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=C_syntax&amp;action=edit&amp;section=55" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<ul>
<li><a href="http://www.math.grin.edu/~stone/courses/languages/C-syntax.xhtml" class="external text" title="http://www.math.grin.edu/~stone/courses/languages/C-syntax.xhtml" rel="nofollow"><i>The syntax of C in Backus-Naur form</i></a></li>
<li><a href="http://www.cs.cf.ac.uk/Dave/C/CE.html" class="external text" title="http://www.cs.cf.ac.uk/Dave/C/CE.html" rel="nofollow">Programming in C</a></li>
<li><a href="http://c-faq.com/" class="external text" title="http://c-faq.com/" rel="nofollow"><i>The comp.lang.c Frequently Asked Questions Page</i></a></li>
</ul>
<table class="navbox" cellspacing="0" style=";">
<tr>
<td style="padding:2px;">
<table cellspacing="0" class="nowraplinks collapsible autocollapse" style="width:100%;background:transparent;color:inherit;;">
<tr>
<th style=";" colspan="2" class="navbox-title">
<div style="float:left; width:6em;text-align:left;">
<div class="noprint plainlinks navbar" style="background:none; padding:0; font-weight:normal;;;border:none;; font-size:xx-small;"><a href="/wiki/Template:CProLang" title="Template:CProLang"><span title="View this template" style=";;border:none;">v</span></a>&#160;<span style="font-size:80%;">•</span>&#160;<a href="/wiki/Template_talk:CProLang" title="Template talk:CProLang"><span title="Discussion about this template" style=";;border:none;">d</span></a>&#160;<span style="font-size:80%;">•</span>&#160;<a href="http://en.wikipedia.org/w/index.php?title=Template:CProLang&amp;action=edit" class="external text" title="http://en.wikipedia.org/w/index.php?title=Template:CProLang&amp;action=edit" rel="nofollow"><span title="Edit this template" style=";;border:none;;">e</span></a></div>
</div>
<span style="font-size:110%;"><a href="/wiki/C_(programming_language)" title="C (programming language)">C programming language</a></span></th>
</tr>
<tr style="height:2px;">
<td></td>
</tr>
<tr>
<td class="navbox-group" style=";;">Libraries</td>
<td style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<div style="padding:0em 0.25em"><a href="/wiki/C_standard_library" title="C standard library">C standard library</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/GNU_C_Library" title="GNU C Library">glibc</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Dietlibc" title="Dietlibc">Dietlibc</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/UClibc" title="UClibc">uClibc</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Newlib" title="Newlib">Newlib</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/EGLIBC" title="EGLIBC">EGLIBC</a><span style="font-weight:bold;">&#160;·</span> <i><a href="/wiki/Category:C_libraries" title="Category:C libraries">more</a></i></div>
</td>
</tr>
<tr style="height:2px">
<td></td>
</tr>
<tr>
<td class="navbox-group" style=";;">Features</td>
<td style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<div style="padding:0em 0.25em"><a href="/wiki/C_string" title="C string">String</a><span style="font-weight:bold;">&#160;·</span> <strong class="selflink">Syntax</strong><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/C_preprocessor" title="C preprocessor">Preprocessor</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/C_variable_types_and_declarations" title="C variable types and declarations">Variable types and declarations</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/List_of_C_functions" title="List of C functions">Functions</a></div>
</td>
</tr>
<tr style="height:2px">
<td></td>
</tr>
<tr>
<td class="navbox-group" style=";;">Descendants</td>
<td style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<div style="padding:0em 0.25em"><a href="/wiki/C%2B%2B" title="C++">C++</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Objective-C" title="Objective-C">Objective-C</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/D_(programming_language)" title="D (programming language)">D</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/C_Sharp_(programming_language)" title="C Sharp (programming language)">C#</a></div>
</td>
</tr>
<tr style="height:2px">
<td></td>
</tr>
<tr>
<td class="navbox-group" style=";;">C and Other Languages</td>
<td style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<div style="padding:0em 0.25em">C and C++ (<a href="/wiki/Compatibility_of_C_and_C%2B%2B" title="Compatibility of C and C++">Compatibility</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Operators_in_C_and_C%2B%2B" title="Operators in C and C++">Operators</a>)<span style="font-weight:bold;">&#160;·</span> <a href="/wiki/Comparison_of_Pascal_and_C" title="Comparison of Pascal and C">Comparison of Pascal and C</a><span style="font-weight:bold;">&#160;·</span> <a href="/wiki/C_to_Java_byte-code_compiler" title="C to Java byte-code compiler" class="mw-redirect">C to Java byte-code compiler</a></div>
</td>
</tr>
<tr style="height:2px;">
<td></td>
</tr>
<tr>
<td class="navbox-abovebelow" style=";" colspan="2"><b><a href="/wiki/Category:C_programming_language" title="Category:C programming language">Category</a></b></td>
</tr>
</table>
</td>
</tr>
</table>


<!-- 
NewPP limit report
Preprocessor node count: 1349/1000000
Post-expand include size: 17811/2048000 bytes
Template argument size: 6769/2048000 bytes
Expensive parser function count: 0/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:456820-0!1!0!default!!en!2 and timestamp 20090515042523 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/C_syntax">http://en.wikipedia.org/wiki/C_syntax</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:C_programming_language" title="Category:C programming language">C programming language</a></span> | <span dir='ltr'><a href="/wiki/Category:Source_code" title="Category:Source code">Source code</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/C_syntax" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:C_syntax" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=C_syntax&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=C_syntax&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=C_syntax" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate/Now/en?utm_source=donate&amp;utm_medium=sidebar&amp;utm_campaign=spontaneous_donation" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/C_syntax" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/C_syntax" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=C_syntax&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=C_syntax&amp;oldid=289043246" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=C_syntax&amp;id=289043246">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-vi"><a href="http://vi.wikipedia.org/wiki/C%C3%BA_ph%C3%A1p_ng%C3%B4n_ng%E1%BB%AF_C">Tiếng Việt</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 10 May 2009, at 10:42 (UTC).</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv190 in 0.048 secs. --></body></html>
