<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15alpha" />
		<meta name="keywords" content="Scheme (programming language),Special:Search/Scheme (programming language),.NET Framework,Actor model,Array,Association list,Associative array,Backtracking,Bigloo,Boolean datatype,C (programming language)" />
		<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit" />
		<link rel="edit" title="Edit this page" href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit" />
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
		<link rel="copyright" href="http://www.gnu.org/copyleft/fdl.html" />
		<link rel="alternate" type="application/rss+xml" title="Wikipedia RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Scheme (programming language) - Wikipedia, the free encyclopedia</title>
		<link rel="stylesheet" href="/skins-1.5/common/shared.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/common/commonPrint.css?207xx" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins-1.5/monobook/main.css?207xx" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins-1.5/chick/main.css?207xx" type="text/css" media="handheld" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins-1.5/monobook/IE70Fixes.css?207xx" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?207xx"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Scheme_(programming_language)";
		var wgTitle = "Scheme (programming language)";
		var wgAction = "view";
		var wgArticleId = "28119";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 279846489;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/skins-1.5/common/wikibits.js?207xx"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins-1.5/common/ajax.js?207xx"></script>
		<script type="text/javascript" src="/skins-1.5/common/mwsuggest.js?207xx"></script>
<script type="text/javascript">/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/</script>		<script type="text/javascript" src="http://upload.wikimedia.org/centralnotice/wikipedia/en/centralnotice.js?207xx"></script>
<style type="text/css">/*<![CDATA[*/
.source-scheme {line-height: normal;}
.source-scheme li, .source-scheme pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for scheme
 * CSS class: source-scheme, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-scheme .de1, .source-scheme .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-scheme  {}
.source-scheme .head {}
.source-scheme .foot {}
.source-scheme .imp {font-weight: bold; color: red;}
.source-scheme .ln-xtra {color: #cc0; background-color: #ffc;}
.source-scheme li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-scheme li.li2 {font-weight: bold;}
.source-scheme .kw1 {color: #b1b100;}
.source-scheme .co1 {color: #808080; font-style: italic;}
.source-scheme .coMULTI {color: #808080; font-style: italic;}
.source-scheme .es0 {color: #000099; font-weight: bold;}
.source-scheme .br0 {color: #66cc66;}
.source-scheme .st0 {color: #ff0000;}
.source-scheme .nu0 {color: #cc66cc;}
.source-scheme .me0 {color: #202020;}

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
</style>		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Scheme_programming_language skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
		<div id="siteNotice"><script type='text/javascript'>if (wgNotice != '') document.writeln(wgNotice);</script></div>		<h1 id="firstHeading" class="firstHeading">Scheme (programming language)</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Wikipedia, the free encyclopedia</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<table class="infobox vevent" cellspacing="5" style="width: 22em; text-align: left; font-size: 88%; line-height: 1.5em;">
<caption class="summary" style="font-size: 125%; font-weight: bold;">Scheme</caption>
<tr>
<td colspan="2" class="" style="text-align:center;"><a href="/wiki/File:Lambda_lc.svg" class="image" title="Lambda lc.svg"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/3/39/Lambda_lc.svg/100px-Lambda_lc.svg.png" width="100" height="100" border="0" /></a></td>
</tr>
<tr>
<th style="">Usual <a href="/wiki/Filename_extension" title="Filename extension">file extensions</a></th>
<td class="" style="">.scm, .ss</td>
</tr>
<tr>
<th style=""><a href="/wiki/Programming_paradigm" title="Programming paradigm">Paradigm</a></th>
<td class="" style=""><a href="/wiki/Multi-paradigm_programming_language" title="Multi-paradigm programming language">multi-paradigm</a></td>
</tr>
<tr>
<th style="">Appeared in</th>
<td class="" style="">1970s</td>
</tr>
<tr>
<th style="">Designed by</th>
<td class="organiser" style=""><a href="/wiki/Guy_L._Steele" title="Guy L. Steele" class="mw-redirect">Guy L. Steele</a> and <a href="/wiki/Gerald_Jay_Sussman" title="Gerald Jay Sussman">Gerald Jay Sussman</a></td>
</tr>
<tr>
<th style=""><a href="/wiki/Type_system" title="Type system">Typing discipline</a></th>
<td class="" style="">strong, dynamic</td>
</tr>
<tr>
<th style=""><a href="/wiki/Programming_language_implementation" title="Programming language implementation">Major implementations</a></th>
<td class="" style=""><a href="/wiki/PLT_Scheme" title="PLT Scheme">PLT Scheme</a>, <a href="/wiki/MIT/GNU_Scheme" title="MIT/GNU Scheme">MIT/GNU Scheme</a>, <a href="/wiki/Scheme_48" title="Scheme 48">Scheme 48</a>, <a href="/wiki/Chicken_(Scheme_implementation)" title="Chicken (Scheme implementation)">Chicken</a>, <a href="/wiki/Gambit_(Scheme_implementation)" title="Gambit (Scheme implementation)">Gambit</a>, <a href="/wiki/Gauche_(Scheme_implementation)" title="Gauche (Scheme implementation)">Gauche</a>, <a href="/wiki/GNU_Guile" title="GNU Guile">Guile</a>, <a href="/wiki/Bigloo" title="Bigloo">Bigloo</a>, <a href="/wiki/Chez_Scheme" title="Chez Scheme">Chez Scheme</a>, <a href="/wiki/STk" title="STk">STk</a>, <a href="/wiki/STklos" title="STklos">STklos</a>, <a href="/wiki/Larceny_(Scheme_implementation)" title="Larceny (Scheme implementation)">Larceny</a>, <a href="/wiki/SCM_(Scheme_implementation)" title="SCM (Scheme implementation)">SCM</a>, <a href="/wiki/Kawa" title="Kawa">Kawa</a>, <a href="/wiki/Ikarus_(Scheme_implementation)" title="Ikarus (Scheme implementation)">Ikarus</a>, <a href="/w/index.php?title=Mosh_(Scheme_implementation)&amp;action=edit&amp;redlink=1" class="new" title="Mosh (Scheme implementation) (page does not exist)">Mosh</a>, <a href="/wiki/Ypsilon_(Scheme_implementation)" title="Ypsilon (Scheme implementation)">Ypsilon</a></td>
</tr>
<tr>
<th style=""><a href="/wiki/Programming_language_dialect" title="Programming language dialect" class="mw-redirect">Dialects</a></th>
<td class="" style=""><a href="/wiki/T_(programming_language)" title="T (programming language)">T</a></td>
</tr>
<tr>
<th style="">Influenced</th>
<td class="" style=""><a href="/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a>, <a href="/wiki/JavaScript" title="JavaScript">JavaScript</a>, <a href="/wiki/Ruby_(programming_language)" title="Ruby (programming language)">Ruby</a>, <a href="/wiki/Dylan_(programming_language)" title="Dylan (programming language)">Dylan</a>, <a href="/wiki/Lua_(programming_language)" title="Lua (programming language)">Lua</a>, <a href="/wiki/Hop_(software)" title="Hop (software)">Hop</a></td>
</tr>
</table>
<p><b>Scheme</b> is a <a href="/wiki/Multi-paradigm_programming_language" title="Multi-paradigm programming language">multi-paradigm programming language</a>. It is one of the two main <a href="/wiki/Programming_language_dialect" title="Programming language dialect" class="mw-redirect">dialects</a> of <a href="/wiki/Lisp_programming_language" title="Lisp programming language" class="mw-redirect">Lisp</a> (the other being <a href="/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a>) and supports a number of programming paradigms but is best known for its support of <a href="/wiki/Functional_programming" title="Functional programming">functional programming</a>. It was developed by <a href="/wiki/Guy_L._Steele" title="Guy L. Steele" class="mw-redirect">Guy L. Steele</a> and <a href="/wiki/Gerald_Jay_Sussman" title="Gerald Jay Sussman">Gerald Jay Sussman</a> in the 1970s. Scheme was introduced to the academic world via a series of papers now referred to as Sussman and Steele's <a href="/wiki/Lambda_Papers" title="Lambda Papers">Lambda Papers</a>. There are two standards that define the Scheme language: the official <a href="/wiki/IEEE" title="IEEE" class="mw-redirect">IEEE</a> standard, and a de facto standard called the <i>Revised<sup>n</sup> Report on the Algorithmic Language Scheme</i>, nearly always abbreviated R<sup><i>n</i></sup>RS, where <i>n</i> is the number of the revision. The most widely implemented standard is <b>R<sup>5</sup>RS</b><sup id="cite_ref-r5rs_0-0" class="reference"><a href="#cite_note-r5rs-0" title=""><span>[</span>1<span>]</span></a></sup>, and on August 28, 2007, <b>R<sup>6</sup>RS</b>,<sup id="cite_ref-r6rs_1-0" class="reference"><a href="#cite_note-r6rs-1" title=""><span>[</span>2<span>]</span></a></sup> the next major revision of the Scheme language, was ratified,<sup id="cite_ref-2" class="reference"><a href="#cite_note-2" title=""><span>[</span>3<span>]</span></a></sup> with about two thirds of the voters in favor of <b>R<sup>6</sup>RS</b>.</p>
<p>Scheme's philosophy is <a href="/wiki/Computing_minimalism" title="Computing minimalism" class="mw-redirect">minimalist</a>. Scheme provides as few primitive notions as possible and, where practical, lets everything else be provided by <a href="/wiki/Library_(computer_science)" title="Library (computer science)" class="mw-redirect">programming libraries</a>.</p>
<p>Scheme was the first dialect of Lisp to choose static (a.k.a. lexical) over dynamic variable <a href="/wiki/Scope_(programming)" title="Scope (programming)">scope</a>. It was also one of the first programming languages to support first-class <a href="/wiki/Continuation" title="Continuation">continuations</a>.</p>
<table id="toc" class="toc" summary="Contents">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1"><a href="#Origin"><span class="tocnumber">1</span> <span class="toctext">Origin</span></a></li>
<li class="toclevel-1"><a href="#Distinguishing_features"><span class="tocnumber">2</span> <span class="toctext">Distinguishing features</span></a></li>
<li class="toclevel-1"><a href="#Tail_recursion"><span class="tocnumber">3</span> <span class="toctext">Tail recursion</span></a></li>
<li class="toclevel-1"><a href="#Language_elements"><span class="tocnumber">4</span> <span class="toctext">Language elements</span></a>
<ul>
<li class="toclevel-2"><a href="#Comments"><span class="tocnumber">4.1</span> <span class="toctext">Comments</span></a></li>
<li class="toclevel-2"><a href="#Variables"><span class="tocnumber">4.2</span> <span class="toctext">Variables</span></a></li>
<li class="toclevel-2"><a href="#Functions"><span class="tocnumber">4.3</span> <span class="toctext">Functions</span></a></li>
<li class="toclevel-2"><a href="#Lists"><span class="tocnumber">4.4</span> <span class="toctext">Lists</span></a></li>
<li class="toclevel-2"><a href="#Data_types"><span class="tocnumber">4.5</span> <span class="toctext">Data types</span></a></li>
<li class="toclevel-2"><a href="#Equality"><span class="tocnumber">4.6</span> <span class="toctext">Equality</span></a></li>
<li class="toclevel-2"><a href="#Control_structures"><span class="tocnumber">4.7</span> <span class="toctext">Control structures</span></a>
<ul>
<li class="toclevel-3"><a href="#Conditional_evaluation"><span class="tocnumber">4.7.1</span> <span class="toctext">Conditional evaluation</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#Input.2Foutput"><span class="tocnumber">4.8</span> <span class="toctext">Input/output</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Implementations"><span class="tocnumber">5</span> <span class="toctext">Implementations</span></a></li>
<li class="toclevel-1"><a href="#R6RS"><span class="tocnumber">6</span> <span class="toctext">R<sup>6</sup>RS</span></a></li>
<li class="toclevel-1"><a href="#Usage"><span class="tocnumber">7</span> <span class="toctext">Usage</span></a></li>
<li class="toclevel-1"><a href="#See_also"><span class="tocnumber">8</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1"><a href="#References"><span class="tocnumber">9</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1"><a href="#Further_reading"><span class="tocnumber">10</span> <span class="toctext">Further reading</span></a></li>
<li class="toclevel-1"><a href="#External_links"><span class="tocnumber">11</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
<p><a name="Origin" id="Origin"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=1" title="Edit section: Origin">edit</a>]</span> <span class="mw-headline">Origin</span></h2>
<p>Scheme started as an attempt to understand <a href="/wiki/Carl_Hewitt" title="Carl Hewitt">Carl Hewitt</a>'s <a href="/wiki/Actor_model" title="Actor model">Actor model</a>.<sup id="cite_ref-3" class="reference"><a href="#cite_note-3" title=""><span>[</span>4<span>]</span></a></sup> Scheme was originally called "Schemer", in the tradition of other <a href="/wiki/Lisp_(programming_language)" title="Lisp (programming language)">Lisp</a>-derived languages like <a href="/wiki/Planner_programming_language" title="Planner programming language" class="mw-redirect">Planner</a> or <a href="/w/index.php?title=Conniver_programming_language&amp;action=edit&amp;redlink=1" class="new" title="Conniver programming language (page does not exist)">Conniver</a>. The current name resulted from the authors' use of the <a href="/wiki/Incompatible_Timesharing_System" title="Incompatible Timesharing System">ITS operating system</a>, which limited filenames to two components of at most six characters each. Currently, "Schemer" is commonly used to refer to a Scheme programmer.</p>
<p><a name="Distinguishing_features" id="Distinguishing_features"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=2" title="Edit section: Distinguishing features">edit</a>]</span> <span class="mw-headline">Distinguishing features</span></h2>
<p>Like all <a href="/wiki/Lisp_programming_language" title="Lisp programming language" class="mw-redirect">Lisp</a> dialects, Scheme has a very simple syntax. There are no <a href="/wiki/Operator_precedence" title="Operator precedence" class="mw-redirect">operator precedence</a> rules because <a href="/wiki/S-expression" title="S-expression">fully nested and parenthesized notation</a> is used for <i>all</i> compound forms. Example (the recursive <a href="/wiki/Factorial" title="Factorial">factorial</a> function):</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-scheme">
 <span class="br0">(</span><span class="kw1">define</span> <span class="br0">(</span>fact n<span class="br0">)</span>
    <span class="br0">(</span><span class="kw1">if</span> <span class="br0">(</span>= n <span class="nu0">0</span><span class="br0">)</span>
        <span class="nu0">1</span>
        <span class="br0">(</span>* n <span class="br0">(</span>fact <span class="br0">(</span>- n <span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>
</pre></div>
<p>Scheme is a minimalist language. The R<sup>5</sup>RS language standard<sup id="cite_ref-r5rs_0-1" class="reference"><a href="#cite_note-r5rs-0" title=""><span>[</span>1<span>]</span></a></sup> is only 50 pages, including a <a href="/wiki/Denotational_semantics" title="Denotational semantics">denotational semantics</a> for the language core. The latest revision of the standard, R<sup>6</sup>RS, has been expanded<sup id="cite_ref-r6rs_1-1" class="reference"><a href="#cite_note-r6rs-1" title=""><span>[</span>2<span>]</span></a></sup> to describe several libraries.</p>
<p>In contrast with <a href="/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a>, Scheme is a "Lisp-1". All data and functions share a common namespace in Scheme, whereas in Common Lisp functions and data have separate namespaces and it is thus possible (in Common Lisp) for a function and a variable to have the same name.</p>
<p>Procedures in Scheme are <a href="/wiki/First-class_function" title="First-class function">first-class</a> values, as are <a href="/wiki/Continuation" title="Continuation">continuations</a>. Scheme's <code><a href="/wiki/Call-with-current-continuation" title="Call-with-current-continuation">call-with-current-continuation</a></code> procedure (also known as <code>call/cc</code>) captures the current continuation, enabling the programmer to create non-local control constructs that must be built into other languages, such as <a href="/wiki/Iterator" title="Iterator">iterators</a>, <a href="/wiki/Coroutine" title="Coroutine">coroutines</a>, and <a href="/wiki/Backtracking" title="Backtracking">backtracking</a>.</p>
<p>A simple use of <code>call/cc</code> is as follows:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-scheme">
<span class="br0">(</span><span class="kw1">define</span> <span class="br0">(</span>add-if-all-numbers lst<span class="br0">)</span>
  <span class="br0">(</span><span class="kw1">call/cc</span>
    <span class="br0">(</span><span class="kw1">lambda</span> <span class="br0">(</span>exit<span class="br0">)</span>
      <span class="br0">(</span><span class="kw1">let</span> loop <span class="br0">(</span><span class="br0">(</span>lst lst<span class="br0">)</span> <span class="br0">(</span>sum <span class="nu0">0</span><span class="br0">)</span><span class="br0">)</span>
        <span class="br0">(</span><span class="kw1">if</span> <span class="br0">(</span><span class="kw1">null?</span> lst<span class="br0">)</span> sum
          <span class="br0">(</span><span class="kw1">if</span> <span class="br0">(</span><span class="kw1">not</span> <span class="br0">(</span><span class="kw1">number?</span> <span class="br0">(</span><span class="kw1">car</span> lst<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span> <span class="br0">(</span>exit #f<span class="br0">)</span>
            <span class="br0">(</span>loop <span class="br0">(</span><span class="kw1">cdr</span> lst<span class="br0">)</span> <span class="br0">(</span>+ sum <span class="br0">(</span><span class="kw1">car</span> lst<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>
</pre></div>
<p>This adds an arbitrary list of numbers, but if a non-numeric value is found in the list the procedure is aborted immediately and the constant value <code>#f</code> (false) is returned. This is achieved by capturing the current continuation in the variable <code>exit</code> and using it as an "escape procedure".</p>
<p>Scheme supports <a href="/wiki/Lazy_evaluation" title="Lazy evaluation">lazy evaluation</a> through the <code>delay</code> and <code>force</code> forms.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-scheme">
<span class="br0">(</span><span class="kw1">define</span> a <span class="nu0">10</span><span class="br0">)</span>
<span class="br0">(</span><span class="kw1">define</span> eval-aplus2 <span class="br0">(</span><span class="kw1">delay</span> <span class="br0">(</span>+ a <span class="nu0">2</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>
<span class="br0">(</span><span class="kw1">define</span> a <span class="nu0">20</span><span class="br0">)</span>
<span class="br0">(</span><span class="kw1">force</span> eval-aplus2<span class="br0">)</span>
=&gt; <span class="nu0">22</span>
</pre></div>
<p><code>delay</code> and <code>force</code> have been the subject of much discussion within the Scheme community because implementing many popular forms of lazy evaluation is actually quite difficult using the Scheme primitives.<sup id="cite_ref-4" class="reference"><a href="#cite_note-4" title=""><span>[</span>5<span>]</span></a></sup> For example, a Scheme Request For Implementation, SRFI-40, describes a "streams" library which defines a lazily-evaluated list type; this was withdrawn by its author, <a href="/w/index.php?title=Philip_L._Bewig&amp;action=edit&amp;redlink=1" class="new" title="Philip L. Bewig (page does not exist)">Philip L. Bewig</a>, as a result of discussion that unveiled a serious space leak in the specification. The revised version, SRFI-41, is currently in draft status.<sup id="cite_ref-5" class="reference"><a href="#cite_note-5" title=""><span>[</span>6<span>]</span></a></sup></p>
<p>Scheme's high level macro system allows the user to add new syntactic constructs to the language. It respects the lexical scoping of the rest of the language, which avoids common programming errors that can occur in the macro systems of other programming languages. Many implementations also provide a more conventional low level macro system.</p>
<p><a name="Tail_recursion" id="Tail_recursion"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=3" title="Edit section: Tail recursion">edit</a>]</span> <span class="mw-headline">Tail recursion</span></h2>
<div class="rellink boilerplate seealso">For more details on this topic, see <a href="/wiki/Tail_recursion" title="Tail recursion">tail recursion</a>.</div>
<p>Scheme has looping constructs, but it is idiomatic to use <a href="/wiki/Tail_recursion" title="Tail recursion">tail recursion</a> to express loops. Scheme implementations are required to optimize tail calls to run in constant space.<sup id="cite_ref-r5rs_0-2" class="reference"><a href="#cite_note-r5rs-0" title=""><span>[</span>1<span>]</span></a></sup></p>
<p>Taking the factorial example above:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-scheme">
 <span class="br0">(</span><span class="kw1">define</span> <span class="br0">(</span>fact n<span class="br0">)</span>
    <span class="br0">(</span><span class="kw1">if</span> <span class="br0">(</span>= n <span class="nu0">0</span><span class="br0">)</span>
        <span class="nu0">1</span>
        <span class="br0">(</span>* n <span class="br0">(</span>fact <span class="br0">(</span>- n <span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>
</pre></div>
<p>This is not tail recursive because factorial n is evaluated recursively by first evaluating factorial n-1 as an intermediate value, then multiplying the result by n. The last operation in the evaluation (the "tail") is the multiplication.</p>
<p>A tail recursive version can be written as follows:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-scheme">
  <span class="br0">(</span><span class="kw1">define</span> <span class="br0">(</span>fact n<span class="br0">)</span>
    <span class="br0">(</span><span class="kw1">define</span> <span class="br0">(</span>fact2 n m<span class="br0">)</span>
      <span class="br0">(</span><span class="kw1">if</span> <span class="br0">(</span>= n <span class="nu0">0</span><span class="br0">)</span>
          m
          <span class="br0">(</span>fact2 <span class="br0">(</span>- n <span class="nu0">1</span><span class="br0">)</span> <span class="br0">(</span>* m n<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>
    <span class="br0">(</span>fact2 n <span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span>
</pre></div>
<p>Although this is written in a recursive form, the recursion is the last operation in evaluating the procedure (a "tail call"), and in effect replaces the procedure invocation by another (for instance, (fact2 10 1) is replaced by (fact2 9 10)).</p>
<p>A tail call is sometimes described as "a goto with parameters" because its effect is the same as branching to the start of the procedure and replacing the old parameters with new ones. It is this characteristic that makes it possible for Scheme compilers and interpreters to guarantee that tail recursive procedures will always be evaluated in constant space.</p>
<p><a name="Language_elements" id="Language_elements"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=4" title="Edit section: Language elements">edit</a>]</span> <span class="mw-headline">Language elements</span></h2>
<p><a name="Comments" id="Comments"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=5" title="Edit section: Comments">edit</a>]</span> <span class="mw-headline">Comments</span></h3>
<p>Each comment is preceded by a semicolon (<code>;</code>) and extends for the rest of the line. Some implementations allow comments to span multiple lines by wrapping them with a <code>#|...|#</code> (possibly nested). Other implementations allow an entire <a href="/wiki/S-expression" title="S-expression">s-expression</a> to be commented out by prepending it with <code>#;</code>.<sup id="cite_ref-6" class="reference"><a href="#cite_note-6" title=""><span>[</span>7<span>]</span></a></sup> These two comment forms are included in the R<sup>6</sup>RS.</p>
<p><a name="Variables" id="Variables"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=6" title="Edit section: Variables">edit</a>]</span> <span class="mw-headline">Variables</span></h3>
<p>Variables are dynamically typed. Variables are bound by a <i>define</i>, a <i>let</i> expression, and a few other Scheme forms. Variables bound at the top level with a define are in <i>global scope</i>.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-scheme">
  <span class="br0">(</span><span class="kw1">define</span> var1 value<span class="br0">)</span>
</pre></div>
<p>Variables bound in a let are in scope for the body of the let.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-scheme">
  <span class="br0">(</span><span class="kw1">let</span> <span class="br0">(</span><span class="br0">(</span>var1 value<span class="br0">)</span><span class="br0">)</span>
    ...
    <span class="co1">; scope of var1</span>
    ...<span class="br0">)</span>
</pre></div>
<p><code>let</code> is a convenient syntax that is not fundamentally necessary. A <code>let</code> expression can be implemented using procedures directly. For example, the above is equivalent to:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-scheme">
  <span class="br0">(</span><span class="br0">(</span><span class="kw1">lambda</span> <span class="br0">(</span>var1<span class="br0">)</span>
    ...
    <span class="co1">; scope of var1</span>
    ...<span class="br0">)</span> value<span class="br0">)</span>
</pre></div>
<p><a name="Functions" id="Functions"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=7" title="Edit section: Functions">edit</a>]</span> <span class="mw-headline">Functions</span></h3>
<div dir="ltr" style="text-align: left;">
<pre class="source-scheme">
<span class="nu0">1</span> <span class="br0">(</span><span class="kw1">define</span> fun
   <span class="br0">(</span><span class="kw1">lambda</span> <span class="br0">(</span>arg1 arg2<span class="br0">)</span>
     ...<span class="br0">)</span><span class="br0">)</span>
<span class="nu0">2</span> <span class="br0">(</span><span class="kw1">define</span> <span class="br0">(</span>fun arg1 arg2<span class="br0">)</span>
   ...<span class="br0">)</span>
<span class="nu0">3</span> <span class="br0">(</span>fun value1 value2<span class="br0">)</span>
<span class="nu0">4</span> <span class="br0">(</span>apply fun <span class="br0">(</span><span class="kw1">list</span> value1 value2<span class="br0">)</span><span class="br0">)</span>
</pre></div>
<p>Functions (often called procedures) are first-class objects in Scheme. They can be arguments to other functions and be returned by them. They can be assigned to variables. Functions are created by <code>lambda</code> forms. For example, a function with two arguments <code>arg1</code> and <code>arg2</code> is defined in line 1. Line 2 is a shorter, equivalent form; line 3 shows how functions are applied. Note that the function being applied is in the first position of the list while the rest of the list contains the arguments. The apply function will take its first argument and apply it to a given list of arguments, so the previous function call can also be written as seen in line 4.</p>
<p>In Scheme, functions are divided into two basic categories: procedures and primitives. All primitives are procedures, but not all procedures are primitives. Primitives are pre-defined functions in the Scheme language. These include <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>set!</code>, <code>car</code>, <code>cdr</code>, and other basic procedures. Procedures are user-defined functions. In several variations of Scheme, a user can <a href="/wiki/Operator_overloading" title="Operator overloading">redefine</a> a primitive. For example, the code</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-scheme">
<span class="br0">(</span><span class="kw1">define</span> <span class="br0">(</span>+ x y<span class="br0">)</span>
  <span class="br0">(</span>- x y<span class="br0">)</span><span class="br0">)</span>
</pre></div>
<p>or simply</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-scheme">
<span class="br0">(</span><span class="kw1">define</span> + -<span class="br0">)</span>
</pre></div>
<p>actually redefines the <code>+</code> primitive to perform subtraction, rather than addition.</p>
<p><a name="Lists" id="Lists"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=8" title="Edit section: Lists">edit</a>]</span> <span class="mw-headline">Lists</span></h3>
<div class="rellink boilerplate seealso">For more details on this topic, see <a href="/wiki/Linked_list" title="Linked list">linked list</a>.</div>
<p>Scheme uses the singly-linked list data structure, implemented using a primitive data type called the <a href="/wiki/Tuple" title="Tuple">pair</a>, with accessors: getters <a href="/wiki/Car_and_cdr" title="Car and cdr" class="mw-redirect">car and cdr</a> and setters <code>set-car!</code> and <code>set-cdr!</code>. <code>list-ref</code> provides access to an arbitrary member of a list, <code>length</code> gives its length, and the list constructor is <code>list</code>. There are also procedures to reverse a list, to obtain the tail of a list, to check for list membership, and to perform key-value lookups (<a href="/wiki/Associative_array#Association_lists" title="Associative array">association lists</a>).</p>
<p><a name="Data_types" id="Data_types"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=9" title="Edit section: Data types">edit</a>]</span> <span class="mw-headline">Data types</span></h3>
<p>Besides procedures, continuations, pairs and lists, Scheme provides the following data types: <a href="/wiki/Identifier" title="Identifier">atomic symbols</a>, <a href="/wiki/Number" title="Number">numbers</a>, <a href="/wiki/Boolean_datatype" title="Boolean datatype">booleans</a>, <a href="/wiki/Character_(computing)" title="Character (computing)">characters</a>, <a href="/wiki/String_(computer_science)" title="String (computer science)">strings</a>, <a href="/wiki/Array" title="Array">vectors</a> and <a href="/wiki/Input/output" title="Input/output">input/output ports</a>.<sup id="cite_ref-r5rs_0-3" class="reference"><a href="#cite_note-r5rs-0" title=""><span>[</span>1<span>]</span></a></sup> <a href="/wiki/Association_list" title="Association list" class="mw-redirect">Association lists</a> are provided by standard procedures, and many Scheme implementations also offer <a href="/wiki/Hash_table" title="Hash table">hash tables</a> and such <a href="/wiki/Structure" title="Structure">structures</a>.<sup id="cite_ref-mzscheme_7-0" class="reference"><a href="#cite_note-mzscheme-7" title=""><span>[</span>8<span>]</span></a></sup> Extensions are standardized through a system of "Scheme Requests for Implementation" (SRFIs).<sup id="cite_ref-8" class="reference"><a href="#cite_note-8" title=""><span>[</span>9<span>]</span></a></sup></p>
<p>Since the IEEE Scheme standard and the R<sup>4</sup>RS Scheme standard, Scheme has asserted that all of the above types are <i>disjoint</i>, that is no value can belong to more than one of these types; however some very old implementations of Scheme may predate these standards such that <code>#f</code> and <code>'()</code> refer to the same value, as is the case in traditional Lisp including Common Lisp. All currently active implementations use the R<sup>4</sup>RS interpretation.</p>
<p>The numeric type is further divided into a <a href="/wiki/Numerical_tower" title="Numerical tower">numerical tower</a>, with subtypes <a href="/wiki/Complex_number" title="Complex number">complex</a>, <a href="/wiki/Real_number" title="Real number">real</a>, <a href="/wiki/Rational_number" title="Rational number">rational</a> and <a href="/wiki/Integer" title="Integer">integer</a>. (Note that these subtypes are <i>not</i> disjoint; in fact each type is a subset of the previous one). While it is not required that a Scheme implementation support the entire numerical tower, most implementations do. In addition to these traditional properties, Scheme numbers may have the property of "exactness". Integers and rational numbers are exact. An arithmetic operation involving numbers one or more of which is inexact has an inexact result.<sup id="cite_ref-r5rs_0-4" class="reference"><a href="#cite_note-r5rs-0" title=""><span>[</span>1<span>]</span></a></sup></p>
<p>The <a href="/wiki/Boolean_datatype" title="Boolean datatype">boolean</a> type represents true and false by <code>#t</code> and <code>#f</code> respectively. Any type can be used where a boolean is expected; any value other than <code>#f</code> is considered to be true, including the empty list. (In traditional <a href="/wiki/Lisp_(programming_language)" title="Lisp (programming language)">Lisp</a> and <a href="/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a>, the empty list is considered to be false.<sup id="cite_ref-r5rs_0-5" class="reference"><a href="#cite_note-r5rs-0" title=""><span>[</span>1<span>]</span></a></sup>)</p>
<p>Symbols can be created in at least the following ways:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-scheme">
'hello
<span class="br0">(</span>string-&gt;symbol <span class="st0">"hello"</span><span class="br0">)</span>
</pre></div>
<p>Symbols have historically been regarded as case-insensitive ('Aa is the same symbol as 'AA) and this was guaranteed in the standard up to R<sup>5</sup>RS, but many Scheme implementations have provided case-sensitive symbols, and a major change in R<sup>6</sup>RS is to switch to case-sensitive symbols as standard. Implementation of case-insensitivity is a relatively trivial matter, usually involving only a conversion of the case of incoming symbols in the reader procedure which serves as the lexical scanner and parser in most Scheme implementations.</p>
<p><a name="Equality" id="Equality"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=10" title="Edit section: Equality">edit</a>]</span> <span class="mw-headline">Equality</span></h3>
<p>Scheme has three different types of equality between arbitrary objects denoted by three different <a href="/wiki/Relational_operator" title="Relational operator">relational operators</a> for testing equality, <code>eq?</code>, <code>eqv?</code> and <code>equal?</code>:</p>
<ul>
<li><code>eq?</code> evaluates to <code>#f</code> unless its parameters represent the same data object in memory;</li>
<li><code>eqv?</code> is generally the same as <code>eq?</code> but treats primitive objects (eg. characters and numbers) specially so that numbers that represent the same value are <code>eqv?</code> even if they do not refer to the same object;</li>
<li><code>equal?</code> compares data structures such as lists, vectors and strings to determine if they have congruent structure and <code>eqv?</code> contents.<sup id="cite_ref-r5rs_0-6" class="reference"><a href="#cite_note-r5rs-0" title=""><span>[</span>1<span>]</span></a></sup></li>
</ul>
<p>Type dependent equivalence operations also exist in Scheme: <code>string=?</code>; compares two strings; <code>char=?</code> compares characters; <code>=</code> compares numbers.<sup id="cite_ref-r5rs_0-7" class="reference"><a href="#cite_note-r5rs-0" title=""><span>[</span>1<span>]</span></a></sup></p>
<p><a name="Control_structures" id="Control_structures"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=11" title="Edit section: Control structures">edit</a>]</span> <span class="mw-headline">Control structures</span></h3>
<p><a name="Conditional_evaluation" id="Conditional_evaluation"></a></p>
<h4><span class="editsection">[<a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=12" title="Edit section: Conditional evaluation">edit</a>]</span> <span class="mw-headline">Conditional evaluation</span></h4>
<div dir="ltr" style="text-align: left;">
<pre class="source-scheme">
<span class="br0">(</span><span class="kw1">if</span> test then-expr else-expr<span class="br0">)</span>
</pre></div>
<p>The <code>test</code> expression is evaluated, and if the evaluation result is true (anything other than <code>#f</code>) then the <code>then-expr</code> is evaluated, otherwise <code>else-expr</code> is evaluated.</p>
<p>A form that is more convenient when conditionals are nested is <code>cond</code>:</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-scheme">
<span class="br0">(</span><span class="kw1">cond</span> <span class="br0">(</span>test1 expr1 ...<span class="br0">)</span>
      <span class="br0">(</span>test2 expr2 ...<span class="br0">)</span>
      ...
      <span class="br0">(</span><span class="kw1">else</span> exprn<span class="br0">)</span><span class="br0">)</span>
</pre></div>
<p>The first expression for which the test evaluates to true will be evaluated. If all tests result in <code>#f</code>, the <code>else</code> clause is evaluated.</p>
<p>A variant of the cond clause is</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-scheme">
<span class="br0">(</span><span class="kw1">cond</span> ...
      <span class="br0">(</span>test =&gt; expr<span class="br0">)</span>
      ...<span class="br0">)</span>
</pre></div>
<p>In this case, <code>expr</code> should evaluate to a function that takes one argument. If test evaluates to true, the function is called with the return value of test.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-scheme">
<span class="br0">(</span><span class="kw1">case</span> expr0 ...
      <span class="br0">(</span><span class="br0">(</span>datum1<span class="br0">)</span> expr1a expr1b...<span class="br0">)</span>
      <span class="br0">(</span><span class="br0">(</span>datum2<span class="br0">)</span> expr2a expr2b...<span class="br0">)</span>
      ...
      <span class="br0">(</span><span class="kw1">else</span> exprna exprnb...<span class="br0">)</span><span class="br0">)</span>
</pre></div>
<p>The expression is evaluated and compared, in sequence, to each datum. If a match is found (using <code>eqv?</code>) then the corresponding sequence of expressions is evaluated in turn and the result of the case is the value of the final expression. If no match is found, the <code>else</code> arm of the case is evaluated. The <code>else</code> clause may be omitted altogether, in which case the value of the expression is unspecified if there is no match.</p>
<div dir="ltr" style="text-align: left;">
<pre class="source-scheme">
<span class="br0">(</span><span class="kw1">and</span> expr1 expr2...<span class="br0">)</span>
</pre></div>
<div dir="ltr" style="text-align: left;">
<pre class="source-scheme">
<span class="br0">(</span><span class="kw1">or</span> expr1 expr2...<span class="br0">)</span>
</pre></div>
<p><code>And</code> and <code>or</code> are counted as conditionals in R<sup>5</sup>RS because they are frequently used for this purpose in actual code. <code>And</code> evaluates its operands from left to right until it gets to the end or one of them evaluates to the value #f. The form evaluates to the value of the last-evaluated operand. <code>Or</code> has the same semantics with the exception that it stops when it evaluates a value that is not #f. They are similar to the <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a> <a href="/wiki/Short-circuit_evaluation" title="Short-circuit evaluation">short-circuit evaluation</a> operators &amp;&amp; and ||, which are also found in many programming languages such as <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a> and <a href="/wiki/Perl" title="Perl">Perl</a>, where they are also often used for conditional evaluation.</p>
<p><a name="Input.2Foutput" id="Input.2Foutput"></a></p>
<h3><span class="editsection">[<a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=13" title="Edit section: Input/output">edit</a>]</span> <span class="mw-headline">Input/output</span></h3>
<p>Scheme has the concept of <i>ports</i> to read from or to write to.<sup id="cite_ref-r5rs_0-8" class="reference"><a href="#cite_note-r5rs-0" title=""><span>[</span>1<span>]</span></a></sup> R5RS defines two default ports, accessible with the functions <code>current-input-port</code> and <code>current-output-port</code>, which correspond to the Unix notions of stdin and stdout. Most implementations also provide <code>current-error-port</code>. <a href="/wiki/Redirection_(computing)" title="Redirection (computing)">Redirection</a> of input and standard output is supported in the standard, by standard procedures such as <code>with-input-from-file</code> and <code>with-output-to-file</code>.</p>
<p><a name="Implementations" id="Implementations"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=14" title="Edit section: Implementations">edit</a>]</span> <span class="mw-headline">Implementations</span></h2>
<p>Current implementations include: <a href="/wiki/Bigloo" title="Bigloo">Bigloo</a>, <a href="/wiki/Chez_Scheme" title="Chez Scheme">Chez Scheme</a>, <a href="/wiki/Chicken_(Scheme_implementation)" title="Chicken (Scheme implementation)">Chicken</a>, <a href="/wiki/Gambit_(Scheme_implementation)" title="Gambit (Scheme implementation)">Gambit</a>, <a href="/wiki/Gauche_(Scheme_implementation)" title="Gauche (Scheme implementation)">Gauche</a>, <a href="/wiki/GNU_Guile" title="GNU Guile">Guile</a>, <a href="/wiki/Ikarus_(Scheme_implementation)" title="Ikarus (Scheme implementation)">Ikarus</a>, <a href="/wiki/JScheme" title="JScheme">JScheme</a>, <a href="/wiki/Kawa" title="Kawa">Kawa</a>, <a href="/wiki/Larceny_(Scheme_implementation)" title="Larceny (Scheme implementation)">Larceny</a>, <a href="/wiki/MIT/GNU_Scheme" title="MIT/GNU Scheme">MIT/GNU Scheme</a>, <a href="/w/index.php?title=Mosh_(Scheme_implementation)&amp;action=edit&amp;redlink=1" class="new" title="Mosh (Scheme implementation) (page does not exist)">Mosh</a>, <a href="/wiki/PLT_Scheme" title="PLT Scheme">PLT Scheme</a>, <a href="/wiki/Pvts" title="Pvts">Pvts</a>, <a href="/wiki/RScheme" title="RScheme">RScheme</a>, <a href="/wiki/Scheme_48" title="Scheme 48">Scheme 48</a>, <a href="/wiki/SCM_(Scheme_implementation)" title="SCM (Scheme implementation)">SCM</a>, <a href="/wiki/SISC_(Scheme_implementation)" title="SISC (Scheme implementation)" class="mw-redirect">SISC</a>, <a href="/wiki/Stalin_(Scheme_implementation)" title="Stalin (Scheme implementation)">Stalin</a>, <a href="/wiki/STk" title="STk">STk</a>, <a href="/wiki/STklos" title="STklos">STklos</a>, <a href="/wiki/TinyScheme" title="TinyScheme">TinyScheme</a>, <a href="/wiki/Ypsilon_(Scheme_implementation)" title="Ypsilon (Scheme implementation)">Ypsilon</a>.</p>
<p>Almost all implementations provide a traditional Lisp-style <a href="/wiki/Read-eval-print_loop" title="Read-eval-print loop">read-eval-print loop</a> for development and debugging. Most also compile Scheme programs to executable binary. Support for embedding Scheme code in programs written in other languages is also common, as the relative simplicity of Scheme implementations make Scheme a popular choice for adding scripting capabilities to larger systems developed in languages such as C. Gambit, Chicken and Bigloo work by compiling Scheme to <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a>, which makes embedding particularly easy. In addition, Bigloo's compiler can be configured to generate <a href="/wiki/Java_Virtual_Machine" title="Java Virtual Machine">JVM</a> bytecode, and it also features an experimental bytecode generator for <a href="/wiki/.NET_Framework" title=".NET Framework">.Net</a>.</p>
<p>Some implementations support additional features. For example, Kawa and JScheme provide integration with Java classes, and the Scheme to C compilers often make it easy to use external libraries written in C, up to allowing the embedding of actual C code in the Scheme source. Another example is PVTS which offers a set of visual tools for supporting the learning of Scheme.</p>
<p><a name="R6RS" id="R6RS"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=15" title="Edit section: R6RS">edit</a>]</span> <span class="mw-headline">R<sup>6</sup>RS</span></h2>
<p>A new language standardization process began at the 2003 Scheme workshop, with the goal of producing an R<sup>6</sup>RS standard in 2006. This process broke with the earlier R<sup><i>n</i></sup>RS approach of unanimity.</p>
<p>R<sup>6</sup>RS features a standard module system, allowing a split between the core language and libraries. A number of drafts of the R<sup>6</sup>RS specification were released, the final version being R<sup>5.97</sup>RS. A successful vote resulted in the ratification of the new standard, announced on August 28, 2007.<sup id="cite_ref-r6rs_1-2" class="reference"><a href="#cite_note-r6rs-1" title=""><span>[</span>2<span>]</span></a></sup></p>
<p>Currently the newest releases of various Scheme implementations, e.g. <a href="/wiki/Ikarus_(Scheme_implementation)" title="Ikarus (Scheme implementation)">Ikarus</a>, <a href="/wiki/Larceny_(Scheme_implementation)" title="Larceny (Scheme implementation)">Larceny</a>, <a href="/wiki/PLT_Scheme" title="PLT Scheme">PLT Scheme</a>, <a href="http://code.google.com/p/mosh-scheme/" class="external text" title="http://code.google.com/p/mosh-scheme/" rel="nofollow">mosh-scheme</a>, and <a href="/wiki/Ypsilon_(Scheme_implementation)" title="Ypsilon (Scheme implementation)">Ypsilon</a> support the R<sup>6</sup>RS standard. There is a portable reference implementation of the proposed implicitly-phased libraries for R<sup>6</sup>RS, loading and bootstrapping itself properly on various older Scheme implementations.<sup id="cite_ref-9" class="reference"><a href="#cite_note-9" title=""><span>[</span>10<span>]</span></a></sup></p>
<p>R<sup>6</sup>RS introduces numerous significant changes to the language, which include the following: <sup id="cite_ref-10" class="reference"><a href="#cite_note-10" title=""><span>[</span>11<span>]</span></a></sup></p>
<ul>
<li>The source code is now specified in <a href="/wiki/Unicode" title="Unicode">Unicode</a>, and a large subset of unicode characters may now appear in Scheme symbols and <a href="/wiki/Identifier" title="Identifier">identifiers</a>, and there are other minor changes to the lexical rules.</li>
<li>Two new styles for comments have been added for multiline comments and expression comments.</li>
<li>Character data is now specified in Unicode.</li>
<li>Many standard procedures have been moved to the new standard libraries, which themselves form a large expansion of the standard, containing procedures and syntactic forms that were formerly not part of the standard. Supporting the libraries and the production of further libraries.</li>
<li>The new standard introduces a module system.</li>
<li>An exception system is now specified.</li>
<li>A more expressive syntactic abstraction facility (syntax-case) has been added which allows the use of all of Scheme at macro expansion time. Previously, only a limited pattern-based language (syntax-rules) was required.</li>
<li>Compliant implementations are now <i>required</i> to support Scheme's full numeric tower, and the semantics of numbers have been expanded, mainly in the direction of support for the <a href="/wiki/IEEE_754-1985" title="IEEE 754-1985">IEEE 754</a> standard for floating point numerical representation.</li>
</ul>
<p><a name="Usage" id="Usage"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=16" title="Edit section: Usage">edit</a>]</span> <span class="mw-headline">Usage</span></h2>
<p>Scheme is widely used by a number<sup id="cite_ref-11" class="reference"><a href="#cite_note-11" title=""><span>[</span>12<span>]</span></a></sup> of schools; in particular, a number of introductory <a href="/wiki/Computer_Science" title="Computer Science" class="mw-redirect">Computer Science</a> courses use Scheme in conjunction with the textbook <i><a href="/wiki/Structure_and_Interpretation_of_Computer_Programs" title="Structure and Interpretation of Computer Programs">Structure and Interpretation of Computer Programs</a></i>.<sup id="cite_ref-12" class="reference"><a href="#cite_note-12" title=""><span>[</span>13<span>]</span></a></sup> For the past 12 years, <a href="/wiki/PLT_Scheme" title="PLT Scheme">PLT</a> has run the <a href="/wiki/TeachScheme!" title="TeachScheme!">TeachScheme!</a> project, which has exposed close to 600 high school teachers and thousands of high school students to rudimentary Scheme programming. <a href="/wiki/MIT" title="MIT" class="mw-redirect">MIT</a>'s old introductory programming class <a href="http://ocw.mit.edu/OcwWeb/Electrical-Engineering-and-Computer-Science/6-001Spring-2005/CourseHome/index.htm" class="external text" title="http://ocw.mit.edu/OcwWeb/Electrical-Engineering-and-Computer-Science/6-001Spring-2005/CourseHome/index.htm" rel="nofollow">6.001</a> was taught in Scheme, but that class has been replaced with <a href="http://course.mit.edu/6.01" class="external text" title="http://course.mit.edu/6.01" rel="nofollow">6.01</a>, which uses <a href="/wiki/Python_(programming_language)" title="Python (programming language)">Python</a>.<sup id="cite_ref-13" class="reference"><a href="#cite_note-13" title=""><span>[</span>14<span>]</span></a></sup> Caltech's introductory computer course CS1 is taught using Scheme. The introductory class at <a href="/wiki/UC_Berkeley" title="UC Berkeley" class="mw-redirect">UC Berkeley</a>, CS 61A, is taught entirely in Scheme, save minor diversions into Logo to demonstrate dynamic scope; all course materials, including lecture webcasts, are available online free of charge.<sup id="cite_ref-14" class="reference"><a href="#cite_note-14" title=""><span>[</span>15<span>]</span></a></sup> The introductory computer science course at <a href="/wiki/Yale" title="Yale" class="mw-redirect">Yale</a> is also taught in Scheme.<sup id="cite_ref-15" class="reference"><a href="#cite_note-15" title=""><span>[</span>16<span>]</span></a></sup> Several introductory Computer Science courses at <a href="/wiki/Rice_University" title="Rice University">Rice University</a> are also taught in Scheme.<sup id="cite_ref-16" class="reference"><a href="#cite_note-16" title=""><span>[</span>17<span>]</span></a></sup> Programming Design Paradigms,<sup id="cite_ref-17" class="reference"><a href="#cite_note-17" title=""><span>[</span>18<span>]</span></a></sup> a mandatory course for the Computer science Graduate Students at <a href="/wiki/Northeastern_University" title="Northeastern University">Northeastern University</a>, also extensively uses Scheme.</p>
<p>There are relatively few examples of Scheme in apparent usage<sup id="cite_ref-18" class="reference"><a href="#cite_note-18" title=""><span>[</span>19<span>]</span></a></sup> for non-pedagogical purposes. However, the <a href="/wiki/Document_Style_Semantics_and_Specification_Language" title="Document Style Semantics and Specification Language">Document Style Semantics and Specification Language</a> (DSSSL), which provides a method of specifying <a href="/wiki/SGML" title="SGML" class="mw-redirect">SGML</a> <a href="/wiki/Stylesheet" title="Stylesheet" class="mw-redirect">stylesheets</a>, uses a Scheme subset.<sup id="cite_ref-19" class="reference"><a href="#cite_note-19" title=""><span>[</span>20<span>]</span></a></sup> In addition, the well-known <a href="/wiki/Open_source" title="Open source">open source</a> <a href="/wiki/Raster_graphics_editor" title="Raster graphics editor">raster graphics editor</a>, the <a href="/wiki/GIMP" title="GIMP">GIMP</a> uses Scheme as a <a href="/wiki/Scripting_language" title="Scripting language">scripting language</a>.<sup id="cite_ref-20" class="reference"><a href="#cite_note-20" title=""><span>[</span>21<span>]</span></a></sup> <a href="/wiki/GNU_Guile" title="GNU Guile">Guile</a> has been adopted by <a href="/wiki/GNU" title="GNU">GNU</a> project as its official scripting language, and that implementation of Scheme is embedded in such applications as <a href="/wiki/GNU_LilyPond" title="GNU LilyPond">GNU LilyPond</a> and <a href="/wiki/GnuCash" title="GnuCash">GnuCash</a> as a scripting language for extensions. <a href="/wiki/Chez_Scheme" title="Chez Scheme">Chez Scheme</a> has been used at Disney World in Florida for controlling virtual rides (Kent Dybvig, invited talk at International Conference on Functional Programming, 2006). <a href="/wiki/Extension_Language_Kit" title="Extension Language Kit">Elk Scheme</a> is used by <a href="/wiki/Synopsys" title="Synopsys">Synopsys</a> as a scripting language for its <a href="/wiki/Technology_CAD" title="Technology CAD">technology CAD (TCAD)</a> tools.<sup id="cite_ref-21" class="reference"><a href="#cite_note-21" title=""><span>[</span>22<span>]</span></a></sup> Shiro Kawai used Scheme to glue Final Fantasy: The Spirits Within together.<sup id="cite_ref-22" class="reference"><a href="#cite_note-22" title=""><span>[</span>23<span>]</span></a></sup></p>
<p><a name="See_also" id="See_also"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=17" title="Edit section: See also">edit</a>]</span> <span class="mw-headline">See also</span></h2>
<ul>
<li><i><a href="/wiki/Structure_and_Interpretation_of_Computer_Programs" title="Structure and Interpretation of Computer Programs">Structure and Interpretation of Computer Programs</a></i>, a classic <a href="/wiki/Computer_science" title="Computer science">computer science</a> textbook. (Accompanying videos on YouTube and on a <a href="http://groups.csail.mit.edu/mac/classes/6.001/abelson-sussman-lectures/" class="external text" title="http://groups.csail.mit.edu/mac/classes/6.001/abelson-sussman-lectures/" rel="nofollow">homepage</a>.)</li>
<li><i><a href="/wiki/How_to_Design_Programs" title="How to Design Programs">How to Design Programs</a></i>, which intends to teach principles that go beyond Scheme and to address <a href="http://www.ccs.neu.edu/scheme/pubs/#jfp2004-fffk" class="external text" title="http://www.ccs.neu.edu/scheme/pubs/#jfp2004-fffk" rel="nofollow">perceived incongruities in SICP</a>.</li>
<li><a href="/wiki/Call-with-current-continuation" title="Call-with-current-continuation">Call-with-current-continuation</a> (call/cc)</li>
<li><a href="/wiki/SXML" title="SXML">SXML</a> - an illustrative representation for XML in Scheme that provides a straightforward approach to XML data processing in Scheme</li>
<li><a href="/w/index.php?title=Comparison_of_Scheme_implementations&amp;action=edit&amp;redlink=1" class="new" title="Comparison of Scheme implementations (page does not exist)">Comparison of Scheme implementations</a></li>
</ul>
<p><a name="References" id="References"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=18" title="Edit section: References">edit</a>]</span> <span class="mw-headline">References</span></h2>
<div class="references-small references-column-width" style="-moz-column-width:30em; column-width:30em;">
<ol class="references">
<li id="cite_note-r5rs-0">^ <a href="#cite_ref-r5rs_0-0" title=""><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-r5rs_0-1" title=""><sup><i><b>b</b></i></sup></a> <a href="#cite_ref-r5rs_0-2" title=""><sup><i><b>c</b></i></sup></a> <a href="#cite_ref-r5rs_0-3" title=""><sup><i><b>d</b></i></sup></a> <a href="#cite_ref-r5rs_0-4" title=""><sup><i><b>e</b></i></sup></a> <a href="#cite_ref-r5rs_0-5" title=""><sup><i><b>f</b></i></sup></a> <a href="#cite_ref-r5rs_0-6" title=""><sup><i><b>g</b></i></sup></a> <a href="#cite_ref-r5rs_0-7" title=""><sup><i><b>h</b></i></sup></a> <a href="#cite_ref-r5rs_0-8" title=""><sup><i><b>i</b></i></sup></a> <cite style="font-style:normal" class="" id="CITEREFRichard_Kelsey.2C_William_Clinger.2C_Jonathan_Rees_et_al.1998">Richard Kelsey, William Clinger, Jonathan Rees et al. (August 1998). "<a href="http://www.schemers.org/Documents/Standards/R5RS/" class="external text" title="http://www.schemers.org/Documents/Standards/R5RS/" rel="nofollow">Revised<sup>5</sup> Report on the Algorithmic Language Scheme</a>". <i>Higher-Order and Symbolic Computation</i> <b>11</b> (1): 7–105. <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<span class="neverexpand"><a href="http://dx.doi.org/10.1023%2FA%3A1010051815785" class="external text" title="http://dx.doi.org/10.1023%2FA%3A1010051815785" rel="nofollow">10.1023/A:1010051815785</a></span><span class="printonly">. <a href="http://www.schemers.org/Documents/Standards/R5RS/" class="external free" title="http://www.schemers.org/Documents/Standards/R5RS/" rel="nofollow">http://www.schemers.org/Documents/Standards/R5RS/</a></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=Revised%3Csup%3E5%3C%2Fsup%3E+Report+on+the+Algorithmic+Language+Scheme&amp;rft.jtitle=Higher-Order+and+Symbolic+Computation&amp;rft.aulast=Richard+Kelsey%2C+William+Clinger%2C+Jonathan+Rees+et+al.&amp;rft.au=Richard+Kelsey%2C+William+Clinger%2C+Jonathan+Rees+et+al.&amp;rft.date=August+1998&amp;rft.volume=11&amp;rft.issue=1&amp;rft.pages=7%E2%80%93105&amp;rft_id=info:doi/10.1023%2FA%3A1010051815785&amp;rft_id=http%3A%2F%2Fwww.schemers.org%2FDocuments%2FStandards%2FR5RS%2F&amp;rfr_id=info:sid/en.wikipedia.org:Scheme_(programming_language)"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-r6rs-1">^ <a href="#cite_ref-r6rs_1-0" title=""><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-r6rs_1-1" title=""><sup><i><b>b</b></i></sup></a> <a href="#cite_ref-r6rs_1-2" title=""><sup><i><b>c</b></i></sup></a> <cite style="font-style:normal" class="web"><a href="http://www.r6rs.org/" class="external text" title="http://www.r6rs.org/" rel="nofollow">"R6RS.org"</a><span class="printonly">. <a href="http://www.r6rs.org/" class="external free" title="http://www.r6rs.org/" rel="nofollow">http://www.r6rs.org/</a></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=R6RS.org&amp;rft.atitle=&amp;rft_id=http%3A%2F%2Fwww.r6rs.org%2F&amp;rfr_id=info:sid/en.wikipedia.org:Scheme_(programming_language)"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-2"><b><a href="#cite_ref-2" title="">^</a></b> <a href="http://www.r6rs.org/ratification/results.html" class="external text" title="http://www.r6rs.org/ratification/results.html" rel="nofollow">R6RS ratification-voting results</a></li>
<li id="cite_note-3"><b><a href="#cite_ref-3" title="">^</a></b> <i>"We wanted to better understand Hewitt's actors model but were having trouble relating the actors model and its unusual terminology to familiar programming notions. We decided to construct a toy implementation of an actor language so that we could play with it. Using MacLisp as a working environment, we wrote a tiny Lisp interpreter and then added mechanisms for creating actors and sending messages."</i> <cite style="font-style:normal" class="" id="CITEREF.5B.5BGerald_Jay_Sussman.5D.5D_and_.5B.5BGuy_L._Steele.2C_Jr..5D.5D1998"><a href="/wiki/Gerald_Jay_Sussman" title="Gerald Jay Sussman">Gerald Jay Sussman</a> and <a href="/wiki/Guy_L._Steele,_Jr." title="Guy L. Steele, Jr.">Guy L. Steele, Jr.</a> (December 1998). "<a href="http://www.brics.dk/~hosc/local/HOSC-11-4-pp399-404.pdf" class="external text" title="http://www.brics.dk/~hosc/local/HOSC-11-4-pp399-404.pdf" rel="nofollow">The First Report on Scheme Revisited</a>" (PDF). <i>Higher-Order and Symbolic Computation</i> <b>11</b> (4): 399–404. <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<span class="neverexpand"><a href="http://dx.doi.org/10.1023%2FA%3A1010079421970" class="external text" title="http://dx.doi.org/10.1023%2FA%3A1010079421970" rel="nofollow">10.1023/A:1010079421970</a></span>. <a href="/wiki/International_Standard_Serial_Number" title="International Standard Serial Number">ISSN</a> <a href="http://www.worldcat.org/issn/1388-3690" class="external text" title="http://www.worldcat.org/issn/1388-3690" rel="nofollow">1388-3690</a><span class="printonly">. <a href="http://www.brics.dk/~hosc/local/HOSC-11-4-pp399-404.pdf" class="external free" title="http://www.brics.dk/~hosc/local/HOSC-11-4-pp399-404.pdf" rel="nofollow">http://www.brics.dk/~hosc/local/HOSC-11-4-pp399-404.pdf</a></span><span class="reference-accessdate">. Retrieved on 2006-06-19</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=The+First+Report+on+Scheme+Revisited&amp;rft.jtitle=Higher-Order+and+Symbolic+Computation&amp;rft.aulast=%5B%5BGerald+Jay+Sussman%5D%5D+and+%5B%5BGuy+L.+Steele%2C+Jr.%5D%5D&amp;rft.au=%5B%5BGerald+Jay+Sussman%5D%5D+and+%5B%5BGuy+L.+Steele%2C+Jr.%5D%5D&amp;rft.date=December+1998&amp;rft.volume=11&amp;rft.issue=4&amp;rft.pages=399%E2%80%93404&amp;rft_id=info:doi/10.1023%2FA%3A1010079421970&amp;rft_id=http%3A%2F%2Fwww.brics.dk%2F%7Ehosc%2Flocal%2FHOSC-11-4-pp399-404.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Scheme_(programming_language)"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-4"><b><a href="#cite_ref-4" title="">^</a></b> <a href="http://srfi.schemers.org/srfi-45/srfi-45.html" class="external text" title="http://srfi.schemers.org/srfi-45/srfi-45.html" rel="nofollow">srfi-45: Primitives for Expressing Iterative Lazy Algorithms</a> by <a href="/w/index.php?title=Andr%C3%A9_van_Tonder&amp;action=edit&amp;redlink=1" class="new" title="André van Tonder (page does not exist)">André van Tonder</a></li>
<li id="cite_note-5"><b><a href="#cite_ref-5" title="">^</a></b> <a href="http://srfi.schemers.org/srfi-41/srfi-41.html" class="external text" title="http://srfi.schemers.org/srfi-41/srfi-41.html" rel="nofollow">srfi-41: Streams</a> by <a href="/w/index.php?title=Philip_L._Bewig&amp;action=edit&amp;redlink=1" class="new" title="Philip L. Bewig (page does not exist)">Philip L. Bewig</a></li>
<li id="cite_note-6"><b><a href="#cite_ref-6" title="">^</a></b> <cite style="font-style:normal" class="web" id="CITEREFTaylor_Campbell2005">Taylor Campbell (2005-07-21). <a href="http://srfi.schemers.org/srfi-62/srfi-62.html" class="external text" title="http://srfi.schemers.org/srfi-62/srfi-62.html" rel="nofollow">"SRFI 62: S-expression comments"</a><span class="printonly">. <a href="http://srfi.schemers.org/srfi-62/srfi-62.html" class="external free" title="http://srfi.schemers.org/srfi-62/srfi-62.html" rel="nofollow">http://srfi.schemers.org/srfi-62/srfi-62.html</a></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=SRFI+62%3A+S-expression+comments&amp;rft.atitle=&amp;rft.aulast=Taylor+Campbell&amp;rft.au=Taylor+Campbell&amp;rft.date=2005-07-21&amp;rft_id=http%3A%2F%2Fsrfi.schemers.org%2Fsrfi-62%2Fsrfi-62.html&amp;rfr_id=info:sid/en.wikipedia.org:Scheme_(programming_language)"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-mzscheme-7"><b><a href="#cite_ref-mzscheme_7-0" title="">^</a></b> <cite style="font-style:normal" class="web" id="CITEREFMatthew_Flatt2006">Matthew Flatt (July 2006). <a href="http://download.plt-scheme.org/doc/352/html/mzscheme/#node_toc_node_chap_3" class="external text" title="http://download.plt-scheme.org/doc/352/html/mzscheme/#node_toc_node_chap_3" rel="nofollow">"PLT MzScheme Language Manual"</a><span class="printonly">. <a href="http://download.plt-scheme.org/doc/352/html/mzscheme/#node_toc_node_chap_3" class="external free" title="http://download.plt-scheme.org/doc/352/html/mzscheme/#node_toc_node_chap_3" rel="nofollow">http://download.plt-scheme.org/doc/352/html/mzscheme/#node_toc_node_chap_3</a></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=PLT+MzScheme+Language+Manual&amp;rft.atitle=&amp;rft.aulast=Matthew+Flatt&amp;rft.au=Matthew+Flatt&amp;rft.date=July+2006&amp;rft_id=http%3A%2F%2Fdownload.plt-scheme.org%2Fdoc%2F352%2Fhtml%2Fmzscheme%2F%23node_toc_node_chap_3&amp;rfr_id=info:sid/en.wikipedia.org:Scheme_(programming_language)"><span style="display: none;">&#160;</span></span></li>
<li id="cite_note-8"><b><a href="#cite_ref-8" title="">^</a></b> <a href="http://srfi.schemers.org/" class="external text" title="http://srfi.schemers.org/" rel="nofollow">Scheme Requests for Implementation</a>, accessed 14 September, 2007</li>
<li id="cite_note-9"><b><a href="#cite_ref-9" title="">^</a></b> <a href="https://www.cs.indiana.edu/~aghuloum/r6rs-libraries/" class="external text" title="https://www.cs.indiana.edu/~aghuloum/r6rs-libraries/" rel="nofollow">R^6RS Libraries and syntax-case system</a></li>
<li id="cite_note-10"><b><a href="#cite_ref-10" title="">^</a></b> <a href="http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-19.html#node_chap_E" class="external text" title="http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-19.html#node_chap_E" rel="nofollow">Revised^6 Report on the Algorithmic Language Scheme, Appendix E: language changes</a> by the R<sup>6</sup>RS Steering Committee, 26 September 2007</li>
<li id="cite_note-11"><b><a href="#cite_ref-11" title="">^</a></b> <a href="http://www.schemers.com" class="external text" title="http://www.schemers.com" rel="nofollow">schemers.com</a><a href="http://www.schemers.com/schools.html" class="external text" title="http://www.schemers.com/schools.html" rel="nofollow">list of Scheme-using schools</a></li>
<li id="cite_note-12"><b><a href="#cite_ref-12" title="">^</a></b> <a href="http://mitpress.mit.edu/" class="external text" title="http://mitpress.mit.edu/" rel="nofollow">MIT Press</a> <a href="http://mitpress.mit.edu/sicp/adopt-list.html" class="external text" title="http://mitpress.mit.edu/sicp/adopt-list.html" rel="nofollow">list of SICP-using schools</a></li>
<li id="cite_note-13"><b><a href="#cite_ref-13" title="">^</a></b> "I talked to Professor Sussman on the phone ... He said that he'd actually been trying to have 6.001 replaced for the last ten years (and I read somewhere that Professor Abelson was behind the move too). Understanding the principles is not essential for an introduction to the subject matter anymore. He sees 6.001 as obsolete." From <a href="http://www.mitadmissions.org/topics/learning/coursework/the_end_of_an_era_1.shtml" class="external text" title="http://www.mitadmissions.org/topics/learning/coursework/the_end_of_an_era_1.shtml" rel="nofollow">MIT Admissions Blog, 'The End of an Era'</a>, retrieved 2008-08-05</li>
<li id="cite_note-14"><b><a href="#cite_ref-14" title="">^</a></b> <a href="http://inst.eecs.berkeley.edu/~cs61a/" class="external text" title="http://inst.eecs.berkeley.edu/~cs61a/" rel="nofollow">Computer Science 61A, Berkeley</a></li>
<li id="cite_note-15"><b><a href="#cite_ref-15" title="">^</a></b> <a href="http://zoo.cs.yale.edu/classes/cs201/" class="external autonumber" title="http://zoo.cs.yale.edu/classes/cs201/" rel="nofollow">[1]</a> Introduction to Computer Science (CPSC 201)</li>
<li id="cite_note-16"><b><a href="#cite_ref-16" title="">^</a></b> <a href="http://cohesion.rice.edu//engineering/computerscience/about.cfm?doc_id=8045" class="external text" title="http://cohesion.rice.edu//engineering/computerscience/about.cfm?doc_id=8045" rel="nofollow">Computer Science Courses 100-400, Rice University</a></li>
<li id="cite_note-17"><b><a href="#cite_ref-17" title="">^</a></b> <a href="http://www.ccs.neu.edu/home/matthias/107-f08/readings.html" class="external autonumber" title="http://www.ccs.neu.edu/home/matthias/107-f08/readings.html" rel="nofollow">[2]</a>Programming Design Paradigms CSG107 Course Readings</li>
<li id="cite_note-18"><b><a href="#cite_ref-18" title="">^</a></b> <a href="http://community.schemewiki.org/?scheme-faq-general" class="external text" title="http://community.schemewiki.org/?scheme-faq-general" rel="nofollow">scheme-faq-general; see <i>What is Scheme used for?</i></a></li>
<li id="cite_note-19"><b><a href="#cite_ref-19" title="">^</a></b> <a href="http://xml.coverpages.org/dsssl.html" class="external text" title="http://xml.coverpages.org/dsssl.html" rel="nofollow">DSSSL Technology report</a></li>
<li id="cite_note-20"><b><a href="#cite_ref-20" title="">^</a></b> "<i>The major scripting language for the GIMP that has been attached to it today is Scheme.</i>" From <a href="http://www.gimp.org/tutorials/Basic_Scheme/" class="external text" title="http://www.gimp.org/tutorials/Basic_Scheme/" rel="nofollow">The GIMP Basic Scheme Tutorial</a>.</li>
<li id="cite_note-21"><b><a href="#cite_ref-21" title="">^</a></b> <a href="http://www.synopsys.com/products/tcad/pdfs/sde_ds.pdf" class="external free" title="http://www.synopsys.com/products/tcad/pdfs/sde_ds.pdf" rel="nofollow">http://www.synopsys.com/products/tcad/pdfs/sde_ds.pdf</a></li>
<li id="cite_note-22"><b><a href="#cite_ref-22" title="">^</a></b> <a href="http://practical-scheme.net/docs/ILC2002.html" class="external free" title="http://practical-scheme.net/docs/ILC2002.html" rel="nofollow">http://practical-scheme.net/docs/ILC2002.html</a></li>
</ol>
</div>
<p><a name="Further_reading" id="Further_reading"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=19" title="Edit section: Further reading">edit</a>]</span> <span class="mw-headline">Further reading</span></h2>
<ul>
<li><a href="ftp://ftp.cs.utexas.edu/pub/garbage/cs345/schintro-v14/schintro_toc.html" class="external text" title="ftp://ftp.cs.utexas.edu/pub/garbage/cs345/schintro-v14/schintro_toc.html" rel="nofollow">An Introduction to Scheme and its Implementation</a> (<a href="http://www.federated.com/~jim/schintro-v14/schintro_toc.html" class="external text" title="http://www.federated.com/~jim/schintro-v14/schintro_toc.html" rel="nofollow">alternative link</a>)</li>
<li><cite style="font-style:normal" class="web" id="CITEREFChristopher_T._Haynes1999">Christopher T. Haynes (1999-06-22). <a href="http://acm.org/tsc/sstd.html" class="external text" title="http://acm.org/tsc/sstd.html" rel="nofollow">"The Scheme Programming Language Standardization Experience"</a><span class="printonly">. <a href="http://acm.org/tsc/sstd.html" class="external free" title="http://acm.org/tsc/sstd.html" rel="nofollow">http://acm.org/tsc/sstd.html</a></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=The+Scheme+Programming+Language+Standardization+Experience&amp;rft.atitle=&amp;rft.aulast=Christopher+T.+Haynes&amp;rft.au=Christopher+T.+Haynes&amp;rft.date=1999-06-22&amp;rft_id=http%3A%2F%2Facm.org%2Ftsc%2Fsstd.html&amp;rfr_id=info:sid/en.wikipedia.org:Scheme_(programming_language)"><span style="display: none;">&#160;</span></span></li>
<li><cite style="font-style:normal" class="web" id="CITEREF.5B.5BGuy_L._Steele.2C_Jr..5D.5D.2C_.5B.5BRichard_P._Gabriel.5D.5D"><a href="/wiki/Guy_L._Steele,_Jr." title="Guy L. Steele, Jr.">Guy L. Steele, Jr.</a>, <a href="/wiki/Richard_P._Gabriel" title="Richard P. Gabriel">Richard P. Gabriel</a>. <a href="http://www.dreamsongs.com/NewFiles/HOPL2-Uncut.pdf" class="external text" title="http://www.dreamsongs.com/NewFiles/HOPL2-Uncut.pdf" rel="nofollow">"The Evolution of Lisp"</a> (pdf)<span class="printonly">. <a href="http://www.dreamsongs.com/NewFiles/HOPL2-Uncut.pdf" class="external free" title="http://www.dreamsongs.com/NewFiles/HOPL2-Uncut.pdf" rel="nofollow">http://www.dreamsongs.com/NewFiles/HOPL2-Uncut.pdf</a></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=The+Evolution+of+Lisp&amp;rft.atitle=&amp;rft.aulast=%5B%5BGuy+L.+Steele%2C+Jr.%5D%5D%2C+%5B%5BRichard+P.+Gabriel%5D%5D&amp;rft.au=%5B%5BGuy+L.+Steele%2C+Jr.%5D%5D%2C+%5B%5BRichard+P.+Gabriel%5D%5D&amp;rft_id=http%3A%2F%2Fwww.dreamsongs.com%2FNewFiles%2FHOPL2-Uncut.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Scheme_(programming_language)"><span style="display: none;">&#160;</span></span></li>
<li><a href="/wiki/Gerald_Sussman" title="Gerald Sussman" class="mw-redirect">Gerald Sussman</a> and <a href="/wiki/Guy_Steele" title="Guy Steele" class="mw-redirect">Guy Steele</a>. <a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.128.80" class="external text" title="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.128.80" rel="nofollow"><i>SCHEME: An Interpreter for Extended Lambda Calculus</i> AI Memo 349</a>, MIT Artificial Intelligence Laboratory, Cambridge, Massachusetts, December 1975.</li>
</ul>
<p><a name="External_links" id="External_links"></a></p>
<h2><span class="editsection">[<a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit&amp;section=20" title="Edit section: External links">edit</a>]</span> <span class="mw-headline">External links</span></h2>
<table class="metadata plainlinks mbox-small" style="border:1px solid #aaa; background-color:#f9f9f9;">
<tr>
<td class="mbox-image"><a href="http://en.wikibooks.org/wiki/Special:Search/Scheme_(programming_language)" title="b:Special:Search/Scheme (programming language)"><img alt="Sister project" src="http://upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/40px-Wikibooks-logo-en-noslogan.svg.png" width="40" height="40" border="0" /></a></td>
<td class="mbox-text" style=""><a href="/wiki/Wikibooks" title="Wikibooks">Wikibooks</a> has a book on the topic of
<div style="margin-left:10px;"><i><b><a href="http://en.wikibooks.org/wiki/Scheme" class="extiw" title="wikibooks:Scheme">Scheme</a></b></i></div>
</td>
</tr>
</table>
<table class="metadata plainlinks mbox-small" style="border:1px solid #aaa; background-color:#f9f9f9;">
<tr>
<td class="mbox-image"><a href="http://en.wikibooks.org/wiki/Special:Search/Scheme_(programming_language)" title="b:Special:Search/Scheme (programming language)"><img alt="Sister project" src="http://upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/40px-Wikibooks-logo-en-noslogan.svg.png" width="40" height="40" border="0" /></a></td>
<td class="mbox-text" style=""><a href="/wiki/Wikibooks" title="Wikibooks">Wikibooks</a> has a book on the topic of
<div style="margin-left:10px;"><i><b><a href="http://en.wikibooks.org/wiki/Write_Yourself_a_Scheme_in_48_Hours" class="extiw" title="wikibooks:Write Yourself a Scheme in 48 Hours">Write Yourself a Scheme in 48 Hours</a></b></i></div>
</td>
</tr>
</table>
<ul>
<li><a href="http://www.r6rs.org" class="external text" title="http://www.r6rs.org" rel="nofollow">The latest version of the <i>R<sup>n</sup>RS</i> standard</a></li>
<li><a href="http://www.ccs.neu.edu/home/dorai/t-y-scheme/t-y-scheme.html" class="external text" title="http://www.ccs.neu.edu/home/dorai/t-y-scheme/t-y-scheme.html" rel="nofollow">A tutorial for new Scheme programmers</a>, the text of <a href="/wiki/Teach_Yourself_Scheme_in_Fixnum_Days" title="Teach Yourself Scheme in Fixnum Days">Teach Yourself Scheme in Fixnum Days</a> by Dorai Sitaram</li>
<li><a href="http://www.dmoz.org/Computers/Programming/Languages/Lisp/Scheme/" class="external text" title="http://www.dmoz.org/Computers/Programming/Languages/Lisp/Scheme/" rel="nofollow">Scheme</a> at the <a href="/wiki/Open_Directory_Project" title="Open Directory Project">Open Directory Project</a></li>
<li><a href="http://srfi.schemers.org/" class="external text" title="http://srfi.schemers.org/" rel="nofollow">Scheme Requests for Implementation (SRFI)</a></li>
<li><a href="http://www.schemers.org/" class="external text" title="http://www.schemers.org/" rel="nofollow">Schemers.org</a></li>
<li><a href="http://halogen.note.amherst.edu/~jdtang/scheme_in_48/tutorial/overview.html" class="external text" title="http://halogen.note.amherst.edu/~jdtang/scheme_in_48/tutorial/overview.html" rel="nofollow">Write Yourself a Scheme in 48 hours</a></li>
<li><a href="http://dynamo.iro.umontreal.ca/~gambit/wiki/index.php/A_Tour_of_Scheme_in_Gambit" class="external text" title="http://dynamo.iro.umontreal.ca/~gambit/wiki/index.php/A_Tour_of_Scheme_in_Gambit" rel="nofollow">A Tour of Scheme in Gambit</a>, introduction on how to do software development in <a href="/wiki/Gambit_(Scheme_implementation)" title="Gambit (Scheme implementation)">Gambit Scheme</a> for people with experiences in general programming languages.</li>
</ul>


<!-- 
NewPP limit report
Preprocessor node count: 4635/1000000
Post-expand include size: 38213/2048000 bytes
Template argument size: 13947/2048000 bytes
Expensive parser function count: 0/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:28119-0!1!0!default!!en!2 and timestamp 20090404030311 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Scheme_(programming_language)">http://en.wikipedia.org/wiki/Scheme_(programming_language)</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Dynamic_programming_languages" title="Category:Dynamic programming languages">Dynamic programming languages</a></span> | <span dir='ltr'><a href="/wiki/Category:Educational_programming_languages" title="Category:Educational programming languages">Educational programming languages</a></span> | <span dir='ltr'><a href="/wiki/Category:Functional_languages" title="Category:Functional languages">Functional languages</a></span> | <span dir='ltr'><a href="/wiki/Category:Scheme_programming_language" title="Category:Scheme programming language">Scheme programming language</a></span> | <span dir='ltr'><a href="/wiki/Category:Lisp_programming_language_family" title="Category:Lisp programming language family">Lisp programming language family</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_example_Scheme_code" title="Category:Articles with example Scheme code">Articles with example Scheme code</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Scheme_(programming_language)" title="View the content page [c]" accesskey="c">Article</a></li>
				 <li id="ca-talk"><a href="/wiki/Talk:Scheme_(programming_language)" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Scheme_(programming_language)&amp;action=edit" title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit this page</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Scheme_(programming_language)&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Scheme_(programming_language)" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
				<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content — the best of Wikipedia">Featured content</a></li>
				<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Wikipedia [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if one exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search Wikipedia for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-interaction'>
		<h5>Interaction</h5>
		<div class='pBody'>
			<ul>
				<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
				<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Donate" title="Support us">Donate to Wikipedia</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Scheme_(programming_language)" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Scheme_(programming_language)" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Scheme_(programming_language)&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Scheme_(programming_language)&amp;oldid=279846489" title="Permanent link to this version of the page">Permanent link</a></li><li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Scheme_(programming_language)&amp;id=279846489">Cite this page</a></li>			</ul>
		</div>
	</div>
	<div id="p-lang" class="portlet">
		<h5>Languages</h5>
		<div class="pBody">
			<ul>
				<li class="interwiki-bn"><a href="http://bn.wikipedia.org/wiki/%E0%A6%B8%E0%A7%8D%E0%A6%95%E0%A6%BF%E0%A6%AE_(%E0%A6%AA%E0%A7%8D%E0%A6%B0%E0%A7%8B%E0%A6%97%E0%A7%8D%E0%A6%B0%E0%A6%BE%E0%A6%AE%E0%A6%BF%E0%A6%82_%E0%A6%AD%E0%A6%BE%E0%A6%B7%E0%A6%BE)">বাংলা</a></li>
				<li class="interwiki-bg"><a href="http://bg.wikipedia.org/wiki/Scheme">Български</a></li>
				<li class="interwiki-ca"><a href="http://ca.wikipedia.org/wiki/Scheme">Català</a></li>
				<li class="interwiki-cs"><a href="http://cs.wikipedia.org/wiki/Scheme">Česky</a></li>
				<li class="interwiki-da"><a href="http://da.wikipedia.org/wiki/Scheme">Dansk</a></li>
				<li class="interwiki-de"><a href="http://de.wikipedia.org/wiki/Scheme">Deutsch</a></li>
				<li class="interwiki-es"><a href="http://es.wikipedia.org/wiki/Scheme">Español</a></li>
				<li class="interwiki-eo"><a href="http://eo.wikipedia.org/wiki/Scheme">Esperanto</a></li>
				<li class="interwiki-fa"><a href="http://fa.wikipedia.org/wiki/%D8%A7%D8%B3%DA%A9%DB%8C%D9%85">فارسی</a></li>
				<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Scheme">Français</a></li>
				<li class="interwiki-ko"><a href="http://ko.wikipedia.org/wiki/%EC%8A%A4%ED%82%B4_(%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D_%EC%96%B8%EC%96%B4)">한국어</a></li>
				<li class="interwiki-hr"><a href="http://hr.wikipedia.org/wiki/Scheme">Hrvatski</a></li>
				<li class="interwiki-it"><a href="http://it.wikipedia.org/wiki/Scheme">Italiano</a></li>
				<li class="interwiki-he"><a href="http://he.wikipedia.org/wiki/Scheme">עברית</a></li>
				<li class="interwiki-lt"><a href="http://lt.wikipedia.org/wiki/Scheme">Lietuvių</a></li>
				<li class="interwiki-hu"><a href="http://hu.wikipedia.org/wiki/Scheme">Magyar</a></li>
				<li class="interwiki-nl"><a href="http://nl.wikipedia.org/wiki/Scheme">Nederlands</a></li>
				<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/Scheme">日本語</a></li>
				<li class="interwiki-no"><a href="http://no.wikipedia.org/wiki/Scheme">‪Norsk (bokmål)‬</a></li>
				<li class="interwiki-pl"><a href="http://pl.wikipedia.org/wiki/Scheme">Polski</a></li>
				<li class="interwiki-pt"><a href="http://pt.wikipedia.org/wiki/Scheme">Português</a></li>
				<li class="interwiki-ru"><a href="http://ru.wikipedia.org/wiki/Scheme">Русский</a></li>
				<li class="interwiki-simple"><a href="http://simple.wikipedia.org/wiki/Scheme_(programming_language)">Simple English</a></li>
				<li class="interwiki-sk"><a href="http://sk.wikipedia.org/wiki/Scheme_(programovac%C3%AD_jazyk)">Slovenčina</a></li>
				<li class="interwiki-sl"><a href="http://sl.wikipedia.org/wiki/Scheme_(programski_jezik)">Slovenščina</a></li>
				<li class="interwiki-fi"><a href="http://fi.wikipedia.org/wiki/Scheme">Suomi</a></li>
				<li class="interwiki-sv"><a href="http://sv.wikipedia.org/wiki/Scheme">Svenska</a></li>
				<li class="interwiki-vi"><a href="http://vi.wikipedia.org/wiki/Scheme">Tiếng Việt</a></li>
				<li class="interwiki-tr"><a href="http://tr.wikipedia.org/wiki/Scheme">Türkçe</a></li>
				<li class="interwiki-uk"><a href="http://uk.wikipedia.org/wiki/Scheme">Українська</a></li>
				<li class="interwiki-bat-smg"><a href="http://bat-smg.wikipedia.org/wiki/Scheme">Žemaitėška</a></li>
				<li class="interwiki-zh"><a href="http://zh.wikipedia.org/wiki/Scheme">中文</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins-1.5/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://wikimediafoundation.org/"><img src="/images/wikimedia-button.png" border="0" alt="Wikimedia Foundation"/></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 26 March 2009, at 18:41.</li>
					<li id="copyright">All text is available under the terms of the <a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License" title="Wikipedia:Text of the GNU Free Documentation License">GNU Free Documentation License</a>. (See <b><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights" title="Wikipedia:Copyrights">Copyrights</a></b> for details.) <br /> Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org">Wikimedia Foundation, Inc.</a>, a U.S. registered <a class='internal' href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29" title="501(c)(3)">501(c)(3)</a> <a href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</a> <a class='internal' href="http://en.wikipedia.org/wiki/Non-profit_organization" title="Non-profit organization">nonprofit</a> <a href="http://en.wikipedia.org/wiki/Charitable_organization" title="Charitable organization">charity</a>.<br /></li>
					<li id="privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
					<li id="disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served by srv128 in 0.048 secs. --></body></html>
